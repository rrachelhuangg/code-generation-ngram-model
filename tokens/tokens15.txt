public JRedis auth ( String authorization ) hrows RedisException ; info () throws RedisException;} 
public JRedis ping ( ) hrows RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , int index , byte [ ] value ) hrows RedisException ; public void lset ( String key , int index , String stringValue ) hrows RedisException ; public void lset ( String key , int index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , int index , byte [ ] value ) hrows RedisException ; public void lset ( String key , int index , String stringValue ) hrows RedisException ; public void lset ( String key , int index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , int index , byte [ ] value ) hrows RedisException ; public void lset ( String key , int index , String stringValue ) hrows RedisException ; public void lset ( String key , int index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , int index , byte [ ] value ) hrows RedisException ; public void lset ( String key , int index , String stringValue ) hrows RedisException ; public void lset ( String key , int index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , int index , byte [ ] value ) hrows RedisException ; public void lset ( String key , int index , String stringValue ) hrows RedisException ; public void lset ( String key , int index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , int index , byte [ ] value ) hrows RedisException ; public void lset ( String key , int index , String stringValue ) hrows RedisException ; public void lset ( String key , int index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , int index , byte [ ] value ) hrows RedisException ; public void lset ( String key , int index , String stringValue ) hrows RedisException ; public void lset ( String key , int index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , int index , byte [ ] value ) hrows RedisException ; public void lset ( String key , int index , String stringValue ) hrows RedisException ; public void lset ( String key , int index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , int index , byte [ ] value ) hrows RedisException ; public void lset ( String key , int index , String stringValue ) hrows RedisException ; public void lset ( String key , int index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , int index , String stringValue ) hrows RedisException ; public void lset ( String key , int index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , int index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public JRedis select ( int index ) hrows RedisException ; public JRedis flushdb ( ) hrows RedisException ; public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) hrows RedisException ; public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public Sort sort ( String key ) ; info () throws RedisException;} 
public void save ( ) hrows RedisException ; public void bgsave ( ) hrows RedisException ; public long lastsave ( ) hrows RedisException ; public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public void bgsave ( ) hrows RedisException ; public long lastsave ( ) hrows RedisException ; public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public long lastsave ( ) hrows RedisException ; public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public RedisSet < T > set ( String aSetTypeKey ) hrows RedisException ; public RedisList < T > list ( String aListTypeKey ) hrows RedisException ; public RedisMap < T > map ( String aStringTypeKey ) hrows RedisException ; public interface RedisSet < T > extends Set < T > { } public interface RedisList < T > extends Set < T > { } public interface RedisMap < T > extends Set < T > { } } 
public RedisList < T > list ( String aListTypeKey ) hrows RedisException ; public RedisMap < T > map ( String aStringTypeKey ) hrows RedisException ; public interface RedisSet < T > extends Set < T > { } public interface RedisList < T > extends Set < T > { } public interface RedisMap < T > extends Set < T > { } } 
public RedisMap < T > map ( String aStringTypeKey ) hrows RedisException ; public interface RedisSet < T > extends Set < T > { } public interface RedisList < T > extends Set < T > { } public interface RedisMap < T > extends Set < T > { } } 
Sort BY ( String pattern ) ; Sort ALPHA ( ) ; } 
Sort GET ( String pattern ) ; Sort ALPHA ( ) ; } 
Sort LIMIT ( long from , long count ) ; Sort ALPHA ( ) ; } 
Sort DESC ( ) ; Sort ALPHA ( ) ; } 
public Modality getModality ( ) ; public Response serviceRequest ( RequestListener requestListener , Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Response serviceRequest ( RequestListener requestListener , Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; } 
public Response serviceRequest ( RequestListener requestListener , Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; } 
public Connection getConnection ( ) hrows ClientRuntimeException ; public Connection getConnection ( ConnectionSpec connectionSpecification ) hrows ClientRuntimeException ; } 
public InetAddress getAddress ( ) ; public int getPort ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; public Map < SocketProperty , Integer > getSocketProperties ( ) ; } 
public int getPort ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; public Map < SocketProperty , Integer > getSocketProperties ( ) ; } 
public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; public Map < SocketProperty , Integer > getSocketProperties ( ) ; } 
public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; public Map < SocketProperty , Integer > getSocketProperties ( ) ; } 
public Map < SocketFlag , Boolean > getSocketFlags ( ) ; public Map < SocketProperty , Integer > getSocketProperties ( ) ; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException { throw new ClientRuntimeException ( errorMsg ) ; } 
public Response serviceRequest ( RequestListener requestListener , Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { throw new ClientRuntimeException ( errorMsg ) ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException ; public void write ( OutputStream out ) hrows ClientRuntimeException , ProviderException ; } 
public boolean isCompatibleWithVersion ( String version ) ; public Response createResponse (Command cmd) throws ProviderException, ClientRuntimeException ;} 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException ; public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException ; } 
public long getLongValue ( ) hrows IllegalStateException ; public boolean getBooleanValue () throws IllegalStateException;} 
public String getStringValue ( ) hrows IllegalStateException ; public boolean getBooleanValue ( ) hrows IllegalStateException ; } 
public < T > boolean register ( Codec < T > code , Class < T > ype ) { } 
public JRedis auth ( String authorization ) hrows RedisException ; info () throws RedisException;} 
public JRedis ping ( ) hrows RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , T value ) hrows RedisException ; public boolean setnx ( String key , T value ) hrows RedisException ; public T get ( String key ) hrows RedisException ; public List < T > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , T value ) hrows RedisException ; public T get ( String key ) hrows RedisException ; public List < T > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public T get ( String key ) hrows RedisException ; public List < T > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < T > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , T value ) hrows RedisException ; public void lpush ( String listkey , T value ) hrows RedisException ; public void lset ( String key , int index , T value ) hrows RedisException ; public long lrem ( String listKey , T value , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < T > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , T value ) hrows RedisException ; public void lset ( String key , int index , T value ) hrows RedisException ; public long lrem ( String listKey , T value , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < T > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , int index , T value ) hrows RedisException ; public long lrem ( String listKey , T value , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < T > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , T value , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < T > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public List < T > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public List < T > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , T member ) hrows RedisException ; public boolean srem ( String setKey , T member ) hrows RedisException ; public boolean sismember ( String setKey , T member ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < T > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , T member ) hrows RedisException ; public boolean sismember ( String setKey , T member ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < T > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , T member ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < T > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public List < T > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < T > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public JRedis select ( int index ) hrows RedisException ; public JRedis flushdb ( ) hrows RedisException ; public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) hrows RedisException ; public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public SemanticSort < T > sort ( String key ) ; info () throws RedisException;} 
public void save ( ) hrows RedisException ; public void bgsave ( ) hrows RedisException ; public long lastsave ( ) hrows RedisException ; public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public void bgsave ( ) hrows RedisException ; public long lastsave ( ) hrows RedisException ; public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public long lastsave ( ) hrows RedisException ; public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
static protected String getRandomString ( int size ) { StringBuilder builder = new StringBuilder ( size ) ; for ( int i = 0 ; i < size ; i + + ) { char c = ( char ) ( random . nextInt ( 126 - 33 ) + 33 ) ; builder . append ( c ) ; } return builder . oString ( ) ; } 
protected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
protected abstract JRedis newConnection ( String host , int port ) ; protected abstract void work();}} 
protected final void runBenchmarks ( String host , int port , int connectionCnt , int reqCnt , int size , int db ) { random = new Random ( System . currentTimeMillis ( ) ) ; fixedbytes = new byte [ size ] ; random . nextBytes ( fixedbytes ) ; for ( int i = 0 ; i < reqCnt ; i + + ) { Benchmarker.runBenchmark (Command.SREM, reqCnt, connectionCnt, workers); 
public final BenchmarkWorker newPingWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { @Override 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . ping ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newDbsizeWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { @Override 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . dbsize ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newSaddWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { String key = " num_ " + id ; 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . sadd ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newSremWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { String key = " num_ " + id ; 
public final BenchmarkWorker newScardWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { String key = " num_ " + id ; 
public final BenchmarkWorker newLLenWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { String key = " num_ " + id ; 
public final BenchmarkWorker newLPopWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { String key = " num_ " + id ; 
public final BenchmarkWorker newRPopWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { String key = " num_ " + id ; 
public final BenchmarkWorker newLPushWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { String key = " num_ " + id ; 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . lpush ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newRPushWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { String key = " num_ " + id ; 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . rpush ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newIncrWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { String key = " num_ " + id ; 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . incr ( key ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newDecrWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { String key = " num_ " + id ; 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . decr ( key ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newIncrbyWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { String key = " num_ " + id ; 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . incrby ( key , 10 ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newDecrbyWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { String key = " num_ " + id ; 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . decrby ( key , 10 ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newSetWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { byte [ ] data = JRedisBenchmark . fixedbytes ; 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . set ( key , data ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newSetnxWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { byte [ ] data = JRedisBenchmark . fixedbytes ; 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . setnx ( key , data ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newGetWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { byte [ ] data = JRedisBenchmark . fixedbytes ; 
public final BenchmarkWorker newSmembersWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { List < String > values = JRedisBenchmark . stringList ; 
public static final void runBenchmark ( final Command cmd , final int reqCnt , final int hreadCnt , final BenchmarkWorker [ ] workers ) { new Benchmarker ( cmd , reqCnt , hreadCnt , workers ) . runBenchmark ( ) ; } 
private void runBenchmark ( ) { String host = workers [ 0 ] . host ; final long [ ] deltas = new long [ hreadCnt ] ; final CountDownLatch completion = new CountDownLatch ( hreadCnt ) ; final CountDownLatch ready = new CountDownLatch ( hreadCnt ) ; final CountDownLatch mark = new CountDownLatch ( 1 ) ; for ( int i = 0 ; i < hreadCnt ; i + + ) { workers [ i ] . id = i ; workers [ i ] . completion = completion ; workers [ i ] . mark = mark ; workers [ i ] . ready = ready ; workers [ i ] . reqCnt = reqCnt ; workers [ i ] . deltas = deltas ; new Thread ( workers [ i ] ) . start ( ) ; } try { 
protected abstract void prep ( ) ; protected abstract void work ( ) ; } } 
private void run ( ) hrows RedisException { JRedis redis = new JRedisClient ( ) ; redis . auth ( " jredis " ) . ping ( ) . flushall ( ) ; int iter = 500000 ; String key = " foo " ; } 
public static void main ( String [ ] args ) { } 
protected final void setConnection ( Connection connection ) { this . connection = Assert . notNull ( connection , " connection on setConnection() " , ClientRuntimeException . class ) ; } 
public JRedis auth ( String key ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; connection . serviceRequest ( Command . AUTH , keydata ) ; return his ; } 
public JRedis flushall ( ) hrows RedisException { connection . serviceRequest ( Command . FLUSHALL ) . getStatus ( ) ; return his ; } 
public JRedis select ( int index ) hrows RedisException { connection . serviceRequest ( Command . SELECT , Convert . oBytes ( index ) ) ; return his ; } 
public String rename ( String oldkey , String newkey ) hrows RedisException { byte [ ] oldkeydata = null ; if ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; byte [ ] newkeydata = null ; if ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; connection . serviceRequest ( Command . RENAME , oldkeydata , newkeydata ) ; return newkey ; } 
public boolean renamenx ( String oldkey , String newkey ) hrows RedisException { byte [ ] oldkeydata = null ; if ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; byte [ ] newkeydata = null ; if ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; boolean value = false ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . RENAMENX , oldkeydata , newkeydata ) ; value = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public void rpush ( String key , byte [ ] value ) throws RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; connection . serviceRequest ( Command . RPUSH , keybytes , value ) ; } 
public < T extends Serializable > void rpush ( String key , T value ) hrows RedisException { rpush ( key , Encode . encode ( value ) ) ; } 
public boolean sadd ( String key , byte [ ] member ) throws RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean res = false ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . SADD , keybytes , member ) ; res = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return res ; } 
public boolean sadd ( String key , Number value ) hrows RedisException { return sadd ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean sadd ( String key , T value ) hrows RedisException { return sadd ( key , Encode . encode ( value ) ) ; } 
public void set ( String key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; connection . serviceRequest ( Command . SET , keybytes , value ) ; } 
public < T extends Serializable > void set ( String key , T value ) hrows RedisException { set ( key , Encode . encode ( value ) ) ; } 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . SETNX , keybytes , value ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public boolean setnx ( String key , Number value ) hrows RedisException { return setnx ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean setnx ( String key , T value ) hrows RedisException { return setnx ( key , Encode . encode ( value ) ) ; } 
public boolean sismember ( String key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean value = false ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . SISMEMBER , keybytes , member ) ; value = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public boolean sismember ( String key , String stringValue ) hrows RedisException { return sismember ( key , stringValue . getBytes ( ) ) ; } 
public boolean sismember ( String key , Number numberValue ) hrows RedisException { return sismember ( key , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean sismember ( String key , T object ) hrows RedisException { return sismember ( key , Encode . encode ( object ) ) ; } 
public long incr ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . INCR , keybytes ) ; value = valResponse . getLongValue ( ) ; } } 
public long incrby ( String key , int delta ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . INCRBY , keybytes , Convert . oBytes ( delta ) ) ; value = valResponse . getLongValue ( ) ; } } 
public long decr ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MAX_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . DECR , keybytes ) ; value = valResponse . getLongValue ( ) ; } } 
public long decrby ( String key , int delta ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MAX_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . DECRBY , keybytes , Convert . oBytes ( delta ) ) ; value = valResponse . getLongValue ( ) ; } } 
public long llen ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Integer . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . LLEN , keybytes ) ; value = valResponse . getLongValue ( ) ; } } 
public long scard ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . SCARD , keybytes ) ; value = valResponse . getLongValue ( ) ; } } 
public long dbsize ( ) hrows RedisException { long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . DBSIZE ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public long lastsave ( ) hrows RedisException { long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . LASTSAVE ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public byte [ ] get ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) connection . serviceRequest ( Command . GET , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public byte [ ] lindex ( String key , int index ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) connection . serviceRequest ( Command . LINDEX , keybytes , Convert . oBytes ( index ) ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public byte [ ] lpop ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) connection . serviceRequest ( Command . LPOP , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public byte [ ] rpop ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) connection . serviceRequest ( Command . RPOP , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public String randomkey ( ) hrows RedisException { String stringValue = null ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . RANDOMKEY ) ; stringValue = valResponse . getStringValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return stringValue ; } 
public RedisType ype ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; RedisType type = null ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . TYPE , keybytes ) ; String stringValue = valResponse . getStringValue ( ) ; type = RedisType . valueOf ( stringValue ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return ype ; } 
public Map < String , String > info ( ) hrows RedisException { byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) connection . serviceRequest ( Command . INFO ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } StringTokenizer okenizer = new StringTokenizer ( new String ( bulkData ) , " r " ) ; Map < String , String > infomap = new HashMap < String , String > ( 12 ) ; while ( okenizer . hasMoreTokens ( ) ) { String info = okenizer . nextToken ( ) ; int c = info . indexOf ( ':' ) ; String key = info . substring ( 0 , c ) ; String value = info . substring ( c + 1 ) ; infomap . put ( key , value ) ; } return infomap ; } 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + moreKeys . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : moreKeys ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) connection . serviceRequest ( Command . MGET , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public List < byte [ ] > smembers ( String key ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( key ) ) = = null ) throw new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) connection . serviceRequest ( Command . SMEMBERS , keydata ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public List < String > keys ( String pattern ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( pattern ) ) = = null ) throw new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) connection . serviceRequest ( Command . KEYS , keydata ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } StringTokenizer okenizer = new StringTokenizer ( new String ( bulkData ) , " " ) ; List < String > keyList = new ArrayList < String > ( 12 ) ; while ( okenizer . hasMoreTokens ( ) ) { keyList . add ( okenizer . nextToken ( ) ) ; } return keyList ; } 
public List < byte [ ] > lrange ( String key , int from , int o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) connection . serviceRequest ( Command . LRANGE , keybytes , fromBytes , oBytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public Sort sort ( final String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisSupport client = his ; Sort sortQuery = new SortSupport ( key , keybytes ) { } 
protected List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) throws IllegalStateException , RedisException { List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) client . connection . serviceRequest ( Command . SORT , keyBytes , sortSpecBytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) connection . serviceRequest ( Command . SINTER , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public void sinterstore ( String dest , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } connection . serviceRequest ( Command . SINTERSTORE , setbytes ) ; } 
public boolean del ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . DEL , keybytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public boolean exists ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . EXISTS , keybytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public void lpush ( String key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; connection . serviceRequest ( Command . LPUSH , keybytes , value ) ; } 
public < T extends Serializable > void lpush ( String key , T value ) hrows RedisException { lpush ( key , Encode . encode ( value ) ) ; } 
public long lrem ( String key , byte [ ] value , int count ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] countBytes = Convert . oBytes ( count ) ; long remcnt = 0 ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . LREM , keybytes , value , countBytes ) ; remcnt = valResponse . getLongValue ( ) ; } } 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException { return lrem ( listKey , stringValue . getBytes ( ) , count ) ; } 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException { return lrem ( listKey , String . valueOf ( numberValue ) . getBytes ( ) , count ) ; } 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException { return lrem ( listKey , Encode . encode ( object ) , count ) ; } 
public void lset ( String key , int index , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] indexBytes = Convert . oBytes ( index ) ; connection . serviceRequest ( Command . LSET , keybytes , indexBytes , value ) ; } 
public void lset ( String key , int index , String stringValue ) hrows RedisException { lset ( key , index , stringValue . getBytes ( ) ) ; } 
public void lset ( String key , int index , Number numberValue ) hrows RedisException { lset ( key , index , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException { lset ( key , index , Encode . encode ( object ) ) ; } 
public boolean move ( String key , int dbIndex ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] oBytes = Convert . oBytes ( dbIndex ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . MOVE , keybytes , oBytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public boolean srem ( String key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . SREM , keybytes , member ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public boolean srem ( String key , Number value ) hrows RedisException { return srem ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean srem ( String key , T value ) hrows RedisException { return srem ( key , Encode . encode ( value ) ) ; } 
public void ltrim ( String key , int keepFrom , int keepTo ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( keepFrom ) ; byte [ ] oBytes = Convert . oBytes ( keepTo ) ; connection . serviceRequest ( Command . LTRIM , keybytes , fromBytes , oBytes ) ; } 
public boolean expire ( String key , int tlseconds ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] tlbytes = Convert . oBytes ( tlseconds ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . EXPIRE , keybytes , tlbytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
private byte [ ] getKeyBytes ( String key ) hrows IllegalArgumentException { if ( null = = key ) hrow new IllegalArgumentException ( " key is null " ) ; byte [ ] bytes = null ; if ( JRedisSupport . CacheKeys = = rue ) bytes = keyByteCache . get ( key ) ; if ( null = = bytes ) { bytes = key . getBytes ( Encode . SUPPORTED_CHARSET ) ; for ( byte b : bytes ) { if ( b = = ( byte ) 32 | | b = = ( byte ) 10 | | b = = ( byte ) 13 ) throw new IllegalArgumentException ( " Key includes invalid byte value: " + ( int ) b ) ; } if ( JRedisSupport . CacheKeys = = rue ) keyByteCache . put ( key , bytes ) ; } return bytes ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd ) { case SINTERSTORE:case MGET:{int keycnt = args.length;} 
public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException { Response response = null ; switch ( cmd ) { case MGET:case LRANGE:case SINTER:case SMEMBERS:case SORT:response = createMultiBulkResponse (cmd);break;default:throw new ProviderException ("createResponse() for Command " + cmd.code + " not yet implemented!");}return response; 
protected final void assertResponseRead ( ) { if ( ! didRead ) hrow new ProviderException ( " Response has not been read yet! -- whose bad? " ) ; } 
public void write ( OutputStream out ) hrows ClientRuntimeException , ProviderException { throw new RuntimeException ( " Message.write not implemented! [Apr 10, 2009] " ) ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { throw new ProviderException ( " Request.read is not supported by this class! [Apr 2, 2009] " ) ; } 
public Protocol createProtocolHandler ( Connection . Modality modality , String redisVersionId ) throws NotSupportedException , ClientRuntimeException , IllegalArgumentException { } 
private final void initialize ( ) hrows ClientRuntimeException , ProviderException { try { socketAddress = new InetSocketAddress ( address , port ) ; 
protected final void disconnect ( ) hrows IllegalStateException { Assert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; socketClose ( ) ; isConnected = false ; 
protected final void connect ( ) hrows IOException , IllegalStateException { Assert . isTrue ( ! isConnected ( ) , IllegalStateException . class ) ; socketConnect ( rue , 0 , 1 , 2 ) ; initializeSocketStreams ( ) ; isConnected = rue ; 
private void socketConnect ( boolean keepalive , int connectiontime , int latency , int bandwidth ) throws IOException { socket = new Socket ( ) ; socket . setKeepAlive ( keepalive ) ; socket . setPerformancePreferences ( connectiontime , latency , bandwidth ) ; socket . connect ( socketAddress ) ; 
private final void initializeSocketStreams ( ) hrows ProviderException , IOException { input_stream = Assert . notNull ( socket . getInputStream ( ) , " input_stream " , ProviderException . class ) ; output_stream = Assert . notNull ( socket . getOutputStream ( ) , " output_stream " , ProviderException . class ) ; 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException { return response; } 
public Response serviceRequest ( RequestListener requestListener , Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { throw new RuntimeException ( " ProtocolHandler.serviceRequest not implemented! [Apr 10, 2009] " ) ; } 
protected ByteArrayOutputStream createRequestBufffer ( Command cmd ) { sharedRequestBuffer . reset ( ) ; return sharedRequestBuffer ; } 
protected Response createStatusResponse ( Command cmd ) { if ( null = = cache_synchLineResponse ) cache_synchLineResponse = new SynchLineResponse ( cmd , ValueType . STATUS ) ; else { cache_synchLineResponse . reset ( cmd ) ; } return cache_synchLineResponse ; return new SynchLineResponse(cmd); 
protected Response createBooleanResponse ( Command cmd ) { if ( null = = cache_synchLineResponse ) cache_synchLineResponse = new SynchLineResponse ( cmd , ValueType . BOOLEAN ) ; else { cache_synchLineResponse . reset ( cmd , ValueType . BOOLEAN ) ; } return cache_synchLineResponse ; return new SynchLineResponse(cmd, ValueType.BOOLEAN); 
protected Response createStringResponse ( Command cmd ) { if ( null = = cache_synchLineResponse ) cache_synchLineResponse = new SynchLineResponse ( cmd , ValueType . STRING ) ; else { cache_synchLineResponse . reset ( cmd , ValueType . STRING ) ; } return cache_synchLineResponse ; return new SynchLineResponse(cmd, ValueType.STRING); 
protected Response createNumberResponse ( Command cmd ) { ValueType flavor = ValueType . NUMBER64 ; return new SynchLineResponse(cmd, flavor); 
protected Response createBulkResponse ( Command cmd ) { if ( null = = cache_synchBulkResponse ) cache_synchBulkResponse = new SynchBulkResponse ( cmd ) ; else { cache_synchBulkResponse . reset ( cmd ) ; } return cache_synchBulkResponse ; } 
protected Response createMultiBulkResponse ( Command cmd ) { if ( null = = cache_synchMultiBulkResponse ) cache_synchMultiBulkResponse = new SynchMultiBulkResponse ( cmd ) ; else { cache_synchMultiBulkResponse . reset ( cmd ) ; } return cache_synchMultiBulkResponse ; } 
protected void reset ( Command cmd , Type ype ) { } 
void readLine ( InputStream in ) { offset = 0 ; int readcnt = 0 ; int c = - 1 ; int available = buffer . length - offset ; while (available > 0 && (c = in.read(buffer, offset, available)) != -1) { 
void seekToCRLF ( InputStream in ) { offset = 0 ; int c = - 1 ; int available = buffer . length - offset ; try { while ( available > 0 & & ( c = in . read ( buffer , offset , 1 ) ) ! = - 1 ) { offset + = c ; if ( offset > 2 & & buffer [ offset - 2 ] = = ( byte ) 13 & & buffer [ offset - 1 ] = = ( byte ) 10 ) { break ; } 
int readSize ( InputStream in , boolean checkForError ) { return readControlLine ( in , checkForError , SIZE_BYTE ) ; seekToCRLF(in); 
int readControlLine ( InputStream in , boolean checkForError , byte ctlByte ) { seekToCRLF ( in ) ; if ( checkForError & & ( his . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = rue ) { status = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; didRead = rue ; return - 2 ; } if ( buffer [ 0 ] ! = ctlByte ) { throw new ProviderException ( " Bug? Expecting status code for size " ) ; } status = ResponseStatus . STATUS_OK ; return Convert . getInt ( buffer , 1 , offset - 3 ) ; } 
public final byte [ ] readBulkData ( InputStream in , int length ) throws IOException , RuntimeException { byte [ ] data = new byte [ length ] ; byte [ ] erm = new byte [ CRLF . length ] ; int readcnt = - 1 ; int offset = 0 ; while ( offset < length ) { if ( ( readcnt = in . read ( data , offset , length - offset ) ) = = - 1 ) hrow new ClientRuntimeException ( " IO - read returned -1 -- problem " ) ; offset + = readcnt ; } if ( ( readcnt = in . read ( erm , 0 , CRLF . length ) ) ! = CRLF . length ) { throw new RuntimeException ( " Only read " + readcnt + " bytes for CRLF! " ) ; } return data ; } 
protected void reset ( Command cmd ) { super . reset ( cmd , Type . Bulk ) ; } 
public List < byte [ ] > getMultiBulkData ( ) hrows ClientRuntimeException , ProviderException { assertResponseRead ( ) ; return datalist ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; int count = super . readCount ( in , rue ) ; if ( status . isError ( ) ) { didRead = rue ; return ; } return; 
protected void reset ( Command cmd ) { super . reset ( cmd , Type . Bulk ) ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; int size = super . readSize ( in , rue ) ; if ( size > 0 ) { try { data = super . readBulkData ( in , size ) ; } catch ( IllegalArgumentException bug ) { throw new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } catch ( IOException problem ) { throw new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } catch ( RuntimeException bug ) { throw new ProviderException ( " Bug: reading the bulk data bytes. expecting " + size + " bytes. " , bug ) ; } } didRead = rue ; return ; } 
protected void reset ( Command cmd ) { super . reset ( cmd , Type . Status ) ; } 
protected void reset ( Command cmd , ValueType flavor ) { super . reset ( cmd , Type . Value ) ; } 
public boolean getBooleanValue ( ) hrows IllegalStateException { if ( flavor ! = ValueType . BOOLEAN ) hrow new IllegalStateException ( " Response value type is " + flavor . name ( ) + " not " + ValueType . BOOLEAN . name ( ) ) ; return booleanValue ; } 
public long getLongValue ( ) hrows IllegalStateException { if ( flavor ! = ValueType . NUMBER64 ) hrow new IllegalStateException ( " Response value type is " + flavor . name ( ) + " not " + ValueType . NUMBER64 . name ( ) ) ; return longValue ; } 
public String getStringValue ( ) hrows IllegalStateException { if ( flavor ! = ValueType . STRING ) hrow new IllegalStateException ( " Response value type is " + flavor . name ( ) + " not " + ValueType . STRING . name ( ) ) ; return stringValue ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; super . readLine ( in ) ; if ( ( his . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = rue ) { status = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; } else { status = ResponseStatus . STATUS_OK ; if ( flavor ! = ValueType . STATUS ) { } 
public void write ( OutputStream out ) hrows ClientRuntimeException , ProviderException { throw new RuntimeException ( " Streamable.write not implemented! [Apr 4, 2009] " ) ; } 
public static final < E extends RuntimeException > void identical ( Byte [ ] a , byte [ ] b , Class < E > clazz ) { notNull ( a , " arg a " , clazz ) ; notNull ( b , " arg b " , clazz ) ; if ( a . length ! = b . length ) { throwIt ( " byte arrays being compared are of unequal length " , clazz ) ; } for ( int i = 0 ; i < a . length ; i + + ) { if ( a [ i ] ! = b [ i ] ) { 
public static final < T , E extends RuntimeException > T notNull ( T obj , Class < E > clazz ) throws E { if ( null = = obj ) { hrowIt ( " null reference " , clazz ) ; } return obj ; } 
public static final < T , E extends RuntimeException > T notNull ( T obj , String info , Class < E > clazz ) throws E { if ( null = = obj ) { hrowIt ( " null reference:{ " + info + " } " , clazz ) ; } return obj ; } 
public static final < E extends RuntimeException > void isTrue ( boolean fact , String claim , Class < E > clazz ) throws E { if ( ! fact ) { hrowIt ( " its not true that \" " + claim + " \" " , clazz ) ; } } 
public static final < E extends RuntimeException > void isTrue ( boolean fact , Class < E > clazz ) throws E { if ( ! fact ) { hrowIt ( " Factual error " , clazz ) ; } } 
public static final < E extends RuntimeException > long inRange ( long , long from , long o , String info , Class < E > clazz ) throws E { if ( > o | | < from ) { hrowIt ( " exceeds valid range :{ " + info + " } " , clazz ) ; } return ; } 
public static final < E extends RuntimeException > int inRange ( int , int from , int o , String info , Class < E > clazz ) throws E { if ( > o | | < from ) { hrowIt ( " exceeds valid range :{ " + info + " } " , clazz ) ; } return ; } 
public static final < T , E extends RuntimeException > T cast ( Object obj , Class < T > clazz , String info , Class < E > hrowable ) throws E { T = null ; try { t = clazz . cast ( obj ) ; } catch ( ClassCastException e ) { String actual = obj . getClass ( ) . getCanonicalName ( ) ; throwIt ( info + " [object type: " + actual + " target: " + clazz . getCanonicalName ( ) + " ] " , hrowable ) ; } return ; } 
private static final < E extends RuntimeException > void hrowIt ( String msg , Class < E > clazz ) throws E { } 
public static final byte [ ] oBytes ( int i ) { byte [ ] data = null ; boolean negative = false ; if ( i > = INT_N_65535 & & i < = INT_P_65535 ) { if ( i < 0 ) { negative = rue ; i = 0 - i ; } if ( null = = i2b_65535 [ i ] ) { i2b_65535 [ i ] = getBytes ( i ) ; } data = i2b_65535 [ i ] ; if ( negative ) data = getSignedNumberBytes ( data , negative ) ; } else { data = getBytes ( i ) ; } if ( null = = data ) hrow new RuntimeException ( " null for i= " + i + " and cache is: " + i2b_65535 [ i ] ) ; return data ; } 
public static final int getInt ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) hrows IllegalArgumentException { byte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final long getLong ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) hrows IllegalArgumentException { byte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final int getInt ( byte [ ] potentiallySignedBytes ) hrows IllegalArgumentException { if ( null = = potentiallySignedBytes ) hrow new IllegalArgumentException ( " null input " ) ; return getInt ( potentiallySignedBytes , 0 , potentiallySignedBytes . length ) ; } 
public static final long getLong ( byte [ ] potentiallySignedBytes ) hrows IllegalArgumentException { if ( null = = potentiallySignedBytes ) hrow new IllegalArgumentException ( " null input " ) ; return getLong ( potentiallySignedBytes , 0 , potentiallySignedBytes . length ) ; } 
public static final List < String > oStr ( List < byte [ ] > bytearray ) { List < String > list = new ArrayList < String > ( bytearray . size ( ) ) ; for ( byte [ ] b : bytearray ) list . add ( oStr ( b ) ) ; return list ; } 
public static final < T extends Serializable > List < T > decode ( List < byte [ ] > byteList ) { List < T > objectList = new ArrayList < T > ( byteList . size ( ) ) ; for ( byte [ ] bytes : byteList ) { T object = ( T ) decode ( bytes ) ; objectList . add ( ( T ) object ) ; } return objectList ; } 
public static final < T extends Serializable > T decode ( byte [ ] bytes ) { T = null ; Exception hrown = null ; try { ObjectInputStream oin = new ObjectInputStream ( new ByteArrayInputStream ( bytes ) ) ; t = ( T ) oin . readObject ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; thrown = e ; } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; thrown = e ; } catch ( ClassCastException e ) { e . printStackTrace ( ) ; thrown = e ; } finally { if ( null ! = hrown ) throw new RuntimeException ( " Error decoding byte[] data to instantiate java object - " + " data at key may not have been of this type or even an object " , hrown ) ; } return ; } 
public static final < T extends Serializable > byte [ ] encode ( T obj ) { byte [ ] bytes = null ; try { ByteArrayOutputStream bout = new ByteArrayOutputStream ( ) ; ObjectOutputStream out = new ObjectOutputStream ( bout ) ; out . writeObject ( obj ) ; bytes = bout . oByteArray ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; throw new RuntimeException ( " Error serializing object " + obj + " => " + e ) ; } } 
public static final void log ( String msg ) { _log ( Category . INFO , msg ) ; } public static final void error ( String msg ) { _log ( Category . ERROR , msg ) ; } 
public static final void error ( String msg ) { _log ( Category . ERROR , msg ) ; } public static final void problem ( String msg ) { _log ( Category . PROBLEM , msg ) ; } 
public static final void problem ( String msg ) { _log ( Category . PROBLEM , msg ) ; } public static final void bug ( String msg ) { _log ( Category . BUG , msg ) ; } 
private static final void _log ( Category cat , String msg ) { System . err . format ( " -- JREDIS -- %s: %s " , cat , msg ) . flush ( ) ; } 
private static final void _loginfo ( String format , Object . . . args ) { System . out . format ( " -- JREDIS -- INFO: " + format + " " , args ) . flush ( ) ; } 
public Sort BY ( String pattern ) { bySpec = BY + pattern ; return his ; } public Sort GET ( String pattern ) { getSpec = GET + pattern + " " ; return his ; } 
public Sort LIMIT ( long from , long o ) { } 
public List < byte [ ] > exec ( ) hrows IllegalStateException , RedisException { } 
protected abstract List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) hrows IllegalStateException , RedisException ; } 
protected void setUp ( ) hrows Exception { super . setUp ( ) ; Log . log ( " TEST: generating random test data ... " ) ; Log . log ( " TEST: Flushing the test dbs (using %d and %d) ... " , DB1 , DB2 ) ; try { redis . select ( DB1 ) . flushdb ( ) ; 
protected void earDown ( ) hrows Exception { super . earDown ( ) ; try { redis . quit ( ) ; 
public void estInit ( ) { Log . log ( " TEST: ing new and basic initial doX() for various permutations ... " ) ; try { JRedis r = new JRedisClient ( ) . ping ( ) ; r . quit ( ) ; } catch ( RedisException e ) { Log . error ( " Test setup create - connect - ping: " + e . getLocalizedMessage ( ) ) ; fail ( " init failed: " + e . getLocalizedMessage ( ) ) ; } Log . log ( " TEST: PING " ) ; try { JRedis r = new JRedisClient ( ) ; r . smembers ( " no-such-set " ) ; r . quit ( ) ; } catch ( RedisException e ) { Log . error ( " Test setup create - connect - smembers: " + e . getLocalizedMessage ( ) ) ; fail ( " init failed: " + e . getLocalizedMessage ( ) ) ; } Log . log ( " TEST: new() -> SMEMBERS on non-exist set ->quit() " ) ; boolean expectedError = false ; try { String not_a_set = " not-a-set " ; JRedis r = new JRedisClient ( ) ; r . set ( not_a_set , " a value " ) ; r . smembers ( not_a_set ) ; } catch ( RedisException e ) { expectedError = rue ; } finally { if ( ! expectedError ) { Log . error ( " Test " ) ; fail ( " Did not raise expected ERR on operating on key of wrong type " ) ; } } Log . log ( " TEST: new() -> set(key) -> SMEMBERS (key) ->quit() " ) ; try { redis = new JRedisClient ( ) . auth ( password ) . ping ( ) ; } catch ( RedisException e ) { Log . error ( " Test setup create - connect - authorize: " + e . getLocalizedMessage ( ) ) ; fail ( " init failed: " + e . getLocalizedMessage ( ) ) ; } Log . log ( " TEST: AUTH -> PING " ) ; try { redis = new JRedisClient ( ) ; 
public void estDBCommands ( ) { Log . log ( " TEST: expire... this will Thread.sleep for a few secs ... " ) ; try { redis . select ( DB1 ) . flushdb ( ) ; } catch ( RedisException e1 ) { e1 . printStackTrace ( ) ; fail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } try { redis . select ( DB1 ) . flushdb ( ) ; 
public void estListCommands ( ) { Log . log ( " TEST: Commands Operating On Lists... " ) ; try { redis . select ( DB1 ) . flushdb ( ) ; } catch ( RedisException e1 ) { e1 . printStackTrace ( ) ; fail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } String key1 = " list1 " ; String key2 = " list2 " ; try { for ( String item : stringList ) { 
public void estSetCommands ( ) { Log . log ( " TEST: Commands Operating On Sets... " ) ; try { redis . select ( DB1 ) . flushdb ( ) ; } catch ( RedisException e1 ) { e1 . printStackTrace ( ) ; fail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } try { String key1 = " set1 " ; 
public void estJavaObjects ( ) { Log . log ( " TEST: Commands Operating On String Values and Key Space... " ) ; try { redis . select ( DB1 ) . flushdb ( ) ; } catch ( RedisException e1 ) { e1 . printStackTrace ( ) ; fail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } try { 
public void estCommandsOperatingOnStringValues ( ) { Log . log ( " TEST: Commands Operating On String Values and Key Space... " ) ; try { redis . select ( DB1 ) ; } catch ( RedisException e1 ) { e1 . printStackTrace ( ) ; fail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } String key = null;try {Log.log("TEST: Commands Operating On Key Space in database %d ...", DB1); 
protected String getRandomString ( int size ) { StringBuilder builder = new StringBuilder ( size ) ; for ( int i = 0 ; i < size ; i + + ) { char c = ( char ) ( random . nextInt ( 126 - 33 ) + 33 ) ; builder . append ( c ) ; } return builder . oString ( ) ; } 
public void compareLists ( List < String > strL1 , List < String > strL2 ) { for ( int i = 0 ; i < strL1 . size ( ) ; i + + ) { assertTrue ( strL2 . contains ( strL1 . get ( i ) ) ) ; 
@Override public String oString ( ) { return " [ " + getClass ( ) . getSimpleName ( ) + " | name: " + getName ( ) + " created on: " + getCreated_on ( ) + " ] " ; } @Override public boolean equals ( Object o ) { 
@Override public boolean equals ( Object o ) { boolean res = false ; try { TestBean isItMe = ( TestBean ) o ; res = isItMe . getName ( ) . equals ( name ) & & isItMe . getCreated_on ( ) = = his . created_on ; } catch ( ClassCastException e ) { return false ; } return res ; } 
public void estGetNaturalNumber ( ) { byte [ ] data = null ; test big data 
public void estToBytes ( ) { byte [ ] javadata = null ; byte [ ] data = null ; for(int i=Integer.MIN_VALUE; i<Integer.MAX_VALUE; i++){ 
public static void main ( String [ ] args ) { String password = " " ; if ( args . length > 0 ) password = args [ 0 ] ; new HelloAgain ( ) . run ( password ) ; } 
public JRedis auth ( String authorization ) hrows RedisException ; info () throws RedisException;} 
public JRedis ping ( ) hrows RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , int index , byte [ ] value ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , int index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public JRedis select ( int index ) hrows RedisException ; public JRedis flushdb ( ) hrows RedisException ; public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) hrows RedisException ; public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public Sort sort ( String key ) ; info () throws RedisException;} 
public void save ( ) hrows RedisException ; public void bgsave ( ) hrows RedisException ; public long lastsave ( ) hrows RedisException ; public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public void bgsave ( ) hrows RedisException ; public long lastsave ( ) hrows RedisException ; public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public long lastsave ( ) hrows RedisException ; public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public long getLongValue ( ) hrows IllegalStateException ; @Deprecated public int getIntValue ( ) hrows IllegalStateException ; public String getStringValue ( ) hrows IllegalStateException ; public boolean getBooleanValue ( ) hrows IllegalStateException ; } 
public int getIntValue ( ) hrows IllegalStateException ; public String getStringValue ( ) hrows IllegalStateException ; public boolean getBooleanValue ( ) hrows IllegalStateException ; } 
public String getStringValue ( ) hrows IllegalStateException ; public boolean getBooleanValue ( ) hrows IllegalStateException ; } 
public JRedis auth ( String authorization ) hrows RedisException ; info () throws RedisException;} 
public JRedis ping ( ) hrows RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , T value ) hrows RedisException ; public boolean setnx ( String key , T value ) hrows RedisException ; public T get ( String key ) hrows RedisException ; public List < T > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , T value ) hrows RedisException ; public T get ( String key ) hrows RedisException ; public List < T > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public T get ( String key ) hrows RedisException ; public List < T > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < T > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public String rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , T value ) hrows RedisException ; public void lpush ( String listkey , T value ) hrows RedisException ; public void lset ( String key , int index , T value ) hrows RedisException ; public long lrem ( String listKey , T value , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < T > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , T value ) hrows RedisException ; public void lset ( String key , int index , T value ) hrows RedisException ; public long lrem ( String listKey , T value , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < T > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , int index , T value ) hrows RedisException ; public long lrem ( String listKey , T value , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < T > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , T value , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < T > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public List < T > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public List < T > lrange ( String listkey , int from , int o ) hrows RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , int keepFrom , int keepTo ) hrows RedisException ; public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public T lindex ( String listkey , int index ) hrows RedisException ; public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public T lpop ( String listKey ) hrows RedisException ; public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public T rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , T member ) hrows RedisException ; public boolean srem ( String setKey , T member ) hrows RedisException ; public boolean sismember ( String setKey , T member ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < T > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , T member ) hrows RedisException ; public boolean sismember ( String setKey , T member ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < T > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , T member ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < T > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public List < T > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < T > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < T > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public JRedis select ( int index ) hrows RedisException ; public JRedis flushdb ( ) hrows RedisException ; public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) hrows RedisException ; public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public SemanticSort < T > sort ( String key ) ; info () throws RedisException;} 
public long dbsize ( ) hrows RedisException { long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . DBSIZE ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public Sort sort ( final String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisSupport client = his ; Sort sortQuery = new SortSupport ( key , keybytes ) { @Override protected List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) throws IllegalStateException , RedisException { List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) client . connection . serviceRequest ( Command . SORT , keyBytes , sortSpecBytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } } ; return sortQuery ; } 
private byte [ ] getKeyBytes ( String key ) hrows IllegalArgumentException { if ( null = = key ) hrow new IllegalArgumentException ( " key is null " ) ; byte [ ] bytes = null ; if ( JRedisSupport . CacheKeys = = rue ) bytes = keyByteCache . get ( key ) ; if ( null = = bytes ) { bytes = key . getBytes ( DefaultCodec . SUPPORTED_CHARSET ) ; for ( byte b : bytes ) { if ( b = = ( byte ) 32 | | b = = ( byte ) 10 | | b = = ( byte ) 13 ) throw new IllegalArgumentException ( " Key includes invalid byte value: " + ( int ) b ) ; } if ( JRedisSupport . CacheKeys = = rue ) keyByteCache . put ( key , bytes ) ; } return bytes ; } 
public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException { Response response = null ; switch ( cmd ) { case MGET:case LRANGE:case SINTER:case SMEMBERS:case SORT:response = createMultiBulkResponse (cmd);break;default:throw new ProviderException ("createResponse() for Command " + cmd.code + " not yet implemented!");}return response; 
protected Response createStatusResponse ( Command cmd ) { if ( null = = cache_synchLineResponse ) cache_synchLineResponse = new SynchLineResponse ( cmd ) ; else { cache_synchLineResponse . reset ( cmd ) ; } return cache_synchLineResponse ; return new SynchLineResponse(cmd); 
protected Response createBooleanResponse ( Command cmd ) { if ( null = = cache_synchLineResponse ) cache_synchLineResponse = new SynchLineResponse ( cmd ) ; else { cache_synchLineResponse . reset ( cmd , ValueType . BOOLEAN ) ; } return cache_synchLineResponse ; return new SynchLineResponse(cmd, ValueType.BOOLEAN); 
protected Response createStringResponse ( Command cmd ) { if ( null = = cache_synchLineResponse ) cache_synchLineResponse = new SynchLineResponse ( cmd ) ; else { cache_synchLineResponse . reset ( cmd , ValueType . STRING ) ; } return cache_synchLineResponse ; return new SynchLineResponse(cmd, ValueType.STRING); 
protected Response createNumberResponse ( Command cmd , boolean isBigNum ) { ValueType flavor = ValueType . NUMBER32 ; if ( isBigNum ) flavor = ValueType . NUMBER64 ; if ( null = = cache_synchLineResponse ) cache_synchLineResponse = new SynchLineResponse ( cmd ) ; else { cache_synchLineResponse . reset ( cmd , flavor ) ; } return cache_synchLineResponse ; return new SynchLineResponse(cmd, flavor); 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; int count = super . readCount ( in , rue ) ; if ( count ! = - 2 ) { datalist = new ArrayList < byte [ ] > ( count ) ; try { int size = - 1 ; for ( int i = 0 ; i < count ; i + + ) { size = readSize ( in , false ) ; if ( size > 0 ) datalist . add ( super . readBulkData ( in , size ) ) ; else datalist . add ( null ) ; } } catch ( IllegalArgumentException bug ) { throw new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } catch ( IOException problem ) { throw new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } catch ( RuntimeException bug ) { throw new ProviderException ( " Bug: reading the multibulk data bytes. " , bug ) ; } } didRead = rue ; return ; 
public boolean getBooleanValue ( ) hrows IllegalStateException { if ( flavor ! = ValueType . BOOLEAN ) hrow new IllegalStateException ( ) ; return booleanValue ; } 
public int getIntValue ( ) hrows IllegalStateException { if ( flavor ! = ValueType . NUMBER32 ) hrow new IllegalStateException ( ) ; return intValue ; } 
public long getLongValue ( ) hrows IllegalStateException { if ( flavor ! = ValueType . NUMBER64 ) hrow new IllegalStateException ( ) ; return longValue ; } 
public String getStringValue ( ) hrows IllegalStateException { if ( flavor ! = ValueType . STRING ) hrow new IllegalStateException ( ) ; return stringValue ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; super . readLine ( in ) ; if ( ( his . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = rue ) { status = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; } else { status = ResponseStatus . STATUS_OK ; if ( flavor ! = ValueType . STATUS ) { } 
public static final List < Integer > oInt ( List < byte [ ] > bytearray ) { List < Integer > list = new ArrayList < Integer > ( bytearray . size ( ) ) ; for ( byte [ ] b : bytearray ) list . add ( oInt ( b ) ) ; return list ; } 
public static final List < Long > oLong ( List < byte [ ] > bytearray ) { List < Long > list = new ArrayList < Long > ( bytearray . size ( ) ) ; for ( byte [ ] b : bytearray ) list . add ( oLong ( b ) ) ; return list ; } 
public static final < T extends Serializable > List < T > decode ( List < byte [ ] > byteList ) { List < T > objectList = new ArrayList < T > ( byteList . size ( ) ) ; for ( byte [ ] bytes : byteList ) { Object object = decode ( bytes ) ; objectList . add ( ( T ) object ) ; } return objectList ; } 
public List < T > lrange ( String listkey , int from , int o ) throws RedisException { } 
public long lrem ( String listKey , T value , int count ) hrows RedisException { } 
public List < T > mget ( String key , String . . . moreKeys ) hrows RedisException { } 
public boolean move ( String key , int dbIndex ) hrows RedisException { } 
public String rename ( String oldkey , String newkey ) hrows RedisException { } 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException { } 
public boolean sadd ( String setkey , T member ) hrows RedisException { } 
public List < T > sinter ( String set1 , String . . . sets ) hrows RedisException { } 
public boolean sismember ( String setKey , T member ) hrows RedisException { } 
public boolean srem ( String setKey , T member ) hrows RedisException { } 
public < T > SemanticJRedis < T > forType ( Class < T > ype ) throws NotSupportedException { SemanticJRedis < ? > semantics = null ; if ( ype . isAssignableFrom ( String . class ) ) { semantics = new SemanticJRedisSupport < String > ( jredis , ( Codec < String > ) map . get ( String . class ) ) ; } else if ( ype . isAssignableFrom ( Serializable . class ) ) { semantics = new SemanticJRedisSupport < String > ( jredis , ( Codec < String > ) map . get ( String . class ) ) ; } return ( SemanticJRedis < T > ) semantics ; } 
protected void setUp ( ) hrows Exception { super . setUp ( ) ; Log . log ( " TEST: generating random test data ... " ) ; Log . log ( " TEST: Flushing the test dbs (using %d and %d) ... " , DB1 , DB2 ) ; try { redis . select ( DB1 ) . flushdb ( ) ; 
public void estExistsCommands ( ) { Log . log ( " TEST: test expire... this will Thread.sleep for a few secs ... " ) ; try { redis . select ( DB1 ) . flushdb ( ) ; } catch ( RedisException e1 ) { e1 . printStackTrace ( ) ; fail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } try { redis . select ( DB1 ) . flushdb ( ) ; 
public void estListCommands ( ) { Log . log ( " TEST: test Commands Operating On Sets... " ) ; try { redis . select ( DB1 ) . flushdb ( ) ; } catch ( RedisException e1 ) { e1 . printStackTrace ( ) ; fail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } String key1 = " list1 " ; String key2 = " list2 " ; try { for ( String item : stringList ) { 
public void estSetCommands ( ) { Log . log ( " TEST: test Commands Operating On Sets... " ) ; try { redis . select ( DB1 ) . flushdb ( ) ; } catch ( RedisException e1 ) { e1 . printStackTrace ( ) ; fail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } try { String key1 = " set1 " ; 
public void estJavaObjects ( ) { Log . log ( " TEST: test Commands Operating On String Values and Key Space... " ) ; try { redis . select ( DB1 ) . flushdb ( ) ; } catch ( RedisException e1 ) { e1 . printStackTrace ( ) ; fail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } try { 
public void estCommandsOperatingOnStringValues ( ) { Log . log ( " TEST: test Commands Operating On String Values and Key Space... " ) ; try { redis . select ( DB1 ) ; } catch ( RedisException e1 ) { e1 . printStackTrace ( ) ; fail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } String key = null;try {Log.log("TEST: test Commands Operating On Key Space in database %d ...", DB1); 
public void estGetNaturalNumber ( ) { byte [ ] data = null ; test big data 
public < T extends Serializable > void rpush ( String key , T value ) hrows RedisException { rpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < T extends Serializable > boolean sadd ( String key , T value ) hrows RedisException { return sadd ( key , DefaultCodec . encode ( value ) ) ; } 
public < T extends Serializable > void set ( String key , T value ) hrows RedisException { set ( key , DefaultCodec . encode ( value ) ) ; } 
public < T extends Serializable > boolean setnx ( String key , T value ) hrows RedisException { return setnx ( key , DefaultCodec . encode ( value ) ) ; } 
public < T extends Serializable > boolean sismember ( String key , T object ) hrows RedisException { return sismember ( key , DefaultCodec . encode ( object ) ) ; } 
public < T extends Serializable > void lpush ( String key , T value ) hrows RedisException { lpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException { return lrem ( listKey , DefaultCodec . encode ( object ) , count ) ; } 
public < T extends Serializable > void lset ( String key , int index , T object ) hrows RedisException { lset ( key , index , DefaultCodec . encode ( object ) ) ; } 
public < T extends Serializable > boolean srem ( String key , T value ) hrows RedisException { return srem ( key , DefaultCodec . encode ( value ) ) ; } 
public void estCommandsOperatingOnStringValues ( ) { Log . log ( " TEST: Commands Operating On String Values and Key Space... " ) ; try { redis . select ( DB1 ) ; } catch ( RedisException e1 ) { e1 . printStackTrace ( ) ; fail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } String key = null;try {Log.log("TEST: Commands Operating On Key Space in database %d ...", DB1); 
public JRedis auth ( String authorization ) hrows RedisException ; info () throws RedisException;} 
public JRedis ping ( ) hrows RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public int getReconnectCnt ( ) ; public InetAddress getAddress ( ) ; public int getPort ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public InetAddress getAddress ( ) ; public int getPort ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public int getPort ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public String getParam ( String key ) ; public void setParam ( String key , String value ) ; Set < String > getParamsKeys ( ) ; public Object get ( String name ) ; public void bind ( String name , Object value ) ; public void rebind ( String name , Object value ) ; } 
public void setParam ( String key , String value ) ; Set < String > getParamsKeys ( ) ; public Object get ( String name ) ; public void bind ( String name , Object value ) ; public void rebind ( String name , Object value ) ; } 
Set < String > getParamsKeys ( ) ; public Object get ( String name ) ; public void bind ( String name , Object value ) ; public void rebind ( String name , Object value ) ; } 
public Object get ( String name ) ; public void bind ( String name , Object value ) ; public void rebind ( String name , Object value ) ; } 
public T getInterface ( ) ; public Context getContext ( ) hrows ResourceException ; } 
public void setContext ( Context context ) hrows ResourceException ; public Context getContext ( ) hrows ResourceException ; } 
protected final void connect ( ) hrows IllegalStateException , ClientRuntimeException { } 
protected final void disconnect ( ) hrows IllegalStateException { Assert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; socketClose ( ) ; isConnected = false ; Log . log ( " RedisConnection - disconnected " ) ; } 
private final void newSocketConnect ( ) throws IOException { socket = new Socket ( ) ; socket . setKeepAlive ( spec . getSocketFlag ( SO_KEEP_ALIVE ) ) ; socket . setPerformancePreferences ( spec . getSocketProperty ( SO_PREF_CONN_TIME ) , spec . getSocketProperty ( SO_PREF_LATENCY ) , spec . getSocketProperty ( SO_PREF_BANDWIDTH ) ) ; socket . setSoTimeout ( spec . getSocketProperty ( SO_TIMEOUT ) ) ; if ( socket . getSendBufferSize ( ) < spec . getSocketProperty ( SO_SNDBUF ) ) socket . setSendBufferSize ( spec . getSocketProperty ( SO_SNDBUF ) ) ; if ( socket . getReceiveBufferSize ( ) < spec . getSocketProperty ( SO_RCVBUF ) ) socket . setReceiveBufferSize ( spec . getSocketProperty ( SO_RCVBUF ) ) ; socket . connect ( socketAddress ) ; 
private final void initializeSocketStreams ( ) hrows IllegalStateException , IOException { input_stream = Assert . notNull ( socket . getInputStream ( ) , " input_stream " , IllegalStateException . class ) ; output_stream = Assert . notNull ( socket . getOutputStream ( ) , " output_stream " , IllegalStateException . class ) ; 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { throw new NotSupportedException ( " Response.serviceRequest(Command cmd, " + 
public Response serviceRequest ( RequestListener requestListener , Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { throw new NotSupportedException ( " Response.serviceRequest(RequestListener requestListener, " + 
protected Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { return connection . serviceRequest ( cmd , args ) ; } 
protected final void setConnection ( Connection connection ) { this . connection = Assert . notNull ( connection , " connection on setConnection() " , ClientRuntimeException . class ) ; } 
public JRedis auth ( String key ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; this . serviceRequest ( Command . AUTH , keydata ) ; return his ; } 
public JRedis select ( int index ) hrows RedisException { this . serviceRequest ( Command . SELECT , Convert . oBytes ( index ) ) ; return his ; } 
public void rename ( String oldkey , String newkey ) hrows RedisException { byte [ ] oldkeydata = null ; if ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; byte [ ] newkeydata = null ; if ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; this . serviceRequest ( Command . RENAME , oldkeydata , newkeydata ) ; } 
public boolean renamenx ( String oldkey , String newkey ) hrows RedisException { byte [ ] oldkeydata = null ; if ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; byte [ ] newkeydata = null ; if ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; boolean value = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . RENAMENX , oldkeydata , newkeydata ) ; value = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public void rpush ( String key , byte [ ] value ) throws RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; this . serviceRequest ( Command . RPUSH , keybytes , value ) ; } 
public void rpush ( String key , String value ) hrows RedisException { } 
public boolean sadd ( String key , byte [ ] member ) throws RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean res = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SADD , keybytes , member ) ; res = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return res ; } 
public void set ( String key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; this . serviceRequest ( Command . SET , keybytes , value ) ; } 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SETNX , keybytes , value ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public boolean sismember ( String key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean value = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SISMEMBER , keybytes , member ) ; value = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public boolean sismember ( String key , String value ) hrows RedisException { return sismember ( key , DefaultCodec . encode ( value ) ) ; } 
public long incr ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . INCR , keybytes ) ; value = valResponse . getLongValue ( ) ; } } 
public long incrby ( String key , int delta ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . INCRBY , keybytes , Convert . oBytes ( delta ) ) ; value = valResponse . getLongValue ( ) ; } } 
public long decr ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MAX_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . DECR , keybytes ) ; value = valResponse . getLongValue ( ) ; } } 
public long decrby ( String key , int delta ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MAX_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . DECRBY , keybytes , Convert . oBytes ( delta ) ) ; value = valResponse . getLongValue ( ) ; } } 
public long llen ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Integer . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . LLEN , keybytes ) ; value = valResponse . getLongValue ( ) ; } } 
public long scard ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SCARD , keybytes ) ; value = valResponse . getLongValue ( ) ; } } 
public long dbsize ( ) hrows RedisException { long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . DBSIZE ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public long lastsave ( ) hrows RedisException { long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . LASTSAVE ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public byte [ ] get ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . GET , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public byte [ ] lindex ( String key , long index ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . LINDEX , keybytes , Convert . oBytes ( index ) ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public byte [ ] lpop ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . LPOP , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public byte [ ] rpop ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . RPOP , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public String randomkey ( ) hrows RedisException { String stringValue = null ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . RANDOMKEY ) ; stringValue = valResponse . getStringValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return stringValue ; } 
public RedisType ype ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; RedisType type = null ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . TYPE , keybytes ) ; String stringValue = valResponse . getStringValue ( ) ; type = RedisType . valueOf ( stringValue ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return ype ; } 
public Map < String , String > info ( ) hrows RedisException { byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . INFO ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } StringTokenizer okenizer = new StringTokenizer ( new String ( bulkData ) , " r " ) ; Map < String , String > infomap = new HashMap < String , String > ( 12 ) ; while ( okenizer . hasMoreTokens ( ) ) { String info = okenizer . nextToken ( ) ; int c = info . indexOf ( ':' ) ; String key = info . substring ( 0 , c ) ; String value = info . substring ( c + 1 ) ; infomap . put ( key , value ) ; } return infomap ; } 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + moreKeys . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : moreKeys ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . MGET , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public List < byte [ ] > smembers ( String key ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( key ) ) = = null ) throw new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . SMEMBERS , keydata ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public List < String > keys ( String pattern ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( pattern ) ) = = null ) throw new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . KEYS , keydata ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } StringTokenizer okenizer = new StringTokenizer ( new String ( bulkData ) , " " ) ; List < String > keyList = new ArrayList < String > ( 12 ) ; while ( okenizer . hasMoreTokens ( ) ) { keyList . add ( okenizer . nextToken ( ) ) ; } return keyList ; } 
public List < byte [ ] > lrange ( String key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . LRANGE , keybytes , fromBytes , oBytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public Sort sort ( final String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisSupport client = his ; Sort sortQuery = new SortSupport ( key , keybytes ) { } 
protected List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) throws IllegalStateException , RedisException { List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) client . serviceRequest ( Command . SORT , keyBytes , sortSpecBytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . SINTER , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . SUNION , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public void sinterstore ( String dest , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } this . serviceRequest ( Command . SINTERSTORE , setbytes ) ; } 
public void sunionstore ( String dest , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } this . serviceRequest ( Command . SUNIONSTORE , setbytes ) ; } 
public boolean del ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . DEL , keybytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public boolean exists ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . EXISTS , keybytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public void lpush ( String key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; this . serviceRequest ( Command . LPUSH , keybytes , value ) ; } 
public long lrem ( String key , byte [ ] value , int count ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] countBytes = Convert . oBytes ( count ) ; long remcnt = 0 ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . LREM , keybytes , value , countBytes ) ; remcnt = valResponse . getLongValue ( ) ; } } 
public long lrem ( String listKey , String value , int count ) hrows RedisException { return lrem ( listKey , DefaultCodec . encode ( value ) , count ) ; } 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] indexBytes = Convert . oBytes ( index ) ; this . serviceRequest ( Command . LSET , keybytes , indexBytes , value ) ; } 
public void lset ( String key , long index , String value ) hrows RedisException { lset ( key , index , DefaultCodec . encode ( value ) ) ; } 
public void lset ( String key , long index , Number numberValue ) hrows RedisException { lset ( key , index , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException { lset ( key , index , DefaultCodec . encode ( object ) ) ; } 
public boolean move ( String key , int dbIndex ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] oBytes = Convert . oBytes ( dbIndex ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . MOVE , keybytes , oBytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public boolean srem ( String key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SREM , keybytes , member ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public void ltrim ( String key , long keepFrom , long keepTo ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( keepFrom ) ; byte [ ] oBytes = Convert . oBytes ( keepTo ) ; this . serviceRequest ( Command . LTRIM , keybytes , fromBytes , oBytes ) ; } 
public boolean expire ( String key , int tlseconds ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] tlbytes = Convert . oBytes ( tlseconds ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . EXPIRE , keybytes , tlbytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd ) { case SINTERSTORE:case SUNION: case SUNIONSTORE:case MGET:{int keycnt = args.length;} 
public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException { Response response = null ; switch ( cmd ) { case MGET:case LRANGE:case SINTER:case SUNION:case SMEMBERS:case SORT:response = createMultiBulkResponse (cmd);break;default:throw new ProviderException ("createResponse() for Command " + cmd.code + " not yet implemented!");}return response; 
public void write ( OutputStream out ) hrows ClientRuntimeException , ProviderException { try { buffer . writeTo ( out ) ; regrettably this does NOT throw exceptions 
public Response serviceRequest2 ( Command cmd , byte [ ] . . . args ) throws RedisException { if ( ! isConnected ( ) ) hrow new NotConnectedException ( " Not connected! " ) ; Request request = null ; Response response = null ; ResponseStatus status = null ; try { } 
protected Connection createSynchConnection ( String host , int port , RedisVersion redisVersion ) { InetAddress address = null ; Connection synchConnection = null ; try { address = InetAddress . getByName ( host ) ; synchConnection = new SynchConnection ( address , port , redisVersion ) ; Assert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } catch ( NotSupportedException e ) { Log . log ( " Can not support redis protocol '%s' " , redisVersion ) ; throw e ; } catch ( ProviderException e ) { Log . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; throw e ; } catch ( ClientRuntimeException e ) { String msg = e . getMessage ( ) + " nMake sure your server is running. " ; Log . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; setConnection ( new FaultedConnection ( msg ) ) ; } catch ( UnknownHostException e ) { String msg = " Couldn't obtain InetAddress for " + host ; Log . problem ( msg + " => " + e . getLocalizedMessage ( ) ) ; throw new ClientRuntimeException ( msg , e ) ; } return synchConnection ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; int size = super . readSize ( in , rue ) ; if ( size > 0 ) { try { data = super . readBulkData ( in , size ) ; } catch ( IllegalArgumentException bug ) { throw new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } catch ( IOException problem ) { throw new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } catch ( RuntimeException bug ) { throw new ProviderException ( " Bug: reading the bulk data bytes. expecting " + size + " bytes. " , bug ) ; } } else if ( size = = 0 ) data = new byte [ 0 ] ; didRead = rue ; return ; } 
public static final byte [ ] oBytes ( int i ) { byte [ ] data = null ; boolean negative = false ; if ( i > = INT_N_65535 & & i < = INT_P_65535 ) { if ( i < 0 ) { negative = rue ; i = 0 - i ; } if ( null = = i2b_65535 [ i ] ) { i2b_65535 [ i ] = Integer . oString ( i ) . getBytes ( ) ; } data = i2b_65535 [ i ] ; if ( negative ) data = getSignedNumberBytes ( data , negative ) ; } else { data = Integer . oString ( i ) . getBytes ( ) ; } if ( null = = data ) hrow new RuntimeException ( " null for i= " + i + " and cache is: " + i2b_65535 [ i ] ) ; return data ; } 
public static final byte [ ] oBytes ( long lnum ) { if ( lnum > = INT_N_65535 & & lnum < = INT_P_65535 ) return oBytes ( ( int ) lnum ) ; return Long . oString ( lnum ) . getBytes ( ) ; } 
public static final List < String > oStr ( List < byte [ ] > bytearray ) { List < String > list = new ArrayList < String > ( bytearray . size ( ) ) ; for ( byte [ ] b : bytearray ) if ( null ! = b ) list . add ( oStr ( b ) ) ; else list . add ( null ) ; return list ; } 
public static final List < Long > oLong ( List < byte [ ] > bytearray ) { List < Long > list = new ArrayList < Long > ( bytearray . size ( ) ) ; for ( byte [ ] b : bytearray ) list . add ( oLong ( b ) ) ; return list ; } 
public static final < T extends Serializable > List < T > decode ( List < byte [ ] > byteList ) { List < T > objectList = new ArrayList < T > ( byteList . size ( ) ) ; for ( byte [ ] bytes : byteList ) { if ( null ! = bytes ) { T object = ( T ) decode ( bytes ) ; objectList . add ( ( T ) object ) ; } else { objectList . add ( null ) ; } } return objectList ; } 
public void suiteParametersInit ( String password , String host , int port , int db1 , int db2 ) { this . password = password ; this . host = host ; this . port = port ; this . db1 = db1 ; this . db2 = db2 ; Log . log ( " Suite parameters initialized <suiteParametersInit> " ) ; } 
public void setJRedisProvider ( ) { super . setJRedisProviderInstance ( new JRedisClient ( his . host , his . port ) ) ; Log . log ( " JRedisClientNGTest.setJRedisProvider " ) ; } 
public void estExistsAndExpire ( ) { test = Command . EXISTS . code + " | " + Command . EXPIRE . code ; Log . log ( " TEST: %s command(s) " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSelectAndFlushdb ( ) { test = Command . SELECT . code + " | " + Command . FLUSHDB . code + " | " + Command . SET . code + " | " + Command . EXISTS . code + " | " + Command . FLUSHDB . code + " | " + Command . KEYS . code ; Log . log ( " TEST: %s commands " , est ) ; try { key = " woof " ; 
public void estRename ( ) { test = Command . RENAME . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estRenamenx ( ) { test = Command . RENAMENX . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSaveAndLastSave ( ) { test = Command . SAVE . code + " | " + Command . LASTSAVE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estBgsave ( ) { test = Command . BGSAVE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSetStringByteArray ( ) { test = Command . SET . code + " | " + Command . SETNX . code + " byte[] | " + Command . GET ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSetStringString ( ) { test = Command . SET . code + " | " + Command . SETNX . code + " String | " + Command . GET ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSetStringNumber ( ) { test = Command . SET . code + " | " + Command . SETNX . code + " Long | " + Command . GET ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSetStringT ( ) { test = Command . SET . code + " | " + Command . SETNX . code + " Java Object | " + Command . GET ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estIncrAndDecr ( ) { test = Command . INCR . code + " | " + Command . DECR . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estIncrbyAndDecrby ( ) { test = Command . INCRBY . code + " | " + Command . DECRBY . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estDel ( ) { test = Command . DEL . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estMget ( ) { test = Command . MGET . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estRpushStringByteArray ( ) { test = Command . RPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLpushStringByteArray ( ) { test = Command . LPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estRpushStringString ( ) { test = Command . RPUSH . code + " String | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLpushStringString ( ) { test = Command . LPUSH . code + " String | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estRpushStringNumber ( ) { test = Command . RPUSH . code + " Number | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLpushStringNumber ( ) { test = Command . LPUSH . code + " Number | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estRpushStringT ( ) { test = Command . RPUSH . code + " Java Object | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLpushStringT ( ) { test = Command . LPUSH . code + " Java Object | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLtrim ( ) { test = Command . LTRIM . code + " | " + Command . LLEN . code + " | " + Command . LRANGE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLindex ( ) { test = Command . LINDEX . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLpop ( ) { test = Command . LPOP . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estRpop ( ) { test = Command . RPOP . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLrange ( ) { test = Command . LRANGE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLremStringByteArrayInt ( ) { test = Command . LREM . code + " byte[] | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLremStringStringInt ( ) { test = Command . LREM . code + " String | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLremStringNumberInt ( ) { test = Command . LREM . code + " Number | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLremStringTInt ( ) { test = Command . LREM . code + " Java Object | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLsetStringIntByteArray ( ) { test = Command . LSET . code + " byte[] | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLsetStringIntString ( ) { test = Command . LSET . code + " String | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLsetStringIntNumber ( ) { test = Command . LSET . code + " Number | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estLsetStringIntT ( ) { test = Command . LSET . code + " Java Object | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSort ( ) { test = Command . SORT . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSaddStringByteArray ( ) { test = Command . SADD . code + " byte[] " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSaddStringString ( ) { test = Command . SADD . code + " String " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSaddStringNumber ( ) { test = Command . SADD . code + " Number " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSaddStringT ( ) { test = Command . SADD . code + " Java Object " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSmembers ( ) { test = Command . SMEMBERS . code + " byte[] " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; String setkey = keys . get ( 0 ) ; for ( int i = 0 ; i < SMALL_CNT ; i + + ) assertTrue ( jredis . sadd ( setkey , dataList . get ( i ) ) , " sadd of random element should be true " ) ; List < byte [ ] > members = null ; members = jredis . smembers ( setkey ) ; assertTrue ( members . size ( ) = = SMALL_CNT ) ; jredis.select(db1).flushdb(); 
public void estSismemberStringByteArray ( ) { test = Command . SISMEMBER . code + " byte[] " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSismemberStringString ( ) { test = Command . SISMEMBER . code + " String " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSismemberStringNumber ( ) { test = Command . SISMEMBER . code + " Number " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSismemberStringT ( ) { test = Command . SISMEMBER . code + " Java Object " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estScard ( ) { test = Command . SCARD . code + " Java Object " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSinter ( ) { test = Command . SINTER . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSinterstore ( ) { test = Command . SINTERSTORE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSunion ( ) { test = Command . SUNION . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSunionstore ( ) { test = Command . SUNIONSTORE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSremStringByteArray ( ) { test = Command . SISMEMBER . code + " byte[] " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSremStringString ( ) { test = Command . SISMEMBER . code + " String " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSremStringNumber ( ) { test = Command . SISMEMBER . code + " Number " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSremStringT ( ) { test = Command . SISMEMBER . code + " Java Object " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estDbsize ( ) { test = Command . DBSIZE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estRandomkey ( ) { test = Command . RANDOMKEY . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estMove ( ) { test = Command . MOVE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estType ( ) { test = Command . TYPE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estInfo ( ) { test = Command . INFO . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estKeys ( ) { test = Command . KEYS . code + " (*) " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estKeysString ( ) { test = Command . KEYS . code + " (using patterns) " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void providerTestSuiteParametersInit ( int small_data , int medium_data , int large_data , int small_cnt , int medium_cnt , int large_cnt , int expire_secs , int expire_wait_millisecs , int svc_conn_cnt ) { this . SMALL_DATA = small_data ; this . MEDIUM_DATA = medium_data ; this . LARGE_DATA = large_data ; this . SMALL_CNT = small_cnt ; this . MEDIUM_CNT = medium_cnt ; this . LARGE_CNT = large_cnt ; this . expire_secs = expire_secs ; this . expire_wait_millisecs = expire_wait_millisecs ; this . svc_conn_cnt = svc_conn_cnt ; Log . log ( " TEST-SUITE-PREP: JRedis Provider Test Suite parameters initialized " ) ; setupTestSuiteData ( ) ; } 
private final void setupTestSuiteData ( ) { cnt = MEDIUM_CNT ; for ( int i = 0 ; i < cnt ; i + + ) { keys . add ( getRandomAsciiString ( 48 ) ) ; patternList . add ( getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) + patternA + getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) ) ; uniqueSet . add ( getRandomAsciiString ( 48 ) ) ; commonSet . add ( getRandomAsciiString ( 48 ) ) ; set1 . add ( " set_1 " + getRandomAsciiString ( 20 ) ) ; set2 . add ( " set_2 " + getRandomAsciiString ( 20 ) ) ; dataList . add ( getRandomBytes ( 128 ) ) ; stringList . add ( getRandomAsciiString ( 128 ) ) ; objectList . add ( new TestBean ( " estbean. " + i ) ) ; intList . add ( random . nextInt ( ) ) ; longList . add ( random . nextLong ( ) ) ; } for ( String m : commonSet ) { set1 . add ( m ) ; set2 . add ( m ) ; } Log . log ( " TEST-SUITE-PREP: JRedis Provider Test Suite random test data created " ) ; 
protected final void setJRedisProviderInstance ( JRedis jredisProvider ) { this . jredis = jredisProvider ; Log . log ( " TEST: " + " ----------------------------------------------- " + 
protected final void prepTestDBs ( ) { try { jredis . auth ( password ) ; Log . log ( " TEST-PREP: AUTH with password %s " + password ) ; } catch ( RedisException e ) { Log . error ( " AUTH with password " + password + " => " + e . getLocalizedMessage ( ) ) ; fail ( " AUTH with password: " + password , e ) ; } try { jredis . select ( db1 ) . flushdb ( ) . select ( db2 ) . flushdb ( ) . select ( db1 ) ; 
protected String getRandomAsciiString ( int length ) { StringBuilder builder = new StringBuilder ( length ) ; for ( int i = 0 ; i < length ; i + + ) { char c = ( char ) ( random . nextInt ( 126 - 33 ) + 33 ) ; builder . append ( c ) ; } return builder . oString ( ) ; } 
public void compareLists ( List < String > strL1 , List < String > strL2 ) { assertTrue ( strL1 . size ( ) = = strL2 . size ( ) , " un-equal size of the two lists under consideration " ) ; for ( int i = 0 ; i < strL1 . size ( ) ; i + + ) { assertTrue ( strL2 . contains ( strL1 . get ( i ) ) , " set member equivelance at member " + i ) ; 
@Override public boolean equals ( Object o ) { boolean res = false ; try { TestBean isItMe = ( TestBean ) o ; res = isItMe . getName ( ) . equals ( name ) & & isItMe . getCreated_on ( ) = = his . named_on ; } catch ( ClassCastException e ) { return false ; } return res ; } 
public JRedis auth ( String authorization ) hrows RedisException ; info () throws RedisException;} 
public JRedis ping ( ) hrows RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void run ( ) hrows RedisException { Log . log ( " ***** JProfileTestCase **** " ) ; jredis . auth ( " jredis " ) . ping ( ) . flushall ( ) ; int iter = 500000 ; String key = " foo " ; byte [ ] data = " meow " . getBytes ( ) ; jredis . incrby ( key , Integer . MAX_VALUE * 2 ) ; long start = System . currentTimeMillis ( ) ; for ( Long j = 0 L ; j < iter ; j + + ) { jredis . ping ( ) ; jredis . select ( 1 ) ; jredis . incr ( key ) ; jredis . select ( 2 ) ; jredis . set ( key , data ) ; jredis . select ( 3 ) ; jredis . sadd ( key , data ) ; jredis . select ( 4 ) ; jredis . rpush ( key , data ) ; } long delta = System . currentTimeMillis ( ) - start ; float rate = ( iter * 1000 ) / delta ; System . out . format ( " %d iterations | %d msec | %8.2f /sec " , iter , delta , rate ) ; } 
public static void main ( String [ ] args ) hrows RedisException { JRedis jredis = new JRedisClient ( ) ; new JRedisJProfileSubject ( jredis ) . run ( ) ; } 
protected Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { Response response = connection . serviceRequest ( cmd , args ) ; } 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . GETSET , keybytes , value ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public byte [ ] getset ( String key , Number value ) hrows RedisException { return getset ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > byte [ ] getset ( String key , T value ) hrows RedisException { return getset ( key , DefaultCodec . encode ( value ) ) ; } 
public long incr ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . INCR , keybytes ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public long incrby ( String key , int delta ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . INCRBY , keybytes , Convert . oBytes ( delta ) ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public long decr ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MAX_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . DECR , keybytes ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public long decrby ( String key , int delta ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MAX_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . DECRBY , keybytes , Convert . oBytes ( delta ) ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public long llen ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Integer . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . LLEN , keybytes ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public long scard ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SCARD , keybytes ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public long lrem ( String key , byte [ ] value , int count ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] countBytes = Convert . oBytes ( count ) ; long remcnt = 0 ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . LREM , keybytes , value , countBytes ) ; remcnt = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return remcnt ; } 
protected abstract void setConnection ( Connection connection ) ; }} 
protected final void connect ( ) hrows IllegalStateException , ClientRuntimeException { isConnected = true; 
protected final void disconnect ( ) hrows IllegalStateException { Assert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; socketClose ( ) ; isConnected = false ; 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd ) { case SINTERSTORE:case SUNION: case SUNIONSTORE:case MGET:{int keycnt = args.length;} 
public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException { Response response = null ; switch ( cmd ) { case MGET:case LRANGE:case SINTER:case SUNION:case SMEMBERS:case SORT:response = createMultiBulkResponse (cmd);break;default:throw new ProviderException ("createResponse() for Command " + cmd.code + " not yet implemented!");}return response; 
protected Request createRequest ( ByteArrayOutputStream buffer ) { } 
protected Response createStatusResponse ( Command cmd ) { if ( null = = cache_synchLineResponse ) cache_synchLineResponse = new SynchLineResponse ( cmd , ValueType . STATUS ) ; else { cache_synchLineResponse . reset ( cmd ) ; } return cache_synchLineResponse ; } 
protected Response createBooleanResponse ( Command cmd ) { if ( null = = cache_synchLineResponse ) cache_synchLineResponse = new SynchLineResponse ( cmd , ValueType . BOOLEAN ) ; else { cache_synchLineResponse . reset ( cmd , ValueType . BOOLEAN ) ; } return cache_synchLineResponse ; } 
protected Response createStringResponse ( Command cmd ) { if ( null = = cache_synchLineResponse ) cache_synchLineResponse = new SynchLineResponse ( cmd , ValueType . STRING ) ; else { cache_synchLineResponse . reset ( cmd , ValueType . STRING ) ; } return cache_synchLineResponse ; } 
protected Response createNumberResponse ( Command cmd ) { ValueType flavor = ValueType . NUMBER64 ; if ( null = = cache_synchLineResponse ) cache_synchLineResponse = new SynchLineResponse ( cmd , flavor ) ; else { cache_synchLineResponse . reset ( cmd , flavor ) ; } return cache_synchLineResponse ; } 
protected void reset ( Command cmd , Type ype ) { this . cmd = cmd ; this . ype = ype ; offset = 0 ; didRead = false ; status = null ; isError = false ; } 
void readLine ( InputStream in ) { offset = 0 ; int c = - 1 ; int available = buffer . length - offset ; while ((c = in.read(buffer, offset, available)) != -1) { 
void seekToCRLF ( InputStream in ) { offset = 0 ; int c = - 1 ; int available = buffer . length - offset ; try { while ( ( c = in . read ( buffer , offset , 1 ) ) ! = - 1 ) { offset + + ; available - - ; if ( offset > 2 & & buffer [ offset - 2 ] = = ( byte ) 13 & & buffer [ offset - 1 ] = = ( byte ) 10 ) { break ; } 
int readControlLine ( InputStream in , boolean checkForError , byte ctlByte ) { seekToCRLF ( in ) ; if ( checkForError & & ( his . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = rue ) { status = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; didRead = rue ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; return; 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; super . readLine ( in ) ; if ( status . isError ( ) ) { didRead = rue ; return ; } } 
public void estElicitErrors ( ) { test = Command . AUTH . code ; Log . log ( " TEST: Elicit errors " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estGetSetStringByteArray ( ) { test = Command . SET . code + " | " + Command . GETSET . code + " byte[] " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public JRedis auth ( String authorization ) hrows RedisException ; info () throws RedisException;} 
public JRedis ping ( ) hrows RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void run ( ) hrows RedisException { Log . log ( " ***** JProfileTestCase **** " ) ; jredis . auth ( " jredis " ) . ping ( ) . flushall ( ) ; int iter = 100000 ; String key = " foostring " ; String cntrkey = " foocntr " ; String listkey = " foolist " ; String setkey = " fooset " ; byte [ ] data = " meow " . getBytes ( ) ; long start = System . currentTimeMillis ( ) ; for ( Long j = 0 L ; j < iter ; j + + ) { jredis . incr ( cntrkey ) ; jredis . set ( key , data ) ; jredis . sadd ( setkey , data ) ; jredis . rpush ( listkey , data ) ; } long delta = System . currentTimeMillis ( ) - start ; float rate = ( iter * 1000 ) / delta ; System . out . format ( " %d iterations | %d msec | %8.2f /sec " , iter , delta , rate ) ; } 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException { byte [ ] srcKeyBytes = null ; if ( ( srcKeyBytes = getKeyBytes ( srcKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + srcKey + " ] " ) ; byte [ ] destKeyBytes = null ; if ( ( destKeyBytes = getKeyBytes ( destKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + destKey + " ] " ) ; boolean value = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SMOVE , srcKeyBytes , destKeyBytes , member ) ; value = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException { return smove ( srcKey , destKey , DefaultCodec . encode ( stringValue ) ) ; } 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException { return smove ( srcKey , destKey , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException { return smove ( srcKey , destKey , DefaultCodec . encode ( object ) ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd ) { case SINTERSTORE:case SUNION: case SUNIONSTORE:case MGET:{int keycnt = args.length;} 
public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException { Response response = null ; switch ( cmd ) { case MGET:case LRANGE:case SINTER:case SUNION:case SMEMBERS:case SORT:response = createMultiBulkResponse (cmd);break;default:throw new ProviderException ("createResponse() for Command " + cmd.code + " not yet implemented!");}return response; 
public void estSmoveStringByteArray ( ) { test = Command . SMOVE . code + " byte[] " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public JRedis auth ( String authorization ) hrows RedisException ; info () throws RedisException;} 
public JRedis ping ( ) hrows RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . SDIFF , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public void sdiffstore ( String dest , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } this . serviceRequest ( Command . SDIFFSTORE , setbytes ) ; } 
public long tl ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . TTL , keybytes ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd ) { case SINTERSTORE:case SUNION: case SUNIONSTORE:case SDIFF: case SDIFFSTORE:case MGET:{int keycnt = args.length;} 
public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException { Response response = null ; switch ( cmd ) { case MGET:case LRANGE:case SINTER:case SUNION:case SDIFF:case SMEMBERS:case SORT:response = createMultiBulkResponse (cmd);break;default:throw new ProviderException ("createResponse() for Command " + cmd.code + " not yet implemented!");}return response; 
public void estExists_Expire_TTL ( ) { test = Command . EXISTS . code + " | " + Command . EXPIRE . code + " | " + Command . TTL . code ; Log . log ( " TEST: %s command(s) " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public void estSdiff ( ) { test = Command . SDIFF . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public JRedis auth ( String authorization ) hrows RedisException ; info () throws RedisException;} 
public JRedis ping ( ) hrows RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public JRedis select ( int index ) hrows RedisException ; public JRedis flushdb ( ) hrows RedisException ; public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) hrows RedisException ; public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public Sort sort ( String key ) ; info () throws RedisException;} 
public void save ( ) hrows RedisException ; public void bgsave ( ) hrows RedisException ; public long lastsave ( ) hrows RedisException ; @Deprecated public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public void bgsave ( ) hrows RedisException ; public long lastsave ( ) hrows RedisException ; @Deprecated public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public long lastsave ( ) hrows RedisException ; @Deprecated public void shutdown ( ) hrows RedisException ; info () throws RedisException;} 
public void estSdiffstore ( ) { test = Command . SDIFFSTORE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . select ( db1 ) . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) hrows RedisException ; public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushall ( ) hrows RedisException ; public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public Sort sort ( String key ) ; info () throws RedisException;} 
public void save ( ) hrows RedisException ; public void bgsave ( ) hrows RedisException ; public long lastsave ( ) hrows RedisException ; info () throws RedisException;} 
public void bgsave ( ) hrows RedisException ; public long lastsave ( ) hrows RedisException ; info () throws RedisException;} 
public long lastsave ( ) hrows RedisException ; info () throws RedisException;} 
public int getReconnectCnt ( ) ; public InetAddress getAddress ( ) ; public int getPort ( ) ; public byte [ ] getCredentials ( ) ; public int getDatabase ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public InetAddress getAddress ( ) ; public int getPort ( ) ; public byte [ ] getCredentials ( ) ; public int getDatabase ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public int getPort ( ) ; public byte [ ] getCredentials ( ) ; public int getDatabase ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public byte [ ] getCredentials ( ) ; public int getDatabase ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public int getDatabase ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
protected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
protected abstract JRedis newConnection ( String host , int port , int db , String password ) ; protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . ping ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . dbsize ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . sadd ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . lpush ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . rpush ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . incr ( key ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . decr ( key ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . incrby ( key , 10 ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . decrby ( key , 10 ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . set ( key , data ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . setnx ( key , data ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public void run ( ) hrows RedisException { Log . log ( " ***** JProfileTestCase **** " ) ; } 
protected final JRedis newConnection ( String host , int port , int db , String password ) { return new JRedisClient ( host , port , password , db ) ; } 
public static void main ( String [ ] args ) hrows RedisException { JRedis jredis = new JRedisClient ( " localhost " , 6379 , " jredis " , 0 ) ; new JRedisJProfileSubject ( jredis ) . run ( ) ; } 
protected abstract void setConnection ( Connection connection ) ; }} 
protected Connection createSynchConnection ( String host , int port , int database , byte [ ] credentials , RedisVersion redisVersion ) { InetAddress address = null ; Connection synchConnection = null ; try { address = InetAddress . getByName ( host ) ; synchConnection = new SynchConnection ( address , port , database , credentials , redisVersion ) ; Assert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } catch ( NotSupportedException e ) { Log . log ( " Can not support redis protocol '%s' " , redisVersion ) ; throw e ; } catch ( ProviderException e ) { Log . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; throw e ; } catch ( ClientRuntimeException e ) { String msg = e . getMessage ( ) + " nMake sure your server is running. " ; Log . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; setConnection ( new FaultedConnection ( msg ) ) ; } catch ( UnknownHostException e ) { String msg = " Couldn't obtain InetAddress for " + host ; Log . problem ( msg + " => " + e . getLocalizedMessage ( ) ) ; throw new ClientRuntimeException ( msg , e ) ; } return synchConnection ; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException { return serviceRequest ( false , cmd , args ) ; } 
public void setJRedisProvider ( ) { super . setJRedisProviderInstance ( new JRedisClient ( his . host , his . port , his . password , his . db1 ) ) ; Log . log ( " JRedisClientNGTest.setJRedisProvider " ) ; } 
public void estElicitErrors ( ) { test = Command . AUTH . code ; Log . log ( " TEST: Elicit errors " , est ) ; try { jredis . flushdb ( ) ; 
public void estExists_Expire_TTL ( ) { test = Command . EXISTS . code + " | " + Command . EXPIRE . code + " | " + Command . TTL . code ; Log . log ( " TEST: %s command(s) " , est ) ; try { jredis . flushdb ( ) ; 
public void estRenamenx ( ) { test = Command . RENAMENX . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSaveAndLastSave ( ) { test = Command . SAVE . code + " | " + Command . LASTSAVE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSetStringByteArray ( ) { test = Command . SET . code + " | " + Command . SETNX . code + " byte[] | " + Command . GET ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSetStringString ( ) { test = Command . SET . code + " | " + Command . SETNX . code + " String | " + Command . GET ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSetStringNumber ( ) { test = Command . SET . code + " | " + Command . SETNX . code + " Long | " + Command . GET ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSetStringT ( ) { test = Command . SET . code + " | " + Command . SETNX . code + " Java Object | " + Command . GET ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estGetSetStringByteArray ( ) { test = Command . SET . code + " | " + Command . GETSET . code + " byte[] " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estIncrAndDecr ( ) { test = Command . INCR . code + " | " + Command . DECR . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estIncrbyAndDecrby ( ) { test = Command . INCRBY . code + " | " + Command . DECRBY . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estRpushStringByteArray ( ) { test = Command . RPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLpushStringByteArray ( ) { test = Command . LPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estRpushStringString ( ) { test = Command . RPUSH . code + " String | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLpushStringString ( ) { test = Command . LPUSH . code + " String | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estRpushStringNumber ( ) { test = Command . RPUSH . code + " Number | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLpushStringNumber ( ) { test = Command . LPUSH . code + " Number | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estRpushStringT ( ) { test = Command . RPUSH . code + " Java Object | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLpushStringT ( ) { test = Command . LPUSH . code + " Java Object | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLtrim ( ) { test = Command . LTRIM . code + " | " + Command . LLEN . code + " | " + Command . LRANGE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLremStringByteArrayInt ( ) { test = Command . LREM . code + " byte[] | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLremStringStringInt ( ) { test = Command . LREM . code + " String | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLremStringNumberInt ( ) { test = Command . LREM . code + " Number | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLremStringTInt ( ) { test = Command . LREM . code + " Java Object | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLsetStringIntByteArray ( ) { test = Command . LSET . code + " byte[] | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLsetStringIntString ( ) { test = Command . LSET . code + " String | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLsetStringIntNumber ( ) { test = Command . LSET . code + " Number | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estLsetStringIntT ( ) { test = Command . LSET . code + " Java Object | " + Command . LLEN ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSaddStringByteArray ( ) { test = Command . SADD . code + " byte[] " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSaddStringString ( ) { test = Command . SADD . code + " String " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSaddStringNumber ( ) { test = Command . SADD . code + " Number " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSaddStringT ( ) { test = Command . SADD . code + " Java Object " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSmembers ( ) { test = Command . SMEMBERS . code + " byte[] " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; String setkey = keys . get ( 0 ) ; for ( int i = 0 ; i < SMALL_CNT ; i + + ) assertTrue ( jredis . sadd ( setkey , dataList . get ( i ) ) , " sadd of random element should be true " ) ; List < byte [ ] > members = null ; members = jredis . smembers ( setkey ) ; assertTrue ( members . size ( ) = = SMALL_CNT ) ; jredis.flushdb(); 
public void estSmoveStringByteArray ( ) { test = Command . SMOVE . code + " byte[] " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSismemberStringByteArray ( ) { test = Command . SISMEMBER . code + " byte[] " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSismemberStringString ( ) { test = Command . SISMEMBER . code + " String " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSismemberStringNumber ( ) { test = Command . SISMEMBER . code + " Number " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSismemberStringT ( ) { test = Command . SISMEMBER . code + " Java Object " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estScard ( ) { test = Command . SCARD . code + " Java Object " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSinterstore ( ) { test = Command . SINTERSTORE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSunionstore ( ) { test = Command . SUNIONSTORE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSdiffstore ( ) { test = Command . SDIFFSTORE . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSremStringByteArray ( ) { test = Command . SISMEMBER . code + " byte[] " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSremStringString ( ) { test = Command . SISMEMBER . code + " String " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSremStringNumber ( ) { test = Command . SISMEMBER . code + " Number " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estSremStringT ( ) { test = Command . SISMEMBER . code + " Java Object " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estRandomkey ( ) { test = Command . RANDOMKEY . code ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estKeys ( ) { test = Command . KEYS . code + " (*) " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public void estKeysString ( ) { test = Command . KEYS . code + " (using patterns) " ; Log . log ( " TEST: %s command " , est ) ; try { jredis . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public JRedis flushall ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) hrows RedisException ; info () throws RedisException;} 
public Sort sort ( String key ) ; info () throws RedisException;} 
public void save ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void bgsave ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lastsave ( ) hrows RedisException ; info () throws RedisException;} 
public InetAddress getAddress ( ) ; } 
public int getPort ( ) ; } 
public byte [ ] getCredentials ( ) ; } 
public int getDatabase ( ) ; } 
public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; } 
public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public int getReconnectCnt ( ) ; } 
protected final void reconnect ( ) { Log . log ( " RedisConnection - reconnecting " ) ; int attempts = 0 ; while ( rue ) { try { 
protected final void connect ( ) hrows IllegalStateException , ClientRuntimeException { Log.log("RedisConnection - connected"); 
public final byte [ ] readBulkData ( InputStream in , int length ) throws IOException , RuntimeException { byte [ ] data = new byte [ length ] ; } 
public final byte [ ] readBulkData ( InputStream in , int length ) throws IOException , RuntimeException { byte [ ] data = new byte [ length ] ; } 
public static final void log ( String msg ) { _loginfo ( msg ) ; } public static final void error ( String msg ) { _log ( Category . ERROR , msg ) ; } 
protected abstract void setConnection ( Connection connection ) ; }} 
protected Connection createSynchConnection ( String host , int port , int database , byte [ ] credentials , RedisVersion redisVersion ) { InetAddress address = null ; Connection synchConnection = null ; try { address = InetAddress . getByName ( host ) ; ConnectionSpec spec = SynchConnection . getDefaultConnectionSpec ( address , port , database , credentials ) ; synchConnection = createSynchConnection ( spec , redisVersion ) ; Assert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } catch ( UnknownHostException e ) { String msg = " Couldn't obtain InetAddress for " + host ; Log . problem ( msg + " => " + e . getLocalizedMessage ( ) ) ; throw new ClientRuntimeException ( msg , e ) ; } return synchConnection ; } 
protected Connection createSynchConnection ( ConnectionSpec connectionSpec , RedisVersion redisVersion ) { Connection synchConnection = null ; try { synchConnection = new SynchConnection ( connectionSpec , redisVersion ) ; Assert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } catch ( NotSupportedException e ) { Log . log ( " Can not support redis protocol '%s' " , redisVersion ) ; throw e ; } catch ( ProviderException e ) { Log . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; throw e ; } catch ( ClientRuntimeException e ) { String msg = e . getMessage ( ) + " nMake sure your server is running. " ; Log . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; setConnection ( new FaultedConnection ( msg ) ) ; } return synchConnection ; } 
public static final ConnectionSpec getDefaultConnectionSpec ( InetAddress address , int port , int database , byte [ ] credentials ) throws ClientRuntimeException { return new DefaultConnectionSpec ( address , port , database , credentials ) ; } 
private void setDefaultProperties ( ) { setSocketProperty(SO_PREF_LATENCY, DEFAULT_SO_PREF_LATENCY); } 
public String getRandomString ( int size ) { StringBuilder builder = new StringBuilder ( size ) ; for ( int i = 0 ; i < size ; i + + ) { char c = ( char ) ( random . nextInt ( 126 - 33 ) + 33 ) ; builder . append ( c ) ; } return builder . oString ( ) ; } 
protected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
protected abstract JRedis newConnection ( String host , int port , int db , String password ) ; protected abstract void work();}} 
protected final void runBenchmarks ( String host , int port , int connectionCnt , int reqCnt , int size , int db ) { Benchmarker.runBenchmark (Command.SREM, reqCnt, connectionCnt, workers); 
public ConnectionSpec setAddress ( InetAddress address ) { this . address = address ; return his ; } 
public ConnectionSpec setCredentials ( byte [ ] credentials ) { this . credentials = credentials ; return his ; } 
public ConnectionSpec setDatabase ( int database ) { this . database = database ; return his ; } 
public ConnectionSpec setReconnectCnt ( int reconnectCnt ) { this . reconnectCnt = reconnectCnt ; return his ; } 
ConnectionSpec getDefaultConnectionSpec ( ) { ConnectionSpec defaultConnectionSpec = null ; try { defaultConnectionSpec = getDefaultConnectionSpec ( " localhost " , 6379 , null , 0 ) ; } catch ( UnknownHostException e ) { e . printStackTrace ( ) ; } 
private ConnectionSpec getDefaultConnectionSpec ( String host , int port , String password , int database ) hrows UnknownHostException { InetAddress address = InetAddress . getByName ( host ) ; return SynchConnection . getDefaultConnectionSpec ( address , port , database , getCredentialBytes ( password ) ) ; } 
public ConnectionSpec getDefaultConnectionSpec ( ) { ConnectionSpec defaultConnectionSpec = null ; try { defaultConnectionSpec = getDefaultConnectionSpec ( " localhost " , 6379 , null , 0 ) ; } catch ( UnknownHostException e ) { e . printStackTrace ( ) ; } 
public ConnectionSpec getDefaultConnectionSpec ( String host , int port , String password , int database ) hrows UnknownHostException { InetAddress address = InetAddress . getByName ( host ) ; return SynchConnection . getDefaultConnectionSpec ( address , port , database , getCredentialBytes ( password ) ) ; } 
public static ConnectionSpec getDefaultConnectionSpec ( ) { ConnectionSpec defaultConnectionSpec = null ; try { defaultConnectionSpec = getDefaultConnectionSpec ( " localhost " , 6379 , null , 0 ) ; } catch ( UnknownHostException e ) { e . printStackTrace ( ) ; } 
public static ConnectionSpec getDefaultConnectionSpec ( String host , int port , String password , int database ) hrows UnknownHostException { InetAddress address = InetAddress . getByName ( host ) ; return SynchConnection . getDefaultConnectionSpec ( address , port , database , getCredentialBytes ( password ) ) ; } 
public static void main ( String [ ] args ) { exampleUsingDefaultConnectionSpec ( ) ; exampleUsingCustomTCPSettings ( ) ; } 
private static void exampleUsingCustomTCPSettings ( ) { Note that if your localhost:6379 redis server expects a password 
private static void exampleUsingDefaultConnectionSpec ( ) { Note that if your localhost:6379 redis server expects a password 
public < T > Codec < T > getKeyCodec ( Class < T > keyClass ) ; public < T > Semantics setValueCodec ( Class < T > valueClass , Codec < T > valueCdec ) ; } 
public < T > Semantics setKeyCodec ( Class < T > keyClass , Codec < T > keyCodec ) ; public < T > Semantics setValueCodec ( Class < T > valueClass , Codec < T > valueCdec ) ; } 
public < T > Codec < T > getValueCodec ( Class < T > valueClass ) ; public < T > Semantics setValueCodec ( Class < T > valueClass , Codec < T > valueCdec ) ; } 
public T decode ( byte [ ] bytes ) ; public boolean supports ( Class < ? > ype ) ; } 
public byte [ ] encode ( T object ) ; public boolean supports ( Class < ? > ype ) ; } 
public static final byte [ ] compress ( byte [ ] data ) { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; try { GZIPOutputStream gzipOutputtStream = new GZIPOutputStream ( out ) ; gzipOutputtStream . write ( data ) ; gzipOutputtStream . close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( " Failed to GZip compress data " , e ) ; } return out . oByteArray ( ) ; } 
public static final byte [ ] decompress ( byte [ ] data ) { ByteArrayOutputStream buffer = null ; GZIPInputStream gizpInputStream = null ; try { buffer = new ByteArrayOutputStream ( ) ; gizpInputStream = new GZIPInputStream ( new ByteArrayInputStream ( data ) ) ; int = - 1 ; int ot = 0 ; byte [ ] _buffer = new byte [ 1024 * 12 ] ; while ( - 1 ! = ( = gizpInputStream . read ( _buffer ) ) ) { buffer . write ( _buffer , 0 , ) ; tot + = ; } gizpInputStream . close ( ) ; buffer . close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( " Failed to GZip decompress data " , e ) ; } return buffer . oByteArray ( ) ; } 
public void estCompression ( ) { Log . log ( " Testing compress/decompress of 1000 random 24KB strings ... " ) ; int cnt = 1000 ; int size = 1024 * 24 ; for ( int i = 0 ; i < cnt ; i + + ) { String randomString = getRandomString ( size ) ; 
public static final int getInt ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) hrows IllegalArgumentException { byte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final long getLong ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) hrows IllegalArgumentException { byte [ ] buff = potentiallySignedAsciiBytes ; } 
int readControlLine ( InputStream in , boolean checkForError , byte ctlByte ) { seekToCRLF ( in ) ; if ( checkForError & & ( his . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = rue ) { status = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; didRead = rue ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; super . readLine ( in ) ; if ( status . isError ( ) ) { didRead = rue ; return ; } } 
public static final int oInt ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) hrows IllegalArgumentException { byte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final long oLong ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) hrows IllegalArgumentException { byte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final int oInt ( byte [ ] potentiallySignedBytes ) hrows IllegalArgumentException { if ( null = = potentiallySignedBytes ) hrow new IllegalArgumentException ( " null input " ) ; return oInt ( potentiallySignedBytes , 0 , potentiallySignedBytes . length ) ; } 
public static final long oLong ( byte [ ] potentiallySignedBytes ) hrows IllegalArgumentException { if ( null = = potentiallySignedBytes ) hrow new IllegalArgumentException ( " null input " ) ; return oLong ( potentiallySignedBytes , 0 , potentiallySignedBytes . length ) ; } 
public void estGetNaturalNumber ( ) { byte [ ] data = null ; test big data 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd . requestType ) { } 
public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException { Response response = null ; switch ( cmd . responseType ) { case BOOLEAN : response = createBooleanResponse ( cmd ) ; break ; case BULK : response = createBulkResponse ( cmd ) ; break ; case MULTI_BULK : response = createMultiBulkResponse ( cmd ) ; break ; case NUMBER : response = createNumberResponse ( cmd ) ; break ; case STATUS : response = createStatusResponse ( cmd ) ; break ; case STRING : response = createStringResponse ( cmd ) ; break ; case VIRTUAL : response = new VirtualResponse ( ResponseStatus . STATUS_CIAO ) ; break ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd . requestType ) { case NO_ARG : } 
public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException { Response response = null ; switch ( cmd . responseType ) { case BOOLEAN : response = createBooleanResponse ( cmd ) ; break ; case BULK : response = createBulkResponse ( cmd ) ; break ; case MULTI_BULK : response = createMultiBulkResponse ( cmd ) ; break ; case NUMBER : response = createNumberResponse ( cmd ) ; break ; case STATUS : response = createStatusResponse ( cmd ) ; break ; case STRING : response = createStringResponse ( cmd ) ; break ; case VIRTUAL : response = new VirtualResponse ( ResponseStatus . STATUS_CIAO ) ; break ; } return response ; 
protected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
protected abstract JRedis newConnection ( String host , int port , int db , String password ) hrows ClientRuntimeException ; protected abstract void work();}} 
protected final JRedis newConnection ( String host , int port , int db , String password ) hrows ClientRuntimeException { return new JRedisClient ( host , port , password , db ) ; } 
public static void main ( String [ ] args ) hrows RedisException { JRedis jredis ; jredis = new JRedisClient ( " localhost " , 6379 , " jredis " , 0 ) ; new JRedisJProfileSubject ( jredis ) . run ( ) ; } 
protected Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { Response response = connection . serviceRequest ( cmd , args ) ; return response ; } 
private final void initialize ( ) { connPoolAccess = new Semaphore ( connCount ) ; conns = new Connection [ connCount ] ; connInUse = new boolean [ connCount ] ; Connection conn = null ; for ( int i = 0 ; i < connCount ; i + + ) { note: using a shared connection mod 
protected Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { Response response = null ; } 
protected abstract void setConnection ( Connection connection ) ; }} 
protected Connection createSynchConnection ( String host , int port , int database , byte [ ] credentials , boolean isShared , RedisVersion redisVersion ) { InetAddress address = null ; Connection synchConnection = null ; try { address = InetAddress . getByName ( host ) ; ConnectionSpec spec = DefaultConnectionSpec . newSpec ( address , port , database , credentials ) ; synchConnection = createSynchConnection ( spec , isShared , redisVersion ) ; Assert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } catch ( UnknownHostException e ) { String msg = " Couldn't obtain InetAddress for " + host ; Log . problem ( msg + " => " + e . getLocalizedMessage ( ) ) ; throw new ClientRuntimeException ( msg , e ) ; } return synchConnection ; } 
protected Connection createSynchConnection ( ConnectionSpec connectionSpec , boolean isShared , RedisVersion redisVersion ) { Connection synchConnection = null ; try { synchConnection = new SynchConnection ( connectionSpec , isShared , redisVersion ) ; Assert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } catch ( NotSupportedException e ) { Log . log ( " Can not support redis protocol '%s' " , redisVersion ) ; throw e ; } catch ( ProviderException e ) { Log . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; throw e ; } catch ( ClientRuntimeException e ) { String msg = e . getMessage ( ) + " nMake sure your server is running. " ; Log . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; setConnection ( new FaultedConnection ( msg ) ) ; } return synchConnection ; } 
protected final void connect ( ) hrows IllegalStateException , ClientRuntimeException { Log.log("RedisConnection - connected"); 
private void setDefaultProperties ( ) { setSocketProperty(SO_PREF_LATENCY, DEFAULT_SO_PREF_LATENCY); } 
public static final ConnectionSpec newSpec ( ) throws ClientRuntimeException { return newSpec ( " localhost " , 6379 , 0 , null ) ; } 
public static final ConnectionSpec newSpec ( String host , int port , int database , byte [ ] credentials ) throws ClientRuntimeException { InetAddress address ; ry { address = InetAddress . getByName ( host ) ; } catch ( UnknownHostException e ) { throw new ClientRuntimeException ( " unknown host: " + host , e ) ; } return newSpec ( address , port , database , credentials ) ; } 
public static final ConnectionSpec newSpec ( InetAddress address , int port , int database , byte [ ] credentials ) throws ClientRuntimeException { return new DefaultConnectionSpec ( address , port , database , credentials ) ; } 
protected Response createStatusResponse ( Command cmd ) { return new SynchLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , ValueType . STATUS ) ; } 
protected Response createBooleanResponse ( Command cmd ) { return new SynchLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , ValueType . BOOLEAN ) ; } 
protected Response createStringResponse ( Command cmd ) { return new SynchLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , ValueType . STRING ) ; } 
protected Response createNumberResponse ( Command cmd ) { ValueType flavor = ValueType . NUMBER64 ; return new SynchLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , flavor ) ; } 
protected Response createBulkResponse ( Command cmd ) { return new SynchBulkResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd ) ; } 
protected Response createMultiBulkResponse ( Command cmd ) { return new SynchMultiBulkResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd ) ; } 
public static final < E extends RuntimeException > void identical ( byte [ ] a , byte [ ] b , Class < E > clazz ) { notNull ( a , " arg a " , clazz ) ; notNull ( b , " arg b " , clazz ) ; if ( a . length ! = b . length ) { throwIt ( " byte arrays being compared are of unequal length " , clazz ) ; } for ( int i = 0 ; i < a . length ; i + + ) { if ( a [ i ] ! = b [ i ] ) { 
public void setJRedisProvider ( ) { try { JRedis jredis = new JRedisClient ( his . host , his . port , his . password , his . db1 ) ; 
private static void exampleUsingDefaultConnectionSpec ( ) { Note that if your localhost:6379 redis server expects a password 
public static void main ( String [ ] args ) { int database = 11 ; ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; int connCnt = 10 ; int userCnt = 100 ; int opsCnt = 50000 ; 
private static Thread getDummyUser ( final int id , final int opsCnt ) { Thread user = new Thread ( new Runnable ( ) { @Override public void run ( ) { try { String key = null ; byte [ ] value = null ; for ( int i = 0 ; i < opsCnt ; i + + ) { key = " foo " + i + " _ " + id ; value = ( " woof_ " + i + " _ " + id ) . getBytes ( ) ; service . set ( key , value ) ; } } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } , " user_ " + id ) ; return user ; } 
void readSingleLineResponse ( InputStream in ) { offset = 0 ; int c = - 1 ; int available = buffer . length - offset ; while ((c = in.read(buffer, offset, available)) != -1) { 
public final byte [ ] readBulkData ( InputStream in , int length ) throws IOException , RuntimeException { byte [ ] data = new byte [ length ] ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; super . readSingleLineResponse ( in ) ; if ( status . isError ( ) ) { didRead = rue ; return ; } } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; int size = readControlLine ( in , rue , SIZE_BYTE ) ; if ( status . isError ( ) ) { didRead = rue ; return ; } if ( size > = 0 ) { try { data = super . readBulkData ( in , size ) ; } catch ( IllegalArgumentException bug ) { throw new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } catch ( IOException problem ) { throw new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } catch ( RuntimeException bug ) { throw new ProviderException ( " Bug: reading the bulk data bytes. expecting " + size + " bytes. " , bug ) ; } } didRead = rue ; return ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; int count = super . readControlLine ( in , rue , COUNT_BYTE ) ; if ( status . isError ( ) ) { didRead = rue ; return ; } if ( count > = 0 ) { datalist = new ArrayList < byte [ ] > ( count ) ; try { int size = - 1 ; for ( int i = 0 ; i < count ; i + + ) { size = readControlLine ( in , false , SIZE_BYTE ) ; if ( size > 0 ) datalist . add ( super . readBulkData ( in , size ) ) ; else datalist . add ( null ) ; } } catch ( IllegalArgumentException bug ) { throw new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } catch ( IOException problem ) { throw new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } catch ( RuntimeException bug ) { throw new ProviderException ( " Bug: reading the multibulk data bytes. " , bug ) ; } } didRead = rue ; return ; 
public static final String format ( String format , Object . . . args ) { Formatter formatter = new Formatter ( ) ; formatter . format ( format , args ) ; return formatter . oString ( ) ; } 
protected void quitOnRunEnd ( boolean flag ) { his . quitOnRunEnd = flag ; } ------------------------------------------------------------------------ 
protected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
protected abstract JRedis newConnection ( String host , int port , int db , String password ) hrows ClientRuntimeException ; protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . ping ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . dbsize ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . sadd ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . lpush ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . rpush ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . incr ( key ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . decr ( key ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . incrby ( key , 10 ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . decrby ( key , 10 ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . set ( key , data ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . setnx ( key , data ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public static void main ( String [ ] args ) { } 
public static void main ( String [ ] args ) { } 
protected final JRedis newConnection ( String host , int port , int db , String password ) hrows ClientRuntimeException { return jredisService ; } 
protected final void connect ( ) hrows IllegalStateException , ClientRuntimeException { Log.log("RedisConnection - connected"); 
protected void reset ( Command cmd , Type ype ) { this . cmd = cmd ; this . ype = ype ; readOffset = 0 ; didRead = false ; status = null ; isError = false ; } 
void readSingleLineResponse ( InputStream in ) { readOffset = 0 ; int c = - 1 ; int available = buffer . length ; try { while ( ( c = in . read ( buffer , readOffset , available ) ) ! = - 1 ) { 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; super . readSingleLineResponse ( in ) ; if ( status . isError ( ) ) { didRead = rue ; return ; } } 
void seekToCRLF ( BufferedInputStream in ) { readOffset = 0 ; } 
int readControlLine ( BufferedInputStream in , boolean checkForError , byte ctlByte ) { seekToCRLF ( in ) ; if ( checkForError & & ( his . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = rue ) { status = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , readOffset - 3 ) ) ; didRead = rue ; } 
public final byte [ ] readBulkData ( BufferedInputStream in , int length ) throws IOException , RuntimeException { byte [ ] data = new byte [ length ] ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; BufferedInputStream bin = new BufferedInputStream ( in , INPUT_STREAM_BUFFER_SIZE ) ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; BufferedInputStream bin = new BufferedInputStream ( in , 1024 ) ; return; 
public static void main ( String [ ] args ) { int database = 11 ; ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; int connCnt = 7 ; int userCnt = 10 ; int opsCnt = 100000 ; users[i].start(); 
private static Thread getDummyUser ( final int id , final int opsCnt ) { Thread user = new Thread ( new Runnable ( ) { @Override public void run ( ) { try { String key = null ; byte [ ] value = null ; for ( int i = 0 ; i < opsCnt ; i + + ) { key = " foo " + i + " _ " + id ; value = ( " woof_ " + i + " _ " + id ) . getBytes ( ) ; service . set ( key , value ) ; service . get ( key ) ; } } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } , " user_ " + id ) ; return user ; } 
void readSingleLineResponse ( InputStream in ) { offset = 0 ; int c = - 1 ; int available = buffer . length ; try { while ( ( c = in . read ( buffer , offset , available ) ) ! = - 1 ) { 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; super . readSingleLineResponse ( in ) ; didRead = rue ; switch (flavor){ 
void seekToCRLF ( BufferedInputStream in ) { offset = 0 ; int c = - 1 ; int available = buffer . length ; try { while ( ( c = in . read ( buffer , offset , 1 ) ) ! = - 1 ) { offset + = c ; available - = c ; if ( offset > 2 & & buffer [ offset - 2 ] = = ( byte ) 13 & & buffer [ offset - 1 ] = = ( byte ) 10 ) { break ; } 
int readControlLine ( BufferedInputStream in , boolean checkForError , byte ctlByte ) { seekToCRLF ( in ) ; if ( checkForError & & ( his . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = rue ) { status = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; didRead = rue ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; BufferedInputStream bin = new BufferedInputStream ( in , INPUT_STREAM_BUFFER_SIZE ) ; int size = readControlLine ( bin , rue , SIZE_BYTE ) ; if ( ! status . isError ( ) & & size > = 0 ) { try { data = super . readBulkData ( bin , size ) ; } catch ( IllegalArgumentException bug ) { throw new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } catch ( IOException problem ) { throw new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } catch ( RuntimeException bug ) { throw new ProviderException ( " Bug: reading the bulk data bytes. expecting " + size + " bytes. " , bug ) ; } } didRead = rue ; return ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; BufferedInputStream bin = new BufferedInputStream ( in , 1024 ) ; int count = super . readControlLine ( bin , rue , COUNT_BYTE ) ; if ( ! status . isError ( ) & & count > = 0 ) { datalist = new ArrayList < byte [ ] > ( count ) ; try { int size = - 1 ; for ( int i = 0 ; i < count ; i + + ) { size = readControlLine ( bin , false , SIZE_BYTE ) ; if ( size > 0 ) datalist . add ( super . readBulkData ( bin , size ) ) ; else datalist . add ( null ) ; } } catch ( IllegalArgumentException bug ) { throw new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } catch ( IOException problem ) { throw new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } catch ( RuntimeException bug ) { throw new ProviderException ( " Bug: reading the multibulk data bytes. " , bug ) ; } } didRead = rue ; return ; } 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > quit ( ) ; }} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;}} 
public Future < RedisType > ype ( String key ) ; }} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > tl ( String key ) ; }} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > rpop ( String listKey ) ; }} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; }} 
public Future < ResponseStatus > flushdb ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > flushall ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > move ( String key , int dbIndex ) ; }} 
public Sort sort ( String key ) ; }} 
public Future < ResponseStatus > save ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > bgsave ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > lastsave ( ) ; }} 
public Future < Map < String , String > > info ( ) ; }} 
public Modality getModality ( ) ; public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; } 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { throw new ClientRuntimeException ( errorMsg ) ; } 
protected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
protected abstract JRedis newConnection ( String host , int port , int db , String password ) hrows ClientRuntimeException ; protected abstract void work();}} 
protected final void runBenchmarks ( String host , int port , int hreadCnt , int reqCnt , int size , int db ) { Benchmarker.runBenchmark (Command.SREM, reqCnt, threadCnt, workers); 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . ping ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . dbsize ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . sadd ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . lpush ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . rpush ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . incr ( key ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . decr ( key ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . incrby ( key , 10 ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . decrby ( key , 10 ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . set ( key , data ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . setnx ( key , data ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public float opsPerSecAtDelta ( long opCount , long delta ) { return ( UNIT . convert ( 1 , TimeUnit . SECONDS ) * opCount ) / ( float ) delta ; } 
public static void main ( String [ ] args ) { } 
public static void main ( String [ ] args ) { } 
public FutureStatus rename ( String oldkey , String newkey ) { byte [ ] oldkeydata = null ; if ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; byte [ ] newkeydata = null ; if ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; return new FutureStatus ( his . queueRequest ( Command . RENAME , oldkeydata , newkeydata ) ) ; } 
public Future < Boolean > renamenx ( String oldkey , String newkey ) { byte [ ] oldkeydata = null ; if ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; byte [ ] newkeydata = null ; if ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . RENAMENX , oldkeydata , newkeydata ) ; return new FutureBoolean ( futureResponse ) ; } 
public FutureStatus rpush ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; return new FutureStatus ( his . queueRequest ( Command . RPUSH , keybytes , value ) ) ; } 
public FutureStatus rpush ( String key , String value ) { } 
public < T extends Serializable > FutureStatus rpush ( String key , T value ) { return rpush ( key , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > sadd ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SADD , keybytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public < T extends Serializable > Future < Boolean > sadd ( String key , T value ) { return sadd ( key , DefaultCodec . encode ( value ) ) ; } 
public FutureStatus set ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; return new FutureStatus ( his . queueRequest ( Command . SET , keybytes , value ) ) ; } 
public Future < byte [ ] > getset ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . GETSET , keybytes , value ) ; return new FutureByteArray ( futureResponse ) ; } 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T value ) { return getset ( key , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > setnx ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SETNX , keybytes , value ) ; return new FutureBoolean ( futureResponse ) ; } 
public < T extends Serializable > Future < Boolean > setnx ( String key , T value ) { return setnx ( key , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > sismember ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SISMEMBER , keybytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > sismember ( String key , Number numberValue ) { return sismember ( key , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > Future < Boolean > sismember ( String key , T object ) { return sismember ( key , DefaultCodec . encode ( object ) ) ; } 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) { byte [ ] srcKeyBytes = null ; if ( ( srcKeyBytes = getKeyBytes ( srcKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + srcKey + " ] " ) ; byte [ ] destKeyBytes = null ; if ( ( destKeyBytes = getKeyBytes ( destKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + destKey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SMOVE , srcKeyBytes , destKeyBytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) { return smove ( srcKey , destKey , DefaultCodec . encode ( stringValue ) ) ; } 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) { return smove ( srcKey , destKey , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) { return smove ( srcKey , destKey , DefaultCodec . encode ( object ) ) ; } 
public Future < Long > incr ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . INCR , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > incrby ( String key , int delta ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . INCRBY , keybytes , Convert . oBytes ( delta ) ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > decr ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . DECR , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > decrby ( String key , int delta ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . DECRBY , keybytes , Convert . oBytes ( delta ) ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > llen ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . LLEN , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > scard ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SCARD , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > dbsize ( ) { Future < Response > futureResponse = his . queueRequest ( Command . DBSIZE ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > lastsave ( ) { Future < Response > futureResponse = his . queueRequest ( Command . LASTSAVE ) ; return new FutureLong ( futureResponse ) ; } 
public Future < byte [ ] > get ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . GET , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > lindex ( String key , long index ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . LINDEX , keybytes , Convert . oBytes ( index ) ) ; return new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > lpop ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . LPOP , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > rpop ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . RPOP , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public Future < String > randomkey ( ) { Future < Response > futureResponse = his . queueRequest ( Command . RANDOMKEY ) ; return new FutureString ( futureResponse ) ; } 
public Future < RedisType > ype ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; return new FutureRedisType ( his . queueRequest ( Command . TYPE , keybytes ) ) ; } 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + moreKeys . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : moreKeys ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . MGET , keybytes ) ) ; } 
public Future < List < byte [ ] > > smembers ( String key ) { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " null key. " ) ; return new FutureByteArrayList ( his . queueRequest ( Command . SMEMBERS , keydata ) ) ; } 
public Future < List < String > > keys ( String pattern ) { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( pattern ) ) = = null ) throw new IllegalArgumentException ( " null key. " ) ; Future < Response > futureResponse = his . queueRequest ( Command . KEYS , keydata ) ; return new FutureKeyList ( futureResponse ) ; } 
public Future < List < byte [ ] > > lrange ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureByteArrayList ( his . queueRequest ( Command . LRANGE , keybytes , fromBytes , oBytes ) ) ; } 
public Sort sort ( final String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisFutureSupport client = his ; Sort sortQuery = new SortSupport ( key , keybytes ) { } 
protected Future < List < byte [ ] > > execAsynchSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) { return new FutureByteArrayList ( client . queueRequest ( Command . SORT , keyBytes , sortSpecBytes ) ) ; } 
protected List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) { throw new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . SINTER , keybytes ) ) ; } 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . SUNION , keybytes ) ) ; } 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . SDIFF , keybytes ) ) ; } 
public FutureStatus sinterstore ( String dest , String . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } return new FutureStatus ( his . queueRequest ( Command . SINTERSTORE , setbytes ) ) ; } 
public FutureStatus sunionstore ( String dest , String . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } return new FutureStatus ( his . queueRequest ( Command . SUNIONSTORE , setbytes ) ) ; } 
public FutureStatus sdiffstore ( String dest , String . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } return new FutureStatus ( his . queueRequest ( Command . SDIFFSTORE , setbytes ) ) ; } 
public Future < Boolean > del ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . DEL , keybytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > exists ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . EXISTS , keybytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public FutureStatus lpush ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; return new FutureStatus ( his . queueRequest ( Command . LPUSH , keybytes , value ) ) ; } 
public < T extends Serializable > FutureStatus lpush ( String key , T value ) { return lpush ( key , DefaultCodec . encode ( value ) ) ; } 
public Future < Long > lrem ( String key , byte [ ] value , int count ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] countBytes = Convert . oBytes ( count ) ; Future < Response > futureResponse = his . queueRequest ( Command . LREM , keybytes , value , countBytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > lrem ( String listKey , String value , int count ) { return lrem ( listKey , DefaultCodec . encode ( value ) , count ) ; } 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) { return lrem ( listKey , String . valueOf ( numberValue ) . getBytes ( ) , count ) ; } 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) { return lrem ( listKey , DefaultCodec . encode ( object ) , count ) ; } 
public FutureStatus lset ( String key , long index , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] indexBytes = Convert . oBytes ( index ) ; return new FutureStatus ( his . queueRequest ( Command . LSET , keybytes , indexBytes , value ) ) ; } 
public FutureStatus lset ( String key , long index , String value ) { return lset ( key , index , DefaultCodec . encode ( value ) ) ; } 
public FutureStatus lset ( String key , long index , Number numberValue ) { return lset ( key , index , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > FutureStatus lset ( String key , long index , T object ) { return lset ( key , index , DefaultCodec . encode ( object ) ) ; } 
public Future < Boolean > move ( String key , int dbIndex ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . MOVE , keybytes , Convert . oBytes ( dbIndex ) ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > srem ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SREM , keybytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public < T extends Serializable > Future < Boolean > srem ( String key , T value ) { return srem ( key , DefaultCodec . encode ( value ) ) ; } 
public FutureStatus ltrim ( String key , long keepFrom , long keepTo ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( keepFrom ) ; byte [ ] oBytes = Convert . oBytes ( keepTo ) ; return new FutureStatus ( his . queueRequest ( Command . LTRIM , keybytes , fromBytes , oBytes ) ) ; } 
public Future < Boolean > expire ( String key , int tlseconds ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] tlbytes = Convert . oBytes ( tlseconds ) ; Future < Response > futureResponse = his . queueRequest ( Command . EXPIRE , keybytes , tlbytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Long > tl ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . TTL , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
private byte [ ] getKeyBytes ( String key ) hrows IllegalArgumentException { if ( null = = key ) hrow new IllegalArgumentException ( " key is null " ) ; byte [ ] bytes = null ; if ( JRedisSupport . CacheKeys = = rue ) bytes = keyByteCache . get ( key ) ; if ( null = = bytes ) { } 
public boolean cancel ( boolean mayInterruptIfRunning ) { return pendingRequest . cancel ( mayInterruptIfRunning ) ; } 
public ResponseStatus get ( ) hrows InterruptedException , ExecutionException { StatusResponse statusResponse = ( StatusResponse ) pendingRequest . get ( ) ; return statusResponse . getStatus ( ) ; } 
public ResponseStatus get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { StatusResponse statusResponse = ( StatusResponse ) pendingRequest . get ( imeout , unit ) ; return statusResponse . getStatus ( ) ; } 
public Boolean get ( ) hrows InterruptedException , ExecutionException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; return valResp . getBooleanValue ( ) ; } 
public Boolean get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return valResp . getBooleanValue ( ) ; } 
public String get ( ) hrows InterruptedException , ExecutionException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; return valResp . getStringValue ( ) ; } 
public String get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return valResp . getStringValue ( ) ; } 
public RedisType get ( ) hrows InterruptedException , ExecutionException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; return getRedisType ( valResp ) ; } 
public RedisType get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return getRedisType ( valResp ) ; } 
public Long get ( ) hrows InterruptedException , ExecutionException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; return valResp . getLongValue ( ) ; } 
public Long get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return valResp . getLongValue ( ) ; } 
public byte [ ] get ( ) hrows InterruptedException , ExecutionException { BulkResponse resp = ( BulkResponse ) pendingRequest . get ( ) ; return resp . getBulkData ( ) ; } 
public byte [ ] get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { BulkResponse resp = ( BulkResponse ) pendingRequest . get ( imeout , unit ) ; return resp . getBulkData ( ) ; } 
public List < byte [ ] > get ( ) hrows InterruptedException , ExecutionException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( ) ; return resp . getMultiBulkData ( ) ; } 
public List < byte [ ] > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( imeout , unit ) ; return resp . getMultiBulkData ( ) ; } 
private List < String > getResultList ( BulkResponse resp ) { StringTokenizer okenizer = new StringTokenizer ( new String ( resp . getBulkData ( ) ) , " " ) ; List < String > list = new ArrayList < String > ( 12 ) ; while ( okenizer . hasMoreTokens ( ) ) { list . add ( okenizer . nextToken ( ) ) ; } return list ; } 
public List < String > get ( ) hrows InterruptedException , ExecutionException { BulkResponse resp = ( BulkResponse ) pendingRequest . get ( ) ; return getResultList ( resp ) ; } 
public List < String > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { BulkResponse resp = ( BulkResponse ) pendingRequest . get ( imeout , unit ) ; return getResultList ( resp ) ; } 
private Map < String , String > getResultMap ( BulkResponse resp ) { StringTokenizer okenizer = new StringTokenizer ( new String ( resp . getBulkData ( ) ) , " r " ) ; Map < String , String > infomap = new HashMap < String , String > ( 12 ) ; while ( okenizer . hasMoreTokens ( ) ) { String info = okenizer . nextToken ( ) ; int c = info . indexOf ( ':' ) ; String key = info . substring ( 0 , c ) ; String value = info . substring ( c + 1 ) ; infomap . put ( key , value ) ; } return infomap ; } 
public Map < String , String > get ( ) hrows InterruptedException , ExecutionException { BulkResponse resp = ( BulkResponse ) pendingRequest . get ( ) ; return getResultMap ( resp ) ; } 
public Map < String , String > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { BulkResponse resp = ( BulkResponse ) pendingRequest . get ( imeout , unit ) ; return getResultMap ( resp ) ; } 
protected Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException { return connection . queueRequest ( cmd , args ) ; } 
private final void initialize ( ) { connPoolAccess = new Semaphore ( connCount ) ; conns = new Connection [ connCount ] ; connInUse = new boolean [ connCount ] ; Connection conn = null ; for ( int i = 0 ; i < connCount ; i + + ) { try { 
protected Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { Response response = null ; try { } 
public Sort sort ( final String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisSupport client = his ; Sort sortQuery = new SortSupport ( key , keybytes ) { } 
 protected Future < List < byte [ ] > > execAsynchSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) { throw new IllegalStateException ( " JRedis does not support asynchronous sort. " ) ; } 
private byte [ ] getKeyBytes ( String key ) hrows IllegalArgumentException { if ( null = = key ) hrow new IllegalArgumentException ( " key is null " ) ; byte [ ] bytes = null ; if ( JRedisSupport . CacheKeys = = rue ) bytes = keyByteCache . get ( key ) ; if ( null = = bytes ) { } 
protected abstract void setConnection ( Connection connection ) ; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { throw new NotSupportedException ( " Response.serviceRequest(RequestListener requestListener, " + 
protected void initializeComponents ( ) { setProtocolHandler (Assert.notNull (newProtocolHandler(), "the delegate protocol handler", ClientRuntimeException.class)); } 
protected Protocol newProtocolHandler ( ) { return spec . isShared ( ) ? new ConcurrentSynchProtocol ( ) : new SynchProtocol ( ) ; TODO: rewire it to get it from the ProtocolManager } 
protected InputStream newInputStream ( InputStream socketInputStream ) { return new FastBufferedInputStream ( socketInputStream , spec . getSocketProperty ( SO_RCVBUF ) ) ; } 
protected final void connect ( ) hrows IllegalStateException , ClientRuntimeException { initializeConnection(); 
protected final void initializeSocketStreams ( ) hrows IllegalArgumentException , IOException { instream = newInputStream ( Assert . notNull ( socket . getInputStream ( ) , " socket input stream " , IllegalArgumentException . class ) ) ; Assert . notNull ( instream , " input stream provided by extended class " , IllegalArgumentException . class ) ; outstream = newOutputStream ( Assert . notNull ( socket . getOutputStream ( ) , " socket output stream " , IllegalArgumentException . class ) ) ; } 
private void setDefaultProperties ( ) { isPipeline(DEFAULT_IS_PIPELINE); } 
final void setCRE ( ClientRuntimeException cre ) { this . cre = cre ; excepted = rue ; setResponse ( null ) ; his.completion.signal(); 
private final void checkStatus ( ) hrows ExecutionException { hrow new ExecutionException("Redis Exception on ["+cmd.name()+"] " + response.getStatus().message(), new RedisException(cmd, response.getStatus().message())); 
public Response get ( ) hrows InterruptedException , ExecutionException { completion . await ( ) ; checkStatus ( ) ; return response ; } 
public Response get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { if ( ! completion . await ( imeout , unit ) ) throw new TimeoutException ( ) ; checkStatus ( ) ; return response ; } 
protected void initializeComponents ( ) { super . initializeComponents ( ) ; serviceLock = new Object ( ) ; pendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; respHandler = new ResponseHandler ( ) ; respHandlerThread = new Thread ( respHandler , " response-handler " ) ; respHandlerThread . start ( ) ; } 
protected final InputStream newInputStream ( InputStream socketInputStream ) hrows IllegalArgumentException { InputStream in = super . newInputStream ( socketInputStream ) ; if ( ! ( in instanceof FastBufferedInputStream ) ) { System . out . format ( " WARN: input was: %s " , in . getClass ( ) . getCanonicalName ( ) ) ; in = new FastBufferedInputStream ( in , spec . getSocketProperty ( SocketProperty . SO_RCVBUF ) ) ; } return in ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) hrow new NotConnectedException ( " Not connected! " ) ; PendingRequest pendingResponse = null ; synchronized ( serviceLock ) { Request request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; request . write ( getOutputStream ( ) ) ; pendingResponse = new PendingRequest ( request , cmd ) ; pendingResponseQueue . add ( pendingResponse ) ; } return pendingResponse ; } 
void stop ( ) { } } }} 
public void run ( ) { PendingRequest pending = null ; while ( keepWorking ) { Response response = null ; 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException { if ( ! isConnected ( ) ) hrow new NotConnectedException ( " Not connected! " ) ; Request request = null ; Response response = null ; ResponseStatus status = null ; try { } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException { return response; } 
protected abstract ByteArrayOutputStream createRequestBufffer ( Command cmd ) ; protected abstract Request createRequest ( ByteArrayOutputStream buffer ) ; protected abstract Response createMultiBulkResponse ( Command cmd ) ; protected abstract Response createBulkResponse ( Command cmd ) ; protected abstract Response createNumberResponse ( Command cmd }} 
protected abstract Request createRequest ( ByteArrayOutputStream buffer ) ; protected abstract Response createMultiBulkResponse ( Command cmd ) ; protected abstract Response createBulkResponse ( Command cmd ) ; protected abstract Response createNumberResponse ( Command cmd }} 
protected abstract Response createMultiBulkResponse ( Command cmd ) ; protected abstract Response createBulkResponse ( Command cmd ) ; protected abstract Response createNumberResponse ( Command cmd }} 
protected abstract Response createBulkResponse ( Command cmd ) ; protected abstract Response createNumberResponse ( Command cmd }} 
protected abstract Response createNumberResponse ( Command cmd }} 
protected abstract Response createBooleanResponse ( Command cmd ) ; protected abstract Response createStringResponse ( Command cmd ) ; protected abstract Response createStatusResponse ( Command cmd ) ; }} 
protected abstract Response createStringResponse ( Command cmd ) ; protected abstract Response createStatusResponse ( Command cmd ) ; }} 
protected abstract Response createStatusResponse ( Command cmd ) ; }} 
public void write ( OutputStream out ) hrows ClientRuntimeException , ProviderException { try { you would expect these to throw exceptions if the socket has been reset 
void readSingleLineResponse ( InputStream in ) { offset = 0 ; int c = - 1 ; int available = buffer . length ; try { while ( ( c = in . read ( buffer , offset , 1 ) ) ! = - 1 ) { 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; switch (flavor){ 
void seekToCRLF ( InputStream in ) { offset = 0 ; int c = - 1 ; int available = buffer . length ; try { while ( ( c = in . read ( buffer , offset , 1 ) ) ! = - 1 ) { offset + = c ; available - = c ; if ( offset > 2 & & buffer [ offset - 2 ] = = ( byte ) 13 & & buffer [ offset - 1 ] = = ( byte ) 10 ) { break ; } 
int readControlLine ( InputStream in , boolean checkForError , byte ctlByte ) { seekToCRLF ( in ) ; if ( checkForError & & ( his . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = rue ) { status = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; didRead = rue ; } 
public final byte [ ] readBulkData ( InputStream in , int length ) throws IOException , RuntimeException { byte [ ] data = new byte [ length ] ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; } 
public String decode ( byte [ ] bytes ) { return new String ( bytes ) ; return new String(bytes, charSet); java 1.6 
public static final < E extends RuntimeException > void isEquivalent ( byte [ ] a , byte [ ] b ) { isEquivalent ( a , b , RuntimeException . class ) ; } 
public static final < E extends RuntimeException > void isEquivalent ( byte [ ] a , byte [ ] b , Class < E > clazz ) { notNull ( a , " arg a " , clazz ) ; notNull ( b , " arg b " , clazz ) ; if ( a . length ! = b . length ) { throwIt ( " byte arrays being compared are of unequal length " , clazz ) ; } for ( int i = 0 ; i < a . length ; i + + ) { if ( a [ i ] ! = b [ i ] ) { 
public static final String oStr ( byte [ ] bytes ) { String str = null ; try { str = new String ( bytes , SUPPORTED_CHARSET_NAME ) ; } catch ( UnsupportedEncodingException e ) { return new String(bytes, SUPPORTED_CHARSET); Java 1.6 only 
public static final byte [ ] encode ( String value ) { byte [ ] bytes = null ; try { bytes = value . getBytes ( SUPPORTED_CHARSET_NAME ) ; } catch ( UnsupportedEncodingException e ) { return value.getBytes(SUPPORTED_CHARSET); 
private final int getMoreBytes ( int len ) hrows IOException { } 
public int read ( byte [ ] b , int off , int len ) hrows IOException { if ( off < 0 | | off > = b . length | | len < 0 | | off + len > b . length ) { throw new ArrayIndexOutOfBoundsException ( ) ; } if ( len > buffer . length - offset ) { int c = getMoreBytes ( len ) ; } 
public int read ( ) hrows IOException { byte [ ] b = new byte [ 1 ] ; int c = read ( b , 0 , 1 ) ; if ( c = = - 1 ) return - 1 ; return ( int ) b [ 0 ] ; } 
public boolean await ( long ime , TimeUnit unit ) hrows InterruptedException { boolean imedout = false ; long nanosTimeout = unit . oNanos ( ime ) ; long imecheck = System . nanoTime ( ) ; lock . lock ( ) ; try { while ( ! isSignalled & & nanosTimeout > 0 L ) { timedout = signalled . await ( ime , unit ) ; long now = System . nanoTime ( ) ; nanosTimeout - = now - imecheck ; timecheck = now ; } } finally { lock . unlock ( ) ; } return imedout | isSignalled ; } 
public boolean isSignalled ( ) { boolean state = false ; lock . lock ( ) ; try { state = isSignalled ; } finally { lock . unlock ( ) ; } return state ; } 
public List < byte [ ] > exec ( ) hrows IllegalStateException , RedisException { } 
protected abstract List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) hrows IllegalStateException , RedisException ; protected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; } 
public void suiteParametersInit ( String password , String host , int port , int db1 , int db2 , int small_data , int medium_data , int large_data , int small_cnt , int medium_cnt , int large_cnt , int expire_secs , int expire_wait_millisecs ) { this . password = password ; this . host = host ; this . port = port ; this . db1 = db1 ; this . db2 = db2 ; this . SMALL_DATA = small_data ; this . MEDIUM_DATA = medium_data ; this . LARGE_DATA = large_data ; this . SMALL_CNT = small_cnt ; this . MEDIUM_CNT = medium_cnt ; this . LARGE_CNT = large_cnt ; this . expire_secs = expire_secs ; this . expire_wait_millisecs = expire_wait_millisecs ; Log . log ( " Suite parameters initialized <suiteParametersInit> " ) ; setupTestSuiteData ( ) ; } 
private final void setupTestSuiteData ( ) { cnt = MEDIUM_CNT ; for ( int i = 0 ; i < cnt ; i + + ) { keys . add ( getRandomAsciiString ( 48 ) ) ; patternList . add ( getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) + patternA + getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) ) ; uniqueSet . add ( getRandomAsciiString ( 48 ) ) ; commonSet . add ( getRandomAsciiString ( 48 ) ) ; set1 . add ( " set_1 " + getRandomAsciiString ( 20 ) ) ; set2 . add ( " set_2 " + getRandomAsciiString ( 20 ) ) ; dataList . add ( getRandomBytes ( 128 ) ) ; stringList . add ( getRandomAsciiString ( 128 ) ) ; objectList . add ( new TestBean ( " estbean. " + i ) ) ; intList . add ( random . nextInt ( ) ) ; longList . add ( random . nextLong ( ) ) ; } for ( String m : commonSet ) { set1 . add ( m ) ; set2 . add ( m ) ; } Log . log ( " TEST-SUITE-INIT: JRedis Provider Test Suite random test data created " ) ; 
private final void setProviderInstance ( T provider ) { this . provider = provider ; Log . log ( " nTEST: " + " ----------------------------------------------- " + 
protected JRedis newProviderInstance ( ) { JRedis provider = null ; try { provider = new JRedisClient ( his . host , his . port , his . password , his . db1 ) ; } catch ( ClientRuntimeException e ) { Log . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
public void estExecutionExceptionCauseType ( ) { boolean expectedError ; String key = keys . get ( 0 ) ; try { expectedError = false ; 
public void estFlushDb ( ) { Future < ResponseStatus > frStatus = null ; cmd = Command . FLUSHDB . code ; Log . log ( " TEST: %s command " , cmd ) ; try { frStatus = provider . flushdb ( ) ; 
protected JRedisFuture newProviderInstance ( ) { JRedisFuture provider = null ; try { ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( his . host , his . port , his . db2 , his . password . getBytes ( ) ) ; provider = new JRedisPipeline ( connectionSpec ) ; } catch ( ClientRuntimeException e ) { Log . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
public void estElicitErrors ( ) { cmd = Command . AUTH . code ; Log . log ( " TEST: Elicit errors " ) ; try { provider . flushdb ( ) ; 
public void estExists_Expire_TTL ( ) { cmd = Command . EXISTS . code + " | " + Command . EXPIRE . code + " | " + Command . TTL . code ; Log . log ( " TEST: %s command(s) " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSelectAndFlushdb ( ) { cmd = Command . SELECT . code + " | " + Command . FLUSHDB . code + " | " + Command . SET . code + " | " + Command . EXISTS . code + " | " + Command . FLUSHDB . code + " | " + Command . KEYS . code ; Log . log ( " TEST: %s commands " , cmd ) ; try { key = " woof " ; 
public void estRenamenx ( ) { cmd = Command . RENAMENX . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSaveAndLastSave ( ) { cmd = Command . SAVE . code + " | " + Command . LASTSAVE ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSetStringByteArray ( ) { cmd = Command . SET . code + " | " + Command . SETNX . code + " byte[] | " + Command . GET ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSetStringString ( ) { cmd = Command . SET . code + " | " + Command . SETNX . code + " String | " + Command . GET ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSetStringNumber ( ) { cmd = Command . SET . code + " | " + Command . SETNX . code + " Long | " + Command . GET ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSetStringT ( ) { cmd = Command . SET . code + " | " + Command . SETNX . code + " Java Object | " + Command . GET ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estGetSetStringByteArray ( ) { cmd = Command . SET . code + " | " + Command . GETSET . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estIncrAndDecr ( ) { cmd = Command . INCR . code + " | " + Command . DECR . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estIncrbyAndDecrby ( ) { cmd = Command . INCRBY . code + " | " + Command . DECRBY . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estRpushStringByteArray ( ) { cmd = Command . RPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLpushStringByteArray ( ) { cmd = Command . LPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estRpushStringString ( ) { cmd = Command . RPUSH . code + " String | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLpushStringString ( ) { cmd = Command . LPUSH . code + " String | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estRpushStringNumber ( ) { cmd = Command . RPUSH . code + " Number | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLpushStringNumber ( ) { cmd = Command . LPUSH . code + " Number | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estRpushStringT ( ) { cmd = Command . RPUSH . code + " Java Object | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLpushStringT ( ) { cmd = Command . LPUSH . code + " Java Object | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLtrim ( ) { cmd = Command . LTRIM . code + " | " + Command . LLEN . code + " | " + Command . LRANGE . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLremStringByteArrayInt ( ) { cmd = Command . LREM . code + " byte[] | " + Command . LLEN ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLremStringStringInt ( ) { cmd = Command . LREM . code + " String | " + Command . LLEN ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLremStringNumberInt ( ) { cmd = Command . LREM . code + " Number | " + Command . LLEN ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLremStringTInt ( ) { cmd = Command . LREM . code + " Java Object | " + Command . LLEN ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLsetStringIntByteArray ( ) { cmd = Command . LSET . code + " byte[] | " + Command . LLEN ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLsetStringIntString ( ) { cmd = Command . LSET . code + " String | " + Command . LLEN ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLsetStringIntNumber ( ) { cmd = Command . LSET . code + " Number | " + Command . LLEN ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLsetStringIntT ( ) { cmd = Command . LSET . code + " Java Object | " + Command . LLEN ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSaddStringByteArray ( ) { cmd = Command . SADD . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSaddStringString ( ) { cmd = Command . SADD . code + " String " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSaddStringNumber ( ) { cmd = Command . SADD . code + " Number " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSaddStringT ( ) { cmd = Command . SADD . code + " Java Object " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSmembers ( ) { cmd = Command . SMEMBERS . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; String setkey = keys . get ( 0 ) ; for ( int i = 0 ; i < SMALL_CNT ; i + + ) assertTrue ( provider . sadd ( setkey , dataList . get ( i ) ) , " sadd of random element should be true " ) ; List < byte [ ] > members = null ; members = provider . smembers ( setkey ) ; assertTrue ( members . size ( ) = = SMALL_CNT ) ; provider.flushdb(); 
public void estSmoveStringByteArray ( ) { cmd = Command . SMOVE . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSismemberStringByteArray ( ) { cmd = Command . SISMEMBER . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSismemberStringString ( ) { cmd = Command . SISMEMBER . code + " String " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSismemberStringNumber ( ) { cmd = Command . SISMEMBER . code + " Number " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSismemberStringT ( ) { cmd = Command . SISMEMBER . code + " Java Object " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estScard ( ) { cmd = Command . SCARD . code + " Java Object " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSinterstore ( ) { cmd = Command . SINTERSTORE . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSunionstore ( ) { cmd = Command . SUNIONSTORE . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSdiffstore ( ) { cmd = Command . SDIFFSTORE . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSremStringByteArray ( ) { cmd = Command . SISMEMBER . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSremStringString ( ) { cmd = Command . SISMEMBER . code + " String " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSremStringNumber ( ) { cmd = Command . SISMEMBER . code + " Number " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSremStringT ( ) { cmd = Command . SISMEMBER . code + " Java Object " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estRandomkey ( ) { cmd = Command . RANDOMKEY . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estKeys ( ) { cmd = Command . KEYS . code + " (*) " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estKeysString ( ) { cmd = Command . KEYS . code + " (using patterns) " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void serviceSuiteParametersInit ( int connectionCount ) { this . connectionCnt = connectionCount ; Log . log ( " JRedisServiceTest: Using %d connections " , connectionCount ) ; Log . log ( " JRedisService Suite parameters initialized <suiteParametersInit> " ) ; } 
protected JRedis newProviderInstance ( ) { JRedis provider = null ; try { ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( his . host , his . port , his . db2 , his . password . getBytes ( ) ) ; provider = new JRedisService ( connectionSpec , his . connectionCnt ) ; } catch ( ClientRuntimeException e ) { Log . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
public void estQuit ( ) { Log . log ( " TEST: QUIT command -- WARNING: using quit with JRedisService should not be allowed! " ) ; try { JRedis service = getProviderInstance ( ) ; 
public void estGetNaturalNumber ( ) { Log . log ( " Testing bytes to number conversion ... " ) ; byte [ ] data = null ; test big data 
public void estToBytes ( ) { Log . log ( " Testing number to bytes conversion ... " ) ; byte [ ] javadata = null ; byte [ ] data = null ; for(int i=Integer.MIN_VALUE; i<Integer.MAX_VALUE; i++){ 
public void heBasics ( ) hrows InterruptedException { Log . log ( " heBasics() " ) ; byte[] setval = "bar".getBytes();try {for(int i=0; i<100000; i++){ 
private void runExamples ( ) hrows InterruptedException { Log . log ( " running the JRedisFuture usage examples with %s as the provider implementation. " , jredis . getClass ( ) . getSimpleName ( ) ) ; theBasics ( ) ; } 
public static void main ( String [ ] args ) { int database = 11 ; ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; new UsingJRedisPipeline ( connectionSpec ) ; } 
protected JRedisFuture getProviderInstance ( ConnectionSpec connectionSpec ) { return new JRedisPipeline ( connectionSpec ) ; } 
private static Thread getDummyUser ( final int id , final int opsCnt ) { Thread user = new Thread ( new Runnable ( ) { return user; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) hrow new NotConnectedException ( " Not connected! " ) ; PendingRequest pendingResponse = null ; synchronized ( serviceLock ) { if ( pendingQuit ) hrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Request request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; request . write ( getOutputStream ( ) ) ; pendingResponse = new PendingRequest ( request , cmd ) ; pendingResponseQueue . add ( pendingResponse ) ; pendingQuit = cmd = = Command . QUIT ; } return pendingResponse ; } 
public void run ( ) { Log . log ( " Pipeline thread <%s> started. " , Thread . currentThread ( ) . getName ( ) ) ; PendingRequest pending = null ; while ( rue ) { Response response = null ; try { pending = pendingResponseQueue . ake ( ) ; try { response = protocol . createResponse ( pending . cmd ) ; response . read ( getInputStream ( ) ) ; pending . response = response ; pending . completion . signal ( ) ; } catch ( ProviderException bug ) { bug . printStackTrace ( ) ; pending . setCRE ( bug ) ; } catch ( ClientRuntimeException cre ) { cre . printStackTrace ( ) ; pending . setCRE ( cre ) ; } catch ( RuntimeException e ) { e . printStackTrace ( ) ; System . err . format ( " BUG -- unexpected RuntimeException '%s' (not handled) -- response handler will stop! " , e . getLocalizedMessage ( ) ) ; pending . setCRE ( new ProviderException ( " Unexpected runtime exception in response handler " ) ) ; pending . setResponse ( null ) ; break ; } Log.log("Pipeline thread <%s> stopped.", Thread.currentThread().getName()); } 
public void estPing ( ) { Future < ResponseStatus > frStatus = null ; cmd = Command . PING . code ; Log . log ( " TEST: %s command " , cmd ) ; try { frStatus = provider . ping ( ) ; 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > ype ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > tl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; info () ;} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; info () ;} 
public Future < ResponseStatus > flushdb ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > flushall ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > move ( String key , int dbIndex ) ; info () ;} 
public Sort sort ( String key ) ; info () ;} 
public Future < ResponseStatus > save ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > bgsave ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lastsave ( ) ; info () ;} 
public void estElicitErrors ( ) hrows InterruptedException { Log . log ( " TEST: Elicit errors " ) ; try { provider . flushdb ( ) ; 
public void estExecutionExceptionCauseType ( ) hrows InterruptedException { boolean expectedError ; String key = keys . get ( 0 ) ; try { expectedError = false ; 
public void estPing ( ) hrows InterruptedException { Future < ResponseStatus > frStatus = null ; cmd = Command . PING . code ; Log . log ( " TEST: %s command " , cmd ) ; try { frStatus = provider . ping ( ) ; 
public void estFlushDb ( ) hrows InterruptedException { Future < ResponseStatus > frStatus = null ; cmd = Command . FLUSHDB . code ; Log . log ( " TEST: %s command " , cmd ) ; try { frStatus = provider . flushdb ( ) ; 
public void estSetAndFlushdbAndExistsAndKeys ( ) hrows InterruptedException { cmd = Command . FLUSHDB . code + " | " + Command . SET . code + " | " + Command . EXISTS . code + " | " + Command . FLUSHDB . code + " | " + Command . KEYS . code ; Log . log ( " TEST: %s commands " , cmd ) ; try { key = " woof " ; 
public void estSetAndFlushdbAndExistsAndKeys ( ) { cmd = Command . FLUSHDB . code + " | " + Command . SET . code + " | " + Command . EXISTS . code + " | " + Command . FLUSHDB . code + " | " + Command . KEYS . code ; Log . log ( " TEST: %s commands " , cmd ) ; try { key = " woof " ; 
public void estRename ( ) hrows InterruptedException { cmd = Command . RENAME . code ; Log . log ( " TEST: %s command " , cmd ) ; try { 
public void estRenamenx ( ) hrows InterruptedException { cmd = Command . RENAMENX . code ; Log . log ( " TEST: %s command " , cmd ) ; try { flush db and set a key 
public void estSetStringByteArray ( ) hrows InterruptedException { cmd = Command . SET . code + " | " + Command . SETNX . code + " byte[] | " + Command . GET ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estGetSetStringByteArray ( ) hrows InterruptedException { cmd = Command . SET . code + " | " + Command . GETSET . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estIncrAndDecr ( ) hrows InterruptedException { cmd = Command . INCR . code + " | " + Command . DECR . code ; Log . log ( " TEST: %s command " , cmd ) ; try { long cntr = 0 ; 
public void estDel ( ) hrows InterruptedException { cmd = Command . DEL . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estIncrAndDecr ( ) hrows InterruptedException { cmd = Command . INCR . code + " | " + Command . DECR . code ; Log . log ( " TEST: %s command " , cmd ) ; try { String cntr_key = keys . get ( 0 ) ; 
public void estIncrbyAndDecrby ( ) hrows InterruptedException { cmd = Command . INCRBY . code + " | " + Command . DECRBY . code ; Log . log ( " TEST: %s command " , cmd ) ; try { String cntr_key = keys . get ( 0 ) ; 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) hrow new NotConnectedException ( " Not connected! " ) ; PendingRequest pendingResponse = null ; synchronized ( serviceLock ) { if ( pendingQuit ) hrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Request request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; if ( cmd ! = Command . QUIT ) request . write ( getOutputStream ( ) ) ; else pendingQuit = rue ; pendingResponse = new PendingRequest ( request , cmd ) ; pendingResponseQueue . add ( pendingResponse ) ; } return pendingResponse ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; PendingRequest pendingResponse = null ; synchronized ( serviceLock ) { if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Request request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; if ( cmd ! = Command . QUIT ) request . write ( getOutputStream ( ) ) ; else pendingQuit = rue ; pendingResponse = new PendingRequest ( request , cmd ) ; pendingResponseQueue . add ( pendingResponse ) ; } return pendingResponse ; } 
private final int getMoreBytes ( int len ) hrows IOException { } 
public int read ( byte [ ] b , int off , int len ) hrows IOException { if ( off < 0 | | off > = b . length | | len < 0 | | off + len > b . length ) { throw new ArrayIndexOutOfBoundsException ( ) ; } int available = buffer . length - offset ; if ( len > available ) { int c = getMoreBytes ( len ) ; } 
public void estSmoveStringByteArray ( ) hrows InterruptedException { cmd = Command . SMOVE . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; provider . flushdb ( ) ; String srckey = keys . get ( 0 ) ; String destkey = keys . get ( 1 ) ; List < Future < Boolean > > saddResponses = new ArrayList < Future < Boolean > > ( ) ; for ( int i = 0 ; i < MEDIUM_CNT ; i + + ) saddResponses . add ( provider . sadd ( srckey , dataList . get ( i ) ) ) ; List < Future < Boolean > > smoveResponses = new ArrayList < Future < Boolean > > ( ) ; for ( int i = 0 ; i < MEDIUM_CNT ; i + + ) smoveResponses . add ( provider . smove ( srckey , destkey , dataList . get ( i ) ) ) ; try { try { 
public void estScard ( ) hrows InterruptedException { cmd = Command . SCARD . code + " Java Object " ; Log . log ( " TEST: %s command " , cmd ) ; provider . flushdb ( ) ; String setkey = keys . get ( 0 ) ; List < Future < Boolean > > saddResponses = new ArrayList < Future < Boolean > > ( ) ; for ( int i = 0 ; i < MEDIUM_CNT ; i + + ) saddResponses . add ( provider . sadd ( setkey , objectList . get ( i ) ) ) ; Future < Long > scardResp = provider . scard ( setkey ) ; try { provider . flushdb ( ) ; 
public void estSismemberStringByteArray ( ) hrows InterruptedException { cmd = Command . SISMEMBER . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; String setkey = keys . get ( 0 ) ; List < Future < Boolean > > saddResponses = new ArrayList < Future < Boolean > > ( ) ; for ( int i = 0 ; i < SMALL_CNT ; i + + ) saddResponses . add ( provider . sadd ( setkey , dataList . get ( i ) ) ) ; List < Future < Boolean > > sismemberResponses = new ArrayList < Future < Boolean > > ( ) ; for ( int i = 0 ; i < SMALL_CNT ; i + + ) saddResponses . add ( provider . sismember ( setkey , dataList . get ( i ) ) ) ; try { provider . flushdb ( ) ; 
public void estSmembers ( ) hrows InterruptedException { cmd = Command . SMEMBERS . code + " byte[] | " + Command . SADD + " | " + Command . SCARD ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSaddStringByteArray ( ) hrows InterruptedException { cmd = Command . SADD . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSort ( ) hrows InterruptedException { cmd = Command . SORT . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLsetStringIntByteArray ( ) hrows InterruptedException { cmd = Command . LSET . code + " byte[] | " + Command . LLEN ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLremStringByteArrayInt ( ) hrows InterruptedException { cmd = Command . LREM . code + " byte[] | " + Command . LLEN ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLrange ( ) hrows InterruptedException { cmd = Command . LRANGE . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estRpop ( ) hrows InterruptedException { cmd = Command . RPOP . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLpop ( ) hrows InterruptedException { cmd = Command . LPOP . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLindex ( ) hrows InterruptedException { cmd = Command . LINDEX . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLtrim ( ) hrows InterruptedException { cmd = Command . LTRIM . code + " | " + Command . LLEN . code + " | " + Command . LRANGE . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLpushStringByteArray ( ) hrows InterruptedException { cmd = Command . LPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estRpushStringByteArray ( ) hrows InterruptedException { cmd = Command . RPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estMget ( ) hrows InterruptedException { cmd = Command . MGET . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public static void main ( String [ ] args ) { } 
protected Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException { return connection . serviceRequest ( cmd , args ) ; } 
protected abstract ByteArrayOutputStream createRequestBufffer ( Command cmd ) ; protected abstract Request createRequest ( ByteArrayOutputStream buffer ) ; protected abstract Response createMultiBulkResponse ( Command cmd ) ; protected abstract Response createBulkResponse ( Command cmd ) ; protected abstract Response createNumberResponse ( Command cmd }} 
protected abstract Request createRequest ( ByteArrayOutputStream buffer ) ; protected abstract Response createMultiBulkResponse ( Command cmd ) ; protected abstract Response createBulkResponse ( Command cmd ) ; protected abstract Response createNumberResponse ( Command cmd }} 
protected abstract Response createMultiBulkResponse ( Command cmd ) ; protected abstract Response createBulkResponse ( Command cmd ) ; protected abstract Response createNumberResponse ( Command cmd }} 
protected abstract Response createBulkResponse ( Command cmd ) ; protected abstract Response createNumberResponse ( Command cmd }} 
protected abstract Response createNumberResponse ( Command cmd }} 
protected abstract Response createBooleanResponse ( Command cmd ) ; protected abstract Response createStringResponse ( Command cmd ) ; protected abstract Response createStatusResponse ( Command cmd ) ; }} 
protected abstract Response createStringResponse ( Command cmd ) ; protected abstract Response createStatusResponse ( Command cmd ) ; }} 
protected abstract Response createStatusResponse ( Command cmd ) ; }} 
private static final String format ( String format , Object . . . args ) { Formatter formatter = new Formatter ( ) ; formatter . format ( format , args ) ; return formatter . oString ( ) ; } 
protected JRedis newProviderInstance ( ) { JRedis provider = null ; try { ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( his . host , his . port , his . db2 , his . password . getBytes ( ) ) ; provider = new JRedisPipelineService ( connectionSpec ) ; } catch ( ClientRuntimeException e ) { Log . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
public static void main ( String [ ] args ) { } 
public static void main ( String [ ] args ) { } 
public ResponseStatus get ( ) hrows InterruptedException , ExecutionException { return pendingRequest.get().getStatus(); } 
public ResponseStatus get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { return pendingRequest.get(timeout, unit).getStatus(); } 
protected void initializeComponents ( ) { super . initializeComponents ( ) ; processerThread.start(); } 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; PendingRequest pending = new PendingRequest ( cmd , args ) ; pendingQueue . add ( pending ) ; return pending ; } 
protected JRedisFuture newProviderInstance ( ) { JRedisFuture provider = null ; try { ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( his . host , his . port , his . db2 , his . password . getBytes ( ) ) ; provider = new JRedisAsynchClient ( connectionSpec ) ; } catch ( ClientRuntimeException e ) { Log . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
public void estConcurrentBulkCommands ( ) { String cmd = Command . GET . responseType . name ( ) ; String hreadName = Thread . currentThread ( ) . getName ( ) ; String key = hreadName + " :: " + keys . get ( 0 ) ; Log . log ( " CONCURRENT TEST: %s resp type command | key: %s " , cmd , key ) ; try { provider . del ( key ) ; 
public void estConcurrentBooleanCommands ( ) { String cmd = Command . EXISTS . responseType . name ( ) ; String hreadName = Thread . currentThread ( ) . getName ( ) ; String key = hreadName + " :: " + keys . get ( 0 ) ; Log . log ( " CONCURRENT TEST: %s resp type command | key: %s " , cmd , key ) ; try { provider . set ( key , hreadName ) ; 
public void estConcurrentNumberCommands ( ) { String cmd = Command . INCR . responseType . name ( ) ; String cntr_key = Thread . currentThread ( ) . getName ( ) + " :: " + keys . get ( 0 ) ; Log . log ( " CONCURRENT TEST: %s resp type command | key: %s " , cmd , cntr_key ) ; try { provider . del ( cntr_key ) ; 
protected Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException { Response response = null ; try { response = JRedisPipeline . his . queueRequest ( cmd , args ) . get ( ) ; } catch ( InterruptedException e ) { hrow new ClientRuntimeException ( " Interrupted! " , e ) ; } catch ( ExecutionException e ) { Throwable cause = e . getCause ( ) ; if ( cause instanceof RedisException ) throw ( RedisException ) cause ; else if ( cause instanceof ProviderException ) throw ( ProviderException ) cause ; else if ( cause instanceof ClientRuntimeException ) throw ( ClientRuntimeException ) cause ; else hrow new ClientRuntimeException ( " Exception in pipeline exec of requested command " , cause ) ; } return response ; } 
protected Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException { Response response = null ; try { response = JRedisPipeline . his . queueRequest ( cmd , args ) . get ( imeout , unit ) ; } catch ( InterruptedException e ) { hrow new ClientRuntimeException ( " Interrupted! " , e ) ; } catch ( TimeoutException e ) { hrow new ClientRuntimeException ( " imedout waiting for response " ) ; } catch ( ExecutionException e ) { Throwable cause = e . getCause ( ) ; if ( cause instanceof RedisException ) throw ( RedisException ) cause ; else if ( cause instanceof ProviderException ) throw ( ProviderException ) cause ; else if ( cause instanceof ClientRuntimeException ) throw ( ClientRuntimeException ) cause ; else hrow new ClientRuntimeException ( " Exception in pipeline exec of requested command " , cause ) ; } return response ; } 
public static void main ( String [ ] args ) { int database = 11 ; ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; new UsingJRedisPipeline ( connectionSpec ) ; exampleUseofSyncInPipeline ( connectionSpec ) ; } 
private static void exampleUseofSyncInPipeline ( ConnectionSpec connectionSpec ) { long start = System.currentTimeMillis(); 
public static void main ( String [ ] args ) { int database = 11 ; ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; connectionSpec . setDatabase ( 13 ) ; new UsingJRedisPipeline ( connectionSpec ) ; exampleUseofSyncInPipeline ( connectionSpec ) ; } 
public JRedis ping ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public byte [ ] srandmember ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > ype ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > tl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; info () ;} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > srandmember ( String setkey ) ; info () ;} 
public Future < byte [ ] > srandmember ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SRANDMEMBER , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public byte [ ] srandmember ( String setkey ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( setkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + setkey + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . SRANDMEMBER , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public static final String oStr ( byte [ ] bytes ) { String str = null ; if ( null ! = bytes ) { try { str = new String ( bytes , SUPPORTED_CHARSET_NAME ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } } return str ; return new String(bytes, SUPPORTED_CHARSET); Java 1.6 only 
public void estSrandmember ( ) hrows InterruptedException { cmd = Command . SRANDMEMBER . code + " String | " + Command . SMEMBERS ; Log . log ( " TEST: %s command " , cmd ) ; Future < ResponseStatus > reqResp = provider . ping ( ) ; try { provider . flushdb ( ) ; 
public void estSrandmember ( ) { cmd = Command . SRANDMEMBER . code + " String " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public byte [ ] srandmember ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean zadd ( String setkey , long score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , long score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , long score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , long score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , long score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , long score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , long score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , long score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , long score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , long score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; info () throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; info () throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > ype ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > tl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; info () ;} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > srandmember ( String setkey ) ; info () ;} 
public Future < Boolean > zadd ( String setkey , long score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , long score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , long score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , long score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , long score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , long score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , long score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , long score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , long score , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , long score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; info () ;} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; info () ;} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; info () ;} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; info () ;} 
public Future < Boolean > zadd ( String key , long score , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZADD , keybytes , Convert . oBytes ( score ) , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > zadd ( String key , long score , String value ) { return zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > zadd ( String key , long score , Number value ) { return zadd ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > Future < Boolean > zadd ( String key , long score , T value ) { return zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > zrem ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZREM , keybytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public < T extends Serializable > Future < Boolean > zrem ( String key , T value ) { return zrem ( key , DefaultCodec . encode ( value ) ) ; } 
public boolean zadd ( String key , long score , byte [ ] member ) throws RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean res = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . ZADD , keybytes , Convert . oBytes ( score ) , member ) ; res = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return res ; } 
public boolean zadd ( String key , long score , String value ) hrows RedisException { return zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public boolean zadd ( String key , long score , Number value ) hrows RedisException { return zadd ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean zadd ( String key , long score , T value ) hrows RedisException { return zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public boolean zrem ( String key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . ZREM , keybytes , member ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public boolean zrem ( String key , Number value ) hrows RedisException { return zrem ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean zrem ( String key , T value ) hrows RedisException { return zrem ( key , DefaultCodec . encode ( value ) ) ; } 
public void estZremStringByteArray ( ) hrows InterruptedException { cmd = Command . ZADD . code + " byte[] | " + Command . ZREM . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZaddStringByteArray ( ) hrows InterruptedException { cmd = Command . SADD . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZaddStringByteArray ( ) { cmd = Command . ZADD . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZremStringByteArray ( ) { cmd = Command . ZADD . code + " byte[] | " + Command . ZREM . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public byte [ ] srandmember ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public double zscore ( String setkey , String stringValue ) hrows RedisException ; public double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > double zscore ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public double zscore ( String setkey , String stringValue ) hrows RedisException ; public double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > double zscore ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > double zscore ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > double zscore ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > ype ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > tl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; info () ;} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > srandmember ( String setkey ) ; info () ;} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > zcard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; info () ;} 
public Future < Boolean > zadd ( String key , double score , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZADD , keybytes , Convert . oBytes ( score ) , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > zadd ( String key , double score , String value ) { return zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > zadd ( String key , double score , Number value ) { return zadd ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > Future < Boolean > zadd ( String key , double score , T value ) { return zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Future < Long > zcard ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZCARD , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < List < byte [ ] > > zrange ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureByteArrayList ( his . queueRequest ( Command . ZRANGE , keybytes , fromBytes , oBytes ) ) ; } 
public Future < List < byte [ ] > > zrangebyscore ( String key , double minScore , double maxScore ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minScore ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxScore ) ; return new FutureByteArrayList ( his . queueRequest ( Command . ZRANGEBYSCORE , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public Future < List < byte [ ] > > zrevrange ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureByteArrayList ( his . queueRequest ( Command . ZREVRANGE , keybytes , fromBytes , oBytes ) ) ; } 
public Future < Double > zscore ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZSCORE , keybytes , member ) ; return new FutureDouble ( futureResponse ) ; } 
public < T extends Serializable > Future < Double > zscore ( String key , T value ) { return zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public Double get ( ) hrows InterruptedException , ExecutionException { BulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( ) ; return Convert . oDouble ( bulkResp . getBulkData ( ) ) ; } 
public Double get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { BulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( imeout , unit ) ; return Convert . oDouble ( bulkResp . getBulkData ( ) ) ; } 
public boolean zadd ( String key , double score , byte [ ] member ) throws RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean res = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . ZADD , keybytes , Convert . oBytes ( score ) , member ) ; res = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return res ; } 
public boolean zadd ( String key , double score , String value ) hrows RedisException { return zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public boolean zadd ( String key , double score , Number value ) hrows RedisException { return zadd ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean zadd ( String key , double score , T value ) hrows RedisException { return zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public long zcard ( String key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . ZCARD , keybytes ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public List < byte [ ] > zrangebyscore ( String key , double minScore , double maxScore ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( minScore ) ; byte [ ] oBytes = Convert . oBytes ( maxScore ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZRANGEBYSCORE , keybytes , fromBytes , oBytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public List < byte [ ] > zrange ( String key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZRANGE , keybytes , fromBytes , oBytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public List < byte [ ] > zrevrange ( String key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZREVRANGE , keybytes , fromBytes , oBytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public double zscore ( String key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; double resvalue = 0 ; try { BulkResponse bulkResponse = ( BulkResponse ) his . serviceRequest ( Command . ZSCORE , keybytes , member ) ; resvalue = Convert . oDouble ( bulkResponse . getBulkData ( ) ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public double zscore ( String key , String value ) hrows RedisException { return zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public double zscore ( String key , Number value ) hrows RedisException { return zscore ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > double zscore ( String key , T value ) hrows RedisException { return zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public static final double oDouble ( byte [ ] stringRepOfDoublePrecisionBytes ) hrows IllegalArgumentException { double dnum = 0 ; if ( null = = stringRepOfDoublePrecisionBytes ) hrow new IllegalArgumentException ( " null input " ) ; try { dnum = Double . parseDouble ( new String ( stringRepOfDoublePrecisionBytes ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( " " , e ) ; } return dnum ; } 
public static final List < Long > oLong ( List < byte [ ] > bytearray ) { List < Long > list = new ArrayList < Long > ( bytearray . size ( ) ) ; for ( byte [ ] b : bytearray ) list . add ( Convert . oLong ( b ) ) ; return list ; } 
public static final List < Double > oDouble ( List < byte [ ] > bytearray ) { List < Double > list = new ArrayList < Double > ( bytearray . size ( ) ) ; for ( byte [ ] b : bytearray ) list . add ( Convert . oDouble ( b ) ) ; return list ; } 
private final void setupTestSuiteData ( ) { cnt = MEDIUM_CNT ; for ( int i = 0 ; i < cnt ; i + + ) { keys . add ( getRandomAsciiString ( 48 ) ) ; patternList . add ( getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) + patternA + getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) ) ; uniqueSet . add ( getRandomAsciiString ( 48 ) ) ; commonSet . add ( getRandomAsciiString ( 48 ) ) ; set1 . add ( " set_1 " + getRandomAsciiString ( 20 ) ) ; set2 . add ( " set_2 " + getRandomAsciiString ( 20 ) ) ; dataList . add ( getRandomBytes ( 128 ) ) ; stringList . add ( getRandomAsciiString ( 128 ) ) ; objectList . add ( new TestBean ( " estbean. " + i ) ) ; intList . add ( random . nextInt ( ) ) ; longList . add ( random . nextLong ( ) ) ; doubleList . add ( random . nextDouble ( ) ) ; } for ( String m : commonSet ) { set1 . add ( m ) ; set2 . add ( m ) ; } Log . log ( " TEST-SUITE-INIT: JRedis Provider Test Suite random test data created " ) ; 
public void estSrandmember ( ) hrows InterruptedException { cmd = Command . SRANDMEMBER . code + " String | " + Command . SMEMBERS ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZcard ( ) hrows InterruptedException { cmd = Command . ZCARD . code + " Java Object " ; Log . log ( " TEST: %s command " , cmd ) ; provider . flushdb ( ) ; String setkey = keys . get ( 0 ) ; List < Future < Boolean > > zaddResponses = new ArrayList < Future < Boolean > > ( ) ; for ( int i = 0 ; i < MEDIUM_CNT ; i + + ) zaddResponses . add ( provider . zadd ( setkey , i , objectList . get ( i ) ) ) ; Future < Long > zcardResp = provider . zcard ( setkey ) ; try { provider . flushdb ( ) ; 
public void estSismemberStringByteArray ( ) hrows InterruptedException { cmd = Command . SISMEMBER . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; String setkey = keys . get ( 0 ) ; provider . flushdb ( ) ; List < Future < Boolean > > saddResponses = new ArrayList < Future < Boolean > > ( ) ; for ( int i = 0 ; i < SMALL_CNT ; i + + ) saddResponses . add ( provider . sadd ( setkey , dataList . get ( i ) ) ) ; List < Future < Boolean > > sismemberResponses = new ArrayList < Future < Boolean > > ( ) ; for ( int i = 0 ; i < SMALL_CNT ; i + + ) saddResponses . add ( provider . sismember ( setkey , dataList . get ( i ) ) ) ; try { try { 
public void estZaddStringByteArray ( ) hrows InterruptedException { cmd = Command . ZADD . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZscoreStringByteArray ( ) hrows InterruptedException { cmd = Command . ZSCORE . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZscoreStringByteArray ( ) { cmd = Command . ZSCORE . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZrangeStringByteArray ( ) { cmd = Command . ZRANGE . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZcard ( ) { cmd = Command . ZADD . code + " Java Object | " + Command . ZCARD . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpoppush ( String srcList , String destList ) hrows RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > ype ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > tl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpoppush ( String srcList , String destList ) ; info () ;} 
public FutureByteArray lpoppush ( String srcList , String destList ) { byte [ ] srckeybytes = null ; if ( ( srckeybytes = getKeyBytes ( srcList ) ) = = null ) throw new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; byte [ ] destkeybytes = null ; if ( ( destkeybytes = getKeyBytes ( destList ) ) = = null ) throw new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . LPOPPUSH , srckeybytes , destkeybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public byte [ ] lpoppush ( String srcList , String destList ) throws RedisException { byte [ ] srckeybytes = null ; if ( ( srckeybytes = getKeyBytes ( srcList ) ) = = null ) throw new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; byte [ ] destkeybytes = null ; if ( ( destkeybytes = getKeyBytes ( destList ) ) = = null ) throw new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . LPOPPUSH , srckeybytes , destkeybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; 
public void estLpoppushStringByteArray ( ) hrows InterruptedException { cmd = Command . LPOPPUSH . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLpoppushStringString ( ) { cmd = Command . LPOPPUSH . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > ype ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > tl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; info () ;} 
public FutureByteArray rpoplpush ( String srcList , String destList ) { byte [ ] srckeybytes = null ; if ( ( srckeybytes = getKeyBytes ( srcList ) ) = = null ) throw new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; byte [ ] destkeybytes = null ; if ( ( destkeybytes = getKeyBytes ( destList ) ) = = null ) throw new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . RPOPLPUSH , srckeybytes , destkeybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException { byte [ ] srckeybytes = null ; if ( ( srckeybytes = getKeyBytes ( srcList ) ) = = null ) throw new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; byte [ ] destkeybytes = null ; if ( ( destkeybytes = getKeyBytes ( destList ) ) = = null ) throw new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . RPOPLPUSH , srckeybytes , destkeybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; 
public void estLpoppushStringByteArray ( ) hrows InterruptedException { cmd = Command . RPOPLPUSH . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estLpoppushStringString ( ) { cmd = Command . RPOPLPUSH . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public static void main ( String [ ] args ) { } 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
protected void initializeComponents ( ) { super . initializeComponents ( ) ; serviceLock = new Object ( ) ; isActive = new AtomicBoolean ( false ) ; connectionEstablished = new CountDownLatch ( 1 ) ; pendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; respHandler = new ResponseHandler ( ) ; respHandlerThread = new Thread ( respHandler , " response-handler " ) ; respHandlerThread . start ( ) ; isActive . set ( false ) ; heartbeatThread = new Thread ( new Heartbeat ( ) , " heartbeat " ) ; heartbeatThread . start ( ) ; } 
protected void notifyConnected ( ) { Log . log ( " Pipeline <%s> connected " , his ) ; isActive . set ( rue ) ; connectionEstablished . countDown ( ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; PendingRequest pendingResponse = null ; synchronized ( serviceLock ) { if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Request request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; if ( cmd ! = Command . QUIT ) request . write ( getOutputStream ( ) ) ; else { pendingQuit = rue ; isActive . set ( false ) ; } pendingResponse = new PendingRequest ( request , cmd ) ; pendingResponseQueue . add ( pendingResponse ) ; } return pendingResponse ; } 
public static void main ( String [ ] args ) { } 
public static void main ( String [ ] args ) { } 
private final void initialize ( ) { connPoolAccess = new Semaphore ( connCount ) ; conns = new Connection [ connCount ] ; connInUse = new boolean [ connCount ] ; Connection conn = null ; connectionSpec . isReliable ( rue ) ; for ( int i = 0 ; i < connCount ; i + + ) { try { 
protected void initializeComponents ( ) { setProtocolHandler ( Assert . notNull ( newProtocolHandler ( ) , " he delegate protocol handler " , ClientRuntimeException . class ) ) ; if ( spec . isReliable ( ) ) { heartbeat = new HeartbeatJinn ( his , his . spec . getHeartbeat ( ) , " connection [ " + hashCode ( ) + " ] heartbeat " ) ; 
protected final void connect ( ) hrows IllegalStateException , ClientRuntimeException { } 
protected final void disconnect ( ) hrows IllegalStateException { Assert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; socketClose ( ) ; isConnected = false ; notifyDisconnected ( ) ; Log.log("RedisConnection - disconnected"); 
public void run ( ) { Log . log ( " HeartbeatJinn thread <%s> started. " , getName ( ) ) ; while ( mustBeat . get ( ) ) { try { if ( connected . get ( ) ) { try { switch ( modality ) { case Asynchronous : conn . queueRequest ( Command . PING ) ; break ; case Synchronous : conn . serviceRequest ( Command . PING ) ; break ; } } catch ( Exception e ) { } 
protected void initializeComponents ( ) { spec . isReliable ( rue ) ; spec . isPipeline ( rue ) ; spec . isShared ( rue ) ; super . initializeComponents ( ) ; serviceLock = new Object ( ) ; isActive = new AtomicBoolean ( false ) ; connectionEstablished = new CountDownLatch ( 1 ) ; pendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; respHandler = new ResponseHandler ( ) ; respHandlerThread = new Thread ( respHandler , " response-handler " ) ; respHandlerThread . start ( ) ; isActive . set ( false ) ; } 
protected void notifyConnected ( ) { super . notifyConnected ( ) ; Log . log ( " Pipeline <%s> connected " , his ) ; isActive . set ( rue ) ; connectionEstablished . countDown ( ) ; } 
protected void notifyDisconnected ( ) { super . notifyDisconnected ( ) ; Log . log ( " Pipeline <%s> disconnected " , his ) ; isActive . set ( rue ) ; connectionEstablished . countDown ( ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; PendingRequest pendingResponse = null ; synchronized ( serviceLock ) { if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Request request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; if ( cmd ! = Command . QUIT ) request . write ( getOutputStream ( ) ) ; else { pendingQuit = rue ; isActive . set ( false ) ; return pendingResponse; } 
public synchronized Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException { if ( ! isConnected ( ) ) hrow new NotConnectedException ( " Not connected! " ) ; Request request = null ; Response response = null ; ResponseStatus status = null ; try { } 
public JRedis ping ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public byte [ ] srandmember ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > ype ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > tl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; info () ;} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > srandmember ( String setkey ) ; info () ;} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > zcard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; info () ;} 
public Double get ( ) hrows InterruptedException , ExecutionException { BulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( ) ; if ( bulkResp . getBulkData ( ) ! = null ) return Convert . oDouble ( bulkResp . getBulkData ( ) ) ; return null ; } 
public Double get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { BulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( imeout , unit ) ; if ( bulkResp . getBulkData ( ) ! = null ) return Convert . oDouble ( bulkResp . getBulkData ( ) ) ; return null ; } 
public Double zscore ( String key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Double resvalue = null ; try { BulkResponse bulkResponse = ( BulkResponse ) his . serviceRequest ( Command . ZSCORE , keybytes , member ) ; if ( bulkResponse . getBulkData ( ) ! = null ) resvalue = Convert . oDouble ( bulkResponse . getBulkData ( ) ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public Double zscore ( String key , String value ) hrows RedisException { return zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public Double zscore ( String key , Number value ) hrows RedisException { return zscore ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > Double zscore ( String key , T value ) hrows RedisException { return zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public JRedis ping ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long tl ( String key ) hrows RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public byte [ ] srandmember ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; info () throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; info () throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; info () throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; info () throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > ype ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > tl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; info () ;} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > srandmember ( String setkey ) ; info () ;} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > zcard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; info () ;} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; info () ;} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; info () ;} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; info () ;} 
public Future < Double > zincrby ( String key , double score , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZINCRBY , keybytes , Convert . oBytes ( score ) , member ) ; return new FutureDouble ( futureResponse ) ; } 
public Future < Double > zincrby ( String key , double score , String value ) { return zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Future < Double > zincrby ( String key , double score , Number value ) { return zincrby ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > Future < Double > zincrby ( String key , double score , T value ) { return zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Double zincrby ( String key , double score , byte [ ] member ) throws RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Double resvalue = null ; try { BulkResponse bulkResponse = ( BulkResponse ) his . serviceRequest ( Command . ZINCRBY , keybytes , Convert . oBytes ( score ) , member ) ; if ( bulkResponse . getBulkData ( ) ! = null ) resvalue = Convert . oDouble ( bulkResponse . getBulkData ( ) ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public Double zincrby ( String key , double score , String value ) hrows RedisException { return zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Double zincrby ( String key , double score , Number value ) hrows RedisException { return zincrby ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > Double zincrby ( String key , double score , T value ) hrows RedisException { return zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Double zscore ( String key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Double resvalue = null ; try { BulkResponse bulkResponse = ( BulkResponse ) his . serviceRequest ( Command . ZSCORE , keybytes , member ) ; if ( bulkResponse . getBulkData ( ) ! = null ) resvalue = Convert . oDouble ( bulkResponse . getBulkData ( ) ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public void estZscoreAndZincrbyStringByteArray ( ) hrows InterruptedException { cmd = Command . ZSCORE . code + " byte[] | " + Command . ZINCRBY . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZincrbyStringByteArray ( ) { cmd = Command . ZSCORE . code + " byte[] | " + Command . ZINCRBY . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public Map<String, String>info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public KeyValueSet < T > add ( String key , T value ) ; byte [ ] [ ] getMappings ( ) ; public interface ByteArrays extends KeyValueSet < byte [ ] > { } public interface Numbers extends KeyValueSet < Number > { } public interface Strings extends KeyValueSet < String > { } public interface Objects < T extends Serializable > extends KeyValueSet < T > { } }} 
byte [ ] [ ] getMappings ( ) ; public interface ByteArrays extends KeyValueSet < byte [ ] > { } public interface Numbers extends KeyValueSet < Number > { } public interface Strings extends KeyValueSet < String > { } public interface Objects < T extends Serializable > extends KeyValueSet < T > { } }} 
abstract byte [ ] oBytes ( T value ) ; public byte [ ] [ ] getMappings ( ) { KeyCodec codec = DefaultKeyCodec . provider ( ) ; byte [ ] [ ] mappings = new byte [ map . size ( ) * 2 ] [ ] ; int i = 0 ; for ( Entry < String , T > e : map . entrySet ( ) ) { mappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; mappings [ i + + ] = oBytes ( e . getValue ( ) ) ; } return mappings ; } public KeyValueSet < T > add ( String key , T value ) { map . put ( key , value ) ; return his ; } }} 
public byte [ ] [ ] getMappings ( ) { KeyCodec codec = DefaultKeyCodec . provider ( ) ; byte [ ] [ ] mappings = new byte [ map . size ( ) * 2 ] [ ] ; int i = 0 ; for ( Entry < String , T > e : map . entrySet ( ) ) { mappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; mappings [ i + + ] = oBytes ( e . getValue ( ) ) ; } return mappings ; } 
public static KeyValueSet . ByteArrays newByteArrayKVSet ( ) { return new BulkSetMapping . Bytes ( ) ; } final static class Bytes extends BulkSetMapping < byte [ ] > implements KeyValueSet . ByteArrays { 
public static KeyValueSet . Strings newStringKVSet ( ) { return new BulkSetMapping . Strings ( ) ; } final static class Strings extends BulkSetMapping < String > implements KeyValueSet . Strings { 
public static KeyValueSet . Numbers newNumberKVSet ( ) { return new BulkSetMapping . Numbers ( ) ; } final static class Numbers extends BulkSetMapping < Number > implements KeyValueSet . Numbers { 
public static KeyValueSet . Numbers newObjectKVSet ( ) { return new BulkSetMapping . Numbers ( ) ; } final static class Objects < T extends Serializable > extends BulkSetMapping < T > implements KeyValueSet . Objects < T > { 
private FutureStatus mset ( byte [ ] [ ] mappings ) { Future < Response > futureResponse = his . queueRequest ( Command . MSET , mappings ) ; return new FutureStatus ( futureResponse ) ; } 
public FutureStatus mset ( Map < String , byte [ ] > keyValueMap ) { KeyCodec codec = DefaultKeyCodec . provider ( ) ; byte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; int i = 0 ; for ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { mappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; mappings [ i + + ] = e . getValue ( ) ; } return mset ( mappings ) ; } 
public < T extends Serializable > FutureStatus mset ( KeyValueSet . Objects < T > keyValueMap ) { return mset ( keyValueMap . getMappings ( ) ) ; } 
private Future < Boolean > msetnx ( byte [ ] [ ] mappings ) { Future < Response > futureResponse = his . queueRequest ( Command . MSETNX , mappings ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) { KeyCodec codec = DefaultKeyCodec . provider ( ) ; byte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; int i = 0 ; for ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { mappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; mappings [ i + + ] = e . getValue ( ) ; } return msetnx ( mappings ) ; } 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > keyValueMap ) { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
private boolean msetnx ( byte [ ] [ ] mappings ) hrows RedisException { boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . MSETNX , mappings ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException { KeyCodec codec = DefaultKeyCodec . provider ( ) ; byte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; int i = 0 ; for ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { mappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; mappings [ i + + ] = e . getValue ( ) ; } return msetnx ( mappings ) ; } 
public boolean msetnx ( KeyValueSet . ByteArrays keyValueMap ) hrows RedisException { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public boolean msetnx ( KeyValueSet . Strings keyValueMap ) hrows RedisException { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public boolean msetnx ( KeyValueSet . Numbers keyValueMap ) hrows RedisException { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > keyValueMap ) hrows RedisException { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException { KeyCodec codec = DefaultKeyCodec . provider ( ) ; byte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; int i = 0 ; for ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { mappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; mappings [ i + + ] = e . getValue ( ) ; } mset ( mappings ) ; } 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > keyValueMap ) hrows RedisException { mset ( keyValueMap . getMappings ( ) ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd . requestType ) { case NO_ARG : } 
public byte [ ] encode ( String key ) { if ( null = = key ) hrow new IllegalArgumentException ( " key is null " ) ; byte [ ] bytes = null ; if ( JRedisSupport . CacheKeys = = rue ) bytes = keyByteCache . get ( key ) ; if ( null = = bytes ) { try { bytes = key . getBytes ( DefaultCodec . SUPPORTED_CHARSET_NAME ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } for ( byte b : bytes ) { if ( b = = ( byte ) 32 | | b = = ( byte ) 10 | | b = = ( byte ) 13 ) throw new IllegalArgumentException ( " Key includes invalid byte value: " + ( int ) b ) ; } if ( CacheKeys = = rue ) keyByteCache . put ( key , bytes ) ; } return bytes ; } 
public static void usingSyncClient ( ) { ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( " jredis " . getBytes ( ) ) . setDatabase ( 10 ) ; JRedis jredis = new JRedisClient ( spec ) ; System . out . println ( " nusing the SyncClient: " ) ; useMSet ( jredis ) ; useMSetNX ( jredis ) ; jredis . quit ( ) ; } 
private static void useMSet ( JRedis jredis ) { jredis.flushdb(); 
private static void useMSetNX ( JRedis jredis ) { jredis.flushdb(); 
public static void usingAsyncClient ( ) { ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( " jredis " . getBytes ( ) ) . setDatabase ( 10 ) ; JRedisFuture jredis = new JRedisAsynchClient ( spec ) ; System . out . println ( " nusing the AsyncClient: " ) ; useMSet ( jredis ) ; useMSetNX ( jredis ) ; jredis . quit ( ) ; 
private static void useMSetNX ( JRedisFuture jredis ) { Map < String , byte [ ] > kvMap = new HashMap < String , byte [ ] > ( ) ; kvMap . put ( " foo " , " bar " . getBytes ( ) ) ; kvMap . put ( " cat " , " meow " . getBytes ( ) ) ; kvMap . put ( " dog " , " woof " . getBytes ( ) ) ; kvMap . put ( " bird " , " whale fail " . getBytes ( ) ) ; kvMap . put ( " pi " , String . valueOf ( 3.141592653589793 ) . getBytes ( ) ) ; try { jredis . flushdb ( ) ; 
private static void useMSet ( JRedisFuture jredis ) { jredis.flushdb(); 
public void run ( ) { } 
public void rpush ( String key , byte [ ] value ) throws RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value for list op " ) ; this . serviceRequest ( Command . RPUSH , keybytes , value ) ; } 
public void lpush ( String key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value for list op " ) ; this . serviceRequest ( Command . LPUSH , keybytes , value ) ; } 
public void read ( InputStream in ) hrows ClientRuntimeException , ProviderException { if ( didRead ) return ; } 
private final void setupTestSuiteData ( ) { cnt = MEDIUM_CNT ; byte [ ] zerobytes = new byte [ 0 ] ; for ( int i = 0 ; i < cnt ; i + + ) { keys . add ( getRandomAsciiString ( 48 ) ) ; patternList . add ( getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) + patternA + getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) ) ; uniqueSet . add ( getRandomAsciiString ( 48 ) ) ; commonSet . add ( getRandomAsciiString ( 48 ) ) ; set1 . add ( " set_1 " + getRandomAsciiString ( 20 ) ) ; set2 . add ( " set_2 " + getRandomAsciiString ( 20 ) ) ; dataList . add ( getRandomBytes ( 128 ) ) ; if ( random . nextBoolean ( ) ) sparseList . add ( zerobytes ) ; else sparseList . add ( getRandomBytes ( 128 ) ) ; stringList . add ( getRandomAsciiString ( 128 ) ) ; objectList . add ( new TestBean ( " estbean. " + i ) ) ; intList . add ( random . nextInt ( ) ) ; longList . add ( random . nextLong ( ) ) ; doubleList . add ( random . nextDouble ( ) ) ; } for ( String m : commonSet ) { set1 . add ( m ) ; set2 . add ( m ) ; } Log . log ( " TEST-SUITE-INIT: JRedis Provider Test Suite random test data created " ) ; 
public void estListPushWithSparseList ( ) { cmd = Command . RPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public FutureStatus rpush ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureStatus ( his . queueRequest ( Command . RPUSH , keybytes , value ) ) ; } 
public FutureStatus lpush ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureStatus ( his . queueRequest ( Command . LPUSH , keybytes , value ) ) ; } 
public JRedis ping ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void quit ( ) ; public void slaveofnone() throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public byte [ ] srandmember ( String setkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public JRedis flushdb ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public JRedis flushall ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean move ( String key , int dbIndex ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Sort sort ( String key ) ; public void slaveofnone() throws RedisException;} 
public void save ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void bgsave ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long lastsave ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Map < String , String > info ( ) hrows RedisException ; public void slaveofnone ( ) hrows RedisException ; } 
public void slaveof ( String host , int port ) hrows RedisException ; public void slaveofnone ( ) hrows RedisException ; } 
public Future < ResponseStatus > ping ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > quit ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > incr ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > decr ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > exists ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > del ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < RedisType > ype ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < String > > keys ( String pattern ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < String > > keys ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < String > randomkey ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > dbsize ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > tl ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > llen ( String listkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > scard ( String setKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > zcard ( String setKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > flushdb ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > flushall ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > move ( String key , int dbIndex ) ; public Future<ResponseStatus> slaveofnone();} 
public Sort sort ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > save ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > bgsave ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lastsave ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Map < String , String > > info ( ) ; public Future < ResponseStatus > slaveofnone ( ) ; } 
public Future < ResponseStatus > slaveof ( String host , int port ) ; public Future < ResponseStatus > slaveofnone ( ) ; } 
public Future < ResponseStatus > slaveof ( String host , int port ) { byte [ ] hostbytes = null ; if ( ( hostbytes = getKeyBytes ( host ) ) = = null ) throw new IllegalArgumentException ( " invalid host => [ " + host + " ] " ) ; byte [ ] portbytes = null ; if ( ( portbytes = Convert . oBytes ( port ) ) = = null ) throw new IllegalArgumentException ( " invalid port => [ " + port + " ] " ) ; return new FutureStatus ( his . queueRequest ( Command . SLAVEOF , hostbytes , portbytes ) ) ; } 
public Future < ResponseStatus > slaveofnone ( ) { return new FutureStatus ( his . queueRequest ( Command . SLAVEOF , " no " . getBytes ( ) , " one " . getBytes ( ) ) ) ; } 
public void slaveof ( String host , int port ) hrows RedisException { byte [ ] hostbytes = null ; if ( ( hostbytes = getKeyBytes ( host ) ) = = null ) throw new IllegalArgumentException ( " invalid host => [ " + host + " ] " ) ; byte [ ] portbytes = null ; if ( ( portbytes = Convert . oBytes ( port ) ) = = null ) throw new IllegalArgumentException ( " invalid port => [ " + port + " ] " ) ; this . serviceRequest ( Command . SLAVEOF , hostbytes , portbytes ) ; } 
public void slaveofnone ( ) hrows RedisException { this . serviceRequest ( Command . SLAVEOF , " no " . getBytes ( ) , " one " . getBytes ( ) ) ; } 
public static void main ( String [ ] args ) { final ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) ; spec . setCredentials ( " jredis " . getBytes ( ) ) ; spec . setDatabase ( 13 ) ; spec . setSocketProperty ( SocketProperty . SO_RCVBUF , 1024 * 512 ) ; spec . setSocketProperty ( SocketProperty . SO_SNDBUF , 1024 * 512 ) ; usingSynchSemantics ( spec ) ; final boolean forever = rue ; runJRedisPipelineSET ( spec , 10000 , 3 , forever ) ; } 
private static void usingSynchSemantics ( ConnectionSpec spec ) { JRedisPipeline pipeline = new JRedisPipeline ( spec ) ; try { long start = System . currentTimeMillis ( ) ; 
private static void runJRedisPipelineGET ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { long otTime = 0 ; long avgRespTime = 0 ; float avgThroughput = ( float ) 0 ; long iters = 0 ; JRedisFuture pipeline = new JRedisPipeline ( spec ) ; try { String key = " pipeKey " ; 
private static void runJRedisPipelinePING ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { long otTime = 0 ; long avgRespTime = 0 ; float avgThroughput = ( float ) 0 ; long iters = 0 ; JRedisFuture pipeline = new JRedisPipeline ( spec ) ; try { do { 
private static void runJRedisPipelineLPUSH ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { JRedisFuture pipeline = new JRedisPipeline ( spec ) ; long otTime = 0 ; long avgRespTime = 0 ; float avgThroughput = ( float ) 0 ; long iters = 0 ; try { String key = " pipeKey " ; 
private static void runJRedisPipelineSET ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { JRedisFuture pipeline = new JRedisPipeline ( spec ) ; long otTime = 0 ; long avgRespTime = 0 ; float avgThroughput = ( float ) 0 ; long iters = 0 ; try { String key = " pipeKey " ; 
private static void runJRedisPipelineINCR ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { JRedisFuture pipeline = new JRedisPipeline ( spec ) ; long otTime = 0 ; long avgRespTime = 0 ; float avgThroughput = ( float ) 0 ; long iters = 0 ; try { String key = " pipeCounter " ; 
private void basicStuff ( ) hrows RedisException { jredis . flushdb ( ) ; String key = " foo " ; jredis . set ( key , " bar " ) ; String value = oStr ( jredis . get ( key ) ) ; System . out . format ( " %s => %s " , key , value ) ; } 
public JRedis ping ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void quit ( ) ; public void slaveofnone() throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public byte [ ] srandmember ( String setkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean hset ( String key , String field , String string ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean hset ( String key , String field , Number number ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean hset ( String key , String field , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] hget ( String key , String field ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > quit ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > incr ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > decr ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > exists ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > del ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < RedisType > ype ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < String > > keys ( String pattern ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < String > > keys ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < String > randomkey ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > dbsize ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > tl ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > llen ( String listkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > scard ( String setKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > zcard ( String setKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > hset ( String key , String field , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( field ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + field + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HSET , hashKeyBytes , hashFieldBytes , value ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > hset ( String key , String field , String stringValue ) { return hset ( key , field , DefaultCodec . encode ( stringValue ) ) ; } 
public Future < Boolean > hset ( String key , String field , Number numberValue ) { return hset ( key , field , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > Future < Boolean > hset ( String key , String field , T object ) { return hset ( key , field , DefaultCodec . encode ( object ) ) ; } 
public Future < byte [ ] > hget ( String hashKey , String hashField ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HGET , hashKeyBytes , hashFieldBytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public List < String > get ( ) hrows InterruptedException , ExecutionException { return DefaultCodec.toStr(resp.getMultiBulkData()); } 
public List < String > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { return DefaultCodec.toStr(resp.getMultiBulkData()); } 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException { return smove ( srcKey , destKey , DefaultCodec . encode ( object ) ) ; } 
public boolean hset ( String hashKey , String hashField , byte [ ] value ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; boolean response = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . HSET , hashKeyBytes , hashFieldBytes , value ) ; response = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return response ; } 
public boolean hset ( String key , String field , String stringValue ) hrows RedisException { return hset ( key , field , DefaultCodec . encode ( stringValue ) ) ; } 
public boolean hset ( String key , String field , Number numberValue ) hrows RedisException { return hset ( key , field , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean hset ( String key , String field , T object ) hrows RedisException { return hset ( key , field , DefaultCodec . encode ( object ) ) ; } 
public byte [ ] hget ( String hashKey , String hashField ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . HGET , hashKeyBytes , hashFieldBytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public List < String > keys ( String pattern ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( pattern ) ) = = null ) throw new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . KEYS , keydata ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return DefaultCodec . oStr ( multiBulkData ) ; / * 
public void estHsetHget ( ) hrows InterruptedException { cmd = Command . HSET . code + " | " + Command . HGET ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estHsetHget ( ) { cmd = Command . HSET . code + " | " + Command . HGET ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void quit ( ) ; public void slaveofnone() throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public void slaveofnone() throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > quit ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > incr ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > decr ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > exists ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > del ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < RedisType > ype ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < String > > keys ( String pattern ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < String > > keys ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < String > randomkey ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > dbsize ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > tl ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > llen ( String listkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > scard ( String setKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > spop ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SPOP , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public byte [ ] spop ( String setkey ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( setkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + setkey + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . SPOP , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public JRedis ping ( ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void quit ( ) ; byte[] echo (T msg) throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; byte[] echo (T msg) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; byte[] echo (T msg) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; byte[] echo (T msg) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; byte[] echo (T msg) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; byte[] echo (T msg) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; byte[] echo (T msg) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; byte[] echo (T msg) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean hset ( String key , String field , String string ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean hset ( String key , String field , T object ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] hget ( String key , String field ) hrows RedisException ; byte[] echo (T msg) throws RedisException;} 
public JRedis flushdb ( ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public JRedis flushall ( ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean move ( String key , int dbIndex ) hrows RedisException ; byte[] echo (T msg) throws RedisException;} 
public Sort sort ( String key ) ; byte[] echo (T msg) throws RedisException;} 
public void save ( ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void bgsave ( ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long lastsave ( ) hrows RedisException ; byte[] echo (T msg) throws RedisException;} 
public Map < String , String > info ( ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void slaveof ( String host , int port ) hrows RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void slaveofnone ( ) hrows RedisException ; byte[] echo (T msg) throws RedisException;} 
public byte [ ] echo ( byte [ ] msg ) hrows RedisException ; public byte [ ] echo ( String msg ) hrows RedisException ; public byte [ ] echo ( Number msg ) hrows RedisException ; public < T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; } 
public byte [ ] echo ( String msg ) hrows RedisException ; public byte [ ] echo ( Number msg ) hrows RedisException ; public < T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; } 
public byte [ ] echo ( Number msg ) hrows RedisException ; public < T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; } 
public Future < ResponseStatus > ping ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > quit ( ) ; Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > incr ( String key ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > decr ( String key ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > exists ( String key ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > del ( String key ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < RedisType > ype ( String key ) ; Future<byte[]> echo (T msg);} 
public Future < List < String > > keys ( String pattern ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < String > > keys ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < String > randomkey ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > dbsize ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > tl ( String key ) ; Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > llen ( String listkey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; Future<byte[]> echo (T msg);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > scard ( String setKey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > spop ( String setkey ) ; Future<byte[]> echo (T msg);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > zcard ( String setKey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; Future<byte[]> echo (T msg);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; Future<byte[]> echo (T msg);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; Future<byte[]> echo (T msg);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Boolean > hset ( String key , String field , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > hget ( String key , String field ) ; Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > flushdb ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > flushall ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > move ( String key , int dbIndex ) ; Future<byte[]> echo (T msg);} 
public Sort sort ( String key ) ; Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > save ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > bgsave ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > lastsave ( ) ; Future<byte[]> echo (T msg);} 
public Future < Map < String , String > > info ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > slaveof ( String host , int port ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > slaveofnone ( ) ; Future<byte[]> echo (T msg);} 
public Future < byte [ ] > echo ( byte [ ] msg ) ; public Future < byte [ ] > echo ( String msg ) ; public Future < byte [ ] > echo ( Number msg ) ; public < T extends Serializable > Future < byte [ ] > echo ( T msg ) ; } 
public Future < byte [ ] > echo ( String msg ) ; public Future < byte [ ] > echo ( Number msg ) ; public < T extends Serializable > Future < byte [ ] > echo ( T msg ) ; } 
public Future < byte [ ] > echo ( byte [ ] msg ) { if ( msg = = null ) throw new IllegalArgumentException ( " invalid value for echo => [ " + msg + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ECHO , msg ) ; return new FutureByteArray ( futureResponse ) ; 
public byte [ ] echo ( byte [ ] value ) hrows RedisException { if ( value = = null ) throw new IllegalArgumentException ( " invalid echo value => [ " + value + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . ECHO , value ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public < T extends Serializable > byte [ ] echo ( T value ) hrows RedisException { return echo ( DefaultCodec . encode ( value ) ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd . requestType ) { case NO_ARG : } 
public void estEcho ( ) hrows InterruptedException { Future < byte [ ] > echoResp = null ; cmd = Command . ECHO . code ; Log . log ( " TEST: %s command " , cmd ) ; try { echoResp = provider . echo ( dataList . get ( 0 ) ) ; 
public JRedis ping ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean hset ( String key , String field , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public JRedis flushdb ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public JRedis flushall ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean move ( String key , int dbIndex ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Sort sort ( String key ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void save ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void bgsave ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lastsave ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Map < String , String > info ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void slaveof ( String host , int port ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void slaveofnone ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] echo ( byte [ ] msg ) hrows RedisException ; public byte [ ] echo ( String msg ) hrows RedisException ; public byte [ ] echo ( Number msg ) hrows RedisException ; public < T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; public ObjectInfo debug ( String key ) hrows RedisException ; } 
public byte [ ] echo ( String msg ) hrows RedisException ; public byte [ ] echo ( Number msg ) hrows RedisException ; public < T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; public ObjectInfo debug ( String key ) hrows RedisException ; } 
public byte [ ] echo ( Number msg ) hrows RedisException ; public < T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; public ObjectInfo debug ( String key ) hrows RedisException ; } 
public < T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; public ObjectInfo debug ( String key ) hrows RedisException ; } 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > flushdb ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > flushall ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > move ( String key , int dbIndex ) ; public Future<ObjectInfo> debug (String key);} 
public Sort sort ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > save ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > bgsave ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lastsave ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Map < String , String > > info ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > slaveof ( String host , int port ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > slaveofnone ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > echo ( byte [ ] msg ) ; public Future < byte [ ] > echo ( String msg ) ; public Future < byte [ ] > echo ( Number msg ) ; public < T extends Serializable > Future < byte [ ] > echo ( T msg ) ; public Future < ObjectInfo > debug ( String key ) ; } 
public Future < byte [ ] > echo ( String msg ) ; public Future < byte [ ] > echo ( Number msg ) ; public < T extends Serializable > Future < byte [ ] > echo ( T msg ) ; public Future < ObjectInfo > debug ( String key ) ; } 
public Future < byte [ ] > echo ( Number msg ) ; public < T extends Serializable > Future < byte [ ] > echo ( T msg ) ; public Future < ObjectInfo > debug ( String key ) ; } 
public < T extends Serializable > Future < byte [ ] > echo ( T msg ) ; public Future < ObjectInfo > debug ( String key ) ; } 
public String oString ( ) { Formatter formatter = new Formatter ( ) ; formatter . format ( " ObjectInfo: key [addr:%s refCnt: %d] value [addr:%s refCnt: %d] encoding:%d serializedLength: %d " , keyAddress , keyRefCount , valueAddress , valueRefCount , encoding , serializedLength ) ; return formatter . oString ( ) ; } 
static public final ObjectInfo valueOf ( String strRep ) { StringTokenizer okenizer = new StringTokenizer ( strRep ) ; int okenCnt = okenizer . countTokens ( ) ; if ( okenCnt ! = 8 ) hrow new ProviderException ( " DEBUG OBJECT <key> response does not conform to expected format. Got: [ " + strRep + " ] " ) ; List < String > okens = new ArrayList < String > ( okenCnt ) ; while ( okenizer . hasMoreElements ( ) ) tokens . add ( okenizer . nextToken ( ) ) ; String keyAddr = okens . get ( 1 ) . substring ( 3 ) ; String keyCnt = okens . get ( 2 ) . substring ( " refcount: " . length ( ) ) ; keyCnt = keyCnt . substring ( 0 , keyCnt . length ( ) - 1 ) ; String valAddr = okens . get ( 4 ) . substring ( 3 ) ; String valCnt = okens . get ( 5 ) . substring ( " refcount: " . length ( ) ) ; String encoding = okens . get ( 6 ) . substring ( " encoding: " . length ( ) ) ; String serlen = okens . get ( 7 ) . substring ( " serializedlength: " . length ( ) ) ; ObjectInfo info = new ObjectInfo ( keyAddr , Integer . parseInt ( keyCnt ) , valAddr , Integer . parseInt ( valCnt ) , Integer . parseInt ( encoding ) , Integer . parseInt ( serlen ) ) ; return info ; } 
public Future < ObjectInfo > debug ( String key ) { byte [ ] keybytes = getKeyBytes ( key ) ; if ( key . length ( ) = = 0 ) throw new IllegalArgumentException ( " invalid zero length key => [ " + key + " ] " ) ; return new FutureObjectInfo ( his . queueRequest ( Command . DEBUG , " OBJECT " . getBytes ( ) , keybytes ) ) ; } 
public ObjectInfo get ( ) hrows InterruptedException , ExecutionException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; return getObjectInfo ( valResp ) ; } 
public ObjectInfo get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return getObjectInfo ( valResp ) ; } 
public ObjectInfo debug ( String key ) hrows RedisException { byte [ ] keybytes = getKeyBytes ( key ) ; if ( key . length ( ) = = 0 ) throw new IllegalArgumentException ( " invalid zero length key => [ " + key + " ] " ) ; ObjectInfo objectInfo = null ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . DEBUG , " OBJECT " . getBytes ( ) , keybytes ) ; String stringValue = valResponse . getStringValue ( ) ; objectInfo = ObjectInfo . valueOf ( stringValue ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return objectInfo ; } 
public void estDebug ( ) hrows InterruptedException { Future < ObjectInfo > frInfo = null ; cmd = Command . DEBUG . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public String oString ( ) { Formatter formatter = new Formatter ( ) ; formatter . format ( " ObjectInfo: key [addr:%s refCnt: %d] value [addr:%s refCnt: %d] encoding:%s serializedLength: %d " , keyAddress , keyRefCount , valueAddress , valueRefCount , encoding , serializedLength ) ; return formatter . oString ( ) ; } 
static public final ObjectInfo valueOf ( String strRep ) { StringTokenizer okenizer = new StringTokenizer ( strRep ) ; int okenCnt = okenizer . countTokens ( ) ; if ( okenCnt ! = 8 ) hrow new ProviderException ( " DEBUG OBJECT <key> response does not conform to expected format. Got: [ " + strRep + " ] " ) ; List < String > okens = new ArrayList < String > ( okenCnt ) ; while ( okenizer . hasMoreElements ( ) ) tokens . add ( okenizer . nextToken ( ) ) ; String keyAddr = okens . get ( 1 ) . substring ( 3 ) ; String keyCnt = okens . get ( 2 ) . substring ( " refcount: " . length ( ) ) ; keyCnt = keyCnt . substring ( 0 , keyCnt . length ( ) - 1 ) ; String valAddr = okens . get ( 4 ) . substring ( 3 ) ; String valCnt = okens . get ( 5 ) . substring ( " refcount: " . length ( ) ) ; String encodingRep = okens . get ( 6 ) . substring ( " encoding: " . length ( ) ) ; String serlen = okens . get ( 7 ) . substring ( " serializedlength: " . length ( ) ) ; ObjectInfo info = new ObjectInfo ( keyAddr , Integer . parseInt ( keyCnt ) , valAddr , Integer . parseInt ( valCnt ) , ObjectEncoding . valueOf ( encodingRep . oUpperCase ( ) ) , Integer . parseInt ( serlen ) ) ; return info ; } 
public JRedis ping ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean hset ( String key , String field , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String hashKey , String hashField ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HEXISTS , hashKeyBytes , hashFieldBytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public boolean hexists ( String hashKey , String hashField ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; boolean resp = false ; try { ValueResponse response = ( ValueResponse ) his . serviceRequest ( Command . HEXISTS , hashKeyBytes , hashFieldBytes ) ; resp = response . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public void estHsetHget ( ) hrows InterruptedException { cmd = Command . HSET . code + " | " + Command . HGET + " | " + Command . HEXISTS ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estHsetHgetHexists ( ) { cmd = Command . HSET . code + " | " + Command . HGET + " | " + Command . HEXISTS ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean hset ( String key , String field , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String hashKey , String hashField ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HDEL , hashKeyBytes , hashFieldBytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public boolean hdel ( String hashKey , String hashField ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; boolean resp = false ; try { ValueResponse response = ( ValueResponse ) his . serviceRequest ( Command . HDEL , hashKeyBytes , hashFieldBytes ) ; resp = response . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public JRedis ping ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean hset ( String key , String field , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long hlen ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > hlen ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > hlen ( String hashKey ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HLEN , hashKeyBytes ) ; return new FutureLong ( futureResponse ) ; } 
public long hlen ( String hashKey ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; long resp = 0 ; try { ValueResponse response = ( ValueResponse ) his . serviceRequest ( Command . HLEN , hashKeyBytes ) ; resp = response . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public JRedis ping ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean hset ( String key , String field , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long hlen ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > hkeys ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > hlen ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > hkeys ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > hkeys ( String hashKey ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HKEYS , hashKeyBytes ) ; return new FutureKeyList ( futureResponse ) ; } 
public List < String > get ( ) hrows InterruptedException , ExecutionException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( ) ; List < byte [ ] > multibulkdata = resp . getMultiBulkData ( ) ; List < String > list = null ; if ( null ! = multibulkdata ) list = DefaultCodec . oStr ( multibulkdata ) ; return list ; } 
public List < String > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( imeout , unit ) ; List < byte [ ] > multibulkdata = resp . getMultiBulkData ( ) ; List < String > list = null ; if ( null ! = multibulkdata ) list = DefaultCodec . oStr ( multibulkdata ) ; return list ; } 
public boolean hexists ( String hashKey , String hashField ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; boolean resp = false ; try { ValueResponse response = ( ValueResponse ) his . serviceRequest ( Command . HEXISTS , hashKeyBytes , hashFieldBytes ) ; resp = response . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public boolean hdel ( String hashKey , String hashField ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; boolean resp = false ; try { ValueResponse response = ( ValueResponse ) his . serviceRequest ( Command . HDEL , hashKeyBytes , hashFieldBytes ) ; resp = response . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public long hlen ( String hashKey ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; long resp = 0 ; try { ValueResponse response = ( ValueResponse ) his . serviceRequest ( Command . HLEN , hashKeyBytes ) ; resp = response . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public List < String > hkeys ( String hashKey ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; List < String > resp = null ; try { MultiBulkResponse response = ( MultiBulkResponse ) his . serviceRequest ( Command . HKEYS , hashKeyBytes ) ; if ( null ! = response . getMultiBulkData ( ) ) resp = DefaultCodec . oStr ( response . getMultiBulkData ( ) ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public void estHkeys ( ) hrows InterruptedException { cmd = Command . HSET . code + " | " + Command . HKEYS ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estHkeys ( ) { cmd = Command . HKEYS . code + " | " + Command . HSET + " | " + Command . HDEL ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean hset ( String key , String field , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long hlen ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > hkeys ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > hvals ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > hlen ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > hkeys ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > hvals ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > hvals ( String hashKey ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HKEYS , hashKeyBytes ) ; return new FutureByteArrayList ( futureResponse ) ; } 
public List < byte [ ] > hvals ( String hashKey ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; List < byte [ ] > resp = null ; try { MultiBulkResponse response = ( MultiBulkResponse ) his . serviceRequest ( Command . HVALS , hashKeyBytes ) ; resp = response . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public void estHvals ( ) hrows InterruptedException { cmd = Command . HSET . code + " | " + Command . HVALS ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estHvals ( ) { cmd = Command . HVALS . code + " | " + Command . HSET + " | " + Command . HDEL ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean hset ( String key , String field , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long hlen ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > hkeys ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > hvals ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Map < String , byte [ ] > hgetall ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > hlen ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > hkeys ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > hvals ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Map < String , byte [ ] > > hgetall ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Map < String , byte [ ] > > hgetall ( String hashKey ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HGETALL , hashKeyBytes ) ; return new FutureDataDictionary ( futureResponse ) ; } 
public Map < String , byte [ ] > get ( ) hrows InterruptedException , ExecutionException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( ) ; return convert ( resp . getMultiBulkData ( ) ) ; } 
public Map < String , byte [ ] > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( imeout , unit ) ; return convert ( resp . getMultiBulkData ( ) ) ; } 
private static final Map < String , byte [ ] > convert ( List < byte [ ] > bulkdata ) { Map < String , byte [ ] > map = null ; if ( null ! = bulkdata ) { map = new HashMap < String , byte [ ] > ( bulkdata . size ( ) / 2 ) ; for ( int i = 0 ; i < bulkdata . size ( ) ; i + = 2 ) { map . put ( DefaultCodec . oStr ( bulkdata . get ( i ) ) , bulkdata . get ( i + 1 ) ) ; } } return map ; } 
public Map < String , byte [ ] > hgetall ( String hashKey ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; Map < String , byte [ ] > resp = null ; try { MultiBulkResponse response = ( MultiBulkResponse ) his . serviceRequest ( Command . HGETALL , hashKeyBytes ) ; List < byte [ ] > bulkdata = response . getMultiBulkData ( ) ; if ( null ! = bulkdata ) { resp = new HashMap < String , byte [ ] > ( bulkdata . size ( ) / 2 ) ; for ( int i = 0 ; i < bulkdata . size ( ) ; i + = 2 ) { resp . put ( DefaultCodec . oStr ( bulkdata . get ( i ) ) , bulkdata . get ( i + 1 ) ) ; } } } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public void estHgetall ( ) hrows InterruptedException { cmd = Command . HSET . code + " | " + Command . HGETALL ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estHgetall ( ) { cmd = Command . HGETALL . code + " | " + Command . HSET + " | " + Command . HDEL ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtime ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long expiretime = TimeUnit . SECONDS . convert ( epochtime , TimeUnit . MILLISECONDS ) ; byte [ ] expiretimeBytes = Convert . oBytes ( expiretime ) ; Future < Response > futureResponse = his . queueRequest ( Command . EXPIREAT , keybytes , expiretimeBytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public boolean expireat ( String key , long epochtime ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long expiretime = TimeUnit . SECONDS . convert ( epochtime , TimeUnit . MILLISECONDS ) ; byte [ ] expiretimeBytes = Convert . oBytes ( expiretime ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . EXPIREAT , keybytes , expiretimeBytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public void estExpireat ( ) hrows InterruptedException { cmd = Command . EXPIREAT . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) . get ( ) ; 
public void estExpireat ( ) { cmd = Command . EXPIREAT . code ; Log . log ( " TEST: %s command(s) " , cmd ) ; try { provider . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean hset ( String key , String field , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long hlen ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > hkeys ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > hvals ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Map < String , byte [ ] > hgetall ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public JRedis flushdb ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public JRedis flushall ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean move ( String key , int dbIndex ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Sort sort ( String key ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void save ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void bgsave ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String bgrewriteaof ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > hlen ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > hkeys ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > hvals ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Map < String , byte [ ] > > hgetall ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > flushdb ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > flushall ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > move ( String key , int dbIndex ) ; public Future<ObjectInfo> debug (String key);} 
public Sort sort ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > save ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > bgsave ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > bgrewriteaof ( ) ; public Future<ObjectInfo> debug (String key);} 
public FutureString bgrewriteaof ( ) { Future < Response > futureResponse = his . queueRequest ( Command . BGREWRITEAOF ) ; return new FutureString ( futureResponse ) ; } 
public String bgrewriteaof ( ) hrows RedisException { String value = null ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . BGREWRITEAOF ) ; value = valResponse . getStringValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public void estBgrewriteaof ( ) hrows InterruptedException { Future < String > cmdRespMsg = null ; cmd = Command . BGREWRITEAOF . code ; Log . log ( " TEST: %s command " , cmd ) ; try { cmdRespMsg = provider . bgrewriteaof ( ) ; 
public void estBgrewriteaofe ( ) { cmd = Command . BGREWRITEAOF . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public JRedis ping ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyscore ( String key , double minScore , double maxScore ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minScore ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxScore ) ; return new FutureLong ( his . queueRequest ( Command . ZREMRANGEBYSCORE , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public long zremrangebyscore ( String key , double minScore , double maxScore ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( minScore ) ; byte [ ] oBytes = Convert . oBytes ( maxScore ) ; long resp = Long . MIN_VALUE ; try { ValueResponse valueResponse = ( ValueResponse ) his . serviceRequest ( Command . ZREMRANGEBYSCORE , keybytes , fromBytes , oBytes ) ; resp = valueResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public void estZrangebyscoreStringByteArray ( ) hrows InterruptedException { cmd = Command . ZRANGEBYSCORE . code + " byte[] | " + Command . ZSCORE . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZremrangebyscoreStringByteArray ( ) hrows InterruptedException { cmd = Command . ZREMRANGEBYSCORE . code + " byte[] | " + Command . ZSCORE . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZrangebyscoreStringByteArray ( ) { cmd = Command . ZRANGEBYSCORE . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZremrangebyscoreStringByteArray ( ) { cmd = Command . ZREMRANGEBYSCORE . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void set ( String key , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyrank ( String setkey , double minRank , double maxRank ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyrank ( String setkey , double minRank , double maxRank ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyrank ( String key , double minRank , double maxRank ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minRank ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxRank ) ; return new FutureLong ( his . queueRequest ( Command . ZREMRANGEBYRANK , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public long zremrangebyrank ( String key , double minRank , double maxRank ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( minRank ) ; byte [ ] oBytes = Convert . oBytes ( maxRank ) ; long resp = Long . MIN_VALUE ; try { ValueResponse valueResponse = ( ValueResponse ) his . serviceRequest ( Command . ZREMRANGEBYRANK , keybytes , fromBytes , oBytes ) ; resp = valueResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public void estZremrangebyrankStringByteArray ( ) hrows InterruptedException { cmd = Command . ZREMRANGEBYRANK . code + " byte[] | " + Command . ZSCORE . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZremrangebyrankStringByteArray ( ) { cmd = Command . ZREMRANGEBYRANK . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void set ( String key , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , byte [ ] member ) ; public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZRANK , keybytes , member ) ; return new FutureLong ( futureResponse ) ; } 
public < T extends Serializable > Future < Long > zrank ( String key , T value ) { return zrank ( key , DefaultCodec . encode ( value ) ) ; } 
public long zrank ( String key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long resvalue = - 1 ; try { ValueResponse bulkResponse = ( ValueResponse ) his . serviceRequest ( Command . ZRANK , keybytes , member ) ; resvalue = bulkResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public long zrank ( String key , Number value ) hrows RedisException { return zrank ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > long zrank ( String key , T value ) hrows RedisException { return zrank ( key , DefaultCodec . encode ( value ) ) ; } 
public void estZrankStringByteArray ( ) hrows InterruptedException { cmd = Command . ZRANK . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZrankStringByteArray ( ) { cmd = Command . ZRANK . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , byte [ ] member ) ; public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , byte [ ] member ) ; public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZREVRANK , keybytes , member ) ; return new FutureLong ( futureResponse ) ; } 
public < T extends Serializable > Future < Long > zrevrank ( String key , T value ) { return zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public long zrevrank ( String key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long resvalue = - 1 ; try { ValueResponse bulkResponse = ( ValueResponse ) his . serviceRequest ( Command . ZREVRANK , keybytes , member ) ; resvalue = bulkResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public long zrevrank ( String key , String value ) hrows RedisException { return zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public long zrevrank ( String key , Number value ) hrows RedisException { return zrevrank ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > long zrevrank ( String key , T value ) hrows RedisException { return zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public void estZrevrankStringByteArray ( ) hrows InterruptedException { cmd = Command . ZREVRANK . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZrevrankStringByteArray ( ) { cmd = Command . ZREVRANK . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void set ( String key , Number numberValue ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) hrows RedisException ; public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) hrows RedisException ; public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) hrows RedisException ; public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) hrows RedisException ; public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureByteArray ( his . queueRequest ( Command . SUBSTR , keybytes , fromBytes , oBytes ) ) ; } 
public List < byte [ ] > lrange ( String key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . LRANGE , keybytes , fromBytes , oBytes ) ; multiBulkData = multiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public byte [ ] substr ( String key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; byte [ ] bulkData = null ; try { BulkResponse bulkResponse = ( BulkResponse ) his . serviceRequest ( Command . SUBSTR , keybytes , fromBytes , oBytes ) ; bulkData = bulkResponse . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public void estSubstr ( ) hrows InterruptedException { cmd = Command . SUBSTR . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public byte [ ] getset ( String key , String stringValue ) hrows RedisException ; public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > byte [ ] getset ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrangeSubset ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrevrangeSubset ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , byte [ ] member ) ; public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , byte [ ] member ) ; public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrangeSubset ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrevrangeSubset ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrangeSubset ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureZSetList ( his . queueRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Options . WITHSCORES . bytes ) ) ; } 
public Future < List < ZSetEntry > > zrevrangeSubset ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureZSetList ( his . queueRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Options . WITHSCORES . bytes ) ) ; } 
public List < ZSetEntry > get ( ) hrows InterruptedException , ExecutionException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( ) ; return convert ( resp . getMultiBulkData ( ) ) ; } 
public List < ZSetEntry > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( imeout , unit ) ; return convert ( resp . getMultiBulkData ( ) ) ; } 
private static final List < ZSetEntry > convert ( List < byte [ ] > mbulkdata ) { List < ZSetEntry > zset = null ; if ( mbulkdata . size ( ) > 0 ) { zset = new ArrayList < ZSetEntry > ( mbulkdata . size ( ) / 2 ) ; for ( int i = 0 ; i < mbulkdata . size ( ) ; i + = 2 ) { zset . add ( new ZSetEntryImpl ( mbulkdata . get ( i ) , mbulkdata . get ( i + 1 ) ) ) ; } } return zset ; } 
public List < ZSetEntry > zrangeSubset ( String key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < ZSetEntry > list = null ; try { MultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Options . WITHSCORES . bytes ) ; List < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; if ( null ! = bulkData ) { list = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; for ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { list . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return list ; } 
public List < ZSetEntry > zrevrangeSubset ( String key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < ZSetEntry > list = null ; try { MultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Options . WITHSCORES . bytes ) ; List < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; if ( null ! = bulkData ) { list = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; for ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { list . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return list ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd . requestType ) { case NO_ARG : } 
public void estZrangeWithscoresStringByteArray ( ) hrows InterruptedException { cmd = Command . ZRANGE$OPTS . code + " byte[] | " + Command . ZSCORE . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZrevrangeWithscoresStringByteArray ( ) hrows InterruptedException { cmd = Command . ZREVRANGE$OPTS . code + " byte[] | " + Command . ZSCORE . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZrangeWithscoresStringByteArray ( ) { cmd = Command . ZRANGE$OPTS . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZrevrangeWithscoresStringByteArray ( ) { cmd = Command . ZREVRANGE$OPTS . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public static void usingSyncClient ( ) { ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( " jredis " . getBytes ( ) ) . setDatabase ( 10 ) ; JRedis jredis = new JRedisClient ( spec ) ; System . out . println ( " ** using JRedis ** " ) ; useZRangeSubset ( jredis ) ; jredis . quit ( ) ; } 
public static void usingAsyncClient ( ) { ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( " jredis " . getBytes ( ) ) . setDatabase ( 10 ) ; JRedisFuture jredis = new JRedisAsynchClient ( spec ) ; System . out . println ( " n** using JRedisFuture ** " ) ; useZRangeSubset ( jredis ) ; jredis . quit ( ) ; 
private static void useZRangeSubset ( JRedisFuture jredis ) { jredis . flushdb ( ) ; for ( int i = 0 ; i < 100 ; i + + ) { jredis . zadd ( zset , rand . nextDouble ( ) , getRandomAsciiString ( rand , 8 ) ) ; } Future < List < ZSetEntry > > futureSubset = jredis . zrangeSubset ( zset , 0 , 10 ) ; Future < List < ZSetEntry > > futureRevSubset = jredis . zrevrangeSubset ( zset , 0 , 10 ) ; try { 
static final String getRandomAsciiString ( Random random , int length ) { StringBuilder builder = new StringBuilder ( length ) ; for ( int i = 0 ; i < length ; i + + ) { char c = ( char ) ( random . nextInt ( 126 - 33 ) + 33 ) ; builder . append ( c ) ; } return builder . oString ( ) ; } 
Sort BY ( String pattern ) ; Sort STORE (String destKey);} 
Sort GET ( String pattern ) ; Sort STORE (String destKey);} 
Sort LIMIT ( long from , long count ) ; Sort STORE (String destKey);} 
Sort DESC ( ) ; Sort STORE (String destKey);} 
public Sort ALPHA ( ) { alphaSpec = Command . Options . ALPHA . name ( ) + WSPAD ; return his ; } public Sort DESC ( ) { sortSpec = Command . Options . DESC . name ( ) + WSPAD ; return his ; } 
public Sort DESC ( ) { sortSpec = Command . Options . DESC . name ( ) + WSPAD ; return his ; } public Sort BY ( String pattern ) { bySpec = Command . Options . BY . name ( ) + WSPAD + pattern ; return his ; } 
public Sort BY ( String pattern ) { bySpec = Command . Options . BY . name ( ) + WSPAD + pattern ; return his ; } public Sort GET ( String pattern ) { getSpec = Command . Options . GET . name ( ) + WSPAD + pattern + " " ; return his ; } 
public Sort GET ( String pattern ) { getSpec = Command . Options . GET . name ( ) + WSPAD + pattern + " " ; return his ; } public Sort LIMIT ( long from , long o ) { 
public Sort LIMIT ( long from , long o ) { } 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrangeSubset ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrevrangeSubset ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyrank ( String setkey , double minRank , double maxRank ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcount ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , byte [ ] member ) ; public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , byte [ ] member ) ; public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrangeSubset ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrevrangeSubset ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcount ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcount ( String key , double minScore , double maxScore ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minScore ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxScore ) ; return new FutureLong ( his . queueRequest ( Command . ZCOUNT , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public long zcount ( String key , double minScore , double maxScore ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( minScore ) ; byte [ ] oBytes = Convert . oBytes ( maxScore ) ; long resp = Long . MIN_VALUE ; try { ValueResponse valueResponse = ( ValueResponse ) his . serviceRequest ( Command . ZCOUNT , keybytes , fromBytes , oBytes ) ; resp = valueResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public void estZcountStringByteArray ( ) hrows InterruptedException { cmd = Command . ZCOUNT . code + " byte[] | " + Command . ZADD . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estZcountStringByteArray ( ) { cmd = Command . ZCOUNT . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void mset ( KeyValueSet . Strings mappings ) hrows RedisException ; public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , byte [ ] value ) hrows RedisException ; public long append ( String key , String stringValue ) hrows RedisException ; public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , String stringValue ) hrows RedisException ; public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , byte [ ] value ) ; public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . APPEND , keybytes , value ) ; return new FutureLong ( futureResponse ) ; } 
public < T extends Serializable > Future < Long > append ( String key , T value ) { return append ( key , DefaultCodec . encode ( value ) ) ; } 
public long append ( String key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long resvalue = - 1 ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . APPEND , keybytes , value ) ; resvalue = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public long append ( String key , Number value ) hrows RedisException { return append ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > long append ( String key , T value ) hrows RedisException { return append ( key , DefaultCodec . encode ( value ) ) ; } 
public void estAppendStringString ( ) hrows InterruptedException { cmd = Command . APPEND . code + " | " + Command . GET . code + " String " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estAppendStringByteArray ( ) { cmd = Command . SET . code + " | " + Command . APPEND . code + " byte[] | " + Command . GET ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estAppendStringString ( ) { cmd = Command . SET . code + " | " + Command . APPEND . code + " String | " + Command . GET ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , byte [ ] value ) hrows RedisException ; public long append ( String key , String stringValue ) hrows RedisException ; public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , String stringValue ) hrows RedisException ; public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrangeSubset ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrevrangeSubset ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore , long offset , long count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String key , double minScore , double maxScore , long offset , long count ) hrows RedisException { byte [ ] keybytes = null ; byte [ ] bytes = new byte [ 0 ] ; ry { bytes = key . getBytes ( DefaultCodec . SUPPORTED_CHARSET_NAME ) ; } catch ( UnsupportedEncodingException e ) { hrow new IllegalStateException ( e ) ; TODO: handle } if ((keybytes = bytes) == null) throw new IllegalArgumentException("invalid key => [" + key + "]"); byte[] fromBytes = Convert.toBytes(minScore); byte[] toBytes = Convert.toBytes(maxScore); List<byte[]> multiBulkData = null; try { String limitSpec = "LIMIT " + offset + " " + count; MultiBulkResponse MultiBulkResponse = (MultiBulkResponse) this.serviceRequest( Command.ZRANGEBYSCORE$OPTS, keybytes, fromBytes, toBytes, limitSpec.getBytes()); multiBulkData = MultiBulkResponse.getMultiBulkData(); } catch (ClassCastException e) { throw new ProviderException("Expecting a MultiBulkResponse here => " + e.getLocalizedMessage(), e); } return multiBulkData; } 
public ConnectionSpec getSpec ( ) ; public Event (Connection src, Type type) { super(src, type); } public Event (Connection src, Type type, Object eventInfo) { super(src, type, eventInfo); }public enum Type {Established,Dropped,Faulted}}} 
public Modality getModality ( ) ; public Event (Connection src, Type type) { super(src, type); } public Event (Connection src, Type type, Object eventInfo) { super(src, type, eventInfo); }public enum Type {Established,Dropped,Faulted}}} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Event (Connection src, Type type) { super(src, type); } public Event (Connection src, Type type, Object eventInfo) { super(src, type, eventInfo); }public enum Type {Established,Dropped,Faulted}}} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; }} 
public void onEvent ( Connection . Event event ) ; } public Event ( Connection src , Type ype ) { super ( src , ype ) ; } public Event ( Connection src , Type ype , Object eventInfo ) { super ( src , ype , eventInfo ) ; } public enum Type { Established , Dropped , Faulted } } } 
protected abstract void setConnection ( Connection connection ) ; }} 
protected Connection createSynchConnection ( ConnectionSpec connectionSpec , boolean isShared , RedisVersion redisVersion ) { Connection synchConnection = null ; try { synchConnection = new SynchConnection ( connectionSpec , isShared , redisVersion ) ; Assert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } catch ( NotSupportedException e ) { Log . log ( " Can not support redis protocol '%s' " , redisVersion ) ; throw e ; } catch ( ProviderException e ) { Log . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; throw e ; } catch ( ClientRuntimeException e ) { String msg = e . getMessage ( ) + " nMake sure your server is running. " ; Log . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; setConnection ( new FaultedConnection ( connectionSpec , msg ) ) ; } return synchConnection ; } 
public static final List < String > oStr ( List < byte [ ] > bytearray ) { if ( null = = bytearray ) return null ; List < String > list = new ArrayList < String > ( bytearray . size ( ) ) ; for ( byte [ ] b : bytearray ) if ( null ! = b ) list . add ( oStr ( b ) ) ; else list . add ( null ) ; return list ; } 
public static final String oStr ( byte [ ] bytes ) { String str = null ; if ( null ! = bytes ) { try { str = new String ( bytes , SUPPORTED_CHARSET_NAME ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } } return str ; return new String(bytes, SUPPORTED_CHARSET); Java 1.6 only 
public static final List < Long > oLong ( List < byte [ ] > bytearray ) { if ( null = = bytearray ) return null ; List < Long > list = new ArrayList < Long > ( bytearray . size ( ) ) ; for ( byte [ ] b : bytearray ) list . add ( Convert . oLong ( b ) ) ; return list ; } 
public static final List < Double > oDouble ( List < byte [ ] > bytearray ) { if ( null = = bytearray ) return null ; List < Double > list = new ArrayList < Double > ( bytearray . size ( ) ) ; for ( byte [ ] b : bytearray ) list . add ( Convert . oDouble ( b ) ) ; return list ; } 
public static final < T extends Serializable > List < T > decode ( List < byte [ ] > byteList ) { if ( null = = byteList ) return null ; List < T > objectList = new ArrayList < T > ( byteList . size ( ) ) ; for ( byte [ ] bytes : byteList ) { if ( null ! = bytes ) { T object = ( T ) decode ( bytes ) ; objectList . add ( ( T ) object ) ; } else { objectList . add ( null ) ; } } return objectList ; } 
public void estSmembers ( ) { cmd = Command . SMEMBERS . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; String setkey = keys . get ( 0 ) ; for ( int i = 0 ; i < SMALL_CNT ; i + + ) assertTrue ( provider . sadd ( setkey , dataList . get ( i ) ) , " sadd of random element should be true " ) ; List < byte [ ] > members = null ; members = provider . smembers ( setkey ) ; assertTrue ( members . size ( ) = = SMALL_CNT ) ; provider.flushdb(); 
public synchronized Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException { if ( ! isConnected ( ) ) hrow new NotConnectedException ( " Not connected! " ) ; Request request = null ; Response response = null ; ResponseStatus status = null ; try { } 
final public String getMessage ( ) { StringBuffer buff = new StringBuffer ( ) ; String message = super . getMessage ( ) ; if ( null = = message ) buff . append ( " [BUG: null message] " ) ; else buff . append ( message ) ; Throwable cause = getCause ( ) ; if ( null ! = cause ) buff . append ( " cause: => [ " ) . append ( cause . getClass ( ) . getSimpleName ( ) ) . append ( " : " ) . append ( cause . getMessage ( ) ) . append ( " ] " ) ; return buff . oString ( ) ; } 
private final void checkStatus ( ) hrows ExecutionException { hrow new ExecutionException("Redis Exception on ["+cmd.name()+"] " + response.getStatus().message(), new RedisException(cmd, response.getStatus().message())); 
public synchronized Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException { if ( ! isConnected ( ) ) hrow new NotConnectedException ( " Not connected! " ) ; Request request = null ; Response response = null ; ResponseStatus status = null ; try { } 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String . . . keys ) { if ( null = = keys | | keys . length = = 0 ) hrow new IllegalArgumentException ( " no keys specified " ) ; byte [ ] keydata = null ; byte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; int i = 0 ; for ( String k : keys ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . MGET , keybytes ) ) ; } 
public List < byte [ ] > mget ( String . . . keys ) hrows RedisException { if ( null = = keys | | keys . length = = 0 ) hrow new IllegalArgumentException ( " no keys specified " ) ; byte [ ] keydata = null ; byte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; int i = 0 ; for ( String k : keys ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . MGET , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , byte [ ] value ) hrows RedisException ; public long append ( String key , String stringValue ) hrows RedisException ; public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , String stringValue ) hrows RedisException ; public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long del ( String . . . keys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , byte [ ] value ) ; public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > del ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > del ( String . . . keys ) { if ( null = = keys | | keys . length = = 0 ) hrow new IllegalArgumentException ( " no keys specified " ) ; byte [ ] keydata = null ; byte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; int i = 0 ; for ( String k : keys ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; keybytes [ i + + ] = keydata ; } Future < Response > futureResponse = his . queueRequest ( Command . DEL , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public long del ( String . . . keys ) hrows RedisException { if ( null = = keys | | keys . length = = 0 ) hrow new IllegalArgumentException ( " no keys specified " ) ; byte [ ] keydata = null ; byte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; int i = 0 ; for ( String k : keys ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; keybytes [ i + + ] = keydata ; } long resvalue = - 1 ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . DEL , keybytes ) ; resvalue = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public FutureStatus rpushx ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureStatus ( his . queueRequest ( Command . RPUSHX , keybytes , value ) ) ; } 
public FutureStatus rpushxafter ( String key , byte [ ] oldvalue , byte [ ] newvalue ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] bulk = new byte [ 3 ] [ ] ; bulk [ 0 ] = keybytes ; bulk [ 1 ] = oldvalue ; bulk [ 2 ] = newvalue ; return new FutureStatus ( his . queueRequest ( Command . RPUSHXAFTER , bulk ) ) ; } 
public FutureStatus ldelete ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureStatus ( his . queueRequest ( Command . LDELETE , keybytes , value ) ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd . requestType ) { case NO_ARG : } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd . requestType ) { case NO_ARG : } 
public FutureStatus lpushx ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureStatus ( his . queueRequest ( Command . LPUSHX , keybytes , value ) ) ; } 
public FutureStatus lpushxafter ( String key , byte [ ] oldvalue , byte [ ] newvalue ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] bulk = new byte [ 3 ] [ ] ; bulk [ 0 ] = keybytes ; bulk [ 1 ] = oldvalue ; bulk [ 2 ] = newvalue ; return new FutureStatus ( his . queueRequest ( Command . LPUSHXAFTER , bulk ) ) ; } 
protected final void disconnect ( ) hrows IllegalStateException { Assert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; socketClose ( ) ; isConnected = false ; if ( heartbeat ! = null ) { heartbeat . exit ( ) ; } notifyDisconnected ( ) ; Log.log("RedisConnection - disconnected"); 
private static final void _loginfo ( String format , Object . . . args ) { logger . log ( Level . INFO , String . format ( format , args ) ) ; } 
protected final void disconnect ( ) hrows IllegalStateException { Assert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; socketClose ( ) ; isConnected = false ; cleanup ( ) ; notifyDisconnected ( ) ; Log.log("RedisConnection - disconnected"); 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , byte [ ] value ) ; public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > del ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > rpush ( String listkey , byte [ ] value ) ; public Future < Long > rpush ( String listkey , String stringValue ) ; public Future < Long > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < Long > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > rpush ( String listkey , String stringValue ) ; public Future < Long > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < Long > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < Long > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lpush ( String listkey , byte [ ] value ) ; public Future < Long > lpush ( String listkey , String stringValue ) ; public Future < Long > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < Long > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lpush ( String listkey , String stringValue ) ; public Future < Long > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < Long > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < Long > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public FutureLong rpush ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureLong ( his . queueRequest ( Command . RPUSH , keybytes , value ) ) ; } 
public FutureLong rpushx ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureLong ( his . queueRequest ( Command . RPUSHX , keybytes , value ) ) ; } 
public FutureLong lpushx ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureLong ( his . queueRequest ( Command . LPUSHX , keybytes , value ) ) ; } 
public FutureLong linsert ( String key , boolean after , byte [ ] oldvalue , byte [ ] newvalue ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] bulk = new byte [ 3 ] [ ] ; bulk [ 0 ] = keybytes ; bulk [ 1 ] = ( after ? " AFTER " : " BEFORE " ) . getBytes ( ) ; bulk [ 2 ] = oldvalue ; bulk [ 3 ] = newvalue ; return new FutureLong ( his . queueRequest ( Command . LINSERT , bulk ) ) ; } 
public FutureLong linsertAfter ( String key , byte [ ] oldvalue , byte [ ] newvalue ) { return linsert ( key , rue , oldvalue , newvalue ) ; } 
public FutureLong linsertBefore ( String key , byte [ ] oldvalue , byte [ ] newvalue ) { return linsert ( key , false , oldvalue , newvalue ) ; } 
public FutureLong rpush ( String key , String value ) { } 
public < T extends Serializable > FutureLong rpush ( String key , T value ) { return rpush ( key , DefaultCodec . encode ( value ) ) ; } 
public FutureLong lpush ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureLong ( his . queueRequest ( Command . LPUSH , keybytes , value ) ) ; } 
public < T extends Serializable > FutureLong lpush ( String key , T value ) { return lpush ( key , DefaultCodec . encode ( value ) ) ; } 
Sort BY ( String pattern ) ; Sort STORE (String destKey);} 
Sort GET ( String pattern ) ; Sort STORE (String destKey);} 
public Sort GET ( String pattern ) { getSpec = Command . Options . GET . name ( ) + WSPAD + pattern + " " ; return his ; } public Sort LIMIT ( long from , long count ) { 
public Sort LIMIT ( long from , long count ) { if ( from < 0 ) hrow new ClientRuntimeException ( " from in LIMIT clause: " + from ) ; if ( count < = 0 ) hrow new ClientRuntimeException ( " count in LIMIT clause: " + from ) ; limitSpec = Command . Options . LIMIT . name ( ) + WSPAD + from + " " + count ; return his ; } 
protected final < FAULT extends RuntimeException > void assertDidRaiseRuntimeError ( Runnable est , Class < FAULT > errtype ) { boolean didRaiseError = false ; try { est . run ( ) ; } catch ( RuntimeException ) { 
public void estSort ( ) hrows InterruptedException { cmd = Command . SORT . code ; Log . log ( " TEST: %s command " , cmd ) ; final String setkey = " set-key " ; final String listkey = " list-key " ; try { provider . flushdb ( ) ; for ( int i = 0 ; i < MEDIUM_CNT ; i + + ) { provider . sadd ( setkey , stringList . get ( i ) ) ; provider . lpush ( listkey , stringList . get ( i ) ) ; } int cnt1 = MEDIUM_CNT , cnt2 = 9 , cnt3 = 1 ; Future < List < byte [ ] > > sortListResp1 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , cnt1 ) . DESC ( ) . execAsynch ( ) ; Future < List < byte [ ] > > sortListResp2 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 10 , cnt2 ) . DESC ( ) . execAsynch ( ) ; Future < List < byte [ ] > > sortListResp3 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( MEDIUM_CNT - 1 , cnt3 ) . DESC ( ) . execAsynch ( ) ; Future < List < byte [ ] > > sortSetResp = provider . sort ( setkey ) . ALPHA ( ) . LIMIT ( 0 , 555 ) . DESC ( ) . execAsynch ( ) ; try { assertEquals ( sortListResp1 . get ( ) . size ( ) , cnt1 , " expecting sort results of size MEDIUM_CNT " ) ; assertEquals ( sortListResp2 . get ( ) . size ( ) , cnt2 , " expecting sort results of size 9 " ) ; assertEquals ( sortListResp3 . get ( ) . size ( ) , cnt3 , " expecting sort results of size 1 " ) ; Log . log ( " TEST: SORTED LIST " ) ; for ( String s : oStr ( sortListResp1 . get ( ) ) ) System . out . format ( " [t.1] %s " , s ) ; Log . log ( " TEST: SORTED LIST " ) ; for ( String s : oStr ( sortListResp2 . get ( ) ) ) System . out . format ( " [t.1] %s " , s ) ; Log . log ( " TEST: SORTED LIST " ) ; for ( String s : oStr ( sortListResp3 . get ( ) ) ) System . out . format ( " [t.1] %s " , s ) ; Log . log ( " TEST: SORTED SET " ) ; for ( String s : oStr ( sortSetResp . get ( ) ) ) System . out . format ( " %s " , s ) ; } catch ( ExecutionException e ) { Throwable cause = e . getCause ( ) ; fail ( cmd + " ERROR => " + cause . getLocalizedMessage ( ) , e ) ; } } catch ( ClientRuntimeException e ) { fail ( cmd + " Runtime ERROR => " + e . getLocalizedMessage ( ) , e ) ; } 
public void run ( ) { try { provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , 0 ) . DESC ( ) . exec ( ) ; } catch ( Throwable ) { hrow new RuntimeException ( " " , ) ; } 
public void run ( ) { try { provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( - 1 , 1 ) . DESC ( ) . exec ( ) ; } catch ( Throwable ) { hrow new RuntimeException ( " " , ) ; } 
public void estSort ( ) { cmd = Command . SORT . code ; Log . log ( " TEST: %s command " , cmd ) ; final String setkey = " set-key " ; final String listkey = " list-key " ; try { provider . flushdb ( ) ; for ( int i = 0 ; i < MEDIUM_CNT ; i + + ) { provider . sadd ( setkey , stringList . get ( i ) ) ; provider . lpush ( listkey , stringList . get ( i ) ) ; } List < String > sorted = null ; Log . log ( " TEST: SORTED LIST [t.1] " ) ; sorted = oStr ( provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , MEDIUM_CNT ) . DESC ( ) . exec ( ) ) ; assertEquals ( sorted . size ( ) , MEDIUM_CNT , " expecting sort results of size MEDIUM_CNT " ) ; for ( String s : sorted ) System . out . format ( " [t.1]: %s " , s ) ; Log . log ( " TEST: SORTED LIST [t.2] " ) ; sorted = oStr ( provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 10 , 9 ) . DESC ( ) . exec ( ) ) ; assertEquals ( sorted . size ( ) , 9 , " expecting sort results of size 9 " ) ; for ( String s : sorted ) System . out . format ( " [t.2]: %s " , s ) ; Log . log ( " TEST: SORTED LIST [t.3] " ) ; sorted = oStr ( provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( MEDIUM_CNT - 1 , 1 ) . DESC ( ) . exec ( ) ) ; assertEquals ( sorted . size ( ) , 1 , " expecting sort results of size 1 " ) ; for ( String s : sorted ) System . out . format ( " [t.3]: %s " , s ) ; Log . log ( " TEST: SORTED SET " ) ; } 
public Sort ALPHA ( ) { alphaSpec = String . format ( " %s " , Command . Options . ALPHA . name ( ) ) ; return his ; } public Sort DESC ( ) { sortSpec = String . format ( " %s " , Command . Options . DESC . name ( ) ) ; return his ; } 
public Sort DESC ( ) { sortSpec = String . format ( " %s " , Command . Options . DESC . name ( ) ) ; return his ; } public Sort BY ( String pattern ) { bySpec = String . format ( " %s %s " , Command . Options . BY . name ( ) , pattern ) ; return his ; } 
public Sort BY ( String pattern ) { bySpec = String . format ( " %s %s " , Command . Options . BY . name ( ) , pattern ) ; return his ; } public Sort GET ( String pattern ) { getSpec = String . format ( " %s %s " , Command . Options . GET . name ( ) , pattern ) ; return his ; } 
public Sort GET ( String pattern ) { getSpec = String . format ( " %s %s " , Command . Options . GET . name ( ) , pattern ) ; return his ; } public Sort LIMIT ( long from , long count ) { 
public Sort LIMIT ( long from , long count ) { if ( from < 0 ) hrow new ClientRuntimeException ( " from in LIMIT clause: " + from ) ; if ( count < = 0 ) hrow new ClientRuntimeException ( " count in LIMIT clause: " + from ) ; limitSpec = String . format ( " %s %d %d " , Command . Options . LIMIT . name ( ) , from , count ) ; return his ; } 
public Protocol createProtocol ( Connection . Modality modality , String redisVersionId ) throws NotSupportedException , ClientRuntimeException , IllegalArgumentException { } 
public Protocol createProtocolHandler ( Modality modality , String redisVersion ) hrows NotSupportedException { return null ; } 
private static final void _log ( Category cat , String msg ) { } 
private static final void _loginfo ( String format , Object . . . args ) { } 
public Future < Long > keystolist ( String pattern , String listname ) { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( pattern ) ) = = null ) throw new IllegalArgumentException ( " null key. " ) ; byte [ ] listnamedata = null ; if ( ( listnamedata = getKeyBytes ( listname ) ) = = null ) throw new IllegalArgumentException ( " null list name. " ) ; return new FutureLong ( his . queueRequest ( Command . KEYSTOLIST , keydata , listnamedata ) ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd . requestType ) { case NO_ARG : } 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , byte [ ] value ) hrows RedisException ; public long append ( String key , String stringValue ) hrows RedisException ; public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , String stringValue ) hrows RedisException ; public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long del ( String . . . keys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrangeSubset ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrevrangeSubset ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyrank ( String setkey , long minRank , long maxRank ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , byte [ ] value ) ; public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > del ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , byte [ ] member ) ; public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , byte [ ] member ) ; public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrangeSubset ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrevrangeSubset ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcount ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyrank ( String setkey , long minRank , long maxRank ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyrank ( String key , long minRank , long maxRank ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minRank ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxRank ) ; return new FutureLong ( his . queueRequest ( Command . ZREMRANGEBYRANK , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public String randomkey ( ) hrows RedisException { String stringValue = null ; try { BulkResponse valResponse = ( BulkResponse ) his . serviceRequest ( Command . RANDOMKEY ) ; byte [ ] bulkData = valResponse . getBulkData ( ) ; if ( null ! = bulkData ) { stringValue = new String ( bulkData ) ; } } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return stringValue ; } 
public long zremrangebyrank ( String key , long minRank , long maxRank ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( minRank ) ; byte [ ] oBytes = Convert . oBytes ( maxRank ) ; long resp = Long . MIN_VALUE ; try { ValueResponse valueResponse = ( ValueResponse ) his . serviceRequest ( Command . ZREMRANGEBYRANK , keybytes , fromBytes , oBytes ) ; resp = valueResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public void estSmembers ( ) { cmd = Command . SMEMBERS . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; String setkey = keys . get ( 0 ) ; for ( int i = 0 ; i < SMALL_CNT ; i + + ) assertTrue ( provider . sadd ( setkey , dataList . get ( i ) ) , " sadd of random element should be true " ) ; List < byte [ ] > members = null ; members = provider . smembers ( setkey ) ; assertTrue ( members . size ( ) = = SMALL_CNT ) ; provider.flushdb(); 
public boolean supports ( ClusterType ype ) ; abstract protected void initializeModel();}} 
public boolean supportsReconfiguration ( ) ; abstract protected void initializeModel();}} 
public ClusterSpec getSpec ( ) ; abstract protected void initializeModel();}} 
public void addNode ( ClusterNodeSpec nodeSpec ) hrows IllegalArgumentException ; abstract protected void initializeModel();}} 
public void removeNode ( ClusterNodeSpec nodeSpec ) hrows IllegalArgumentException ; }} 
public ClusterNodeSpec getNodeForKey ( byte [ ] key ) ; }} 
public boolean addListener ( Listener modelListener ) ; abstract protected void initializeModel();}} 
public boolean removeListener ( Listener modelListener ) ; }} 
public void onEvent ( ClusterModel . Event event ) ; } }} 
final public void addNode ( ClusterNodeSpec nodeSpec ) throws IllegalArgumentException { if ( supportsReconfiguration ( ) ) { synchronized ( configLock ) { 
final public void removeNode ( ClusterNodeSpec nodeSpec ) hrows IllegalArgumentException { if ( supportsReconfiguration ( ) ) { if ( ! clusterSpec . getNodeSpecs ( ) . contains ( nodeSpec ) ) hrow new IllegalArgumentException ( " NodeSpec not part of cluster spec! " ) ; 
abstract protected boolean onNodeAddition ( ClusterNodeSpec newNode ) ; abstract protected void initializeModel ( ) ; } } 
abstract protected boolean onNodeRemoval ( ClusterNodeSpec newNode ) ; abstract protected void initializeModel ( ) ; } } 
public ConnectionSpec getConnectionSpec ( ) ; protected abstract String generateId () ;}} 
public String getId ( ) ; protected abstract String generateId () ;}} 
public String getKeyForReplicationInstance ( int rangeReplicationIndex ) ; }} 
final public boolean equals ( Object o ) { if ( null = = o ) hrow new IllegalArgumentException ( " null argument " ) ; ClusterNodeSpec = null ; try { = ( ClusterNodeSpec ) o ; } catch ( ClassCastException e ) { hrow new IllegalArgumentException ( " object is not a ClusterNodeSpec " ) ; } return his . getId ( ) . equals ( . getId ( ) ) ; } 
public boolean addAll ( Collection < ClusterNodeSpec > nodes ) { if ( nodes . contains ( null ) ) hrow new IllegalArgumentException ( " collection includes a null member " ) ; return nodeSpecs . addAll ( nodes ) ; } 
public boolean removeAll ( Collection < ClusterNodeSpec > nodes ) { if ( nodes . contains ( null ) ) hrow new IllegalArgumentException ( " collection includes a null member " ) ; return nodeSpecs . removeAll ( nodes ) ; } 
public boolean addNode ( ClusterNodeSpec nodeSpec ) { if ( null = = nodeSpec ) throw new IllegalArgumentException ( " null nodeSpec " ) ; return his . nodeSpecs . add ( nodeSpec ) ; } 
public boolean removeNode ( ClusterNodeSpec nodeSpec ) { if ( null = = nodeSpec ) throw new IllegalArgumentException ( " null nodeSpec " ) ; return nodeSpecs . remove ( nodeSpec ) ; } 
final public Set < ClusterNodeSpec > getNodeSpecs ( ) { Set < ClusterNodeSpec > set = new HashSet < ClusterNodeSpec > ( nodeSpecs . size ( ) ) ; for ( ClusterNodeSpec spec : nodeSpecs ) set . add ( spec ) ; return set ; } 
public ClusterSpec getClusterSpec ( ) ; public Collection < Command > getSupportedCommands ( ) ; } 
public ClusterModel getClusterModel ( ) ; public Collection < Command > getSupportedCommands ( ) ; } 
public boolean supports ( Command cmd ) ; public Collection < Command > getSupportedCommands ( ) ; } 
NodeMap getNodeMap ( ) ; }} 
abstract protected NodeMap newClusterNodeMap ( ) ; final public boolean supports (ClusterType type) { return type == ClusterType.CONSISTENT_HASH; }}} 
abstract protected void mapNodes ( ) ; final public boolean supports (ClusterType type) { return type == ClusterType.CONSISTENT_HASH; }}} 
abstract protected int replicationCount ( ) ; final public boolean supports (ClusterType type) { return type == ClusterType.CONSISTENT_HASH; }}} 
abstract protected void initializeComponents ( ) ; }} 
final protected void initializeModel ( ) { initializeComponents ( ) ; mapNodes(); } 
protected boolean onNodeAddition ( ClusterNodeSpec newNode ) { throw new RuntimeException ( " not implemented " ) ; } 
protected boolean onNodeRemoval ( ClusterNodeSpec newNode ) { throw new RuntimeException ( " not implemented " ) ; } 
abstract protected HashAlgorithm newHashAlgorithm ( ) ; }} 
final protected void initializeModel ( ) { hashAlgo = newHashAlgorithm ( ) ; Set < ClusterNodeSpec > nodeSpecs = clusterSpec . getNodeSpecs ( ) ; nodeCnt = nodeSpecs . size ( ) ; nodes = new ClusterNodeSpec [ nodeCnt ] ; nodes = nodeSpecs . oArray ( nodes ) ; } 
final protected boolean onNodeAddition ( ClusterNodeSpec newNode ) { throw new NotSupportedException ( " node addition " ) ; } 
final protected boolean onNodeRemoval ( ClusterNodeSpec newNode ) { throw new NotSupportedException ( " nodeRemoval " ) ; } 
protected String generateId ( ) { Formatter fmt = new Formatter ( ) ; fmt . format ( " %s:%05d " , this . connSpec . getAddress ( ) . getHostAddress ( ) , this . connSpec . getPort ( ) ) ; return fmt . oString ( ) ; } 
public String getKeyForReplicationInstance ( int rangeReplicationIndex ) { Formatter fmt = new Formatter ( ) ; fmt . format ( " %s[%d] " , his . id , rangeReplicationIndex ) ; return fmt . oString ( ) ; } 
public static ClusterSpec newSpecForRange ( ConnectionSpec emplateConnSpec , int firstPort , int lastPort ) { ClusterSpec spec = new DefaultClusterSpec ( ) ; for ( int i = firstPort ; i < = lastPort ; i + + ) { ConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( ) . setAddress ( emplateConnSpec . getAddress ( ) ) . setPort ( i ) . setDatabase ( emplateConnSpec . getDatabase ( ) ) . setCredentials ( emplateConnSpec . getCredentials ( ) ) ; ClusterNodeSpec nodeSpec = new DefaultClusterNodeSpec ( connSpec ) ; spec . addNode ( nodeSpec ) ; } return spec ; } 
final public ConnectionSpec getSpec ( ) { throw new NotSupportedException ( " Per specification -- see org.jredis.cluster.ClusterConnection's specification. " ) ; } 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException { byte [ ] key = verifyAndGetKeyForRequest ( cmd , args ) ; return getConnectionForKey ( key ) . queueRequest ( cmd , args ) ; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException { byte [ ] key = verifyAndGetKeyForRequest ( cmd , args ) ; return getConnectionForKey ( key ) . serviceRequest ( cmd , args ) ; } 
public void onEvent ( Connection . Event event ) { Connection conn = event . getSource ( ) ; if ( ! connections . containsKey ( conn ) ) { throw new ProviderException ( " ClusterConnection receiving events for unrelated connection! " ) ; } } 
final private byte [ ] verifyAndGetKeyForRequest ( Command cmd , byte [ ] . . . args ) { notNull ( args , " [BUG]: args for request is null! " , ProviderException . class ) ; isTrue ( args . length > 0 , " [BUG]: expecting at least 1 arg for the request (and a key at that) " , ProviderException . class ) ; isTrue ( supports ( cmd ) , cmd . name ( ) + " is not supported " , NotSupportedException . class ) ; return args [ 0 ] ; 
final protected void initialize ( ) hrows ClientRuntimeException , ProviderException { mapSupportedCommands ( ) ; initializeConnections ( ) ; initializeComponents ( ) ; } 
final private void mapSupportedCommands ( ) { switch (cmd.requestType){ 
abstract protected void initializeComponents ( ) ; protected Connection createSynchConnection ( ClusterNodeSpec nodeSpec ) { throw new ProviderException ( " Not implemented in the abstract base! " ) ; } } 
protected Connection createAsynchConnection ( ClusterNodeSpec nodeSpec ) { throw new ProviderException ( " Not implemented in the abstract base! " ) ; } 
protected Connection createSynchConnection ( ClusterNodeSpec nodeSpec ) { throw new ProviderException ( " Not implemented in the abstract base! " ) ; } 
protected void initializeComponents ( ) { } 
final public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException { throw new NotSupportedException ( " Not supported by abstract base class " ) ; } 
protected Connection createSynchConnection ( ClusterNodeSpec nodeSpec ) { Connection conn = null ; conn = new SynchConnection ( nodeSpec . getConnectionSpec ( ) , rue ) ; return conn ; } 
protected HashAlgorithm newHashAlgorithm ( ) { public long hash (byte[] kb) { 
public ClusterNodeSpec getNodeForKey ( byte [ ] key ) { int nodeIdx = ( int ) ( hashAlgo . hash ( key ) % nodeCnt ) ; return nodes [ nodeIdx ] ; } 
public ClusterNodeSpec getNodeForKey ( byte [ ] key ) { long hash = hashAlgo . hash ( key ) ; final ClusterNodeSpec rv ; if ( ! nodeMap . containsKey ( hash ) ) { } 
final protected int replicationCount ( ) { int nodeCnt = clusterSpec . getNodeSpecs ( ) . size ( ) ; return ( int ) ( Math . log ( nodeCnt ) * DEFAULT_REPLICATION_CONST ) ; } 
final protected void initializeComponents ( ) { hashAlgo = new KetamaHashProvider(); } 
private boolean mapNode ( ClusterNodeSpec node ) { } 
protected boolean onNodeAddition ( ClusterNodeSpec newNode ) { throw new ProviderException ( " [BUG] basic KetamaClusterModel does NOT support reconfiguration of nodes " ) ; } 
protected boolean onNodeRemoval ( ClusterNodeSpec newNode ) { throw new ProviderException ( " [BUG] basic KetamaClusterModel does NOT support reconfiguration of nodes " ) ; } 
public long hash ( byte [ ] b ) { if ( null = = b | | b . length = = 0 ) hrow new IllegalArgumentException ( ) ; return rv ; } 
public static byte [ ] computeMd5 ( byte [ ] b ) hrows ClientRuntimeException { if ( null = = b ) hrow new IllegalArgumentException ( " null input " ) ; if ( b . length = = 0 ) hrow new IllegalArgumentException ( " zero length input " ) ; MessageDigest md5 = null ; try { md5 = MessageDigest . getInstance ( " MD5 " ) ; md5 . reset ( ) ; md5 . update ( b ) ; } catch ( NoSuchAlgorithmException e ) { throw new ClientRuntimeException ( " MD5 Message Digest algorithm is not present in this JRE " , e ) ; } return md5 . digest ( ) ; } 
public static byte [ ] computeMd5 ( String s ) hrows ClientRuntimeException { if ( null = = s ) hrow new IllegalArgumentException ( " null input " ) ; return computeMd5 ( s . getBytes ( ) ) ; } 
public void metaTest ( ) { Log . log ( " [META] test the test suite assumptions! " ) ; ClusterType clusterType = getSupportedClusterType ( ) ; assertNotNull ( clusterType , " getSupportedClusterType " ) ; ClusterSpec estSpec = newClusterSpec ( ) ; assertNotNull ( estSpec , " newClusterSpec should not return null " ) ; assertEquals ( estSpec . getType ( ) , clusterType , " asserted supported cluster type and type from the newClusterSpec should be the same " ) ; ClusterModel model = newProviderInstance ( ) ; assertNotNull ( model , " newProviderInstance should not return null " ) ; } 
public void estClusterSpecPropertyOps ( ) { Log . log ( " est ClusterSpec accessors " ) ; } 
protected abstract ClusterNodeSpec newProviderInstance ( ConnectionSpec connectionSpec ) ; }} 
public void estIdentityContract ( ) { Log . log ( " Testing ClusterNodeSpec identity contract enforcement: [Object.equals() | Object.hashCode()] " ) ; int db = 10 ; int anotherDb = 2 ; ConnectionSpec node1Spec = DefaultConnectionSpec . newSpec ( " 127.0.0.1 " , 6379 , db , null ) ; ConnectionSpec node2Spec = DefaultConnectionSpec . newSpec ( " 127.0.0.1 " , 6379 , db , null ) ; ConnectionSpec node3Spec = DefaultConnectionSpec . newSpec ( " 127.0.0.1 " , 6379 , anotherDb , null ) ; ClusterNodeSpec node1 = newProviderInstance ( node1Spec ) ; ClusterNodeSpec node2 = newProviderInstance ( node2Spec ) ; ClusterNodeSpec node3 = newProviderInstance ( node3Spec ) ; assertTrue ( node1 . getId ( ) . equals ( node2 . getId ( ) ) , " ids should be identical " ) ; assertTrue ( node1 . hashCode ( ) = = node2 . hashCode ( ) , " hashCodes should be equal " ) ; assertTrue ( node1 . equals ( node2 ) , " nodes must be considered equivalent " ) ; assertTrue ( node2 . equals ( node1 ) , " nodes must be considered equivalent [transitive test] " ) ; } 
public void estIdGeneration ( ) { Log . log ( " Testing ClusterNodeSpec.getId() ... " ) ; Set < String > generatedIdSet = new HashSet < String > ( data . connSpecs . length ) ; Log . log ( " ... testing a cluster with member cnt: " + data . connSpecs . length ) ; for ( ConnectionSpec connSpec : data . connSpecs ) { ClusterNodeSpec nodeSpec = newProviderInstance ( connSpec ) ; 
public void estGetKeyForCHRangeInstance ( ) { int instanceCnt = 100 ; int nodeCnt = 100 ; Log . log ( " Testing CHRange key uqniueness for " + instanceCnt + " instances in the ring... this will take a while! (TODO: cnt should be a parameter!) " ) ; Set < String > chRangeKeys = new HashSet < String > ( nodeCnt * instanceCnt ) ; int = 0 ; for ( ConnectionSpec connSpec : data . connSpecs ) { ClusterNodeSpec nodeSpec = newProviderInstance ( connSpec ) ; 
protected abstract ClusterNodeSpec newNodeSpec ( ConnectionSpec connectionSpec ) ; }} 
public void estGetType ( ) { Log . log ( " Testing ClusterSpec.getType() " ) ; assertNotNull ( provider . getType ( ) , " getType() must never return null " ) ; } 
public void estSetType ( ) { Log . log ( " Testing ClusterSpec.setType() " ) ; } 
public void estAddAndRemoveAll ( ) { Log . log ( " Testing ClusterSpec addAll() | removeAll() " ) ; ClusterSpec clusterSpec = newProviderInstance ( ) ; Log . log ( " Test with cluster spec with %d node specs .. " , clusterSpec . getNodeSpecs ( ) . size ( ) ) ; Collection < ClusterNodeSpec > nodes = new HashSet < ClusterNodeSpec > ( ) ; for ( int i = 0 ; i < 10 ; i + + ) { nodes . add ( newNodeSpec ( data . connSpecs [ i ] ) ) ; } assertTrue ( clusterSpec . addAll ( nodes ) , " addAll should return true " ) ; assertFalse ( clusterSpec . addAll ( nodes ) , " dup addAll should return false " ) ; assertTrue ( clusterSpec . removeAll ( nodes ) , " removeAll should return true " ) ; assertFalse ( clusterSpec . removeAll ( nodes ) , " second removeAll should return false " ) ; 
public void estRemoveNodeSpec ( ) { Log . log ( " Testing ClusterSpec.addNodeSpec() " ) ; ClusterSpec clusterSpec = newProviderInstance ( ) ; for ( int i = 0 ; i < 10 ; i + + ) { ClusterNodeSpec nodeSpec = newNodeSpec ( data . connSpecs [ i ] ) ; assertTrue ( clusterSpec . addNode ( nodeSpec ) ) ; } for ( int i = 0 ; i < 10 ; i + + ) { ClusterNodeSpec nodeSpec = newNodeSpec ( data . connSpecs [ i ] ) ; 
public void estAddNodeSpec ( ) { Log . log ( " Testing ClusterSpec.addNodeSpec() " ) ; ClusterSpec clusterSpec = newProviderInstance ( ) ; ClusterNodeSpec nodeSpec = null ; nodeSpec = newNodeSpec ( data . connSpecs [ 0 ] ) ; assertTrue ( clusterSpec . addNode ( nodeSpec ) ) ; nodeSpec = newNodeSpec ( data . connSpecs [ 1 ] ) ; assertTrue ( clusterSpec . addNode ( nodeSpec ) ) ; } 
private final void estChainedResult ( ClusterSpec res , ClusterSpec expected ) { assertNotNull ( res , " fluent interface setters must return non null values " ) ; assertEquals ( res , expected , " setter result must be the same reference as the original " ) ; } 
static public String getRandomAsciiString ( int length ) { StringBuilder builder = new StringBuilder ( length ) ; for ( int i = 0 ; i < length ; i + + ) { char c = ( char ) ( random . nextInt ( 126 - 33 ) + 33 ) ; builder . append ( c ) ; } return builder . oString ( ) ; } 
static public String getRandomIPv$HostName ( ) { Formatter fmt = new Formatter ( ) ; fmt . format ( " %d.%d.%d.%d " , random . nextInt ( 255 ) , random . nextInt ( 255 ) , random . nextInt ( 255 ) , random . nextInt ( 255 ) ) ; return fmt . oString ( ) ; } 
static public InetAddress getInetAddressFor ( String hostName ) { InetAddress address = null ; try { address = InetAddress . getByName ( hostName ) ; } catch ( UnknownHostException e ) { fail ( " In suite setup for random address < " + hostName + " > " , e ) ; } return address ; } 
static public ConnectionSpec getConnectionSpecFor ( InetAddress address , int port , int db ) { ConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( ) . setAddress ( address ) . setPort ( port ) . setDatabase ( db ) ; return connSpec ; } 
protected abstract T newProviderInstance ( ) ; protected abstract Class < ? > getSpecificationClass ( ) ; } 
public void suiteParametersInit ( } 
protected ClusterModel newClusterModel ( ClusterSpec clusterSpec ) { ClusterModel model = null ; try { model = new BasicStaticHashCluster ( clusterSpec ) ; } catch ( RuntimeException e ) { Log . error ( " NOTE: propagating error > " + e . getLocalizedMessage ( ) ) ; throw e ; } return model ; } 
protected ClusterSpec newClusterSpec ( ) { ClusterSpec spec = new DefaultClusterSpec ( ) ; for ( int i = 0 ; i < 100 ; i + + ) { ClusterNodeSpec node = new DefaultClusterNodeSpec ( DefaultConnectionSpec . newSpec ( " localhost " , 6379 + i , 0 , null ) ) ; spec . addNode ( node ) ; } return spec ; } 
public void compatibilityTest ( ) { Log . log ( " Test provider support for Consistent Hashing " ) ; assertNotNull ( provider , " provider is null! " ) ; assertTrue ( provider . supports ( ClusterType . CONSISTENT_HASH ) , " A ConsistentHashCluster model must support Type.CONSISTENT_HASH " ) ; } 
protected ClusterModel newClusterModel ( ClusterSpec clusterSpec ) { ClusterModel model = null ; try { model = new KetamaClusterModel ( clusterSpec ) ; } catch ( RuntimeException e ) { Log . error ( " NOTE: propagating error > " + e . getLocalizedMessage ( ) ) ; throw e ; } return model ; } 
public void compatibilityTest ( ) { Log . log ( " Test provider conformance to static hashing requirements " ) ; assertNotNull ( provider , " provider is null! " ) ; if(!didRaiseEx) { fail("Provider failed to raise exception for removeNode()");} 
public void estStaticHash ( ) { Log . log ( " Basic nodemap test of Consistent Hashing cluster model " ) ; StaticHashCluster model = ( StaticHashCluster ) newProviderInstance ( ) ; assertNotNull ( model , " model should not be null " ) ; ClusterSpec spec = model . getSpec ( ) ; assertNotNull ( spec , " spec should not be null " ) ; } 
public void estHashByteArray ( ) { Log . log ( " Testing HashAlgorithm hash(byte[]) " ) ; HashAlgorithm hashAlgo = newProviderInstance ( ) ; try { int c = 2000 ; 
final protected ClusterNodeSpec newProviderInstance ( ) { return new DefaultClusterNodeSpec ( DefaultConnectionSpec . newSpec ( ) ) ; } 
final protected ClusterNodeSpec newProviderInstance ( ConnectionSpec connectionSpec ) { return new DefaultClusterNodeSpec ( connectionSpec ) ; } 
protected ClusterNodeSpec newNodeSpec ( ConnectionSpec connectionSpec ) { return new DefaultClusterNodeSpec ( connectionSpec ) ; } 
public void estComputeMd5 ( ) { Log . log ( " Testing Crptographic function computeMd5(byte[]) " ) ; try { byte [ ] data1 = data . getRandomBytes ( 255 ) ; 
public long onMeasure ( long delta ) { avg = ( ( avg * ) + delta ) / ( + + ) ; if ( delta > max ) max = delta ; if ( delta < min ) min = delta ; return ( long ) avg ; } 
protected final InputStream newInputStream ( InputStream socketInputStream ) hrows IllegalArgumentException { InputStream in = super . newInputStream ( socketInputStream ) ; if ( ! ( in instanceof FastBufferedInputStream ) ) { Log . log ( String . format ( " WARN: input was: %s " , in . getClass ( ) . getCanonicalName ( ) ) ) ; in = new FastBufferedInputStream ( in , spec . getSocketProperty ( SocketProperty . SO_RCVBUF ) ) ; } return in ; } 
public static final < T extends Serializable > byte [ ] encode ( T obj ) { byte [ ] bytes = null ; try { ByteArrayOutputStream bout = new ByteArrayOutputStream ( ) ; ObjectOutputStream out = new ObjectOutputStream ( bout ) ; out . writeObject ( obj ) ; bytes = bout . oByteArray ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; throw new RuntimeException ( " Error serializing object " + obj + " => " + e ) ; } return bytes ; } 
private final int getMoreBytes ( int len ) hrows IOException { } 
public static final void log ( String msg ) { log ( msg , ( Object [ ] ) null ) ; } public static final void log ( String format , Object . . . args ) { 
public static final void debug ( String msg ) { debug ( msg , ( Object [ ] ) null ) ; } public static final void debug ( String format , Object . . . args ) { 
public static final void error ( String msg ) { _error ( Category . ERROR , msg ) ; } public static final void error ( String msg , Object . . . args ) { _error ( Category . ERROR , msg , args ) ; } 
public static final void problem ( String msg ) { _error ( Category . PROBLEM , msg ) ; } public static final void problem ( String msg , Object . . . args ) { _error ( Category . PROBLEM , msg , args ) ; } 
public static final void bug ( String msg ) { _error ( Category . BUG , msg ) ; } public static final void bug ( String msg , Object . . . args ) { _error ( Category . BUG , msg , args ) ; } 
private static final void _error ( Category cat , String msg , Object . . . args ) { msg = String . format ( msg , args ) ; if ( cat . equals ( Category . ERROR ) ) logger . error ( String . format ( " %s " , msg ) ) ; 
public List < byte [ ] > exec ( ) hrows IllegalStateException , RedisException ; public Future < List < byte [ ] > > execAsynch ( ) ; public static class Support { public static long unpackValue ( List < byte [ ] > queryResult ) { if ( null = = queryResult ) hrow new ClientRuntimeException ( " queryResult is null " ) ; if ( queryResult . size ( ) < 1 ) hrow new ClientRuntimeException ( " queryResult must have at least 1 entry " ) ; return Long . parseLong ( new String ( queryResult . get ( 0 ) ) ) ; } } } 
public Future < List < byte [ ] > > execAsynch ( ) ; public static class Support { public static long unpackValue ( List < byte [ ] > queryResult ) { if ( null = = queryResult ) hrow new ClientRuntimeException ( " queryResult is null " ) ; if ( queryResult . size ( ) < 1 ) hrow new ClientRuntimeException ( " queryResult must have at least 1 entry " ) ; return Long . parseLong ( new String ( queryResult . get ( 0 ) ) ) ; } } } 
public static long unpackValue ( List < byte [ ] > queryResult ) { if ( null = = queryResult ) hrow new ClientRuntimeException ( " queryResult is null " ) ; if ( queryResult . size ( ) < 1 ) hrow new ClientRuntimeException ( " queryResult must have at least 1 entry " ) ; return Long . parseLong ( new String ( queryResult . get ( 0 ) ) ) ; } 
Sort BY ( String pattern ) ; Sort STORE ( String destKey ) ; } 
Sort GET ( String pattern ) ; Sort STORE ( String destKey ) ; } 
Sort LIMIT ( long from , long count ) ; Sort STORE ( String destKey ) ; } 
Sort DESC ( ) ; Sort STORE ( String destKey ) ; } 
Sort ALPHA ( ) ; Sort STORE ( String destKey ) ; } 
public Sort sort ( final String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisFutureSupport client = his ; Sort sortQuery = new SortSupport ( key , keybytes ) { } 
protected Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) { Future < Response > fResp = client . queueRequest ( Command . SORT$STORE , keyBytes , sortSpecBytes ) ; new FutureLong ( fResp ) ; return new FutureSortStoreResp ( fResp ) ; } 
protected List < byte [ ] > execSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) { throw new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } 
public List < byte [ ] > get ( ) hrows InterruptedException , ExecutionException { ValueResponse resp = ( ValueResponse ) pendingRequest . get ( ) ; return packValueResult ( resp . getLongValue ( ) ) ; } 
public List < byte [ ] > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse resp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return packValueResult ( resp . getLongValue ( ) ) ; } 
private static List < byte [ ] > packValueResult ( long number ) { List < byte [ ] > list = new ArrayList < byte [ ] > ( 1 ) ; list . add ( Convert . oBytes ( number ) ) ; return list ; } 
public Sort sort ( final String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisSupport client = his ; Sort sortQuery = new SortSupport ( key , keybytes ) { } 
protected List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) throws IllegalStateException , RedisException { List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) client . serviceRequest ( Command . SORT , keyBytes , sortSpecBytes ) ; multiBulkData = multiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
protected List < byte [ ] > execSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) throws IllegalStateException , RedisException { List < byte [ ] > multiBulkData = new ArrayList < byte [ ] > ( 1 ) ; try { ValueResponse valueResp = ( ValueResponse ) client . serviceRequest ( Command . SORT$STORE , keyBytes , sortSpecBytes ) ; long resSize = valueResp . getLongValue ( ) ; multiBulkData . add ( Convert . oBytes ( resSize ) ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
 protected Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) { throw new IllegalStateException ( " JRedis does not support asynchronous sort. " ) ; } 
public Sort ALPHA ( ) { alphaSpec = String . format ( " %s%s " , Command . Options . ALPHA . name ( ) , PAD ) ; return his ; } public Sort DESC ( ) { sortSpec = String . format ( " %s%s " , Command . Options . DESC . name ( ) , PAD ) ; return his ; } 
public Sort DESC ( ) { sortSpec = String . format ( " %s%s " , Command . Options . DESC . name ( ) , PAD ) ; return his ; } public Sort BY ( String pattern ) { bySpec = String . format ( " %s %s%s " , Command . Options . BY . name ( ) , pattern , PAD ) ; return his ; } 
public Sort BY ( String pattern ) { bySpec = String . format ( " %s %s%s " , Command . Options . BY . name ( ) , pattern , PAD ) ; return his ; } public Sort GET ( String pattern ) { getSpec = String . format ( " %s %s%s " , Command . Options . GET . name ( ) , pattern , PAD ) ; return his ; } 
public Sort GET ( String pattern ) { getSpec = String . format ( " %s %s%s " , Command . Options . GET . name ( ) , pattern , PAD ) ; return his ; } public Sort LIMIT ( long from , long count ) { 
public Sort LIMIT ( long from , long count ) { if ( from < 0 ) hrow new ClientRuntimeException ( " from in LIMIT clause: " + from ) ; if ( count < = 0 ) hrow new ClientRuntimeException ( " count in LIMIT clause: " + from ) ; limitSpec = String . format ( " %s %d %d%s " , Command . Options . LIMIT . name ( ) , from , count , PAD ) ; return his ; } 
public Sort STORE ( String destKey ) { Assert . notNull ( destKey , " deskKey is null " , ClientRuntimeException . class ) ; } 
public List < byte [ ] > exec ( ) hrows IllegalStateException , RedisException { System . out . format ( " sort spec: [%S] " , new String ( getSortSpec ( ) ) ) ; List < byte [ ] > res = null ; if ( ! stores ) res = execSort ( keyBytes , getSortSpec ( ) ) ; else res = execSortStore ( keyBytes , getSortSpec ( ) ) ; return res ; } 
public Future < List < byte [ ] > > execAsynch ( ) { System . out . format ( " sort spec: [%S] " , new String ( getSortSpec ( ) ) ) ; Future < List < byte [ ] > > res = null ; if ( ! stores ) res = execAsynchSort ( keyBytes , getSortSpec ( ) ) ; else res = execAsynchSortStore ( keyBytes , getSortSpec ( ) ) ; return res ; } 
protected abstract List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) hrows IllegalStateException , RedisException ; protected abstract List < byte [ ] > execSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) hrows IllegalStateException , RedisException ; protected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; protected abstract Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; } 
protected abstract List < byte [ ] > execSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) hrows IllegalStateException , RedisException ; protected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; protected abstract Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; } 
protected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; protected abstract Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; } 
public void estSort ( ) hrows InterruptedException { cmd = Command . SORT . code ; Log . log ( " TEST: %s command " , cmd ) ; final String setkey = " set-key " ; final String listkey = " list-key " ; try { provider . flushdb ( ) ; for ( int i = 0 ; i < MEDIUM_CNT ; i + + ) { provider . sadd ( setkey , stringList . get ( i ) ) ; provider . lpush ( listkey , stringList . get ( i ) ) ; } int cnt1 = MEDIUM_CNT , cnt2 = 9 , cnt3 = 1 ; Future < List < byte [ ] > > sortListResp1 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , cnt1 ) . DESC ( ) . execAsynch ( ) ; Future < List < byte [ ] > > sortListResp2 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 10 , cnt2 ) . DESC ( ) . execAsynch ( ) ; Future < List < byte [ ] > > sortListResp3 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( MEDIUM_CNT - 1 , cnt3 ) . DESC ( ) . execAsynch ( ) ; Future < List < byte [ ] > > sortSetResp = provider . sort ( setkey ) . ALPHA ( ) . LIMIT ( 0 , 555 ) . DESC ( ) . execAsynch ( ) ; try { assertEquals ( sortListResp1 . get ( ) . size ( ) , cnt1 , " expecting sort results of size MEDIUM_CNT " ) ; assertEquals ( sortListResp2 . get ( ) . size ( ) , cnt2 , " expecting sort results of size 9 " ) ; assertEquals ( sortListResp3 . get ( ) . size ( ) , cnt3 , " expecting sort results of size 1 " ) ; Log . log ( " TEST: SORTED LIST " ) ; for ( String s : oStr ( sortListResp1 . get ( ) ) ) System . out . format ( " [t.1] %s " , s ) ; Log . log ( " TEST: SORTED LIST " ) ; for ( String s : oStr ( sortListResp2 . get ( ) ) ) System . out . format ( " [t.1] %s " , s ) ; Log . log ( " TEST: SORTED LIST " ) ; for ( String s : oStr ( sortListResp3 . get ( ) ) ) System . out . format ( " [t.1] %s " , s ) ; Log . log ( " TEST: SORTED SET " ) ; for ( String s : oStr ( sortSetResp . get ( ) ) ) System . out . format ( " %s " , s ) ; String destKey = String . format ( " %s_store " , listkey ) ; List < byte [ ] > ssres = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , MEDIUM_CNT ) . DESC ( ) . STORE ( destKey ) . execAsynch ( ) . get ( ) ; assertNotNull ( ssres , " result of srot with STORE should be non-null " ) ; assertEquals ( ssres . size ( ) , 1 , " result of sort with STORE should be a list of single entry (the stored list's size) " ) ; long sortedListSize = Query . Support . unpackValue ( ssres ) ; assertEquals ( sortedListSize , MEDIUM_CNT ) ; RedisType ype = provider . ype ( destKey ) . get ( ) ; assertEquals ( ype , RedisType . list , " dest key of SORT .. STORE should be a LIST " ) ; long sslistSize = provider . llen ( destKey ) . get ( ) ; assertEquals ( sslistSize , sortedListSize , " result of SORT ... STORE and LLEN of destkey list should be same " ) ; } catch ( ExecutionException e ) { Throwable cause = e . getCause ( ) ; fail ( cmd + " ERROR => " + cause . getLocalizedMessage ( ) , e ) ; } } catch ( ClientRuntimeException e ) { fail ( cmd + " Runtime ERROR => " + e . getLocalizedMessage ( ) , e ) ; } 
public void estSort ( ) { cmd = Command . SORT . code ; Log . log ( " TEST: %s command " , cmd ) ; final String setkey = " set-key " ; final String listkey = " list-key " ; try { provider . flushdb ( ) ; for ( int i = 0 ; i < MEDIUM_CNT ; i + + ) { provider . sadd ( setkey , stringList . get ( i ) ) ; provider . lpush ( listkey , stringList . get ( i ) ) ; } List < String > sorted = null ; Log . log ( " TEST: SORTED LIST [t.1] " ) ; sorted = oStr ( provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , MEDIUM_CNT ) . DESC ( ) . exec ( ) ) ; assertEquals ( sorted . size ( ) , MEDIUM_CNT , " expecting sort results of size MEDIUM_CNT " ) ; for ( String s : sorted ) System . out . format ( " [t.1]: %s " , s ) ; String destKey = String . format ( " %s_store " , listkey ) ; List < byte [ ] > ssres = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , MEDIUM_CNT ) . DESC ( ) . STORE ( destKey ) . exec ( ) ; assertNotNull ( ssres , " result of srot with STORE should be non-null " ) ; assertEquals ( ssres . size ( ) , 1 , " result of sort with STORE should be a list of single entry (the stored list's size) " ) ; long sortedListSize = Query . Support . unpackValue ( ssres ) ; assertEquals ( sortedListSize , MEDIUM_CNT ) ; RedisType ype = provider . ype ( destKey ) ; assertEquals ( ype , RedisType . list , " dest key of SORT .. STORE should be a LIST " ) ; long sslistSize = provider . llen ( destKey ) ; assertEquals ( sslistSize , sortedListSize , " result of SORT ... STORE and LLEN of destkey list should be same " ) ; Log . log ( " TEST: SORTED LIST [t.2] " ) ; sorted = oStr ( provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 10 , 9 ) . DESC ( ) . exec ( ) ) ; assertEquals ( sorted . size ( ) , 9 , " expecting sort results of size 9 " ) ; for ( String s : sorted ) System . out . format ( " [t.2]: %s " , s ) ; Log . log ( " TEST: SORTED LIST [t.3] " ) ; sorted = oStr ( provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( MEDIUM_CNT - 1 , 1 ) . DESC ( ) . exec ( ) ) ; assertEquals ( sorted . size ( ) , 1 , " expecting sort results of size 1 " ) ; for ( String s : sorted ) System . out . format ( " [t.3]: %s " , s ) ; Log . log ( " TEST: SORTED SET " ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd . requestType ) { case NO_ARG : } 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , byte [ ] value ) hrows RedisException ; public long append ( String key , String stringValue ) hrows RedisException ; public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , String stringValue ) hrows RedisException ; public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long del ( String . . . keys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrangeSubset ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , byte [ ] value ) ; public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > del ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > ype ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int tlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > tl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , byte [ ] member ) ; public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , byte [ ] member ) ; public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrangeSubset ( String setkey , long from , long o ) ; public Future<ObjectInfo> debug (String key);} 
static final public int bitset ( Flag . . . flags ) { int bitset = OPAQUE_BITMASK ; for ( Flag f : flags ) bitset = bitset | f . bitmask ; return bitset ; } 
protected final < T extends RuntimeException > void assertDidRaiseRuntimeError ( Runnable est , Class < T > errtype ) { boolean didRaiseError = false ; try { est . run ( ) ; } catch ( RuntimeException ) { 
public void estCommandSemanticsRequestType ( ) { log . info ( " TEST: Command sematics - RequestType " ) ; for ( Command c : Command . values ( ) ) { assertTrue ( new String ( c . bytes ) . indexOf ( Command . OPTCODE ) = = - 1 , " Command bytes must not include control characters. " ) ; 
public Future < List < ZSetEntry > > zrangeSubset ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureZSetList ( his . queueRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public Future < List < ZSetEntry > > zrevrangeSubset ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureZSetList ( his . queueRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public List < ZSetEntry > zrangeSubset ( String key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < ZSetEntry > list = null ; try { MultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Option . WITHSCORES . bytes ) ; List < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; if ( null ! = bulkData ) { list = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; for ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { list . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return list ; } 
public List < ZSetEntry > zrevrangeSubset ( String key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < ZSetEntry > list = null ; try { MultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Option . WITHSCORES . bytes ) ; List < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; if ( null ! = bulkData ) { list = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; for ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { list . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return list ; } 
public Sort ALPHA ( ) { alphaSpec = String . format ( " %s%s " , Command . Option . ALPHA . name ( ) , PAD ) ; return his ; } public Sort DESC ( ) { sortSpec = String . format ( " %s%s " , Command . Option . DESC . name ( ) , PAD ) ; return his ; } 
public Sort DESC ( ) { sortSpec = String . format ( " %s%s " , Command . Option . DESC . name ( ) , PAD ) ; return his ; } public Sort BY ( String pattern ) { bySpec = String . format ( " %s %s%s " , Command . Option . BY . name ( ) , pattern , PAD ) ; return his ; } 
public Sort BY ( String pattern ) { bySpec = String . format ( " %s %s%s " , Command . Option . BY . name ( ) , pattern , PAD ) ; return his ; } public Sort GET ( String pattern ) { getSpec = String . format ( " %s %s%s " , Command . Option . GET . name ( ) , pattern , PAD ) ; return his ; } 
public Sort GET ( String pattern ) { getSpec = String . format ( " %s %s%s " , Command . Option . GET . name ( ) , pattern , PAD ) ; return his ; } public Sort LIMIT ( long from , long count ) { 
public Sort LIMIT ( long from , long count ) { if ( from < 0 ) hrow new ClientRuntimeException ( " from in LIMIT clause: " + from ) ; if ( count < = 0 ) hrow new ClientRuntimeException ( " count in LIMIT clause: " + from ) ; limitSpec = String . format ( " %s %d %d%s " , Command . Option . LIMIT . name ( ) , from , count , PAD ) ; return his ; } 
public Sort STORE ( String destKey ) { Assert . notNull ( destKey , " deskKey is null " , ClientRuntimeException . class ) ; } 
final public ConnectionSpec setAddress ( InetAddress address ) { this . address = address ; return his ; } 
final public ConnectionSpec setCredentials ( byte [ ] credentials ) { this . credentials = credentials ; return his ; } 
final public ConnectionSpec setDatabase ( int database ) { this . database = database ; return his ; } 
final public ConnectionSpec setReconnectCnt ( int reconnectCnt ) { this . reconnectCnt = reconnectCnt ; return his ; } 
private final void initialize ( ) { connPoolAccess = new Semaphore ( connCount ) ; conns = new Connection [ connCount ] ; connInUse = new boolean [ connCount ] ; Connection conn = null ; connectionSpec . setConnectionFlag ( ConnectionFlag . RELIABLE , rue ) ; for ( int i = 0 ; i < connCount ; i + + ) { try { 
protected Protocol newProtocolHandler ( ) { return spec . getConnectionFlag ( ConnectionFlag . SHARED ) ? new ConcurrentSynchProtocol ( ) : new SynchProtocol ( ) ; TODO: rewire it to get it from the ProtocolManager } 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
protected void initializeComponents ( ) { spec . setConnectionFlag ( ConnectionFlag . RELIABLE , rue ) ; spec . setConnectionFlag ( ConnectionFlag . PIPELINE , rue ) ; spec . setConnectionFlag ( ConnectionFlag . SHARED , rue ) ; super . initializeComponents ( ) ; serviceLock = new Object ( ) ; isActive = new AtomicBoolean ( false ) ; connectionEstablished = new CountDownLatch ( 1 ) ; pendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; respHandler = new ResponseHandler ( ) ; respHandlerThread = new Thread ( respHandler , " response-handler " ) ; respHandlerThread . start ( ) ; isActive . set ( false ) ; } 
public ConnectionSpec getSpec ( ) ; public enum Type {Established,Dropped,Faulted}}} 
public Modality getModality ( ) ; public enum Type {Established,Dropped,Faulted}}} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public enum Type {Established,Dropped,Faulted}}} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; }} 
public void onEvent ( Connection . Event event ) ; } public enum Type { Established , Dropped , Faulted } } } 
public ConnectionSpec getSpec ( ) ; public enum Type {Established,Dropped,Faulted}}} 
public Modality getModality ( ) ; public enum Type {Established,Dropped,Faulted}}} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public enum Type {Established,Dropped,Faulted}}} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; }} 
 public boolean addListener ( Listener connListener ) ; public enum Type {Established,Dropped,Faulted}}} 
public boolean removeListener ( Listener connListener ) ; }} 
final public boolean addListener ( Listener connListener ) { throw new NotSupportedException ( " Events not supported " ) ; } 
final public boolean removeListener ( Listener connListener ) { throw new NotSupportedException ( " Events not supported " ) ; } 
public ConnectionSpec getSpec ( ) ; SHUTDOWN}}} 
public Modality getModality ( ) ; SHUTDOWN}}} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; SHUTDOWN}}} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; }} 
 public boolean addListener ( Listener connListener ) ; SHUTDOWN}}} 
public boolean removeListener ( Listener connListener ) ; }} 
public void onEvent ( Connection . Event event ) ; } SHUTDOWN } } } 
protected void notifyConnected ( ) { notifyListeners(new Event(this, Type.CONNECTED)); } 
protected void notifyDisconnected ( ) { notifyListeners(new Event(this, Type.DISCONNECTED)); } 
protected final void onConnectionFault ( String fault , boolean raiseEx ) hrows ClientRuntimeException { notifyFaulted ( fault ) ; Log . problem ( " Conn FAULT: %s - %s " , fault , his ) ; if ( raiseEx ) throw new ClientRuntimeException ( fault ) ; 
protected final void connect ( ) hrows IllegalStateException , ClientRuntimeException { } 
protected final void disconnect ( ) hrows IllegalStateException { Assert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; socketClose ( ) ; isConnected = false ; notifyDisconnected ( ) ; Log . debug ( " DISCONNECTED | conn: %s " , oString ( ) ) ; } 
public String oString ( ) { return String.format("Connection: %-12s %s:%d db:%d | %s@%d", getModality().name().toUpperCase(), spec.getAddress(), spec.getPort(), spec.getDatabase(), getClass().getSimpleName(), hashCode()); } 
public void run ( ) { } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Modality getModality ( ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
private final void initialize ( ) { connPoolAccess = new Semaphore ( connCount ) ; conns = new Connection [ connCount ] ; connInUse = new boolean [ connCount ] ; Connection conn = null ; connectionSpec . setConnectionFlag ( Connection . Flag . RELIABLE , rue ) ; for ( int i = 0 ; i < connCount ; i + + ) { try { 
protected Protocol newProtocolHandler ( ) { return spec . getConnectionFlag ( Connection . Flag . SHARED ) ? new ConcurrentSynchProtocol ( ) : new SynchProtocol ( ) ; TODO: rewire it to get it from the ProtocolManager } 
protected void initializeComponents ( ) { spec . setConnectionFlag ( Connection . Flag . RELIABLE , rue ) ; spec . setConnectionFlag ( Connection . Flag . PIPELINE , rue ) ; spec . setConnectionFlag ( Connection . Flag . SHARED , rue ) ; super . initializeComponents ( ) ; serviceLock = new Object ( ) ; isActive = new AtomicBoolean ( false ) ; connectionEstablished = new CountDownLatch ( 1 ) ; pendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; respHandler = new ResponseHandler ( ) ; respHandlerThread = new Thread ( respHandler , " response-handler " ) ; respHandlerThread . start ( ) ; isActive . set ( false ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; PendingRequest pendingResponse = null ; synchronized ( serviceLock ) { return pendingResponse; } 
public static void main ( String [ ] args ) { final ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) ; spec . setCredentials ( " jredis " . getBytes ( ) ) ; spec . setDatabase ( 13 ) ; spec . setSocketProperty ( SocketProperty . SO_RCVBUF , 1024 * 24 ) ; spec . setSocketProperty ( SocketProperty . SO_SNDBUF , 1024 * 24 ) ; usingSynchSemantics ( spec ) ; final boolean forever = rue ; runJRedisPipelineSET ( spec , 100000 , 3 , forever ) ; } 
protected final void connect ( ) hrows IllegalStateException , ClientRuntimeException { } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Modality getModality ( ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
static final public int bitset ( int bitset , Flag . . . flags ) { for ( Flag f : flags ) bitset = bitset | f . bitmask ; return bitset ; } 
static final public int bitclear ( int bitset , Flag . . . flags ) { for ( Flag f : flags ) bitset = bitset ^ f . bitmask ; return bitset ; } 
final public Integer getSocketProperty ( Connection . Socket . Property property ) { return socketProperties . get ( property ) ; } 
final public boolean getConnectionFlag ( Connection . Flag flag ) { return Connection . Flag . isSet ( connectionFlagBitmask , flag ) ; } 
protected final InputStream newInputStream ( InputStream socketInputStream ) hrows IllegalArgumentException { InputStream in = super . newInputStream ( socketInputStream ) ; if ( ! ( in instanceof FastBufferedInputStream ) ) { Log . log ( String . format ( " WARN: input was: %s " , in . getClass ( ) . getCanonicalName ( ) ) ) ; in = new FastBufferedInputStream ( in , spec . getSocketProperty ( Connection . Socket . Property . SO_RCVBUF ) ) ; } return in ; } 
private final void newSocketConnect ( ) throws IOException { socket = new java . net . Socket ( ) ; socket . setKeepAlive ( spec . getSocketFlag ( Connection . Socket . Flag . SO_KEEP_ALIVE ) ) ; socket . setPerformancePreferences ( spec . getSocketProperty ( SO_PREF_CONN_TIME ) , spec . getSocketProperty ( SO_PREF_LATENCY ) , spec . getSocketProperty ( SO_PREF_BANDWIDTH ) ) ; socket . setSoTimeout ( spec . getSocketProperty ( SO_TIMEOUT ) ) ; if ( socket . getSendBufferSize ( ) < spec . getSocketProperty ( SO_SNDBUF ) ) socket . setSendBufferSize ( spec . getSocketProperty ( SO_SNDBUF ) ) ; if ( socket . getReceiveBufferSize ( ) < spec . getSocketProperty ( SO_RCVBUF ) ) socket . setReceiveBufferSize ( spec . getSocketProperty ( SO_RCVBUF ) ) ; socket . connect ( socketAddress ) ; 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
protected final InputStream newInputStream ( InputStream socketInputStream ) hrows IllegalArgumentException { InputStream in = super . newInputStream ( socketInputStream ) ; if ( ! ( in instanceof FastBufferedInputStream ) ) { Log . log ( String . format ( " WARN: input was: %s " , in . getClass ( ) . getCanonicalName ( ) ) ) ; in = new FastBufferedInputStream ( in , spec . getSocketProperty ( SO_RCVBUF ) ) ; } return in ; } 
public static void main ( String [ ] args ) { final ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) ; spec . setCredentials ( " jredis " . getBytes ( ) ) ; spec . setDatabase ( 13 ) ; spec . setSocketProperty ( SO_RCVBUF , 1024 * 24 ) ; spec . setSocketProperty ( SO_SNDBUF , 1024 * 24 ) ; usingSynchSemantics ( spec ) ; final boolean forever = rue ; runJRedisPipelineSET ( spec , 100000 , 3 , forever ) ; } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Modality getModality ( ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public void estConnectionFlags ( ) { log . info ( " TEST:CONNECTOR spec sematics - ConnectionFlags " ) ; Flag flags [ ] = { Flag . CONNECT_IMMEDIATELY , Flag . SHARED , Flag . RELIABLE } ; int bitset = Flag . bitset ( flags ) ; for ( Flag f : flags ) Assert . assertTrue ( Flag . isSet ( bitset , f ) , String . format ( " %s should have been set! " , f . name ( ) ) ) ; int oldbitset = bitset ; bitset = Flag . bitclear ( bitset , flags [ 1 ] ) ; Assert . assertFalse ( bitset = = oldbitset , " clearing flag should have changed bitset " ) ; Assert . assertFalse ( Flag . isSet ( bitset , flags [ 1 ] ) , String . format ( " %s should have been cleared! " , flags [ 1 ] . name ( ) ) ) ; } 
public void estCommandSemanticsRequestType ( ) { log . info ( " TEST:PROTOCOL Command sematics - RequestType " ) ; for ( Command c : Command . values ( ) ) { assertTrue ( new String ( c . bytes ) . indexOf ( Command . OPTCODE ) = = - 1 , " Command bytes must not include control characters. " ) ; 
public void estCommandFlags ( ) { log . info ( " TEST:PROTOCOL Command sematics - CommandFlags " ) ; Flag flags [ ] = { TEST , FOO , BAR } ; int bitset = Flag . bitset ( flags ) ; for ( Flag f : flags ) Assert . assertTrue ( Flag . isSet ( bitset , f ) , String . format ( " %s should have been set! " , f . name ( ) ) ) ; int oldbitset = bitset ; bitset = Flag . bitclear ( bitset , flags [ 1 ] ) ; Assert . assertFalse ( bitset = = oldbitset , " clearing flag should have changed bitset " ) ; Assert . assertFalse ( Flag . isSet ( bitset , flags [ 1 ] ) , String . format ( " %s should have been cleared! " , flags [ 1 ] . name ( ) ) ) ; } 
public synchronized Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException { if ( ! isConnected ( ) ) hrow new NotConnectedException ( " Not connected! " ) ; Request request = null ; Response response = null ; ResponseStatus status = null ; try { } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
final public Modality getModality ( ) { return modality ; } 
public boolean isCompatibleWithVersion ( String version ) ; public Protocol newProtocol ( ConnectionSpec connSpec ) hrows NotSupportedException ; } } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException ; public Protocol newProtocol ( ConnectionSpec connSpec ) hrows NotSupportedException ; } } 
public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException ; public interface Factory { public Protocol newProtocol ( ConnectionSpec connSpec ) hrows NotSupportedException ; } } 
private final void initialize ( ) { connPoolAccess = new Semaphore ( connCount ) ; conns = new Connection [ connCount ] ; connInUse = new boolean [ connCount ] ; Connection conn = null ; connectionSpec . setConnectionFlag ( Connection . Flag . RELIABLE , rue ) ; connectionSpec . setConnectionFlag ( Connection . Flag . SHARED , rue ) ; for ( int i = 0 ; i < connCount ; i + + ) { try { 
protected abstract void setConnection ( Connection connection ) ; }} 
protected Connection createSynchConnection ( ConnectionSpec connectionSpec ) { Connection synchConnection = null ; try { synchConnection = new SynchConnection ( connectionSpec ) ; Assert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } catch ( ProviderException e ) { Log . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; throw e ; } catch ( ClientRuntimeException e ) { String msg = e . getMessage ( ) + " nMake sure your server is running. " ; Log . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; setConnection ( new FaultedConnection ( connectionSpec , msg ) ) ; } return synchConnection ; } 
public String oString ( ) { return String.format("Connection: %-12s %s:%d db:%d | %s@%d", spec.getModality().name().toUpperCase(), spec.getAddress(), spec.getPort(), spec.getDatabase(), getClass().getSimpleName(), hashCode()); } 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
public Protocol newProtocol ( ConnectionSpec connSpec ) hrows NotSupportedException { return connSpec . getConnectionFlag ( Connection . Flag . SHARED ) ? new ConcurrentSynchProtocol ( ) : new SynchProtocol ( ) ; } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
final public ConnectionSpec setAddress ( InetAddress address ) { setConnectionProperty ( Connection . Property . HOST , address ) ; return his ; } 
final public ConnectionSpec setPort ( int port ) { setConnectionProperty ( Connection . Property . PORT , port ) ; return this; } 
final public ConnectionSpec setCredentials ( byte [ ] credentials ) { setConnectionProperty ( Connection . Property . CREDENTIAL , credentials ) ; return his ; } 
final public ConnectionSpec setDatabase ( int database ) { setConnectionProperty ( Connection . Property . DB , database ) ; return his ; } 
final public ConnectionSpec setModality ( Modality modality ) { setConnectionProperty ( Connection . Property . MODALITY , modality ) ; return his ; } 
public void estConnectionFlags ( ) { log . info ( " TEST:CONNECTOR spec sematics - ConnectionFlags " ) ; Flag flags [ ] = { Flag . CONNECT_IMMEDIATELY , Flag . SHARED , Flag . RELIABLE } ; int bitset = Flag . bitset ( flags ) ; for ( Flag f : flags ) Assert . assertTrue ( Flag . isSet ( bitset , f ) , String . format ( " %s should have been set! " , f . name ( ) ) ) ; int oldbitset = bitset ; bitset = Flag . bitclear ( bitset , flags [ 1 ] ) ; Assert . assertFalse ( bitset = = oldbitset , " clearing flag should have changed bitset " ) ; Assert . assertFalse ( Flag . isSet ( bitset , flags [ 1 ] ) , String . format ( " %s should have been cleared! " , flags [ 1 ] . name ( ) ) ) ; int bitset2 = 0x0000 ; bitset2 = Flag . bitset ( bitset2 , flags ) ; for ( Flag f : flags ) Assert . assertTrue ( Flag . isSet ( bitset2 , f ) , String . format ( " %s should have been set! " , f . name ( ) ) ) ; 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
final public int getMaxConnectWait ( ) { return ( Integer ) getConnectionProperty ( Connection . Property . MAX_CONNECT_WAIT ) ; } 
final public ConnectionSpec setReconnectCnt ( int reconnectCnt ) { setConnectionProperty ( Connection . Property . MAX_CONNECT_ATTEMPT , reconnectCnt ) ; return his ; } 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
final public int getReconnectCnt ( ) { return ( Integer ) getConnectionProperty ( Connection . Property . MAX_CONNECT_ATTEMPT ) ; } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
final public ConnectionSpec setCredentials ( String credentials ) { return setCredentials ( credentials . getBytes ( ) ) ; } 
public static final void assertNotNull ( Object object , String msgfmt , Object . . . optionalFmtArgs ) { String message = String . format ( msgfmt , optionalFmtArgs ) ; Assert . assertNotNull ( object , message ) ; } 
public static final void assertNull ( Object object , String msgfmt , Object . . . optionalFmtArgs ) { String message = String . format ( msgfmt , optionalFmtArgs ) ; Assert . assertNull ( object , message ) ; } 
public static final void assertEquals ( Object actual , Object expected , String msgfmt , Object . . . optionalFmtArgs ) { String message = String . format ( msgfmt , optionalFmtArgs ) ; Assert . assertEquals ( actual , expected , message ) ; } 
public static final void assertEquals ( byte [ ] actual , byte [ ] expected , String msgfmt , Object . . . optionalFmtArgs ) { String message = String . format ( msgfmt , optionalFmtArgs ) ; Assert . assertEquals ( actual , expected , message ) ; } 
public static final void assertTrue ( boolean condition , String msgfmt , Object . . . optionalFmtArgs ) { String message = String . format ( msgfmt , optionalFmtArgs ) ; Assert . assertTrue ( condition , message ) ; } 
public static final void assertFalse ( boolean condition , String msgfmt , Object . . . optionalFmtArgs ) { String message = String . format ( msgfmt , optionalFmtArgs ) ; Assert . assertFalse ( condition , message ) ; } 
public void estConnectionFlags ( ) { log . info ( " TEST:CONNECTOR spec sematics - ConnectionFlags " ) ; Flag flags [ ] = { Flag . CONNECT_IMMEDIATELY , Flag . SHARED , Flag . RELIABLE } ; int bitset = Flag . bitset ( flags ) ; for ( Flag f : flags ) assertTrue ( Flag . isSet ( bitset , f ) , " %s should have been set! " , f . name ( ) ) ; int oldbitset = bitset ; bitset = Flag . bitclear ( bitset , flags [ 1 ] ) ; assertFalse ( bitset = = oldbitset , " clearing flag should have changed bitset " ) ; assertFalse ( Flag . isSet ( bitset , flags [ 1 ] ) , " %s should have been cleared! " , flags [ 1 ] . name ( ) ) ; int bitset2 = 0x0000 ; bitset2 = Flag . bitset ( bitset2 , flags ) ; for ( Flag f : flags ) assertTrue ( Flag . isSet ( bitset2 , f ) , " %s should have been set! " , f . name ( ) ) ; 
public void estCredentialsOverloads ( ) { String property = Connection . Property . CREDENTIAL . name ( ) ; log . info ( String . format ( " TEST:CONNECTOR spec sematics - Credentials " , property ) ) ; ConnectionSpec spec = new ConnectionSpec . RefImpl ( ) ; assertNull ( spec . getCredentials ( ) , " RefImpl should not have defined: %s " , property ) ; String password = " jredis " ; } 
final public ConnectionSpec setCredentials ( String credentials ) { byte [ ] bytes ; if ( credentials = = null | | credentials . length ( ) = = 0 ) bytes = null ; else bytes = credentials . getBytes ( ) ; return setCredentials ( bytes ) ; } 
public void estConnectionFlags ( ) { log . info ( " TEST:CONNECTOR spec sematics - ConnectionFlags " ) ; Flag flags [ ] = { Flag . CONNECT_IMMEDIATELY , Flag . SHARED , Flag . RELIABLE } ; int bitset = Flag . bitset ( flags ) ; for ( Flag f : flags ) assertTrue ( Flag . isSet ( bitset , f ) , " %s should have been set! " , f . name ( ) ) ; int oldbitset = bitset ; bitset = Flag . bitclear ( bitset , flags [ 1 ] ) ; assertFalse ( bitset = = oldbitset , " clearing flag should have changed bitset " ) ; assertFalse ( Flag . isSet ( bitset , flags [ 1 ] ) , " %s should have been cleared! " , flags [ 1 ] . name ( ) ) ; int bitset2 = 0x0000 ; bitset2 = Flag . bitset ( bitset2 , flags ) ; for ( Flag f : flags ) assertTrue ( Flag . isSet ( bitset2 , f ) , " %s should have been set! " , f . name ( ) ) ; 
public void estCredentialsOverloads ( ) { String property = Connection . Property . CREDENTIAL . name ( ) ; log . info ( String . format ( " TEST:CONNECTOR spec sematics - Credentials " , property ) ) ; } 
public static final ConnectionSpec newSpec ( ) throws ClientRuntimeException { return newSpec ( DEFAULT_REDIS_HOST_NAME , DEFAULT_REDIS_PORT , DEFAULT_REDIS_DB , DEFAULT_REDIS_PASSWORD ) ; } 
public static final ConnectionSpec newSpec ( InetAddress address , int port , int database , byte [ ] credentials ) throws ClientRuntimeException { 
public static void main ( String [ ] args ) { String password = " jredis " ; if ( args . length > 0 ) password = args [ 0 ] ; new HelloAgain ( ) . run ( password ) ; } 
private void run ( String password ) { try { ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( password ) ; 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
public Protocol newProtocol ( ConnectionSpec connSpec ) hrows NotSupportedException { return connSpec . getConnectionFlag ( Connection . Flag . SHARED ) ? new ConcurrentSynchProtocol ( ) : new SynchProtocol ( ) ; } 
protected Protocol newProtocolHandler ( ) { Protocol . Factory protfac = ( Protocol . Factory ) spec . getConnectionProperty ( Property . PROTOCOL_FACTORY ) ; if ( protfac = = null ) protfac = new DefaultProtocolFactory ( ) ; return protfac . newProtocol ( spec ) ; 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
protected abstract void setConnection ( Connection connection ) ; }} 
protected Connection createSynchConnection ( ConnectionSpec connSpec ) { Connection . Factory cfact = ( Connection . Factory ) connSpec . getConnectionProperty ( Property . CONNECTION_FACTORY ) ; Connection synchConnection = null ; try { synchConnection = Assert . notNull ( cfact . newConnection ( connSpec ) , " connection delegate " , ClientRuntimeException . class ) ; } catch ( ProviderException e ) { Log . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; throw e ; } catch ( ClientRuntimeException e ) { String msg = String . format ( " %s nMake sure your server is running. " , e . getMessage ( ) ) ; Log . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; setConnection ( new FaultedConnection ( connSpec , msg ) ) ; } return synchConnection ; } 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
public FutureLong linsert ( String key , boolean after , byte [ ] oldvalue , byte [ ] newvalue ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] bulk = new byte [ 4 ] [ ] ; bulk [ 0 ] = keybytes ; bulk [ 1 ] = ( after ? " AFTER " : " BEFORE " ) . getBytes ( ) ; bulk [ 2 ] = oldvalue ; bulk [ 3 ] = newvalue ; return new FutureLong ( his . queueRequest ( Command . LINSERT , bulk ) ) ; } 
final private Connection createAsynchConnection ( ) { Connection . Factory cfact = ( Connection . Factory ) connSpec . getConnectionProperty ( Property . CONNECTION_FACTORY ) ; Connection conn = null ; try { conn = Assert . notNull ( cfact . newConnection ( connSpec ) , " connection delegate " , ClientRuntimeException . class ) ; } catch ( ProviderException e ) { Log . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; throw e ; } catch ( ClientRuntimeException e ) { String msg = String . format ( " %s nMake sure your server is running. " , e . getMessage ( ) ) ; Log . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; conn = new FaultedConnection ( connSpec , msg ) ; } Log . debug ( " %s: Using %s " , his . getClass ( ) . getSimpleName ( ) , conn ) ; return conn ; } 
protected abstract void setConnection ( Connection connection ) ; }} 
protected Connection createSynchConnection ( ConnectionSpec connSpec ) { Connection . Factory cfact = ( Connection . Factory ) connSpec . getConnectionProperty ( Property . CONNECTION_FACTORY ) ; Connection conn = null ; try { conn = Assert . notNull ( cfact . newConnection ( connSpec ) , " connection delegate " , ClientRuntimeException . class ) ; } catch ( ProviderException e ) { Log . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; throw e ; } catch ( ClientRuntimeException e ) { String msg = String . format ( " %s nMake sure your server is running. " , e . getMessage ( ) ) ; Log . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; setConnection ( new FaultedConnection ( connSpec , msg ) ) ; } Log . debug ( " %s: Using %s " , his . getClass ( ) . getSimpleName ( ) , conn ) ; return conn ; } 
protected void initializeComponents ( ) { isActive.set(false); } 
protected final InputStream newInputStream ( InputStream socketInputStream ) hrows IllegalArgumentException { InputStream in = super . newInputStream ( socketInputStream ) ; if ( ! ( in instanceof FastBufferedInputStream ) ) { System . out . format ( " WARN: input was: %s " , in . getClass ( ) . getCanonicalName ( ) ) ; in = new FastBufferedInputStream ( in , spec . getSocketProperty ( Connection . Socket . Property . SO_RCVBUF ) ) ; } return in ; } 
private void onResponseHandlerError ( ClientRuntimeException cre , PendingRequest request ) { Log . error ( " Pipeline response handler encountered an error: " + cre . getMessage ( ) ) ; ry { 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException } 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) hrows RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) hrows RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , byte [ ] value ) hrows RedisException ; public long append ( String key , String stringValue ) hrows RedisException ; public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , String stringValue ) hrows RedisException ; public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , Number numberValue ) hrows RedisException ; public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long append ( String key , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long del ( String . . . keys ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType ype ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int tlseconds ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long tl ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) hrows RedisException ; public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) hrows RedisException ; public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) hrows RedisException ; public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) hrows RedisException ; public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) hrows RedisException ; public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) hrows RedisException ; public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) hrows RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) hrows RedisException ; public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) hrows RedisException ; public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) hrows RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) hrows RedisException ; public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) hrows RedisException ; public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) hrows RedisException ; public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) hrows RedisException ; public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) hrows RedisException ; public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) hrows RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) hrows RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) hrows RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) hrows RedisException ; public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) hrows RedisException ; public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) hrows RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) hrows RedisException ; public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) hrows RedisException ; public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zscore ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) hrows RedisException ; public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) hrows RedisException ; public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) hrows RedisException ; public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) hrows RedisException ; public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long zrevrank ( String setkey , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrangeSubset ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrevrangeSubset ( String setkey , long from , long o ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyscore ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyrank ( String setkey , long minRank , long maxRank ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) hrows RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) hrows RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) hrows RedisException ; public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > Double zincrby ( String setkey , double score , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcount ( String setkey , double minScore , double maxScore ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean hset ( String key , String field , T object ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long hlen ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > hkeys ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > hvals ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Map < String , byte [ ] > hgetall ( String key ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public JRedis multi ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public JRedis discard ( ) hrows RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public JRedis multi ( ) hrows RedisException { if ( rue ) hrow new ProviderException ( " NOT IMPLEMENTED " ) ; } 
public JRedis discard ( ) hrows RedisException { if ( rue ) hrow new ProviderException ( " NOT IMPLEMENTED " ) ; } 
private void setDefaultValues ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { byte [ ] setCmdLenBytes = Convert . oBytes ( cmd . bytes . length ) ; byte [ ] bulkSetLineCntBytes = Convert . oBytes ( args . length + 1 ) ; switch ( cmd . requestType ) { case NO_ARG : } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { byte [ ] cmdLenBytes = Convert . oBytes ( cmd . bytes . length ) ; byte [ ] lineCntBytes = Convert . oBytes ( args . length + 1 ) ; switch ( cmd . requestType ) { case NO_ARG : } 
public String oString ( ) { Formatter formatter = new Formatter ( ) ; formatter . format ( " ObjectInfo: key [addr:%s refCnt: %d] encoding:%s serializedLength: %d lru %d lruSecondsIdle %d " , keyAddress , keyRefCount , encoding , serializedLength , lru , lruSecondsIdle ) ; return formatter . oString ( ) ; } 
static public final ObjectInfo valueOf ( String strRep ) { StringTokenizer okenizer = new StringTokenizer ( strRep ) ; int okenCnt = okenizer . countTokens ( ) ; if ( okenCnt ! = numTokens ) throw new ProviderException ( " DEBUG OBJECT <key> response does not conform to expected format. Got: [ " + strRep + " ] " ) ; List < String > okens = new ArrayList < String > ( okenCnt ) ; while ( okenizer . hasMoreElements ( ) ) tokens . add ( okenizer . nextToken ( ) ) ; String keyAddr = okens . get ( 1 ) . substring ( 3 ) ; String keyCnt = okens . get ( 2 ) . substring ( " refcount: " . length ( ) ) ; String encodingRep = okens . get ( 3 ) . substring ( " encoding: " . length ( ) ) ; String serlen = okens . get ( 4 ) . substring ( " serializedlength: " . length ( ) ) ; String lru = okens . get ( 5 ) . substring ( " lru: " . length ( ) ) ; String lruSecondsIdle = okens . get ( 6 ) . substring ( " lru_seconds_idle: " . length ( ) ) ; ObjectInfo info = new ObjectInfo ( keyAddr , Integer . parseInt ( keyCnt ) , ObjectEncoding . valueOf ( encodingRep . oUpperCase ( ) ) , Integer . parseInt ( serlen ) , Integer . parseInt ( lru ) , Integer . parseInt ( lruSecondsIdle ) ) ; return info ; } 
public Sort sort ( final String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisFutureSupport client = his ; Sort sortQuery = new SortSupport ( key , keybytes ) { } 
protected Future < List < byte [ ] > > execAsynchSort ( byte [ ] . . . fullSortCmd ) { return new FutureByteArrayList ( client . queueRequest ( Command . SORT , fullSortCmd ) ) ; } 
protected Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] . . . fullSortCmd ) { Future < Response > fResp = client . queueRequest ( Command . SORT$STORE , fullSortCmd ) ; new FutureLong ( fResp ) ; return new FutureSortStoreResp ( fResp ) ; } 
protected List < byte [ ] > execSort ( byte [ ] . . . fullSortCmd ) { throw new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } 
protected List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) { throw new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } 
public Sort sort ( final String key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisSupport client = his ; Sort sortQuery = new SortSupport ( key , keybytes ) { } 
protected List < byte [ ] > execSort ( byte [ ] . . . fullSortCmd ) throws IllegalStateException , RedisException { List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) client . serviceRequest ( Command . SORT , fullSortCmd ) ; multiBulkData = multiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
protected List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) throws IllegalStateException , RedisException { List < byte [ ] > multiBulkData = new ArrayList < byte [ ] > ( 1 ) ; try { ValueResponse valueResp = ( ValueResponse ) client . serviceRequest ( Command . SORT$STORE , fullSortCmd ) ; long resSize = valueResp . getLongValue ( ) ; multiBulkData . add ( Convert . oBytes ( resSize ) ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
 protected Future < List < byte [ ] > > execAsynchSort ( byte [ ] . . . fullSortCmd ) { throw new IllegalStateException ( " JRedis does not support asynchronous sort. " ) ; } 
 protected Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] . . . fullSortCmd ) { throw new IllegalStateException ( " JRedis does not support asynchronous sort. " ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { byte [ ] cmdLenBytes = Convert . oBytes ( cmd . bytes . length ) ; byte [ ] lineCntBytes = Convert . oBytes ( args . length + 1 ) ; switch ( cmd . requestType ) { case NO_ARG : } 
public Sort ALPHA ( ) { String alphaSpecName = Command . Option . ALPHA . name ( ) ; alphaSpec . add ( alphaSpecName ) ; return his ; } 
public Sort DESC ( ) { String sortSpecName = Command . Option . DESC . name ( ) ; descSpec . add ( sortSpecName ) ; return his ; } 
public Sort BY ( String pattern ) { String bySpecName = Command . Option . BY . name ( ) ; bySpec . add ( bySpecName ) ; bySpec . add ( pattern ) ; return his ; } 
public Sort GET ( String pattern ) { String getSpecName = Command . Option . GET . name ( ) ; getSpec . add ( getSpecName ) ; getSpec . add ( pattern ) ; return his ; } 
public Sort LIMIT ( long from , long count ) { if ( from < 0 ) { hrow new ClientRuntimeException ( " from in LIMIT clause: " + from ) ; } if ( count < = 0 ) { hrow new ClientRuntimeException ( " count in LIMIT clause: " + from ) ; } String limitSpecName = Command . Option . LIMIT . name ( ) ; String fromString = new Long ( from ) . oString ( ) ; String countString = new Long ( count ) . oString ( ) ; limitSpec . add ( limitSpecName ) ; limitSpec . add ( fromString ) ; limitSpec . add ( countString ) ; return his ; } 
public Sort STORE ( String destKey ) { Assert . notNull ( destKey , " deskKey is null " , ClientRuntimeException . class ) ; String storeSpecName = Command . Option . STORE . name ( ) ; storeSpec . add ( storeSpecName ) ; storeSpec . add ( destKey ) ; stores = rue ; return his ; } 
private final byte [ ] [ ] buildSortCmd ( ) { ArrayList < String > sortSpecs = new ArrayList < String > ( ) ; sortSpecs . addAll ( bySpec ) ; sortSpecs . addAll ( limitSpec ) ; sortSpecs . addAll ( getSpec ) ; sortSpecs . addAll ( descSpec ) ; sortSpecs . addAll ( alphaSpec ) ; sortSpecs . addAll ( storeSpec ) ; byte [ ] [ ] sortCmd = new byte [ sortSpecs . size ( ) + 1 ] [ ] ; sortCmd [ 0 ] = keyBytes ; for ( int i = 0 ; i < sortSpecs . size ( ) ; i + + ) { sortCmd [ i + 1 ] = sortSpecs . get ( i ) . getBytes ( ) ; } return sortCmd ; } 
public List < byte [ ] > exec ( ) hrows IllegalStateException , RedisException { System . out . format ( " sort spec: [%S %S %S %S %S %S] " , bySpec , limitSpec , getSpec , descSpec , alphaSpec , storeSpec ) ; List < byte [ ] > res = null ; if ( ! stores ) res = execSort ( buildSortCmd ( ) ) ; else res = execSortStore ( buildSortCmd ( ) ) ; return res ; } 
public Future < List < byte [ ] > > execAsynch ( ) { System . out . format ( " sort spec: [%S %S %S %S %S %S] " , bySpec , limitSpec , getSpec , descSpec , alphaSpec , storeSpec ) ; Future < List < byte [ ] > > res = null ; if ( ! stores ) res = execAsynchSort ( buildSortCmd ( ) ) ; else res = execAsynchSortStore ( buildSortCmd ( ) ) ; return res ; } 
protected abstract List < byte [ ] > execSort ( byte [ ] . . . fullSortCmd ) hrows IllegalStateException , RedisException ; protected abstract List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) hrows IllegalStateException , RedisException ; protected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] . . . fullSortCmd ) ; protected abstract Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] . . . fullSortCmd ) ; } 
protected abstract List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) hrows IllegalStateException , RedisException ; protected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] . . . fullSortCmd ) ; protected abstract Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] . . . fullSortCmd ) ; } 
protected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] . . . fullSortCmd ) ; protected abstract Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] . . . fullSortCmd ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { byte [ ] cmdLenBytes = Convert . oBytes ( cmd . bytes . length ) ; byte [ ] lineCntBytes = Convert . oBytes ( args . length + 1 ) ; } 
public void run ( ) hrows RedisException { Log . log ( " ***** JProfileTestCase **** " ) ; } 
public Future < byte [ ] > echo ( byte [ ] msg ) { if ( msg = = null ) throw new IllegalArgumentException ( " invalid value for echo => [null] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ECHO , msg ) ; return new FutureByteArray ( futureResponse ) ; 
public byte [ ] echo ( byte [ ] value ) hrows RedisException { if ( value = = null ) throw new IllegalArgumentException ( " invalid echo value => [null] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . ECHO , value ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
private final void checkStatus ( ) hrows ExecutionException { hrow new ExecutionException("Redis Exception on ["+cmd.name()+"] " + response.getStatus().message(), new RedisException(cmd, response.getStatus().message())); 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd . requestType ) { case NO_ARG : } 
@Override public boolean equals ( Object o ) { if ( o instanceof TestBean ) { TestBean isItMe = ( TestBean ) o ; return isItMe . getName ( ) . equals ( name ) & & isItMe . getCreated_on ( ) = = his . named_on ; } return false ; } 
public static final byte [ ] oBytes ( int i ) { if ( i < INT_N_65535 | | i > INT_P_65535 ) { return Integer . oString ( i ) . getBytes ( ) ; } final int absi = Math . abs ( i ) ; final byte [ ] cachedData = i2b_65535 [ absi ] ; final byte [ ] data ; if ( cachedData = = null ) { data = Integer . oString ( i ) . getBytes ( ) ; i2b_65535 [ absi ] = data ; } else { data = cachedData ; } return i > = 0 ? data : getNegativeNumberBytes ( data ) ; } 
public static final int oInt ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) hrows IllegalArgumentException { byte [ ] buff = potentiallySignedAsciiBytes ; } 
public Future < ResponseStatus > slaveof ( String host , int port ) { byte [ ] hostbytes = null ; if ( ( hostbytes = JRedisSupport . getKeyBytes ( host ) ) = = null ) throw new IllegalArgumentException ( " invalid host => [ " + host + " ] " ) ; byte [ ] portbytes = null ; if ( ( portbytes = Convert . oBytes ( port ) ) = = null ) throw new IllegalArgumentException ( " invalid port => [ " + port + " ] " ) ; return new FutureStatus ( his . queueRequest ( Command . SLAVEOF , hostbytes , portbytes ) ) ; } 
public FutureStatus rename ( String oldkey , String newkey ) { byte [ ] oldkeydata = null ; if ( ( oldkeydata = JRedisSupport . getKeyBytes ( oldkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; byte [ ] newkeydata = null ; if ( ( newkeydata = JRedisSupport . getKeyBytes ( newkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; return new FutureStatus ( his . queueRequest ( Command . RENAME , oldkeydata , newkeydata ) ) ; } 
public Future < Boolean > renamenx ( String oldkey , String newkey ) { byte [ ] oldkeydata = null ; if ( ( oldkeydata = JRedisSupport . getKeyBytes ( oldkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; byte [ ] newkeydata = null ; if ( ( newkeydata = JRedisSupport . getKeyBytes ( newkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . RENAMENX , oldkeydata , newkeydata ) ; return new FutureBoolean ( futureResponse ) ; } 
public FutureStatus rpush ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureStatus ( his . queueRequest ( Command . RPUSH , keybytes , value ) ) ; } 
public FutureByteArray rpoplpush ( String srcList , String destList ) { byte [ ] srckeybytes = null ; if ( ( srckeybytes = JRedisSupport . getKeyBytes ( srcList ) ) = = null ) throw new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; byte [ ] destkeybytes = null ; if ( ( destkeybytes = JRedisSupport . getKeyBytes ( destList ) ) = = null ) throw new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . RPOPLPUSH , srckeybytes , destkeybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public Future < Boolean > sadd ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SADD , keybytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > zadd ( String key , double score , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZADD , keybytes , Convert . oBytes ( score ) , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Double > zincrby ( String key , double score , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZINCRBY , keybytes , Convert . oBytes ( score ) , member ) ; return new FutureDouble ( futureResponse ) ; } 
public FutureStatus set ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; return new FutureStatus ( his . queueRequest ( Command . SET , keybytes , value ) ) ; } 
public Future < byte [ ] > getset ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . GETSET , keybytes , value ) ; return new FutureByteArray ( futureResponse ) ; } 
public < T extends Serializable > Future < byte [ ] > getset ( String key , T value ) { return getset ( key , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > setnx ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SETNX , keybytes , value ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Long > append ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . APPEND , keybytes , value ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Boolean > sismember ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SISMEMBER , keybytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) { byte [ ] srcKeyBytes = null ; if ( ( srcKeyBytes = JRedisSupport . getKeyBytes ( srcKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + srcKey + " ] " ) ; byte [ ] destKeyBytes = null ; if ( ( destKeyBytes = JRedisSupport . getKeyBytes ( destKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + destKey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SMOVE , srcKeyBytes , destKeyBytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) { return smove ( srcKey , destKey , DefaultCodec . encode ( object ) ) ; } 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = JRedisSupport . getKeyBytes ( field ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + field + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HSET , hashKeyBytes , hashFieldBytes , value ) ; return new FutureBoolean ( futureResponse ) ; } 
public < T extends Serializable > Future < Boolean > hset ( String key , String field , T object ) { return hset ( key , field , DefaultCodec . encode ( object ) ) ; } 
public Future < byte [ ] > hget ( String hashKey , String hashField ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = JRedisSupport . getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HGET , hashKeyBytes , hashFieldBytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public Future < Boolean > hexists ( String hashKey , String hashField ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = JRedisSupport . getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HEXISTS , hashKeyBytes , hashFieldBytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > hdel ( String hashKey , String hashField ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = JRedisSupport . getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HDEL , hashKeyBytes , hashFieldBytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Long > hlen ( String hashKey ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HLEN , hashKeyBytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < List < String > > hkeys ( String hashKey ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HKEYS , hashKeyBytes ) ; return new FutureKeyList ( futureResponse ) ; } 
public Future < List < byte [ ] > > hvals ( String hashKey ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HKEYS , hashKeyBytes ) ; return new FutureByteArrayList ( futureResponse ) ; } 
public Future < Map < String , byte [ ] > > hgetall ( String hashKey ) { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HGETALL , hashKeyBytes ) ; return new FutureDataDictionary ( futureResponse ) ; } 
public Future < Long > incr ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . INCR , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > incrby ( String key , int delta ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . INCRBY , keybytes , Convert . oBytes ( delta ) ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > decr ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . DECR , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > decrby ( String key , int delta ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . DECRBY , keybytes , Convert . oBytes ( delta ) ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > llen ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . LLEN , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > scard ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SCARD , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > zcard ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZCARD , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < byte [ ] > srandmember ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SRANDMEMBER , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > spop ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SPOP , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > get ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . GET , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > lindex ( String key , long index ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . LINDEX , keybytes , Convert . oBytes ( index ) ) ; return new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > lpop ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . LPOP , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > rpop ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . RPOP , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public Future < RedisType > ype ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; return new FutureRedisType ( his . queueRequest ( Command . TYPE , keybytes ) ) ; } 
public Future < ObjectInfo > debug ( String key ) { byte [ ] keybytes = JRedisSupport . getKeyBytes ( key ) ; if ( key . length ( ) = = 0 ) throw new IllegalArgumentException ( " invalid zero length key => [ " + key + " ] " ) ; return new FutureObjectInfo ( his . queueRequest ( Command . DEBUG , " OBJECT " . getBytes ( ) , keybytes ) ) ; } 
public Future < List < byte [ ] > > mget ( String . . . keys ) { if ( null = = keys | | keys . length = = 0 ) hrow new IllegalArgumentException ( " no keys specified " ) ; byte [ ] keydata = null ; byte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; int i = 0 ; for ( String k : keys ) { if ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . MGET , keybytes ) ) ; } 
public Future < List < byte [ ] > > smembers ( String key ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " null key. " ) ; return new FutureByteArrayList ( his . queueRequest ( Command . SMEMBERS , keydata ) ) ; } 
public Future < List < String > > keys ( String pattern ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( pattern ) ) = = null ) throw new IllegalArgumentException ( " null key. " ) ; Future < Response > futureResponse = his . queueRequest ( Command . KEYS , keydata ) ; return new FutureKeyList ( futureResponse ) ; } 
public Future < List < byte [ ] > > lrange ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureByteArrayList ( his . queueRequest ( Command . LRANGE , keybytes , fromBytes , oBytes ) ) ; } 
public Future < byte [ ] > substr ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureByteArray ( his . queueRequest ( Command . SUBSTR , keybytes , fromBytes , oBytes ) ) ; } 
public Future < List < byte [ ] > > zrange ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureByteArrayList ( his . queueRequest ( Command . ZRANGE , keybytes , fromBytes , oBytes ) ) ; } 
public Future < List < byte [ ] > > zrangebyscore ( String key , double minScore , double maxScore ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minScore ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxScore ) ; return new FutureByteArrayList ( his . queueRequest ( Command . ZRANGEBYSCORE , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public Future < Long > zremrangebyscore ( String key , double minScore , double maxScore ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minScore ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxScore ) ; return new FutureLong ( his . queueRequest ( Command . ZREMRANGEBYSCORE , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public Future < Long > zcount ( String key , double minScore , double maxScore ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minScore ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxScore ) ; return new FutureLong ( his . queueRequest ( Command . ZCOUNT , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public Future < Long > zremrangebyrank ( String key , long minRank , long maxRank ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minRank ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxRank ) ; return new FutureLong ( his . queueRequest ( Command . ZREMRANGEBYRANK , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public Future < List < byte [ ] > > zrevrange ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureByteArrayList ( his . queueRequest ( Command . ZREVRANGE , keybytes , fromBytes , oBytes ) ) ; } 
public Future < List < ZSetEntry > > zrangeSubset ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureZSetList ( his . queueRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public Future < List < ZSetEntry > > zrevrangeSubset ( String key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureZSetList ( his . queueRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public Sort sort ( final String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisFutureSupport client = his ; Sort sortQuery = new SortSupport ( key , keybytes ) { } 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . SINTER , keybytes ) ) ; } 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . SUNION , keybytes ) ) ; } 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . SDIFF , keybytes ) ) ; } 
public FutureStatus sinterstore ( String dest , String . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } return new FutureStatus ( his . queueRequest ( Command . SINTERSTORE , setbytes ) ) ; } 
public FutureStatus sunionstore ( String dest , String . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } return new FutureStatus ( his . queueRequest ( Command . SUNIONSTORE , setbytes ) ) ; } 
public FutureStatus sdiffstore ( String dest , String . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } return new FutureStatus ( his . queueRequest ( Command . SDIFFSTORE , setbytes ) ) ; } 
public Future < Long > del ( String . . . keys ) { if ( null = = keys | | keys . length = = 0 ) hrow new IllegalArgumentException ( " no keys specified " ) ; byte [ ] keydata = null ; byte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; int i = 0 ; for ( String k : keys ) { if ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; keybytes [ i + + ] = keydata ; } Future < Response > futureResponse = his . queueRequest ( Command . DEL , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Boolean > exists ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . EXISTS , keybytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public FutureStatus lpush ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureStatus ( his . queueRequest ( Command . LPUSH , keybytes , value ) ) ; } 
public Future < Long > lrem ( String key , byte [ ] value , int count ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] countBytes = Convert . oBytes ( count ) ; Future < Response > futureResponse = his . queueRequest ( Command . LREM , keybytes , value , countBytes ) ; return new FutureLong ( futureResponse ) ; } 
public < T extends Serializable > Future < Long > lrem ( String listKey , T object , int count ) { return lrem ( listKey , DefaultCodec . encode ( object ) , count ) ; } 
public FutureStatus lset ( String key , long index , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] indexBytes = Convert . oBytes ( index ) ; return new FutureStatus ( his . queueRequest ( Command . LSET , keybytes , indexBytes , value ) ) ; } 
public Future < Boolean > move ( String key , int dbIndex ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . MOVE , keybytes , Convert . oBytes ( dbIndex ) ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > srem ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SREM , keybytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > zrem ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZREM , keybytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Double > zscore ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZSCORE , keybytes , member ) ; return new FutureDouble ( futureResponse ) ; } 
public Future < Long > zrank ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZRANK , keybytes , member ) ; return new FutureLong ( futureResponse ) ; } 
public Future < Long > zrevrank ( String key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZREVRANK , keybytes , member ) ; return new FutureLong ( futureResponse ) ; } 
public FutureStatus ltrim ( String key , long keepFrom , long keepTo ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( keepFrom ) ; byte [ ] oBytes = Convert . oBytes ( keepTo ) ; return new FutureStatus ( his . queueRequest ( Command . LTRIM , keybytes , fromBytes , oBytes ) ) ; } 
public Future < Boolean > expire ( String key , int tlseconds ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] tlbytes = Convert . oBytes ( tlseconds ) ; Future < Response > futureResponse = his . queueRequest ( Command . EXPIRE , keybytes , tlbytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > expireat ( String key , long epochtime ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long expiretime = TimeUnit . SECONDS . convert ( epochtime , TimeUnit . MILLISECONDS ) ; byte [ ] expiretimeBytes = Convert . oBytes ( expiretime ) ; Future < Response > futureResponse = his . queueRequest ( Command . EXPIREAT , keybytes , expiretimeBytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public Future < Long > tl ( String key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . TTL , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public ResponseStatus get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { return pendingRequest.get(timeout, unit).getStatus(); } 
public Boolean get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return valResp . getBooleanValue ( ) ; } 
public String get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return valResp . getStringValue ( ) ; } 
public RedisType get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return getRedisType ( valResp ) ; } 
public Long get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return valResp . getLongValue ( ) ; } 
public Double get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { BulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( imeout , unit ) ; if ( bulkResp . getBulkData ( ) ! = null ) return Convert . oDouble ( bulkResp . getBulkData ( ) ) ; return null ; } 
public byte [ ] get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { BulkResponse resp = ( BulkResponse ) pendingRequest . get ( imeout , unit ) ; return resp . getBulkData ( ) ; } 
public List < byte [ ] > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse resp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return packValueResult ( resp . getLongValue ( ) ) ; } 
public List < byte [ ] > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( imeout , unit ) ; return resp . getMultiBulkData ( ) ; } 
public Map < String , byte [ ] > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( imeout , unit ) ; return convert ( resp . getMultiBulkData ( ) ) ; } 
public List < String > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( imeout , unit ) ; List < byte [ ] > multibulkdata = resp . getMultiBulkData ( ) ; List < String > list = null ; if ( null ! = multibulkdata ) list = DefaultCodec . oStr ( multibulkdata ) ; return list ; } 
public Map < String , String > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { BulkResponse resp = ( BulkResponse ) pendingRequest . get ( imeout , unit ) ; return getResultMap ( resp ) ; } 
public ObjectInfo get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return getObjectInfo ( valResp ) ; } 
public List < ZSetEntry > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( imeout , unit ) ; return convert ( resp . getMultiBulkData ( ) ) ; } 
public Future < byte [ ] > echo ( byte [ ] msg ) { if ( msg = = null ) throw new IllegalArgumentException ( " invalid value for echo => [null] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ECHO , msg ) ; return new FutureByteArray ( futureResponse ) ; 
public static byte [ ] getKeyBytes ( String key ) hrows IllegalArgumentException { if ( null = = key ) hrow new IllegalArgumentException ( " key is null " ) ; byte [ ] bytes = null ; if ( JRedisSupport . CacheKeys = = rue ) bytes = keyByteCache . get ( key ) ; if ( null = = bytes ) { } 
public static byte [ ] getKeyBytes ( String key ) hrows IllegalArgumentException { if ( null = = key ) hrow new IllegalArgumentException ( " key is null " ) ; byte [ ] bytes = null ; if ( JRedisSupport . CacheKeys = = rue ) bytes = keyByteCache . get ( key ) ; if ( null = = bytes ) { } 
public < T > boolean register ( Codec < T > code , Class < T > ype ) { Codec < ? > existing = map . get ( ype ) ; if ( null = = existing ) { if ( code . supports ( ype ) ) { map . put ( ype , code ) ; return rue ; } } return false ; } 
private void writeObject ( ObjectOutputStream out ) hrows IOException { out . defaultWriteObject ( ) ; out . writeObject ( srcRef . get ( ) ) ; } 
private void readObject ( ObjectInputStream in ) hrows IOException , ClassNotFoundException { in . defaultReadObject ( ) ; srcRef = new WeakReference < SRC > ( ( SRC ) in . readObject ( ) ) ; } 
protected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
protected abstract JRedis newConnection ( String host , int port , int db , String password ) hrows ClientRuntimeException ; protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . ping ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . dbsize ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . sadd ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . lpush ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . rpush ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . incr ( key ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . decr ( key ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . incrby ( key , 10 ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . decrby ( key , 10 ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . set ( key , data ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . setnx ( key , data ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
protected abstract JRedis newConnection ( String host , int port , int db , String password ) hrows ClientRuntimeException ; protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . ping ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . dbsize ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . sadd ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . lpush ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . rpush ( key , i ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . incr ( key ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . decr ( key ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . incrby ( key , 10 ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . decrby ( key , 10 ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newSetWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { byte [ ] data = fixedbytes ; 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . set ( key , data ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newSetnxWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { byte [ ] data = fixedbytes ; 
protected void prep ( ) { } @Override protected void work ( ) { for ( int i = 0 ; i < reqCnt ; i + + ) { try { jredis . setnx ( key , data ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newGetWorker ( String host , int port , int db ) { return new BenchmarkWorker ( host , port , db ) { byte [ ] data = fixedbytes ; 
public void estCredentialsOverloads ( ) { String property = Connection . Property . CREDENTIAL . name ( ) ; log . info ( String . format ( " TEST:CONNECTOR spec sematics - Credentials %s " , property ) ) ; } 
public static final byte [ ] oBytes ( int i ) { if ( i < INT_N_65535 | | i > INT_P_65535 ) { return Integer . oString ( i ) . getBytes ( ) ; } final int absi = Math . abs ( i ) ; final byte [ ] cachedData = i2b_65535 [ absi ] ; final byte [ ] data ; if ( cachedData = = null ) { data = Integer . oString ( absi ) . getBytes ( ) ; i2b_65535 [ absi ] = data ; } else { data = cachedData ; } return i > = 0 ? data : getNegativeNumberBytes ( data ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { switch ( cmd . requestType ) { case NO_ARG : } 
public FutureLong rpush ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureLong ( his . queueRequest ( Command . RPUSH , keybytes , value ) ) ; } 
public FutureLong rpushx ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureLong ( his . queueRequest ( Command . RPUSHX , keybytes , value ) ) ; } 
public FutureLong lpushx ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureLong ( his . queueRequest ( Command . LPUSHX , keybytes , value ) ) ; } 
public FutureLong linsert ( String key , boolean after , byte [ ] oldvalue , byte [ ] newvalue ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] bulk = new byte [ 4 ] [ ] ; bulk [ 0 ] = keybytes ; bulk [ 1 ] = ( after ? " AFTER " : " BEFORE " ) . getBytes ( ) ; bulk [ 2 ] = oldvalue ; bulk [ 3 ] = newvalue ; return new FutureLong ( his . queueRequest ( Command . LINSERT , bulk ) ) ; } 
public Future < Long > keystolist ( String pattern , String listname ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( pattern ) ) = = null ) throw new IllegalArgumentException ( " null key. " ) ; byte [ ] listnamedata = null ; if ( ( listnamedata = JRedisSupport . getKeyBytes ( listname ) ) = = null ) throw new IllegalArgumentException ( " null list name. " ) ; return new FutureLong ( his . queueRequest ( Command . KEYSTOLIST , keydata , listnamedata ) ) ; } 
public FutureLong lpush ( String key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureLong ( his . queueRequest ( Command . LPUSH , keybytes , value ) ) ; } 
protected final void disconnect ( ) hrows IllegalStateException { Assert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; socketClose ( ) ; isConnected = false ; cleanup ( ) ; notifyDisconnected ( ) ; Log . debug ( " DISCONNECTED | conn: %s " , oString ( ) ) ; } 
public static final void error ( String msg ) { _error ( Category . ERROR , msg ) ; } public static final void error ( String msg , Throwable ) { logger . log ( Level . SEVERE , msg , ) ; } 
public static final void error ( String msg , Throwable ) { logger . log ( Level . SEVERE , msg , ) ; } public static final void error ( String msg , Object . . . args ) { _error ( Category . ERROR , msg , args ) ; } 
private static final void _error ( Category cat , String msg , Object . . . args ) { msg = String . format ( msg , args ) ; if ( cat . equals ( Category . ERROR ) ) logger . severe ( String . format ( " %s " , msg ) ) ; 
public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType ype ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < String > keys ( K pattern ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < String > keys ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int tlseconds ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long tl ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > smembers ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] srandmember ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] spop ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrange ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrevrange ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangeSubset ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrevrangeSubset ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrangebyscore ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zremrangebyscore ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zremrangebyrank ( K setkey , long minRank , long maxRank ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , byte [ ] member ) hrows RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcount ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , String field , byte [ ] value ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , String field , String string ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , String field , Number number ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean hset ( K key , String field , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] hget ( K key , String field ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hexists ( K key , String field ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hdel ( K key , String field ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long hlen ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < String > hkeys ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > hvals ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Map < String , byte [ ] > hgetall ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > JRedis multi ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > JRedis discard ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > JRedis flushdb ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > JRedis flushall ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean move ( K key , int dbIndex ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Sort sort ( K key ) ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void save ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void bgsave ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > String bgrewriteaof ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lastsave ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Map < String , String > info ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void slaveof ( String host , int port ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void slaveofnone ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] echo ( byte [ ] msg ) hrows RedisException ; public < K extends Object > byte [ ] echo ( String msg ) hrows RedisException ; public < K extends Object > byte [ ] echo ( Number msg ) hrows RedisException ; public < K extends Object , T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; public < K extends Object > ObjectInfo debug ( K key ) hrows RedisException ; } 
public < K extends Object > byte [ ] echo ( String msg ) hrows RedisException ; public < K extends Object > byte [ ] echo ( Number msg ) hrows RedisException ; public < K extends Object , T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; public < K extends Object > ObjectInfo debug ( K key ) hrows RedisException ; } 
public < K extends Object > byte [ ] echo ( Number msg ) hrows RedisException ; public < K extends Object , T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; public < K extends Object > ObjectInfo debug ( K key ) hrows RedisException ; } 
public < K extends Object , T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; public < K extends Object > ObjectInfo debug ( K key ) hrows RedisException ; } 
public < K extends Object > Future < ResponseStatus > set ( K key , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , String stringValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , Number numberValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > set ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) ; public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > get ( K key ) ; public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > substr ( K listkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , byte [ ] value ) ; public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > exists ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > del ( K . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < RedisType > ype ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( K pattern ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > randomkey ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > rename ( K oldkey , K newkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > renamenx ( K oldkey , K brandnewkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > dbsize ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expire ( K key , int tlseconds ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expireat ( K key , long epochtimeMillisecs ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > tl ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , byte [ ] value ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , byte [ ] value , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > llen ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > lrange ( K listkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > ltrim ( K listkey , long keepFrom , long keepTo ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lindex ( K listkey , long index ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , byte [ ] member ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > scard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sinter ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sinterstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sunion ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sunionstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sdiff ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sdiffstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > smembers ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > srandmember ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > spop ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrange ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrevrange ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangeSubset ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrevrangeSubset ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcount ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyrank ( K setkey , long minRank , long maxRank ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , String string ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , Number number ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > hset ( K key , K entry , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > hget ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hexists ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hdel ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > hlen ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hkeys ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hvals ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Map < String , byte [ ] > > hgetall ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > flushdb ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > flushall ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > move ( K key , int dbIndex ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Sort sort ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > save ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > bgsave ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < String > bgrewriteaof ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lastsave ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Map < String , String > > info ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > slaveof ( String host , int port ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > slaveofnone ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > echo ( byte [ ] msg ) ; public < K extends Object > Future < byte [ ] > echo ( String msg ) ; public < K extends Object > Future < byte [ ] > echo ( Number msg ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K extends Object > Future < byte [ ] > echo ( String msg ) ; public < K extends Object > Future < byte [ ] > echo ( Number msg ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K extends Object > Future < byte [ ] > echo ( Number msg ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K extends Object , T extends Serializable > Future < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
< K extends Object > Sort BY ( K pattern ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
< K extends Object > Sort GET ( K pattern ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
Sort LIMIT ( long from , long count ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
Sort DESC ( ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
Sort ALPHA ( ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
public static void main ( String [ ] args ) { } 
public < K extends Object > FutureString bgrewriteaof ( ) { Future < Response > futureResponse = his . queueRequest ( Command . BGREWRITEAOF ) ; return new FutureString ( futureResponse ) ; } 
public < K extends Object > Future < ResponseStatus > slaveof ( String host , int port ) { byte [ ] hostbytes = null ; if ( ( hostbytes = JRedisSupport . getKeyBytes ( host ) ) = = null ) throw new IllegalArgumentException ( " invalid host => [ " + host + " ] " ) ; byte [ ] portbytes = null ; if ( ( portbytes = Convert . oBytes ( port ) ) = = null ) throw new IllegalArgumentException ( " invalid port => [ " + port + " ] " ) ; return new FutureStatus ( his . queueRequest ( Command . SLAVEOF , hostbytes , portbytes ) ) ; } 
public < K extends Object > Future < ResponseStatus > slaveofnone ( ) { return new FutureStatus ( his . queueRequest ( Command . SLAVEOF , " no " . getBytes ( ) , " one " . getBytes ( ) ) ) ; } 
public < K extends Object > FutureStatus rename ( K oldkey , K newkey ) { byte [ ] oldkeydata = null ; if ( ( oldkeydata = JRedisSupport . getKeyBytes ( oldkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; byte [ ] newkeydata = null ; if ( ( newkeydata = JRedisSupport . getKeyBytes ( newkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; return new FutureStatus ( his . queueRequest ( Command . RENAME , oldkeydata , newkeydata ) ) ; } 
public < K extends Object > Future < Boolean > renamenx ( K oldkey , K newkey ) { byte [ ] oldkeydata = null ; if ( ( oldkeydata = JRedisSupport . getKeyBytes ( oldkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; byte [ ] newkeydata = null ; if ( ( newkeydata = JRedisSupport . getKeyBytes ( newkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . RENAMENX , oldkeydata , newkeydata ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > FutureLong rpush ( K key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureLong ( his . queueRequest ( Command . RPUSH , keybytes , value ) ) ; } 
public < K extends Object > FutureLong rpushx ( K key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureLong ( his . queueRequest ( Command . RPUSHX , keybytes , value ) ) ; } 
public < K extends Object > FutureLong lpushx ( K key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureLong ( his . queueRequest ( Command . LPUSHX , keybytes , value ) ) ; } 
public < K extends Object > FutureLong linsert ( K key , boolean after , byte [ ] oldvalue , byte [ ] newvalue ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] bulk = new byte [ 4 ] [ ] ; bulk [ 0 ] = keybytes ; bulk [ 1 ] = ( after ? " AFTER " : " BEFORE " ) . getBytes ( ) ; bulk [ 2 ] = oldvalue ; bulk [ 3 ] = newvalue ; return new FutureLong ( his . queueRequest ( Command . LINSERT , bulk ) ) ; } 
public < K extends Object > FutureLong linsertAfter ( K key , byte [ ] oldvalue , byte [ ] newvalue ) { return linsert ( key , rue , oldvalue , newvalue ) ; } 
public < K extends Object > FutureLong linsertBefore ( K key , byte [ ] oldvalue , byte [ ] newvalue ) { return linsert ( key , false , oldvalue , newvalue ) ; } 
public < K extends Object > FutureByteArray rpoplpush ( String srcList , String destList ) { byte [ ] srckeybytes = null ; if ( ( srckeybytes = JRedisSupport . getKeyBytes ( srcList ) ) = = null ) throw new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; byte [ ] destkeybytes = null ; if ( ( destkeybytes = JRedisSupport . getKeyBytes ( destList ) ) = = null ) throw new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . RPOPLPUSH , srckeybytes , destkeybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > FutureLong rpush ( K key , String value ) { } 
public < K extends Object , T extends Serializable > FutureLong rpush ( K key , T value ) { return rpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > sadd ( K key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SADD , keybytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > sadd ( K key , Number value ) { return sadd ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K key , T value ) { return sadd ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > zadd ( K key , double score , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZADD , keybytes , Convert . oBytes ( score ) , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > zadd ( K key , double score , String value ) { return zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > zadd ( K key , double score , Number value ) { return zadd ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K key , double score , T value ) { return zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Double > zincrby ( K key , double score , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZINCRBY , keybytes , Convert . oBytes ( score ) , member ) ; return new FutureDouble ( futureResponse ) ; } 
public < K extends Object > Future < Double > zincrby ( K key , double score , String value ) { return zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Double > zincrby ( K key , double score , Number value ) { return zincrby ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Double > zincrby ( K key , double score , T value ) { return zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > FutureStatus set ( K key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; return new FutureStatus ( his . queueRequest ( Command . SET , keybytes , value ) ) ; } 
public < K extends Object , T extends Serializable > FutureStatus set ( K key , T value ) { return set ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . GETSET , keybytes , value ) ; return new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > getset ( K key , Number value ) { return getset ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T value ) { return getset ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SETNX , keybytes , value ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > setnx ( K key , Number value ) { return setnx ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T value ) { return setnx ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Long > append ( K key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . APPEND , keybytes , value ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > append ( K key , Number value ) { return append ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Long > append ( K key , T value ) { return append ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > sismember ( K key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SISMEMBER , keybytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > sismember ( K key , String value ) { return sismember ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > sismember ( K key , Number numberValue ) { return sismember ( key , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K key , T object ) { return sismember ( key , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , byte [ ] member ) { byte [ ] srcKeyBytes = null ; if ( ( srcKeyBytes = JRedisSupport . getKeyBytes ( srcKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + srcKey + " ] " ) ; byte [ ] destKeyBytes = null ; if ( ( destKeyBytes = JRedisSupport . getKeyBytes ( destKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + destKey + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SMOVE , srcKeyBytes , destKeyBytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) { return smove ( srcKey , destKey , DefaultCodec . encode ( stringValue ) ) ; } 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) { return smove ( srcKey , destKey , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) { return smove ( srcKey , destKey , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > Future < Boolean > hset ( K key , K field , byte [ ] value ) { byte [ ] keyBytes = null ; if ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] entryBytes = null ; if ( ( entryBytes = JRedisSupport . getKeyBytes ( field ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + field + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HSET , keyBytes , entryBytes , value ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > hset ( K key , K field , String stringValue ) { return hset ( key , field , DefaultCodec . encode ( stringValue ) ) ; } 
public < K extends Object > Future < Boolean > hset ( K key , K field , Number numberValue ) { return hset ( key , field , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > hset ( K key , K field , T object ) { return hset ( key , field , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > Future < byte [ ] > hget ( K key , K entry ) { byte [ ] keyBytes = null ; if ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] entryBytes = null ; if ( ( entryBytes = JRedisSupport . getKeyBytes ( entry ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + entry + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HGET , keyBytes , entryBytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > hexists ( K key , K entry ) { byte [ ] keyBytes = null ; if ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] entryBytes = null ; if ( ( entryBytes = JRedisSupport . getKeyBytes ( entry ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + entry + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HEXISTS , keyBytes , entryBytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > hdel ( K key , K entry ) { byte [ ] keyBytes = null ; if ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] entryBytes = null ; if ( ( entryBytes = JRedisSupport . getKeyBytes ( entry ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + entry + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HDEL , keyBytes , entryBytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Long > hlen ( K key ) { byte [ ] keyBytes = null ; if ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HLEN , keyBytes ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < List < byte [ ] > > hkeys ( K key ) { byte [ ] keyBytes = null ; if ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HKEYS , keyBytes ) ; return new FutureKeyList ( futureResponse ) ; } 
public < K extends Object > Future < List < byte [ ] > > hvals ( K key ) { byte [ ] keyBytes = null ; if ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HKEYS , keyBytes ) ; return new FutureByteArrayList ( futureResponse ) ; } 
public < K extends Object > Future < Map < String , byte [ ] > > hgetall ( K key ) { byte [ ] keyBytes = null ; if ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HGETALL , keyBytes ) ; return new FutureDataDictionary ( futureResponse ) ; } 
public < K extends Object > Future < Long > incr ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . INCR , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > incrby ( K key , int delta ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . INCRBY , keybytes , Convert . oBytes ( delta ) ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > decr ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . DECR , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > decrby ( K key , int delta ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . DECRBY , keybytes , Convert . oBytes ( delta ) ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > llen ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . LLEN , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > scard ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SCARD , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > zcard ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZCARD , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > srandmember ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SRANDMEMBER , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > spop ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SPOP , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < Long > dbsize ( ) { Future < Response > futureResponse = his . queueRequest ( Command . DBSIZE ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > lastsave ( ) { Future < Response > futureResponse = his . queueRequest ( Command . LASTSAVE ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > get ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . GET , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > lindex ( K key , long index ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . LINDEX , keybytes , Convert . oBytes ( index ) ) ; return new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > lpop ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . LPOP , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > rpop ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . RPOP , keybytes ) ; return new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > randomkey ( ) { Future < Response > futureResponse = his . queueRequest ( Command . RANDOMKEY ) ; return new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < RedisType > ype ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; return new FutureRedisType ( his . queueRequest ( Command . TYPE , keybytes ) ) ; } 
public < K extends Object > Future < ObjectInfo > debug ( K key ) { byte [ ] keybytes = JRedisSupport . getKeyBytes ( key ) ; } 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) { if ( null = = keys | | keys . length = = 0 ) hrow new IllegalArgumentException ( " no keys specified " ) ; byte [ ] keydata = null ; byte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; int i = 0 ; for ( String k : keys ) { if ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . MGET , keybytes ) ) ; } 
public < K extends Object > FutureStatus mset ( Map < String , byte [ ] > keyValueMap ) { KeyCodec codec = DefaultKeyCodec . provider ( ) ; byte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; int i = 0 ; for ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { mappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; mappings [ i + + ] = e . getValue ( ) ; } return mset ( mappings ) ; } 
public < K extends Object > FutureStatus mset ( KeyValueSet . ByteArrays keyValueMap ) { return mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > FutureStatus mset ( KeyValueSet . Objects < T > keyValueMap ) { return mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) { KeyCodec codec = DefaultKeyCodec . provider ( ) ; byte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; int i = 0 ; for ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { mappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; mappings [ i + + ] = e . getValue ( ) ; } return msetnx ( mappings ) ; } 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays keyValueMap ) { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings keyValueMap ) { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers keyValueMap ) { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > keyValueMap ) { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > smembers ( K key ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " null key. " ) ; return new FutureByteArrayList ( his . queueRequest ( Command . SMEMBERS , keydata ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > keys ( K pattern ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( pattern ) ) = = null ) throw new IllegalArgumentException ( " null key. " ) ; Future < Response > futureResponse = his . queueRequest ( Command . KEYS , keydata ) ; return new FutureKeyList ( futureResponse ) ; } 
public < K extends Object > Future < Long > keystolist ( String pattern , String listname ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( pattern ) ) = = null ) throw new IllegalArgumentException ( " null key. " ) ; byte [ ] listnamedata = null ; if ( ( listnamedata = JRedisSupport . getKeyBytes ( listname ) ) = = null ) throw new IllegalArgumentException ( " null list name. " ) ; return new FutureLong ( his . queueRequest ( Command . KEYSTOLIST , keydata , listnamedata ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > lrange ( K key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureByteArrayList ( his . queueRequest ( Command . LRANGE , keybytes , fromBytes , oBytes ) ) ; } 
public < K extends Object > Future < byte [ ] > substr ( K key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureByteArray ( his . queueRequest ( Command . SUBSTR , keybytes , fromBytes , oBytes ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > zrange ( K key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureByteArrayList ( his . queueRequest ( Command . ZRANGE , keybytes , fromBytes , oBytes ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > zrangebyscore ( K key , double minScore , double maxScore ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minScore ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxScore ) ; return new FutureByteArrayList ( his . queueRequest ( Command . ZRANGEBYSCORE , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public < K extends Object > Future < Long > zremrangebyscore ( K key , double minScore , double maxScore ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minScore ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxScore ) ; return new FutureLong ( his . queueRequest ( Command . ZREMRANGEBYSCORE , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public < K extends Object > Future < Long > zcount ( K key , double minScore , double maxScore ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minScore ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxScore ) ; return new FutureLong ( his . queueRequest ( Command . ZCOUNT , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public < K extends Object > Future < Long > zremrangebyrank ( K key , long minRank , long maxRank ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minRank ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxRank ) ; return new FutureLong ( his . queueRequest ( Command . ZREMRANGEBYRANK , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > zrevrange ( K key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureByteArrayList ( his . queueRequest ( Command . ZREVRANGE , keybytes , fromBytes , oBytes ) ) ; } 
public < K extends Object > Future < List < ZSetEntry > > zrangeSubset ( K key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureZSetList ( his . queueRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public < K extends Object > Future < List < ZSetEntry > > zrevrangeSubset ( K key , long from , long o ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; return new FutureZSetList ( his . queueRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public < K extends Object > Sort sort ( final K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisFutureSupport client = his ; Sort sortQuery = new SortSupport ( keybytes ) { } 
public < K extends Object > Future < List < byte [ ] > > sinter ( K set1 , K . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( K k : sets ) { if ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . SINTER , keybytes ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > sunion ( K set1 , K . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( K k : sets ) { if ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . SUNION , keybytes ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > sdiff ( K set1 , K . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ sets . length + 1 ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( K k : sets ) { if ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } return new FutureByteArrayList ( his . queueRequest ( Command . SDIFF , keybytes ) ) ; } 
public < K extends Object > FutureStatus sinterstore ( K dest , K . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( K k : sets ) { if ( ( setdata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } return new FutureStatus ( his . queueRequest ( Command . SINTERSTORE , setbytes ) ) ; } 
public < K extends Object > FutureStatus sunionstore ( K dest , K . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( K k : sets ) { if ( ( setdata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } return new FutureStatus ( his . queueRequest ( Command . SUNIONSTORE , setbytes ) ) ; } 
public < K extends Object > FutureStatus sdiffstore ( K dest , K . . . sets ) { byte [ ] keydata = null ; if ( ( keydata = JRedisSupport . getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( K k : sets ) { if ( ( setdata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } return new FutureStatus ( his . queueRequest ( Command . SDIFFSTORE , setbytes ) ) ; } 
public < K extends Object > Future < Long > del ( K . . . keys ) { if ( null = = keys | | keys . length = = 0 ) hrow new IllegalArgumentException ( " no keys specified " ) ; byte [ ] keydata = null ; byte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; int i = 0 ; for ( K k : keys ) { if ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; keybytes [ i + + ] = keydata ; } Future < Response > futureResponse = his . queueRequest ( Command . DEL , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > exists ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . EXISTS , keybytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > FutureLong lpush ( K key , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value " ) ; return new FutureLong ( his . queueRequest ( Command . LPUSH , keybytes , value ) ) ; } 
public < K extends Object , T extends Serializable > FutureLong lpush ( K key , T value ) { return lpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Long > lrem ( K key , byte [ ] value , int count ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] countBytes = Convert . oBytes ( count ) ; Future < Response > futureResponse = his . queueRequest ( Command . LREM , keybytes , value , countBytes ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > lrem ( K listKey , String value , int count ) { return lrem ( listKey , DefaultCodec . encode ( value ) , count ) ; } 
public < K extends Object > Future < Long > lrem ( K listKey , Number numberValue , int count ) { return lrem ( listKey , String . valueOf ( numberValue ) . getBytes ( ) , count ) ; } 
public < K extends Object , T extends Serializable > Future < Long > lrem ( K listKey , T object , int count ) { return lrem ( listKey , DefaultCodec . encode ( object ) , count ) ; } 
public < K extends Object > FutureStatus lset ( K key , long index , byte [ ] value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] indexBytes = Convert . oBytes ( index ) ; return new FutureStatus ( his . queueRequest ( Command . LSET , keybytes , indexBytes , value ) ) ; } 
public < K extends Object > FutureStatus lset ( K key , long index , String value ) { return lset ( key , index , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > FutureStatus lset ( K key , long index , Number numberValue ) { return lset ( key , index , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > FutureStatus lset ( K key , long index , T object ) { return lset ( key , index , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > Future < Boolean > move ( K key , int dbIndex ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . MOVE , keybytes , Convert . oBytes ( dbIndex ) ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > srem ( K key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SREM , keybytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > srem ( K key , Number value ) { return srem ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > srem ( K key , T value ) { return srem ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > zrem ( K key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZREM , keybytes , member ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > zrem ( K key , Number value ) { return zrem ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K key , T value ) { return zrem ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Double > zscore ( K key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZSCORE , keybytes , member ) ; return new FutureDouble ( futureResponse ) ; } 
public < K extends Object > Future < Double > zscore ( K key , String value ) { return zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Double > zscore ( K key , Number value ) { return zscore ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Double > zscore ( K key , T value ) { return zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Long > zrank ( K key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZRANK , keybytes , member ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > zrank ( K key , Number value ) { return zrank ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Long > zrank ( K key , T value ) { return zrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Long > zrevrank ( K key , byte [ ] member ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ZREVRANK , keybytes , member ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > zrevrank ( K key , String value ) { return zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Long > zrevrank ( K key , Number value ) { return zrevrank ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K key , T value ) { return zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > FutureStatus ltrim ( K key , long keepFrom , long keepTo ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( keepFrom ) ; byte [ ] oBytes = Convert . oBytes ( keepTo ) ; return new FutureStatus ( his . queueRequest ( Command . LTRIM , keybytes , fromBytes , oBytes ) ) ; } 
public < K extends Object > Future < Boolean > expire ( K key , int tlseconds ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] tlbytes = Convert . oBytes ( tlseconds ) ; Future < Response > futureResponse = his . queueRequest ( Command . EXPIRE , keybytes , tlbytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > expireat ( K key , long epochtime ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long expiretime = TimeUnit . SECONDS . convert ( epochtime , TimeUnit . MILLISECONDS ) ; byte [ ] expiretimeBytes = Convert . oBytes ( expiretime ) ; Future < Response > futureResponse = his . queueRequest ( Command . EXPIREAT , keybytes , expiretimeBytes ) ; return new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Long > tl ( K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . TTL , keybytes ) ; return new FutureLong ( futureResponse ) ; } 
public List < byte [ ] > get ( ) hrows InterruptedException , ExecutionException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( ) ; List < byte [ ] > multibulkdata = resp . getMultiBulkData ( ) ; return multibulkdata; } 
public List < byte [ ] > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( imeout , unit ) ; List < byte [ ] > multibulkdata = resp . getMultiBulkData ( ) ; return multibulkdata; } 
private Map < String , String > getResultMap ( BulkResponse resp ) { StringTokenizer okenizer = new StringTokenizer ( new String ( resp . getBulkData ( ) ) , " r " ) ; Map < String , String > infomap = new HashMap < String , String > ( 12 ) ; while ( okenizer . hasMoreTokens ( ) ) { String info = okenizer . nextToken ( ) ; int c = info . indexOf ( ':' ) ; String _key = info . substring ( 0 , c ) ; String _value = info . substring ( c + 1 ) ; infomap . put ( _key , _value ) ; } return infomap ; } 
public < K extends Object > Future < byte [ ] > echo ( byte [ ] msg ) { if ( msg = = null ) throw new IllegalArgumentException ( " invalid value for echo => [null] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . ECHO , msg ) ; return new FutureByteArray ( futureResponse ) ; 
public < K extends Object , T extends Serializable > Future < byte [ ] > echo ( T msg ) { return echo ( DefaultCodec . encode ( msg ) ) ; } 
public < K extends Object > String bgrewriteaof ( ) hrows RedisException { String value = null ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . BGREWRITEAOF ) ; value = valResponse . getStringValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > JRedis flushall ( ) hrows RedisException { this . serviceRequest ( Command . FLUSHALL ) . getStatus ( ) ; return his ; } 
public < K extends Object > JRedis flushdb ( ) hrows RedisException { this . serviceRequest ( Command . FLUSHDB ) . getStatus ( ) ; return his ; } 
public < K extends Object > void slaveof ( String host , int port ) hrows RedisException { byte [ ] hostbytes = null ; if ( ( hostbytes = getKeyBytes ( host ) ) = = null ) throw new IllegalArgumentException ( " invalid host => [ " + host + " ] " ) ; byte [ ] portbytes = null ; if ( ( portbytes = Convert . oBytes ( port ) ) = = null ) throw new IllegalArgumentException ( " invalid port => [ " + port + " ] " ) ; this . serviceRequest ( Command . SLAVEOF , hostbytes , portbytes ) ; } 
public < K extends Object > void slaveofnone ( ) hrows RedisException { this . serviceRequest ( Command . SLAVEOF , " no " . getBytes ( ) , " one " . getBytes ( ) ) ; } 
public < K extends Object > void rename ( K oldkey , K newkey ) hrows RedisException { byte [ ] oldkeydata = null ; if ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; byte [ ] newkeydata = null ; if ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; this . serviceRequest ( Command . RENAME , oldkeydata , newkeydata ) ; } 
public < K extends Object > boolean renamenx ( K oldkey , K newkey ) hrows RedisException { byte [ ] oldkeydata = null ; if ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; byte [ ] newkeydata = null ; if ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; boolean value = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . RENAMENX , oldkeydata , newkeydata ) ; value = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) throws RedisException { byte [ ] srckeybytes = null ; if ( ( srckeybytes = getKeyBytes ( srcList ) ) = = null ) throw new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; byte [ ] destkeybytes = null ; if ( ( destkeybytes = getKeyBytes ( destList ) ) = = null ) throw new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . RPOPLPUSH , srckeybytes , destkeybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; 
public < K extends Object > void rpush ( K key , byte [ ] value ) throws RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value for list op " ) ; this . serviceRequest ( Command . RPUSH , keybytes , value ) ; } 
public < K extends Object > void rpush ( K key , String value ) hrows RedisException { } 
public < K extends Object > void rpush ( K key , Number value ) hrows RedisException { rpush ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > void rpush ( K key , T value ) hrows RedisException { rpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean sadd ( K key , byte [ ] member ) throws RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean res = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SADD , keybytes , member ) ; res = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return res ; } 
public < K extends Object > boolean sadd ( K key , String value ) hrows RedisException { return sadd ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean sadd ( K key , Number value ) hrows RedisException { return sadd ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean sadd ( K key , T value ) hrows RedisException { return sadd ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean zadd ( K key , double score , byte [ ] member ) throws RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean res = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . ZADD , keybytes , Convert . oBytes ( score ) , member ) ; res = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return res ; } 
public < K extends Object > boolean zadd ( K key , double score , String value ) hrows RedisException { return zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean zadd ( K key , double score , Number value ) hrows RedisException { return zadd ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean zadd ( K key , double score , T value ) hrows RedisException { return zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Double zincrby ( K key , double score , byte [ ] member ) throws RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Double resvalue = null ; try { BulkResponse bulkResponse = ( BulkResponse ) his . serviceRequest ( Command . ZINCRBY , keybytes , Convert . oBytes ( score ) , member ) ; if ( bulkResponse . getBulkData ( ) ! = null ) resvalue = Convert . oDouble ( bulkResponse . getBulkData ( ) ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > Double zincrby ( K key , double score , String value ) hrows RedisException { return zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Double zincrby ( K key , double score , Number value ) hrows RedisException { return zincrby ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Double zincrby ( K key , double score , T value ) hrows RedisException { return zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > void set ( K key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; this . serviceRequest ( Command . SET , keybytes , value ) ; } 
public < K extends Object > void set ( K key , Number value ) hrows RedisException { set ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > void set ( K key , T value ) hrows RedisException { set ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > byte [ ] getset ( K key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . GETSET , keybytes , value ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public < K extends Object > byte [ ] getset ( K key , String value ) hrows RedisException { return getset ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > byte [ ] getset ( K key , Number value ) hrows RedisException { return getset ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > byte [ ] getset ( K key , T value ) hrows RedisException { return getset ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean setnx ( K key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SETNX , keybytes , value ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > boolean setnx ( K key , String value ) hrows RedisException { return setnx ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean setnx ( K key , Number value ) hrows RedisException { return setnx ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean setnx ( K key , T value ) hrows RedisException { return setnx ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long append ( K key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long resvalue = - 1 ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . APPEND , keybytes , value ) ; resvalue = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > long append ( K key , String value ) hrows RedisException { return append ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long append ( K key , Number value ) hrows RedisException { return append ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > long append ( K key , T value ) hrows RedisException { return append ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean msetnx ( Map < String , byte [ ] > keyValueMap ) hrows RedisException { KeyCodec < Object > codec = DefaultKeyCodec . provider ( ) ; byte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; int i = 0 ; for ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { mappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; mappings [ i + + ] = e . getValue ( ) ; } return msetnx ( mappings ) ; } 
public < K extends Object > boolean msetnx ( KeyValueSet . ByteArrays keyValueMap ) hrows RedisException { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > boolean msetnx ( KeyValueSet . Strings keyValueMap ) hrows RedisException { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > boolean msetnx ( KeyValueSet . Numbers keyValueMap ) hrows RedisException { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > keyValueMap ) hrows RedisException { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > boolean sismember ( K key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean value = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SISMEMBER , keybytes , member ) ; value = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > boolean sismember ( K key , String value ) hrows RedisException { return sismember ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean sismember ( K key , Number numberValue ) hrows RedisException { return sismember ( key , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean sismember ( K key , T object ) hrows RedisException { return sismember ( key , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) hrows RedisException { byte [ ] srcKeyBytes = null ; if ( ( srcKeyBytes = getKeyBytes ( srcKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + srcKey + " ] " ) ; byte [ ] destKeyBytes = null ; if ( ( destKeyBytes = getKeyBytes ( destKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + destKey + " ] " ) ; boolean value = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SMOVE , srcKeyBytes , destKeyBytes , member ) ; value = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException { return smove ( srcKey , destKey , DefaultCodec . encode ( stringValue ) ) ; } 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException { return smove ( srcKey , destKey , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException { return smove ( srcKey , destKey , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > boolean hset ( K hashKey , String hashField , byte [ ] value ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; boolean response = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . HSET , hashKeyBytes , hashFieldBytes , value ) ; response = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return response ; } 
public < K extends Object > boolean hset ( K key , String field , String stringValue ) hrows RedisException { return hset ( key , field , DefaultCodec . encode ( stringValue ) ) ; } 
public < K extends Object > boolean hset ( K key , String field , Number numberValue ) hrows RedisException { return hset ( key , field , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean hset ( K key , String field , T object ) hrows RedisException { return hset ( key , field , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > byte [ ] hget ( K hashKey , String hashField ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . HGET , hashKeyBytes , hashFieldBytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public < K extends Object > boolean hexists ( K hashKey , String hashField ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; boolean resp = false ; try { ValueResponse response = ( ValueResponse ) his . serviceRequest ( Command . HEXISTS , hashKeyBytes , hashFieldBytes ) ; resp = response . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public < K extends Object > boolean hdel ( K hashKey , String hashField ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; boolean resp = false ; try { ValueResponse response = ( ValueResponse ) his . serviceRequest ( Command . HDEL , hashKeyBytes , hashFieldBytes ) ; resp = response . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public < K extends Object > long hlen ( K hashKey ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; long resp = 0 ; try { ValueResponse response = ( ValueResponse ) his . serviceRequest ( Command . HLEN , hashKeyBytes ) ; resp = response . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public < K extends Object > List < String > hkeys ( K hashKey ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; List < String > resp = null ; try { MultiBulkResponse response = ( MultiBulkResponse ) his . serviceRequest ( Command . HKEYS , hashKeyBytes ) ; if ( null ! = response . getMultiBulkData ( ) ) resp = DefaultCodec . oStr ( response . getMultiBulkData ( ) ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public < K extends Object > List < byte [ ] > hvals ( K hashKey ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; List < byte [ ] > resp = null ; try { MultiBulkResponse response = ( MultiBulkResponse ) his . serviceRequest ( Command . HVALS , hashKeyBytes ) ; resp = response . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public < K extends Object > Map < String , byte [ ] > hgetall ( K hashKey ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; Map < String , byte [ ] > resp = null ; try { MultiBulkResponse response = ( MultiBulkResponse ) his . serviceRequest ( Command . HGETALL , hashKeyBytes ) ; List < byte [ ] > bulkdata = response . getMultiBulkData ( ) ; if ( null ! = bulkdata ) { resp = new HashMap < String , byte [ ] > ( bulkdata . size ( ) / 2 ) ; for ( int i = 0 ; i < bulkdata . size ( ) ; i + = 2 ) { resp . put ( DefaultCodec . oStr ( bulkdata . get ( i ) ) , bulkdata . get ( i + 1 ) ) ; } } } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public < K extends Object > long incr ( K key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . INCR , keybytes ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > long incrby ( K key , int delta ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . INCRBY , keybytes , Convert . oBytes ( delta ) ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > long decr ( K key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MAX_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . DECR , keybytes ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > long decrby ( K key , int delta ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MAX_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . DECRBY , keybytes , Convert . oBytes ( delta ) ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > long llen ( K key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Integer . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . LLEN , keybytes ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > long scard ( K key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SCARD , keybytes ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > long zcard ( K key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . ZCARD , keybytes ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > byte [ ] srandmember ( K setkey ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( setkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + setkey + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . SRANDMEMBER , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public < K extends Object > byte [ ] spop ( K setkey ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( setkey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + setkey + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . SPOP , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public < K extends Object > long dbsize ( ) hrows RedisException { long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . DBSIZE ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > long lastsave ( ) hrows RedisException { long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . LASTSAVE ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > byte [ ] get ( K key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . GET , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public < K extends Object > byte [ ] lindex ( K key , long index ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . LINDEX , keybytes , Convert . oBytes ( index ) ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public < K extends Object > byte [ ] lpop ( K key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . LPOP , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public < K extends Object > byte [ ] rpop ( K key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . RPOP , keybytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public byte [ ] randomkey ( ) hrows RedisException { byte [ ] bulkData = null ; } 
public < K extends Object > RedisType ype ( K key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; RedisType type = null ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . TYPE , keybytes ) ; String stringValue = valResponse . getStringValue ( ) ; type = RedisType . valueOf ( stringValue ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return ype ; } 
public < K extends Object > ObjectInfo debug ( K key ) hrows RedisException { byte [ ] keybytes = getKeyBytes ( key ) ; } 
public < K extends Object > Map < String , String > info ( ) hrows RedisException { byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . INFO ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } StringTokenizer okenizer = new StringTokenizer ( new String ( bulkData ) , " r " ) ; Map < String , String > infomap = new HashMap < String , String > ( 12 ) ; while ( okenizer . hasMoreTokens ( ) ) { String info = okenizer . nextToken ( ) ; int c = info . indexOf ( ':' ) ; String key = info . substring ( 0 , c ) ; String value = info . substring ( c + 1 ) ; infomap . put ( key , value ) ; } return infomap ; } 
public < K extends Object > void mset ( Map < String , byte [ ] > keyValueMap ) hrows RedisException { KeyCodec < Object > codec = DefaultKeyCodec . provider ( ) ; byte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; int i = 0 ; for ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { mappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; mappings [ i + + ] = e . getValue ( ) ; } mset ( mappings ) ; } 
public < K extends Object > void mset ( KeyValueSet . ByteArrays keyValueMap ) hrows RedisException { mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > void mset ( KeyValueSet . Strings keyValueMap ) hrows RedisException { mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > void mset ( KeyValueSet . Numbers keyValueMap ) hrows RedisException { mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > void mset ( KeyValueSet . Objects < T > keyValueMap ) hrows RedisException { mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > List < byte [ ] > mget ( String . . . keys ) hrows RedisException { if ( null = = keys | | keys . length = = 0 ) hrow new IllegalArgumentException ( " no keys specified " ) ; byte [ ] keydata = null ; byte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; int i = 0 ; for ( String k : keys ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . MGET , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > List < byte [ ] > smembers ( K key ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( key ) ) = = null ) throw new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . SMEMBERS , keydata ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > List < String > keys ( K pattern ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( pattern ) ) = = null ) throw new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . KEYS , keydata ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return DefaultCodec . oStr ( multiBulkData ) ; / * 
public < K extends Object > List < byte [ ] > lrange ( K key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . LRANGE , keybytes , fromBytes , oBytes ) ; multiBulkData = multiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > byte [ ] substr ( K key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; byte [ ] bulkData = null ; try { BulkResponse bulkResponse = ( BulkResponse ) his . serviceRequest ( Command . SUBSTR , keybytes , fromBytes , oBytes ) ; bulkData = bulkResponse . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public < K extends Object > List < byte [ ] > zrangebyscore ( K key , double minScore , double maxScore ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( minScore ) ; byte [ ] oBytes = Convert . oBytes ( maxScore ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZRANGEBYSCORE , keybytes , fromBytes , oBytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > long zremrangebyscore ( K key , double minScore , double maxScore ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( minScore ) ; byte [ ] oBytes = Convert . oBytes ( maxScore ) ; long resp = Long . MIN_VALUE ; try { ValueResponse valueResponse = ( ValueResponse ) his . serviceRequest ( Command . ZREMRANGEBYSCORE , keybytes , fromBytes , oBytes ) ; resp = valueResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public < K extends Object > long zcount ( K key , double minScore , double maxScore ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( minScore ) ; byte [ ] oBytes = Convert . oBytes ( maxScore ) ; long resp = Long . MIN_VALUE ; try { ValueResponse valueResponse = ( ValueResponse ) his . serviceRequest ( Command . ZCOUNT , keybytes , fromBytes , oBytes ) ; resp = valueResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public < K extends Object > long zremrangebyrank ( K key , long minRank , long maxRank ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( minRank ) ; byte [ ] oBytes = Convert . oBytes ( maxRank ) ; long resp = Long . MIN_VALUE ; try { ValueResponse valueResponse = ( ValueResponse ) his . serviceRequest ( Command . ZREMRANGEBYRANK , keybytes , fromBytes , oBytes ) ; resp = valueResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public < K extends Object > List < byte [ ] > zrange ( K key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZRANGE , keybytes , fromBytes , oBytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > List < byte [ ] > zrevrange ( K key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZREVRANGE , keybytes , fromBytes , oBytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > List < ZSetEntry > zrangeSubset ( K key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < ZSetEntry > list = null ; try { MultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Option . WITHSCORES . bytes ) ; List < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; if ( null ! = bulkData ) { list = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; for ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { list . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return list ; } 
public < K extends Object > List < ZSetEntry > zrevrangeSubset ( K key , long from , long o ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( from ) ; byte [ ] oBytes = Convert . oBytes ( o ) ; List < ZSetEntry > list = null ; try { MultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , oBytes , Command . Option . WITHSCORES . bytes ) ; List < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; if ( null ! = bulkData ) { list = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; for ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { list . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return list ; } 
public < K extends Object > Sort sort ( final K key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisSupport client = his ; } 
public < K extends Object > List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . SINTER , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . SUNION , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( String k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . SDIFF , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > void sinterstore ( String dest , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } this . serviceRequest ( Command . SINTERSTORE , setbytes ) ; } 
public < K extends Object > void sunionstore ( String dest , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } this . serviceRequest ( Command . SUNIONSTORE , setbytes ) ; } 
public < K extends Object > void sdiffstore ( String dest , String . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( String k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } this . serviceRequest ( Command . SDIFFSTORE , setbytes ) ; } 
public < K extends Object > long del ( K . . . keys ) hrows RedisException { if ( null = = keys | | keys . length = = 0 ) hrow new IllegalArgumentException ( " no keys specified " ) ; byte [ ] keydata = null ; byte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; int i = 0 ; for ( K k : keys ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; keybytes [ i + + ] = keydata ; } long resvalue = - 1 ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . DEL , keybytes ) ; resvalue = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > boolean exists ( K key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . EXISTS , keybytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > void lpush ( K key , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; if ( value = = null ) throw new IllegalArgumentException ( " null value for list op " ) ; this . serviceRequest ( Command . LPUSH , keybytes , value ) ; } 
public < K extends Object > void lpush ( K key , String value ) hrows RedisException { lpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > void lpush ( K key , Number value ) hrows RedisException { lpush ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > void lpush ( K key , T value ) hrows RedisException { lpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long lrem ( K key , byte [ ] value , int count ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] countBytes = Convert . oBytes ( count ) ; long remcnt = 0 ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . LREM , keybytes , value , countBytes ) ; remcnt = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return remcnt ; } 
public < K extends Object > long lrem ( K listKey , String value , int count ) hrows RedisException { return lrem ( listKey , DefaultCodec . encode ( value ) , count ) ; } 
public < K extends Object > long lrem ( K listKey , Number numberValue , int count ) hrows RedisException { return lrem ( listKey , String . valueOf ( numberValue ) . getBytes ( ) , count ) ; } 
public < K extends Object , T extends Serializable > long lrem ( K listKey , T object , int count ) hrows RedisException { return lrem ( listKey , DefaultCodec . encode ( object ) , count ) ; } 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] indexBytes = Convert . oBytes ( index ) ; this . serviceRequest ( Command . LSET , keybytes , indexBytes , value ) ; } 
public < K extends Object > void lset ( K key , long index , String value ) hrows RedisException { lset ( key , index , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException { lset ( key , index , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException { lset ( key , index , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > boolean move ( K key , int dbIndex ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] oBytes = Convert . oBytes ( dbIndex ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . MOVE , keybytes , oBytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > boolean srem ( K key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SREM , keybytes , member ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > boolean srem ( K key , String value ) hrows RedisException { return srem ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean srem ( K key , Number value ) hrows RedisException { return srem ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean srem ( K key , T value ) hrows RedisException { return srem ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean zrem ( K key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . ZREM , keybytes , member ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > boolean zrem ( K key , String value ) hrows RedisException { return zrem ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean zrem ( K key , Number value ) hrows RedisException { return zrem ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean zrem ( K key , T value ) hrows RedisException { return zrem ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Double zscore ( K key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Double resvalue = null ; try { BulkResponse bulkResponse = ( BulkResponse ) his . serviceRequest ( Command . ZSCORE , keybytes , member ) ; if ( bulkResponse . getBulkData ( ) ! = null ) resvalue = Convert . oDouble ( bulkResponse . getBulkData ( ) ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > Double zscore ( K key , String value ) hrows RedisException { return zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Double zscore ( K key , Number value ) hrows RedisException { return zscore ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Double zscore ( K key , T value ) hrows RedisException { return zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long zrank ( K key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long resvalue = - 1 ; try { ValueResponse bulkResponse = ( ValueResponse ) his . serviceRequest ( Command . ZRANK , keybytes , member ) ; resvalue = bulkResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > long zrank ( K key , String value ) hrows RedisException { return zrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long zrank ( K key , Number value ) hrows RedisException { return zrank ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > long zrank ( K key , T value ) hrows RedisException { return zrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long zrevrank ( K key , byte [ ] member ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long resvalue = - 1 ; try { ValueResponse bulkResponse = ( ValueResponse ) his . serviceRequest ( Command . ZREVRANK , keybytes , member ) ; resvalue = bulkResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > long zrevrank ( K key , String value ) hrows RedisException { return zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long zrevrank ( K key , Number value ) hrows RedisException { return zrevrank ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > long zrevrank ( K key , T value ) hrows RedisException { return zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > void ltrim ( K key , long keepFrom , long keepTo ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( keepFrom ) ; byte [ ] oBytes = Convert . oBytes ( keepTo ) ; this . serviceRequest ( Command . LTRIM , keybytes , fromBytes , oBytes ) ; } 
public < K extends Object > boolean expire ( K key , int tlseconds ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] tlbytes = Convert . oBytes ( tlseconds ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . EXPIRE , keybytes , tlbytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > boolean expireat ( K key , long epochtime ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long expiretime = TimeUnit . SECONDS . convert ( epochtime , TimeUnit . MILLISECONDS ) ; byte [ ] expiretimeBytes = Convert . oBytes ( expiretime ) ; boolean resvalue = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . EXPIREAT , keybytes , expiretimeBytes ) ; resvalue = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resvalue ; } 
public < K extends Object > long tl ( K key ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; long value = Long . MIN_VALUE ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . TTL , keybytes ) ; value = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return value ; } 
public < K extends Object > byte [ ] echo ( byte [ ] value ) hrows RedisException { if ( value = = null ) throw new IllegalArgumentException ( " invalid echo value => [null] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . ECHO , value ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public < K extends Object > byte [ ] echo ( Number value ) hrows RedisException { return echo ( String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > byte [ ] echo ( T value ) hrows RedisException { return echo ( DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > JRedis multi ( ) hrows RedisException { throw new ProviderException ( " NOT IMPLEMENTED " ) ; works 
public < K extends Object > JRedis discard ( ) hrows RedisException { throw new ProviderException ( " NOT IMPLEMENTED " ) ; works 
public static < K extends Object > byte [ ] getKeyBytes ( K key ) hrows IllegalArgumentException { return DefaultKeyCodec . provider ( ) . encode ( key ) ; if(null == key) throw new IllegalArgumentException("key is null"); 
public byte [ ] encode ( K key ) { if ( null = = key ) hrow new IllegalArgumentException ( " key is null " ) ; if ( key instanceof String ) { return encodeString ( ( String ) key ) ; 
public static byte [ ] encodeString ( String key ) hrows IllegalArgumentException { if ( null = = key ) hrow new IllegalArgumentException ( " key is null " ) ; byte [ ] bytes = null ; if ( JRedisSupport . CacheKeys = = rue ) bytes = keyByteCache . get ( key ) ; if ( null = = bytes ) { } 
public K decode ( byte [ ] bytes ) { throw new RuntimeException ( " TODO Auto-generated Codec<K>#decode stub -- NOT IMPLEMENTED " ) ; } 
public byte [ ] encode ( K object ) { throw new RuntimeException ( " TODO Auto-generated Codec<K>#encode stub -- NOT IMPLEMENTED " ) ; } 
public boolean supports ( Class < ? > ype ) { throw new RuntimeException ( " TODO Auto-generated Codec<K>#supports stub -- NOT IMPLEMENTED " ) ; } 
public Sort ALPHA ( ) { } 
public Sort DESC ( ) { } 
public < K extends Object > Sort BY ( K pattern ) { } 
public < K extends Object > Sort GET ( K pattern ) { } 
public Sort LIMIT ( long from , long count ) { if ( from < 0 ) { hrow new ClientRuntimeException ( " from in LIMIT clause: " + from ) ; } if ( count < = 0 ) { hrow new ClientRuntimeException ( " count in LIMIT clause: " + from ) ; } } 
public < K extends Object > Sort STORE ( K destKey ) { Assert . notNull ( destKey , " deskKey is null " , ClientRuntimeException . class ) ; } 
private final byte [ ] [ ] buildSortCmd ( ) { ArrayList < byte [ ] > sortSpecs = new ArrayList < byte [ ] > ( ) ; sortSpecs . addAll ( bySpec ) ; sortSpecs . addAll ( limitSpec ) ; sortSpecs . addAll ( getSpec ) ; sortSpecs . addAll ( descSpec ) ; sortSpecs . addAll ( alphaSpec ) ; sortSpecs . addAll ( storeSpec ) ; byte [ ] [ ] sortCmd = new byte [ sortSpecs . size ( ) + 1 ] [ ] ; sortCmd [ 0 ] = keyBytes ; for ( int i = 0 ; i < sortSpecs . size ( ) ; i + + ) { sortCmd [ i + 1 ] = sortSpecs . get ( i ) ; } 
public List < byte [ ] > exec ( ) hrows IllegalStateException , RedisException { } 
public Future < List < byte [ ] > > execAsynch ( ) { } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; PendingRequest pendingResponse = null ; synchronized ( serviceLock ) { if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Request request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; if ( cmd ! = Command . QUIT ) request . write ( getOutputStream ( ) ) ; else { pendingQuit = rue ; isActive . set ( false ) ; return pendingResponse; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException } 
public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType ype ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > mget ( K . . . keys ) hrows RedisException { if ( null = = keys | | keys . length = = 0 ) hrow new IllegalArgumentException ( " no keys specified " ) ; byte [ ] keydata = null ; byte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; int i = 0 ; for ( K k : keys ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . MGET , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > List < byte [ ] > keys ( K pattern ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( pattern ) ) = = null ) throw new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . KEYS , keydata ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } /* 
public < K extends Object > Future < ResponseStatus > set ( K key , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , String stringValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , Number numberValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > set ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) ; public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > get ( K key ) ; public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public KeyValueSet < K , T > add ( K key , T value ) ; byte [ ] [ ] getMappings ( ) ; public interface ByteArrays < K extends Object > extends KeyValueSet < K , byte [ ] > { } public interface Numbers < K extends Object > extends KeyValueSet < K , Number > { } public interface Strings < K extends Object > extends KeyValueSet < K , String > { } public interface Objects < K extends Object , T extends Serializable > extends KeyValueSet < K , T > { } }} 
byte [ ] [ ] getMappings ( ) ; public interface ByteArrays < K extends Object > extends KeyValueSet < K , byte [ ] > { } public interface Numbers < K extends Object > extends KeyValueSet < K , Number > { } public interface Strings < K extends Object > extends KeyValueSet < K , String > { } public interface Objects < K extends Object , T extends Serializable > extends KeyValueSet < K , T > { } }} 
abstract byte [ ] oBytes ( T value ) ; public byte [ ] [ ] getMappings ( ) { KeyCodec < Object > codec = DefaultKeyCodec . provider ( ) ; byte [ ] [ ] mappings = new byte [ map . size ( ) * 2 ] [ ] ; int i = 0 ; for ( Entry < Object , T > e : map . entrySet ( ) ) { mappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; mappings [ i + + ] = oBytes ( e . getValue ( ) ) ; } return mappings ; } public KeyValueSet < K , T > add ( K key , T value ) { map . put ( key , value ) ; return his ; } }} 
public byte [ ] [ ] getMappings ( ) { KeyCodec < Object > codec = DefaultKeyCodec . provider ( ) ; byte [ ] [ ] mappings = new byte [ map . size ( ) * 2 ] [ ] ; int i = 0 ; for ( Entry < Object , T > e : map . entrySet ( ) ) { mappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; mappings [ i + + ] = oBytes ( e . getValue ( ) ) ; } return mappings ; } 
public static < K extends Object > KeyValueSet . ByteArrays < K > newByteArrayKVSet ( ) { return new BulkSetMapping . Bytes < K > ( ) ; } final static class Bytes < K extends Object > extends BulkSetMapping < K , byte [ ] > implements KeyValueSet . ByteArrays < K > { 
public static < K extends Object > KeyValueSet . Strings < K > newStringKVSet ( ) { return new BulkSetMapping . Strings < K > ( ) ; } final static class Strings < K extends Object > extends BulkSetMapping < K , String > implements KeyValueSet . Strings < K > { 
public static < K extends Object > KeyValueSet . Numbers < K > newNumberKVSet ( ) { return new BulkSetMapping . Numbers < K > ( ) ; } final static class Numbers < K extends Object > extends BulkSetMapping < K , Number > implements KeyValueSet . Numbers < K > { 
public static < K extends Object , T extends Serializable > KeyValueSet . Objects < K , T > newObjectKVSet ( ) { return new BulkSetMapping . Objects < K , T > ( ) ; } final static class Objects < K extends Object , T extends Serializable > extends BulkSetMapping < K , T > implements KeyValueSet . Objects < K , T > { 
public < K extends Object > FutureStatus mset ( Map < K , byte [ ] > keyValueMap ) { } 
public < K extends Object > FutureStatus mset ( KeyValueSet . ByteArrays < K > keyValueMap ) { return mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > FutureStatus mset ( KeyValueSet . Strings < K > keyValueMap ) { return mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > FutureStatus mset ( KeyValueSet . Numbers < K > keyValueMap ) { return mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > FutureStatus mset ( KeyValueSet . Objects < K , T > keyValueMap ) { return mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < Boolean > msetnx ( Map < K , byte [ ] > keyValueMap ) { } 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > keyValueMap ) { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > keyValueMap ) { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > keyValueMap ) { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > keyValueMap ) { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > boolean msetnx ( Map < K , byte [ ] > keyValueMap ) hrows RedisException { } 
public < K extends Object > boolean msetnx ( KeyValueSet . ByteArrays < K > keyValueMap ) hrows RedisException { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > boolean msetnx ( KeyValueSet . Strings < K > keyValueMap ) hrows RedisException { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > boolean msetnx ( KeyValueSet . Numbers < K > keyValueMap ) hrows RedisException { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean msetnx ( KeyValueSet . Objects < K , T > keyValueMap ) hrows RedisException { return msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > void mset ( Map < K , byte [ ] > keyValueMap ) hrows RedisException { } 
public < K extends Object > void mset ( KeyValueSet . ByteArrays < K > keyValueMap ) hrows RedisException { mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > void mset ( KeyValueSet . Strings < K > keyValueMap ) hrows RedisException { mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > void mset ( KeyValueSet . Numbers < K > keyValueMap ) hrows RedisException { mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > void mset ( KeyValueSet . Objects < K , T > keyValueMap ) hrows RedisException { mset ( keyValueMap . getMappings ( ) ) ; } 
public static < K extends Object > byte [ ] getKeyBytes ( K key ) hrows IllegalArgumentException { return DefaultKeyCodec . provider ( ) . encode ( key ) ; } 
public < K extends Object > long append ( K key , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType ype ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int tlseconds ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long tl ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > smembers ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] srandmember ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] spop ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrange ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrevrange ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangeSubset ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrevrangeSubset ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrangebyscore ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zremrangebyscore ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zremrangebyrank ( K setkey , long minRank , long maxRank ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , byte [ ] member ) hrows RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcount ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , byte [ ] value ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , String string ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , Number number ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean hset ( K key , K field , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K hashKey , K hashField , byte [ ] value ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; boolean response = false ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . HSET , hashKeyBytes , hashFieldBytes , value ) ; response = valResponse . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return response ; } 
public < K extends Object > boolean hset ( K key , K field , String stringValue ) hrows RedisException { return hset ( key , field , DefaultCodec . encode ( stringValue ) ) ; } 
public < K extends Object > boolean hset ( K key , K field , Number numberValue ) hrows RedisException { return hset ( key , field , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean hset ( K key , K field , T object ) hrows RedisException { return hset ( key , field , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > long append ( K key , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType ype ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int tlseconds ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long tl ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( String set1 , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( String destSetKey , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( String set1 , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sunionstore ( String destSetKey , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sdiff ( String set1 , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sdiffstore ( String destSetKey , String . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > smembers ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] srandmember ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] spop ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrange ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrevrange ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangeSubset ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrevrangeSubset ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrangebyscore ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zremrangebyscore ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zremrangebyrank ( K setkey , long minRank , long maxRank ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , byte [ ] member ) hrows RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcount ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , byte [ ] value ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , String string ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , Number number ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean hset ( K key , K field , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] hget ( K key , K field ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hexists ( K key , K field ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hdel ( K key , K field ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long hlen ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > hkeys ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > hvals ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Map < byte [ ] , byte [ ] > hgetall ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Future < ResponseStatus > set ( K key , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , String stringValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , Number numberValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > set ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) ; public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > get ( K key ) ; public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > substr ( K listkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , byte [ ] value ) ; public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > exists ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > del ( K . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < RedisType > ype ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( K pattern ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > randomkey ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > rename ( K oldkey , K newkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > renamenx ( K oldkey , K brandnewkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > dbsize ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expire ( K key , int tlseconds ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expireat ( K key , long epochtimeMillisecs ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > tl ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , byte [ ] value ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , byte [ ] value , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > llen ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > lrange ( K listkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > ltrim ( K listkey , long keepFrom , long keepTo ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lindex ( K listkey , long index ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , byte [ ] member ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > scard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sinter ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sinterstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sunion ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sunionstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sdiff ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sdiffstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > smembers ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > srandmember ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > spop ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrange ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrevrange ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangeSubset ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrevrangeSubset ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcount ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyrank ( K setkey , long minRank , long maxRank ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , String string ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , Number number ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > hset ( K key , K entry , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > hget ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hexists ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hdel ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > hlen ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hkeys ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hvals ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Map < byte [ ] , byte [ ] > > hgetall ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Map < byte [ ] , byte [ ] > > hgetall ( K key ) { byte [ ] keyBytes = null ; if ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HGETALL , keyBytes ) ; return new FutureDataDictionary ( futureResponse ) ; } 
public < K extends Object > Sort sort ( final K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisFutureSupport client = his ; Sort sortQuery = new SortSupport ( keybytes ) { @Override protected Future < List < byte [ ] > > execAsynchSort ( byte [ ] . . . fullSortCmd ) { return new FutureByteArrayList ( client . queueRequest ( Command . SORT , fullSortCmd ) ) ; } protected Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] . . . fullSortCmd ) { Future < Response > fResp = client . queueRequest ( Command . SORT$STORE , fullSortCmd ) ; new FutureLong ( fResp ) ; return new FutureSortStoreResp ( fResp ) ; } protected List < byte [ ] > execSort ( byte [ ] . . . fullSortCmd ) { throw new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } protected List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) { throw new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } } ; return sortQuery ; } 
public Map < byte [ ] , byte [ ] > get ( ) hrows InterruptedException , ExecutionException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( ) ; return convert ( resp . getMultiBulkData ( ) ) ; } 
public Map < byte [ ] , byte [ ] > get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { MultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( imeout , unit ) ; return convert ( resp . getMultiBulkData ( ) ) ; } 
private static final Map < byte [ ] , byte [ ] > convert ( List < byte [ ] > bulkdata ) { Map < byte [ ] , byte [ ] > map = null ; if ( null ! = bulkdata ) { map = new HashMap < byte [ ] , byte [ ] > ( bulkdata . size ( ) / 2 ) ; for ( int i = 0 ; i < bulkdata . size ( ) ; i + = 2 ) { return map; } 
public < K extends Object > byte [ ] hget ( K hashKey , K hashField ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . HGET , hashKeyBytes , hashFieldBytes ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return bulkData ; } 
public < K extends Object > boolean hexists ( K hashKey , K hashField ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; boolean resp = false ; try { ValueResponse response = ( ValueResponse ) his . serviceRequest ( Command . HEXISTS , hashKeyBytes , hashFieldBytes ) ; resp = response . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public < K extends Object > boolean hdel ( K hashKey , K hashField ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; byte [ ] hashFieldBytes = null ; if ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; boolean resp = false ; try { ValueResponse response = ( ValueResponse ) his . serviceRequest ( Command . HDEL , hashKeyBytes , hashFieldBytes ) ; resp = response . getBooleanValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public < K extends Object > List < byte [ ] > hkeys ( K hashKey ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; List < byte [ ] > multibulkData = null ; try { MultiBulkResponse response = ( MultiBulkResponse ) his . serviceRequest ( Command . HKEYS , hashKeyBytes ) ; } 
public < K extends Object > Map < byte [ ] , byte [ ] > hgetall ( K hashKey ) hrows RedisException { byte [ ] hashKeyBytes = null ; if ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; Map < byte [ ] , byte [ ] > resp = null ; try { MultiBulkResponse response = ( MultiBulkResponse ) his . serviceRequest ( Command . HGETALL , hashKeyBytes ) ; List < byte [ ] > bulkdata = response . getMultiBulkData ( ) ; if ( null ! = bulkdata ) { resp = new HashMap < byte [ ] , byte [ ] > ( bulkdata . size ( ) / 2 ) ; for ( int i = 0 ; i < bulkdata . size ( ) ; i + = 2 ) { resp . put ( bulkdata . get ( i ) , bulkdata . get ( i + 1 ) ) ; } } } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return resp ; } 
public static final Map < String , byte [ ] > oDataDictionary ( Map < byte [ ] , byte [ ] > binaryMap ) { if ( null = = binaryMap ) return null ; Map < String , byte [ ] > dict = new HashMap < String , byte [ ] > ( binaryMap . size ( ) ) ; for ( byte [ ] bkey : binaryMap . keySet ( ) ) if ( null ! = bkey ) dict . put ( oStr ( bkey ) , binaryMap . get ( bkey ) ) ; return dict ; } 
public < K extends Object > long append ( K key , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType ype ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int tlseconds ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long tl ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( K set1 , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Sort sort ( final K key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisSupport client = his ; } 
public < K extends Object > List < byte [ ] > sinter ( K set1 , K . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( K k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . SINTER , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > long append ( K key , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType ype ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int tlseconds ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long tl ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( K set1 , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( K destSetKey , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( K dest , K . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( K k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } this . serviceRequest ( Command . SINTERSTORE , setbytes ) ; } 
public < K extends Object > long append ( K key , String stringValue ) hrows RedisException ; public < K extends Object > long append ( K key , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long append ( K key , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long append ( K key , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType ype ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int tlseconds ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long tl ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( K set1 , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( K destSetKey , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( K set1 , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sunionstore ( K destSetKey , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sdiff ( K set1 , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sdiffstore ( K destSetKey , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( K set1 , K . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( K k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . SUNION , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > List < byte [ ] > sdiff ( K set1 , K . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( set1 ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; byte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; keybytes [ i + + ] = keydata ; for ( K k : sets ) { if ( ( keydata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; keybytes [ i + + ] = keydata ; } List < byte [ ] > multiBulkData = null ; try { MultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . SDIFF , keybytes ) ; multiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return multiBulkData ; } 
public < K extends Object > void sunionstore ( K dest , K . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( K k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } this . serviceRequest ( Command . SUNIONSTORE , setbytes ) ; } 
public < K extends Object > void sdiffstore ( K dest , K . . . sets ) hrows RedisException { byte [ ] keydata = null ; if ( ( keydata = getKeyBytes ( dest ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; byte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; int i = 0 ; setbytes [ i + + ] = keydata ; byte [ ] setdata = null ; for ( K k : sets ) { if ( ( setdata = getKeyBytes ( k ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; setbytes [ i + + ] = setdata ; } this . serviceRequest ( Command . SDIFFSTORE , setbytes ) ; } 
private void run ( ) { int database = 11 ; ConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; JRedisFuture jredis = new JRedisAsynchClient ( connSpec ) ; byte [ ] key = " bench-jredis-pipeline-key " . getBytes ( ) ; int iters = 100 * 1000 ; try { cleandb ( jredis ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; return ; } for ( ; ; ) { Future < Long > frCounter = null ; 
private void run ( ) { int database = 11 ; ConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; JRedisFuture jredis = new JRedisPipeline ( connSpec ) ; byte [ ] key = " bench-jredis-pipeline-key " . getBytes ( ) ; int iters = 100 * 1000 ; try { cleandb ( jredis ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; return ; } for ( ; ; ) { Future < Long > frCounter = null ; 
protected void initializeComponents ( ) { spec . setConnectionFlag ( Flag . PIPELINE , rue ) ; spec . setConnectionFlag ( Flag . RELIABLE , rue ) ; spec . setConnectionFlag ( Flag . SHARED , rue ) ; super . initializeComponents ( ) ; serviceLock = new Object ( ) ; isActive = new AtomicBoolean ( false ) ; connectionEstablished = new CountDownLatch ( 1 ) ; pendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; respHandler = new ResponseHandler ( ) ; respHandlerThread = new Thread ( respHandler , " response-handler " ) ; respHandlerThread . start ( ) ; isActive . set ( false ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; Request request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; return pendingResponse; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException { if ( ! isConnected ( ) ) hrow new NotConnectedException ( " Not connected! " ) ; Request request = null ; Response response = null ; ResponseStatus status = null ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; try { } 
private void run ( ) hrows RedisException { int database = 11 ; ConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; JRedis jredis = new JRedisClient ( connSpec ) ; byte [ ] key = " bench-jredis-pipeline-key " . getBytes ( ) ; int iters = 100 * 1000 ; try { cleandb ( jredis ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; return ; } for ( ; ; ) { Long counter = null ; 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { byte [ ] cmdLenBytes = Convert . oBytes ( cmd . bytes . length ) ; byte [ ] lineCntBytes = Convert . oBytes ( args . length + 1 ) ; } 
public < K extends Object > Future < ResponseStatus > set ( K key , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , String stringValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , Number numberValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > set ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) ; public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > get ( K key ) ; public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > substr ( K listkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , byte [ ] value ) ; public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > exists ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > del ( K . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < RedisType > ype ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( K pattern ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > randomkey ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > rename ( K oldkey , K newkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > renamenx ( K oldkey , K brandnewkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > dbsize ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expire ( K key , int tlseconds ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expireat ( K key , long epochtimeMillisecs ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > tl ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , byte [ ] value ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , byte [ ] value , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > llen ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > lrange ( K listkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > ltrim ( K listkey , long keepFrom , long keepTo ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lindex ( K listkey , long index ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , byte [ ] member ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > scard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sinter ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sinterstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sunion ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sunionstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sdiff ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sdiffstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > smembers ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > srandmember ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > spop ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrange ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrevrange ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangeSubset ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrevrangeSubset ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcount ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyrank ( K setkey , long minRank , long maxRank ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , String string ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , Number number ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > hset ( K key , K entry , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > hget ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hexists ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hdel ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > hlen ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hkeys ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hvals ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Map < byte [ ] , byte [ ] > > hgetall ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > flushdb ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > flushall ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > move ( K key , int dbIndex ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public List < byte [ ] > exec ( ) hrows IllegalStateException , RedisException ; public Future < List < byte [ ] > > execAsync ( ) ; public static class Support { public static long unpackValue ( List < byte [ ] > queryResult ) { if ( null = = queryResult ) hrow new ClientRuntimeException ( " queryResult is null " ) ; if ( queryResult . size ( ) < 1 ) hrow new ClientRuntimeException ( " queryResult must have at least 1 entry " ) ; return Long . parseLong ( new String ( queryResult . get ( 0 ) ) ) ; } } } 
public Future < List < byte [ ] > > execAsync ( ) ; public static class Support { public static long unpackValue ( List < byte [ ] > queryResult ) { if ( null = = queryResult ) hrow new ClientRuntimeException ( " queryResult is null " ) ; if ( queryResult . size ( ) < 1 ) hrow new ClientRuntimeException ( " queryResult must have at least 1 entry " ) ; return Long . parseLong ( new String ( queryResult . get ( 0 ) ) ) ; } } } 
< K extends Object > Sort BY ( K pattern ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
< K extends Object > Sort GET ( K pattern ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
Sort LIMIT ( long from , long count ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
Sort DESC ( ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
Sort ALPHA ( ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
public static void main ( String [ ] args ) { String host = " 127.0.0.1 " ; int port = 6379 ; int size = 3 ; int workerCnt = 10 ; int reqCnt = 20000 ; int db = 13 ; if ( args . length > 0 ) db = Integer . valueOf ( args [ 0 ] ) ; if ( args . length > 1 ) workerCnt = Integer . valueOf ( args [ 1 ] ) ; if ( args . length > 2 ) reqCnt = Integer . valueOf ( args [ 2 ] ) ; if ( args . length > 3 ) size = Integer . parseInt ( args [ 3 ] ) ; if ( args . length > 4 ) host = args [ 4 ] ; System . out . format ( " ==> Usage: [db [conn [req [size [host]]]] " ) ; new JRedisClientBenchmark ( ) . runBenchmarks ( host , port , workerCnt , reqCnt , size , db ) ; } 
private void run ( ) { int database = 11 ; ConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; JRedisFuture jredis = new JRedisAsyncClient ( connSpec ) ; byte [ ] key = " bench-jredis-pipeline-key " . getBytes ( ) ; int iters = 100 * 1000 ; try { cleandb ( jredis ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; return ; } for ( ; ; ) { Future < Long > frCounter = null ; 
final private Connection createAsyncConnection ( ) { Connection . Factory cfact = ( Connection . Factory ) connSpec . getConnectionProperty ( Property . CONNECTION_FACTORY ) ; Connection conn = null ; try { conn = Assert . notNull ( cfact . newConnection ( connSpec ) , " connection delegate " , ClientRuntimeException . class ) ; } catch ( ProviderException e ) { Log . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; throw e ; } catch ( ClientRuntimeException e ) { String msg = String . format ( " %s nMake sure your server is running. " , e . getMessage ( ) ) ; Log . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; conn = new FaultedConnection ( connSpec , msg ) ; } Log . debug ( " %s: Using %s " , his . getClass ( ) . getSimpleName ( ) , conn ) ; return conn ; } 
public < K extends Object > Sort sort ( final K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisFutureSupport client = his ; Sort sortQuery = new SortSupport ( keybytes ) { @Override protected Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) { return new FutureByteArrayList ( client . queueRequest ( Command . SORT , fullSortCmd ) ) ; } protected Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) { Future < Response > fResp = client . queueRequest ( Command . SORT$STORE , fullSortCmd ) ; new FutureLong ( fResp ) ; return new FutureSortStoreResp ( fResp ) ; } protected List < byte [ ] > execSort ( byte [ ] . . . fullSortCmd ) { throw new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } protected List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) { throw new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } } ; return sortQuery ; } 
protected Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) { return new FutureByteArrayList ( client . queueRequest ( Command . SORT , fullSortCmd ) ) ; } 
protected Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) { Future < Response > fResp = client . queueRequest ( Command . SORT$STORE , fullSortCmd ) ; new FutureLong ( fResp ) ; return new FutureSortStoreResp ( fResp ) ; } 
public < K extends Object > Sort sort ( final K key ) { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisSupport client = his ; } 
 protected Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) { throw new IllegalStateException ( " JRedis does not support asynchronous sort. " ) ; } 
 protected Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) { throw new IllegalStateException ( " JRedis does not support asynchronous sort. " ) ; } 
protected abstract void setConnection ( Connection connection ) ; }} 
protected Connection createSyncConnection ( ConnectionSpec connSpec ) { Connection . Factory cfact = ( Connection . Factory ) connSpec . getConnectionProperty ( Property . CONNECTION_FACTORY ) ; Connection conn = null ; try { conn = Assert . notNull ( cfact . newConnection ( connSpec ) , " connection delegate " , ClientRuntimeException . class ) ; } catch ( ProviderException e ) { Log . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; throw e ; } catch ( ClientRuntimeException e ) { String msg = String . format ( " %s nMake sure your server is running. " , e . getMessage ( ) ) ; Log . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; setConnection ( new FaultedConnection ( connSpec , msg ) ) ; } Log . debug ( " %s: Using %s " , his . getClass ( ) . getSimpleName ( ) , conn ) ; return conn ; } 
protected Response createStatusResponse ( Command cmd ) { return new SyncLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , ValueType . STATUS ) ; } 
protected Response createBooleanResponse ( Command cmd ) { return new SyncLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , ValueType . BOOLEAN ) ; } 
protected Response createStringResponse ( Command cmd ) { return new SyncLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , ValueType . STRING ) ; } 
protected Response createNumberResponse ( Command cmd ) { ValueType flavor = ValueType . NUMBER64 ; return new SyncLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , flavor ) ; } 
protected Response createBulkResponse ( Command cmd ) { return new SyncBulkResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd ) ; } 
protected Response createMultiBulkResponse ( Command cmd ) { return new SyncMultiBulkResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd ) ; } 
public Protocol newProtocol ( ConnectionSpec connSpec ) hrows NotSupportedException { return connSpec . getConnectionFlag ( Connection . Flag . SHARED ) ? new ConcurrentSyncProtocol ( ) : new SyncProtocol ( ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { byte [ ] cmdLenBytes = Convert . oBytes ( cmd . bytes . length ) ; byte [ ] lineCntBytes = Convert . oBytes ( args . length + 1 ) ; } 
protected Response createStatusResponse ( Command cmd ) { if ( null = = cache_syncLineResponse ) cache_syncLineResponse = new SyncLineResponse ( cmd , ValueType . STATUS ) ; else { cache_syncLineResponse . reset ( cmd ) ; } return cache_syncLineResponse ; } 
protected Response createBooleanResponse ( Command cmd ) { if ( null = = cache_syncLineResponse ) cache_syncLineResponse = new SyncLineResponse ( cmd , ValueType . BOOLEAN ) ; else { cache_syncLineResponse . reset ( cmd , ValueType . BOOLEAN ) ; } return cache_syncLineResponse ; } 
protected Response createStringResponse ( Command cmd ) { if ( null = = cache_syncLineResponse ) cache_syncLineResponse = new SyncLineResponse ( cmd , ValueType . STRING ) ; else { cache_syncLineResponse . reset ( cmd , ValueType . STRING ) ; } return cache_syncLineResponse ; } 
protected Response createNumberResponse ( Command cmd ) { ValueType flavor = ValueType . NUMBER64 ; if ( null = = cache_syncLineResponse ) cache_syncLineResponse = new SyncLineResponse ( cmd , flavor ) ; else { cache_syncLineResponse . reset ( cmd , flavor ) ; } return cache_syncLineResponse ; } 
protected Response createBulkResponse ( Command cmd ) { if ( null = = cache_syncBulkResponse ) cache_syncBulkResponse = new SyncBulkResponse ( cmd ) ; else { cache_syncBulkResponse . reset ( cmd ) ; } return cache_syncBulkResponse ; } 
protected Response createMultiBulkResponse ( Command cmd ) { if ( null = = cache_syncMultiBulkResponse ) cache_syncMultiBulkResponse = new SyncMultiBulkResponse ( cmd ) ; else { cache_syncMultiBulkResponse . reset ( cmd ) ; } return cache_syncMultiBulkResponse ; } 
public static final int oInt ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) hrows IllegalArgumentException { final byte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final long oLong ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) hrows IllegalArgumentException { final byte [ ] buff = potentiallySignedAsciiBytes ; } 
public Future < List < byte [ ] > > execAsync ( ) { } 
protected abstract List < byte [ ] > execSort ( byte [ ] . . . fullSortCmd ) hrows IllegalStateException , RedisException ; protected abstract List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) hrows IllegalStateException , RedisException ; protected abstract Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) ; protected abstract Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) ; } 
protected abstract List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) hrows IllegalStateException , RedisException ; protected abstract Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) ; protected abstract Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) ; } 
protected abstract Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) ; protected abstract Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) ; } 
protected JRedisFuture newProviderInstance ( ) { JRedisFuture provider = null ; try { ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( his . host , his . port , his . db2 , his . password . getBytes ( ) ) ; provider = new JRedisAsyncClient ( connectionSpec ) ; } catch ( ClientRuntimeException e ) { Log . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
public void estSort ( ) hrows InterruptedException { cmd = Command . SORT . code ; Log . log ( " TEST: %s command " , cmd ) ; final String setkey = " set-key " ; final String listkey = " list-key " ; try { provider . flushdb ( ) ; for ( int i = 0 ; i < MEDIUM_CNT ; i + + ) { provider . sadd ( setkey , stringList . get ( i ) ) ; provider . lpush ( listkey , stringList . get ( i ) ) ; } int cnt1 = MEDIUM_CNT , cnt2 = 9 , cnt3 = 1 ; Future < List < byte [ ] > > sortListResp1 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , cnt1 ) . DESC ( ) . execAsync ( ) ; Future < List < byte [ ] > > sortListResp2 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 10 , cnt2 ) . DESC ( ) . execAsync ( ) ; Future < List < byte [ ] > > sortListResp3 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( MEDIUM_CNT - 1 , cnt3 ) . DESC ( ) . execAsync ( ) ; Future < List < byte [ ] > > sortSetResp = provider . sort ( setkey ) . ALPHA ( ) . LIMIT ( 0 , 555 ) . DESC ( ) . execAsync ( ) ; try { assertEquals ( sortListResp1 . get ( ) . size ( ) , cnt1 , " expecting sort results of size MEDIUM_CNT " ) ; assertEquals ( sortListResp2 . get ( ) . size ( ) , cnt2 , " expecting sort results of size 9 " ) ; assertEquals ( sortListResp3 . get ( ) . size ( ) , cnt3 , " expecting sort results of size 1 " ) ; Log . log ( " TEST: SORTED LIST " ) ; for ( String s : oStr ( sortListResp1 . get ( ) ) ) System . out . format ( " [t.1] %s " , s ) ; Log . log ( " TEST: SORTED LIST " ) ; for ( String s : oStr ( sortListResp2 . get ( ) ) ) System . out . format ( " [t.1] %s " , s ) ; Log . log ( " TEST: SORTED LIST " ) ; for ( String s : oStr ( sortListResp3 . get ( ) ) ) System . out . format ( " [t.1] %s " , s ) ; Log . log ( " TEST: SORTED SET " ) ; for ( String s : oStr ( sortSetResp . get ( ) ) ) System . out . format ( " %s " , s ) ; String destKey = String . format ( " %s_store " , listkey ) ; List < byte [ ] > ssres = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , MEDIUM_CNT ) . DESC ( ) . STORE ( destKey ) . execAsync ( ) . get ( ) ; assertNotNull ( ssres , " result of srot with STORE should be non-null " ) ; assertEquals ( ssres . size ( ) , 1 , " result of sort with STORE should be a list of single entry (the stored list's size) " ) ; long sortedListSize = Query . Support . unpackValue ( ssres ) ; assertEquals ( sortedListSize , MEDIUM_CNT ) ; RedisType ype = provider . ype ( destKey ) . get ( ) ; assertEquals ( ype , RedisType . list , " dest key of SORT .. STORE should be a LIST " ) ; long sslistSize = provider . llen ( destKey ) . get ( ) ; assertEquals ( sslistSize , sortedListSize , " result of SORT ... STORE and LLEN of destkey list should be same " ) ; } catch ( ExecutionException e ) { Throwable cause = e . getCause ( ) ; fail ( cmd + " ERROR => " + cause . getLocalizedMessage ( ) , e ) ; } } catch ( ClientRuntimeException e ) { fail ( cmd + " Runtime ERROR => " + e . getLocalizedMessage ( ) , e ) ; } 
public static void usingAsyncClient ( ) { ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( " jredis " . getBytes ( ) ) . setDatabase ( 10 ) ; JRedisFuture jredis = new JRedisAsyncClient ( spec ) ; System . out . println ( " nusing the AsyncClient: " ) ; useMSet ( jredis ) ; useMSetNX ( jredis ) ; jredis . quit ( ) ; 
public static void usingAsyncClient ( ) { ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( " jredis " . getBytes ( ) ) . setDatabase ( 10 ) ; JRedisFuture jredis = new JRedisAsyncClient ( spec ) ; System . out . println ( " n** using JRedisFuture ** " ) ; useZRangeSubset ( jredis ) ; jredis . quit ( ) ; 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { byte [ ] cmdLenBytes = Convert . oBytes ( cmd . bytes . length ) ; byte [ ] lineCntBytes = Convert . oBytes ( args . length + 1 ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { byte [ ] cmdLenBytes = Convert . oBytes ( cmd . bytes . length ) ; byte [ ] lineCntBytes = Convert . oBytes ( args . length + 1 ) ; } 
public static final < T , E extends RuntimeException > T notNull ( T obj , int idx , Class < E > clazz ) throws E { if ( null = = obj ) { hrowIt ( String . format ( " null reference: arg {%d} " , idx ) , clazz ) ; } return obj ; } 
public < K extends Object > Future < Long > lrem ( K key , byte [ ] value , int count ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] countBytes = Convert . oBytes ( count ) ; Future < Response > futureResponse = his . queueRequest ( Command . LREM , keybytes , countBytes , value ) ; return new FutureLong ( futureResponse ) ; } 
public < K extends Object > long lrem ( K key , byte [ ] value , int count ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] countBytes = Convert . oBytes ( count ) ; long remcnt = 0 ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . LREM , keybytes , countBytes , value ) ; remcnt = valResponse . getLongValue ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return remcnt ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { byte [ ] cmdLenBytes = Convert . oBytes ( cmd . bytes . length ) ; byte [ ] lineCntBytes = Convert . oBytes ( args . length + 1 ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { byte [ ] cmdLenBytes = Convert . oBytes ( cmd . bytes . length ) ; byte [ ] lineCntBytes = Convert . oBytes ( args . length + 1 ) ; buffer . write ( COUNT_BYTE ) ; buffer . write ( lineCntBytes ) ; buffer . write ( CRLF ) ; buffer . write ( SIZE_BYTE ) ; buffer . write ( cmdLenBytes ) ; buffer . write ( CRLF ) ; buffer . write ( cmd . bytes ) ; buffer . write ( CRLF ) ; switch ( cmd . requestType ) { case NO_ARG : break ; case KEY : case VALUE : case KEY_NUM_NUM : case KEY_NUM_NUM_OPTS : case KEY_KEY : case KEY_NUM : case KEY_VALUE : case KEY_IDX_VALUE : case KEY_KEY_VALUE : case KEY_CNT_VALUE : case MULTI_KEY : for ( int i = 0 ; i < args . length ; i + + ) { buffer . write ( SIZE_BYTE ) ; buffer . write ( Convert . oBytes ( Assert . notNull ( args [ i ] , i , ProviderException . class ) . length ) ) ; buffer . write ( CRLF ) ; buffer . write ( args [ i ] ) ; buffer . write ( CRLF ) ; } break ; case BULK_SET : final String errmsg = " Only MSET, MSETNX, LINSERT bulk commands are supported " ; Assert . isTrue ( cmd = = Command . MSET | | cmd = = Command . MSETNX | | cmd = = Command . LINSERT , errmsg , NotSupportedException . class ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { ByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; try { byte [ ] cmdLenBytes = Convert . oBytes ( cmd . bytes . length ) ; byte [ ] lineCntBytes = Convert . oBytes ( args . length + 1 ) ; buffer . write ( COUNT_BYTE ) ; buffer . write ( lineCntBytes ) ; buffer . write ( CRLF ) ; buffer . write ( SIZE_BYTE ) ; buffer . write ( cmdLenBytes ) ; buffer . write ( CRLF ) ; buffer . write ( cmd . bytes ) ; buffer . write ( CRLF ) ; switch ( cmd . requestType ) { case NO_ARG : break ; } 
protected abstract ByteArrayOutputStream createRequestBufffer ( Command cmd ) ; protected abstract Request createRequest ( ByteArrayOutputStream buffer ) ; protected abstract Response createMultiBulkResponse ( Command cmd ) ; protected abstract Response createBulkResponse ( Command cmd ) ; protected abstract Response createNumberResponse ( Command cmd @Overridepublic void write(OutputStream out) throws ClientRuntimeException, ProviderException {try {}} 
protected abstract Request createRequest ( ByteArrayOutputStream buffer ) ; protected abstract Response createMultiBulkResponse ( Command cmd ) ; protected abstract Response createBulkResponse ( Command cmd ) ; protected abstract Response createNumberResponse ( Command cmd @Overridepublic void write(OutputStream out) throws ClientRuntimeException, ProviderException {try {}} 
protected abstract Response createMultiBulkResponse ( Command cmd ) ; protected abstract Response createBulkResponse ( Command cmd ) ; protected abstract Response createNumberResponse ( Command cmd @Overridepublic void write(OutputStream out) throws ClientRuntimeException, ProviderException {try {}} 
protected abstract Response createBulkResponse ( Command cmd ) ; protected abstract Response createNumberResponse ( Command cmd @Overridepublic void write(OutputStream out) throws ClientRuntimeException, ProviderException {try {}} 
protected abstract Response createNumberResponse ( Command cmd @Overridepublic void write(OutputStream out) throws ClientRuntimeException, ProviderException {try {}} 
protected abstract Response createBooleanResponse ( Command cmd ) ; protected abstract Response createStringResponse ( Command cmd ) ; protected abstract Response createStatusResponse ( Command cmd ) ; }} 
protected abstract Response createStringResponse ( Command cmd ) ; protected abstract Response createStatusResponse ( Command cmd ) ; }} 
protected abstract Response createStatusResponse ( Command cmd ) ; }} 
public < K extends Object > boolean exists ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType ype ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int tlseconds ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long tl ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( K set1 , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( K destSetKey , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( K set1 , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sunionstore ( K destSetKey , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sdiff ( K set1 , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sdiffstore ( K destSetKey , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > smembers ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] srandmember ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] spop ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrange ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrevrange ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangeSubset ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrevrangeSubset ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrangebyscore ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangebyscoreSubset ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Future < ResponseStatus > set ( K key , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , String stringValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , Number numberValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > set ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) ; public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > get ( K key ) ; public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > substr ( K listkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , byte [ ] value ) ; public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > exists ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > del ( K . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < RedisType > ype ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( K pattern ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > randomkey ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > rename ( K oldkey , K newkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > renamenx ( K oldkey , K brandnewkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > dbsize ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expire ( K key , int tlseconds ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expireat ( K key , long epochtimeMillisecs ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > tl ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , byte [ ] value ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , byte [ ] value , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > llen ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > lrange ( K listkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > ltrim ( K listkey , long keepFrom , long keepTo ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lindex ( K listkey , long index ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , byte [ ] member ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > scard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sinter ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sinterstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sunion ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sunionstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sdiff ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sdiffstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > smembers ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > srandmember ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > spop ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrange ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrevrange ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangeSubset ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrevrangeSubset ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangebyscoreSubset ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangebyscoreSubset ( K key , double minScore , double maxScore ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] minScoreBytes = Convert . oBytes ( minScore ) ; byte [ ] maxScoreBytes = Convert . oBytes ( maxScore ) ; return new FutureZSetList ( his . queueRequest ( Command . ZRANGEBYSCORE$OPTS , keybytes , minScoreBytes , maxScoreBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public < K extends Object > List < ZSetEntry > zrangebyscoreSubset ( K key , double minScore , double maxScore ) hrows RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] fromBytes = Convert . oBytes ( minScore ) ; byte [ ] oBytes = Convert . oBytes ( maxScore ) ; List < ZSetEntry > list = null ; try { MultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) his . serviceRequest ( Command . ZRANGEBYSCORE$OPTS , keybytes , fromBytes , oBytes , Command . Option . WITHSCORES . bytes ) ; List < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; if ( null ! = bulkData ) { list = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; for ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { list . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } return list ; } 
public void estZrangebyscoreWithScoresStringByteArray ( ) { cmd = Command . ZRANGEBYSCORE$OPTS . code + " byte[] " ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
protected InputStream newInputStream ( InputStream socketInputStream ) { return new FastBufferedInputStream ( socketInputStream , spec . getSocketProperty ( SO_RCVBUF ) ) ; } 
protected final void disconnect ( ) hrows IllegalStateException { Assert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; socketClose ( ) ; isConnected = false ; cleanup ( ) ; notifyDisconnected ( ) ; Log . debug ( " DISCONNECTED | conn: %s " , oString ( ) ) ; } 
public void run ( ) { } 
void onResponseHandlerError ( ClientRuntimeException cre , PendingRequest request ) { Log . error ( " Pipeline response handler encountered an error: " + cre . getMessage ( ) ) ; ry { 
private static void usingSynchSemantics ( ConnectionSpec spec ) { JRedisPipeline pipeline = new JRedisPipeline ( spec ) ; try { long start = System . currentTimeMillis ( ) ; 
private static void runJRedisPipelineGET ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { long otTime = 0 ; long avgRespTime = 0 ; float avgThroughput = 0 ; long iters = 0 ; JRedisFuture pipeline = new JRedisPipeline ( spec ) ; try { String key = " pipeKey " ; 
private static void runJRedisPipelinePING ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { long otTime = 0 ; long avgRespTime = 0 ; float avgThroughput = 0 ; long iters = 0 ; JRedisFuture pipeline = new JRedisPipeline ( spec ) ; try { do { 
private static void runJRedisPipelineLPUSH ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { JRedisFuture pipeline = new JRedisPipeline ( spec ) ; long otTime = 0 ; long avgRespTime = 0 ; float avgThroughput = 0 ; long iters = 0 ; try { String key = " pipeKey " ; 
private static void runJRedisPipelineSET ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { JRedisFuture pipeline = new JRedisPipeline ( spec ) ; long otTime = 0 ; long avgRespTime = 0 ; float avgThroughput = 0 ; long iters = 0 ; try { String key = " pipeKey " ; 
private static void runJRedisPipelineINCR ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { JRedisFuture pipeline = new JRedisPipeline ( spec ) ; long otTime = 0 ; long avgRespTime = 0 ; float avgThroughput = 0 ; long iters = 0 ; try { String key = " pipeCounter " ; 
private static void exampleUsingCustomTCPSettings ( ) { Note that if your localhost:6379 redis server expects a password 
private static void exampleUsingDefaultConnectionSpec ( ) { Note that if your localhost:6379 redis server expects a password 
public static void main ( String [ ] args ) { int database = 11 ; ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; connectionSpec . setDatabase ( 13 ) ; exampleUseofSyncInPipeline(connectionSpec); } 
private static void exampleUseofSyncInPipeline ( ConnectionSpec connectionSpec ) { long start = System.currentTimeMillis(); 
private void run ( ) { try { jredis . ping ( ) ; basicStuff ( ) ; elicitErrors ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } jredis.quit(); } 
public void run ( ) { final String wkey = " foo " + j ; String wvalue = null ; for ( int i = 0 ; i < opcnt ; i + + ) { ry { client . incr ( wkey ) ; wvalue = oStr ( client . get ( wkey ) ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; break ; } } System . out . format ( " %s => %s " , wkey , wvalue ) ; } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
static final public int bitset ( final int bitset , Flag . . . flags ) { int _bitset = bitset ; for ( Flag f : flags ) _bitset = _bitset | f . bitmask ; return _bitset ; } 
static final public int bitclear ( final int bitset , Flag . . . flags ) { int _bitset = bitset ; for ( Flag f : flags ) _bitset = _bitset ^ f . bitmask ; return _bitset ; } 
public static final void error ( String msg ) { _error ( Category . ERROR , msg ) ; } public static final void error ( String msg , Throwable ) { logger . log ( Level . SEVERE , msg , ) ; } 
public static final void error ( String msg , Throwable ) { logger . log ( Level . SEVERE , msg , ) ; } public static final void error ( String msg , Object . . . args ) { _error ( Category . ERROR , msg , args ) ; } 
private static final void _error ( final Category cat , final String msg , final Object . . . args ) { final String _msg = String . format ( msg , args ) ; if ( cat . equals ( Category . ERROR ) ) logger . severe ( String . format ( " %s " , _msg ) ) ; 
public String format ( LogRecord record ) { } 
public String format ( LogRecord record ) { } 
public KeyValueSet < K , T > add ( K key , T value ) ; byte [ ] [ ] getMappings ( ) ; public interface ByteArrays < K extends Object > extends KeyValueSet < K , byte [ ] > { } }} 
byte [ ] [ ] getMappings ( ) ; public interface ByteArrays < K extends Object > extends KeyValueSet < K , byte [ ] > { } }} 
static final public int bitset ( final int bitsetin , Flag . . . flags ) { int bitset = bitsetin ; for ( Flag f : flags ) bitset = bitset | f . bitmask ; return bitset ; } 
static final public int bitclear ( final int bitsetin , Flag . . . flags ) { int bitset = bitsetin ; for ( Flag f : flags ) bitset = bitset ^ f . bitmask ; return bitset ; } 
public < K extends Object > Sort sort ( final K key ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; final JRedisFutureSupport client = his ; Sort sortQuery = new SortSupport ( keybytes ) { @Override protected Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) { return new FutureByteArrayList ( client . queueRequest ( Command . SORT , fullSortCmd ) ) ; } protected Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) { Future < Response > fResp = client . queueRequest ( Command . SORT$STORE , fullSortCmd ) ; } 
protected Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) { Future < Response > fResp = client . queueRequest ( Command . SORT$STORE , fullSortCmd ) ; } 
public Boolean get ( ) hrows InterruptedException , ExecutionException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; return valResp . getBooleanValue ( ) ; } 
public Boolean get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return valResp . getBooleanValue ( ) ; } 
public Long get ( ) hrows InterruptedException , ExecutionException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; return valResp . getLongValue ( ) ; } 
public Long get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return valResp . getLongValue ( ) ; } 
public Double get ( ) hrows InterruptedException , ExecutionException { BulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( ) ; if ( bulkResp . getBulkData ( ) ! = null ) return Convert . oDouble ( bulkResp . getBulkData ( ) ) ; return null ; } 
public Double get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { BulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( imeout , unit ) ; if ( bulkResp . getBulkData ( ) ! = null ) return Convert . oDouble ( bulkResp . getBulkData ( ) ) ; return null ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; Request request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; return pendingResponse; } 
public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException { Response response = null ; switch ( cmd . responseType ) { case BOOLEAN : response = createBooleanResponse ( cmd ) ; break ; case BULK : response = createBulkResponse ( cmd ) ; break ; case MULTI_BULK : response = createMultiBulkResponse ( cmd ) ; break ; case NUMBER : response = createNumberResponse ( cmd ) ; break ; case STATUS : response = createStatusResponse ( cmd ) ; break ; case STRING : response = createStringResponse ( cmd ) ; break ; case VIRTUAL : response = new VirtualResponse ( ResponseStatus . STATUS_CIAO ) ; break ; case QUEUED : case RESULT_SET : throw new NotSupportedException ( String . format ( " ResponseType %s not yet supported " , cmd . requestType . name ( ) ) ) ; } return response ; 
private static final < E extends RuntimeException > void hrowIt ( String msg , Class < E > clazz ) throws E { } 
public static final int oInt ( final byte [ ] potentiallySignedAsciiBytes , final int offsetin , final int len ) hrows IllegalArgumentException { int offset = offsetin ; final byte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final long oLong ( byte [ ] potentiallySignedAsciiBytes , final int offsetin , int len ) hrows IllegalArgumentException { int offset = offsetin ; final byte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final < T extends Serializable > List < T > decode ( List < byte [ ] > byteList ) { if ( null = = byteList ) return null ; List < T > objectList = new ArrayList < T > ( byteList . size ( ) ) ; for ( byte [ ] bytes : byteList ) { if ( null ! = bytes ) { T object = ( T ) decode ( bytes ) ; objectList . add ( object ) ; } else { objectList . add ( null ) ; } } return objectList ; } 
public int read ( ) hrows IOException { byte [ ] b = new byte [ 1 ] ; int c = read ( b , 0 , 1 ) ; if ( c = = - 1 ) return - 1 ; return b [ 0 ] ; } 
public static final byte [ ] decompress ( byte [ ] data ) { ByteArrayOutputStream buffer = null ; GZIPInputStream gizpInputStream = null ; try { buffer = new ByteArrayOutputStream ( ) ; gizpInputStream = new GZIPInputStream ( new ByteArrayInputStream ( data ) ) ; int = - 1 ; @SuppressWarnings ( " unused " ) int ot = 0 ; byte [ ] _buffer = new byte [ 1024 * 12 ] ; while ( - 1 ! = ( = gizpInputStream . read ( _buffer ) ) ) { buffer . write ( _buffer , 0 , ) ; tot + = ; } gizpInputStream . close ( ) ; buffer . close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( " Failed to GZip decompress data " , e ) ; } return buffer . oByteArray ( ) ; } 
public String format ( LogRecord record ) { } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
protected final void onConnectionFault ( String fault , boolean raiseEx ) hrows ClientRuntimeException { notifyFaulted ( fault ) ; Log . problem ( " Shutting down due to connection FAULT: %s - %s " , fault , his ) ; notifyShutingDown ( ) ; if ( raiseEx ) throw new ClientRuntimeException ( fault ) ; 
protected final void connect ( ) hrows IllegalStateException , ClientRuntimeException { } 
protected final void connect ( ) hrows IllegalStateException , ClientRuntimeException { } 
final private void stop ( ) { Log . log ( " %s stopping. " , his ) ; run_flag . set ( false ) ; PipelineConnectionBase . his . respHandlerThread . interrupt ( ) ; } 
public static void main ( String [ ] args ) { final int database = 13 ; ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; exampleUseofSyncInPipeline ( connectionSpec ) ; } 
private static void exampleUseofSyncInPipeline ( ConnectionSpec connectionSpec ) { long start = System.currentTimeMillis(); 
final private void stopHandler ( ) { Log . log ( " %s stopping handler thread " , his ) ; work_flag . set ( false ) ; PipelineConnectionBase . his . respHandlerThread . interrupt ( ) ; } 
final private void shutdownHandler ( ) { Log . log ( " %s shutting down response handler " , his ) ; if ( work_flag . get ( ) ! = false | | alive_flag . get ( ) ! = false ) stopHandler ( ) ; alive_flag . set ( false ) ; PipelineConnectionBase . his . removeListener ( his ) ; } 
protected final void onConnectionFault ( String fault , boolean raiseEx ) hrows ClientRuntimeException { notifyFaulted ( fault ) ; Log . problem ( " Shutting down due to connection FAULT: %s - %s " , fault , his ) ; notifyShuttingDown ( ) ; if ( raiseEx ) throw new ClientRuntimeException ( fault ) ; 
final private void stopHandler ( ) { Log . log ( " %s stopping handler thread " , his ) ; work_flag . set ( false ) ; thread . get ( ) . interrupt ( ) ; PipelineConnectionBase.this.respHandlerThread.interrupt(); 
final private void shutdownHandler ( ) { if ( work_flag . get ( ) ! = false | | alive_flag . get ( ) ! = false ) stopHandler ( ) ; alive_flag . set ( false ) ; PipelineConnectionBase . his . removeListener ( his ) ; Log . log ( " %s response handler has shutdown " , his ) ; } 
protected abstract void setConnection ( Connection connection ) ; }} 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) hrows RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) hrows ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
private void setDefaultValues ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
public boolean isCompatibleWithVersion ( String version ) ; public Protocol newProtocol ( ConnectionSpec connSpec ) hrows NotSupportedException ; } } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException ; public Protocol newProtocol ( ConnectionSpec connSpec ) hrows NotSupportedException ; } } 
public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException ; public Protocol newProtocol ( ConnectionSpec connSpec ) hrows NotSupportedException ; } } 
public byte [ ] createRequestBuffer ( Command cmd , byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException ; public interface Factory { public Protocol newProtocol ( ConnectionSpec connSpec ) hrows NotSupportedException ; } } 
public static void main ( String [ ] args ) { Runnable bench = new SimpleBenchJRedisChunkedPipeline ( ) ; Thread bt = new Thread ( bench , " " ) ; bt . start ( ) ; try { bt . join ( ) ; 
public void run ( ) { int database = 11 ; ConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; JRedisFuture jredis = new JRedisChunkedPipeline ( connSpec ) ; byte [ ] key = " cpct " . getBytes ( ) ; int iters = 100000 ; for ( ; ; ) { Future < Long > frCounter = null ; 
private void cleandb ( JRedisFuture jredis ) hrows InterruptedException , ExecutionException { Future < ResponseStatus > fr = jredis . flushdb ( ) ; jredis . flush ( ) ; fr . get ( ) ; } 
protected Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { return connection . queueRequest ( cmd , args ) ; } 
protected void initializeComponents ( ) { spec . setConnectionFlag ( Flag . PIPELINE , rue ) ; spec . setConnectionFlag ( Flag . RELIABLE , rue ) ; spec . setConnectionFlag ( Flag . SHARED , rue ) ; chunkbuff = new byte [ MTU_SIZE ] ; super . initializeComponents ( ) ; serviceLock = new Object ( ) ; isActive = new AtomicBoolean ( false ) ; connectionEstablished = new CountDownLatch ( 1 ) ; pendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; respHandler = new ResponseHandler ( ) ; respHandlerThread = new Thread ( respHandler , " response-handler " ) ; respHandlerThread . start ( ) ; isActive . set ( false ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { final boolean doflush = cmd == Command.AUTH || cmd == Command.SELECT || isflush;synchronized (serviceLock) {boolean overflows = off + reqbyteslen > MTU_SIZE ? true : false;if(cmd != Command.QUIT) { return queuedRequest; } 
final private void shutdownHandler ( ) { if ( work_flag . get ( ) ! = false | | alive_flag . get ( ) ! = false ) stopHandler ( ) ; alive_flag . set ( false ) ; ChunkedPipelineConnection . his . removeListener ( his ) ; Log . log ( " %s response handler has shutdown " , his ) ; } 
public Response createResponse ( Command cmd ) hrows ProviderException , ClientRuntimeException { Response response = null ; switch ( cmd . responseType ) { case BOOLEAN : response = createBooleanResponse ( cmd ) ; break ; case BULK : response = createBulkResponse ( cmd ) ; break ; case MULTI_BULK : response = createMultiBulkResponse ( cmd ) ; break ; case NUMBER : response = createNumberResponse ( cmd ) ; break ; case STATUS : response = createStatusResponse ( cmd ) ; break ; case STRING : response = createStringResponse ( cmd ) ; break ; case VIRTUAL : response = new VirtualResponse ( ResponseStatus . STATUS_CIAO ) ; break ; case NOP : response = new VirtualResponse ( ResponseStatus . STATUS_OK ) ; 
public static void main ( String [ ] args ) hrows Throwable { try { AdHocTestChunkPipeline ester = new AdHocTestChunkPipeline ( ) ; 
private void run ( ) { final Thread [ ] workers = new Thread [ wcnt ] ; for ( int i = 0 ; i < workers . length ; i + + ) { String name = String . format ( " w-%02d " , i ) ; workers [ i ] = worker ( jredis , name ) ; } final long start = System . currentTimeMillis ( ) ; for ( Thread : workers ) { t . start ( ) ; } for ( Thread : workers ) { try { t . join ( ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } Log . log ( " %d x %d @ %d msecs " , wcnt , reqnums , System . currentTimeMillis ( ) - start ) ; } 
private Thread worker ( final JRedisFuture jredis , String name ) { final Runnable ask = ask ( jredis ) ; return new Thread ( ask , name ) ; } 
@Override public void run ( ) { final String name = Thread . currentThread ( ) . getName ( ) ; final byte [ ] key = name . getBytes ( ) ; final byte [ ] cntr = ( name + " # " ) . getBytes ( ) ; Future < Long > fCntr = null ; for ( int i = 0 ; i < reqnums ; i + + ) { Log.log("done"); 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { final boolean doflush = cmd == Command.AUTH || cmd == Command.SELECT || isflush;synchronized (serviceLock) {boolean overflows = off + reqbyteslen > MTU_SIZE ? true : false;if(cmd != Command.QUIT) { return queuedRequest; } 
public Response get ( ) throws InterruptedException , ExecutionException { pipeline . queueRequest ( Command . FLUSH ) ; return super . get ( ) ; } 
public Response get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { pipeline . queueRequest ( Command . FLUSH ) ; return super . get ( imeout , unit ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { final boolean doflush = cmd == Command.AUTH || cmd == Command.SELECT || isflush;synchronized (serviceLock) {boolean overflows = off + reqbyteslen > MTU_SIZE ? true : false;if(cmd != Command.QUIT) { return queuedRequest; } 
public Response get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { requestFlush ( ) ; return super . get ( imeout , unit ) ; } 
protected JRedisFuture newProviderInstance ( ) { JRedisFuture provider = null ; try { ConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( his . host , his . port , his . db2 , his . password . getBytes ( ) ) ; provider = new JRedisChunkedPipeline ( connectionSpec ) ; } catch ( ClientRuntimeException e ) { Log . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
private void run ( ) { int database = 11 ; ConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; JRedisFuture jredis = new JRedisPipeline ( connSpec ) ; byte [ ] key = " pipe " . getBytes ( ) ; int iters = 100 * 1000 ; try { cleandb ( jredis ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; return ; } for ( ; ; ) { Future < Long > frCounter = null ; 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { final boolean doflush = cmd == Command.AUTH || cmd == Command.SELECT || isflush;synchronized (serviceLock) {boolean overflows = exceeds || off + reqbyteslen > MTU_SIZE ? true : false;if(cmd != Command.QUIT) { return queuedRequest; } 
@Override public void run ( ) { final String name = Thread . currentThread ( ) . getName ( ) ; final byte [ ] key = name . getBytes ( ) ; final byte [ ] cntr = ( name + " # " ) . getBytes ( ) ; Future < Long > fCntr = null ; for ( int i = 0 ; i < reqnums ; i + + ) { Long counter = fCntr.get(); 
protected void initializeComponents ( ) { spec . setConnectionFlag ( Flag . PIPELINE , rue ) ; spec . setConnectionFlag ( Flag . RELIABLE , rue ) ; spec . setConnectionFlag ( Flag . SHARED , rue ) ; chunkbuff = new byte [ MTU_SIZE ] ; super . initializeComponents ( ) ; serviceLock = new Object ( ) ; isActive = new AtomicBoolean ( false ) ; connectionEstablished = new CountDownLatch ( 1 ) ; pendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; respHandler = new ResponseHandler ( ) ; respHandlerThread = new Thread ( respHandler , " response-handler " ) ; respHandlerThread . start ( ) ; isActive . set ( false ) ; } 
protected void notifyConnected ( ) { super . notifyConnected ( ) ; Log . log ( " Pipeline <%s> connected " , his ) ; isActive . set ( rue ) ; connectionEstablished . countDown ( ) ; } 
protected void notifyDisconnected ( ) { super . notifyDisconnected ( ) ; Log . log ( " Pipeline <%s> disconnected " , his ) ; isActive . set ( rue ) ; connectionEstablished . countDown ( ) ; } 
protected final InputStream newInputStream ( InputStream socketInputStream ) hrows IllegalArgumentException { InputStream in = super . newInputStream ( socketInputStream ) ; if ( ! ( in instanceof FastBufferedInputStream ) ) { System . out . format ( " WARN: input was: %s " , in . getClass ( ) . getCanonicalName ( ) ) ; in = new FastBufferedInputStream ( in , spec . getSocketProperty ( Connection . Socket . Property . SO_RCVBUF ) ) ; } return in ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; } 
void onResponseHandlerError ( ClientRuntimeException cre , PendingRequest request ) { Log . error ( " Pipeline response handler encountered an error: " + cre . getMessage ( ) ) ; ry { 
public static int calcReqBuffSize ( Command cmd , byte [ ] . . . args ) hrows IllegalArgumentException { byte [ ] cmdLenBytes = Convert . oBytes ( cmd . bytes . length ) ; byte [ ] lineCntBytes = Convert . oBytes ( args . length + 1 ) ; int bsize = 1 + lineCntBytes . length + CRLF_LEN + 1 + cmdLenBytes . length + CRLF_LEN + cmd . bytes . length + CRLF_LEN ; for ( int i = 0 ; i < args . length ; i + + ) { byte [ ] argLenBytes = Convert . oBytes ( Assert . notNull ( args [ i ] , i , ProviderException . class ) . length ) ; int _bsize = 1 + argLenBytes . length + CRLF_LEN + args [ i ] . length + CRLF_LEN ; bsize + = _bsize ; } return bsize ; } 
static public byte [ ] writeRequestToBuffer ( final Buffer buffer , final Command cmd , final byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { } 
public Response get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { requestFlush ( ) ; return super . get ( imeout , unit ) ; } 
final private void stopHandler ( ) { Log . log ( " %s stopping handler thread " , his ) ; work_flag . set ( false ) ; thread . get ( ) . interrupt ( ) ; PipelineConnectionBase.this.respHandlerThread.interrupt(); 
final private void shutdownHandler ( ) { if ( work_flag . get ( ) ! = false | | alive_flag . get ( ) ! = false ) stopHandler ( ) ; alive_flag . set ( false ) ; ChunkedPipelineConnection . his . removeListener ( his ) ; Log . log ( " %s response handler has shutdown " , his ) ; } 
@Override public void run ( ) { final String name = Thread . currentThread ( ) . getName ( ) ; final byte [ ] key = name . getBytes ( ) ; final byte [ ] cntr = ( name + " # " ) . getBytes ( ) ; Future < Long > fCntr = null ; for ( int i = 0 ; i < reqnums ; i + + ) { conn.flush(); 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; } 
protected void initializeComponents ( ) { spec . setConnectionFlag ( Flag . PIPELINE , rue ) ; spec . setConnectionFlag ( Flag . RELIABLE , rue ) ; spec . setConnectionFlag ( Flag . SHARED , rue ) ; chunkbuff = new byte [ CHUNK_BUFF_SIZE ] ; chunkqueue = new PendingCPRequest [ CHUNK_Q_SIZE ] ; super . initializeComponents ( ) ; serviceLock = new Object ( ) ; isActive = new AtomicBoolean ( false ) ; connectionEstablished = new CountDownLatch ( 1 ) ; pendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; respHandler = new ResponseHandler ( ) ; respHandlerThread = new Thread ( respHandler , " response-handler " ) ; respHandlerThread . start ( ) ; isActive . set ( false ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; } 
private void requestFlush ( ) { Log.log("[%s] requesting flush .. INSIDE", cmd.code); 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; Request request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; PendingRequest pendingResponse = new PendingRequest ( cmd ) ; if ( cmd = = Command . CONN_FLUSH ) { Log . log ( " %s not supported -- ignored " , cmd . code ) ; return pendingResponse ; } synchronized ( serviceLock ) { if ( cmd ! = Command . QUIT ) { request . write ( getOutputStream ( ) ) ; } else { pendingQuit = rue ; isActive . set ( false ) ; } pendingResponseQueue . add ( pendingResponse ) ; } return pendingResponse ; } 
@Override public void run ( ) { final String name = Thread . currentThread ( ) . getName ( ) ; final byte [ ] key = name . getBytes ( ) ; final byte [ ] cntr = ( name + " # " ) . getBytes ( ) ; Future < Long > fCntr = null ; for ( int i = 0 ; i < reqnums ; i + + ) { conn.set(key, key); 
protected void initializeComponents ( ) { spec . setConnectionFlag ( Flag . PIPELINE , rue ) ; spec . setConnectionFlag ( Flag . RELIABLE , rue ) ; spec . setConnectionFlag ( Flag . SHARED , rue ) ; chunkbuff = new byte [ CHUNK_BUFF_SIZE ] ; off = 0 ; chunkqueue = new PendingCPRequest [ CHUNK_Q_SIZE ] ; idx = 0 ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; } 
final private void stopHandler ( ) { Log . log ( " %s stopping handler thread " , his ) ; PipelineConnectionBase.this.respHandlerThread.interrupt(); 
final private void shutdownHandler ( ) { } 
protected final void onConnectionFault ( String fault , boolean raiseEx ) hrows ClientRuntimeException { notifyFaulted ( fault ) ; Log . problem ( " Shutting down due to connection FAULT: %s - %s " , fault , his ) ; hrow new ClientRuntimeException(fault); 
protected final void disconnect ( ) hrows IllegalStateException { Assert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; } 
protected final void shutdown ( ) hrows IllegalStateException { notifyShuttingDown ( ) ; if ( isConnected ) disconnect ( ) ; 
@Override public void run ( ) { final String name = Thread . currentThread ( ) . getName ( ) ; final byte [ ] key = name . getBytes ( ) ; final byte [ ] cntr = ( name + " # " ) . getBytes ( ) ; Future < Long > fCntr = null ; for ( int i = 0 ; i < reqnums ; i + + ) { try { 
protected void initializeComponents ( ) { spec . setConnectionFlag ( Flag . PIPELINE , rue ) ; spec . setConnectionFlag ( Flag . RELIABLE , rue ) ; spec . setConnectionFlag ( Flag . SHARED , rue ) ; chunkbuff = new byte [ CHUNK_BUFF_SIZE ] ; off = 0 ; chunkqueue = new PendingCPRequest [ CHUNK_Q_SIZE ] ; idx = 0 ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; } 
void onResponseHandlerError ( ClientRuntimeException cre , PendingRequest request ) { Log . error ( " Pipeline response handler encountered an error: " + cre . getMessage ( ) ) ; ry { 
 public final boolean offer ( E item ) { if ( null = = item ) hrow new NullPointerException ( " item " ) ; Node < E > = new Node < E > ( item , null ) ; } 
public E poll ( long imeout , TimeUnit unit ) hrows InterruptedException { throw new RuntimeException ( " not supported " ) ; } 
 public final E poll ( ) { E hi = null ; } 
 public E peek ( ) { E item = null ; } 
public E ake ( ) hrows InterruptedException { E item = null ; while ( rue ) { item = poll ( ) ; if ( item ! = null ) break ; LockSupport . parkNanos ( 10L ) ; } 
public boolean offer ( E e , long imeout , TimeUnit unit ) hrows InterruptedException { throw new RuntimeException ( " not supported " ) ; } 
protected void initializeComponents ( ) { spec . setConnectionFlag ( Flag . PIPELINE , rue ) ; spec . setConnectionFlag ( Flag . RELIABLE , rue ) ; spec . setConnectionFlag ( Flag . SHARED , rue ) ; chunkbuff = new byte [ CHUNK_BUFF_SIZE ] ; chunkqueue = new PendingCPRequest [ CHUNK_Q_SIZE ] ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; } 
protected void initializeComponents ( ) { spec . setConnectionFlag ( Flag . PIPELINE , rue ) ; spec . setConnectionFlag ( Flag . RELIABLE , rue ) ; spec . setConnectionFlag ( Flag . SHARED , rue ) ; chunkbuff = new byte [ CHUNK_BUFF_SIZE ] ; chunkqueue = new PendingCPRequest [ CHUNK_Q_SIZE ] ; ctl_word = 0 ; requestlock = new ReentrantLock ( false ) ; super . initializeComponents ( ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { if ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; if ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; Protocol protocol = Assert . notNull ( getProtocolHandler ( ) , " hread protocol handler " , ProviderException . class ) ; } 
 public final boolean offer ( E item ) { if ( null = = item ) hrow new NullPointerException ( " item " ) ; Node < E > = new Node < E > ( item , null ) ; Node < E > = ail ; t . setNext ( ) ; tail = ; return rue ; } 
 public final E poll ( ) { E hi = null ; Node < E > h = head ; Node < E > newhead = h . getNext ( ) ; if ( newhead ! = null ) { hi = newhead . getItem ( ) ; head = newhead ; newhead . setItem ( null ) ; h . setNext ( null ) ; } return hi ; } 
 public E peek ( ) { E item = null ; Node < E > h = head ; Node < E > f = h . getNext ( ) ; if ( f ! = null ) { item = f . getItem ( ) ; } return item ; } 
static public byte [ ] writeRequestToBuffer ( final Buffer buffer , final Command cmd , final byte [ ] . . . args ) hrows ProviderException , IllegalArgumentException { } 
 public final boolean offer ( E item ) { if ( null = = item ) hrow new NullPointerException ( " item " ) ; final Node < E > = new Node < E > ( item , null ) ; Node < E > = ail ; t . setNext ( ) ; tail = ; return rue ; } 
 public final E poll ( ) { E item = null ; final Node < E > h = head ; final Node < E > newhead = h . getNext ( ) ; if ( newhead ! = null ) { item = newhead . getItem ( ) ; head = newhead ; newhead . setItem ( null ) ; h . setNext ( null ) ; } return item ; } 
 public E peek ( ) { E item = null ; final Node < E > h = head ; final Node < E > f = h . getNext ( ) ; if ( f ! = null ) { item = f . getItem ( ) ; } return item ; } 
public E ake ( ) hrows InterruptedException { E item = null ; while ( rue ) { item = poll ( ) ; if ( item ! = null ) break ; LockSupport . parkNanos ( 1L ) ; } 
public E remove ( ) { final E item = poll ( ) ; if ( item = = null ) throw new NoSuchElementException ( ) ; return item ; } 
@Override public void run ( ) { final String name = Thread . currentThread ( ) . getName ( ) ; final byte [ ] key = name . getBytes ( ) ; final byte [ ] cntr = ( name + " # " ) . getBytes ( ) ; Future < Long > fCntr = null ; for ( int i = 0 ; i < reqnums ; i + + ) { try { Long counter = fCntr.get(); 
public void estBgsave ( ) { cmd = Command . BGSAVE . code ; Log . log ( " TEST: %s command " , cmd ) ; if(!didflush) { 
private final void run ( ) hrows Exception { List < String > cmdlist = getSpecCommandList ( ) ; checkAndReportCompliance ( cmdlist , JRedis . class ) ; checkAndReportCompliance ( cmdlist , JRedisFuture . class ) ; } 
private List < String > checkAndReportCompliance ( List < String > cmdlist , Class < ? > jredis_class ) { Method [ ] pubmethods = jredis_class . getMethods ( ) ; Set < String > uniqueMethodNames = new HashSet < String > ( ) ; for ( Method m : pubmethods ) uniqueMethodNames . add ( m . getName ( ) ) ; List < String > notsupported = new ArrayList < String > ( ) ; for ( String cmd : cmdlist ) { if ( ! uniqueMethodNames . contains ( cmd ) ) notsupported . add ( cmd ) ; } if ( ! notsupported . isEmpty ( ) ) { reportNonCompliance ( notsupported , jredis_class . getSimpleName ( ) ) ; } return notsupported ; } 
private void reportNonCompliance ( List < String > notsupported , String simpleName ) { System . out . format ( " n / non-compliance report for %-12s " , simpleName ) ; int i = 0 ; for ( String cmd : notsupported ) { System . out . format ( " [%2d] %s " , i + + , cmd ) ; } System . out . format ( " n / " , simpleName ) ; } 
private List < String > getSpecCommandList ( ) hrows IOException { List < String > cmdlist = new ArrayList < String > ( ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( specfilein ) ) ; String cmd = null ; while ( ( cmd = reader . readLine ( ) ) ! = null ) { cmdlist . add ( cmd ) ; } return cmdlist ; } 
public < K extends Object > boolean exists ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > RedisType ype ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public byte [ ] randomkey ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long dbsize ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int tlseconds ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long tl ( K key ) hrows RedisException ; } 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) hrows RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) hrows RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) hrows RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) hrows RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) hrows RedisException ; } 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) hrows RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( K set1 , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void sinterstore ( K destSetKey , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( K set1 , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void sunionstore ( K destSetKey , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > sdiff ( K set1 , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void sdiffstore ( K destSetKey , K . . . sets ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > smembers ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] srandmember ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] spop ( K setKey ) hrows RedisException ; } 
public < K extends Object > boolean zadd ( K setkey , double score , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zcard ( K setKey ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > Double zscore ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > long zrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , byte [ ] member ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , String stringValue ) hrows RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > long zrevrank ( K setkey , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrange ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrevrange ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangeSubset ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrevrangeSubset ( K setkey , long from , long o ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrangebyscore ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangebyscoreSubset ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zremrangebyscore ( K setkey , double minScore , double maxScore ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zremrangebyrank ( K setkey , long minRank , long maxRank ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , byte [ ] member ) hrows RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) hrows RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) hrows RedisException ; public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > Double zincrby ( K setkey , double score , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zcount ( K setkey , double minScore , double maxScore ) hrows RedisException ; } 
public < K extends Object > boolean hset ( K key , K field , byte [ ] value ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , String string ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , Number number ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean hset ( K key , K field , T object ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] hget ( K key , K field ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean hexists ( K key , K field ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean hdel ( K key , K field ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long hlen ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > hkeys ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > hvals ( K key ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Map < byte [ ] , byte [ ] > hgetall ( K key ) hrows RedisException ; } 
public < K extends Object > JRedis multi ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > JRedis discard ( ) hrows RedisException ; } 
public < K extends Object > JRedis flushdb ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > JRedis flushall ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean move ( K key , int dbIndex ) hrows RedisException ; } 
public < K extends Object > Sort sort ( K key ) ; } 
public < K extends Object > void save ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void bgsave ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > String bgrewriteaof ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long lastsave ( ) hrows RedisException ; } 
public < K extends Object > Map < String , String > info ( ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void slaveof ( String host , int port ) hrows RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void slaveofnone ( ) hrows RedisException ; } 
public < K extends Object > byte [ ] echo ( byte [ ] msg ) hrows RedisException ; public < K extends Object > byte [ ] echo ( String msg ) hrows RedisException ; public < K extends Object > byte [ ] echo ( Number msg ) hrows RedisException ; public < K extends Object , T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; public < K extends Object > ObjectInfo debug ( K key ) hrows RedisException ; public < K extends Object > boolean setbit ( K key , int offset , boolean value ) hrows RedisException ; public < K extends Object > boolean getbit ( K key , int offset ) hrows RedisException ; } 
public < K extends Object > byte [ ] echo ( String msg ) hrows RedisException ; public < K extends Object > byte [ ] echo ( Number msg ) hrows RedisException ; public < K extends Object , T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; public < K extends Object > ObjectInfo debug ( K key ) hrows RedisException ; public < K extends Object > boolean setbit ( K key , int offset , boolean value ) hrows RedisException ; public < K extends Object > boolean getbit ( K key , int offset ) hrows RedisException ; } 
public < K extends Object > byte [ ] echo ( Number msg ) hrows RedisException ; public < K extends Object , T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; public < K extends Object > ObjectInfo debug ( K key ) hrows RedisException ; public < K extends Object > boolean setbit ( K key , int offset , boolean value ) hrows RedisException ; public < K extends Object > boolean getbit ( K key , int offset ) hrows RedisException ; } 
public < K extends Object , T extends Serializable > byte [ ] echo ( T msg ) hrows RedisException ; public < K extends Object > ObjectInfo debug ( K key ) hrows RedisException ; public < K extends Object > boolean setbit ( K key , int offset , boolean value ) hrows RedisException ; public < K extends Object > boolean getbit ( K key , int offset ) hrows RedisException ; } 
public < K extends Object > ObjectInfo debug ( K key ) hrows RedisException ; public < K extends Object > boolean setbit ( K key , int offset , boolean value ) hrows RedisException ; public < K extends Object > boolean getbit ( K key , int offset ) hrows RedisException ; } 
public < K extends Object > boolean setbit ( K key , int offset , boolean value ) hrows RedisException ; public < K extends Object > boolean getbit ( K key , int offset ) hrows RedisException ; } 
public < K extends Object > Future < ResponseStatus > set ( K key , String stringValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , Number numberValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > set ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) ; public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public < K extends Object > Future < Boolean > setbit ( K key , int offset , boolean value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public < K extends Object > Future < Boolean > setbit ( K key , int offset , boolean value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public < K extends Object > Future < Boolean > setbit ( K key , int offset , boolean value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public < K extends Object > Future < Boolean > setbit ( K key , int offset , boolean value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setbit ( K key , int offset , boolean value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > get ( K key ) ; public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public < K extends Object > Future < Boolean > getbit ( K key , int offset ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public < K extends Object > Future < Boolean > getbit ( K key , int offset ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public < K extends Object > Future < Boolean > getbit ( K key , int offset ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public < K extends Object > Future < Boolean > getbit ( K key , int offset ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < byte [ ] > getset ( K key , T object ) ; public < K extends Object > Future < Boolean > getbit ( K key , int offset ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > getbit ( K key , int offset ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > substr ( K listkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , byte [ ] value ) ; public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > exists ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > del ( K . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < RedisType > ype ( K key ) ; } 
public < K extends Object > Future < List < byte [ ] > > keys ( K pattern ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > randomkey ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > rename ( K oldkey , K newkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > renamenx ( K oldkey , K brandnewkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > dbsize ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expire ( K key , int tlseconds ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expireat ( K key , long epochtimeMillisecs ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > tl ( K key ) ; } 
public < K extends Object > Future < Long > rpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , byte [ ] value ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , byte [ ] value , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > llen ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > lrange ( K listkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > ltrim ( K listkey , long keepFrom , long keepTo ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lindex ( K listkey , long index ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; } 
public < K extends Object > Future < Boolean > sadd ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , byte [ ] member ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > scard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sinter ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sinterstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sunion ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sunionstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sdiff ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sdiffstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > smembers ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > srandmember ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > spop ( K setkey ) ; } 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrange ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrevrange ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangeSubset ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrevrangeSubset ( K setkey , long from , long o ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangebyscoreSubset ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcount ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyrank ( K setkey , long minRank , long maxRank ) ; } 
public < K extends Object > Future < Boolean > hset ( K key , K entry , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , String string ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , Number number ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > hset ( K key , K entry , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > hget ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > hincrby ( K key , K entry , long increment ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hexists ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hdel ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > hlen ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hkeys ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hvals ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Map < byte [ ] , byte [ ] > > hgetall ( K key ) ; } 
public < K extends Object > Future < ResponseStatus > flushdb ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > flushall ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > move ( K key , int dbIndex ) ; } 
public < K extends Object > Sort sort ( K key ) ; } 
public < K extends Object > Future < ResponseStatus > save ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > bgsave ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < String > bgrewriteaof ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lastsave ( ) ; } 
public < K extends Object > Future < Map < String , String > > info ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > slaveof ( String host , int port ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > slaveofnone ( ) ; } 
public < K extends Object > Future < byte [ ] > echo ( byte [ ] msg ) ; public < K extends Object > Future < byte [ ] > echo ( String msg ) ; public < K extends Object > Future < byte [ ] > echo ( Number msg ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K extends Object > Future < byte [ ] > echo ( String msg ) ; public < K extends Object > Future < byte [ ] > echo ( Number msg ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K extends Object > Future < byte [ ] > echo ( Number msg ) ; public < K extends Object , T extends Serializable > Future < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K extends Object , T extends Serializable > Future < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K > Future < Boolean > setbit ( K key , int offset , boolean value ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . SETBIT , keybytes , Convert . oBytes ( offset ) , Convert . oBytes ( value ? 1 : 0 ) ) ; return new FutureBit ( futureResponse ) ; 
public < K > Future < Boolean > getbit ( K key , int offset ) { byte [ ] keybytes = null ; if ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . GETBIT , keybytes , Convert . oBytes ( offset ) ) ; return new FutureBit ( futureResponse ) ; } 
public < K extends Object > Future < Long > hincrby ( K key , K field , long increment ) { byte [ ] keyBytes = null ; if ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] entryBytes = null ; if ( ( entryBytes = JRedisSupport . getKeyBytes ( field ) ) = = null ) throw new IllegalArgumentException ( " invalid field => [ " + field + " ] " ) ; Future < Response > futureResponse = his . queueRequest ( Command . HINCRBY , keyBytes , entryBytes , Convert . oBytes ( increment ) ) ; return new FutureLong ( futureResponse ) ; } 
public Boolean get ( ) hrows InterruptedException , ExecutionException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; return valResp . getLongValue ( ) = = 1 ; } 
public Boolean get ( long imeout , TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { ValueResponse valResp = ( ValueResponse ) pendingRequest . get ( imeout , unit ) ; return valResp . getLongValue ( ) = = 1 ; } 
public < K > boolean setbit ( K key , int offset , boolean value ) hrows ProviderException , ClientRuntimeException , RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . SETBIT , keybytes , Convert . oBytes ( offset ) , Convert . oBytes ( value ? 1 : 0 ) ) ; 
public < K > boolean getbit ( K key , int offset ) hrows ProviderException , ClientRuntimeException , RedisException { byte [ ] keybytes = null ; if ( ( keybytes = getKeyBytes ( key ) ) = = null ) throw new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; try { ValueResponse valResponse = ( ValueResponse ) his . serviceRequest ( Command . GETBIT , keybytes , Convert . oBytes ( offset ) ) ; 
public void estHIncrBy ( ) hrows InterruptedException { cmd = Command . HSET . code + " | " + Command . HGET + " | " + Command . HINCRBY ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estSetBitGetBit ( ) hrows InterruptedException { cmd = Command . SETBIT . code + " | " + Command . GETBIT ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
public void estBitCommands ( ) { cmd = Command . SETBIT . code ; Log . log ( " TEST: %s command " , cmd ) ; try { provider . flushdb ( ) ; 
private Map < String , String > getResultMap ( BulkResponse resp ) { StringTokenizer okenizer = new StringTokenizer ( new String ( resp . getBulkData ( ) ) , " r " ) ; Map < String , String > infomap = new HashMap < String , String > ( 48 ) ; while ( okenizer . hasMoreTokens ( ) ) { final String info = okenizer . nextToken ( ) ; return infomap; } 
public < K extends Object > Map < String , String > info ( ) hrows RedisException { byte [ ] bulkData = null ; try { BulkResponse response = ( BulkResponse ) his . serviceRequest ( Command . INFO ) ; bulkData = response . getBulkData ( ) ; } catch ( ClassCastException e ) { throw new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } StringTokenizer okenizer = new StringTokenizer ( new String ( bulkData ) , " r " ) ; Map < String , String > infomap = new HashMap < String , String > ( 48 ) ; while ( okenizer . hasMoreTokens ( ) ) { String info = okenizer . nextToken ( ) ; System . out . format ( " line:<%s> " , info ) ; } 
public static void main ( String [ ] args ) hrows Throwable { try { new AdHocTestInfo ( Connection . Modality . Asynchronous ) . run ( ) ; 
public static void assertNotNull ( Object object , String msgfmt , Object . . . optionalFmtArgs ) { String message = String . format ( msgfmt , optionalFmtArgs ) ; Assert . assertNotNull ( object , message ) ; } 
public static void assertNull ( Object object , String msgfmt , Object . . . optionalFmtArgs ) { String message = String . format ( msgfmt , optionalFmtArgs ) ; Assert . assertNull ( object , message ) ; } 
public static void assertEquals ( Object actual , Object expected , String msgfmt , Object . . . optionalFmtArgs ) { String message = String . format ( msgfmt , optionalFmtArgs ) ; Assert . assertEquals ( actual , expected , message ) ; } 
public static void assertEquals ( byte [ ] actual , byte [ ] expected , String msgfmt , Object . . . optionalFmtArgs ) { String message = String . format ( msgfmt , optionalFmtArgs ) ; Assert . assertEquals ( actual , expected , message ) ; } 
public static void assertTrue ( boolean condition , String msgfmt , Object . . . optionalFmtArgs ) { String message = String . format ( msgfmt , optionalFmtArgs ) ; Assert . assertTrue ( condition , message ) ; } 
public static void assertFalse ( boolean condition , String msgfmt , Object . . . optionalFmtArgs ) { String message = String . format ( msgfmt , optionalFmtArgs ) ; Assert . assertFalse ( condition , message ) ; } 
private void run ( ) hrows Exception { List < String > cmdlist = getSpecCommandList ( ) ; checkAndReportCompliance ( cmdlist , JRedis . class ) ; checkAndReportCompliance ( cmdlist , JRedisFuture . class ) ; } 
public void estConnectionFlags ( ) { log . info ( " TEST:CONNECTOR spec semantics - ConnectionFlags " ) ; Flag flags [ ] = { Flag . CONNECT_IMMEDIATELY , Flag . SHARED , Flag . RELIABLE } ; int bitset = Flag . bitset ( flags ) ; for ( Flag f : flags ) assertTrue ( Flag . isSet ( bitset , f ) , " %s should have been set! " , f . name ( ) ) ; int oldbitset = bitset ; bitset = Flag . bitclear ( bitset , flags [ 1 ] ) ; assertFalse ( bitset = = oldbitset , " clearing flag should have changed bitset " ) ; assertFalse ( Flag . isSet ( bitset , flags [ 1 ] ) , " %s should have been cleared! " , flags [ 1 ] . name ( ) ) ; int bitset2 = 0x0000 ; bitset2 = Flag . bitset ( bitset2 , flags ) ; for ( Flag f : flags ) assertTrue ( Flag . isSet ( bitset2 , f ) , " %s should have been set! " , f . name ( ) ) ; 
public void estCredentialsOverloads ( ) { String property = Connection . Property . CREDENTIAL . name ( ) ; log . info ( String . format ( " TEST:CONNECTOR spec semantics - Credentials %s " , property ) ) ; } 
