public JRedis auth ( String authorization ) throws RedisException ; info () throws RedisException;} 
public JRedis ping ( ) throws RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , int index , byte [ ] value ) throws RedisException ; public void lset ( String key , int index , String stringValue ) throws RedisException ; public void lset ( String key , int index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , int index , byte [ ] value ) throws RedisException ; public void lset ( String key , int index , String stringValue ) throws RedisException ; public void lset ( String key , int index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , int index , byte [ ] value ) throws RedisException ; public void lset ( String key , int index , String stringValue ) throws RedisException ; public void lset ( String key , int index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , int index , byte [ ] value ) throws RedisException ; public void lset ( String key , int index , String stringValue ) throws RedisException ; public void lset ( String key , int index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , int index , byte [ ] value ) throws RedisException ; public void lset ( String key , int index , String stringValue ) throws RedisException ; public void lset ( String key , int index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , int index , byte [ ] value ) throws RedisException ; public void lset ( String key , int index , String stringValue ) throws RedisException ; public void lset ( String key , int index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , int index , byte [ ] value ) throws RedisException ; public void lset ( String key , int index , String stringValue ) throws RedisException ; public void lset ( String key , int index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , int index , byte [ ] value ) throws RedisException ; public void lset ( String key , int index , String stringValue ) throws RedisException ; public void lset ( String key , int index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , int index , byte [ ] value ) throws RedisException ; public void lset ( String key , int index , String stringValue ) throws RedisException ; public void lset ( String key , int index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , int index , String stringValue ) throws RedisException ; public void lset ( String key , int index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , int index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public JRedis select ( int index ) throws RedisException ; public JRedis flushdb ( ) throws RedisException ; public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) throws RedisException ; public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public Sort sort ( String key ) ; info () throws RedisException;} 
public void save ( ) throws RedisException ; public void bgsave ( ) throws RedisException ; public long lastsave ( ) throws RedisException ; public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public void bgsave ( ) throws RedisException ; public long lastsave ( ) throws RedisException ; public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public long lastsave ( ) throws RedisException ; public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public RedisSet < T > tset ( String aSetTypeKey ) throws RedisException ; public RedisList < T > tlist ( String aListTypeKey ) throws RedisException ; public RedisMap < T > tmap ( String aStringTypeKey ) throws RedisException ; public interface RedisSet < T > extends Set < T > { } public interface RedisList < T > extends Set < T > { } public interface RedisMap < T > extends Set < T > { } } 
public RedisList < T > tlist ( String aListTypeKey ) throws RedisException ; public RedisMap < T > tmap ( String aStringTypeKey ) throws RedisException ; public interface RedisSet < T > extends Set < T > { } public interface RedisList < T > extends Set < T > { } public interface RedisMap < T > extends Set < T > { } } 
public RedisMap < T > tmap ( String aStringTypeKey ) throws RedisException ; public interface RedisSet < T > extends Set < T > { } public interface RedisList < T > extends Set < T > { } public interface RedisMap < T > extends Set < T > { } } 
tSort BY ( String pattern ) ; tSort ALPHA ( ) ; } 
tSort GET ( String pattern ) ; tSort ALPHA ( ) ; } 
tSort LIMIT ( long from , long count ) ; tSort ALPHA ( ) ; } 
tSort DESC ( ) ; tSort ALPHA ( ) ; } 
public Modality getModality ( ) ; public Response serviceRequest ( RequestListener requestListener , Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Response serviceRequest ( RequestListener requestListener , Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; } 
public Response serviceRequest ( RequestListener requestListener , Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; } 
public Connection getConnection ( ) throws ClientRuntimeException ; public Connection getConnection ( ConnectionSpec connectionSpecification ) throws ClientRuntimeException ; } 
public InetAddress getAddress ( ) ; public int getPort ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; public Map < SocketProperty , Integer > getSocketProperties ( ) ; } 
public int getPort ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; public Map < SocketProperty , Integer > getSocketProperties ( ) ; } 
public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; public Map < SocketProperty , Integer > getSocketProperties ( ) ; } 
public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; public Map < SocketProperty , Integer > getSocketProperties ( ) ; } 
public Map < SocketFlag , Boolean > getSocketFlags ( ) ; public Map < SocketProperty , Integer > getSocketProperties ( ) ; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , tProviderException { tthrow new ClientRuntimeException ( errorMsg ) ; } 
public Response serviceRequest ( RequestListener requestListener , Command cmd , byte [ ] . . . args ) tthrows RedisException , ClientRuntimeException , ProviderException { tthrow new ClientRuntimeException ( errorMsg ) ; } 
public void tread ( InputStream in ) throws ClientRuntimeException , ProviderException ; public void twrite ( OutputStream out ) throws ClientRuntimeException , ProviderException ; } 
public boolean isCompatibleWithVersion ( String version ) ; public Response createResponse (Command cmd) throws ProviderException, ClientRuntimeException ;} 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException ; public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException ; } 
public long getLongValue ( ) throws IllegalStateException ; public boolean getBooleanValue () throws IllegalStateException;} 
public String getStringValue ( ) throws IllegalStateException ; public boolean getBooleanValue ( ) throws IllegalStateException ; } 
public < T > boolean register ( Codec < T > code , Class < T > type ) { } 
public JRedis auth ( String authorization ) throws RedisException ; info () throws RedisException;} 
public JRedis ping ( ) throws RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , T value ) throws RedisException ; public boolean setnx ( String key , T value ) throws RedisException ; public T get ( String key ) throws RedisException ; public List < T > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , T value ) throws RedisException ; public T get ( String key ) throws RedisException ; public List < T > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public T get ( String key ) throws RedisException ; public List < T > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < T > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , T value ) throws RedisException ; public void lpush ( String listkey , T value ) throws RedisException ; public void lset ( String key , int index , T value ) throws RedisException ; public long lrem ( String listKey , T value , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < T > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , T value ) throws RedisException ; public void lset ( String key , int index , T value ) throws RedisException ; public long lrem ( String listKey , T value , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < T > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , int index , T value ) throws RedisException ; public long lrem ( String listKey , T value , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < T > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , T value , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < T > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public List < T > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public List < T > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , T member ) throws RedisException ; public boolean srem ( String setKey , T member ) throws RedisException ; public boolean sismember ( String setKey , T member ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < T > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , T member ) throws RedisException ; public boolean sismember ( String setKey , T member ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < T > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , T member ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < T > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public List < T > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < T > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public JRedis select ( int index ) throws RedisException ; public JRedis flushdb ( ) throws RedisException ; public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) throws RedisException ; public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public SemanticSort < T > sort ( String key ) ; info () throws RedisException;} 
public void save ( ) throws RedisException ; public void bgsave ( ) throws RedisException ; public long lastsave ( ) throws RedisException ; public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public void bgsave ( ) throws RedisException ; public long lastsave ( ) throws RedisException ; public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public long lastsave ( ) throws RedisException ; public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
tstatic protected String getRandomString ( int size ) { tStringBuilder builder = new StringBuilder ( size ) ; tfor ( int i = 0 ; i < size ; i + + ) { tchar c = ( char ) ( random . nextInt ( 126 - 33 ) + 33 ) ; tbuilder . append ( c ) ; } treturn builder . toString ( ) ; } 
tprotected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
tprotected abstract JRedis newConnection ( String host , int port ) ; protected abstract void work();}} 
tprotected final void runBenchmarks ( String host , int port , int connectionCnt , int reqCnt , int size , int db ) { trandom = new Random ( System . currentTimeMillis ( ) ) ; tfixedbytes = new byte [ size ] ; trandom . nextBytes ( fixedbytes ) ; tfor ( int i = 0 ; i < reqCnt ; i + + ) { Benchmarker.runBenchmark (Command.SREM, reqCnt, connectionCnt, workers); 
public final BenchmarkWorker newPingWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { @Override 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . ping ( ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newDbsizeWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { @Override 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . dbsize ( ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newSaddWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tString key = " num_ " + id ; 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . sadd ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newSremWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tString key = " num_ " + id ; 
public final BenchmarkWorker newScardWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tString key = " num_ " + id ; 
public final BenchmarkWorker newLLenWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tString key = " num_ " + id ; 
public final BenchmarkWorker newLPopWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tString key = " num_ " + id ; 
public final BenchmarkWorker newRPopWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tString key = " num_ " + id ; 
public final BenchmarkWorker newLPushWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tString key = " num_ " + id ; 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . lpush ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newRPushWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tString key = " num_ " + id ; 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . rpush ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newIncrWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tString key = " num_ " + id ; 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . incr ( key ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newDecrWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tString key = " num_ " + id ; 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . decr ( key ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newIncrbyWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tString key = " num_ " + id ; 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . incrby ( key , 10 ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newDecrbyWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tString key = " num_ " + id ; 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . decrby ( key , 10 ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newSetWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tbyte [ ] data = JRedisBenchmark . fixedbytes ; 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . set ( key , data ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newSetnxWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tbyte [ ] data = JRedisBenchmark . fixedbytes ; 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . setnx ( key , data ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newGetWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tbyte [ ] data = JRedisBenchmark . fixedbytes ; 
public final BenchmarkWorker newSmembersWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tList < String > values = JRedisBenchmark . stringList ; 
public static final void runBenchmark ( final Command cmd , final int reqCnt , final int threadCnt , final BenchmarkWorker [ ] workers ) { tnew Benchmarker ( cmd , reqCnt , threadCnt , workers ) . runBenchmark ( ) ; } 
private void runBenchmark ( ) { tString host = workers [ 0 ] . host ; tfinal long [ ] tdeltas = new long [ threadCnt ] ; tfinal CountDownLatch tcompletion = new CountDownLatch ( threadCnt ) ; tfinal CountDownLatch tready = new CountDownLatch ( threadCnt ) ; tfinal CountDownLatch tmark = new CountDownLatch ( 1 ) ; tfor ( int i = 0 ; i < threadCnt ; i + + ) { tworkers [ i ] . id = i ; tworkers [ i ] . completion = completion ; tworkers [ i ] . mark = mark ; tworkers [ i ] . ready = ready ; tworkers [ i ] . reqCnt = reqCnt ; tworkers [ i ] . deltas = deltas ; tnew Thread ( workers [ i ] ) . start ( ) ; } ttry { 
tprotected abstract void prep ( ) ; tprotected abstract void work ( ) ; } } 
private void run ( ) throws RedisException { tJRedis tredis = new JRedisClient ( ) ; tredis . auth ( " jredis " ) . ping ( ) . flushall ( ) ; tint iter = 500000 ; tString key = " foo " ; } 
public static void main ( String [ ] args ) { } 
tprotected final void setConnection ( Connection connection ) { tthis . connection = Assert . notNull ( connection , " connection on setConnection() " , ClientRuntimeException . class ) ; } 
public JRedis auth ( String key ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tconnection . serviceRequest ( Command . AUTH , keydata ) ; treturn this ; } 
public JRedis flushall ( ) throws RedisException { tconnection . serviceRequest ( Command . FLUSHALL ) . getStatus ( ) ; treturn this ; } 
public JRedis select ( int index ) throws RedisException { tconnection . serviceRequest ( Command . SELECT , Convert . toBytes ( index ) ) ; treturn this ; } 
public String rename ( String oldkey , String newkey ) throws RedisException { tbyte [ ] oldkeydata = null ; tif ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; tbyte [ ] newkeydata = null ; tif ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; tconnection . serviceRequest ( Command . RENAME , oldkeydata , newkeydata ) ; treturn newkey ; } 
public boolean renamenx ( String oldkey , String newkey ) throws RedisException { tbyte [ ] oldkeydata = null ; tif ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; tbyte [ ] newkeydata = null ; tif ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; tboolean value = false ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . RENAMENX , oldkeydata , newkeydata ) ; tvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public void rpush ( String key , byte [ ] value ) tthrows RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tconnection . serviceRequest ( Command . RPUSH , keybytes , value ) ; } 
public < T extends Serializable > void rpush ( String key , T value ) throws RedisException { trpush ( key , Encode . encode ( value ) ) ; } 
public boolean sadd ( String key , byte [ ] member ) tthrows RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean res = false ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . SADD , keybytes , member ) ; tres = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn res ; } 
public boolean sadd ( String key , Number value ) throws RedisException { treturn sadd ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean sadd ( String key , T value ) throws RedisException { treturn sadd ( key , Encode . encode ( value ) ) ; } 
public void set ( String key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tconnection . serviceRequest ( Command . SET , keybytes , value ) ; } 
public < T extends Serializable > void set ( String key , T value ) throws RedisException { tset ( key , Encode . encode ( value ) ) ; } 
public boolean setnx ( String key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . SETNX , keybytes , value ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public boolean setnx ( String key , Number value ) throws RedisException { treturn setnx ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean setnx ( String key , T value ) throws RedisException { treturn setnx ( key , Encode . encode ( value ) ) ; } 
public boolean sismember ( String key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean value = false ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . SISMEMBER , keybytes , member ) ; tvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public boolean sismember ( String key , String stringValue ) throws RedisException { treturn sismember ( key , stringValue . getBytes ( ) ) ; } 
public boolean sismember ( String key , Number numberValue ) throws RedisException { treturn sismember ( key , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean sismember ( String key , T object ) throws RedisException { treturn sismember ( key , Encode . encode ( object ) ) ; } 
public long incr ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . INCR , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } } 
public long incrby ( String key , int delta ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . INCRBY , keybytes , Convert . toBytes ( delta ) ) ; tvalue = valResponse . getLongValue ( ) ; } } 
public long decr ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MAX_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . DECR , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } } 
public long decrby ( String key , int delta ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MAX_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . DECRBY , keybytes , Convert . toBytes ( delta ) ) ; tvalue = valResponse . getLongValue ( ) ; } } 
public long llen ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Integer . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . LLEN , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } } 
public long scard ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . SCARD , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } } 
public long dbsize ( ) throws RedisException { tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . DBSIZE ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public long lastsave ( ) throws RedisException { tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . LASTSAVE ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public byte [ ] get ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) connection . serviceRequest ( Command . GET , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public byte [ ] lindex ( String key , int index ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) connection . serviceRequest ( Command . LINDEX , keybytes , Convert . toBytes ( index ) ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public byte [ ] lpop ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) connection . serviceRequest ( Command . LPOP , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public byte [ ] rpop ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) connection . serviceRequest ( Command . RPOP , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public String randomkey ( ) throws RedisException { tString stringValue = null ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . RANDOMKEY ) ; tstringValue = valResponse . getStringValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn stringValue ; } 
public RedisType type ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tRedisType ttype = null ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . TYPE , keybytes ) ; tString stringValue = valResponse . getStringValue ( ) ; ttype = RedisType . valueOf ( stringValue ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn type ; } 
public Map < String , String > info ( ) throws RedisException { tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) connection . serviceRequest ( Command . INFO ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } tStringTokenizer tokenizer = new StringTokenizer ( new String ( bulkData ) , " r " ) ; tMap < String , String > infomap = new HashMap < String , String > ( 12 ) ; twhile ( tokenizer . hasMoreTokens ( ) ) { tString info = tokenizer . nextToken ( ) ; tint c = info . indexOf ( ':' ) ; tString key = info . substring ( 0 , c ) ; tString value = info . substring ( c + 1 ) ; tinfomap . put ( key , value ) ; } treturn infomap ; } 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + moreKeys . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : moreKeys ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) connection . serviceRequest ( Command . MGET , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public List < byte [ ] > smembers ( String key ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( key ) ) = = null ) tthrow new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) connection . serviceRequest ( Command . SMEMBERS , keydata ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public List < String > keys ( String pattern ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( pattern ) ) = = null ) tthrow new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) connection . serviceRequest ( Command . KEYS , keydata ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } tStringTokenizer tokenizer = new StringTokenizer ( new String ( bulkData ) , " " ) ; tList < String > keyList = new ArrayList < String > ( 12 ) ; twhile ( tokenizer . hasMoreTokens ( ) ) { tkeyList . add ( tokenizer . nextToken ( ) ) ; } treturn keyList ; } 
public List < byte [ ] > lrange ( String key , int from , int to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) connection . serviceRequest ( Command . LRANGE , keybytes , fromBytes , toBytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public Sort sort ( final String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisSupport client = this ; tSort sortQuery = new SortSupport ( key , keybytes ) { } 
tprotected List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) tthrows IllegalStateException , RedisException { tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) client . connection . serviceRequest ( Command . SORT , keyBytes , sortSpecBytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) connection . serviceRequest ( Command . SINTER , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public void sinterstore ( String dest , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } tconnection . serviceRequest ( Command . SINTERSTORE , setbytes ) ; } 
public boolean del ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . DEL , keybytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public boolean exists ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . EXISTS , keybytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public void lpush ( String key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tconnection . serviceRequest ( Command . LPUSH , keybytes , value ) ; } 
public < T extends Serializable > void lpush ( String key , T value ) throws RedisException { tlpush ( key , Encode . encode ( value ) ) ; } 
public long lrem ( String key , byte [ ] value , int count ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] countBytes = Convert . toBytes ( count ) ; tlong remcnt = 0 ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . LREM , keybytes , value , countBytes ) ; tremcnt = valResponse . getLongValue ( ) ; } } 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException { treturn lrem ( listKey , stringValue . getBytes ( ) , count ) ; } 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException { treturn lrem ( listKey , String . valueOf ( numberValue ) . getBytes ( ) , count ) ; } 
public < T extends Serializable > tlong lrem ( String listKey , T object , int count ) throws RedisException { treturn lrem ( listKey , Encode . encode ( object ) , count ) ; } 
public void lset ( String key , int index , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] indexBytes = Convert . toBytes ( index ) ; tconnection . serviceRequest ( Command . LSET , keybytes , indexBytes , value ) ; } 
public void lset ( String key , int index , String stringValue ) throws RedisException { tlset ( key , index , stringValue . getBytes ( ) ) ; } 
public void lset ( String key , int index , Number numberValue ) throws RedisException { tlset ( key , index , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException { tlset ( key , index , Encode . encode ( object ) ) ; } 
public boolean move ( String key , int dbIndex ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] toBytes = Convert . toBytes ( dbIndex ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . MOVE , keybytes , toBytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public boolean srem ( String key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . SREM , keybytes , member ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public boolean srem ( String key , Number value ) throws RedisException { treturn srem ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean srem ( String key , T value ) throws RedisException { treturn srem ( key , Encode . encode ( value ) ) ; } 
public void ltrim ( String key , int keepFrom , int keepTo ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( keepFrom ) ; tbyte [ ] toBytes = Convert . toBytes ( keepTo ) ; tconnection . serviceRequest ( Command . LTRIM , keybytes , fromBytes , toBytes ) ; } 
public boolean expire ( String key , int ttlseconds ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] ttlbytes = Convert . toBytes ( ttlseconds ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . EXPIRE , keybytes , ttlbytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
private byte [ ] getKeyBytes ( String key ) throws IllegalArgumentException { tif ( null = = key ) throw new IllegalArgumentException ( " key is null " ) ; tbyte [ ] bytes = null ; tif ( JRedisSupport . CacheKeys = = true ) tbytes = keyByteCache . get ( key ) ; tif ( null = = bytes ) { tbytes = key . getBytes ( Encode . SUPPORTED_CHARSET ) ; tfor ( byte b : bytes ) { tif ( b = = ( byte ) 32 | | b = = ( byte ) 10 | | b = = ( byte ) 13 ) tthrow new IllegalArgumentException ( " Key includes invalid byte value: " + ( int ) b ) ; } tif ( JRedisSupport . CacheKeys = = true ) tkeyByteCache . put ( key , bytes ) ; } treturn bytes ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd ) { case SINTERSTORE:case MGET:{int keycnt = args.length;} 
public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException { tResponse response = null ; tswitch ( cmd ) { case MGET:case LRANGE:case SINTER:case SMEMBERS:case SORT:response = createMultiBulkResponse (cmd);break;default:throw new ProviderException ("createResponse() for Command " + cmd.code + " not yet implemented!");}return response; 
tprotected final void assertResponseRead ( ) { tif ( ! didRead ) throw new ProviderException ( " Response has not been read yet! -- whose bad? " ) ; } 
public void write ( OutputStream out ) throws ClientRuntimeException , ProviderException { tthrow new RuntimeException ( " Message.write not implemented! [Apr 10, 2009] " ) ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tthrow new ProviderException ( " Request.read is not supported by this class! [Apr 2, 2009] " ) ; } 
public Protocol createProtocolHandler ( Connection . Modality modality , String redisVersionId ) tthrows NotSupportedException , ClientRuntimeException , IllegalArgumentException { } 
private final void initialize ( ) throws ClientRuntimeException , ProviderException { ttry { tsocketAddress = new InetSocketAddress ( address , port ) ; 
tprotected final void disconnect ( ) throws IllegalStateException { tAssert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; tsocketClose ( ) ; tisConnected = false ; 
tprotected final void connect ( ) throws IOException , IllegalStateException { tAssert . isTrue ( ! isConnected ( ) , IllegalStateException . class ) ; tsocketConnect ( true , 0 , 1 , 2 ) ; tinitializeSocketStreams ( ) ; tisConnected = true ; 
private void socketConnect ( boolean keepalive , int connectiontime , int latency , int bandwidth ) tthrows IOException { tsocket = new Socket ( ) ; tsocket . setKeepAlive ( keepalive ) ; tsocket . setPerformancePreferences ( connectiontime , latency , bandwidth ) ; tsocket . connect ( socketAddress ) ; 
private final void initializeSocketStreams ( ) throws ProviderException , IOException { tinput_stream = Assert . notNull ( socket . getInputStream ( ) , " input_stream " , ProviderException . class ) ; toutput_stream = Assert . notNull ( socket . getOutputStream ( ) , " output_stream " , ProviderException . class ) ; 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException { return response; } 
public Response serviceRequest ( RequestListener requestListener , Command cmd , byte [ ] . . . args ) tthrows RedisException , ClientRuntimeException , ProviderException { tthrow new RuntimeException ( " ProtocolHandler.serviceRequest not implemented! [Apr 10, 2009] " ) ; } 
tprotected ByteArrayOutputStream createRequestBufffer ( Command cmd ) { tsharedRequestBuffer . reset ( ) ; treturn sharedRequestBuffer ; } 
tprotected Response createStatusResponse ( Command cmd ) { tif ( null = = cache_synchLineResponse ) tcache_synchLineResponse = new SynchLineResponse ( cmd , ValueType . STATUS ) ; telse { tcache_synchLineResponse . reset ( cmd ) ; } treturn cache_synchLineResponse ; return new SynchLineResponse(cmd); 
tprotected Response createBooleanResponse ( Command cmd ) { tif ( null = = cache_synchLineResponse ) tcache_synchLineResponse = new SynchLineResponse ( cmd , ValueType . BOOLEAN ) ; telse { tcache_synchLineResponse . reset ( cmd , ValueType . BOOLEAN ) ; } treturn cache_synchLineResponse ; return new SynchLineResponse(cmd, ValueType.BOOLEAN); 
tprotected Response createStringResponse ( Command cmd ) { tif ( null = = cache_synchLineResponse ) tcache_synchLineResponse = new SynchLineResponse ( cmd , ValueType . STRING ) ; telse { tcache_synchLineResponse . reset ( cmd , ValueType . STRING ) ; } treturn cache_synchLineResponse ; return new SynchLineResponse(cmd, ValueType.STRING); 
tprotected Response createNumberResponse ( Command cmd ) { tValueType flavor = ValueType . NUMBER64 ; return new SynchLineResponse(cmd, flavor); 
tprotected Response createBulkResponse ( Command cmd ) { tif ( null = = cache_synchBulkResponse ) tcache_synchBulkResponse = new SynchBulkResponse ( cmd ) ; telse { tcache_synchBulkResponse . reset ( cmd ) ; } treturn cache_synchBulkResponse ; } 
tprotected Response createMultiBulkResponse ( Command cmd ) { tif ( null = = cache_synchMultiBulkResponse ) tcache_synchMultiBulkResponse = new SynchMultiBulkResponse ( cmd ) ; telse { tcache_synchMultiBulkResponse . reset ( cmd ) ; } treturn cache_synchMultiBulkResponse ; } 
tprotected void reset ( Command cmd , Type type ) { } 
tvoid readLine ( InputStream in ) { toffset = 0 ; tint readcnt = 0 ; tint c = - 1 ; tint available = buffer . length - offset ; while (available > 0 && (c = in.read(buffer, offset, available)) != -1) { 
tvoid seekToCRLF ( InputStream in ) { toffset = 0 ; tint c = - 1 ; tint available = buffer . length - offset ; ttry { twhile ( available > 0 & & ( c = in . read ( buffer , offset , 1 ) ) ! = - 1 ) { toffset + = c ; tif ( offset > 2 & & buffer [ offset - 2 ] = = ( byte ) 13 & & buffer [ offset - 1 ] = = ( byte ) 10 ) { tbreak ; } 
tint readSize ( InputStream in , boolean checkForError ) { treturn readControlLine ( in , checkForError , SIZE_BYTE ) ; seekToCRLF(in); 
tint readControlLine ( InputStream in , boolean checkForError , byte ctlByte ) { tseekToCRLF ( in ) ; tif ( checkForError & & ( this . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = true ) { tstatus = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; tdidRead = true ; treturn - 2 ; } tif ( buffer [ 0 ] ! = ctlByte ) { tthrow new ProviderException ( " Bug? Expecting status code for size " ) ; } tstatus = ResponseStatus . STATUS_OK ; treturn Convert . getInt ( buffer , 1 , offset - 3 ) ; } 
public final byte [ ] readBulkData ( InputStream in , int length ) tthrows IOException , RuntimeException { tbyte [ ] data = new byte [ length ] ; tbyte [ ] term = new byte [ CRLF . length ] ; tint readcnt = - 1 ; tint offset = 0 ; twhile ( offset < length ) { tif ( ( readcnt = in . read ( data , offset , length - offset ) ) = = - 1 ) throw new ClientRuntimeException ( " IO - read returned -1 -- problem " ) ; toffset + = readcnt ; } tif ( ( readcnt = in . read ( term , 0 , CRLF . length ) ) ! = CRLF . length ) { tthrow new RuntimeException ( " Only read " + readcnt + " bytes for CRLF! " ) ; } treturn data ; } 
tprotected void reset ( Command cmd ) { tsuper . reset ( cmd , Type . Bulk ) ; } 
public List < byte [ ] > getMultiBulkData ( ) throws ClientRuntimeException , ProviderException { tassertResponseRead ( ) ; treturn datalist ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tint count = super . readCount ( in , true ) ; tif ( status . isError ( ) ) { tdidRead = true ; treturn ; } return; 
tprotected void reset ( Command cmd ) { tsuper . reset ( cmd , Type . Bulk ) ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tint size = super . readSize ( in , true ) ; tif ( size > 0 ) { ttry { tdata = super . readBulkData ( in , size ) ; } tcatch ( IllegalArgumentException bug ) { tthrow new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } tcatch ( IOException problem ) { tthrow new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } tcatch ( RuntimeException bug ) { tthrow new ProviderException ( " Bug: reading the bulk data bytes. expecting " + size + " bytes. " , bug ) ; } } tdidRead = true ; treturn ; } 
tprotected void reset ( Command cmd ) { tsuper . reset ( cmd , Type . Status ) ; } 
tprotected void reset ( Command cmd , ValueType flavor ) { tsuper . reset ( cmd , Type . Value ) ; } 
public boolean getBooleanValue ( ) throws IllegalStateException { tif ( flavor ! = ValueType . BOOLEAN ) throw new IllegalStateException ( " Response value type is " + flavor . name ( ) + " not " + ValueType . BOOLEAN . name ( ) ) ; treturn booleanValue ; } 
public long getLongValue ( ) throws IllegalStateException { tif ( flavor ! = ValueType . NUMBER64 ) throw new IllegalStateException ( " Response value type is " + flavor . name ( ) + " not " + ValueType . NUMBER64 . name ( ) ) ; treturn longValue ; } 
public String getStringValue ( ) throws IllegalStateException { tif ( flavor ! = ValueType . STRING ) throw new IllegalStateException ( " Response value type is " + flavor . name ( ) + " not " + ValueType . STRING . name ( ) ) ; treturn stringValue ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tsuper . readLine ( in ) ; tif ( ( this . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = true ) { tstatus = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; } telse { tstatus = ResponseStatus . STATUS_OK ; tif ( flavor ! = ValueType . STATUS ) { } 
public void write ( OutputStream out ) throws ClientRuntimeException , ProviderException { tthrow new RuntimeException ( " Streamable.write not implemented! [Apr 4, 2009] " ) ; } 
public static final < E extends RuntimeException > tvoid identical ( Byte [ ] a , byte [ ] b , Class < E > clazz ) { tnotNull ( a , " arg a " , clazz ) ; tnotNull ( b , " arg b " , clazz ) ; tif ( a . length ! = b . length ) { tthrowIt ( " byte arrays being compared are of unequal length " , clazz ) ; } tfor ( int i = 0 ; i < a . length ; i + + ) { tif ( a [ i ] ! = b [ i ] ) { 
public static final < T , E extends RuntimeException > tT notNull ( T obj , Class < E > clazz ) tthrows E { tif ( null = = obj ) { throwIt ( " null reference " , clazz ) ; } treturn obj ; } 
public static final < T , E extends RuntimeException > tT notNull ( T obj , String info , Class < E > clazz ) tthrows E { tif ( null = = obj ) { throwIt ( " null reference:{ " + info + " } " , clazz ) ; } treturn obj ; } 
public static final < E extends RuntimeException > tvoid isTrue ( boolean fact , String claim , Class < E > clazz ) tthrows E { tif ( ! fact ) { throwIt ( " its not true that \" " + claim + " \" " , clazz ) ; } } 
public static final < E extends RuntimeException > tvoid isTrue ( boolean fact , Class < E > clazz ) tthrows E { tif ( ! fact ) { throwIt ( " Factual error " , clazz ) ; } } 
public static final < E extends RuntimeException > tlong inRange ( long , long from , long to , String info , Class < E > clazz ) tthrows E { tif ( > to | | < from ) { throwIt ( " exceeds valid range :{ " + info + " } " , clazz ) ; } treturn ; } 
public static final < E extends RuntimeException > tint inRange ( int , int from , int to , String info , Class < E > clazz ) tthrows E { tif ( > to | | < from ) { throwIt ( " exceeds valid range :{ " + info + " } " , clazz ) ; } treturn ; } 
public static final < T , E extends RuntimeException > tT cast ( Object obj , Class < T > clazz , String info , Class < E > throwable ) tthrows E { tT = null ; ttry { tt = clazz . cast ( obj ) ; } tcatch ( ClassCastException e ) { tString actual = obj . getClass ( ) . getCanonicalName ( ) ; tthrowIt ( info + " [object type: " + actual + " target: " + clazz . getCanonicalName ( ) + " ] " , throwable ) ; } treturn ; } 
private static final < E extends RuntimeException > tvoid throwIt ( String msg , Class < E > clazz ) tthrows E { } 
public static final byte [ ] toBytes ( int i ) { tbyte [ ] data = null ; tboolean negative = false ; tif ( i > = INT_N_65535 & & i < = INT_P_65535 ) { tif ( i < 0 ) { tnegative = true ; ti = 0 - i ; } tif ( null = = i2b_65535 [ i ] ) { ti2b_65535 [ i ] = getBytes ( i ) ; } tdata = i2b_65535 [ i ] ; tif ( negative ) data = getSignedNumberBytes ( data , negative ) ; } telse { tdata = getBytes ( i ) ; } tif ( null = = data ) throw new RuntimeException ( " null for i= " + i + " and cache is: " + i2b_65535 [ i ] ) ; treturn data ; } 
public static final int getInt ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) throws IllegalArgumentException { tbyte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final long getLong ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) throws IllegalArgumentException { tbyte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final int getInt ( byte [ ] potentiallySignedBytes ) throws IllegalArgumentException { tif ( null = = potentiallySignedBytes ) throw new IllegalArgumentException ( " null input " ) ; treturn getInt ( potentiallySignedBytes , 0 , potentiallySignedBytes . length ) ; } 
public static final long getLong ( byte [ ] potentiallySignedBytes ) throws IllegalArgumentException { tif ( null = = potentiallySignedBytes ) throw new IllegalArgumentException ( " null input " ) ; treturn getLong ( potentiallySignedBytes , 0 , potentiallySignedBytes . length ) ; } 
public static final List < String > toStr ( List < byte [ ] > bytearray ) { tList < String > list = new ArrayList < String > ( bytearray . size ( ) ) ; tfor ( byte [ ] b : bytearray ) list . add ( toStr ( b ) ) ; treturn list ; } 
public static final < T extends Serializable > tList < T > decode ( List < byte [ ] > byteList ) { tList < T > tobjectList = new ArrayList < T > ( byteList . size ( ) ) ; tfor ( byte [ ] bytes : byteList ) { tT object = ( T ) decode ( bytes ) ; tobjectList . add ( ( T ) object ) ; } treturn objectList ; } 
public static final < T extends Serializable > tT decode ( byte [ ] bytes ) { tT = null ; tException thrown = null ; ttry { tObjectInputStream oin = new ObjectInputStream ( new ByteArrayInputStream ( bytes ) ) ; tt = ( T ) oin . readObject ( ) ; } tcatch ( IOException e ) { te . printStackTrace ( ) ; tthrown = e ; } tcatch ( ClassNotFoundException e ) { te . printStackTrace ( ) ; tthrown = e ; } tcatch ( ClassCastException e ) { te . printStackTrace ( ) ; tthrown = e ; } tfinally { tif ( null ! = thrown ) tthrow new RuntimeException ( " Error decoding byte[] data to instantiate java object - " + " data at key may not have been of this type or even an object " , thrown ) ; } treturn ; } 
public static final < T extends Serializable > byte [ ] encode ( T obj ) { tbyte [ ] bytes = null ; ttry { tByteArrayOutputStream bout = new ByteArrayOutputStream ( ) ; tObjectOutputStream out = new ObjectOutputStream ( bout ) ; tout . writeObject ( obj ) ; tbytes = bout . toByteArray ( ) ; } tcatch ( IOException e ) { te . printStackTrace ( ) ; tthrow new RuntimeException ( " Error serializing object " + obj + " => " + e ) ; } } 
public static final void log ( String msg ) { _log ( Category . INFO , msg ) ; } public static final void error ( String msg ) { _log ( Category . ERROR , msg ) ; } 
public static final void error ( String msg ) { _log ( Category . ERROR , msg ) ; } public static final void problem ( String msg ) { _log ( Category . PROBLEM , msg ) ; } 
public static final void problem ( String msg ) { _log ( Category . PROBLEM , msg ) ; } public static final void bug ( String msg ) { _log ( Category . BUG , msg ) ; } 
private static final void _log ( Category cat , String msg ) { tSystem . err . format ( " -- JREDIS -- %s: %s " , cat , msg ) . flush ( ) ; } 
private static final void _loginfo ( String format , Object . . . args ) { tSystem . out . format ( " -- JREDIS -- INFO: " + format + " " , args ) . flush ( ) ; } 
public Sort BY ( String pattern ) { bySpec = BY + pattern ; return this ; } public Sort GET ( String pattern ) { getSpec = GET + pattern + " " ; return this ; } 
public Sort LIMIT ( long from , long to ) { } 
public List < byte [ ] > exec ( ) throws IllegalStateException , RedisException { } 
tprotected abstract List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) throws IllegalStateException , RedisException ; } 
tprotected void setUp ( ) throws Exception { tsuper . setUp ( ) ; tLog . log ( " TEST: generating random test data ... " ) ; tLog . log ( " TEST: Flushing the test dbs (using %d and %d) ... " , DB1 , DB2 ) ; ttry { tredis . select ( DB1 ) . flushdb ( ) ; 
tprotected void tearDown ( ) throws Exception { tsuper . tearDown ( ) ; ttry { tredis . quit ( ) ; 
public void testInit ( ) { tLog . log ( " TEST: ing new and basic initial doX() for various permutations ... " ) ; ttry { tJRedis r = new JRedisClient ( ) . ping ( ) ; tr . quit ( ) ; } tcatch ( RedisException e ) { tLog . error ( " Test setup create - connect - ping: " + e . getLocalizedMessage ( ) ) ; tfail ( " init failed: " + e . getLocalizedMessage ( ) ) ; } tLog . log ( " TEST: PING " ) ; ttry { tJRedis r = new JRedisClient ( ) ; tr . smembers ( " no-such-set " ) ; tr . quit ( ) ; } tcatch ( RedisException e ) { tLog . error ( " Test setup create - connect - smembers: " + e . getLocalizedMessage ( ) ) ; tfail ( " init failed: " + e . getLocalizedMessage ( ) ) ; } tLog . log ( " TEST: new() -> SMEMBERS on non-exist set ->quit() " ) ; tboolean expectedError = false ; ttry { tString not_a_set = " not-a-set " ; tJRedis r = new JRedisClient ( ) ; tr . set ( not_a_set , " a value " ) ; tr . smembers ( not_a_set ) ; } tcatch ( RedisException e ) { expectedError = true ; } tfinally { tif ( ! expectedError ) { tLog . error ( " Test " ) ; tfail ( " Did not raise expected ERR on operating on key of wrong type " ) ; } } tLog . log ( " TEST: new() -> set(key) -> SMEMBERS (key) ->quit() " ) ; ttry { tredis = new JRedisClient ( ) . auth ( password ) . ping ( ) ; } tcatch ( RedisException e ) { tLog . error ( " Test setup create - connect - authorize: " + e . getLocalizedMessage ( ) ) ; tfail ( " init failed: " + e . getLocalizedMessage ( ) ) ; } tLog . log ( " TEST: AUTH -> PING " ) ; ttry { tredis = new JRedisClient ( ) ; 
public void testDBCommands ( ) { tLog . log ( " TEST: expire... this will Thread.sleep for a few secs ... " ) ; ttry { redis . select ( DB1 ) . flushdb ( ) ; } tcatch ( RedisException e1 ) { te1 . printStackTrace ( ) ; tfail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } ttry { tredis . select ( DB1 ) . flushdb ( ) ; 
public void testListCommands ( ) { tLog . log ( " TEST: Commands Operating On Lists... " ) ; ttry { redis . select ( DB1 ) . flushdb ( ) ; } tcatch ( RedisException e1 ) { te1 . printStackTrace ( ) ; tfail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } tString key1 = " list1 " ; tString key2 = " list2 " ; ttry { tfor ( String item : stringList ) { 
public void testSetCommands ( ) { tLog . log ( " TEST: Commands Operating On Sets... " ) ; ttry { redis . select ( DB1 ) . flushdb ( ) ; } tcatch ( RedisException e1 ) { te1 . printStackTrace ( ) ; tfail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } ttry { tString key1 = " set1 " ; 
public void testJavaObjects ( ) { tLog . log ( " TEST: Commands Operating On String Values and Key Space... " ) ; ttry { redis . select ( DB1 ) . flushdb ( ) ; } tcatch ( RedisException e1 ) { te1 . printStackTrace ( ) ; tfail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } ttry { 
public void testCommandsOperatingOnStringValues ( ) { tLog . log ( " TEST: Commands Operating On String Values and Key Space... " ) ; ttry { redis . select ( DB1 ) ; } tcatch ( RedisException e1 ) { te1 . printStackTrace ( ) ; tfail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } String key = null;try {Log.log("TEST: Commands Operating On Key Space in database %d ...", DB1); 
tprotected String getRandomString ( int size ) { tStringBuilder builder = new StringBuilder ( size ) ; tfor ( int i = 0 ; i < size ; i + + ) { tchar c = ( char ) ( random . nextInt ( 126 - 33 ) + 33 ) ; tbuilder . append ( c ) ; } treturn builder . toString ( ) ; } 
public void compareLists ( List < String > strL1 , List < String > strL2 ) { tfor ( int i = 0 ; i < strL1 . size ( ) ; i + + ) { tassertTrue ( strL2 . contains ( strL1 . get ( i ) ) ) ; 
@Override public String toString ( ) { return " [ " + getClass ( ) . getSimpleName ( ) + " | name: " + getName ( ) + " created on: " + getCreated_on ( ) + " ] " ; } @Override public boolean equals ( Object o ) { 
@Override public boolean equals ( Object o ) { tboolean res = false ; ttry { tTestBean isItMe = ( TestBean ) o ; tres = isItMe . getName ( ) . equals ( name ) & & isItMe . getCreated_on ( ) = = this . created_on ; } tcatch ( ClassCastException e ) { treturn false ; } treturn res ; } 
public void testGetNaturalNumber ( ) { tbyte [ ] data = null ; test big data 
public void testToBytes ( ) { tbyte [ ] javadata = null ; tbyte [ ] data = null ; for(int i=Integer.MIN_VALUE; i<Integer.MAX_VALUE; i++){ 
public static void main ( String [ ] args ) { tString password = " " ; tif ( args . length > 0 ) password = args [ 0 ] ; tnew HelloAgain ( ) . run ( password ) ; } 
public JRedis auth ( String authorization ) throws RedisException ; info () throws RedisException;} 
public JRedis ping ( ) throws RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , int index , byte [ ] value ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , int index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public JRedis select ( int index ) throws RedisException ; public JRedis flushdb ( ) throws RedisException ; public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) throws RedisException ; public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public Sort sort ( String key ) ; info () throws RedisException;} 
public void save ( ) throws RedisException ; public void bgsave ( ) throws RedisException ; public long lastsave ( ) throws RedisException ; public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public void bgsave ( ) throws RedisException ; public long lastsave ( ) throws RedisException ; public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public long lastsave ( ) throws RedisException ; public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public long getLongValue ( ) throws IllegalStateException ; @Deprecated public int getIntValue ( ) throws IllegalStateException ; public String getStringValue ( ) throws IllegalStateException ; public boolean getBooleanValue ( ) throws IllegalStateException ; } 
public int getIntValue ( ) throws IllegalStateException ; public String getStringValue ( ) throws IllegalStateException ; public boolean getBooleanValue ( ) throws IllegalStateException ; } 
public String getStringValue ( ) throws IllegalStateException ; public boolean getBooleanValue ( ) throws IllegalStateException ; } 
public JRedis auth ( String authorization ) throws RedisException ; info () throws RedisException;} 
public JRedis ping ( ) throws RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , T value ) throws RedisException ; public boolean setnx ( String key , T value ) throws RedisException ; public T get ( String key ) throws RedisException ; public List < T > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , T value ) throws RedisException ; public T get ( String key ) throws RedisException ; public List < T > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public T get ( String key ) throws RedisException ; public List < T > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < T > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public String rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , T value ) throws RedisException ; public void lpush ( String listkey , T value ) throws RedisException ; public void lset ( String key , int index , T value ) throws RedisException ; public long lrem ( String listKey , T value , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < T > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , T value ) throws RedisException ; public void lset ( String key , int index , T value ) throws RedisException ; public long lrem ( String listKey , T value , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < T > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , int index , T value ) throws RedisException ; public long lrem ( String listKey , T value , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < T > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , T value , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < T > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public List < T > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public List < T > lrange ( String listkey , int from , int to ) throws RedisException ; public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , int keepFrom , int keepTo ) throws RedisException ; public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public T lindex ( String listkey , int index ) throws RedisException ; public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public T lpop ( String listKey ) throws RedisException ; public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public T rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , T member ) throws RedisException ; public boolean srem ( String setKey , T member ) throws RedisException ; public boolean sismember ( String setKey , T member ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < T > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , T member ) throws RedisException ; public boolean sismember ( String setKey , T member ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < T > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , T member ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < T > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public List < T > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < T > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < T > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public JRedis select ( int index ) throws RedisException ; public JRedis flushdb ( ) throws RedisException ; public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) throws RedisException ; public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public SemanticSort < T > sort ( String key ) ; info () throws RedisException;} 
public long dbsize ( ) throws RedisException { tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) connection . serviceRequest ( Command . DBSIZE ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public Sort sort ( final String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisSupport client = this ; tSort sortQuery = new SortSupport ( key , keybytes ) { @Override tprotected List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) tthrows IllegalStateException , RedisException { tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) client . connection . serviceRequest ( Command . SORT , keyBytes , sortSpecBytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } } ; treturn sortQuery ; } 
private byte [ ] getKeyBytes ( String key ) throws IllegalArgumentException { tif ( null = = key ) throw new IllegalArgumentException ( " key is null " ) ; tbyte [ ] bytes = null ; tif ( JRedisSupport . CacheKeys = = true ) tbytes = keyByteCache . get ( key ) ; tif ( null = = bytes ) { tbytes = key . getBytes ( DefaultCodec . SUPPORTED_CHARSET ) ; tfor ( byte b : bytes ) { tif ( b = = ( byte ) 32 | | b = = ( byte ) 10 | | b = = ( byte ) 13 ) tthrow new IllegalArgumentException ( " Key includes invalid byte value: " + ( int ) b ) ; } tif ( JRedisSupport . CacheKeys = = true ) tkeyByteCache . put ( key , bytes ) ; } treturn bytes ; } 
public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException { tResponse response = null ; tswitch ( cmd ) { case MGET:case LRANGE:case SINTER:case SMEMBERS:case SORT:response = createMultiBulkResponse (cmd);break;default:throw new ProviderException ("createResponse() for Command " + cmd.code + " not yet implemented!");}return response; 
tprotected Response createStatusResponse ( Command cmd ) { tif ( null = = cache_synchLineResponse ) tcache_synchLineResponse = new SynchLineResponse ( cmd ) ; telse { tcache_synchLineResponse . reset ( cmd ) ; } treturn cache_synchLineResponse ; return new SynchLineResponse(cmd); 
tprotected Response createBooleanResponse ( Command cmd ) { tif ( null = = cache_synchLineResponse ) tcache_synchLineResponse = new SynchLineResponse ( cmd ) ; telse { tcache_synchLineResponse . reset ( cmd , ValueType . BOOLEAN ) ; } treturn cache_synchLineResponse ; return new SynchLineResponse(cmd, ValueType.BOOLEAN); 
tprotected Response createStringResponse ( Command cmd ) { tif ( null = = cache_synchLineResponse ) tcache_synchLineResponse = new SynchLineResponse ( cmd ) ; telse { tcache_synchLineResponse . reset ( cmd , ValueType . STRING ) ; } treturn cache_synchLineResponse ; return new SynchLineResponse(cmd, ValueType.STRING); 
tprotected Response createNumberResponse ( Command cmd , boolean isBigNum ) { tValueType flavor = ValueType . NUMBER32 ; tif ( isBigNum ) flavor = ValueType . NUMBER64 ; tif ( null = = cache_synchLineResponse ) tcache_synchLineResponse = new SynchLineResponse ( cmd ) ; telse { tcache_synchLineResponse . reset ( cmd , flavor ) ; } treturn cache_synchLineResponse ; return new SynchLineResponse(cmd, flavor); 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tint count = super . readCount ( in , true ) ; tif ( count ! = - 2 ) { tdatalist = new ArrayList < byte [ ] > ( count ) ; ttry { tint size = - 1 ; tfor ( int i = 0 ; i < count ; i + + ) { tsize = readSize ( in , false ) ; tif ( size > 0 ) tdatalist . add ( super . readBulkData ( in , size ) ) ; telse tdatalist . add ( null ) ; } } tcatch ( IllegalArgumentException bug ) { tthrow new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } tcatch ( IOException problem ) { tthrow new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } tcatch ( RuntimeException bug ) { tthrow new ProviderException ( " Bug: reading the multibulk data bytes. " , bug ) ; } } tdidRead = true ; treturn ; 
public boolean getBooleanValue ( ) throws IllegalStateException { tif ( flavor ! = ValueType . BOOLEAN ) throw new IllegalStateException ( ) ; treturn booleanValue ; } 
public int getIntValue ( ) throws IllegalStateException { tif ( flavor ! = ValueType . NUMBER32 ) throw new IllegalStateException ( ) ; treturn intValue ; } 
public long getLongValue ( ) throws IllegalStateException { tif ( flavor ! = ValueType . NUMBER64 ) throw new IllegalStateException ( ) ; treturn longValue ; } 
public String getStringValue ( ) throws IllegalStateException { tif ( flavor ! = ValueType . STRING ) throw new IllegalStateException ( ) ; treturn stringValue ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tsuper . readLine ( in ) ; tif ( ( this . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = true ) { tstatus = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; } telse { tstatus = ResponseStatus . STATUS_OK ; tif ( flavor ! = ValueType . STATUS ) { } 
public static final List < Integer > toInt ( List < byte [ ] > bytearray ) { tList < Integer > list = new ArrayList < Integer > ( bytearray . size ( ) ) ; tfor ( byte [ ] b : bytearray ) list . add ( toInt ( b ) ) ; treturn list ; } 
public static final List < Long > toLong ( List < byte [ ] > bytearray ) { tList < Long > list = new ArrayList < Long > ( bytearray . size ( ) ) ; tfor ( byte [ ] b : bytearray ) list . add ( toLong ( b ) ) ; treturn list ; } 
public static final < T extends Serializable > tList < T > decode ( List < byte [ ] > byteList ) { tList < T > tobjectList = new ArrayList < T > ( byteList . size ( ) ) ; tfor ( byte [ ] bytes : byteList ) { tObject object = decode ( bytes ) ; tobjectList . add ( ( T ) object ) ; } treturn objectList ; } 
public List < T > lrange ( String listkey , int from , int to ) tthrows RedisException { } 
public long lrem ( String listKey , T value , int count ) throws RedisException { } 
public List < T > mget ( String key , String . . . moreKeys ) throws RedisException { } 
public boolean move ( String key , int dbIndex ) throws RedisException { } 
public String rename ( String oldkey , String newkey ) throws RedisException { } 
public boolean renamenx ( String oldkey , String brandnewkey ) tthrows RedisException { } 
public boolean sadd ( String setkey , T member ) throws RedisException { } 
public List < T > sinter ( String set1 , String . . . sets ) throws RedisException { } 
public boolean sismember ( String setKey , T member ) throws RedisException { } 
public boolean srem ( String setKey , T member ) throws RedisException { } 
public < T > SemanticJRedis < T > forType ( Class < T > type ) tthrows NotSupportedException { tSemanticJRedis < ? > semantics = null ; tif ( type . isAssignableFrom ( String . class ) ) { tsemantics = new SemanticJRedisSupport < String > ( jredis , ( Codec < String > ) map . get ( String . class ) ) ; } telse tif ( type . isAssignableFrom ( Serializable . class ) ) { tsemantics = new SemanticJRedisSupport < String > ( jredis , ( Codec < String > ) map . get ( String . class ) ) ; } treturn ( SemanticJRedis < T > ) semantics ; } 
tprotected void setUp ( ) throws Exception { tsuper . setUp ( ) ; tLog . log ( " TEST: generating random test data ... " ) ; tLog . log ( " TEST: Flushing the test dbs (using %d and %d) ... " , DB1 , DB2 ) ; ttry { tredis . select ( DB1 ) . flushdb ( ) ; 
public void testExistsCommands ( ) { tLog . log ( " TEST: test expire... this will Thread.sleep for a few secs ... " ) ; ttry { redis . select ( DB1 ) . flushdb ( ) ; } tcatch ( RedisException e1 ) { te1 . printStackTrace ( ) ; tfail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } ttry { tredis . select ( DB1 ) . flushdb ( ) ; 
public void testListCommands ( ) { tLog . log ( " TEST: test Commands Operating On Sets... " ) ; ttry { redis . select ( DB1 ) . flushdb ( ) ; } tcatch ( RedisException e1 ) { te1 . printStackTrace ( ) ; tfail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } tString key1 = " list1 " ; tString key2 = " list2 " ; ttry { tfor ( String item : stringList ) { 
public void testSetCommands ( ) { tLog . log ( " TEST: test Commands Operating On Sets... " ) ; ttry { redis . select ( DB1 ) . flushdb ( ) ; } tcatch ( RedisException e1 ) { te1 . printStackTrace ( ) ; tfail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } ttry { tString key1 = " set1 " ; 
public void testJavaObjects ( ) { tLog . log ( " TEST: test Commands Operating On String Values and Key Space... " ) ; ttry { redis . select ( DB1 ) . flushdb ( ) ; } tcatch ( RedisException e1 ) { te1 . printStackTrace ( ) ; tfail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } ttry { 
public void testCommandsOperatingOnStringValues ( ) { tLog . log ( " TEST: test Commands Operating On String Values and Key Space... " ) ; ttry { redis . select ( DB1 ) ; } tcatch ( RedisException e1 ) { te1 . printStackTrace ( ) ; tfail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } String key = null;try {Log.log("TEST: test Commands Operating On Key Space in database %d ...", DB1); 
public void testGetNaturalNumber ( ) { tbyte [ ] data = null ; test big data 
public < T extends Serializable > void rpush ( String key , T value ) throws RedisException { trpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < T extends Serializable > boolean sadd ( String key , T value ) throws RedisException { treturn sadd ( key , DefaultCodec . encode ( value ) ) ; } 
public < T extends Serializable > void set ( String key , T value ) throws RedisException { tset ( key , DefaultCodec . encode ( value ) ) ; } 
public < T extends Serializable > boolean setnx ( String key , T value ) throws RedisException { treturn setnx ( key , DefaultCodec . encode ( value ) ) ; } 
public < T extends Serializable > boolean sismember ( String key , T object ) throws RedisException { treturn sismember ( key , DefaultCodec . encode ( object ) ) ; } 
public < T extends Serializable > void lpush ( String key , T value ) throws RedisException { tlpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < T extends Serializable > tlong lrem ( String listKey , T object , int count ) throws RedisException { treturn lrem ( listKey , DefaultCodec . encode ( object ) , count ) ; } 
public < T extends Serializable > void lset ( String key , int index , T object ) throws RedisException { tlset ( key , index , DefaultCodec . encode ( object ) ) ; } 
public < T extends Serializable > boolean srem ( String key , T value ) throws RedisException { treturn srem ( key , DefaultCodec . encode ( value ) ) ; } 
public void testCommandsOperatingOnStringValues ( ) { tLog . log ( " TEST: Commands Operating On String Values and Key Space... " ) ; ttry { redis . select ( DB1 ) ; } tcatch ( RedisException e1 ) { te1 . printStackTrace ( ) ; tfail ( " error SELECTing database => " + e1 . getLocalizedMessage ( ) ) ; } String key = null;try {Log.log("TEST: Commands Operating On Key Space in database %d ...", DB1); 
public JRedis auth ( String authorization ) throws RedisException ; info () throws RedisException;} 
public JRedis ping ( ) throws RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public int tgetReconnectCnt ( ) ; public InetAddress getAddress ( ) ; public int getPort ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public InetAddress getAddress ( ) ; public int getPort ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public int getPort ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public String getParam ( String key ) ; public void setParam ( String key , String value ) ; tSet < String > getParamsKeys ( ) ; public Object get ( String name ) ; public void bind ( String name , Object value ) ; public void rebind ( String name , Object value ) ; } 
public void setParam ( String key , String value ) ; tSet < String > getParamsKeys ( ) ; public Object get ( String name ) ; public void bind ( String name , Object value ) ; public void rebind ( String name , Object value ) ; } 
tSet < String > getParamsKeys ( ) ; public Object get ( String name ) ; public void bind ( String name , Object value ) ; public void rebind ( String name , Object value ) ; } 
public Object get ( String name ) ; public void bind ( String name , Object value ) ; public void rebind ( String name , Object value ) ; } 
public T getInterface ( ) ; public Context getContext ( ) throws ResourceException ; } 
public void setContext ( Context context ) throws ResourceException ; public Context getContext ( ) throws ResourceException ; } 
tprotected final void connect ( ) throws IllegalStateException , ClientRuntimeException { } 
tprotected final void disconnect ( ) throws IllegalStateException { tAssert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; tsocketClose ( ) ; tisConnected = false ; tLog . log ( " RedisConnection - disconnected " ) ; } 
private final void newSocketConnect ( ) tthrows IOException { tsocket = new Socket ( ) ; tsocket . setKeepAlive ( tspec . getSocketFlag ( SO_KEEP_ALIVE ) ) ; tsocket . setPerformancePreferences ( tspec . getSocketProperty ( SO_PREF_CONN_TIME ) , tspec . getSocketProperty ( SO_PREF_LATENCY ) , tspec . getSocketProperty ( SO_PREF_BANDWIDTH ) ) ; tsocket . setSoTimeout ( tspec . getSocketProperty ( SO_TIMEOUT ) ) ; tif ( socket . getSendBufferSize ( ) < spec . getSocketProperty ( SO_SNDBUF ) ) tsocket . setSendBufferSize ( spec . getSocketProperty ( SO_SNDBUF ) ) ; tif ( socket . getReceiveBufferSize ( ) < spec . getSocketProperty ( SO_RCVBUF ) ) tsocket . setReceiveBufferSize ( spec . getSocketProperty ( SO_RCVBUF ) ) ; tsocket . connect ( socketAddress ) ; 
private final void initializeSocketStreams ( ) throws IllegalStateException , IOException { tinput_stream = Assert . notNull ( socket . getInputStream ( ) , " input_stream " , IllegalStateException . class ) ; toutput_stream = Assert . notNull ( socket . getOutputStream ( ) , " output_stream " , IllegalStateException . class ) ; 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException , ClientRuntimeException , ProviderException { tthrow new NotSupportedException ( " Response.serviceRequest(Command cmd, " + 
public Response serviceRequest ( RequestListener requestListener , Command cmd , byte [ ] . . . args ) tthrows RedisException , ClientRuntimeException , ProviderException { tthrow new NotSupportedException ( " Response.serviceRequest(RequestListener requestListener, " + 
tprotected Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException , ClientRuntimeException , ProviderException { treturn connection . serviceRequest ( cmd , args ) ; } 
tprotected final void setConnection ( Connection connection ) { tthis . connection = Assert . notNull ( connection , " connection on setConnection() " , ClientRuntimeException . class ) ; } 
public JRedis auth ( String key ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tthis . serviceRequest ( Command . AUTH , keydata ) ; treturn this ; } 
public JRedis select ( int index ) throws RedisException { tthis . serviceRequest ( Command . SELECT , Convert . toBytes ( index ) ) ; treturn this ; } 
public void rename ( String oldkey , String newkey ) throws RedisException { tbyte [ ] oldkeydata = null ; tif ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; tbyte [ ] newkeydata = null ; tif ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; tthis . serviceRequest ( Command . RENAME , oldkeydata , newkeydata ) ; } 
public boolean renamenx ( String oldkey , String newkey ) throws RedisException { tbyte [ ] oldkeydata = null ; tif ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; tbyte [ ] newkeydata = null ; tif ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; tboolean value = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . RENAMENX , oldkeydata , newkeydata ) ; tvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public void rpush ( String key , byte [ ] value ) tthrows RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tthis . serviceRequest ( Command . RPUSH , keybytes , value ) ; } 
public void rpush ( String key , String value ) throws RedisException { } 
public boolean sadd ( String key , byte [ ] member ) tthrows RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean res = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SADD , keybytes , member ) ; tres = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn res ; } 
public void set ( String key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tthis . serviceRequest ( Command . SET , keybytes , value ) ; } 
public boolean setnx ( String key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SETNX , keybytes , value ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public boolean sismember ( String key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean value = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SISMEMBER , keybytes , member ) ; tvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public boolean sismember ( String key , String value ) throws RedisException { treturn sismember ( key , DefaultCodec . encode ( value ) ) ; } 
public long incr ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . INCR , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } } 
public long incrby ( String key , int delta ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . INCRBY , keybytes , Convert . toBytes ( delta ) ) ; tvalue = valResponse . getLongValue ( ) ; } } 
public long decr ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MAX_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . DECR , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } } 
public long decrby ( String key , int delta ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MAX_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . DECRBY , keybytes , Convert . toBytes ( delta ) ) ; tvalue = valResponse . getLongValue ( ) ; } } 
public long llen ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Integer . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . LLEN , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } } 
public long scard ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SCARD , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } } 
public long dbsize ( ) throws RedisException { tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . DBSIZE ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public long lastsave ( ) throws RedisException { tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . LASTSAVE ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public byte [ ] get ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . GET , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public byte [ ] lindex ( String key , long index ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . LINDEX , keybytes , Convert . toBytes ( index ) ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public byte [ ] lpop ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . LPOP , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public byte [ ] rpop ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . RPOP , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public String randomkey ( ) throws RedisException { tString stringValue = null ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . RANDOMKEY ) ; tstringValue = valResponse . getStringValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn stringValue ; } 
public RedisType type ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tRedisType ttype = null ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . TYPE , keybytes ) ; tString stringValue = valResponse . getStringValue ( ) ; ttype = RedisType . valueOf ( stringValue ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn type ; } 
public Map < String , String > info ( ) throws RedisException { tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . INFO ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } tStringTokenizer tokenizer = new StringTokenizer ( new String ( bulkData ) , " r " ) ; tMap < String , String > infomap = new HashMap < String , String > ( 12 ) ; twhile ( tokenizer . hasMoreTokens ( ) ) { tString info = tokenizer . nextToken ( ) ; tint c = info . indexOf ( ':' ) ; tString key = info . substring ( 0 , c ) ; tString value = info . substring ( c + 1 ) ; tinfomap . put ( key , value ) ; } treturn infomap ; } 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + moreKeys . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : moreKeys ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . MGET , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public List < byte [ ] > smembers ( String key ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( key ) ) = = null ) tthrow new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . SMEMBERS , keydata ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public List < String > keys ( String pattern ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( pattern ) ) = = null ) tthrow new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . KEYS , keydata ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } tStringTokenizer tokenizer = new StringTokenizer ( new String ( bulkData ) , " " ) ; tList < String > keyList = new ArrayList < String > ( 12 ) ; twhile ( tokenizer . hasMoreTokens ( ) ) { tkeyList . add ( tokenizer . nextToken ( ) ) ; } treturn keyList ; } 
public List < byte [ ] > lrange ( String key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . LRANGE , keybytes , fromBytes , toBytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public Sort sort ( final String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisSupport client = this ; tSort sortQuery = new SortSupport ( key , keybytes ) { } 
tprotected List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) tthrows IllegalStateException , RedisException { tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) client . serviceRequest ( Command . SORT , keyBytes , sortSpecBytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . SINTER , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . SUNION , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public void sinterstore ( String dest , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } tthis . serviceRequest ( Command . SINTERSTORE , setbytes ) ; } 
public void sunionstore ( String dest , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } tthis . serviceRequest ( Command . SUNIONSTORE , setbytes ) ; } 
public boolean del ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . DEL , keybytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public boolean exists ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . EXISTS , keybytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public void lpush ( String key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tthis . serviceRequest ( Command . LPUSH , keybytes , value ) ; } 
public long lrem ( String key , byte [ ] value , int count ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] countBytes = Convert . toBytes ( count ) ; tlong remcnt = 0 ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . LREM , keybytes , value , countBytes ) ; tremcnt = valResponse . getLongValue ( ) ; } } 
public long lrem ( String listKey , String value , int count ) throws RedisException { treturn lrem ( listKey , DefaultCodec . encode ( value ) , count ) ; } 
public void lset ( String key , long index , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] indexBytes = Convert . toBytes ( index ) ; tthis . serviceRequest ( Command . LSET , keybytes , indexBytes , value ) ; } 
public void lset ( String key , long index , String value ) throws RedisException { tlset ( key , index , DefaultCodec . encode ( value ) ) ; } 
public void lset ( String key , long index , Number numberValue ) throws RedisException { tlset ( key , index , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException { tlset ( key , index , DefaultCodec . encode ( object ) ) ; } 
public boolean move ( String key , int dbIndex ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] toBytes = Convert . toBytes ( dbIndex ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . MOVE , keybytes , toBytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public boolean srem ( String key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SREM , keybytes , member ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public void ltrim ( String key , long keepFrom , long keepTo ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( keepFrom ) ; tbyte [ ] toBytes = Convert . toBytes ( keepTo ) ; tthis . serviceRequest ( Command . LTRIM , keybytes , fromBytes , toBytes ) ; } 
public boolean expire ( String key , int ttlseconds ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] ttlbytes = Convert . toBytes ( ttlseconds ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . EXPIRE , keybytes , ttlbytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd ) { case SINTERSTORE:case SUNION: case SUNIONSTORE:case MGET:{int keycnt = args.length;} 
public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException { tResponse response = null ; tswitch ( cmd ) { case MGET:case LRANGE:case SINTER:case SUNION:case SMEMBERS:case SORT:response = createMultiBulkResponse (cmd);break;default:throw new ProviderException ("createResponse() for Command " + cmd.code + " not yet implemented!");}return response; 
public void write ( OutputStream out ) throws ClientRuntimeException , ProviderException { ttry { tbuffer . writeTo ( out ) ; regrettably this does NOT throw exceptions 
public Response serviceRequest2 ( Command cmd , byte [ ] . . . args ) tthrows RedisException { tif ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; tRequest trequest = null ; tResponse tresponse = null ; tResponseStatus status = null ; ttry { } 
tprotected Connection createSynchConnection ( String host , int port , RedisVersion redisVersion ) { tInetAddress taddress = null ; tConnection tsynchConnection = null ; ttry { taddress = InetAddress . getByName ( host ) ; tsynchConnection = new SynchConnection ( address , port , redisVersion ) ; tAssert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( NotSupportedException e ) { tLog . log ( " Can not support redis protocol '%s' " , redisVersion ) ; tthrow e ; } tcatch ( ProviderException e ) { tLog . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; tthrow e ; } tcatch ( ClientRuntimeException e ) { tString msg = e . getMessage ( ) + " nMake sure your server is running. " ; tLog . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; tsetConnection ( new FaultedConnection ( msg ) ) ; } tcatch ( UnknownHostException e ) { tString msg = " Couldn't obtain InetAddress for " + host ; tLog . problem ( msg + " => " + e . getLocalizedMessage ( ) ) ; tthrow new ClientRuntimeException ( msg , e ) ; } treturn synchConnection ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tint size = super . readSize ( in , true ) ; tif ( size > 0 ) { ttry { tdata = super . readBulkData ( in , size ) ; } tcatch ( IllegalArgumentException bug ) { tthrow new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } tcatch ( IOException problem ) { tthrow new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } tcatch ( RuntimeException bug ) { tthrow new ProviderException ( " Bug: reading the bulk data bytes. expecting " + size + " bytes. " , bug ) ; } } telse if ( size = = 0 ) data = new byte [ 0 ] ; tdidRead = true ; treturn ; } 
public static final byte [ ] toBytes ( int i ) { tbyte [ ] data = null ; tboolean negative = false ; tif ( i > = INT_N_65535 & & i < = INT_P_65535 ) { tif ( i < 0 ) { tnegative = true ; ti = 0 - i ; } tif ( null = = i2b_65535 [ i ] ) { ti2b_65535 [ i ] = Integer . toString ( i ) . getBytes ( ) ; } tdata = i2b_65535 [ i ] ; tif ( negative ) data = getSignedNumberBytes ( data , negative ) ; } telse { tdata = Integer . toString ( i ) . getBytes ( ) ; } tif ( null = = data ) throw new RuntimeException ( " null for i= " + i + " and cache is: " + i2b_65535 [ i ] ) ; treturn data ; } 
public static final byte [ ] toBytes ( long lnum ) { tif ( lnum > = INT_N_65535 & & lnum < = INT_P_65535 ) treturn toBytes ( ( int ) lnum ) ; treturn Long . toString ( lnum ) . getBytes ( ) ; } 
public static final List < String > toStr ( List < byte [ ] > bytearray ) { tList < String > list = new ArrayList < String > ( bytearray . size ( ) ) ; tfor ( byte [ ] b : bytearray ) tif ( null ! = b ) tlist . add ( toStr ( b ) ) ; telse tlist . add ( null ) ; treturn list ; } 
public static final List < Long > toLong ( List < byte [ ] > bytearray ) { tList < Long > list = new ArrayList < Long > ( bytearray . size ( ) ) ; tfor ( byte [ ] b : bytearray ) list . add ( toLong ( b ) ) ; treturn list ; } 
public static final < T extends Serializable > tList < T > decode ( List < byte [ ] > byteList ) { tList < T > tobjectList = new ArrayList < T > ( byteList . size ( ) ) ; tfor ( byte [ ] bytes : byteList ) { tif ( null ! = bytes ) { tT object = ( T ) decode ( bytes ) ; tobjectList . add ( ( T ) object ) ; } telse { tobjectList . add ( null ) ; } } treturn objectList ; } 
public void suiteParametersInit ( tString password , tString host , tint port , tint db1 , tint db2 ) { tthis . password = password ; tthis . host = host ; tthis . port = port ; tthis . db1 = db1 ; tthis . db2 = db2 ; tLog . log ( " Suite parameters initialized <suiteParametersInit> " ) ; } 
public void setJRedisProvider ( ) { tsuper . setJRedisProviderInstance ( new JRedisClient ( this . host , this . port ) ) ; tLog . log ( " JRedisClientNGTest.setJRedisProvider " ) ; } 
public void testExistsAndExpire ( ) { ttest = Command . EXISTS . code + " | " + Command . EXPIRE . code ; tLog . log ( " TEST: %s command(s) " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSelectAndFlushdb ( ) { ttest = tCommand . SELECT . code + " | " + tCommand . FLUSHDB . code + " | " + tCommand . SET . code + " | " + tCommand . EXISTS . code + " | " + tCommand . FLUSHDB . code + " | " + tCommand . KEYS . code ; tLog . log ( " TEST: %s commands " , test ) ; ttry { tkey = " woof " ; 
public void testRename ( ) { ttest = Command . RENAME . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testRenamenx ( ) { ttest = Command . RENAMENX . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSaveAndLastSave ( ) { ttest = Command . SAVE . code + " | " + Command . LASTSAVE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testBgsave ( ) { ttest = Command . BGSAVE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSetStringByteArray ( ) { ttest = Command . SET . code + " | " + Command . SETNX . code + " byte[] | " + Command . GET ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSetStringString ( ) { ttest = Command . SET . code + " | " + Command . SETNX . code + " String | " + Command . GET ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSetStringNumber ( ) { ttest = Command . SET . code + " | " + Command . SETNX . code + " Long | " + Command . GET ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSetStringT ( ) { ttest = Command . SET . code + " | " + Command . SETNX . code + " Java Object | " + Command . GET ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testIncrAndDecr ( ) { ttest = Command . INCR . code + " | " + Command . DECR . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testIncrbyAndDecrby ( ) { ttest = Command . INCRBY . code + " | " + Command . DECRBY . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testDel ( ) { ttest = Command . DEL . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testMget ( ) { ttest = Command . MGET . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testRpushStringByteArray ( ) { ttest = Command . RPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLpushStringByteArray ( ) { ttest = Command . LPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testRpushStringString ( ) { ttest = Command . RPUSH . code + " String | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLpushStringString ( ) { ttest = Command . LPUSH . code + " String | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testRpushStringNumber ( ) { ttest = Command . RPUSH . code + " Number | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLpushStringNumber ( ) { ttest = Command . LPUSH . code + " Number | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testRpushStringT ( ) { ttest = Command . RPUSH . code + " Java Object | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLpushStringT ( ) { ttest = Command . LPUSH . code + " Java Object | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLtrim ( ) { ttest = Command . LTRIM . code + " | " + Command . LLEN . code + " | " + Command . LRANGE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLindex ( ) { ttest = Command . LINDEX . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLpop ( ) { ttest = Command . LPOP . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testRpop ( ) { ttest = Command . RPOP . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLrange ( ) { ttest = Command . LRANGE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLremStringByteArrayInt ( ) { ttest = Command . LREM . code + " byte[] | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLremStringStringInt ( ) { ttest = Command . LREM . code + " String | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLremStringNumberInt ( ) { ttest = Command . LREM . code + " Number | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLremStringTInt ( ) { ttest = Command . LREM . code + " Java Object | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLsetStringIntByteArray ( ) { ttest = Command . LSET . code + " byte[] | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLsetStringIntString ( ) { ttest = Command . LSET . code + " String | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLsetStringIntNumber ( ) { ttest = Command . LSET . code + " Number | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testLsetStringIntT ( ) { ttest = Command . LSET . code + " Java Object | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSort ( ) { ttest = Command . SORT . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSaddStringByteArray ( ) { ttest = Command . SADD . code + " byte[] " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSaddStringString ( ) { ttest = Command . SADD . code + " String " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSaddStringNumber ( ) { ttest = Command . SADD . code + " Number " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSaddStringT ( ) { ttest = Command . SADD . code + " Java Object " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSmembers ( ) { ttest = Command . SMEMBERS . code + " byte[] " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; tString setkey = keys . get ( 0 ) ; tfor ( int i = 0 ; i < SMALL_CNT ; i + + ) tassertTrue ( jredis . sadd ( setkey , dataList . get ( i ) ) , " sadd of random element should be true " ) ; tList < byte [ ] > members = null ; tmembers = jredis . smembers ( setkey ) ; tassertTrue ( members . size ( ) = = SMALL_CNT ) ; jredis.select(db1).flushdb(); 
public void testSismemberStringByteArray ( ) { ttest = Command . SISMEMBER . code + " byte[] " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSismemberStringString ( ) { ttest = Command . SISMEMBER . code + " String " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSismemberStringNumber ( ) { ttest = Command . SISMEMBER . code + " Number " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSismemberStringT ( ) { ttest = Command . SISMEMBER . code + " Java Object " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testScard ( ) { ttest = Command . SCARD . code + " Java Object " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSinter ( ) { ttest = Command . SINTER . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSinterstore ( ) { ttest = Command . SINTERSTORE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSunion ( ) { ttest = Command . SUNION . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSunionstore ( ) { ttest = Command . SUNIONSTORE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSremStringByteArray ( ) { ttest = Command . SISMEMBER . code + " byte[] " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSremStringString ( ) { ttest = Command . SISMEMBER . code + " String " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSremStringNumber ( ) { ttest = Command . SISMEMBER . code + " Number " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSremStringT ( ) { ttest = Command . SISMEMBER . code + " Java Object " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testDbsize ( ) { ttest = Command . DBSIZE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testRandomkey ( ) { ttest = Command . RANDOMKEY . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testMove ( ) { ttest = Command . MOVE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testType ( ) { ttest = Command . TYPE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testInfo ( ) { ttest = Command . INFO . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testKeys ( ) { ttest = Command . KEYS . code + " (*) " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testKeysString ( ) { ttest = Command . KEYS . code + " (using patterns) " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void providerTestSuiteParametersInit ( tint small_data , tint medium_data , tint large_data , tint small_cnt , tint medium_cnt , tint large_cnt , tint expire_secs , tint expire_wait_millisecs , tint svc_conn_cnt ) { tthis . SMALL_DATA = small_data ; tthis . MEDIUM_DATA = medium_data ; tthis . LARGE_DATA = large_data ; tthis . SMALL_CNT = small_cnt ; tthis . MEDIUM_CNT = medium_cnt ; tthis . LARGE_CNT = large_cnt ; tthis . expire_secs = expire_secs ; tthis . expire_wait_millisecs = expire_wait_millisecs ; tthis . svc_conn_cnt = svc_conn_cnt ; tLog . log ( " TEST-SUITE-PREP: JRedis Provider Test Suite parameters initialized " ) ; tsetupTestSuiteData ( ) ; } 
private final void setupTestSuiteData ( ) { tcnt = MEDIUM_CNT ; tfor ( int i = 0 ; i < cnt ; i + + ) { tkeys . add ( getRandomAsciiString ( 48 ) ) ; tpatternList . add ( getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) + patternA + getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) ) ; tuniqueSet . add ( getRandomAsciiString ( 48 ) ) ; tcommonSet . add ( getRandomAsciiString ( 48 ) ) ; tset1 . add ( " set_1 " + getRandomAsciiString ( 20 ) ) ; tset2 . add ( " set_2 " + getRandomAsciiString ( 20 ) ) ; tdataList . add ( getRandomBytes ( 128 ) ) ; tstringList . add ( getRandomAsciiString ( 128 ) ) ; tobjectList . add ( new TestBean ( " testbean. " + i ) ) ; tintList . add ( random . nextInt ( ) ) ; tlongList . add ( random . nextLong ( ) ) ; } tfor ( String m : commonSet ) { tset1 . add ( m ) ; tset2 . add ( m ) ; } tLog . log ( " TEST-SUITE-PREP: JRedis Provider Test Suite random test data created " ) ; 
tprotected final void setJRedisProviderInstance ( JRedis jredisProvider ) { tthis . jredis = jredisProvider ; tLog . log ( " TEST: " + " t----------------------------------------------- " + 
tprotected final void prepTestDBs ( ) { ttry { tjredis . auth ( password ) ; tLog . log ( " TEST-PREP: AUTH with password %s " + password ) ; } tcatch ( RedisException e ) { tLog . error ( " AUTH with password " + password + " => " + e . getLocalizedMessage ( ) ) ; tfail ( " AUTH with password: " + password , e ) ; } ttry { tjredis . select ( db1 ) . flushdb ( ) . select ( db2 ) . flushdb ( ) . select ( db1 ) ; 
tprotected String getRandomAsciiString ( int length ) { tStringBuilder builder = new StringBuilder ( length ) ; tfor ( int i = 0 ; i < length ; i + + ) { tchar c = ( char ) ( random . nextInt ( 126 - 33 ) + 33 ) ; tbuilder . append ( c ) ; } treturn builder . toString ( ) ; } 
public void compareLists ( List < String > strL1 , List < String > strL2 ) { tassertTrue ( strL1 . size ( ) = = strL2 . size ( ) , " un-equal size of the two lists under consideration " ) ; tfor ( int i = 0 ; i < strL1 . size ( ) ; i + + ) { tassertTrue ( strL2 . contains ( strL1 . get ( i ) ) , " set member equivelance at member " + i ) ; 
@Override public boolean equals ( Object o ) { tboolean res = false ; ttry { tTestBean isItMe = ( TestBean ) o ; tres = isItMe . getName ( ) . equals ( name ) & & isItMe . getCreated_on ( ) = = this . named_on ; } tcatch ( ClassCastException e ) { treturn false ; } treturn res ; } 
public JRedis auth ( String authorization ) throws RedisException ; info () throws RedisException;} 
public JRedis ping ( ) throws RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void run ( ) throws RedisException { tLog . log ( " ***** JProfileTestCase **** " ) ; tjredis . auth ( " jredis " ) . ping ( ) . flushall ( ) ; tint iter = 500000 ; tString key = " foo " ; tbyte [ ] data = " meow " . getBytes ( ) ; tjredis . incrby ( key , Integer . MAX_VALUE * 2 ) ; tlong start = System . currentTimeMillis ( ) ; tfor ( Long j = 0 L ; j < iter ; j + + ) { tjredis . ping ( ) ; tjredis . select ( 1 ) ; tjredis . incr ( key ) ; tjredis . select ( 2 ) ; tjredis . set ( key , data ) ; tjredis . select ( 3 ) ; tjredis . sadd ( key , data ) ; tjredis . select ( 4 ) ; tjredis . rpush ( key , data ) ; } tlong delta = System . currentTimeMillis ( ) - start ; tfloat rate = ( iter * 1000 ) / delta ; tSystem . out . format ( " %d iterations | %d msec | %8.2f /sec " , iter , delta , rate ) ; } 
public static void main ( String [ ] args ) throws RedisException { tJRedis tjredis = new JRedisClient ( ) ; tnew JRedisJProfileSubject ( jredis ) . run ( ) ; } 
tprotected Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException , ClientRuntimeException , ProviderException { tResponse response = connection . serviceRequest ( cmd , args ) ; } 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . GETSET , keybytes , value ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public byte [ ] getset ( String key , Number value ) throws RedisException { treturn getset ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > tbyte [ ] getset ( String key , T value ) throws RedisException { treturn getset ( key , DefaultCodec . encode ( value ) ) ; } 
public long incr ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . INCR , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public long incrby ( String key , int delta ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . INCRBY , keybytes , Convert . toBytes ( delta ) ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public long decr ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MAX_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . DECR , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public long decrby ( String key , int delta ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MAX_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . DECRBY , keybytes , Convert . toBytes ( delta ) ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public long llen ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Integer . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . LLEN , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public long scard ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SCARD , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public long lrem ( String key , byte [ ] value , int count ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] countBytes = Convert . toBytes ( count ) ; tlong remcnt = 0 ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . LREM , keybytes , value , countBytes ) ; tremcnt = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn remcnt ; } 
tprotected abstract void setConnection ( Connection connection ) ; }} 
tprotected final void connect ( ) throws IllegalStateException , ClientRuntimeException { isConnected = true; 
tprotected final void disconnect ( ) throws IllegalStateException { tAssert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; tsocketClose ( ) ; tisConnected = false ; 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd ) { case SINTERSTORE:case SUNION: case SUNIONSTORE:case MGET:{int keycnt = args.length;} 
public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException { tResponse response = null ; tswitch ( cmd ) { case MGET:case LRANGE:case SINTER:case SUNION:case SMEMBERS:case SORT:response = createMultiBulkResponse (cmd);break;default:throw new ProviderException ("createResponse() for Command " + cmd.code + " not yet implemented!");}return response; 
tprotected Request createRequest ( ByteArrayOutputStream buffer ) { } 
tprotected Response createStatusResponse ( Command cmd ) { tif ( null = = cache_synchLineResponse ) tcache_synchLineResponse = new SynchLineResponse ( cmd , ValueType . STATUS ) ; telse { tcache_synchLineResponse . reset ( cmd ) ; } treturn cache_synchLineResponse ; } 
tprotected Response createBooleanResponse ( Command cmd ) { tif ( null = = cache_synchLineResponse ) tcache_synchLineResponse = new SynchLineResponse ( cmd , ValueType . BOOLEAN ) ; telse { tcache_synchLineResponse . reset ( cmd , ValueType . BOOLEAN ) ; } treturn cache_synchLineResponse ; } 
tprotected Response createStringResponse ( Command cmd ) { tif ( null = = cache_synchLineResponse ) tcache_synchLineResponse = new SynchLineResponse ( cmd , ValueType . STRING ) ; telse { tcache_synchLineResponse . reset ( cmd , ValueType . STRING ) ; } treturn cache_synchLineResponse ; } 
tprotected Response createNumberResponse ( Command cmd ) { tValueType flavor = ValueType . NUMBER64 ; tif ( null = = cache_synchLineResponse ) tcache_synchLineResponse = new SynchLineResponse ( cmd , flavor ) ; telse { tcache_synchLineResponse . reset ( cmd , flavor ) ; } treturn cache_synchLineResponse ; } 
tprotected void reset ( Command cmd , Type type ) { tthis . cmd = cmd ; tthis . type = type ; toffset = 0 ; tdidRead = false ; tstatus = null ; tisError = false ; } 
tvoid readLine ( InputStream in ) { toffset = 0 ; tint c = - 1 ; tint available = buffer . length - offset ; while ((c = in.read(buffer, offset, available)) != -1) { 
tvoid seekToCRLF ( InputStream in ) { toffset = 0 ; tint c = - 1 ; tint available = buffer . length - offset ; ttry { twhile ( ( c = in . read ( buffer , offset , 1 ) ) ! = - 1 ) { toffset + + ; tavailable - - ; tif ( offset > 2 & & buffer [ offset - 2 ] = = ( byte ) 13 & & buffer [ offset - 1 ] = = ( byte ) 10 ) { tbreak ; } 
tint readControlLine ( InputStream in , boolean checkForError , byte ctlByte ) { tseekToCRLF ( in ) ; tif ( checkForError & & ( this . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = true ) { tstatus = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; tdidRead = true ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; return; 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tsuper . readLine ( in ) ; tif ( status . isError ( ) ) { tdidRead = true ; treturn ; } } 
public void testElicitErrors ( ) { ttest = Command . AUTH . code ; tLog . log ( " TEST: Elicit errors " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testGetSetStringByteArray ( ) { ttest = Command . SET . code + " | " + Command . GETSET . code + " byte[] " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public JRedis auth ( String authorization ) throws RedisException ; info () throws RedisException;} 
public JRedis ping ( ) throws RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void run ( ) throws RedisException { tLog . log ( " ***** JProfileTestCase **** " ) ; tjredis . auth ( " jredis " ) . ping ( ) . flushall ( ) ; tint iter = 100000 ; tString key = " foostring " ; tString cntrkey = " foocntr " ; tString listkey = " foolist " ; tString setkey = " fooset " ; tbyte [ ] data = " meow " . getBytes ( ) ; tlong start = System . currentTimeMillis ( ) ; tfor ( Long j = 0 L ; j < iter ; j + + ) { tjredis . incr ( cntrkey ) ; tjredis . set ( key , data ) ; tjredis . sadd ( setkey , data ) ; tjredis . rpush ( listkey , data ) ; } tlong delta = System . currentTimeMillis ( ) - start ; tfloat rate = ( iter * 1000 ) / delta ; tSystem . out . format ( " %d iterations | %d msec | %8.2f /sec " , iter , delta , rate ) ; } 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException { tbyte [ ] srcKeyBytes = null ; tif ( ( srcKeyBytes = getKeyBytes ( srcKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + srcKey + " ] " ) ; tbyte [ ] destKeyBytes = null ; tif ( ( destKeyBytes = getKeyBytes ( destKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + destKey + " ] " ) ; tboolean value = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SMOVE , srcKeyBytes , destKeyBytes , member ) ; tvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException { treturn smove ( srcKey , destKey , DefaultCodec . encode ( stringValue ) ) ; } 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException { treturn smove ( srcKey , destKey , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException { treturn smove ( srcKey , destKey , DefaultCodec . encode ( object ) ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd ) { case SINTERSTORE:case SUNION: case SUNIONSTORE:case MGET:{int keycnt = args.length;} 
public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException { tResponse response = null ; tswitch ( cmd ) { case MGET:case LRANGE:case SINTER:case SUNION:case SMEMBERS:case SORT:response = createMultiBulkResponse (cmd);break;default:throw new ProviderException ("createResponse() for Command " + cmd.code + " not yet implemented!");}return response; 
public void testSmoveStringByteArray ( ) { ttest = Command . SMOVE . code + " byte[] " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public JRedis auth ( String authorization ) throws RedisException ; info () throws RedisException;} 
public JRedis ping ( ) throws RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . SDIFF , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public void sdiffstore ( String dest , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } tthis . serviceRequest ( Command . SDIFFSTORE , setbytes ) ; } 
public long ttl ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . TTL , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd ) { case SINTERSTORE:case SUNION: case SUNIONSTORE:case SDIFF: case SDIFFSTORE:case MGET:{int keycnt = args.length;} 
public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException { tResponse response = null ; tswitch ( cmd ) { case MGET:case LRANGE:case SINTER:case SUNION:case SDIFF:case SMEMBERS:case SORT:response = createMultiBulkResponse (cmd);break;default:throw new ProviderException ("createResponse() for Command " + cmd.code + " not yet implemented!");}return response; 
public void testExists_Expire_TTL ( ) { ttest = Command . EXISTS . code + " | " + Command . EXPIRE . code + " | " + Command . TTL . code ; tLog . log ( " TEST: %s command(s) " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public void testSdiff ( ) { ttest = Command . SDIFF . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public JRedis auth ( String authorization ) throws RedisException ; info () throws RedisException;} 
public JRedis ping ( ) throws RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public JRedis select ( int index ) throws RedisException ; public JRedis flushdb ( ) throws RedisException ; public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) throws RedisException ; public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public Sort sort ( String key ) ; info () throws RedisException;} 
public void save ( ) throws RedisException ; public void bgsave ( ) throws RedisException ; public long lastsave ( ) throws RedisException ; @Deprecated public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public void bgsave ( ) throws RedisException ; public long lastsave ( ) throws RedisException ; @Deprecated public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public long lastsave ( ) throws RedisException ; @Deprecated public void shutdown ( ) throws RedisException ; info () throws RedisException;} 
public void testSdiffstore ( ) { ttest = Command . SDIFFSTORE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . select ( db1 ) . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public void quit ( ) ; info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) throws RedisException ; public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public JRedis flushall ( ) throws RedisException ; public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public Sort sort ( String key ) ; info () throws RedisException;} 
public void save ( ) throws RedisException ; public void bgsave ( ) throws RedisException ; public long lastsave ( ) throws RedisException ; info () throws RedisException;} 
public void bgsave ( ) throws RedisException ; public long lastsave ( ) throws RedisException ; info () throws RedisException;} 
public long lastsave ( ) throws RedisException ; info () throws RedisException;} 
public int tgetReconnectCnt ( ) ; public InetAddress getAddress ( ) ; public int getPort ( ) ; public byte [ ] getCredentials ( ) ; public int getDatabase ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public InetAddress getAddress ( ) ; public int getPort ( ) ; public byte [ ] getCredentials ( ) ; public int getDatabase ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public int getPort ( ) ; public byte [ ] getCredentials ( ) ; public int getDatabase ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public byte [ ] getCredentials ( ) ; public int getDatabase ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public int getDatabase ( ) ; public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
tprotected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
tprotected abstract JRedis newConnection ( String host , int port , int db , String password ) ; protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . ping ( ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . dbsize ( ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . sadd ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . lpush ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . rpush ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . incr ( key ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . decr ( key ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . incrby ( key , 10 ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . decrby ( key , 10 ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . set ( key , data ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . setnx ( key , data ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public void run ( ) throws RedisException { tLog . log ( " ***** JProfileTestCase **** " ) ; } 
tprotected final JRedis newConnection ( String host , int port , int db , String password ) { treturn new JRedisClient ( host , port , password , db ) ; } 
public static void main ( String [ ] args ) throws RedisException { tJRedis tjredis = new JRedisClient ( " localhost " , 6379 , " jredis " , 0 ) ; tnew JRedisJProfileSubject ( jredis ) . run ( ) ; } 
tprotected abstract void setConnection ( Connection connection ) ; }} 
tprotected Connection createSynchConnection ( String host , int port , int database , byte [ ] credentials , RedisVersion redisVersion ) { tInetAddress taddress = null ; tConnection tsynchConnection = null ; ttry { taddress = InetAddress . getByName ( host ) ; tsynchConnection = new SynchConnection ( address , port , database , credentials , redisVersion ) ; tAssert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( NotSupportedException e ) { tLog . log ( " Can not support redis protocol '%s' " , redisVersion ) ; tthrow e ; } tcatch ( ProviderException e ) { tLog . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; tthrow e ; } tcatch ( ClientRuntimeException e ) { tString msg = e . getMessage ( ) + " nMake sure your server is running. " ; tLog . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; tsetConnection ( new FaultedConnection ( msg ) ) ; } tcatch ( UnknownHostException e ) { tString msg = " Couldn't obtain InetAddress for " + host ; tLog . problem ( msg + " => " + e . getLocalizedMessage ( ) ) ; tthrow new ClientRuntimeException ( msg , e ) ; } treturn synchConnection ; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException { treturn serviceRequest ( false , cmd , args ) ; } 
public void setJRedisProvider ( ) { tsuper . setJRedisProviderInstance ( new JRedisClient ( this . host , this . port , this . password , this . db1 ) ) ; tLog . log ( " JRedisClientNGTest.setJRedisProvider " ) ; } 
public void testElicitErrors ( ) { ttest = Command . AUTH . code ; tLog . log ( " TEST: Elicit errors " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testExists_Expire_TTL ( ) { ttest = Command . EXISTS . code + " | " + Command . EXPIRE . code + " | " + Command . TTL . code ; tLog . log ( " TEST: %s command(s) " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testRenamenx ( ) { ttest = Command . RENAMENX . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSaveAndLastSave ( ) { ttest = Command . SAVE . code + " | " + Command . LASTSAVE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSetStringByteArray ( ) { ttest = Command . SET . code + " | " + Command . SETNX . code + " byte[] | " + Command . GET ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSetStringString ( ) { ttest = Command . SET . code + " | " + Command . SETNX . code + " String | " + Command . GET ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSetStringNumber ( ) { ttest = Command . SET . code + " | " + Command . SETNX . code + " Long | " + Command . GET ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSetStringT ( ) { ttest = Command . SET . code + " | " + Command . SETNX . code + " Java Object | " + Command . GET ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testGetSetStringByteArray ( ) { ttest = Command . SET . code + " | " + Command . GETSET . code + " byte[] " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testIncrAndDecr ( ) { ttest = Command . INCR . code + " | " + Command . DECR . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testIncrbyAndDecrby ( ) { ttest = Command . INCRBY . code + " | " + Command . DECRBY . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testRpushStringByteArray ( ) { ttest = Command . RPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLpushStringByteArray ( ) { ttest = Command . LPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testRpushStringString ( ) { ttest = Command . RPUSH . code + " String | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLpushStringString ( ) { ttest = Command . LPUSH . code + " String | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testRpushStringNumber ( ) { ttest = Command . RPUSH . code + " Number | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLpushStringNumber ( ) { ttest = Command . LPUSH . code + " Number | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testRpushStringT ( ) { ttest = Command . RPUSH . code + " Java Object | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLpushStringT ( ) { ttest = Command . LPUSH . code + " Java Object | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLtrim ( ) { ttest = Command . LTRIM . code + " | " + Command . LLEN . code + " | " + Command . LRANGE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLremStringByteArrayInt ( ) { ttest = Command . LREM . code + " byte[] | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLremStringStringInt ( ) { ttest = Command . LREM . code + " String | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLremStringNumberInt ( ) { ttest = Command . LREM . code + " Number | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLremStringTInt ( ) { ttest = Command . LREM . code + " Java Object | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLsetStringIntByteArray ( ) { ttest = Command . LSET . code + " byte[] | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLsetStringIntString ( ) { ttest = Command . LSET . code + " String | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLsetStringIntNumber ( ) { ttest = Command . LSET . code + " Number | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testLsetStringIntT ( ) { ttest = Command . LSET . code + " Java Object | " + Command . LLEN ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSaddStringByteArray ( ) { ttest = Command . SADD . code + " byte[] " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSaddStringString ( ) { ttest = Command . SADD . code + " String " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSaddStringNumber ( ) { ttest = Command . SADD . code + " Number " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSaddStringT ( ) { ttest = Command . SADD . code + " Java Object " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSmembers ( ) { ttest = Command . SMEMBERS . code + " byte[] " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; tString setkey = keys . get ( 0 ) ; tfor ( int i = 0 ; i < SMALL_CNT ; i + + ) tassertTrue ( jredis . sadd ( setkey , dataList . get ( i ) ) , " sadd of random element should be true " ) ; tList < byte [ ] > members = null ; tmembers = jredis . smembers ( setkey ) ; tassertTrue ( members . size ( ) = = SMALL_CNT ) ; jredis.flushdb(); 
public void testSmoveStringByteArray ( ) { ttest = Command . SMOVE . code + " byte[] " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSismemberStringByteArray ( ) { ttest = Command . SISMEMBER . code + " byte[] " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSismemberStringString ( ) { ttest = Command . SISMEMBER . code + " String " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSismemberStringNumber ( ) { ttest = Command . SISMEMBER . code + " Number " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSismemberStringT ( ) { ttest = Command . SISMEMBER . code + " Java Object " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testScard ( ) { ttest = Command . SCARD . code + " Java Object " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSinterstore ( ) { ttest = Command . SINTERSTORE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSunionstore ( ) { ttest = Command . SUNIONSTORE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSdiffstore ( ) { ttest = Command . SDIFFSTORE . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSremStringByteArray ( ) { ttest = Command . SISMEMBER . code + " byte[] " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSremStringString ( ) { ttest = Command . SISMEMBER . code + " String " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSremStringNumber ( ) { ttest = Command . SISMEMBER . code + " Number " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testSremStringT ( ) { ttest = Command . SISMEMBER . code + " Java Object " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testRandomkey ( ) { ttest = Command . RANDOMKEY . code ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testKeys ( ) { ttest = Command . KEYS . code + " (*) " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public void testKeysString ( ) { ttest = Command . KEYS . code + " (using patterns) " ; tLog . log ( " TEST: %s command " , test ) ; ttry { tjredis . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; info () throws RedisException;} 
public JRedis flushdb ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public JRedis flushall ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean move ( String key , int dbIndex ) throws RedisException ; info () throws RedisException;} 
public Sort sort ( String key ) ; info () throws RedisException;} 
public void save ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void bgsave ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lastsave ( ) throws RedisException ; info () throws RedisException;} 
public InetAddress getAddress ( ) ; } 
public int getPort ( ) ; } 
public byte [ ] getCredentials ( ) ; } 
public int getDatabase ( ) ; } 
public boolean getSocketFlag ( ConnectionSpec . SocketFlag flag ) ; } 
public Integer getSocketProperty ( ConnectionSpec . SocketProperty property ) ; } 
public int tgetReconnectCnt ( ) ; } 
tprotected final void reconnect ( ) { tLog . log ( " RedisConnection - reconnecting " ) ; tint attempts = 0 ; twhile ( true ) { ttry { 
tprotected final void connect ( ) throws IllegalStateException , ClientRuntimeException { Log.log("RedisConnection - connected"); 
public final byte [ ] readBulkData ( InputStream in , int length ) tthrows IOException , RuntimeException { tbyte [ ] data = new byte [ length ] ; } 
public final byte [ ] readBulkData ( InputStream in , int length ) tthrows IOException , RuntimeException { tbyte [ ] data = new byte [ length ] ; } 
public static final void log ( String msg ) { _loginfo ( msg ) ; } public static final void error ( String msg ) { _log ( Category . ERROR , msg ) ; } 
tprotected abstract void setConnection ( Connection connection ) ; }} 
tprotected Connection createSynchConnection ( String host , int port , int database , byte [ ] credentials , RedisVersion redisVersion ) { tInetAddress taddress = null ; tConnection tsynchConnection = null ; ttry { taddress = InetAddress . getByName ( host ) ; tConnectionSpec spec = SynchConnection . getDefaultConnectionSpec ( address , port , database , credentials ) ; tsynchConnection = createSynchConnection ( spec , redisVersion ) ; tAssert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( UnknownHostException e ) { tString msg = " Couldn't obtain InetAddress for " + host ; tLog . problem ( msg + " => " + e . getLocalizedMessage ( ) ) ; tthrow new ClientRuntimeException ( msg , e ) ; } treturn synchConnection ; } 
tprotected Connection createSynchConnection ( ConnectionSpec connectionSpec , RedisVersion redisVersion ) { tConnection tsynchConnection = null ; ttry { tsynchConnection = new SynchConnection ( connectionSpec , redisVersion ) ; tAssert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( NotSupportedException e ) { tLog . log ( " Can not support redis protocol '%s' " , redisVersion ) ; tthrow e ; } tcatch ( ProviderException e ) { tLog . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; tthrow e ; } tcatch ( ClientRuntimeException e ) { tString msg = e . getMessage ( ) + " nMake sure your server is running. " ; tLog . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; tsetConnection ( new FaultedConnection ( msg ) ) ; } treturn synchConnection ; } 
public static final ConnectionSpec getDefaultConnectionSpec ( tInetAddress taddress , tint tport , tint tdatabase , tbyte [ ] tcredentials ) tthrows ClientRuntimeException { treturn new DefaultConnectionSpec ( address , port , database , credentials ) ; } 
private void setDefaultProperties ( ) { setSocketProperty(SO_PREF_LATENCY, DEFAULT_SO_PREF_LATENCY); } 
public String getRandomString ( int size ) { tStringBuilder builder = new StringBuilder ( size ) ; tfor ( int i = 0 ; i < size ; i + + ) { tchar c = ( char ) ( random . nextInt ( 126 - 33 ) + 33 ) ; tbuilder . append ( c ) ; } treturn builder . toString ( ) ; } 
tprotected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
tprotected abstract JRedis newConnection ( String host , int port , int db , String password ) ; protected abstract void work();}} 
tprotected final void runBenchmarks ( String host , int port , int connectionCnt , int reqCnt , int size , int db ) { Benchmarker.runBenchmark (Command.SREM, reqCnt, connectionCnt, workers); 
public ConnectionSpec setAddress ( InetAddress address ) { tthis . address = address ; treturn this ; } 
public ConnectionSpec setCredentials ( byte [ ] credentials ) { tthis . credentials = credentials ; treturn this ; } 
public ConnectionSpec setDatabase ( int database ) { tthis . database = database ; treturn this ; } 
public ConnectionSpec setReconnectCnt ( int reconnectCnt ) { tthis . reconnectCnt = reconnectCnt ; treturn this ; } 
tConnectionSpec getDefaultConnectionSpec ( ) { ConnectionSpec defaultConnectionSpec = null ; ttry { tdefaultConnectionSpec = getDefaultConnectionSpec ( " localhost " , 6379 , null , 0 ) ; } catch ( UnknownHostException e ) { e . printStackTrace ( ) ; } 
private ConnectionSpec getDefaultConnectionSpec ( String host , int port , String password , int database ) throws UnknownHostException { tInetAddress address = InetAddress . getByName ( host ) ; return SynchConnection . getDefaultConnectionSpec ( address , port , database , getCredentialBytes ( password ) ) ; } 
public ConnectionSpec getDefaultConnectionSpec ( ) { ConnectionSpec defaultConnectionSpec = null ; ttry { tdefaultConnectionSpec = getDefaultConnectionSpec ( " localhost " , 6379 , null , 0 ) ; } catch ( UnknownHostException e ) { e . printStackTrace ( ) ; } 
public ConnectionSpec getDefaultConnectionSpec ( String host , int port , String password , int database ) throws UnknownHostException { tInetAddress address = InetAddress . getByName ( host ) ; return SynchConnection . getDefaultConnectionSpec ( address , port , database , getCredentialBytes ( password ) ) ; } 
public static ConnectionSpec getDefaultConnectionSpec ( ) { ConnectionSpec defaultConnectionSpec = null ; ttry { tdefaultConnectionSpec = getDefaultConnectionSpec ( " localhost " , 6379 , null , 0 ) ; } catch ( UnknownHostException e ) { e . printStackTrace ( ) ; } 
public static ConnectionSpec getDefaultConnectionSpec ( String host , int port , String password , int database ) throws UnknownHostException { tInetAddress address = InetAddress . getByName ( host ) ; return SynchConnection . getDefaultConnectionSpec ( address , port , database , getCredentialBytes ( password ) ) ; } 
public static void main ( String [ ] args ) { exampleUsingDefaultConnectionSpec ( ) ; exampleUsingCustomTCPSettings ( ) ; } 
private static void exampleUsingCustomTCPSettings ( ) { Note that if your localhost:6379 redis server expects a password 
private static void exampleUsingDefaultConnectionSpec ( ) { Note that if your localhost:6379 redis server expects a password 
public < T > Codec < T > getKeyCodec ( Class < T > keyClass ) ; public < T > Semantics setValueCodec ( Class < T > valueClass , Codec < T > valueCdec ) ; } 
public < T > Semantics setKeyCodec ( Class < T > keyClass , Codec < T > keyCodec ) ; public < T > Semantics setValueCodec ( Class < T > valueClass , Codec < T > valueCdec ) ; } 
public < T > Codec < T > getValueCodec ( Class < T > valueClass ) ; public < T > Semantics setValueCodec ( Class < T > valueClass , Codec < T > valueCdec ) ; } 
public T decode ( byte [ ] bytes ) ; public boolean supports ( Class < ? > type ) ; } 
public byte [ ] encode ( T object ) ; public boolean supports ( Class < ? > type ) ; } 
public static final byte [ ] compress ( byte [ ] data ) { tByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; ttry { GZIPOutputStream gzipOutputtStream = new GZIPOutputStream ( out ) ; gzipOutputtStream . write ( data ) ; gzipOutputtStream . close ( ) ; } catch ( IOException e ) { tthrow new RuntimeException ( " Failed to GZip compress data " , e ) ; } return out . toByteArray ( ) ; } 
public static final byte [ ] decompress ( byte [ ] data ) { tByteArrayOutputStream buffer = null ; tGZIPInputStream gizpInputStream = null ; ttry { tbuffer = new ByteArrayOutputStream ( ) ; tgizpInputStream = new GZIPInputStream ( new ByteArrayInputStream ( data ) ) ; tint = - 1 ; tint tot = 0 ; tbyte [ ] _buffer = new byte [ 1024 * 12 ] ; twhile ( - 1 ! = ( = gizpInputStream . read ( _buffer ) ) ) { tbuffer . write ( _buffer , 0 , ) ; ttot + = ; } tgizpInputStream . close ( ) ; tbuffer . close ( ) ; } tcatch ( IOException e ) { tthrow new RuntimeException ( " Failed to GZip decompress data " , e ) ; } treturn buffer . toByteArray ( ) ; } 
public void testCompression ( ) { tLog . log ( " Testing compress/decompress of 1000 random 24KB strings ... " ) ; tint cnt = 1000 ; tint size = 1024 * 24 ; tfor ( int i = 0 ; i < cnt ; i + + ) { tString randomString = getRandomString ( size ) ; 
public static final int getInt ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) throws IllegalArgumentException { tbyte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final long getLong ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) throws IllegalArgumentException { tbyte [ ] buff = potentiallySignedAsciiBytes ; } 
tint readControlLine ( InputStream in , boolean checkForError , byte ctlByte ) { tseekToCRLF ( in ) ; tif ( checkForError & & ( this . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = true ) { tstatus = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; tdidRead = true ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tsuper . readLine ( in ) ; tif ( status . isError ( ) ) { tdidRead = true ; treturn ; } } 
public static final int toInt ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) throws IllegalArgumentException { tbyte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final long toLong ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) throws IllegalArgumentException { tbyte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final int toInt ( byte [ ] potentiallySignedBytes ) throws IllegalArgumentException { tif ( null = = potentiallySignedBytes ) throw new IllegalArgumentException ( " null input " ) ; treturn toInt ( potentiallySignedBytes , 0 , potentiallySignedBytes . length ) ; } 
public static final long toLong ( byte [ ] potentiallySignedBytes ) throws IllegalArgumentException { tif ( null = = potentiallySignedBytes ) throw new IllegalArgumentException ( " null input " ) ; treturn toLong ( potentiallySignedBytes , 0 , potentiallySignedBytes . length ) ; } 
public void testGetNaturalNumber ( ) { tbyte [ ] data = null ; test big data 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd . requestType ) { } 
public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException { tResponse response = null ; tswitch ( cmd . responseType ) { tcase BOOLEAN : tresponse = createBooleanResponse ( cmd ) ; tbreak ; tcase BULK : tresponse = createBulkResponse ( cmd ) ; tbreak ; tcase MULTI_BULK : tresponse = createMultiBulkResponse ( cmd ) ; tbreak ; tcase NUMBER : tresponse = createNumberResponse ( cmd ) ; tbreak ; tcase STATUS : tresponse = createStatusResponse ( cmd ) ; tbreak ; tcase STRING : tresponse = createStringResponse ( cmd ) ; tbreak ; tcase VIRTUAL : tresponse = new VirtualResponse ( ResponseStatus . STATUS_CIAO ) ; tbreak ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd . requestType ) { tcase NO_ARG : } 
public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException { tResponse response = null ; tswitch ( cmd . responseType ) { tcase BOOLEAN : tresponse = createBooleanResponse ( cmd ) ; tbreak ; tcase BULK : tresponse = createBulkResponse ( cmd ) ; tbreak ; tcase MULTI_BULK : tresponse = createMultiBulkResponse ( cmd ) ; tbreak ; tcase NUMBER : tresponse = createNumberResponse ( cmd ) ; tbreak ; tcase STATUS : tresponse = createStatusResponse ( cmd ) ; tbreak ; tcase STRING : tresponse = createStringResponse ( cmd ) ; tbreak ; tcase VIRTUAL : tresponse = new VirtualResponse ( ResponseStatus . STATUS_CIAO ) ; tbreak ; } treturn response ; 
tprotected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
tprotected abstract JRedis newConnection ( String host , int port , int db , String password ) throws ClientRuntimeException ; protected abstract void work();}} 
tprotected final JRedis newConnection ( String host , int port , int db , String password ) throws ClientRuntimeException { treturn new JRedisClient ( host , port , password , db ) ; } 
public static void main ( String [ ] args ) throws RedisException { tJRedis jredis ; jredis = new JRedisClient ( " localhost " , 6379 , " jredis " , 0 ) ; tnew JRedisJProfileSubject ( jredis ) . run ( ) ; } 
tprotected Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException , ClientRuntimeException , ProviderException { tResponse response = connection . serviceRequest ( cmd , args ) ; treturn response ; } 
private final void initialize ( ) { tconnPoolAccess = new Semaphore ( connCount ) ; tconns = new Connection [ connCount ] ; tconnInUse = new boolean [ connCount ] ; tConnection conn = null ; tfor ( int i = 0 ; i < connCount ; i + + ) { note: using a shared connection mod 
tprotected Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException , ClientRuntimeException , ProviderException { tResponse response = null ; } 
tprotected abstract void setConnection ( Connection connection ) ; }} 
tprotected Connection createSynchConnection ( String host , int port , int database , byte [ ] credentials , boolean isShared , RedisVersion redisVersion ) { tInetAddress taddress = null ; tConnection tsynchConnection = null ; ttry { taddress = InetAddress . getByName ( host ) ; tConnectionSpec spec = DefaultConnectionSpec . newSpec ( address , port , database , credentials ) ; tsynchConnection = createSynchConnection ( spec , isShared , redisVersion ) ; tAssert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( UnknownHostException e ) { tString msg = " Couldn't obtain InetAddress for " + host ; tLog . problem ( msg + " => " + e . getLocalizedMessage ( ) ) ; tthrow new ClientRuntimeException ( msg , e ) ; } treturn synchConnection ; } 
tprotected Connection createSynchConnection ( ConnectionSpec connectionSpec , boolean isShared , RedisVersion redisVersion ) { tConnection tsynchConnection = null ; ttry { tsynchConnection = new SynchConnection ( connectionSpec , isShared , redisVersion ) ; tAssert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( NotSupportedException e ) { tLog . log ( " Can not support redis protocol '%s' " , redisVersion ) ; tthrow e ; } tcatch ( ProviderException e ) { tLog . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; tthrow e ; } tcatch ( ClientRuntimeException e ) { tString msg = e . getMessage ( ) + " nMake sure your server is running. " ; tLog . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; tsetConnection ( new FaultedConnection ( msg ) ) ; } treturn synchConnection ; } 
tprotected final void connect ( ) throws IllegalStateException , ClientRuntimeException { Log.log("RedisConnection - connected"); 
private void setDefaultProperties ( ) { setSocketProperty(SO_PREF_LATENCY, DEFAULT_SO_PREF_LATENCY); } 
public static final ConnectionSpec newSpec ( ) tthrows ClientRuntimeException { treturn newSpec ( " localhost " , 6379 , 0 , null ) ; } 
public static final ConnectionSpec newSpec ( tString thost , tint tport , tint tdatabase , tbyte [ ] tcredentials ) tthrows ClientRuntimeException { tInetAddress address ; try { address = InetAddress . getByName ( host ) ; } catch ( UnknownHostException e ) { tthrow new ClientRuntimeException ( " unknown host: " + host , e ) ; } treturn newSpec ( address , port , database , credentials ) ; } 
public static final ConnectionSpec newSpec ( tInetAddress taddress , tint tport , tint tdatabase , tbyte [ ] tcredentials ) tthrows ClientRuntimeException { treturn new DefaultConnectionSpec ( address , port , database , credentials ) ; } 
tprotected Response createStatusResponse ( Command cmd ) { treturn new SynchLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , ValueType . STATUS ) ; } 
tprotected Response createBooleanResponse ( Command cmd ) { treturn new SynchLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , ValueType . BOOLEAN ) ; } 
tprotected Response createStringResponse ( Command cmd ) { treturn new SynchLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , ValueType . STRING ) ; } 
tprotected Response createNumberResponse ( Command cmd ) { tValueType flavor = ValueType . NUMBER64 ; treturn new SynchLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , flavor ) ; } 
tprotected Response createBulkResponse ( Command cmd ) { treturn new SynchBulkResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd ) ; } 
tprotected Response createMultiBulkResponse ( Command cmd ) { treturn new SynchMultiBulkResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd ) ; } 
public static final < E extends RuntimeException > tvoid identical ( byte [ ] a , byte [ ] b , Class < E > clazz ) { tnotNull ( a , " arg a " , clazz ) ; tnotNull ( b , " arg b " , clazz ) ; tif ( a . length ! = b . length ) { tthrowIt ( " byte arrays being compared are of unequal length " , clazz ) ; } tfor ( int i = 0 ; i < a . length ; i + + ) { tif ( a [ i ] ! = b [ i ] ) { 
public void setJRedisProvider ( ) { ttry { tJRedis jredis = new JRedisClient ( this . host , this . port , this . password , this . db1 ) ; 
private static void exampleUsingDefaultConnectionSpec ( ) { Note that if your localhost:6379 redis server expects a password 
public static void main ( String [ ] args ) { tint database = 11 ; tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; tint connCnt = 10 ; tint userCnt = 100 ; tint opsCnt = 50000 ; 
private static Thread getDummyUser ( final int id , final int opsCnt ) { tThread user = new Thread ( new Runnable ( ) { @Override public void run ( ) { ttry { tString key = null ; tbyte [ ] value = null ; tfor ( int i = 0 ; i < opsCnt ; i + + ) { tkey = " foo " + i + " _ " + id ; tvalue = ( " woof_ " + i + " _ " + id ) . getBytes ( ) ; tservice . set ( key , value ) ; } } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } , " user_ " + id ) ; treturn user ; } 
tvoid readSingleLineResponse ( InputStream in ) { toffset = 0 ; tint c = - 1 ; tint available = buffer . length - offset ; while ((c = in.read(buffer, offset, available)) != -1) { 
public final byte [ ] readBulkData ( InputStream in , int length ) tthrows IOException , RuntimeException { tbyte [ ] data = new byte [ length ] ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tsuper . readSingleLineResponse ( in ) ; tif ( status . isError ( ) ) { tdidRead = true ; treturn ; } } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tint size = readControlLine ( in , true , SIZE_BYTE ) ; tif ( status . isError ( ) ) { tdidRead = true ; treturn ; } tif ( size > = 0 ) { ttry { tdata = super . readBulkData ( in , size ) ; } tcatch ( IllegalArgumentException bug ) { tthrow new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } tcatch ( IOException problem ) { tthrow new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } tcatch ( RuntimeException bug ) { tthrow new ProviderException ( " Bug: reading the bulk data bytes. expecting " + size + " bytes. " , bug ) ; } } tdidRead = true ; treturn ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tint count = super . readControlLine ( in , true , COUNT_BYTE ) ; tif ( status . isError ( ) ) { tdidRead = true ; treturn ; } tif ( count > = 0 ) { tdatalist = new ArrayList < byte [ ] > ( count ) ; ttry { tint size = - 1 ; tfor ( int i = 0 ; i < count ; i + + ) { tsize = readControlLine ( in , false , SIZE_BYTE ) ; tif ( size > 0 ) tdatalist . add ( super . readBulkData ( in , size ) ) ; telse tdatalist . add ( null ) ; } } tcatch ( IllegalArgumentException bug ) { tthrow new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } tcatch ( IOException problem ) { tthrow new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } tcatch ( RuntimeException bug ) { tthrow new ProviderException ( " Bug: reading the multibulk data bytes. " , bug ) ; } } tdidRead = true ; treturn ; 
public static final String format ( String format , Object . . . args ) { tFormatter formatter = new Formatter ( ) ; tformatter . format ( format , args ) ; treturn formatter . toString ( ) ; } 
protected void quitOnRunEnd ( boolean flag ) { this . quitOnRunEnd = flag ; } ------------------------------------------------------------------------ 
tprotected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
tprotected abstract JRedis newConnection ( String host , int port , int db , String password ) throws ClientRuntimeException ; protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . ping ( ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . dbsize ( ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . sadd ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . lpush ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . rpush ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . incr ( key ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . decr ( key ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . incrby ( key , 10 ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . decrby ( key , 10 ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . set ( key , data ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . setnx ( key , data ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public static void main ( String [ ] args ) { } 
public static void main ( String [ ] args ) { } 
tprotected final JRedis newConnection ( String host , int port , int db , String password ) throws ClientRuntimeException { treturn jredisService ; } 
tprotected final void connect ( ) throws IllegalStateException , ClientRuntimeException { Log.log("RedisConnection - connected"); 
tprotected void reset ( Command cmd , Type type ) { tthis . cmd = cmd ; tthis . type = type ; treadOffset = 0 ; tdidRead = false ; tstatus = null ; tisError = false ; } 
tvoid readSingleLineResponse ( InputStream in ) { treadOffset = 0 ; tint c = - 1 ; tint available = buffer . length ; ttry { twhile ( ( c = in . read ( buffer , readOffset , available ) ) ! = - 1 ) { 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tsuper . readSingleLineResponse ( in ) ; tif ( status . isError ( ) ) { tdidRead = true ; treturn ; } } 
tvoid seekToCRLF ( BufferedInputStream in ) { treadOffset = 0 ; } 
tint readControlLine ( BufferedInputStream in , boolean checkForError , byte ctlByte ) { tseekToCRLF ( in ) ; tif ( checkForError & & ( this . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = true ) { tstatus = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , readOffset - 3 ) ) ; tdidRead = true ; } 
public final byte [ ] readBulkData ( BufferedInputStream in , int length ) tthrows IOException , RuntimeException { tbyte [ ] data = new byte [ length ] ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tBufferedInputStream bin = new BufferedInputStream ( in , INPUT_STREAM_BUFFER_SIZE ) ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tBufferedInputStream bin = new BufferedInputStream ( in , 1024 ) ; return; 
public static void main ( String [ ] args ) { tint database = 11 ; tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; tint connCnt = 7 ; tint userCnt = 10 ; tint opsCnt = 100000 ; users[i].start(); 
private static Thread getDummyUser ( final int id , final int opsCnt ) { tThread user = new Thread ( new Runnable ( ) { @Override public void run ( ) { ttry { tString key = null ; tbyte [ ] value = null ; tfor ( int i = 0 ; i < opsCnt ; i + + ) { tkey = " foo " + i + " _ " + id ; tvalue = ( " woof_ " + i + " _ " + id ) . getBytes ( ) ; tservice . set ( key , value ) ; tservice . get ( key ) ; } } catch ( RedisException e ) { e . printStackTrace ( ) ; } } } , " user_ " + id ) ; treturn user ; } 
tvoid readSingleLineResponse ( InputStream in ) { toffset = 0 ; tint c = - 1 ; tint available = buffer . length ; ttry { twhile ( ( c = in . read ( buffer , offset , available ) ) ! = - 1 ) { 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tsuper . readSingleLineResponse ( in ) ; tdidRead = true ; switch (flavor){ 
tvoid seekToCRLF ( BufferedInputStream in ) { toffset = 0 ; tint c = - 1 ; tint available = buffer . length ; ttry { twhile ( ( c = in . read ( buffer , offset , 1 ) ) ! = - 1 ) { toffset + = c ; tavailable - = c ; tif ( offset > 2 & & buffer [ offset - 2 ] = = ( byte ) 13 & & buffer [ offset - 1 ] = = ( byte ) 10 ) { tbreak ; } 
tint readControlLine ( BufferedInputStream in , boolean checkForError , byte ctlByte ) { tseekToCRLF ( in ) ; tif ( checkForError & & ( this . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = true ) { tstatus = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; tdidRead = true ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tBufferedInputStream bin = new BufferedInputStream ( in , INPUT_STREAM_BUFFER_SIZE ) ; tint size = readControlLine ( bin , true , SIZE_BYTE ) ; tif ( ! status . isError ( ) & & size > = 0 ) { ttry { tdata = super . readBulkData ( bin , size ) ; } tcatch ( IllegalArgumentException bug ) { tthrow new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } tcatch ( IOException problem ) { tthrow new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } tcatch ( RuntimeException bug ) { tthrow new ProviderException ( " Bug: reading the bulk data bytes. expecting " + size + " bytes. " , bug ) ; } } tdidRead = true ; treturn ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; tBufferedInputStream bin = new BufferedInputStream ( in , 1024 ) ; tint count = super . readControlLine ( bin , true , COUNT_BYTE ) ; tif ( ! status . isError ( ) & & count > = 0 ) { tdatalist = new ArrayList < byte [ ] > ( count ) ; ttry { tint size = - 1 ; tfor ( int i = 0 ; i < count ; i + + ) { tsize = readControlLine ( bin , false , SIZE_BYTE ) ; tif ( size > 0 ) tdatalist . add ( super . readBulkData ( bin , size ) ) ; telse tdatalist . add ( null ) ; } } tcatch ( IllegalArgumentException bug ) { tthrow new ProviderException ( " Bug: in converting the bulk data length bytes " , bug ) ; } tcatch ( IOException problem ) { tthrow new ClientRuntimeException ( " Problem: reading the bulk data bytes " , problem ) ; } tcatch ( RuntimeException bug ) { tthrow new ProviderException ( " Bug: reading the multibulk data bytes. " , bug ) ; } } tdidRead = true ; treturn ; } 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > quit ( ) ; }} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;}} 
public Future < RedisType > type ( String key ) ; }} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > ttl ( String key ) ; }} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;}} 
public Future < byte [ ] > rpop ( String listKey ) ; }} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;}} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; }} 
public Future < ResponseStatus > flushdb ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > flushall ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < Boolean > move ( String key , int dbIndex ) ; }} 
public Sort sort ( String key ) ; }} 
public Future < ResponseStatus > save ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < ResponseStatus > bgsave ( ) ; public Future<Map<String, String>>info () ;}} 
public Future < Long > lastsave ( ) ; }} 
public Future < Map < String , String > > tinfo ( ) ; }} 
public Modality getModality ( ) ; public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; } 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tthrow new ClientRuntimeException ( errorMsg ) ; } 
tprotected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
tprotected abstract JRedis newConnection ( String host , int port , int db , String password ) throws ClientRuntimeException ; protected abstract void work();}} 
tprotected final void runBenchmarks ( String host , int port , int threadCnt , int reqCnt , int size , int db ) { Benchmarker.runBenchmark (Command.SREM, reqCnt, threadCnt, workers); 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . ping ( ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . dbsize ( ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . sadd ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . lpush ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . rpush ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . incr ( key ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . decr ( key ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . incrby ( key , 10 ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . decrby ( key , 10 ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . set ( key , data ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . setnx ( key , data ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public float opsPerSecAtDelta ( long opCount , long delta ) { return ( UNIT . convert ( 1 , TimeUnit . SECONDS ) * opCount ) / ( float ) delta ; } 
public static void main ( String [ ] args ) { } 
public static void main ( String [ ] args ) { } 
public FutureStatus rename ( String oldkey , String newkey ) { tbyte [ ] oldkeydata = null ; tif ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; tbyte [ ] newkeydata = null ; tif ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; treturn new FutureStatus ( this . queueRequest ( Command . RENAME , oldkeydata , newkeydata ) ) ; } 
public Future < Boolean > renamenx ( String oldkey , String newkey ) { tbyte [ ] oldkeydata = null ; tif ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; tbyte [ ] newkeydata = null ; tif ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . RENAMENX , oldkeydata , newkeydata ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public FutureStatus rpush ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; treturn new FutureStatus ( this . queueRequest ( Command . RPUSH , keybytes , value ) ) ; } 
public FutureStatus rpush ( String key , String value ) { } 
public < T extends Serializable > FutureStatus rpush ( String key , T value ) { treturn rpush ( key , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > sadd ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SADD , keybytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < T extends Serializable > Future < Boolean > sadd ( String key , T value ) { treturn sadd ( key , DefaultCodec . encode ( value ) ) ; } 
public FutureStatus set ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; treturn new FutureStatus ( this . queueRequest ( Command . SET , keybytes , value ) ) ; } 
public Future < byte [ ] > getset ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . GETSET , keybytes , value ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T value ) { treturn getset ( key , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > setnx ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SETNX , keybytes , value ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < T extends Serializable > Future < Boolean > setnx ( String key , T value ) { treturn setnx ( key , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > sismember ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SISMEMBER , keybytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > sismember ( String key , Number numberValue ) { treturn sismember ( key , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > Future < Boolean > sismember ( String key , T object ) { treturn sismember ( key , DefaultCodec . encode ( object ) ) ; } 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) { tbyte [ ] srcKeyBytes = null ; tif ( ( srcKeyBytes = getKeyBytes ( srcKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + srcKey + " ] " ) ; tbyte [ ] destKeyBytes = null ; tif ( ( destKeyBytes = getKeyBytes ( destKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + destKey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SMOVE , srcKeyBytes , destKeyBytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) { treturn smove ( srcKey , destKey , DefaultCodec . encode ( stringValue ) ) ; } 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) { treturn smove ( srcKey , destKey , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) { treturn smove ( srcKey , destKey , DefaultCodec . encode ( object ) ) ; } 
public Future < Long > incr ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . INCR , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > incrby ( String key , int delta ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . INCRBY , keybytes , Convert . toBytes ( delta ) ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > decr ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . DECR , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > decrby ( String key , int delta ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . DECRBY , keybytes , Convert . toBytes ( delta ) ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > llen ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LLEN , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > scard ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SCARD , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > dbsize ( ) { tFuture < Response > futureResponse = this . queueRequest ( Command . DBSIZE ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > lastsave ( ) { tFuture < Response > futureResponse = this . queueRequest ( Command . LASTSAVE ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < byte [ ] > get ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . GET , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > lindex ( String key , long index ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LINDEX , keybytes , Convert . toBytes ( index ) ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > lpop ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LPOP , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > rpop ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . RPOP , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public Future < String > randomkey ( ) { tFuture < Response > futureResponse = this . queueRequest ( Command . RANDOMKEY ) ; treturn new FutureString ( futureResponse ) ; } 
public Future < RedisType > type ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; treturn new FutureRedisType ( this . queueRequest ( Command . TYPE , keybytes ) ) ; } 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + moreKeys . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : moreKeys ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . MGET , keybytes ) ) ; } 
public Future < List < byte [ ] > > smembers ( String key ) { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " null key. " ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . SMEMBERS , keydata ) ) ; } 
public Future < List < String > > keys ( String pattern ) { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( pattern ) ) = = null ) tthrow new IllegalArgumentException ( " null key. " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . KEYS , keydata ) ; treturn new FutureKeyList ( futureResponse ) ; } 
public Future < List < byte [ ] > > lrange ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . LRANGE , keybytes , fromBytes , toBytes ) ) ; } 
public Sort sort ( final String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisFutureSupport client = this ; tSort sortQuery = new SortSupport ( key , keybytes ) { } 
tprotected Future < List < byte [ ] > > execAsynchSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) { treturn new FutureByteArrayList ( client . queueRequest ( Command . SORT , keyBytes , sortSpecBytes ) ) ; } 
tprotected List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) { tthrow new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . SINTER , keybytes ) ) ; } 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . SUNION , keybytes ) ) ; } 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . SDIFF , keybytes ) ) ; } 
public FutureStatus sinterstore ( String dest , String . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } treturn new FutureStatus ( this . queueRequest ( Command . SINTERSTORE , setbytes ) ) ; } 
public FutureStatus sunionstore ( String dest , String . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } treturn new FutureStatus ( this . queueRequest ( Command . SUNIONSTORE , setbytes ) ) ; } 
public FutureStatus sdiffstore ( String dest , String . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } treturn new FutureStatus ( this . queueRequest ( Command . SDIFFSTORE , setbytes ) ) ; } 
public Future < Boolean > del ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . DEL , keybytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > exists ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . EXISTS , keybytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public FutureStatus lpush ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; treturn new FutureStatus ( this . queueRequest ( Command . LPUSH , keybytes , value ) ) ; } 
public < T extends Serializable > FutureStatus lpush ( String key , T value ) { treturn lpush ( key , DefaultCodec . encode ( value ) ) ; } 
public Future < Long > lrem ( String key , byte [ ] value , int count ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] countBytes = Convert . toBytes ( count ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LREM , keybytes , value , countBytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > lrem ( String listKey , String value , int count ) { treturn lrem ( listKey , DefaultCodec . encode ( value ) , count ) ; } 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) { treturn lrem ( listKey , String . valueOf ( numberValue ) . getBytes ( ) , count ) ; } 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) { treturn lrem ( listKey , DefaultCodec . encode ( object ) , count ) ; } 
public FutureStatus lset ( String key , long index , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] indexBytes = Convert . toBytes ( index ) ; treturn new FutureStatus ( this . queueRequest ( Command . LSET , keybytes , indexBytes , value ) ) ; } 
public FutureStatus lset ( String key , long index , String value ) { treturn lset ( key , index , DefaultCodec . encode ( value ) ) ; } 
public FutureStatus lset ( String key , long index , Number numberValue ) { treturn lset ( key , index , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > FutureStatus lset ( String key , long index , T object ) { treturn lset ( key , index , DefaultCodec . encode ( object ) ) ; } 
public Future < Boolean > move ( String key , int dbIndex ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . MOVE , keybytes , Convert . toBytes ( dbIndex ) ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > srem ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SREM , keybytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < T extends Serializable > Future < Boolean > srem ( String key , T value ) { treturn srem ( key , DefaultCodec . encode ( value ) ) ; } 
public FutureStatus ltrim ( String key , long keepFrom , long keepTo ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( keepFrom ) ; tbyte [ ] toBytes = Convert . toBytes ( keepTo ) ; treturn new FutureStatus ( this . queueRequest ( Command . LTRIM , keybytes , fromBytes , toBytes ) ) ; } 
public Future < Boolean > expire ( String key , int ttlseconds ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] ttlbytes = Convert . toBytes ( ttlseconds ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . EXPIRE , keybytes , ttlbytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Long > ttl ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . TTL , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
private byte [ ] getKeyBytes ( String key ) throws IllegalArgumentException { tif ( null = = key ) throw new IllegalArgumentException ( " key is null " ) ; tbyte [ ] bytes = null ; tif ( JRedisSupport . CacheKeys = = true ) tbytes = keyByteCache . get ( key ) ; tif ( null = = bytes ) { } 
public boolean cancel ( boolean mayInterruptIfRunning ) { return pendingRequest . cancel ( mayInterruptIfRunning ) ; } 
public ResponseStatus get ( ) throws InterruptedException , ExecutionException { tStatusResponse statusResponse = ( StatusResponse ) pendingRequest . get ( ) ; treturn statusResponse . getStatus ( ) ; } 
public ResponseStatus get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tStatusResponse statusResponse = ( StatusResponse ) pendingRequest . get ( timeout , unit ) ; treturn statusResponse . getStatus ( ) ; } 
public Boolean get ( ) throws InterruptedException , ExecutionException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; treturn valResp . getBooleanValue ( ) ; } 
public Boolean get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn valResp . getBooleanValue ( ) ; } 
public String get ( ) throws InterruptedException , ExecutionException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; treturn valResp . getStringValue ( ) ; } 
public String get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn valResp . getStringValue ( ) ; } 
public RedisType get ( ) throws InterruptedException , ExecutionException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; treturn getRedisType ( valResp ) ; } 
public RedisType get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn getRedisType ( valResp ) ; } 
public Long get ( ) throws InterruptedException , ExecutionException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; treturn valResp . getLongValue ( ) ; } 
public Long get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn valResp . getLongValue ( ) ; } 
public byte [ ] get ( ) throws InterruptedException , ExecutionException { tBulkResponse resp = ( BulkResponse ) pendingRequest . get ( ) ; treturn resp . getBulkData ( ) ; } 
public byte [ ] get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tBulkResponse resp = ( BulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn resp . getBulkData ( ) ; } 
public List < byte [ ] > get ( ) throws InterruptedException , ExecutionException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( ) ; treturn resp . getMultiBulkData ( ) ; } 
public List < byte [ ] > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn resp . getMultiBulkData ( ) ; } 
private List < String > getResultList ( BulkResponse resp ) { tStringTokenizer tokenizer = new StringTokenizer ( new String ( resp . getBulkData ( ) ) , " " ) ; tList < String > list = new ArrayList < String > ( 12 ) ; twhile ( tokenizer . hasMoreTokens ( ) ) { tlist . add ( tokenizer . nextToken ( ) ) ; } treturn list ; } 
public List < String > get ( ) throws InterruptedException , ExecutionException { tBulkResponse resp = ( BulkResponse ) pendingRequest . get ( ) ; treturn getResultList ( resp ) ; } 
public List < String > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tBulkResponse resp = ( BulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn getResultList ( resp ) ; } 
private Map < String , String > getResultMap ( BulkResponse resp ) { tStringTokenizer tokenizer = new StringTokenizer ( new String ( resp . getBulkData ( ) ) , " r " ) ; tMap < String , String > infomap = new HashMap < String , String > ( 12 ) ; twhile ( tokenizer . hasMoreTokens ( ) ) { tString info = tokenizer . nextToken ( ) ; tint c = info . indexOf ( ':' ) ; tString key = info . substring ( 0 , c ) ; tString value = info . substring ( c + 1 ) ; tinfomap . put ( key , value ) ; } treturn infomap ; } 
public Map < String , String > get ( ) throws InterruptedException , ExecutionException { tBulkResponse resp = ( BulkResponse ) pendingRequest . get ( ) ; treturn getResultMap ( resp ) ; } 
public Map < String , String > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tBulkResponse resp = ( BulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn getResultMap ( resp ) ; } 
tprotected Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { treturn connection . queueRequest ( cmd , args ) ; } 
private final void initialize ( ) { tconnPoolAccess = new Semaphore ( connCount ) ; tconns = new Connection [ connCount ] ; tconnInUse = new boolean [ connCount ] ; tConnection conn = null ; tfor ( int i = 0 ; i < connCount ; i + + ) { ttry { 
tprotected Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException , ClientRuntimeException , ProviderException { tResponse response = null ; ttry { } 
public Sort sort ( final String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisSupport client = this ; tSort sortQuery = new SortSupport ( key , keybytes ) { } 
 protected Future < List < byte [ ] > > execAsynchSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) { tthrow new IllegalStateException ( " JRedis does not support asynchronous sort. " ) ; } 
private byte [ ] getKeyBytes ( String key ) throws IllegalArgumentException { tif ( null = = key ) throw new IllegalArgumentException ( " key is null " ) ; tbyte [ ] bytes = null ; tif ( JRedisSupport . CacheKeys = = true ) tbytes = keyByteCache . get ( key ) ; tif ( null = = bytes ) { } 
tprotected abstract void setConnection ( Connection connection ) ; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tthrow new NotSupportedException ( " Response.serviceRequest(RequestListener requestListener, " + 
protected void initializeComponents ( ) { setProtocolHandler (Assert.notNull (newProtocolHandler(), "the delegate protocol handler", ClientRuntimeException.class)); } 
protected Protocol newProtocolHandler ( ) { treturn spec . isShared ( ) ? new ConcurrentSynchProtocol ( ) : new SynchProtocol ( ) ; TODO: rewire it to get it from the ProtocolManager } 
protected InputStream newInputStream ( InputStream socketInputStream ) { treturn new FastBufferedInputStream ( socketInputStream , spec . getSocketProperty ( SO_RCVBUF ) ) ; } 
tprotected final void connect ( ) throws IllegalStateException , ClientRuntimeException { initializeConnection(); 
tprotected final void initializeSocketStreams ( ) throws IllegalArgumentException , IOException { tinstream = newInputStream ( Assert . notNull ( socket . getInputStream ( ) , " socket input stream " , IllegalArgumentException . class ) ) ; tAssert . notNull ( instream , " input stream provided by extended class " , IllegalArgumentException . class ) ; toutstream = newOutputStream ( Assert . notNull ( socket . getOutputStream ( ) , " socket output stream " , IllegalArgumentException . class ) ) ; } 
private void setDefaultProperties ( ) { isPipeline(DEFAULT_IS_PIPELINE); } 
tfinal void setCRE ( ClientRuntimeException cre ) { tthis . cre = cre ; texcepted = true ; tsetResponse ( null ) ; his.completion.signal(); 
private final void checkStatus ( ) throws ExecutionException { hrow new ExecutionException("Redis Exception on ["+cmd.name()+"] " + response.getStatus().message(), new RedisException(cmd, response.getStatus().message())); 
public Response get ( ) throws InterruptedException , ExecutionException { tcompletion . await ( ) ; tcheckStatus ( ) ; treturn response ; } 
public Response get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tif ( ! completion . await ( timeout , unit ) ) tthrow new TimeoutException ( ) ; tcheckStatus ( ) ; treturn response ; } 
protected void initializeComponents ( ) { tsuper . initializeComponents ( ) ; tserviceLock = new Object ( ) ; tpendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; trespHandler = new ResponseHandler ( ) ; trespHandlerThread = new Thread ( respHandler , " response-handler " ) ; trespHandlerThread . start ( ) ; } 
tprotected final InputStream newInputStream ( InputStream socketInputStream ) throws IllegalArgumentException { tInputStream in = super . newInputStream ( socketInputStream ) ; tif ( ! ( in instanceof FastBufferedInputStream ) ) { tSystem . out . format ( " WARN: input was: %s " , in . getClass ( ) . getCanonicalName ( ) ) ; tin = new FastBufferedInputStream ( in , spec . getSocketProperty ( SocketProperty . SO_RCVBUF ) ) ; } treturn in ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; tPendingRequest pendingResponse = null ; tsynchronized ( serviceLock ) { tRequest request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; trequest . write ( getOutputStream ( ) ) ; tpendingResponse = new PendingRequest ( request , cmd ) ; tpendingResponseQueue . add ( pendingResponse ) ; } treturn pendingResponse ; } 
tvoid stop ( ) { } } }} 
public void run ( ) { tPendingRequest pending = null ; twhile ( keepWorking ) { tResponse response = null ; 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException { tif ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; tRequest trequest = null ; tResponse tresponse = null ; tResponseStatus status = null ; ttry { } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { return response; } 
tprotected abstract ByteArrayOutputStream createRequestBufffer ( Command cmd ) ; tprotected abstract Request createRequest ( ByteArrayOutputStream buffer ) ; tprotected abstract Response createMultiBulkResponse ( Command cmd ) ; tprotected abstract Response createBulkResponse ( Command cmd ) ; tprotected abstract Response createNumberResponse ( Command cmd }} 
tprotected abstract Request createRequest ( ByteArrayOutputStream buffer ) ; tprotected abstract Response createMultiBulkResponse ( Command cmd ) ; tprotected abstract Response createBulkResponse ( Command cmd ) ; tprotected abstract Response createNumberResponse ( Command cmd }} 
tprotected abstract Response createMultiBulkResponse ( Command cmd ) ; tprotected abstract Response createBulkResponse ( Command cmd ) ; tprotected abstract Response createNumberResponse ( Command cmd }} 
tprotected abstract Response createBulkResponse ( Command cmd ) ; tprotected abstract Response createNumberResponse ( Command cmd }} 
tprotected abstract Response createNumberResponse ( Command cmd }} 
tprotected abstract Response createBooleanResponse ( Command cmd ) ; tprotected abstract Response createStringResponse ( Command cmd ) ; tprotected abstract Response createStatusResponse ( Command cmd ) ; }} 
tprotected abstract Response createStringResponse ( Command cmd ) ; tprotected abstract Response createStatusResponse ( Command cmd ) ; }} 
tprotected abstract Response createStatusResponse ( Command cmd ) ; }} 
public void write ( OutputStream out ) throws ClientRuntimeException , ProviderException { ttry { you would expect these to throw exceptions if the socket has been reset 
tvoid readSingleLineResponse ( InputStream in ) { toffset = 0 ; tint c = - 1 ; tint available = buffer . length ; ttry { twhile ( ( c = in . read ( buffer , offset , 1 ) ) ! = - 1 ) { 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; switch (flavor){ 
tvoid seekToCRLF ( InputStream in ) { toffset = 0 ; tint c = - 1 ; tint available = buffer . length ; ttry { twhile ( ( c = in . read ( buffer , offset , 1 ) ) ! = - 1 ) { toffset + = c ; tavailable - = c ; tif ( offset > 2 & & buffer [ offset - 2 ] = = ( byte ) 13 & & buffer [ offset - 1 ] = = ( byte ) 10 ) { tbreak ; } 
tint readControlLine ( InputStream in , boolean checkForError , byte ctlByte ) { tseekToCRLF ( in ) ; tif ( checkForError & & ( this . isError = buffer [ 0 ] = = ProtocolBase . ERR_BYTE ) = = true ) { tstatus = new ResponseStatus ( ResponseStatus . Code . ERROR , new String ( buffer , 1 , offset - 3 ) ) ; tdidRead = true ; } 
public final byte [ ] readBulkData ( InputStream in , int length ) tthrows IOException , RuntimeException { tbyte [ ] data = new byte [ length ] ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; } 
public String decode ( byte [ ] bytes ) { return new String ( bytes ) ; return new String(bytes, charSet); java 1.6 
public static final < E extends RuntimeException > tvoid isEquivalent ( byte [ ] a , byte [ ] b ) { tisEquivalent ( a , b , RuntimeException . class ) ; } 
public static final < E extends RuntimeException > tvoid isEquivalent ( byte [ ] a , byte [ ] b , Class < E > clazz ) { tnotNull ( a , " arg a " , clazz ) ; tnotNull ( b , " arg b " , clazz ) ; tif ( a . length ! = b . length ) { tthrowIt ( " byte arrays being compared are of unequal length " , clazz ) ; } tfor ( int i = 0 ; i < a . length ; i + + ) { tif ( a [ i ] ! = b [ i ] ) { 
public static final String toStr ( byte [ ] bytes ) { String str = null ; ttry { tstr = new String ( bytes , SUPPORTED_CHARSET_NAME ) ; } catch ( UnsupportedEncodingException e ) { return new String(bytes, SUPPORTED_CHARSET); Java 1.6 only 
public static final byte [ ] encode ( String value ) { tbyte [ ] bytes = null ; ttry { bytes = value . getBytes ( SUPPORTED_CHARSET_NAME ) ; } catch ( UnsupportedEncodingException e ) { return value.getBytes(SUPPORTED_CHARSET); 
private final int getMoreBytes ( int len ) throws IOException { } 
public int read ( byte [ ] b , int off , int len ) throws IOException { tif ( off < 0 | | off > = b . length | | len < 0 | | off + len > b . length ) { tthrow new ArrayIndexOutOfBoundsException ( ) ; } tif ( len > buffer . length - offset ) { tint c = getMoreBytes ( len ) ; } 
public int read ( ) throws IOException { tbyte [ ] b = new byte [ 1 ] ; tint c = read ( b , 0 , 1 ) ; tif ( c = = - 1 ) return - 1 ; treturn ( int ) b [ 0 ] ; } 
public boolean await ( long time , TimeUnit unit ) throws InterruptedException { tboolean timedout = false ; tlong nanosTimeout = unit . toNanos ( time ) ; tlong timecheck = System . nanoTime ( ) ; tlock . lock ( ) ; ttry { twhile ( ! isSignalled & & nanosTimeout > 0 L ) { ttimedout = signalled . await ( time , unit ) ; tlong now = System . nanoTime ( ) ; tnanosTimeout - = now - timecheck ; ttimecheck = now ; } } tfinally { lock . unlock ( ) ; } treturn timedout | isSignalled ; } 
public boolean isSignalled ( ) { tboolean state = false ; tlock . lock ( ) ; ttry { tstate = isSignalled ; } tfinally { lock . unlock ( ) ; } treturn state ; } 
public List < byte [ ] > exec ( ) throws IllegalStateException , RedisException { } 
tprotected abstract List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) throws IllegalStateException , RedisException ; tprotected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; } 
public void suiteParametersInit ( tString password , tString host , tint port , tint db1 , tint db2 , tint small_data , tint medium_data , tint large_data , tint small_cnt , tint medium_cnt , tint large_cnt , tint expire_secs , tint expire_wait_millisecs ) { tthis . password = password ; tthis . host = host ; tthis . port = port ; tthis . db1 = db1 ; tthis . db2 = db2 ; tthis . SMALL_DATA = small_data ; tthis . MEDIUM_DATA = medium_data ; tthis . LARGE_DATA = large_data ; tthis . SMALL_CNT = small_cnt ; tthis . MEDIUM_CNT = medium_cnt ; tthis . LARGE_CNT = large_cnt ; tthis . expire_secs = expire_secs ; tthis . expire_wait_millisecs = expire_wait_millisecs ; tLog . log ( " Suite parameters initialized <suiteParametersInit> " ) ; tsetupTestSuiteData ( ) ; } 
private final void setupTestSuiteData ( ) { tcnt = MEDIUM_CNT ; tfor ( int i = 0 ; i < cnt ; i + + ) { tkeys . add ( getRandomAsciiString ( 48 ) ) ; tpatternList . add ( getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) + patternA + getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) ) ; tuniqueSet . add ( getRandomAsciiString ( 48 ) ) ; tcommonSet . add ( getRandomAsciiString ( 48 ) ) ; tset1 . add ( " set_1 " + getRandomAsciiString ( 20 ) ) ; tset2 . add ( " set_2 " + getRandomAsciiString ( 20 ) ) ; tdataList . add ( getRandomBytes ( 128 ) ) ; tstringList . add ( getRandomAsciiString ( 128 ) ) ; tobjectList . add ( new TestBean ( " testbean. " + i ) ) ; tintList . add ( random . nextInt ( ) ) ; tlongList . add ( random . nextLong ( ) ) ; } tfor ( String m : commonSet ) { tset1 . add ( m ) ; tset2 . add ( m ) ; } tLog . log ( " TEST-SUITE-INIT: JRedis Provider Test Suite random test data created " ) ; 
private final void setProviderInstance ( T provider ) { tthis . provider = provider ; tLog . log ( " nTEST: " + " t----------------------------------------------- " + 
tprotected JRedis newProviderInstance ( ) { tJRedis provider = null ; ttry { tprovider = new JRedisClient ( this . host , this . port , this . password , this . db1 ) ; } catch ( ClientRuntimeException e ) { tLog . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
public void testExecutionExceptionCauseType ( ) { tboolean expectedError ; tString key = keys . get ( 0 ) ; ttry { texpectedError = false ; 
public void testFlushDb ( ) { tFuture < ResponseStatus > frStatus = null ; tcmd = Command . FLUSHDB . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tfrStatus = provider . flushdb ( ) ; 
tprotected JRedisFuture newProviderInstance ( ) { tJRedisFuture provider = null ; ttry { tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( this . host , this . port , this . db2 , this . password . getBytes ( ) ) ; tprovider = new JRedisPipeline ( connectionSpec ) ; } catch ( ClientRuntimeException e ) { tLog . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
public void testElicitErrors ( ) { tcmd = Command . AUTH . code ; tLog . log ( " TEST: Elicit errors " ) ; ttry { tprovider . flushdb ( ) ; 
public void testExists_Expire_TTL ( ) { tcmd = Command . EXISTS . code + " | " + Command . EXPIRE . code + " | " + Command . TTL . code ; tLog . log ( " TEST: %s command(s) " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSelectAndFlushdb ( ) { tcmd = tCommand . SELECT . code + " | " + tCommand . FLUSHDB . code + " | " + tCommand . SET . code + " | " + tCommand . EXISTS . code + " | " + tCommand . FLUSHDB . code + " | " + tCommand . KEYS . code ; tLog . log ( " TEST: %s commands " , cmd ) ; ttry { tkey = " woof " ; 
public void testRenamenx ( ) { tcmd = Command . RENAMENX . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSaveAndLastSave ( ) { tcmd = Command . SAVE . code + " | " + Command . LASTSAVE ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSetStringByteArray ( ) { tcmd = Command . SET . code + " | " + Command . SETNX . code + " byte[] | " + Command . GET ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSetStringString ( ) { tcmd = Command . SET . code + " | " + Command . SETNX . code + " String | " + Command . GET ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSetStringNumber ( ) { tcmd = Command . SET . code + " | " + Command . SETNX . code + " Long | " + Command . GET ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSetStringT ( ) { tcmd = Command . SET . code + " | " + Command . SETNX . code + " Java Object | " + Command . GET ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testGetSetStringByteArray ( ) { tcmd = Command . SET . code + " | " + Command . GETSET . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testIncrAndDecr ( ) { tcmd = Command . INCR . code + " | " + Command . DECR . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testIncrbyAndDecrby ( ) { tcmd = Command . INCRBY . code + " | " + Command . DECRBY . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testRpushStringByteArray ( ) { tcmd = Command . RPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLpushStringByteArray ( ) { tcmd = Command . LPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testRpushStringString ( ) { tcmd = Command . RPUSH . code + " String | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLpushStringString ( ) { tcmd = Command . LPUSH . code + " String | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testRpushStringNumber ( ) { tcmd = Command . RPUSH . code + " Number | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLpushStringNumber ( ) { tcmd = Command . LPUSH . code + " Number | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testRpushStringT ( ) { tcmd = Command . RPUSH . code + " Java Object | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLpushStringT ( ) { tcmd = Command . LPUSH . code + " Java Object | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLtrim ( ) { tcmd = Command . LTRIM . code + " | " + Command . LLEN . code + " | " + Command . LRANGE . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLremStringByteArrayInt ( ) { tcmd = Command . LREM . code + " byte[] | " + Command . LLEN ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLremStringStringInt ( ) { tcmd = Command . LREM . code + " String | " + Command . LLEN ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLremStringNumberInt ( ) { tcmd = Command . LREM . code + " Number | " + Command . LLEN ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLremStringTInt ( ) { tcmd = Command . LREM . code + " Java Object | " + Command . LLEN ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLsetStringIntByteArray ( ) { tcmd = Command . LSET . code + " byte[] | " + Command . LLEN ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLsetStringIntString ( ) { tcmd = Command . LSET . code + " String | " + Command . LLEN ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLsetStringIntNumber ( ) { tcmd = Command . LSET . code + " Number | " + Command . LLEN ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLsetStringIntT ( ) { tcmd = Command . LSET . code + " Java Object | " + Command . LLEN ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSaddStringByteArray ( ) { tcmd = Command . SADD . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSaddStringString ( ) { tcmd = Command . SADD . code + " String " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSaddStringNumber ( ) { tcmd = Command . SADD . code + " Number " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSaddStringT ( ) { tcmd = Command . SADD . code + " Java Object " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSmembers ( ) { tcmd = Command . SMEMBERS . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; tString setkey = keys . get ( 0 ) ; tfor ( int i = 0 ; i < SMALL_CNT ; i + + ) tassertTrue ( provider . sadd ( setkey , dataList . get ( i ) ) , " sadd of random element should be true " ) ; tList < byte [ ] > members = null ; tmembers = provider . smembers ( setkey ) ; tassertTrue ( members . size ( ) = = SMALL_CNT ) ; provider.flushdb(); 
public void testSmoveStringByteArray ( ) { tcmd = Command . SMOVE . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSismemberStringByteArray ( ) { tcmd = Command . SISMEMBER . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSismemberStringString ( ) { tcmd = Command . SISMEMBER . code + " String " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSismemberStringNumber ( ) { tcmd = Command . SISMEMBER . code + " Number " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSismemberStringT ( ) { tcmd = Command . SISMEMBER . code + " Java Object " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testScard ( ) { tcmd = Command . SCARD . code + " Java Object " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSinterstore ( ) { tcmd = Command . SINTERSTORE . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSunionstore ( ) { tcmd = Command . SUNIONSTORE . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSdiffstore ( ) { tcmd = Command . SDIFFSTORE . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSremStringByteArray ( ) { tcmd = Command . SISMEMBER . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSremStringString ( ) { tcmd = Command . SISMEMBER . code + " String " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSremStringNumber ( ) { tcmd = Command . SISMEMBER . code + " Number " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSremStringT ( ) { tcmd = Command . SISMEMBER . code + " Java Object " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testRandomkey ( ) { tcmd = Command . RANDOMKEY . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testKeys ( ) { tcmd = Command . KEYS . code + " (*) " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testKeysString ( ) { tcmd = Command . KEYS . code + " (using patterns) " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void serviceSuiteParametersInit ( tint connectionCount ) { tthis . connectionCnt = connectionCount ; tLog . log ( " JRedisServiceTest: Using %d connections " , connectionCount ) ; tLog . log ( " JRedisService Suite parameters initialized <suiteParametersInit> " ) ; } 
tprotected JRedis newProviderInstance ( ) { tJRedis provider = null ; ttry { tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( this . host , this . port , this . db2 , this . password . getBytes ( ) ) ; tprovider = new JRedisService ( connectionSpec , this . connectionCnt ) ; } catch ( ClientRuntimeException e ) { tLog . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
public void testQuit ( ) { tLog . log ( " TEST: QUIT command -- WARNING: using quit with JRedisService should not be allowed! " ) ; ttry { tJRedis service = getProviderInstance ( ) ; 
public void testGetNaturalNumber ( ) { tLog . log ( " Testing bytes to number conversion ... " ) ; tbyte [ ] data = null ; test big data 
public void testToBytes ( ) { tLog . log ( " Testing number to bytes conversion ... " ) ; tbyte [ ] javadata = null ; tbyte [ ] data = null ; for(int i=Integer.MIN_VALUE; i<Integer.MAX_VALUE; i++){ 
public void theBasics ( ) throws InterruptedException { tLog . log ( " theBasics() " ) ; byte[] setval = "bar".getBytes();try {for(int i=0; i<100000; i++){ 
private void runExamples ( ) throws InterruptedException { tLog . log ( " running the JRedisFuture usage examples with %s as the provider implementation. " , jredis . getClass ( ) . getSimpleName ( ) ) ; ttheBasics ( ) ; } 
public static void main ( String [ ] args ) { tint database = 11 ; tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; new UsingJRedisPipeline ( connectionSpec ) ; } 
tprotected JRedisFuture getProviderInstance ( ConnectionSpec connectionSpec ) { treturn new JRedisPipeline ( connectionSpec ) ; } 
private static Thread getDummyUser ( final int id , final int opsCnt ) { tThread user = new Thread ( new Runnable ( ) { return user; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; tPendingRequest pendingResponse = null ; tsynchronized ( serviceLock ) { tif ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tRequest request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; trequest . write ( getOutputStream ( ) ) ; tpendingResponse = new PendingRequest ( request , cmd ) ; tpendingResponseQueue . add ( pendingResponse ) ; tpendingQuit = cmd = = Command . QUIT ; } treturn pendingResponse ; } 
public void run ( ) { tLog . log ( " Pipeline thread <%s> started. " , Thread . currentThread ( ) . getName ( ) ) ; tPendingRequest pending = null ; twhile ( true ) { tResponse response = null ; ttry { pending = pendingResponseQueue . take ( ) ; ttry { tresponse = protocol . createResponse ( pending . cmd ) ; tresponse . read ( getInputStream ( ) ) ; tpending . response = response ; tpending . completion . signal ( ) ; } tcatch ( ProviderException bug ) { tbug . printStackTrace ( ) ; tpending . setCRE ( bug ) ; } tcatch ( ClientRuntimeException cre ) { tcre . printStackTrace ( ) ; tpending . setCRE ( cre ) ; } tcatch ( RuntimeException e ) { te . printStackTrace ( ) ; tSystem . err . format ( " BUG -- unexpected RuntimeException '%s' (not handled) -- response handler will stop! " , e . getLocalizedMessage ( ) ) ; tpending . setCRE ( new ProviderException ( " Unexpected runtime exception in response handler " ) ) ; tpending . setResponse ( null ) ; tbreak ; } Log.log("Pipeline thread <%s> stopped.", Thread.currentThread().getName()); } 
public void testPing ( ) { tFuture < ResponseStatus > frStatus = null ; tcmd = Command . PING . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tfrStatus = provider . ping ( ) ; 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > type ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > ttl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; info () ;} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; info () ;} 
public Future < ResponseStatus > flushdb ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > flushall ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > move ( String key , int dbIndex ) ; info () ;} 
public Sort sort ( String key ) ; info () ;} 
public Future < ResponseStatus > save ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > bgsave ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lastsave ( ) ; info () ;} 
public void testElicitErrors ( ) throws InterruptedException { tLog . log ( " TEST: Elicit errors " ) ; ttry { tprovider . flushdb ( ) ; 
public void testExecutionExceptionCauseType ( ) throws InterruptedException { tboolean expectedError ; tString key = keys . get ( 0 ) ; ttry { texpectedError = false ; 
public void testPing ( ) throws InterruptedException { tFuture < ResponseStatus > frStatus = null ; tcmd = Command . PING . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tfrStatus = provider . ping ( ) ; 
public void testFlushDb ( ) throws InterruptedException { tFuture < ResponseStatus > frStatus = null ; tcmd = Command . FLUSHDB . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tfrStatus = provider . flushdb ( ) ; 
public void testSetAndFlushdbAndExistsAndKeys ( ) throws InterruptedException { tcmd = tCommand . FLUSHDB . code + " | " + tCommand . SET . code + " | " + tCommand . EXISTS . code + " | " + tCommand . FLUSHDB . code + " | " + tCommand . KEYS . code ; tLog . log ( " TEST: %s commands " , cmd ) ; ttry { tkey = " woof " ; 
public void testSetAndFlushdbAndExistsAndKeys ( ) { tcmd = tCommand . FLUSHDB . code + " | " + tCommand . SET . code + " | " + tCommand . EXISTS . code + " | " + tCommand . FLUSHDB . code + " | " + tCommand . KEYS . code ; tLog . log ( " TEST: %s commands " , cmd ) ; ttry { tkey = " woof " ; 
public void testRename ( ) throws InterruptedException { tcmd = Command . RENAME . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { 
public void testRenamenx ( ) throws InterruptedException { tcmd = Command . RENAMENX . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { flush db and set a key 
public void testSetStringByteArray ( ) throws InterruptedException { tcmd = Command . SET . code + " | " + Command . SETNX . code + " byte[] | " + Command . GET ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testGetSetStringByteArray ( ) throws InterruptedException { tcmd = Command . SET . code + " | " + Command . GETSET . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testIncrAndDecr ( ) throws InterruptedException { tcmd = Command . INCR . code + " | " + Command . DECR . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tlong cntr = 0 ; 
public void testDel ( ) throws InterruptedException { tcmd = Command . DEL . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testIncrAndDecr ( ) throws InterruptedException { tcmd = Command . INCR . code + " | " + Command . DECR . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tString cntr_key = keys . get ( 0 ) ; 
public void testIncrbyAndDecrby ( ) throws InterruptedException { tcmd = Command . INCRBY . code + " | " + Command . DECRBY . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tString cntr_key = keys . get ( 0 ) ; 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; tPendingRequest pendingResponse = null ; tsynchronized ( serviceLock ) { tif ( pendingQuit ) throw new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tRequest request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; tif ( cmd ! = Command . QUIT ) trequest . write ( getOutputStream ( ) ) ; telse tpendingQuit = true ; tpendingResponse = new PendingRequest ( request , cmd ) ; tpendingResponseQueue . add ( pendingResponse ) ; } treturn pendingResponse ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tPendingRequest pendingResponse = null ; tsynchronized ( serviceLock ) { tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tRequest request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; tif ( cmd ! = Command . QUIT ) trequest . write ( getOutputStream ( ) ) ; telse tpendingQuit = true ; tpendingResponse = new PendingRequest ( request , cmd ) ; tpendingResponseQueue . add ( pendingResponse ) ; } treturn pendingResponse ; } 
private final int getMoreBytes ( int len ) throws IOException { } 
public int read ( byte [ ] b , int off , int len ) throws IOException { tif ( off < 0 | | off > = b . length | | len < 0 | | off + len > b . length ) { tthrow new ArrayIndexOutOfBoundsException ( ) ; } tint available = buffer . length - offset ; tif ( len > available ) { tint c = getMoreBytes ( len ) ; } 
public void testSmoveStringByteArray ( ) throws InterruptedException { tcmd = Command . SMOVE . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; tprovider . flushdb ( ) ; tString srckey = keys . get ( 0 ) ; tString destkey = keys . get ( 1 ) ; tList < Future < Boolean > > saddResponses = new ArrayList < Future < Boolean > > ( ) ; tfor ( int i = 0 ; i < MEDIUM_CNT ; i + + ) tsaddResponses . add ( provider . sadd ( srckey , dataList . get ( i ) ) ) ; tList < Future < Boolean > > smoveResponses = new ArrayList < Future < Boolean > > ( ) ; tfor ( int i = 0 ; i < MEDIUM_CNT ; i + + ) tsmoveResponses . add ( provider . smove ( srckey , destkey , dataList . get ( i ) ) ) ; ttry { ttry { 
public void testScard ( ) throws InterruptedException { tcmd = Command . SCARD . code + " Java Object " ; tLog . log ( " TEST: %s command " , cmd ) ; tprovider . flushdb ( ) ; tString setkey = keys . get ( 0 ) ; tList < Future < Boolean > > saddResponses = new ArrayList < Future < Boolean > > ( ) ; tfor ( int i = 0 ; i < MEDIUM_CNT ; i + + ) tsaddResponses . add ( provider . sadd ( setkey , objectList . get ( i ) ) ) ; tFuture < Long > scardResp = provider . scard ( setkey ) ; ttry { tprovider . flushdb ( ) ; 
public void testSismemberStringByteArray ( ) throws InterruptedException { tcmd = Command . SISMEMBER . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; tString setkey = keys . get ( 0 ) ; tList < Future < Boolean > > saddResponses = new ArrayList < Future < Boolean > > ( ) ; tfor ( int i = 0 ; i < SMALL_CNT ; i + + ) tsaddResponses . add ( provider . sadd ( setkey , dataList . get ( i ) ) ) ; tList < Future < Boolean > > sismemberResponses = new ArrayList < Future < Boolean > > ( ) ; tfor ( int i = 0 ; i < SMALL_CNT ; i + + ) tsaddResponses . add ( provider . sismember ( setkey , dataList . get ( i ) ) ) ; ttry { tprovider . flushdb ( ) ; 
public void testSmembers ( ) throws InterruptedException { tcmd = Command . SMEMBERS . code + " byte[] | " + Command . SADD + " | " + Command . SCARD ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSaddStringByteArray ( ) throws InterruptedException { tcmd = Command . SADD . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSort ( ) throws InterruptedException { tcmd = Command . SORT . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLsetStringIntByteArray ( ) throws InterruptedException { tcmd = Command . LSET . code + " byte[] | " + Command . LLEN ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLremStringByteArrayInt ( ) throws InterruptedException { tcmd = Command . LREM . code + " byte[] | " + Command . LLEN ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLrange ( ) throws InterruptedException { tcmd = Command . LRANGE . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testRpop ( ) throws InterruptedException { tcmd = Command . RPOP . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLpop ( ) throws InterruptedException { tcmd = Command . LPOP . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLindex ( ) throws InterruptedException { tcmd = Command . LINDEX . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLtrim ( ) throws InterruptedException { tcmd = Command . LTRIM . code + " | " + Command . LLEN . code + " | " + Command . LRANGE . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLpushStringByteArray ( ) throws InterruptedException { tcmd = Command . LPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testRpushStringByteArray ( ) throws InterruptedException { tcmd = Command . RPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testMget ( ) throws InterruptedException { tcmd = Command . MGET . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public static void main ( String [ ] args ) { } 
tprotected Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { treturn connection . serviceRequest ( cmd , args ) ; } 
tprotected abstract ByteArrayOutputStream createRequestBufffer ( Command cmd ) ; tprotected abstract Request createRequest ( ByteArrayOutputStream buffer ) ; tprotected abstract Response createMultiBulkResponse ( Command cmd ) ; tprotected abstract Response createBulkResponse ( Command cmd ) ; tprotected abstract Response createNumberResponse ( Command cmd }} 
tprotected abstract Request createRequest ( ByteArrayOutputStream buffer ) ; tprotected abstract Response createMultiBulkResponse ( Command cmd ) ; tprotected abstract Response createBulkResponse ( Command cmd ) ; tprotected abstract Response createNumberResponse ( Command cmd }} 
tprotected abstract Response createMultiBulkResponse ( Command cmd ) ; tprotected abstract Response createBulkResponse ( Command cmd ) ; tprotected abstract Response createNumberResponse ( Command cmd }} 
tprotected abstract Response createBulkResponse ( Command cmd ) ; tprotected abstract Response createNumberResponse ( Command cmd }} 
tprotected abstract Response createNumberResponse ( Command cmd }} 
tprotected abstract Response createBooleanResponse ( Command cmd ) ; tprotected abstract Response createStringResponse ( Command cmd ) ; tprotected abstract Response createStatusResponse ( Command cmd ) ; }} 
tprotected abstract Response createStringResponse ( Command cmd ) ; tprotected abstract Response createStatusResponse ( Command cmd ) ; }} 
tprotected abstract Response createStatusResponse ( Command cmd ) ; }} 
private static final String format ( String format , Object . . . args ) { tFormatter formatter = new Formatter ( ) ; tformatter . format ( format , args ) ; treturn formatter . toString ( ) ; } 
tprotected JRedis newProviderInstance ( ) { tJRedis provider = null ; ttry { tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( this . host , this . port , this . db2 , this . password . getBytes ( ) ) ; tprovider = new JRedisPipelineService ( connectionSpec ) ; } catch ( ClientRuntimeException e ) { tLog . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
public static void main ( String [ ] args ) { } 
public static void main ( String [ ] args ) { } 
public ResponseStatus get ( ) throws InterruptedException , ExecutionException { return pendingRequest.get().getStatus(); } 
public ResponseStatus get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { return pendingRequest.get(timeout, unit).getStatus(); } 
protected void initializeComponents ( ) { tsuper . initializeComponents ( ) ; processerThread.start(); } 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tPendingRequest pending = new PendingRequest ( cmd , args ) ; tpendingQueue . add ( pending ) ; treturn pending ; } 
tprotected JRedisFuture newProviderInstance ( ) { tJRedisFuture provider = null ; ttry { tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( this . host , this . port , this . db2 , this . password . getBytes ( ) ) ; tprovider = new JRedisAsynchClient ( connectionSpec ) ; } catch ( ClientRuntimeException e ) { tLog . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
public void testConcurrentBulkCommands ( ) { tString cmd = Command . GET . responseType . name ( ) ; tString threadName = Thread . currentThread ( ) . getName ( ) ; tString key = threadName + " :: " + keys . get ( 0 ) ; tLog . log ( " CONCURRENT TEST: %s resp type command | key: %s " , cmd , key ) ; ttry { tprovider . del ( key ) ; 
public void testConcurrentBooleanCommands ( ) { tString cmd = Command . EXISTS . responseType . name ( ) ; tString threadName = Thread . currentThread ( ) . getName ( ) ; tString key = threadName + " :: " + keys . get ( 0 ) ; tLog . log ( " CONCURRENT TEST: %s resp type command | key: %s " , cmd , key ) ; ttry { tprovider . set ( key , threadName ) ; 
public void testConcurrentNumberCommands ( ) { tString cmd = Command . INCR . responseType . name ( ) ; tString cntr_key = Thread . currentThread ( ) . getName ( ) + " :: " + keys . get ( 0 ) ; tLog . log ( " CONCURRENT TEST: %s resp type command | key: %s " , cmd , cntr_key ) ; ttry { tprovider . del ( cntr_key ) ; 
protected Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { tResponse response = null ; ttry { response = JRedisPipeline . this . queueRequest ( cmd , args ) . get ( ) ; } catch ( InterruptedException e ) { throw new ClientRuntimeException ( " Interrupted! " , e ) ; } catch ( ExecutionException e ) { tThrowable cause = e . getCause ( ) ; tif ( cause instanceof RedisException ) tthrow ( RedisException ) cause ; telse if ( cause instanceof ProviderException ) tthrow ( ProviderException ) cause ; telse if ( cause instanceof ClientRuntimeException ) tthrow ( ClientRuntimeException ) cause ; telse throw new ClientRuntimeException ( " Exception in pipeline exec of requested command " , cause ) ; } return response ; } 
protected Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { tResponse response = null ; ttry { response = JRedisPipeline . this . queueRequest ( cmd , args ) . get ( timeout , unit ) ; } catch ( InterruptedException e ) { throw new ClientRuntimeException ( " Interrupted! " , e ) ; } catch ( TimeoutException e ) { throw new ClientRuntimeException ( " timedout waiting for response " ) ; } catch ( ExecutionException e ) { tThrowable cause = e . getCause ( ) ; tif ( cause instanceof RedisException ) tthrow ( RedisException ) cause ; telse if ( cause instanceof ProviderException ) tthrow ( ProviderException ) cause ; telse if ( cause instanceof ClientRuntimeException ) tthrow ( ClientRuntimeException ) cause ; telse throw new ClientRuntimeException ( " Exception in pipeline exec of requested command " , cause ) ; } return response ; } 
public static void main ( String [ ] args ) { tint database = 11 ; tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; new UsingJRedisPipeline ( connectionSpec ) ; exampleUseofSyncInPipeline ( connectionSpec ) ; } 
private static void exampleUseofSyncInPipeline ( ConnectionSpec connectionSpec ) { long start = System.currentTimeMillis(); 
public static void main ( String [ ] args ) { tint database = 11 ; tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; tconnectionSpec . setDatabase ( 13 ) ; new UsingJRedisPipeline ( connectionSpec ) ; exampleUseofSyncInPipeline ( connectionSpec ) ; } 
public JRedis ping ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public byte [ ] srandmember ( String setkey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > type ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > ttl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; info () ;} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > srandmember ( String setkey ) ; info () ;} 
public Future < byte [ ] > srandmember ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SRANDMEMBER , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public byte [ ] srandmember ( String setkey ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( setkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + setkey + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . SRANDMEMBER , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public static final String toStr ( byte [ ] bytes ) { String str = null ; if ( null ! = bytes ) { ttry { tstr = new String ( bytes , SUPPORTED_CHARSET_NAME ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } } return str ; return new String(bytes, SUPPORTED_CHARSET); Java 1.6 only 
public void testSrandmember ( ) throws InterruptedException { tcmd = Command . SRANDMEMBER . code + " String | " + Command . SMEMBERS ; tLog . log ( " TEST: %s command " , cmd ) ; tFuture < ResponseStatus > reqResp = provider . ping ( ) ; ttry { tprovider . flushdb ( ) ; 
public void testSrandmember ( ) { tcmd = Command . SRANDMEMBER . code + " String " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public byte [ ] srandmember ( String setkey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean zadd ( String setkey , long score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , long score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , long score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , long score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , long score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , long score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , long score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , long score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , long score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , long score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; info () throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; info () throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > type ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > ttl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; info () ;} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > srandmember ( String setkey ) ; info () ;} 
public Future < Boolean > zadd ( String setkey , long score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , long score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , long score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , long score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , long score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , long score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , long score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , long score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , long score , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , long score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; info () ;} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; info () ;} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; info () ;} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; info () ;} 
public Future < Boolean > zadd ( String key , long score , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZADD , keybytes , Convert . toBytes ( score ) , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > zadd ( String key , long score , String value ) { treturn zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > zadd ( String key , long score , Number value ) { treturn zadd ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > Future < Boolean > zadd ( String key , long score , T value ) { treturn zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > zrem ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZREM , keybytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < T extends Serializable > Future < Boolean > zrem ( String key , T value ) { treturn zrem ( key , DefaultCodec . encode ( value ) ) ; } 
public boolean zadd ( String key , long score , byte [ ] member ) tthrows RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean res = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . ZADD , keybytes , Convert . toBytes ( score ) , member ) ; tres = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn res ; } 
public boolean zadd ( String key , long score , String value ) throws RedisException { treturn zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public boolean zadd ( String key , long score , Number value ) throws RedisException { treturn zadd ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean zadd ( String key , long score , T value ) throws RedisException { treturn zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public boolean zrem ( String key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . ZREM , keybytes , member ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public boolean zrem ( String key , Number value ) throws RedisException { treturn zrem ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean zrem ( String key , T value ) throws RedisException { treturn zrem ( key , DefaultCodec . encode ( value ) ) ; } 
public void testZremStringByteArray ( ) throws InterruptedException { tcmd = Command . ZADD . code + " byte[] | " + Command . ZREM . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZaddStringByteArray ( ) throws InterruptedException { tcmd = Command . SADD . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZaddStringByteArray ( ) { tcmd = Command . ZADD . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZremStringByteArray ( ) { tcmd = Command . ZADD . code + " byte[] | " + Command . ZREM . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public byte [ ] srandmember ( String setkey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public double zscore ( String setkey , byte [ ] member ) throws RedisException ; public double zscore ( String setkey , String stringValue ) throws RedisException ; public double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tdouble zscore ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public double zscore ( String setkey , String stringValue ) throws RedisException ; public double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tdouble zscore ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tdouble zscore ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > tdouble zscore ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > type ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > ttl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; info () ;} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > srandmember ( String setkey ) ; info () ;} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > zcard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; info () ;} 
public Future < Boolean > zadd ( String key , double score , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZADD , keybytes , Convert . toBytes ( score ) , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > zadd ( String key , double score , String value ) { treturn zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > zadd ( String key , double score , Number value ) { treturn zadd ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > Future < Boolean > zadd ( String key , double score , T value ) { treturn zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Future < Long > zcard ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZCARD , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < List < byte [ ] > > zrange ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . ZRANGE , keybytes , fromBytes , toBytes ) ) ; } 
public Future < List < byte [ ] > > zrangebyscore ( String key , double minScore , double maxScore ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minScore ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxScore ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . ZRANGEBYSCORE , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public Future < List < byte [ ] > > zrevrange ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . ZREVRANGE , keybytes , fromBytes , toBytes ) ) ; } 
public Future < Double > zscore ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZSCORE , keybytes , member ) ; treturn new FutureDouble ( futureResponse ) ; } 
public < T extends Serializable > Future < Double > zscore ( String key , T value ) { treturn zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public Double get ( ) throws InterruptedException , ExecutionException { tBulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( ) ; treturn Convert . toDouble ( bulkResp . getBulkData ( ) ) ; } 
public Double get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tBulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn Convert . toDouble ( bulkResp . getBulkData ( ) ) ; } 
public boolean zadd ( String key , double score , byte [ ] member ) tthrows RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean res = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . ZADD , keybytes , Convert . toBytes ( score ) , member ) ; tres = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn res ; } 
public boolean zadd ( String key , double score , String value ) throws RedisException { treturn zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public boolean zadd ( String key , double score , Number value ) throws RedisException { treturn zadd ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > boolean zadd ( String key , double score , T value ) throws RedisException { treturn zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public long zcard ( String key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . ZCARD , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public List < byte [ ] > zrangebyscore ( String key , double minScore , double maxScore ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( minScore ) ; tbyte [ ] toBytes = Convert . toBytes ( maxScore ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZRANGEBYSCORE , keybytes , fromBytes , toBytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public List < byte [ ] > zrange ( String key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZRANGE , keybytes , fromBytes , toBytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public List < byte [ ] > zrevrange ( String key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZREVRANGE , keybytes , fromBytes , toBytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public double zscore ( String key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tdouble resvalue = 0 ; ttry { tBulkResponse bulkResponse = ( BulkResponse ) this . serviceRequest ( Command . ZSCORE , keybytes , member ) ; tresvalue = Convert . toDouble ( bulkResponse . getBulkData ( ) ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public double zscore ( String key , String value ) throws RedisException { treturn zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public double zscore ( String key , Number value ) throws RedisException { treturn zscore ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > double zscore ( String key , T value ) throws RedisException { treturn zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public static final double toDouble ( byte [ ] stringRepOfDoublePrecisionBytes ) throws IllegalArgumentException { tdouble dnum = 0 ; tif ( null = = stringRepOfDoublePrecisionBytes ) throw new IllegalArgumentException ( " null input " ) ; ttry { tdnum = Double . parseDouble ( new String ( stringRepOfDoublePrecisionBytes ) ) ; } tcatch ( Exception e ) { tthrow new IllegalArgumentException ( " " , e ) ; } treturn dnum ; } 
public static final List < Long > toLong ( List < byte [ ] > bytearray ) { tList < Long > list = new ArrayList < Long > ( bytearray . size ( ) ) ; tfor ( byte [ ] b : bytearray ) list . add ( Convert . toLong ( b ) ) ; treturn list ; } 
public static final List < Double > toDouble ( List < byte [ ] > bytearray ) { tList < Double > list = new ArrayList < Double > ( bytearray . size ( ) ) ; tfor ( byte [ ] b : bytearray ) list . add ( Convert . toDouble ( b ) ) ; treturn list ; } 
private final void setupTestSuiteData ( ) { tcnt = MEDIUM_CNT ; tfor ( int i = 0 ; i < cnt ; i + + ) { tkeys . add ( getRandomAsciiString ( 48 ) ) ; tpatternList . add ( getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) + patternA + getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) ) ; tuniqueSet . add ( getRandomAsciiString ( 48 ) ) ; tcommonSet . add ( getRandomAsciiString ( 48 ) ) ; tset1 . add ( " set_1 " + getRandomAsciiString ( 20 ) ) ; tset2 . add ( " set_2 " + getRandomAsciiString ( 20 ) ) ; tdataList . add ( getRandomBytes ( 128 ) ) ; tstringList . add ( getRandomAsciiString ( 128 ) ) ; tobjectList . add ( new TestBean ( " testbean. " + i ) ) ; tintList . add ( random . nextInt ( ) ) ; tlongList . add ( random . nextLong ( ) ) ; tdoubleList . add ( random . nextDouble ( ) ) ; } tfor ( String m : commonSet ) { tset1 . add ( m ) ; tset2 . add ( m ) ; } tLog . log ( " TEST-SUITE-INIT: JRedis Provider Test Suite random test data created " ) ; 
public void testSrandmember ( ) throws InterruptedException { tcmd = Command . SRANDMEMBER . code + " String | " + Command . SMEMBERS ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZcard ( ) throws InterruptedException { tcmd = Command . ZCARD . code + " Java Object " ; tLog . log ( " TEST: %s command " , cmd ) ; tprovider . flushdb ( ) ; tString setkey = keys . get ( 0 ) ; tList < Future < Boolean > > zaddResponses = new ArrayList < Future < Boolean > > ( ) ; tfor ( int i = 0 ; i < MEDIUM_CNT ; i + + ) tzaddResponses . add ( provider . zadd ( setkey , i , objectList . get ( i ) ) ) ; tFuture < Long > zcardResp = provider . zcard ( setkey ) ; ttry { tprovider . flushdb ( ) ; 
public void testSismemberStringByteArray ( ) throws InterruptedException { tcmd = Command . SISMEMBER . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; tString setkey = keys . get ( 0 ) ; tprovider . flushdb ( ) ; tList < Future < Boolean > > saddResponses = new ArrayList < Future < Boolean > > ( ) ; tfor ( int i = 0 ; i < SMALL_CNT ; i + + ) tsaddResponses . add ( provider . sadd ( setkey , dataList . get ( i ) ) ) ; tList < Future < Boolean > > sismemberResponses = new ArrayList < Future < Boolean > > ( ) ; tfor ( int i = 0 ; i < SMALL_CNT ; i + + ) tsaddResponses . add ( provider . sismember ( setkey , dataList . get ( i ) ) ) ; ttry { ttry { 
public void testZaddStringByteArray ( ) throws InterruptedException { tcmd = Command . ZADD . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZscoreStringByteArray ( ) throws InterruptedException { tcmd = Command . ZSCORE . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZscoreStringByteArray ( ) { tcmd = Command . ZSCORE . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZrangeStringByteArray ( ) { tcmd = Command . ZRANGE . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZcard ( ) { tcmd = Command . ZADD . code + " Java Object | " + Command . ZCARD . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpoppush ( String srcList , String destList ) throws RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > type ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > ttl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpoppush ( String srcList , String destList ) ; info () ;} 
public FutureByteArray lpoppush ( String srcList , String destList ) { tbyte [ ] srckeybytes = null ; tif ( ( srckeybytes = getKeyBytes ( srcList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; tbyte [ ] destkeybytes = null ; tif ( ( destkeybytes = getKeyBytes ( destList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LPOPPUSH , srckeybytes , destkeybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public byte [ ] lpoppush ( String srcList , String destList ) tthrows RedisException { tbyte [ ] srckeybytes = null ; tif ( ( srckeybytes = getKeyBytes ( srcList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; tbyte [ ] destkeybytes = null ; tif ( ( destkeybytes = getKeyBytes ( destList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . LPOPPUSH , srckeybytes , destkeybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; 
public void testLpoppushStringByteArray ( ) throws InterruptedException { tcmd = Command . LPOPPUSH . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLpoppushStringString ( ) { tcmd = Command . LPOPPUSH . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > type ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > ttl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; info () ;} 
public FutureByteArray rpoplpush ( String srcList , String destList ) { tbyte [ ] srckeybytes = null ; tif ( ( srckeybytes = getKeyBytes ( srcList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; tbyte [ ] destkeybytes = null ; tif ( ( destkeybytes = getKeyBytes ( destList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . RPOPLPUSH , srckeybytes , destkeybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public byte [ ] rpoplpush ( String srcList , String destList ) tthrows RedisException { tbyte [ ] srckeybytes = null ; tif ( ( srckeybytes = getKeyBytes ( srcList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; tbyte [ ] destkeybytes = null ; tif ( ( destkeybytes = getKeyBytes ( destList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . RPOPLPUSH , srckeybytes , destkeybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; 
public void testLpoppushStringByteArray ( ) throws InterruptedException { tcmd = Command . RPOPLPUSH . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testLpoppushStringString ( ) { tcmd = Command . RPOPLPUSH . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public static void main ( String [ ] args ) { } 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
protected void initializeComponents ( ) { tsuper . initializeComponents ( ) ; tserviceLock = new Object ( ) ; tisActive = new AtomicBoolean ( false ) ; tconnectionEstablished = new CountDownLatch ( 1 ) ; tpendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; trespHandler = new ResponseHandler ( ) ; trespHandlerThread = new Thread ( respHandler , " response-handler " ) ; trespHandlerThread . start ( ) ; tisActive . set ( false ) ; theartbeatThread = new Thread ( new Heartbeat ( ) , " heartbeat " ) ; theartbeatThread . start ( ) ; } 
protected void notifyConnected ( ) { tLog . log ( " Pipeline <%s> connected " , this ) ; tisActive . set ( true ) ; tconnectionEstablished . countDown ( ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tPendingRequest pendingResponse = null ; tsynchronized ( serviceLock ) { tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tRequest request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; tif ( cmd ! = Command . QUIT ) trequest . write ( getOutputStream ( ) ) ; telse { tpendingQuit = true ; tisActive . set ( false ) ; } tpendingResponse = new PendingRequest ( request , cmd ) ; tpendingResponseQueue . add ( pendingResponse ) ; } treturn pendingResponse ; } 
public static void main ( String [ ] args ) { } 
public static void main ( String [ ] args ) { } 
private final void initialize ( ) { tconnPoolAccess = new Semaphore ( connCount ) ; tconns = new Connection [ connCount ] ; tconnInUse = new boolean [ connCount ] ; tConnection conn = null ; tconnectionSpec . isReliable ( true ) ; tfor ( int i = 0 ; i < connCount ; i + + ) { ttry { 
protected void initializeComponents ( ) { tsetProtocolHandler ( Assert . notNull ( newProtocolHandler ( ) , " the delegate protocol handler " , ClientRuntimeException . class ) ) ; tif ( spec . isReliable ( ) ) { theartbeat = new HeartbeatJinn ( this , this . spec . getHeartbeat ( ) , " connection [ " + hashCode ( ) + " ] heartbeat " ) ; 
tprotected final void connect ( ) throws IllegalStateException , ClientRuntimeException { } 
tprotected final void disconnect ( ) throws IllegalStateException { tAssert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; tsocketClose ( ) ; tisConnected = false ; tnotifyDisconnected ( ) ; Log.log("RedisConnection - disconnected"); 
public void run ( ) { tLog . log ( " HeartbeatJinn thread <%s> started. " , getName ( ) ) ; twhile ( mustBeat . get ( ) ) { ttry { tif ( connected . get ( ) ) { ttry { tswitch ( modality ) { tcase Asynchronous : tconn . queueRequest ( Command . PING ) ; tbreak ; tcase Synchronous : tconn . serviceRequest ( Command . PING ) ; tbreak ; } } tcatch ( Exception e ) { } 
protected void initializeComponents ( ) { tspec . isReliable ( true ) ; tspec . isPipeline ( true ) ; tspec . isShared ( true ) ; tsuper . initializeComponents ( ) ; tserviceLock = new Object ( ) ; tisActive = new AtomicBoolean ( false ) ; tconnectionEstablished = new CountDownLatch ( 1 ) ; tpendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; trespHandler = new ResponseHandler ( ) ; trespHandlerThread = new Thread ( respHandler , " response-handler " ) ; trespHandlerThread . start ( ) ; tisActive . set ( false ) ; } 
protected void notifyConnected ( ) { tsuper . notifyConnected ( ) ; tLog . log ( " Pipeline <%s> connected " , this ) ; tisActive . set ( true ) ; tconnectionEstablished . countDown ( ) ; } 
protected void notifyDisconnected ( ) { tsuper . notifyDisconnected ( ) ; tLog . log ( " Pipeline <%s> disconnected " , this ) ; tisActive . set ( true ) ; tconnectionEstablished . countDown ( ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tPendingRequest pendingResponse = null ; tsynchronized ( serviceLock ) { tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tRequest request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; tif ( cmd ! = Command . QUIT ) trequest . write ( getOutputStream ( ) ) ; telse { tpendingQuit = true ; tisActive . set ( false ) ; return pendingResponse; } 
public synchronized Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException { tif ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; tRequest trequest = null ; tResponse tresponse = null ; tResponseStatus status = null ; ttry { } 
public JRedis ping ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public byte [ ] srandmember ( String setkey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > type ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > ttl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; info () ;} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > srandmember ( String setkey ) ; info () ;} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > zcard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; info () ;} 
public Double get ( ) throws InterruptedException , ExecutionException { tBulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( ) ; tif ( bulkResp . getBulkData ( ) ! = null ) treturn Convert . toDouble ( bulkResp . getBulkData ( ) ) ; treturn null ; } 
public Double get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tBulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( timeout , unit ) ; tif ( bulkResp . getBulkData ( ) ! = null ) treturn Convert . toDouble ( bulkResp . getBulkData ( ) ) ; treturn null ; } 
public Double zscore ( String key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tDouble resvalue = null ; ttry { tBulkResponse bulkResponse = ( BulkResponse ) this . serviceRequest ( Command . ZSCORE , keybytes , member ) ; tif ( bulkResponse . getBulkData ( ) ! = null ) tresvalue = Convert . toDouble ( bulkResponse . getBulkData ( ) ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public Double zscore ( String key , String value ) throws RedisException { treturn zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public Double zscore ( String key , Number value ) throws RedisException { treturn zscore ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > Double zscore ( String key , T value ) throws RedisException { treturn zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public JRedis ping ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decr ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; info () throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public String randomkey ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long dbsize ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long ttl ( String key ) throws RedisException ; info () throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; info () throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public byte [ ] srandmember ( String setkey ) throws RedisException ; info () throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; info () throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; info () throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; info () throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; info () throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > incrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decr ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > decrby ( String key , int delta ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > exists ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > del ( String key ) ; public Future<Map<String, String>>info () ;} 
public Future < RedisType > type ( String key ) ; info () ;} 
public Future < List < String > > keys ( String pattern ) ; public Future<Map<String, String>>info () ;} 
public Future < List < String > > keys ( ) ; public Future<Map<String, String>>info () ;} 
public Future < String > randomkey ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > dbsize ( ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > ttl ( String key ) ; info () ;} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > llen ( String listkey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; info () ;} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > scard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > srandmember ( String setkey ) ; info () ;} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Long > zcard ( String setKey ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<Map<String, String>>info () ;} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; info () ;} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; info () ;} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; info () ;} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; info () ;} 
public Future < Double > zincrby ( String key , double score , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZINCRBY , keybytes , Convert . toBytes ( score ) , member ) ; treturn new FutureDouble ( futureResponse ) ; } 
public Future < Double > zincrby ( String key , double score , String value ) { treturn zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Future < Double > zincrby ( String key , double score , Number value ) { treturn zincrby ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > Future < Double > zincrby ( String key , double score , T value ) { treturn zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Double zincrby ( String key , double score , byte [ ] member ) tthrows RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tDouble resvalue = null ; ttry { tBulkResponse bulkResponse = ( BulkResponse ) this . serviceRequest ( Command . ZINCRBY , keybytes , Convert . toBytes ( score ) , member ) ; tif ( bulkResponse . getBulkData ( ) ! = null ) tresvalue = Convert . toDouble ( bulkResponse . getBulkData ( ) ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public Double zincrby ( String key , double score , String value ) throws RedisException { treturn zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Double zincrby ( String key , double score , Number value ) throws RedisException { treturn zincrby ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > Double zincrby ( String key , double score , T value ) throws RedisException { treturn zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public Double zscore ( String key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tDouble resvalue = null ; ttry { tBulkResponse bulkResponse = ( BulkResponse ) this . serviceRequest ( Command . ZSCORE , keybytes , member ) ; tif ( bulkResponse . getBulkData ( ) ! = null ) tresvalue = Convert . toDouble ( bulkResponse . getBulkData ( ) ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public void testZscoreAndZincrbyStringByteArray ( ) throws InterruptedException { tcmd = Command . ZSCORE . code + " byte[] | " + Command . ZINCRBY . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZincrbyStringByteArray ( ) { tcmd = Command . ZSCORE . code + " byte[] | " + Command . ZINCRBY . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void quit ( ) ; info () throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public Map<String, String>info () throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > quit ( ) ; info () ;} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<Map<String, String>>info () ;} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<Map<String, String>>info () ;} 
public KeyValueSet < T > add ( String key , T value ) ; tbyte [ ] [ ] getMappings ( ) ; public interface ByteArrays extends KeyValueSet < byte [ ] > { } public interface Numbers extends KeyValueSet < Number > { } public interface Strings extends KeyValueSet < String > { } public interface Objects < T extends Serializable > extends KeyValueSet < T > { } }} 
tbyte [ ] [ ] getMappings ( ) ; public interface ByteArrays extends KeyValueSet < byte [ ] > { } public interface Numbers extends KeyValueSet < Number > { } public interface Strings extends KeyValueSet < String > { } public interface Objects < T extends Serializable > extends KeyValueSet < T > { } }} 
tabstract byte [ ] toBytes ( T value ) ; public byte [ ] [ ] getMappings ( ) { tKeyCodec codec = DefaultKeyCodec . provider ( ) ; tbyte [ ] [ ] mappings = new byte [ map . size ( ) * 2 ] [ ] ; tint i = 0 ; tfor ( Entry < String , T > e : map . entrySet ( ) ) { tmappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; tmappings [ i + + ] = toBytes ( e . getValue ( ) ) ; } treturn mappings ; } public KeyValueSet < T > add ( String key , T value ) { tmap . put ( key , value ) ; return this ; } }} 
public byte [ ] [ ] getMappings ( ) { tKeyCodec codec = DefaultKeyCodec . provider ( ) ; tbyte [ ] [ ] mappings = new byte [ map . size ( ) * 2 ] [ ] ; tint i = 0 ; tfor ( Entry < String , T > e : map . entrySet ( ) ) { tmappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; tmappings [ i + + ] = toBytes ( e . getValue ( ) ) ; } treturn mappings ; } 
public static KeyValueSet . ByteArrays newByteArrayKVSet ( ) { return new BulkSetMapping . Bytes ( ) ; } tfinal static class Bytes extends BulkSetMapping < byte [ ] > implements KeyValueSet . ByteArrays { 
public static KeyValueSet . Strings newStringKVSet ( ) { return new BulkSetMapping . Strings ( ) ; } tfinal static class Strings extends BulkSetMapping < String > implements KeyValueSet . Strings { 
public static KeyValueSet . Numbers newNumberKVSet ( ) { return new BulkSetMapping . Numbers ( ) ; } tfinal static class Numbers extends BulkSetMapping < Number > implements KeyValueSet . Numbers { 
public static KeyValueSet . Numbers newObjectKVSet ( ) { return new BulkSetMapping . Numbers ( ) ; } tfinal static class Objects < T extends Serializable > extends BulkSetMapping < T > implements KeyValueSet . Objects < T > { 
private FutureStatus mset ( byte [ ] [ ] mappings ) { tFuture < Response > futureResponse = this . queueRequest ( Command . MSET , mappings ) ; treturn new FutureStatus ( futureResponse ) ; } 
public FutureStatus mset ( Map < String , byte [ ] > keyValueMap ) { tKeyCodec codec = DefaultKeyCodec . provider ( ) ; tbyte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; tint i = 0 ; tfor ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { tmappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; tmappings [ i + + ] = e . getValue ( ) ; } treturn mset ( mappings ) ; } 
public < T extends Serializable > FutureStatus mset ( KeyValueSet . Objects < T > keyValueMap ) { treturn mset ( keyValueMap . getMappings ( ) ) ; } 
private Future < Boolean > msetnx ( byte [ ] [ ] mappings ) { tFuture < Response > futureResponse = this . queueRequest ( Command . MSETNX , mappings ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) { tKeyCodec codec = DefaultKeyCodec . provider ( ) ; tbyte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; tint i = 0 ; tfor ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { tmappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; tmappings [ i + + ] = e . getValue ( ) ; } treturn msetnx ( mappings ) ; } 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > keyValueMap ) { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
private boolean msetnx ( byte [ ] [ ] mappings ) throws RedisException { tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . MSETNX , mappings ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException { tKeyCodec codec = DefaultKeyCodec . provider ( ) ; tbyte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; tint i = 0 ; tfor ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { tmappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; tmappings [ i + + ] = e . getValue ( ) ; } treturn msetnx ( mappings ) ; } 
public boolean msetnx ( KeyValueSet . ByteArrays keyValueMap ) throws RedisException { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public boolean msetnx ( KeyValueSet . Strings keyValueMap ) throws RedisException { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public boolean msetnx ( KeyValueSet . Numbers keyValueMap ) throws RedisException { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > keyValueMap ) throws RedisException { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException { tKeyCodec codec = DefaultKeyCodec . provider ( ) ; tbyte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; tint i = 0 ; tfor ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { tmappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; tmappings [ i + + ] = e . getValue ( ) ; } tmset ( mappings ) ; } 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > keyValueMap ) throws RedisException { tmset ( keyValueMap . getMappings ( ) ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd . requestType ) { tcase NO_ARG : } 
public byte [ ] encode ( String key ) { tif ( null = = key ) throw new IllegalArgumentException ( " key is null " ) ; tbyte [ ] bytes = null ; tif ( JRedisSupport . CacheKeys = = true ) tbytes = keyByteCache . get ( key ) ; tif ( null = = bytes ) { ttry { bytes = key . getBytes ( DefaultCodec . SUPPORTED_CHARSET_NAME ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } tfor ( byte b : bytes ) { tif ( b = = ( byte ) 32 | | b = = ( byte ) 10 | | b = = ( byte ) 13 ) tthrow new IllegalArgumentException ( " Key includes invalid byte value: " + ( int ) b ) ; } tif ( CacheKeys = = true ) keyByteCache . put ( key , bytes ) ; } treturn bytes ; } 
public static void usingSyncClient ( ) { tConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( " jredis " . getBytes ( ) ) . setDatabase ( 10 ) ; tJRedis jredis = new JRedisClient ( spec ) ; tSystem . out . println ( " nusing the SyncClient: " ) ; tuseMSet ( jredis ) ; tuseMSetNX ( jredis ) ; tjredis . quit ( ) ; } 
private static void useMSet ( JRedis jredis ) { jredis.flushdb(); 
private static void useMSetNX ( JRedis jredis ) { jredis.flushdb(); 
public static void usingAsyncClient ( ) { tConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( " jredis " . getBytes ( ) ) . setDatabase ( 10 ) ; tJRedisFuture jredis = new JRedisAsynchClient ( spec ) ; tSystem . out . println ( " nusing the AsyncClient: " ) ; tuseMSet ( jredis ) ; tuseMSetNX ( jredis ) ; jredis . quit ( ) ; 
private static void useMSetNX ( JRedisFuture jredis ) { tMap < String , byte [ ] > kvMap = new HashMap < String , byte [ ] > ( ) ; tkvMap . put ( " foo " , " bar " . getBytes ( ) ) ; tkvMap . put ( " cat " , " meow " . getBytes ( ) ) ; tkvMap . put ( " dog " , " woof " . getBytes ( ) ) ; tkvMap . put ( " bird " , " whale fail " . getBytes ( ) ) ; tkvMap . put ( " pi " , String . valueOf ( 3.141592653589793 ) . getBytes ( ) ) ; ttry { tjredis . flushdb ( ) ; 
private static void useMSet ( JRedisFuture jredis ) { jredis.flushdb(); 
public void run ( ) { } 
public void rpush ( String key , byte [ ] value ) tthrows RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value for list op " ) ; tthis . serviceRequest ( Command . RPUSH , keybytes , value ) ; } 
public void lpush ( String key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value for list op " ) ; tthis . serviceRequest ( Command . LPUSH , keybytes , value ) ; } 
public void read ( InputStream in ) throws ClientRuntimeException , ProviderException { tif ( didRead ) return ; } 
private final void setupTestSuiteData ( ) { tcnt = MEDIUM_CNT ; tbyte [ ] zerobytes = new byte [ 0 ] ; tfor ( int i = 0 ; i < cnt ; i + + ) { tkeys . add ( getRandomAsciiString ( 48 ) ) ; tpatternList . add ( getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) + patternA + getRandomAsciiString ( random . nextInt ( 10 ) + 2 ) ) ; tuniqueSet . add ( getRandomAsciiString ( 48 ) ) ; tcommonSet . add ( getRandomAsciiString ( 48 ) ) ; tset1 . add ( " set_1 " + getRandomAsciiString ( 20 ) ) ; tset2 . add ( " set_2 " + getRandomAsciiString ( 20 ) ) ; tdataList . add ( getRandomBytes ( 128 ) ) ; tif ( random . nextBoolean ( ) ) tsparseList . add ( zerobytes ) ; telse tsparseList . add ( getRandomBytes ( 128 ) ) ; tstringList . add ( getRandomAsciiString ( 128 ) ) ; tobjectList . add ( new TestBean ( " testbean. " + i ) ) ; tintList . add ( random . nextInt ( ) ) ; tlongList . add ( random . nextLong ( ) ) ; tdoubleList . add ( random . nextDouble ( ) ) ; } tfor ( String m : commonSet ) { tset1 . add ( m ) ; tset2 . add ( m ) ; } tLog . log ( " TEST-SUITE-INIT: JRedis Provider Test Suite random test data created " ) ; 
public void testListPushWithSparseList ( ) { tcmd = Command . RPUSH . code + " byte[] | " + Command . LLEN + " | " + Command . LRANGE ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public FutureStatus rpush ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureStatus ( this . queueRequest ( Command . RPUSH , keybytes , value ) ) ; } 
public FutureStatus lpush ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureStatus ( this . queueRequest ( Command . LPUSH , keybytes , value ) ) ; } 
public JRedis ping ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void quit ( ) ; public void slaveofnone() throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long incr ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long decr ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public String randomkey ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long dbsize ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public byte [ ] srandmember ( String setkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public JRedis flushdb ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public JRedis flushall ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean move ( String key , int dbIndex ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Sort sort ( String key ) ; public void slaveofnone() throws RedisException;} 
public void save ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void bgsave ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long lastsave ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Map < String , String > tinfo ( ) throws RedisException ; public void slaveofnone ( ) throws RedisException ; } 
public void slaveof ( String host , int port ) throws RedisException ; public void slaveofnone ( ) throws RedisException ; } 
public Future < ResponseStatus > ping ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > quit ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > incr ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > decr ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > exists ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > del ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < RedisType > type ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < String > > keys ( String pattern ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < String > > keys ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < String > randomkey ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > dbsize ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > ttl ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > llen ( String listkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > scard ( String setKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > zcard ( String setKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > flushdb ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > flushall ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > move ( String key , int dbIndex ) ; public Future<ResponseStatus> slaveofnone();} 
public Sort sort ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > save ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > bgsave ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lastsave ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Map < String , String > > tinfo ( ) ; public Future < ResponseStatus > slaveofnone ( ) ; } 
public Future < ResponseStatus > slaveof ( String host , int port ) ; public Future < ResponseStatus > slaveofnone ( ) ; } 
public Future < ResponseStatus > slaveof ( String host , int port ) { tbyte [ ] hostbytes = null ; tif ( ( hostbytes = getKeyBytes ( host ) ) = = null ) tthrow new IllegalArgumentException ( " invalid host => [ " + host + " ] " ) ; tbyte [ ] portbytes = null ; tif ( ( portbytes = Convert . toBytes ( port ) ) = = null ) tthrow new IllegalArgumentException ( " invalid port => [ " + port + " ] " ) ; treturn new FutureStatus ( this . queueRequest ( Command . SLAVEOF , hostbytes , portbytes ) ) ; } 
public Future < ResponseStatus > slaveofnone ( ) { treturn new FutureStatus ( this . queueRequest ( Command . SLAVEOF , " no " . getBytes ( ) , " one " . getBytes ( ) ) ) ; } 
public void slaveof ( String host , int port ) throws RedisException { tbyte [ ] hostbytes = null ; tif ( ( hostbytes = getKeyBytes ( host ) ) = = null ) tthrow new IllegalArgumentException ( " invalid host => [ " + host + " ] " ) ; tbyte [ ] portbytes = null ; tif ( ( portbytes = Convert . toBytes ( port ) ) = = null ) tthrow new IllegalArgumentException ( " invalid port => [ " + port + " ] " ) ; tthis . serviceRequest ( Command . SLAVEOF , hostbytes , portbytes ) ; } 
public void slaveofnone ( ) throws RedisException { tthis . serviceRequest ( Command . SLAVEOF , " no " . getBytes ( ) , " one " . getBytes ( ) ) ; } 
public static void main ( String [ ] args ) { tfinal ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) ; tspec . setCredentials ( " jredis " . getBytes ( ) ) ; tspec . setDatabase ( 13 ) ; tspec . setSocketProperty ( SocketProperty . SO_RCVBUF , 1024 * 512 ) ; tspec . setSocketProperty ( SocketProperty . SO_SNDBUF , 1024 * 512 ) ; tusingSynchSemantics ( spec ) ; tfinal boolean forever = true ; trunJRedisPipelineSET ( spec , 10000 , 3 , forever ) ; } 
private static void usingSynchSemantics ( ConnectionSpec spec ) { tJRedisPipeline pipeline = new JRedisPipeline ( spec ) ; ttry { tlong start = System . currentTimeMillis ( ) ; 
private static void runJRedisPipelineGET ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { tlong totTime = 0 ; tlong avgRespTime = 0 ; tfloat avgThroughput = ( float ) 0 ; tlong iters = 0 ; tJRedisFuture pipeline = new JRedisPipeline ( spec ) ; ttry { tString key = " pipeKey " ; 
private static void runJRedisPipelinePING ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { tlong totTime = 0 ; tlong avgRespTime = 0 ; tfloat avgThroughput = ( float ) 0 ; tlong iters = 0 ; tJRedisFuture pipeline = new JRedisPipeline ( spec ) ; ttry { tdo { 
private static void runJRedisPipelineLPUSH ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { tJRedisFuture pipeline = new JRedisPipeline ( spec ) ; tlong totTime = 0 ; tlong avgRespTime = 0 ; tfloat avgThroughput = ( float ) 0 ; tlong iters = 0 ; ttry { tString key = " pipeKey " ; 
private static void runJRedisPipelineSET ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { tJRedisFuture pipeline = new JRedisPipeline ( spec ) ; tlong totTime = 0 ; tlong avgRespTime = 0 ; tfloat avgThroughput = ( float ) 0 ; tlong iters = 0 ; ttry { tString key = " pipeKey " ; 
private static void runJRedisPipelineINCR ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { tJRedisFuture pipeline = new JRedisPipeline ( spec ) ; tlong totTime = 0 ; tlong avgRespTime = 0 ; tfloat avgThroughput = ( float ) 0 ; tlong iters = 0 ; ttry { tString key = " pipeCounter " ; 
private void basicStuff ( ) throws RedisException { jredis . flushdb ( ) ; String key = " foo " ; jredis . set ( key , " bar " ) ; String value = toStr ( jredis . get ( key ) ) ; System . out . format ( " %s => %s " , key , value ) ; } 
public JRedis ping ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void quit ( ) ; public void slaveofnone() throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long incr ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long decr ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public String randomkey ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long dbsize ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public byte [ ] srandmember ( String setkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean hset ( String key , String field , String string ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean hset ( String key , String field , Number number ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > tboolean hset ( String key , String field , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] hget ( String key , String field ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > quit ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > incr ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > decr ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > exists ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > del ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < RedisType > type ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < String > > keys ( String pattern ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < String > > keys ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < String > randomkey ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > dbsize ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > ttl ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > llen ( String listkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > scard ( String setKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > zcard ( String setKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > hset ( String key , String field , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( field ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + field + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HSET , hashKeyBytes , hashFieldBytes , value ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > hset ( String key , String field , String stringValue ) { treturn hset ( key , field , DefaultCodec . encode ( stringValue ) ) ; } 
public Future < Boolean > hset ( String key , String field , Number numberValue ) { treturn hset ( key , field , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > tFuture < Boolean > hset ( String key , String field , T object ) { treturn hset ( key , field , DefaultCodec . encode ( object ) ) ; } 
public Future < byte [ ] > hget ( String hashKey , String hashField ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HGET , hashKeyBytes , hashFieldBytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public List < String > get ( ) throws InterruptedException , ExecutionException { return DefaultCodec.toStr(resp.getMultiBulkData()); } 
public List < String > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { return DefaultCodec.toStr(resp.getMultiBulkData()); } 
public < T extends Serializable > tboolean smove ( String srcKey , String destKey , T object ) throws RedisException { treturn smove ( srcKey , destKey , DefaultCodec . encode ( object ) ) ; } 
public boolean hset ( String hashKey , String hashField , byte [ ] value ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tboolean response = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . HSET , hashKeyBytes , hashFieldBytes , value ) ; tresponse = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn response ; } 
public boolean hset ( String key , String field , String stringValue ) throws RedisException { treturn hset ( key , field , DefaultCodec . encode ( stringValue ) ) ; } 
public boolean hset ( String key , String field , Number numberValue ) throws RedisException { treturn hset ( key , field , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < T extends Serializable > tboolean hset ( String key , String field , T object ) throws RedisException { treturn hset ( key , field , DefaultCodec . encode ( object ) ) ; } 
public byte [ ] hget ( String hashKey , String hashField ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . HGET , hashKeyBytes , hashFieldBytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public List < String > keys ( String pattern ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( pattern ) ) = = null ) tthrow new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . KEYS , keydata ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn DefaultCodec . toStr ( multiBulkData ) ; / * 
public void testHsetHget ( ) throws InterruptedException { tcmd = Command . HSET . code + " | " + Command . HGET ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testHsetHget ( ) { tcmd = Command . HSET . code + " | " + Command . HGET ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void quit ( ) ; public void slaveofnone() throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long incr ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long decr ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public String randomkey ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long dbsize ( ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public void slaveofnone() throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > quit ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > incr ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > decr ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > exists ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > del ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < RedisType > type ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < String > > keys ( String pattern ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < String > > keys ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < String > randomkey ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > dbsize ( ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > ttl ( String key ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > llen ( String listkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < Long > scard ( String setKey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ResponseStatus> slaveofnone();} 
public Future < byte [ ] > spop ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SPOP , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public byte [ ] spop ( String setkey ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( setkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + setkey + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . SPOP , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public JRedis ping ( ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void quit ( ) ; byte[] echo (T msg) throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; byte[] echo (T msg) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; byte[] echo (T msg) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; byte[] echo (T msg) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; byte[] echo (T msg) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; byte[] echo (T msg) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; byte[] echo (T msg) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; byte[] echo (T msg) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean hset ( String key , String field , String string ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public < T extends Serializable > tboolean hset ( String key , String field , T object ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public byte [ ] hget ( String key , String field ) throws RedisException ; byte[] echo (T msg) throws RedisException;} 
public JRedis flushdb ( ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public JRedis flushall ( ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public boolean move ( String key , int dbIndex ) throws RedisException ; byte[] echo (T msg) throws RedisException;} 
public Sort sort ( String key ) ; byte[] echo (T msg) throws RedisException;} 
public void save ( ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void bgsave ( ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public long lastsave ( ) throws RedisException ; byte[] echo (T msg) throws RedisException;} 
public Map < String , String > tinfo ( ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void slaveof ( String host , int port ) throws RedisException ; public byte[] echo (byte[] msg) throws RedisException;public byte[] echo (String msg) throws RedisException;public byte[] echo (Number msg) throws RedisException;public <T extends Serializable> byte[] echo (T msg) throws RedisException;} 
public void slaveofnone ( ) throws RedisException ; byte[] echo (T msg) throws RedisException;} 
public byte [ ] echo ( byte [ ] msg ) throws RedisException ; public byte [ ] echo ( String msg ) throws RedisException ; public byte [ ] echo ( Number msg ) throws RedisException ; public < T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; } 
public byte [ ] echo ( String msg ) throws RedisException ; public byte [ ] echo ( Number msg ) throws RedisException ; public < T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; } 
public byte [ ] echo ( Number msg ) throws RedisException ; public < T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; } 
public Future < ResponseStatus > ping ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > quit ( ) ; Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > incr ( String key ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > decr ( String key ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > exists ( String key ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > del ( String key ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < RedisType > type ( String key ) ; Future<byte[]> echo (T msg);} 
public Future < List < String > > keys ( String pattern ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < String > > keys ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < String > randomkey ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > dbsize ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > ttl ( String key ) ; Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > llen ( String listkey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; Future<byte[]> echo (T msg);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > scard ( String setKey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > spop ( String setkey ) ; Future<byte[]> echo (T msg);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > zcard ( String setKey ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; Future<byte[]> echo (T msg);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; Future<byte[]> echo (T msg);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; Future<byte[]> echo (T msg);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public < T extends Serializable > tFuture < Boolean > hset ( String key , String field , T object ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < byte [ ] > hget ( String key , String field ) ; Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > flushdb ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > flushall ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Boolean > move ( String key , int dbIndex ) ; Future<byte[]> echo (T msg);} 
public Sort sort ( String key ) ; Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > save ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > bgsave ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < Long > lastsave ( ) ; Future<byte[]> echo (T msg);} 
public Future < Map < String , String > > tinfo ( ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > slaveof ( String host , int port ) ; public Future<byte[]> echo (byte[] msg);public Future<byte[]> echo (String msg);public Future<byte[]> echo (Number msg);public <T extends Serializable> Future<byte[]> echo (T msg);} 
public Future < ResponseStatus > slaveofnone ( ) ; Future<byte[]> echo (T msg);} 
public Future < byte [ ] > echo ( byte [ ] msg ) ; public Future < byte [ ] > echo ( String msg ) ; public Future < byte [ ] > echo ( Number msg ) ; public < T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; } 
public Future < byte [ ] > echo ( String msg ) ; public Future < byte [ ] > echo ( Number msg ) ; public < T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; } 
public Future < byte [ ] > echo ( byte [ ] msg ) { tif ( msg = = null ) tthrow new IllegalArgumentException ( " invalid value for echo => [ " + msg + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ECHO , msg ) ; treturn new FutureByteArray ( futureResponse ) ; 
public byte [ ] echo ( byte [ ] value ) throws RedisException { tif ( value = = null ) tthrow new IllegalArgumentException ( " invalid echo value => [ " + value + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . ECHO , value ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public < T extends Serializable > tbyte [ ] echo ( T value ) throws RedisException { treturn echo ( DefaultCodec . encode ( value ) ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd . requestType ) { tcase NO_ARG : } 
public void testEcho ( ) throws InterruptedException { tFuture < byte [ ] > echoResp = null ; tcmd = Command . ECHO . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { techoResp = provider . echo ( dataList . get ( 0 ) ) ; 
public JRedis ping ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tboolean hset ( String key , String field , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public JRedis flushdb ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public JRedis flushall ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean move ( String key , int dbIndex ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Sort sort ( String key ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void save ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void bgsave ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lastsave ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Map < String , String > tinfo ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void slaveof ( String host , int port ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void slaveofnone ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] echo ( byte [ ] msg ) throws RedisException ; public byte [ ] echo ( String msg ) throws RedisException ; public byte [ ] echo ( Number msg ) throws RedisException ; public < T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; public ObjectInfo debug ( String key ) throws RedisException ; } 
public byte [ ] echo ( String msg ) throws RedisException ; public byte [ ] echo ( Number msg ) throws RedisException ; public < T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; public ObjectInfo debug ( String key ) throws RedisException ; } 
public byte [ ] echo ( Number msg ) throws RedisException ; public < T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; public ObjectInfo debug ( String key ) throws RedisException ; } 
public < T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; public ObjectInfo debug ( String key ) throws RedisException ; } 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > flushdb ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > flushall ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > move ( String key , int dbIndex ) ; public Future<ObjectInfo> debug (String key);} 
public Sort sort ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > save ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > bgsave ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lastsave ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Map < String , String > > tinfo ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > slaveof ( String host , int port ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > slaveofnone ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > echo ( byte [ ] msg ) ; public Future < byte [ ] > echo ( String msg ) ; public Future < byte [ ] > echo ( Number msg ) ; public < T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; public Future < ObjectInfo > debug ( String key ) ; } 
public Future < byte [ ] > echo ( String msg ) ; public Future < byte [ ] > echo ( Number msg ) ; public < T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; public Future < ObjectInfo > debug ( String key ) ; } 
public Future < byte [ ] > echo ( Number msg ) ; public < T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; public Future < ObjectInfo > debug ( String key ) ; } 
public < T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; public Future < ObjectInfo > debug ( String key ) ; } 
public String toString ( ) { tFormatter formatter = new Formatter ( ) ; tformatter . format ( " ObjectInfo: key [addr:%s refCnt: %d] value [addr:%s refCnt: %d] encoding:%d serializedLength: %d " , tkeyAddress , keyRefCount , valueAddress , valueRefCount , encoding , serializedLength ) ; treturn formatter . toString ( ) ; } 
static public final ObjectInfo valueOf ( String strRep ) { tStringTokenizer tokenizer = new StringTokenizer ( strRep ) ; tint tokenCnt = tokenizer . countTokens ( ) ; tif ( tokenCnt ! = 8 ) throw new ProviderException ( " DEBUG OBJECT <key> response does not conform to expected format. Got: [ " + strRep + " ] " ) ; tList < String > tokens = new ArrayList < String > ( tokenCnt ) ; twhile ( tokenizer . hasMoreElements ( ) ) ttokens . add ( tokenizer . nextToken ( ) ) ; tString keyAddr = tokens . get ( 1 ) . substring ( 3 ) ; tString keyCnt = tokens . get ( 2 ) . substring ( " refcount: " . length ( ) ) ; tkeyCnt = keyCnt . substring ( 0 , keyCnt . length ( ) - 1 ) ; tString valAddr = tokens . get ( 4 ) . substring ( 3 ) ; tString valCnt = tokens . get ( 5 ) . substring ( " refcount: " . length ( ) ) ; tString encoding = tokens . get ( 6 ) . substring ( " encoding: " . length ( ) ) ; tString serlen = tokens . get ( 7 ) . substring ( " serializedlength: " . length ( ) ) ; tObjectInfo info = new ObjectInfo ( keyAddr , Integer . parseInt ( keyCnt ) , valAddr , Integer . parseInt ( valCnt ) , Integer . parseInt ( encoding ) , Integer . parseInt ( serlen ) ) ; treturn info ; } 
public Future < ObjectInfo > debug ( String key ) { tbyte [ ] keybytes = getKeyBytes ( key ) ; tif ( key . length ( ) = = 0 ) tthrow new IllegalArgumentException ( " invalid zero length key => [ " + key + " ] " ) ; treturn new FutureObjectInfo ( this . queueRequest ( Command . DEBUG , " OBJECT " . getBytes ( ) , keybytes ) ) ; } 
public ObjectInfo get ( ) throws InterruptedException , ExecutionException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; treturn getObjectInfo ( valResp ) ; } 
public ObjectInfo get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn getObjectInfo ( valResp ) ; } 
public ObjectInfo debug ( String key ) throws RedisException { tbyte [ ] keybytes = getKeyBytes ( key ) ; tif ( key . length ( ) = = 0 ) tthrow new IllegalArgumentException ( " invalid zero length key => [ " + key + " ] " ) ; tObjectInfo tobjectInfo = null ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . DEBUG , " OBJECT " . getBytes ( ) , keybytes ) ; tString stringValue = valResponse . getStringValue ( ) ; tobjectInfo = ObjectInfo . valueOf ( stringValue ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn objectInfo ; } 
public void testDebug ( ) throws InterruptedException { tFuture < ObjectInfo > frInfo = null ; tcmd = Command . DEBUG . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public String toString ( ) { tFormatter formatter = new Formatter ( ) ; tformatter . format ( " ObjectInfo: key [addr:%s refCnt: %d] value [addr:%s refCnt: %d] encoding:%s serializedLength: %d " , tkeyAddress , keyRefCount , valueAddress , valueRefCount , encoding , serializedLength ) ; treturn formatter . toString ( ) ; } 
static public final ObjectInfo valueOf ( String strRep ) { tStringTokenizer tokenizer = new StringTokenizer ( strRep ) ; tint tokenCnt = tokenizer . countTokens ( ) ; tif ( tokenCnt ! = 8 ) throw new ProviderException ( " DEBUG OBJECT <key> response does not conform to expected format. Got: [ " + strRep + " ] " ) ; tList < String > tokens = new ArrayList < String > ( tokenCnt ) ; twhile ( tokenizer . hasMoreElements ( ) ) ttokens . add ( tokenizer . nextToken ( ) ) ; tString keyAddr = tokens . get ( 1 ) . substring ( 3 ) ; tString keyCnt = tokens . get ( 2 ) . substring ( " refcount: " . length ( ) ) ; tkeyCnt = keyCnt . substring ( 0 , keyCnt . length ( ) - 1 ) ; tString valAddr = tokens . get ( 4 ) . substring ( 3 ) ; tString valCnt = tokens . get ( 5 ) . substring ( " refcount: " . length ( ) ) ; tString encodingRep = tokens . get ( 6 ) . substring ( " encoding: " . length ( ) ) ; tString serlen = tokens . get ( 7 ) . substring ( " serializedlength: " . length ( ) ) ; tObjectInfo info = new ObjectInfo ( tkeyAddr , tInteger . parseInt ( keyCnt ) , tvalAddr , tInteger . parseInt ( valCnt ) , tObjectEncoding . valueOf ( encodingRep . toUpperCase ( ) ) , tInteger . parseInt ( serlen ) ) ; treturn info ; } 
public JRedis ping ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tboolean hset ( String key , String field , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String hashKey , String hashField ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HEXISTS , hashKeyBytes , hashFieldBytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public boolean hexists ( String hashKey , String hashField ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tboolean resp = false ; ttry { tValueResponse response = ( ValueResponse ) this . serviceRequest ( Command . HEXISTS , hashKeyBytes , hashFieldBytes ) ; tresp = response . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public void testHsetHget ( ) throws InterruptedException { tcmd = Command . HSET . code + " | " + Command . HGET + " | " + Command . HEXISTS ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testHsetHgetHexists ( ) { tcmd = Command . HSET . code + " | " + Command . HGET + " | " + Command . HEXISTS ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tboolean hset ( String key , String field , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String hashKey , String hashField ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HDEL , hashKeyBytes , hashFieldBytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public boolean hdel ( String hashKey , String hashField ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tboolean resp = false ; ttry { tValueResponse response = ( ValueResponse ) this . serviceRequest ( Command . HDEL , hashKeyBytes , hashFieldBytes ) ; tresp = response . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public JRedis ping ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tboolean hset ( String key , String field , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long hlen ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > hlen ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > hlen ( String hashKey ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HLEN , hashKeyBytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public long hlen ( String hashKey ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tlong resp = 0 ; ttry { tValueResponse response = ( ValueResponse ) this . serviceRequest ( Command . HLEN , hashKeyBytes ) ; tresp = response . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public JRedis ping ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tboolean hset ( String key , String field , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long hlen ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > hkeys ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > hlen ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > hkeys ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > hkeys ( String hashKey ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HKEYS , hashKeyBytes ) ; treturn new FutureKeyList ( futureResponse ) ; } 
public List < String > get ( ) throws InterruptedException , ExecutionException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( ) ; tList < byte [ ] > multibulkdata = resp . getMultiBulkData ( ) ; tList < String > list = null ; tif ( null ! = multibulkdata ) tlist = DefaultCodec . toStr ( multibulkdata ) ; treturn list ; } 
public List < String > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( timeout , unit ) ; tList < byte [ ] > multibulkdata = resp . getMultiBulkData ( ) ; tList < String > list = null ; tif ( null ! = multibulkdata ) tlist = DefaultCodec . toStr ( multibulkdata ) ; treturn list ; } 
public boolean hexists ( String hashKey , String hashField ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tboolean resp = false ; ttry { tValueResponse response = ( ValueResponse ) this . serviceRequest ( Command . HEXISTS , hashKeyBytes , hashFieldBytes ) ; tresp = response . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public boolean hdel ( String hashKey , String hashField ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tboolean resp = false ; ttry { tValueResponse response = ( ValueResponse ) this . serviceRequest ( Command . HDEL , hashKeyBytes , hashFieldBytes ) ; tresp = response . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public long hlen ( String hashKey ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tlong resp = 0 ; ttry { tValueResponse response = ( ValueResponse ) this . serviceRequest ( Command . HLEN , hashKeyBytes ) ; tresp = response . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public List < String > hkeys ( String hashKey ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tList < String > resp = null ; ttry { tMultiBulkResponse response = ( MultiBulkResponse ) this . serviceRequest ( Command . HKEYS , hashKeyBytes ) ; tif ( null ! = response . getMultiBulkData ( ) ) resp = DefaultCodec . toStr ( response . getMultiBulkData ( ) ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public void testHkeys ( ) throws InterruptedException { tcmd = Command . HSET . code + " | " + Command . HKEYS ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testHkeys ( ) { tcmd = Command . HKEYS . code + " | " + Command . HSET + " | " + Command . HDEL ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tboolean hset ( String key , String field , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long hlen ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > hkeys ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > hvals ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > hlen ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > hkeys ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > hvals ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > hvals ( String hashKey ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HKEYS , hashKeyBytes ) ; treturn new FutureByteArrayList ( futureResponse ) ; } 
public List < byte [ ] > hvals ( String hashKey ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tList < byte [ ] > resp = null ; ttry { tMultiBulkResponse response = ( MultiBulkResponse ) this . serviceRequest ( Command . HVALS , hashKeyBytes ) ; tresp = response . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public void testHvals ( ) throws InterruptedException { tcmd = Command . HSET . code + " | " + Command . HVALS ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testHvals ( ) { tcmd = Command . HVALS . code + " | " + Command . HSET + " | " + Command . HDEL ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tboolean hset ( String key , String field , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long hlen ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > hkeys ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > hvals ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Map < String , byte [ ] > hgetall ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > hlen ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > hkeys ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > hvals ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Map < String , byte [ ] > > hgetall ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Map < String , byte [ ] > > hgetall ( String hashKey ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HGETALL , hashKeyBytes ) ; treturn new FutureDataDictionary ( futureResponse ) ; } 
public Map < String , byte [ ] > get ( ) throws InterruptedException , ExecutionException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( ) ; treturn convert ( resp . getMultiBulkData ( ) ) ; } 
public Map < String , byte [ ] > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn convert ( resp . getMultiBulkData ( ) ) ; } 
private static final Map < String , byte [ ] > convert ( List < byte [ ] > bulkdata ) { tMap < String , byte [ ] > map = null ; tif ( null ! = bulkdata ) { tmap = new HashMap < String , byte [ ] > ( bulkdata . size ( ) / 2 ) ; tfor ( int i = 0 ; i < bulkdata . size ( ) ; i + = 2 ) { tmap . put ( DefaultCodec . toStr ( bulkdata . get ( i ) ) , bulkdata . get ( i + 1 ) ) ; } } treturn map ; } 
public Map < String , byte [ ] > hgetall ( String hashKey ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tMap < String , byte [ ] > resp = null ; ttry { tMultiBulkResponse response = ( MultiBulkResponse ) this . serviceRequest ( Command . HGETALL , hashKeyBytes ) ; tList < byte [ ] > bulkdata = response . getMultiBulkData ( ) ; tif ( null ! = bulkdata ) { tresp = new HashMap < String , byte [ ] > ( bulkdata . size ( ) / 2 ) ; tfor ( int i = 0 ; i < bulkdata . size ( ) ; i + = 2 ) { tresp . put ( DefaultCodec . toStr ( bulkdata . get ( i ) ) , bulkdata . get ( i + 1 ) ) ; } } } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public void testHgetall ( ) throws InterruptedException { tcmd = Command . HSET . code + " | " + Command . HGETALL ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testHgetall ( ) { tcmd = Command . HGETALL . code + " | " + Command . HSET + " | " + Command . HDEL ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtime ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong expiretime = TimeUnit . SECONDS . convert ( epochtime , TimeUnit . MILLISECONDS ) ; tbyte [ ] expiretimeBytes = Convert . toBytes ( expiretime ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . EXPIREAT , keybytes , expiretimeBytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public boolean expireat ( String key , long epochtime ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong expiretime = TimeUnit . SECONDS . convert ( epochtime , TimeUnit . MILLISECONDS ) ; tbyte [ ] expiretimeBytes = Convert . toBytes ( expiretime ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . EXPIREAT , keybytes , expiretimeBytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public void testExpireat ( ) throws InterruptedException { tcmd = Command . EXPIREAT . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) . get ( ) ; 
public void testExpireat ( ) { tcmd = Command . EXPIREAT . code ; tLog . log ( " TEST: %s command(s) " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tboolean hset ( String key , String field , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long hlen ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > hkeys ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > hvals ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Map < String , byte [ ] > hgetall ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public JRedis flushdb ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public JRedis flushall ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean move ( String key , int dbIndex ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Sort sort ( String key ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void save ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void bgsave ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String bgrewriteaof ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , String string ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hset ( String key , String field , Number number ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > hset ( String key , String field , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > hget ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hexists ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > hdel ( String key , String field ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > hlen ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > hkeys ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > hvals ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Map < String , byte [ ] > > hgetall ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > flushdb ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > flushall ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > move ( String key , int dbIndex ) ; public Future<ObjectInfo> debug (String key);} 
public Sort sort ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > save ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > bgsave ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > bgrewriteaof ( ) ; public Future<ObjectInfo> debug (String key);} 
public FutureString bgrewriteaof ( ) { tFuture < Response > futureResponse = this . queueRequest ( Command . BGREWRITEAOF ) ; treturn new FutureString ( futureResponse ) ; } 
public String bgrewriteaof ( ) throws RedisException { tString value = null ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . BGREWRITEAOF ) ; tvalue = valResponse . getStringValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public void testBgrewriteaof ( ) throws InterruptedException { tFuture < String > cmdRespMsg = null ; tcmd = Command . BGREWRITEAOF . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tcmdRespMsg = provider . bgrewriteaof ( ) ; 
public void testBgrewriteaofe ( ) { tcmd = Command . BGREWRITEAOF . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public JRedis ping ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void quit ( ) ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyscore ( String key , double minScore , double maxScore ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minScore ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxScore ) ; treturn new FutureLong ( this . queueRequest ( Command . ZREMRANGEBYSCORE , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public long zremrangebyscore ( String key , double minScore , double maxScore ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( minScore ) ; tbyte [ ] toBytes = Convert . toBytes ( maxScore ) ; tlong resp = Long . MIN_VALUE ; ttry { tValueResponse valueResponse = ( ValueResponse ) this . serviceRequest ( Command . ZREMRANGEBYSCORE , keybytes , fromBytes , toBytes ) ; tresp = valueResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public void testZrangebyscoreStringByteArray ( ) throws InterruptedException { tcmd = Command . ZRANGEBYSCORE . code + " byte[] | " + Command . ZSCORE . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZremrangebyscoreStringByteArray ( ) throws InterruptedException { tcmd = Command . ZREMRANGEBYSCORE . code + " byte[] | " + Command . ZSCORE . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZrangebyscoreStringByteArray ( ) { tcmd = Command . ZRANGEBYSCORE . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZremrangebyscoreStringByteArray ( ) { tcmd = Command . ZREMRANGEBYSCORE . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void set ( String key , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyrank ( String setkey , double minRank , double maxRank ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyrank ( String setkey , double minRank , double maxRank ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyrank ( String key , double minRank , double maxRank ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minRank ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxRank ) ; treturn new FutureLong ( this . queueRequest ( Command . ZREMRANGEBYRANK , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public long zremrangebyrank ( String key , double minRank , double maxRank ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( minRank ) ; tbyte [ ] toBytes = Convert . toBytes ( maxRank ) ; tlong resp = Long . MIN_VALUE ; ttry { tValueResponse valueResponse = ( ValueResponse ) this . serviceRequest ( Command . ZREMRANGEBYRANK , keybytes , fromBytes , toBytes ) ; tresp = valueResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public void testZremrangebyrankStringByteArray ( ) throws InterruptedException { tcmd = Command . ZREMRANGEBYRANK . code + " byte[] | " + Command . ZSCORE . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZremrangebyrankStringByteArray ( ) { tcmd = Command . ZREMRANGEBYRANK . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void set ( String key , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , String stringValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , byte [ ] member ) ; public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZRANK , keybytes , member ) ; treturn new FutureLong ( futureResponse ) ; } 
public < T extends Serializable > Future < Long > zrank ( String key , T value ) { treturn zrank ( key , DefaultCodec . encode ( value ) ) ; } 
public long zrank ( String key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong resvalue = - 1 ; ttry { tValueResponse bulkResponse = ( ValueResponse ) this . serviceRequest ( Command . ZRANK , keybytes , member ) ; tresvalue = bulkResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public long zrank ( String key , Number value ) throws RedisException { treturn zrank ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > long zrank ( String key , T value ) throws RedisException { treturn zrank ( key , DefaultCodec . encode ( value ) ) ; } 
public void testZrankStringByteArray ( ) throws InterruptedException { tcmd = Command . ZRANK . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZrankStringByteArray ( ) { tcmd = Command . ZRANK . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , byte [ ] member ) ; public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , byte [ ] member ) ; public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZREVRANK , keybytes , member ) ; treturn new FutureLong ( futureResponse ) ; } 
public < T extends Serializable > Future < Long > zrevrank ( String key , T value ) { treturn zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public long zrevrank ( String key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong resvalue = - 1 ; ttry { tValueResponse bulkResponse = ( ValueResponse ) this . serviceRequest ( Command . ZREVRANK , keybytes , member ) ; tresvalue = bulkResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public long zrevrank ( String key , String value ) throws RedisException { treturn zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public long zrevrank ( String key , Number value ) throws RedisException { treturn zrevrank ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > long zrevrank ( String key , T value ) throws RedisException { treturn zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public void testZrevrankStringByteArray ( ) throws InterruptedException { tcmd = Command . ZREVRANK . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZrevrankStringByteArray ( ) { tcmd = Command . ZREVRANK . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void set ( String key , Number numberValue ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void set ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , byte [ ] value ) throws RedisException ; public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , String stringValue ) throws RedisException ; public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean setnx ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean setnx ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] get ( String key ) throws RedisException ; public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , byte [ ] value ) throws RedisException ; public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureByteArray ( this . queueRequest ( Command . SUBSTR , keybytes , fromBytes , toBytes ) ) ; } 
public List < byte [ ] > lrange ( String key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . LRANGE , keybytes , fromBytes , toBytes ) ; tmultiBulkData = multiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public byte [ ] substr ( String key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse bulkResponse = ( BulkResponse ) this . serviceRequest ( Command . SUBSTR , keybytes , fromBytes , toBytes ) ; tbulkData = bulkResponse . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public void testSubstr ( ) throws InterruptedException { tcmd = Command . SUBSTR . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public byte [ ] getset ( String key , String stringValue ) throws RedisException ; public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] getset ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tbyte [ ] getset ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrangeSubset ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrevrangeSubset ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , byte [ ] member ) ; public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , byte [ ] member ) ; public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrangeSubset ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrevrangeSubset ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrangeSubset ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureZSetList ( this . queueRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Options . WITHSCORES . bytes ) ) ; } 
public Future < List < ZSetEntry > > zrevrangeSubset ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureZSetList ( this . queueRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Options . WITHSCORES . bytes ) ) ; } 
public List < ZSetEntry > get ( ) throws InterruptedException , ExecutionException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( ) ; treturn convert ( resp . getMultiBulkData ( ) ) ; } 
public List < ZSetEntry > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn convert ( resp . getMultiBulkData ( ) ) ; } 
private static final List < ZSetEntry > convert ( List < byte [ ] > mbulkdata ) { tList < ZSetEntry > zset = null ; tif ( mbulkdata . size ( ) > 0 ) { tzset = new ArrayList < ZSetEntry > ( mbulkdata . size ( ) / 2 ) ; tfor ( int i = 0 ; i < mbulkdata . size ( ) ; i + = 2 ) { tzset . add ( new ZSetEntryImpl ( mbulkdata . get ( i ) , mbulkdata . get ( i + 1 ) ) ) ; } } treturn zset ; } 
public List < ZSetEntry > zrangeSubset ( String key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < ZSetEntry > list = null ; ttry { tMultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Options . WITHSCORES . bytes ) ; tList < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; tif ( null ! = bulkData ) { tlist = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; tfor ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { tlist . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn list ; } 
public List < ZSetEntry > zrevrangeSubset ( String key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < ZSetEntry > list = null ; ttry { tMultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Options . WITHSCORES . bytes ) ; tList < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; tif ( null ! = bulkData ) { tlist = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; tfor ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { tlist . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn list ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd . requestType ) { tcase NO_ARG : } 
public void testZrangeWithscoresStringByteArray ( ) throws InterruptedException { tcmd = Command . ZRANGE$OPTS . code + " byte[] | " + Command . ZSCORE . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZrevrangeWithscoresStringByteArray ( ) throws InterruptedException { tcmd = Command . ZREVRANGE$OPTS . code + " byte[] | " + Command . ZSCORE . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZrangeWithscoresStringByteArray ( ) { tcmd = Command . ZRANGE$OPTS . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZrevrangeWithscoresStringByteArray ( ) { tcmd = Command . ZREVRANGE$OPTS . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public static void usingSyncClient ( ) { tConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( " jredis " . getBytes ( ) ) . setDatabase ( 10 ) ; tJRedis jredis = new JRedisClient ( spec ) ; tSystem . out . println ( " ** using JRedis ** " ) ; tuseZRangeSubset ( jredis ) ; tjredis . quit ( ) ; } 
public static void usingAsyncClient ( ) { tConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( " jredis " . getBytes ( ) ) . setDatabase ( 10 ) ; tJRedisFuture jredis = new JRedisAsynchClient ( spec ) ; tSystem . out . println ( " n** using JRedisFuture ** " ) ; tuseZRangeSubset ( jredis ) ; jredis . quit ( ) ; 
private static void useZRangeSubset ( JRedisFuture jredis ) { tjredis . flushdb ( ) ; tfor ( int i = 0 ; i < 100 ; i + + ) { tjredis . zadd ( zset , rand . nextDouble ( ) , getRandomAsciiString ( rand , 8 ) ) ; } tFuture < List < ZSetEntry > > futureSubset = jredis . zrangeSubset ( zset , 0 , 10 ) ; tFuture < List < ZSetEntry > > futureRevSubset = jredis . zrevrangeSubset ( zset , 0 , 10 ) ; ttry { 
tstatic final String getRandomAsciiString ( Random random , int length ) { tStringBuilder builder = new StringBuilder ( length ) ; tfor ( int i = 0 ; i < length ; i + + ) { tchar c = ( char ) ( random . nextInt ( 126 - 33 ) + 33 ) ; tbuilder . append ( c ) ; } treturn builder . toString ( ) ; } 
tSort BY ( String pattern ) ; Sort STORE (String destKey);} 
tSort GET ( String pattern ) ; Sort STORE (String destKey);} 
tSort LIMIT ( long from , long count ) ; Sort STORE (String destKey);} 
tSort DESC ( ) ; Sort STORE (String destKey);} 
public Sort ALPHA ( ) { alphaSpec = Command . Options . ALPHA . name ( ) + WSPAD ; return this ; } public Sort DESC ( ) { sortSpec = Command . Options . DESC . name ( ) + WSPAD ; return this ; } 
public Sort DESC ( ) { sortSpec = Command . Options . DESC . name ( ) + WSPAD ; return this ; } public Sort BY ( String pattern ) { bySpec = Command . Options . BY . name ( ) + WSPAD + pattern ; return this ; } 
public Sort BY ( String pattern ) { bySpec = Command . Options . BY . name ( ) + WSPAD + pattern ; return this ; } public Sort GET ( String pattern ) { getSpec = Command . Options . GET . name ( ) + WSPAD + pattern + " " ; return this ; } 
public Sort GET ( String pattern ) { getSpec = Command . Options . GET . name ( ) + WSPAD + pattern + " " ; return this ; } public Sort LIMIT ( long from , long to ) { 
public Sort LIMIT ( long from , long to ) { } 
public List < byte [ ] > mget ( String key , String . . . moreKeys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrangeSubset ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrevrangeSubset ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyrank ( String setkey , double minRank , double maxRank ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcount ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > del ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , byte [ ] member ) ; public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , byte [ ] member ) ; public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrangeSubset ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrevrangeSubset ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcount ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcount ( String key , double minScore , double maxScore ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minScore ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxScore ) ; treturn new FutureLong ( this . queueRequest ( Command . ZCOUNT , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public long zcount ( String key , double minScore , double maxScore ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( minScore ) ; tbyte [ ] toBytes = Convert . toBytes ( maxScore ) ; tlong resp = Long . MIN_VALUE ; ttry { tValueResponse valueResponse = ( ValueResponse ) this . serviceRequest ( Command . ZCOUNT , keybytes , fromBytes , toBytes ) ; tresp = valueResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public void testZcountStringByteArray ( ) throws InterruptedException { tcmd = Command . ZCOUNT . code + " byte[] | " + Command . ZADD . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testZcountStringByteArray ( ) { tcmd = Command . ZCOUNT . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void mset ( KeyValueSet . Strings mappings ) throws RedisException ; public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void mset ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , byte [ ] value ) throws RedisException ; public long append ( String key , String stringValue ) throws RedisException ; public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , String stringValue ) throws RedisException ; public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String key , String . . . moreKeys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , byte [ ] value ) ; public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . APPEND , keybytes , value ) ; treturn new FutureLong ( futureResponse ) ; } 
public < T extends Serializable > Future < Long > append ( String key , T value ) { treturn append ( key , DefaultCodec . encode ( value ) ) ; } 
public long append ( String key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong resvalue = - 1 ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . APPEND , keybytes , value ) ; tresvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public long append ( String key , Number value ) throws RedisException { treturn append ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < T extends Serializable > long append ( String key , T value ) throws RedisException { treturn append ( key , DefaultCodec . encode ( value ) ) ; } 
public void testAppendStringString ( ) throws InterruptedException { tcmd = Command . APPEND . code + " | " + Command . GET . code + " String " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testAppendStringByteArray ( ) { tcmd = Command . SET . code + " | " + Command . APPEND . code + " byte[] | " + Command . GET ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testAppendStringString ( ) { tcmd = Command . SET . code + " | " + Command . APPEND . code + " String | " + Command . GET ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , byte [ ] value ) throws RedisException ; public long append ( String key , String stringValue ) throws RedisException ; public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , String stringValue ) throws RedisException ; public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean del ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrangeSubset ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrevrangeSubset ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore , long offset , long count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String key , double minScore , double maxScore , long offset , long count ) throws RedisException { byte [ ] keybytes = null ; byte [ ] bytes = new byte [ 0 ] ; try { bytes = key . getBytes ( DefaultCodec . SUPPORTED_CHARSET_NAME ) ; } catch ( UnsupportedEncodingException e ) { throw new IllegalStateException ( e ) ; TODO: handle } if ((keybytes = bytes) == null) throw new IllegalArgumentException("invalid key => [" + key + "]"); byte[] fromBytes = Convert.toBytes(minScore); byte[] toBytes = Convert.toBytes(maxScore); List<byte[]> multiBulkData = null; try { String limitSpec = "LIMIT " + offset + " " + count; MultiBulkResponse MultiBulkResponse = (MultiBulkResponse) this.serviceRequest( Command.ZRANGEBYSCORE$OPTS, keybytes, fromBytes, toBytes, limitSpec.getBytes()); multiBulkData = MultiBulkResponse.getMultiBulkData(); } catch (ClassCastException e) { throw new ProviderException("Expecting a MultiBulkResponse here => " + e.getLocalizedMessage(), e); } return multiBulkData; } 
public ConnectionSpec getSpec ( ) ; public Event (Connection src, Type type) { super(src, type); } public Event (Connection src, Type type, Object eventInfo) { super(src, type, eventInfo); }public enum Type {Established,Dropped,Faulted}}} 
public Modality getModality ( ) ; public Event (Connection src, Type type) { super(src, type); } public Event (Connection src, Type type, Object eventInfo) { super(src, type, eventInfo); }public enum Type {Established,Dropped,Faulted}}} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Event (Connection src, Type type) { super(src, type); } public Event (Connection src, Type type, Object eventInfo) { super(src, type, eventInfo); }public enum Type {Established,Dropped,Faulted}}} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; }} 
public void onEvent ( Connection . Event event ) ; } public Event ( Connection src , Type type ) { super ( src , type ) ; } public Event ( Connection src , Type type , Object eventInfo ) { super ( src , type , eventInfo ) ; } public enum Type { tEstablished , tDropped , tFaulted } } } 
tprotected abstract void setConnection ( Connection connection ) ; }} 
tprotected Connection createSynchConnection ( ConnectionSpec connectionSpec , boolean isShared , RedisVersion redisVersion ) { tConnection tsynchConnection = null ; ttry { tsynchConnection = new SynchConnection ( connectionSpec , isShared , redisVersion ) ; tAssert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( NotSupportedException e ) { tLog . log ( " Can not support redis protocol '%s' " , redisVersion ) ; tthrow e ; } tcatch ( ProviderException e ) { tLog . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; tthrow e ; } tcatch ( ClientRuntimeException e ) { tString msg = e . getMessage ( ) + " nMake sure your server is running. " ; tLog . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; tsetConnection ( new FaultedConnection ( connectionSpec , msg ) ) ; } treturn synchConnection ; } 
public static final List < String > toStr ( List < byte [ ] > bytearray ) { tif ( null = = bytearray ) return null ; tList < String > list = new ArrayList < String > ( bytearray . size ( ) ) ; tfor ( byte [ ] b : bytearray ) tif ( null ! = b ) tlist . add ( toStr ( b ) ) ; telse tlist . add ( null ) ; treturn list ; } 
public static final String toStr ( byte [ ] bytes ) { String str = null ; if ( null ! = bytes ) { ttry { tstr = new String ( bytes , SUPPORTED_CHARSET_NAME ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } } return str ; return new String(bytes, SUPPORTED_CHARSET); Java 1.6 only 
public static final List < Long > toLong ( List < byte [ ] > bytearray ) { tif ( null = = bytearray ) return null ; tList < Long > list = new ArrayList < Long > ( bytearray . size ( ) ) ; tfor ( byte [ ] b : bytearray ) list . add ( Convert . toLong ( b ) ) ; treturn list ; } 
public static final List < Double > toDouble ( List < byte [ ] > bytearray ) { tif ( null = = bytearray ) return null ; tList < Double > list = new ArrayList < Double > ( bytearray . size ( ) ) ; tfor ( byte [ ] b : bytearray ) list . add ( Convert . toDouble ( b ) ) ; treturn list ; } 
public static final < T extends Serializable > tList < T > decode ( List < byte [ ] > byteList ) { tif ( null = = byteList ) return null ; tList < T > tobjectList = new ArrayList < T > ( byteList . size ( ) ) ; tfor ( byte [ ] bytes : byteList ) { tif ( null ! = bytes ) { tT object = ( T ) decode ( bytes ) ; tobjectList . add ( ( T ) object ) ; } telse { tobjectList . add ( null ) ; } } treturn objectList ; } 
public void testSmembers ( ) { tcmd = Command . SMEMBERS . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; tString setkey = keys . get ( 0 ) ; tfor ( int i = 0 ; i < SMALL_CNT ; i + + ) tassertTrue ( provider . sadd ( setkey , dataList . get ( i ) ) , " sadd of random element should be true " ) ; tList < byte [ ] > members = null ; tmembers = provider . smembers ( setkey ) ; tassertTrue ( members . size ( ) = = SMALL_CNT ) ; provider.flushdb(); 
public synchronized Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException { tif ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; tRequest trequest = null ; tResponse tresponse = null ; tResponseStatus status = null ; ttry { } 
final public String getMessage ( ) { tStringBuffer buff = new StringBuffer ( ) ; tString message = super . getMessage ( ) ; tif ( null = = message ) buff . append ( " [BUG: null message] " ) ; telse buff . append ( message ) ; tThrowable cause = getCause ( ) ; tif ( null ! = cause ) buff . append ( " cause: => [ " ) . append ( cause . getClass ( ) . getSimpleName ( ) ) . append ( " : " ) . append ( cause . getMessage ( ) ) . append ( " ] " ) ; treturn buff . toString ( ) ; } 
private final void checkStatus ( ) throws ExecutionException { hrow new ExecutionException("Redis Exception on ["+cmd.name()+"] " + response.getStatus().message(), new RedisException(cmd, response.getStatus().message())); 
public synchronized Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException { tif ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; tRequest trequest = null ; tResponse tresponse = null ; tResponseStatus status = null ; ttry { } 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String . . . keys ) { tif ( null = = keys | | keys . length = = 0 ) throw new IllegalArgumentException ( " no keys specified " ) ; tbyte [ ] keydata = null ; tbyte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; tint i = 0 ; tfor ( String k : keys ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . MGET , keybytes ) ) ; } 
public List < byte [ ] > mget ( String . . . keys ) throws RedisException { tif ( null = = keys | | keys . length = = 0 ) throw new IllegalArgumentException ( " no keys specified " ) ; tbyte [ ] keydata = null ; tbyte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; tint i = 0 ; tfor ( String k : keys ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . MGET , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , byte [ ] value ) throws RedisException ; public long append ( String key , String stringValue ) throws RedisException ; public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , String stringValue ) throws RedisException ; public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long del ( String . . . keys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , byte [ ] value ) ; public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > del ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > del ( String . . . keys ) { tif ( null = = keys | | keys . length = = 0 ) throw new IllegalArgumentException ( " no keys specified " ) ; tbyte [ ] keydata = null ; tbyte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; tint i = 0 ; tfor ( String k : keys ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; tkeybytes [ i + + ] = keydata ; } tFuture < Response > futureResponse = this . queueRequest ( Command . DEL , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public long del ( String . . . keys ) throws RedisException { tif ( null = = keys | | keys . length = = 0 ) throw new IllegalArgumentException ( " no keys specified " ) ; tbyte [ ] keydata = null ; tbyte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; tint i = 0 ; tfor ( String k : keys ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; tkeybytes [ i + + ] = keydata ; } tlong resvalue = - 1 ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . DEL , keybytes ) ; tresvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public FutureStatus rpushx ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureStatus ( this . queueRequest ( Command . RPUSHX , keybytes , value ) ) ; } 
public FutureStatus rpushxafter ( String key , byte [ ] oldvalue , byte [ ] newvalue ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] bulk = new byte [ 3 ] [ ] ; bulk [ 0 ] = keybytes ; bulk [ 1 ] = oldvalue ; bulk [ 2 ] = newvalue ; treturn new FutureStatus ( this . queueRequest ( Command . RPUSHXAFTER , bulk ) ) ; } 
public FutureStatus ldelete ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureStatus ( this . queueRequest ( Command . LDELETE , keybytes , value ) ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd . requestType ) { tcase NO_ARG : } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd . requestType ) { tcase NO_ARG : } 
public FutureStatus lpushx ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureStatus ( this . queueRequest ( Command . LPUSHX , keybytes , value ) ) ; } 
public FutureStatus lpushxafter ( String key , byte [ ] oldvalue , byte [ ] newvalue ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] bulk = new byte [ 3 ] [ ] ; bulk [ 0 ] = keybytes ; bulk [ 1 ] = oldvalue ; bulk [ 2 ] = newvalue ; treturn new FutureStatus ( this . queueRequest ( Command . LPUSHXAFTER , bulk ) ) ; } 
tprotected final void disconnect ( ) throws IllegalStateException { tAssert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; tsocketClose ( ) ; tisConnected = false ; if ( heartbeat ! = null ) { heartbeat . exit ( ) ; } tnotifyDisconnected ( ) ; Log.log("RedisConnection - disconnected"); 
private static final void _loginfo ( String format , Object . . . args ) { logger . log ( Level . INFO , String . format ( format , args ) ) ; } 
tprotected final void disconnect ( ) throws IllegalStateException { tAssert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; tsocketClose ( ) ; tisConnected = false ; cleanup ( ) ; tnotifyDisconnected ( ) ; Log.log("RedisConnection - disconnected"); 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , byte [ ] value ) ; public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > del ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > rpush ( String listkey , byte [ ] value ) ; public Future < Long > rpush ( String listkey , String stringValue ) ; public Future < Long > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > rpush ( String listkey , String stringValue ) ; public Future < Long > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lpush ( String listkey , byte [ ] value ) ; public Future < Long > lpush ( String listkey , String stringValue ) ; public Future < Long > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lpush ( String listkey , String stringValue ) ; public Future < Long > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public FutureLong rpush ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureLong ( this . queueRequest ( Command . RPUSH , keybytes , value ) ) ; } 
public FutureLong rpushx ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureLong ( this . queueRequest ( Command . RPUSHX , keybytes , value ) ) ; } 
public FutureLong lpushx ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureLong ( this . queueRequest ( Command . LPUSHX , keybytes , value ) ) ; } 
public FutureLong linsert ( String key , boolean after , byte [ ] oldvalue , byte [ ] newvalue ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] bulk = new byte [ 3 ] [ ] ; bulk [ 0 ] = keybytes ; bulk [ 1 ] = ( after ? " AFTER " : " BEFORE " ) . getBytes ( ) ; bulk [ 2 ] = oldvalue ; bulk [ 3 ] = newvalue ; treturn new FutureLong ( this . queueRequest ( Command . LINSERT , bulk ) ) ; } 
public FutureLong linsertAfter ( String key , byte [ ] oldvalue , byte [ ] newvalue ) { return linsert ( key , true , oldvalue , newvalue ) ; } 
public FutureLong linsertBefore ( String key , byte [ ] oldvalue , byte [ ] newvalue ) { return linsert ( key , false , oldvalue , newvalue ) ; } 
public FutureLong rpush ( String key , String value ) { } 
public < T extends Serializable > FutureLong rpush ( String key , T value ) { treturn rpush ( key , DefaultCodec . encode ( value ) ) ; } 
public FutureLong lpush ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureLong ( this . queueRequest ( Command . LPUSH , keybytes , value ) ) ; } 
public < T extends Serializable > FutureLong lpush ( String key , T value ) { treturn lpush ( key , DefaultCodec . encode ( value ) ) ; } 
tSort BY ( String pattern ) ; Sort STORE (String destKey);} 
tSort GET ( String pattern ) ; Sort STORE (String destKey);} 
public Sort GET ( String pattern ) { getSpec = Command . Options . GET . name ( ) + WSPAD + pattern + " " ; return this ; } public Sort LIMIT ( long from , long count ) { 
public Sort LIMIT ( long from , long count ) { tif ( from < 0 ) throw new ClientRuntimeException ( " from in LIMIT clause: " + from ) ; tif ( count < = 0 ) throw new ClientRuntimeException ( " count in LIMIT clause: " + from ) ; tlimitSpec = Command . Options . LIMIT . name ( ) + WSPAD + from + " " + count ; treturn this ; } 
tprotected final < FAULT extends RuntimeException > void assertDidRaiseRuntimeError ( Runnable test , Class < FAULT > errtype ) { tboolean didRaiseError = false ; ttry { test . run ( ) ; } tcatch ( RuntimeException ) { 
public void testSort ( ) throws InterruptedException { tcmd = Command . SORT . code ; tLog . log ( " TEST: %s command " , cmd ) ; tfinal String setkey = " set-key " ; tfinal String listkey = " list-key " ; ttry { tprovider . flushdb ( ) ; tfor ( int i = 0 ; i < MEDIUM_CNT ; i + + ) { tprovider . sadd ( setkey , stringList . get ( i ) ) ; tprovider . lpush ( listkey , stringList . get ( i ) ) ; } tint cnt1 = MEDIUM_CNT , cnt2 = 9 , cnt3 = 1 ; tFuture < List < byte [ ] > > sortListResp1 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , cnt1 ) . DESC ( ) . execAsynch ( ) ; tFuture < List < byte [ ] > > sortListResp2 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 10 , cnt2 ) . DESC ( ) . execAsynch ( ) ; tFuture < List < byte [ ] > > sortListResp3 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( MEDIUM_CNT - 1 , cnt3 ) . DESC ( ) . execAsynch ( ) ; tFuture < List < byte [ ] > > sortSetResp = provider . sort ( setkey ) . ALPHA ( ) . LIMIT ( 0 , 555 ) . DESC ( ) . execAsynch ( ) ; ttry { tassertEquals ( sortListResp1 . get ( ) . size ( ) , cnt1 , " expecting sort results of size MEDIUM_CNT " ) ; tassertEquals ( sortListResp2 . get ( ) . size ( ) , cnt2 , " expecting sort results of size 9 " ) ; tassertEquals ( sortListResp3 . get ( ) . size ( ) , cnt3 , " expecting sort results of size 1 " ) ; tLog . log ( " TEST: SORTED LIST " ) ; tfor ( String s : toStr ( sortListResp1 . get ( ) ) ) tSystem . out . format ( " [t.1] %s " , s ) ; tLog . log ( " TEST: SORTED LIST " ) ; tfor ( String s : toStr ( sortListResp2 . get ( ) ) ) tSystem . out . format ( " [t.1] %s " , s ) ; tLog . log ( " TEST: SORTED LIST " ) ; tfor ( String s : toStr ( sortListResp3 . get ( ) ) ) tSystem . out . format ( " [t.1] %s " , s ) ; tLog . log ( " TEST: SORTED SET " ) ; tfor ( String s : toStr ( sortSetResp . get ( ) ) ) tSystem . out . format ( " %s " , s ) ; } tcatch ( ExecutionException e ) { tThrowable cause = e . getCause ( ) ; tfail ( cmd + " ERROR => " + cause . getLocalizedMessage ( ) , e ) ; } } tcatch ( ClientRuntimeException e ) { fail ( cmd + " Runtime ERROR => " + e . getLocalizedMessage ( ) , e ) ; } 
public void run ( ) { ttry { provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , 0 ) . DESC ( ) . exec ( ) ; } catch ( Throwable ) { throw new RuntimeException ( " " , ) ; } 
public void run ( ) { ttry { provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( - 1 , 1 ) . DESC ( ) . exec ( ) ; } catch ( Throwable ) { throw new RuntimeException ( " " , ) ; } 
public void testSort ( ) { tcmd = Command . SORT . code ; tLog . log ( " TEST: %s command " , cmd ) ; tfinal String setkey = " set-key " ; tfinal String listkey = " list-key " ; ttry { tprovider . flushdb ( ) ; tfor ( int i = 0 ; i < MEDIUM_CNT ; i + + ) { tprovider . sadd ( setkey , stringList . get ( i ) ) ; tprovider . lpush ( listkey , stringList . get ( i ) ) ; } tList < String > sorted = null ; tLog . log ( " TEST: SORTED LIST [t.1] " ) ; tsorted = toStr ( provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , MEDIUM_CNT ) . DESC ( ) . exec ( ) ) ; tassertEquals ( sorted . size ( ) , MEDIUM_CNT , " expecting sort results of size MEDIUM_CNT " ) ; tfor ( String s : sorted ) tSystem . out . format ( " [t.1]: %s " , s ) ; tLog . log ( " TEST: SORTED LIST [t.2] " ) ; tsorted = toStr ( provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 10 , 9 ) . DESC ( ) . exec ( ) ) ; tassertEquals ( sorted . size ( ) , 9 , " expecting sort results of size 9 " ) ; tfor ( String s : sorted ) tSystem . out . format ( " [t.2]: %s " , s ) ; tLog . log ( " TEST: SORTED LIST [t.3] " ) ; tsorted = toStr ( provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( MEDIUM_CNT - 1 , 1 ) . DESC ( ) . exec ( ) ) ; tassertEquals ( sorted . size ( ) , 1 , " expecting sort results of size 1 " ) ; tfor ( String s : sorted ) tSystem . out . format ( " [t.3]: %s " , s ) ; tLog . log ( " TEST: SORTED SET " ) ; } 
public Sort ALPHA ( ) { alphaSpec = String . format ( " %s " , Command . Options . ALPHA . name ( ) ) ; return this ; } public Sort DESC ( ) { sortSpec = String . format ( " %s " , Command . Options . DESC . name ( ) ) ; return this ; } 
public Sort DESC ( ) { sortSpec = String . format ( " %s " , Command . Options . DESC . name ( ) ) ; return this ; } public Sort BY ( String pattern ) { bySpec = String . format ( " %s %s " , Command . Options . BY . name ( ) , pattern ) ; return this ; } 
public Sort BY ( String pattern ) { bySpec = String . format ( " %s %s " , Command . Options . BY . name ( ) , pattern ) ; return this ; } public Sort GET ( String pattern ) { getSpec = String . format ( " %s %s " , Command . Options . GET . name ( ) , pattern ) ; return this ; } 
public Sort GET ( String pattern ) { getSpec = String . format ( " %s %s " , Command . Options . GET . name ( ) , pattern ) ; return this ; } public Sort LIMIT ( long from , long count ) { 
public Sort LIMIT ( long from , long count ) { tif ( from < 0 ) throw new ClientRuntimeException ( " from in LIMIT clause: " + from ) ; tif ( count < = 0 ) throw new ClientRuntimeException ( " count in LIMIT clause: " + from ) ; tlimitSpec = String . format ( " %s %d %d " , Command . Options . LIMIT . name ( ) , from , count ) ; treturn this ; } 
public Protocol createProtocol ( Connection . Modality modality , String redisVersionId ) tthrows NotSupportedException , ClientRuntimeException , IllegalArgumentException { } 
public Protocol createProtocolHandler ( Modality modality , String redisVersion ) throws NotSupportedException { treturn null ; } 
private static final void _log ( Category cat , String msg ) { } 
private static final void _loginfo ( String format , Object . . . args ) { } 
public Future < Long > keystolist ( String pattern , String listname ) { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( pattern ) ) = = null ) tthrow new IllegalArgumentException ( " null key. " ) ; tbyte [ ] listnamedata = null ; tif ( ( listnamedata = getKeyBytes ( listname ) ) = = null ) tthrow new IllegalArgumentException ( " null list name. " ) ; treturn new FutureLong ( this . queueRequest ( Command . KEYSTOLIST , keydata , listnamedata ) ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd . requestType ) { tcase NO_ARG : } 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , byte [ ] value ) throws RedisException ; public long append ( String key , String stringValue ) throws RedisException ; public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , String stringValue ) throws RedisException ; public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long del ( String . . . keys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrangeSubset ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrevrangeSubset ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyrank ( String setkey , long minRank , long maxRank ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , byte [ ] value ) ; public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > del ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , byte [ ] member ) ; public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , byte [ ] member ) ; public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrangeSubset ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrevrangeSubset ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , byte [ ] member ) ; public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , String stringValue ) ; public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zincrby ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zincrby ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyscore ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcount ( String setkey , double minScore , double maxScore ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyrank ( String setkey , long minRank , long maxRank ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zremrangebyrank ( String key , long minRank , long maxRank ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minRank ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxRank ) ; treturn new FutureLong ( this . queueRequest ( Command . ZREMRANGEBYRANK , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public String randomkey ( ) throws RedisException { tString stringValue = null ; ttry { tBulkResponse valResponse = ( BulkResponse ) this . serviceRequest ( Command . RANDOMKEY ) ; tbyte [ ] bulkData = valResponse . getBulkData ( ) ; tif ( null ! = bulkData ) { stringValue = new String ( bulkData ) ; } } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn stringValue ; } 
public long zremrangebyrank ( String key , long minRank , long maxRank ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( minRank ) ; tbyte [ ] toBytes = Convert . toBytes ( maxRank ) ; tlong resp = Long . MIN_VALUE ; ttry { tValueResponse valueResponse = ( ValueResponse ) this . serviceRequest ( Command . ZREMRANGEBYRANK , keybytes , fromBytes , toBytes ) ; tresp = valueResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public void testSmembers ( ) { tcmd = Command . SMEMBERS . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; tString setkey = keys . get ( 0 ) ; tfor ( int i = 0 ; i < SMALL_CNT ; i + + ) tassertTrue ( provider . sadd ( setkey , dataList . get ( i ) ) , " sadd of random element should be true " ) ; tList < byte [ ] > members = null ; tmembers = provider . smembers ( setkey ) ; tassertTrue ( members . size ( ) = = SMALL_CNT ) ; provider.flushdb(); 
public boolean supports ( ClusterType type ) ; abstract protected void initializeModel();}} 
public boolean supportsReconfiguration ( ) ; abstract protected void initializeModel();}} 
public ClusterSpec getSpec ( ) ; abstract protected void initializeModel();}} 
public void addNode ( ClusterNodeSpec nodeSpec ) throws IllegalArgumentException ; abstract protected void initializeModel();}} 
public void removeNode ( ClusterNodeSpec nodeSpec ) throws IllegalArgumentException ; }} 
public ClusterNodeSpec getNodeForKey ( byte [ ] key ) ; }} 
public boolean addListener ( Listener modelListener ) ; abstract protected void initializeModel();}} 
public boolean removeListener ( Listener modelListener ) ; }} 
public void onEvent ( ClusterModel . Event event ) ; } }} 
tfinal public void addNode ( ClusterNodeSpec nodeSpec ) tthrows IllegalArgumentException { tif ( supportsReconfiguration ( ) ) { tsynchronized ( configLock ) { 
tfinal public void removeNode ( ClusterNodeSpec nodeSpec ) throws IllegalArgumentException { tif ( supportsReconfiguration ( ) ) { tif ( ! clusterSpec . getNodeSpecs ( ) . contains ( nodeSpec ) ) throw new IllegalArgumentException ( " NodeSpec not part of cluster spec! " ) ; 
tabstract protected boolean onNodeAddition ( ClusterNodeSpec newNode ) ; tabstract protected void initializeModel ( ) ; } } 
tabstract protected boolean onNodeRemoval ( ClusterNodeSpec newNode ) ; tabstract protected void initializeModel ( ) ; } } 
public ConnectionSpec getConnectionSpec ( ) ; protected abstract String generateId () ;}} 
public String getId ( ) ; protected abstract String generateId () ;}} 
public String getKeyForReplicationInstance ( int rangeReplicationIndex ) ; }} 
final public boolean equals ( Object o ) { tif ( null = = o ) throw new IllegalArgumentException ( " null argument " ) ; tClusterNodeSpec = null ; ttry { = ( ClusterNodeSpec ) o ; } tcatch ( ClassCastException e ) { throw new IllegalArgumentException ( " object is not a ClusterNodeSpec " ) ; } treturn this . getId ( ) . equals ( . getId ( ) ) ; } 
public boolean addAll ( Collection < ClusterNodeSpec > nodes ) { tif ( nodes . contains ( null ) ) throw new IllegalArgumentException ( " collection includes a null member " ) ; treturn nodeSpecs . addAll ( nodes ) ; } 
public boolean removeAll ( Collection < ClusterNodeSpec > nodes ) { tif ( nodes . contains ( null ) ) throw new IllegalArgumentException ( " collection includes a null member " ) ; treturn nodeSpecs . removeAll ( nodes ) ; } 
public boolean addNode ( ClusterNodeSpec nodeSpec ) { tif ( null = = nodeSpec ) tthrow new IllegalArgumentException ( " null nodeSpec " ) ; treturn this . nodeSpecs . add ( nodeSpec ) ; } 
public boolean removeNode ( ClusterNodeSpec nodeSpec ) { tif ( null = = nodeSpec ) tthrow new IllegalArgumentException ( " null nodeSpec " ) ; treturn nodeSpecs . remove ( nodeSpec ) ; } 
final public Set < ClusterNodeSpec > getNodeSpecs ( ) { tSet < ClusterNodeSpec > set = new HashSet < ClusterNodeSpec > ( nodeSpecs . size ( ) ) ; tfor ( ClusterNodeSpec spec : nodeSpecs ) tset . add ( spec ) ; return set ; } 
public ClusterSpec getClusterSpec ( ) ; public Collection < Command > getSupportedCommands ( ) ; } 
public ClusterModel getClusterModel ( ) ; public Collection < Command > getSupportedCommands ( ) ; } 
public boolean supports ( Command cmd ) ; public Collection < Command > getSupportedCommands ( ) ; } 
tNodeMap getNodeMap ( ) ; }} 
abstract protected NodeMap newClusterNodeMap ( ) ; final public boolean supports (ClusterType type) { return type == ClusterType.CONSISTENT_HASH; }}} 
abstract protected void mapNodes ( ) ; final public boolean supports (ClusterType type) { return type == ClusterType.CONSISTENT_HASH; }}} 
abstract protected int replicationCount ( ) ; final public boolean supports (ClusterType type) { return type == ClusterType.CONSISTENT_HASH; }}} 
abstract protected void initializeComponents ( ) ; }} 
final protected void initializeModel ( ) { tinitializeComponents ( ) ; mapNodes(); } 
protected boolean onNodeAddition ( ClusterNodeSpec newNode ) { tthrow new RuntimeException ( " not implemented " ) ; } 
protected boolean onNodeRemoval ( ClusterNodeSpec newNode ) { tthrow new RuntimeException ( " not implemented " ) ; } 
abstract protected HashAlgorithm newHashAlgorithm ( ) ; }} 
final protected void initializeModel ( ) { thashAlgo = newHashAlgorithm ( ) ; tSet < ClusterNodeSpec > nodeSpecs = clusterSpec . getNodeSpecs ( ) ; tnodeCnt = nodeSpecs . size ( ) ; tnodes = new ClusterNodeSpec [ nodeCnt ] ; tnodes = nodeSpecs . toArray ( nodes ) ; } 
final protected boolean onNodeAddition ( ClusterNodeSpec newNode ) { tthrow new NotSupportedException ( " node addition " ) ; } 
final protected boolean onNodeRemoval ( ClusterNodeSpec newNode ) { tthrow new NotSupportedException ( " nodeRemoval " ) ; } 
protected String generateId ( ) { tFormatter fmt = new Formatter ( ) ; tfmt . format ( " %s:%05d " , tthis . connSpec . getAddress ( ) . getHostAddress ( ) , tthis . connSpec . getPort ( ) ) ; treturn fmt . toString ( ) ; } 
public String getKeyForReplicationInstance ( int rangeReplicationIndex ) { tFormatter fmt = new Formatter ( ) ; tfmt . format ( " %s[%d] " , this . id , rangeReplicationIndex ) ; treturn fmt . toString ( ) ; } 
public static ClusterSpec newSpecForRange ( ConnectionSpec templateConnSpec , int firstPort , int lastPort ) { tClusterSpec spec = new DefaultClusterSpec ( ) ; tfor ( int i = firstPort ; i < = lastPort ; i + + ) { tConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( ) . setAddress ( templateConnSpec . getAddress ( ) ) . setPort ( i ) . setDatabase ( templateConnSpec . getDatabase ( ) ) . setCredentials ( templateConnSpec . getCredentials ( ) ) ; tClusterNodeSpec nodeSpec = new DefaultClusterNodeSpec ( connSpec ) ; tspec . addNode ( nodeSpec ) ; } treturn spec ; } 
tfinal public ConnectionSpec getSpec ( ) { tthrow new NotSupportedException ( " Per specification -- see org.jredis.cluster.ClusterConnection's specification. " ) ; } 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { tbyte [ ] key = verifyAndGetKeyForRequest ( cmd , args ) ; treturn getConnectionForKey ( key ) . queueRequest ( cmd , args ) ; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException { tbyte [ ] key = verifyAndGetKeyForRequest ( cmd , args ) ; treturn getConnectionForKey ( key ) . serviceRequest ( cmd , args ) ; } 
public void onEvent ( Connection . Event event ) { tConnection conn = event . getSource ( ) ; tif ( ! connections . containsKey ( conn ) ) { tthrow new ProviderException ( " ClusterConnection receiving events for unrelated connection! " ) ; } } 
tfinal private byte [ ] verifyAndGetKeyForRequest ( Command cmd , byte [ ] . . . args ) { tnotNull ( args , " [BUG]: args for request is null! " , ProviderException . class ) ; tisTrue ( args . length > 0 , " [BUG]: expecting at least 1 arg for the request (and a key at that) " , ProviderException . class ) ; tisTrue ( supports ( cmd ) , cmd . name ( ) + " is not supported " , NotSupportedException . class ) ; treturn args [ 0 ] ; 
tfinal protected void initialize ( ) throws ClientRuntimeException , ProviderException { tmapSupportedCommands ( ) ; tinitializeConnections ( ) ; tinitializeComponents ( ) ; } 
tfinal private void mapSupportedCommands ( ) { switch (cmd.requestType){ 
tabstract protected void initializeComponents ( ) ; protected Connection createSynchConnection ( ClusterNodeSpec nodeSpec ) { tthrow new ProviderException ( " Not implemented in the abstract base! " ) ; } } 
protected Connection createAsynchConnection ( ClusterNodeSpec nodeSpec ) { tthrow new ProviderException ( " Not implemented in the abstract base! " ) ; } 
protected Connection createSynchConnection ( ClusterNodeSpec nodeSpec ) { tthrow new ProviderException ( " Not implemented in the abstract base! " ) ; } 
tprotected void initializeComponents ( ) { } 
tfinal public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException { tthrow new NotSupportedException ( " Not supported by abstract base class " ) ; } 
protected Connection createSynchConnection ( ClusterNodeSpec nodeSpec ) { tConnection conn = null ; tconn = new SynchConnection ( nodeSpec . getConnectionSpec ( ) , true ) ; treturn conn ; } 
protected HashAlgorithm newHashAlgorithm ( ) { public long hash (byte[] kb) { 
public ClusterNodeSpec getNodeForKey ( byte [ ] key ) { int nodeIdx = ( int ) ( hashAlgo . hash ( key ) % nodeCnt ) ; return nodes [ nodeIdx ] ; } 
public ClusterNodeSpec getNodeForKey ( byte [ ] key ) { tlong hash = hashAlgo . hash ( key ) ; tfinal ClusterNodeSpec rv ; tif ( ! nodeMap . containsKey ( hash ) ) { } 
final protected int replicationCount ( ) { tint nodeCnt = clusterSpec . getNodeSpecs ( ) . size ( ) ; treturn ( int ) ( Math . log ( nodeCnt ) * DEFAULT_REPLICATION_CONST ) ; } 
final protected void initializeComponents ( ) { hashAlgo = new KetamaHashProvider(); } 
private boolean mapNode ( ClusterNodeSpec node ) { } 
protected boolean onNodeAddition ( ClusterNodeSpec newNode ) { tthrow new ProviderException ( " [BUG] basic KetamaClusterModel does NOT support reconfiguration of nodes " ) ; } 
protected boolean onNodeRemoval ( ClusterNodeSpec newNode ) { tthrow new ProviderException ( " [BUG] basic KetamaClusterModel does NOT support reconfiguration of nodes " ) ; } 
public long hash ( byte [ ] b ) { tif ( null = = b | | b . length = = 0 ) throw new IllegalArgumentException ( ) ; treturn rv ; } 
public static byte [ ] computeMd5 ( byte [ ] b ) throws ClientRuntimeException { tif ( null = = b ) throw new IllegalArgumentException ( " null input " ) ; tif ( b . length = = 0 ) throw new IllegalArgumentException ( " zero length input " ) ; tMessageDigest md5 = null ; ttry { md5 = MessageDigest . getInstance ( " MD5 " ) ; tmd5 . reset ( ) ; tmd5 . update ( b ) ; } catch ( NoSuchAlgorithmException e ) { tthrow new ClientRuntimeException ( " MD5 Message Digest algorithm is not present in this JRE " , e ) ; } treturn md5 . digest ( ) ; } 
public static byte [ ] computeMd5 ( String s ) throws ClientRuntimeException { tif ( null = = s ) throw new IllegalArgumentException ( " null input " ) ; treturn computeMd5 ( s . getBytes ( ) ) ; } 
public void metaTest ( ) { tLog . log ( " [META] test the test suite assumptions! " ) ; tClusterType clusterType = getSupportedClusterType ( ) ; tassertNotNull ( clusterType , " getSupportedClusterType " ) ; tClusterSpec testSpec = newClusterSpec ( ) ; tassertNotNull ( testSpec , " newClusterSpec should not return null " ) ; tassertEquals ( testSpec . getType ( ) , clusterType , " asserted supported cluster type and type from the newClusterSpec should be the same " ) ; tClusterModel model = newProviderInstance ( ) ; tassertNotNull ( model , " newProviderInstance should not return null " ) ; } 
public void testClusterSpecPropertyOps ( ) { tLog . log ( " test ClusterSpec accessors " ) ; } 
protected abstract ClusterNodeSpec newProviderInstance ( ConnectionSpec connectionSpec ) ; }} 
public void testIdentityContract ( ) { tLog . log ( " Testing ClusterNodeSpec identity contract enforcement: [Object.equals() | Object.hashCode()] " ) ; tint db = 10 ; tint anotherDb = 2 ; tConnectionSpec node1Spec = DefaultConnectionSpec . newSpec ( " 127.0.0.1 " , 6379 , db , null ) ; tConnectionSpec node2Spec = DefaultConnectionSpec . newSpec ( " 127.0.0.1 " , 6379 , db , null ) ; tConnectionSpec node3Spec = DefaultConnectionSpec . newSpec ( " 127.0.0.1 " , 6379 , anotherDb , null ) ; tClusterNodeSpec node1 = newProviderInstance ( node1Spec ) ; tClusterNodeSpec node2 = newProviderInstance ( node2Spec ) ; tClusterNodeSpec node3 = newProviderInstance ( node3Spec ) ; tassertTrue ( node1 . getId ( ) . equals ( node2 . getId ( ) ) , " ids should be identical " ) ; tassertTrue ( node1 . hashCode ( ) = = node2 . hashCode ( ) , " hashCodes should be equal " ) ; tassertTrue ( node1 . equals ( node2 ) , " nodes must be considered equivalent " ) ; tassertTrue ( node2 . equals ( node1 ) , " nodes must be considered equivalent [transitive test] " ) ; } 
public void testIdGeneration ( ) { tLog . log ( " Testing ClusterNodeSpec.getId() ... " ) ; tSet < String > generatedIdSet = new HashSet < String > ( data . connSpecs . length ) ; tLog . log ( " ... testing a cluster with member cnt: " + data . connSpecs . length ) ; tfor ( ConnectionSpec connSpec : data . connSpecs ) { tClusterNodeSpec nodeSpec = newProviderInstance ( connSpec ) ; 
public void testGetKeyForCHRangeInstance ( ) { tint instanceCnt = 100 ; tint nodeCnt = 100 ; tLog . log ( " Testing CHRange key uqniueness for " + instanceCnt + " instances in the ring... this will take a while! (TODO: cnt should be a parameter!) " ) ; tSet < String > chRangeKeys = new HashSet < String > ( nodeCnt * instanceCnt ) ; tint = 0 ; tfor ( ConnectionSpec connSpec : data . connSpecs ) { tClusterNodeSpec nodeSpec = newProviderInstance ( connSpec ) ; 
protected abstract ClusterNodeSpec newNodeSpec ( ConnectionSpec connectionSpec ) ; }} 
public void testGetType ( ) { tLog . log ( " Testing ClusterSpec.getType() " ) ; tassertNotNull ( provider . getType ( ) , " getType() must never return null " ) ; } 
public void testSetType ( ) { tLog . log ( " Testing ClusterSpec.setType() " ) ; } 
public void testAddAndRemoveAll ( ) { tLog . log ( " Testing ClusterSpec addAll() | removeAll() " ) ; tClusterSpec clusterSpec = newProviderInstance ( ) ; tLog . log ( " Test with cluster spec with %d node specs .. " , clusterSpec . getNodeSpecs ( ) . size ( ) ) ; tCollection < ClusterNodeSpec > nodes = new HashSet < ClusterNodeSpec > ( ) ; tfor ( int i = 0 ; i < 10 ; i + + ) { tnodes . add ( newNodeSpec ( data . connSpecs [ i ] ) ) ; } tassertTrue ( clusterSpec . addAll ( nodes ) , " addAll should return true " ) ; tassertFalse ( clusterSpec . addAll ( nodes ) , " dup addAll should return false " ) ; tassertTrue ( clusterSpec . removeAll ( nodes ) , " removeAll should return true " ) ; tassertFalse ( clusterSpec . removeAll ( nodes ) , " second removeAll should return false " ) ; 
public void testRemoveNodeSpec ( ) { tLog . log ( " Testing ClusterSpec.addNodeSpec() " ) ; tClusterSpec clusterSpec = newProviderInstance ( ) ; tfor ( int i = 0 ; i < 10 ; i + + ) { tClusterNodeSpec nodeSpec = newNodeSpec ( data . connSpecs [ i ] ) ; tassertTrue ( clusterSpec . addNode ( nodeSpec ) ) ; } tfor ( int i = 0 ; i < 10 ; i + + ) { tClusterNodeSpec nodeSpec = newNodeSpec ( data . connSpecs [ i ] ) ; 
public void testAddNodeSpec ( ) { tLog . log ( " Testing ClusterSpec.addNodeSpec() " ) ; tClusterSpec clusterSpec = newProviderInstance ( ) ; tClusterNodeSpec nodeSpec = null ; tnodeSpec = newNodeSpec ( data . connSpecs [ 0 ] ) ; tassertTrue ( clusterSpec . addNode ( nodeSpec ) ) ; tnodeSpec = newNodeSpec ( data . connSpecs [ 1 ] ) ; tassertTrue ( clusterSpec . addNode ( nodeSpec ) ) ; } 
private final void testChainedResult ( ClusterSpec res , ClusterSpec expected ) { tassertNotNull ( res , " fluent interface setters must return non null values " ) ; tassertEquals ( res , expected , " setter result must be the same reference as the original " ) ; } 
tstatic public String getRandomAsciiString ( int length ) { tStringBuilder builder = new StringBuilder ( length ) ; tfor ( int i = 0 ; i < length ; i + + ) { tchar c = ( char ) ( random . nextInt ( 126 - 33 ) + 33 ) ; tbuilder . append ( c ) ; } treturn builder . toString ( ) ; } 
tstatic public String getRandomIPv$HostName ( ) { tFormatter fmt = new Formatter ( ) ; tfmt . format ( " %d.%d.%d.%d " , trandom . nextInt ( 255 ) , trandom . nextInt ( 255 ) , trandom . nextInt ( 255 ) , trandom . nextInt ( 255 ) ) ; treturn fmt . toString ( ) ; } 
tstatic public InetAddress getInetAddressFor ( String hostName ) { tInetAddress address = null ; ttry { taddress = InetAddress . getByName ( hostName ) ; } tcatch ( UnknownHostException e ) { tfail ( " In suite setup for random address < " + hostName + " > " , e ) ; } treturn address ; } 
tstatic public ConnectionSpec getConnectionSpecFor ( InetAddress address , int port , int db ) { tConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( ) . setAddress ( address ) . setPort ( port ) . setDatabase ( db ) ; treturn connSpec ; } 
tprotected abstract T newProviderInstance ( ) ; tprotected abstract Class < ? > getSpecificationClass ( ) ; } 
public void suiteParametersInit ( } 
tprotected ClusterModel newClusterModel ( ClusterSpec clusterSpec ) { tClusterModel model = null ; ttry { tmodel = new BasicStaticHashCluster ( clusterSpec ) ; } tcatch ( RuntimeException e ) { tLog . error ( " NOTE: propagating error > " + e . getLocalizedMessage ( ) ) ; tthrow e ; } treturn model ; } 
tprotected ClusterSpec newClusterSpec ( ) { tClusterSpec spec = new DefaultClusterSpec ( ) ; tfor ( int i = 0 ; i < 100 ; i + + ) { tClusterNodeSpec node = new DefaultClusterNodeSpec ( DefaultConnectionSpec . newSpec ( " localhost " , 6379 + i , 0 , null ) ) ; tspec . addNode ( node ) ; } treturn spec ; } 
public void compatibilityTest ( ) { tLog . log ( " Test provider support for Consistent Hashing " ) ; tassertNotNull ( provider , " provider is null! " ) ; tassertTrue ( provider . supports ( ClusterType . CONSISTENT_HASH ) , " A ConsistentHashCluster model must support Type.CONSISTENT_HASH " ) ; } 
tprotected ClusterModel newClusterModel ( ClusterSpec clusterSpec ) { tClusterModel model = null ; ttry { tmodel = new KetamaClusterModel ( clusterSpec ) ; } tcatch ( RuntimeException e ) { tLog . error ( " NOTE: propagating error > " + e . getLocalizedMessage ( ) ) ; tthrow e ; } treturn model ; } 
public void compatibilityTest ( ) { tLog . log ( " Test provider conformance to static hashing requirements " ) ; tassertNotNull ( provider , " provider is null! " ) ; if(!didRaiseEx) { fail("Provider failed to raise exception for removeNode()");} 
public void testStaticHash ( ) { tLog . log ( " Basic nodemap test of Consistent Hashing cluster model " ) ; tStaticHashCluster model = ( StaticHashCluster ) newProviderInstance ( ) ; tassertNotNull ( model , " model should not be null " ) ; tClusterSpec spec = model . getSpec ( ) ; tassertNotNull ( spec , " spec should not be null " ) ; } 
public void testHashByteArray ( ) { tLog . log ( " Testing HashAlgorithm hash(byte[]) " ) ; tHashAlgorithm hashAlgo = newProviderInstance ( ) ; ttry { int c = 2000 ; 
final protected ClusterNodeSpec newProviderInstance ( ) { return new DefaultClusterNodeSpec ( DefaultConnectionSpec . newSpec ( ) ) ; } 
final protected ClusterNodeSpec newProviderInstance ( ConnectionSpec connectionSpec ) { return new DefaultClusterNodeSpec ( connectionSpec ) ; } 
protected ClusterNodeSpec newNodeSpec ( ConnectionSpec connectionSpec ) { return new DefaultClusterNodeSpec ( connectionSpec ) ; } 
public void testComputeMd5 ( ) { tLog . log ( " Testing Crptographic function computeMd5(byte[]) " ) ; ttry { tbyte [ ] data1 = data . getRandomBytes ( 255 ) ; 
public long onMeasure ( long delta ) { tavg = ( ( avg * ) + delta ) / ( + + ) ; tif ( delta > max ) max = delta ; tif ( delta < min ) min = delta ; treturn ( long ) avg ; } 
tprotected final InputStream newInputStream ( InputStream socketInputStream ) throws IllegalArgumentException { tInputStream in = super . newInputStream ( socketInputStream ) ; tif ( ! ( in instanceof FastBufferedInputStream ) ) { tLog . log ( String . format ( " WARN: input was: %s " , in . getClass ( ) . getCanonicalName ( ) ) ) ; tin = new FastBufferedInputStream ( in , spec . getSocketProperty ( SocketProperty . SO_RCVBUF ) ) ; } treturn in ; } 
public static final < T extends Serializable > byte [ ] encode ( T obj ) { tbyte [ ] bytes = null ; ttry { tByteArrayOutputStream bout = new ByteArrayOutputStream ( ) ; tObjectOutputStream out = new ObjectOutputStream ( bout ) ; tout . writeObject ( obj ) ; tbytes = bout . toByteArray ( ) ; } tcatch ( IOException e ) { te . printStackTrace ( ) ; tthrow new RuntimeException ( " Error serializing object " + obj + " => " + e ) ; } treturn bytes ; } 
private final int getMoreBytes ( int len ) throws IOException { } 
public static final void log ( String msg ) { log ( msg , ( Object [ ] ) null ) ; } public static final void log ( String format , Object . . . args ) { 
public static final void debug ( String msg ) { debug ( msg , ( Object [ ] ) null ) ; } public static final void debug ( String format , Object . . . args ) { 
public static final void error ( String msg ) { _error ( Category . ERROR , msg ) ; } public static final void error ( String msg , Object . . . args ) { _error ( Category . ERROR , msg , args ) ; } 
public static final void problem ( String msg ) { _error ( Category . PROBLEM , msg ) ; } public static final void problem ( String msg , Object . . . args ) { _error ( Category . PROBLEM , msg , args ) ; } 
public static final void bug ( String msg ) { _error ( Category . BUG , msg ) ; } public static final void bug ( String msg , Object . . . args ) { _error ( Category . BUG , msg , args ) ; } 
private static final void _error ( Category cat , String msg , Object . . . args ) { tmsg = String . format ( msg , args ) ; tif ( cat . equals ( Category . ERROR ) ) tlogger . error ( String . format ( " %s " , msg ) ) ; 
public List < byte [ ] > exec ( ) throws IllegalStateException , RedisException ; public Future < List < byte [ ] > > execAsynch ( ) ; public static class Support { public static long unpackValue ( List < byte [ ] > queryResult ) { tif ( null = = queryResult ) throw new ClientRuntimeException ( " queryResult is null " ) ; tif ( queryResult . size ( ) < 1 ) throw new ClientRuntimeException ( " queryResult must have at least 1 entry " ) ; treturn Long . parseLong ( new String ( queryResult . get ( 0 ) ) ) ; } } } 
public Future < List < byte [ ] > > execAsynch ( ) ; public static class Support { public static long unpackValue ( List < byte [ ] > queryResult ) { tif ( null = = queryResult ) throw new ClientRuntimeException ( " queryResult is null " ) ; tif ( queryResult . size ( ) < 1 ) throw new ClientRuntimeException ( " queryResult must have at least 1 entry " ) ; treturn Long . parseLong ( new String ( queryResult . get ( 0 ) ) ) ; } } } 
public static long unpackValue ( List < byte [ ] > queryResult ) { tif ( null = = queryResult ) throw new ClientRuntimeException ( " queryResult is null " ) ; tif ( queryResult . size ( ) < 1 ) throw new ClientRuntimeException ( " queryResult must have at least 1 entry " ) ; treturn Long . parseLong ( new String ( queryResult . get ( 0 ) ) ) ; } 
tSort BY ( String pattern ) ; tSort STORE ( String destKey ) ; } 
tSort GET ( String pattern ) ; tSort STORE ( String destKey ) ; } 
tSort LIMIT ( long from , long count ) ; tSort STORE ( String destKey ) ; } 
tSort DESC ( ) ; tSort STORE ( String destKey ) ; } 
tSort ALPHA ( ) ; tSort STORE ( String destKey ) ; } 
public Sort sort ( final String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisFutureSupport client = this ; tSort sortQuery = new SortSupport ( key , keybytes ) { } 
tprotected Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) { tFuture < Response > fResp = client . queueRequest ( Command . SORT$STORE , keyBytes , sortSpecBytes ) ; tnew FutureLong ( fResp ) ; treturn new FutureSortStoreResp ( fResp ) ; } 
tprotected List < byte [ ] > execSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) { tthrow new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } 
public List < byte [ ] > get ( ) throws InterruptedException , ExecutionException { tValueResponse resp = ( ValueResponse ) pendingRequest . get ( ) ; treturn packValueResult ( resp . getLongValue ( ) ) ; } 
public List < byte [ ] > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse resp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn packValueResult ( resp . getLongValue ( ) ) ; } 
private static List < byte [ ] > packValueResult ( long number ) { tList < byte [ ] > list = new ArrayList < byte [ ] > ( 1 ) ; tlist . add ( Convert . toBytes ( number ) ) ; treturn list ; } 
public Sort sort ( final String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisSupport client = this ; tSort sortQuery = new SortSupport ( key , keybytes ) { } 
tprotected List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) tthrows IllegalStateException , RedisException { tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) client . serviceRequest ( Command . SORT , keyBytes , sortSpecBytes ) ; tmultiBulkData = multiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
tprotected List < byte [ ] > execSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) tthrows IllegalStateException , RedisException { tList < byte [ ] > multiBulkData = new ArrayList < byte [ ] > ( 1 ) ; ttry { tValueResponse valueResp = ( ValueResponse ) client . serviceRequest ( Command . SORT$STORE , keyBytes , sortSpecBytes ) ; tlong resSize = valueResp . getLongValue ( ) ; tmultiBulkData . add ( Convert . toBytes ( resSize ) ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
 protected Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) { tthrow new IllegalStateException ( " JRedis does not support asynchronous sort. " ) ; } 
public Sort ALPHA ( ) { alphaSpec = String . format ( " %s%s " , Command . Options . ALPHA . name ( ) , PAD ) ; return this ; } public Sort DESC ( ) { sortSpec = String . format ( " %s%s " , Command . Options . DESC . name ( ) , PAD ) ; return this ; } 
public Sort DESC ( ) { sortSpec = String . format ( " %s%s " , Command . Options . DESC . name ( ) , PAD ) ; return this ; } public Sort BY ( String pattern ) { bySpec = String . format ( " %s %s%s " , Command . Options . BY . name ( ) , pattern , PAD ) ; return this ; } 
public Sort BY ( String pattern ) { bySpec = String . format ( " %s %s%s " , Command . Options . BY . name ( ) , pattern , PAD ) ; return this ; } public Sort GET ( String pattern ) { getSpec = String . format ( " %s %s%s " , Command . Options . GET . name ( ) , pattern , PAD ) ; return this ; } 
public Sort GET ( String pattern ) { getSpec = String . format ( " %s %s%s " , Command . Options . GET . name ( ) , pattern , PAD ) ; return this ; } public Sort LIMIT ( long from , long count ) { 
public Sort LIMIT ( long from , long count ) { tif ( from < 0 ) throw new ClientRuntimeException ( " from in LIMIT clause: " + from ) ; tif ( count < = 0 ) throw new ClientRuntimeException ( " count in LIMIT clause: " + from ) ; tlimitSpec = String . format ( " %s %d %d%s " , Command . Options . LIMIT . name ( ) , from , count , PAD ) ; treturn this ; } 
public Sort STORE ( String destKey ) { tAssert . notNull ( destKey , " deskKey is null " , ClientRuntimeException . class ) ; } 
public List < byte [ ] > exec ( ) throws IllegalStateException , RedisException { tSystem . out . format ( " sort spec: [%S] " , new String ( getSortSpec ( ) ) ) ; tList < byte [ ] > res = null ; tif ( ! stores ) tres = execSort ( keyBytes , getSortSpec ( ) ) ; telse tres = execSortStore ( keyBytes , getSortSpec ( ) ) ; treturn res ; } 
public Future < List < byte [ ] > > execAsynch ( ) { tSystem . out . format ( " sort spec: [%S] " , new String ( getSortSpec ( ) ) ) ; tFuture < List < byte [ ] > > res = null ; tif ( ! stores ) tres = execAsynchSort ( keyBytes , getSortSpec ( ) ) ; telse tres = execAsynchSortStore ( keyBytes , getSortSpec ( ) ) ; treturn res ; } 
tprotected abstract List < byte [ ] > execSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) throws IllegalStateException , RedisException ; tprotected abstract List < byte [ ] > execSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) throws IllegalStateException , RedisException ; tprotected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; tprotected abstract Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; } 
tprotected abstract List < byte [ ] > execSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) throws IllegalStateException , RedisException ; tprotected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; tprotected abstract Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; } 
tprotected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; tprotected abstract Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] keyBytes , byte [ ] sortSpecBytes ) ; } 
public void testSort ( ) throws InterruptedException { tcmd = Command . SORT . code ; tLog . log ( " TEST: %s command " , cmd ) ; tfinal String setkey = " set-key " ; tfinal String listkey = " list-key " ; ttry { tprovider . flushdb ( ) ; tfor ( int i = 0 ; i < MEDIUM_CNT ; i + + ) { tprovider . sadd ( setkey , stringList . get ( i ) ) ; tprovider . lpush ( listkey , stringList . get ( i ) ) ; } tint cnt1 = MEDIUM_CNT , cnt2 = 9 , cnt3 = 1 ; tFuture < List < byte [ ] > > sortListResp1 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , cnt1 ) . DESC ( ) . execAsynch ( ) ; tFuture < List < byte [ ] > > sortListResp2 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 10 , cnt2 ) . DESC ( ) . execAsynch ( ) ; tFuture < List < byte [ ] > > sortListResp3 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( MEDIUM_CNT - 1 , cnt3 ) . DESC ( ) . execAsynch ( ) ; tFuture < List < byte [ ] > > sortSetResp = provider . sort ( setkey ) . ALPHA ( ) . LIMIT ( 0 , 555 ) . DESC ( ) . execAsynch ( ) ; ttry { tassertEquals ( sortListResp1 . get ( ) . size ( ) , cnt1 , " expecting sort results of size MEDIUM_CNT " ) ; tassertEquals ( sortListResp2 . get ( ) . size ( ) , cnt2 , " expecting sort results of size 9 " ) ; tassertEquals ( sortListResp3 . get ( ) . size ( ) , cnt3 , " expecting sort results of size 1 " ) ; tLog . log ( " TEST: SORTED LIST " ) ; tfor ( String s : toStr ( sortListResp1 . get ( ) ) ) tSystem . out . format ( " [t.1] %s " , s ) ; tLog . log ( " TEST: SORTED LIST " ) ; tfor ( String s : toStr ( sortListResp2 . get ( ) ) ) tSystem . out . format ( " [t.1] %s " , s ) ; tLog . log ( " TEST: SORTED LIST " ) ; tfor ( String s : toStr ( sortListResp3 . get ( ) ) ) tSystem . out . format ( " [t.1] %s " , s ) ; tLog . log ( " TEST: SORTED SET " ) ; tfor ( String s : toStr ( sortSetResp . get ( ) ) ) tSystem . out . format ( " %s " , s ) ; tString destKey = String . format ( " %s_store " , listkey ) ; tList < byte [ ] > ssres = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , MEDIUM_CNT ) . DESC ( ) . STORE ( destKey ) . execAsynch ( ) . get ( ) ; tassertNotNull ( ssres , " result of srot with STORE should be non-null " ) ; tassertEquals ( ssres . size ( ) , 1 , " result of sort with STORE should be a list of single entry (the stored list's size) " ) ; tlong sortedListSize = Query . Support . unpackValue ( ssres ) ; tassertEquals ( sortedListSize , MEDIUM_CNT ) ; tRedisType type = provider . type ( destKey ) . get ( ) ; tassertEquals ( type , RedisType . list , " dest key of SORT .. STORE should be a LIST " ) ; tlong sslistSize = provider . llen ( destKey ) . get ( ) ; tassertEquals ( sslistSize , sortedListSize , " result of SORT ... STORE and LLEN of destkey list should be same " ) ; } tcatch ( ExecutionException e ) { tThrowable cause = e . getCause ( ) ; tfail ( cmd + " ERROR => " + cause . getLocalizedMessage ( ) , e ) ; } } tcatch ( ClientRuntimeException e ) { fail ( cmd + " Runtime ERROR => " + e . getLocalizedMessage ( ) , e ) ; } 
public void testSort ( ) { tcmd = Command . SORT . code ; tLog . log ( " TEST: %s command " , cmd ) ; tfinal String setkey = " set-key " ; tfinal String listkey = " list-key " ; ttry { tprovider . flushdb ( ) ; tfor ( int i = 0 ; i < MEDIUM_CNT ; i + + ) { tprovider . sadd ( setkey , stringList . get ( i ) ) ; tprovider . lpush ( listkey , stringList . get ( i ) ) ; } tList < String > sorted = null ; tLog . log ( " TEST: SORTED LIST [t.1] " ) ; tsorted = toStr ( provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , MEDIUM_CNT ) . DESC ( ) . exec ( ) ) ; tassertEquals ( sorted . size ( ) , MEDIUM_CNT , " expecting sort results of size MEDIUM_CNT " ) ; tfor ( String s : sorted ) tSystem . out . format ( " [t.1]: %s " , s ) ; tString destKey = String . format ( " %s_store " , listkey ) ; tList < byte [ ] > ssres = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , MEDIUM_CNT ) . DESC ( ) . STORE ( destKey ) . exec ( ) ; tassertNotNull ( ssres , " result of srot with STORE should be non-null " ) ; tassertEquals ( ssres . size ( ) , 1 , " result of sort with STORE should be a list of single entry (the stored list's size) " ) ; tlong sortedListSize = Query . Support . unpackValue ( ssres ) ; tassertEquals ( sortedListSize , MEDIUM_CNT ) ; tRedisType type = provider . type ( destKey ) ; tassertEquals ( type , RedisType . list , " dest key of SORT .. STORE should be a LIST " ) ; tlong sslistSize = provider . llen ( destKey ) ; tassertEquals ( sslistSize , sortedListSize , " result of SORT ... STORE and LLEN of destkey list should be same " ) ; tLog . log ( " TEST: SORTED LIST [t.2] " ) ; tsorted = toStr ( provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 10 , 9 ) . DESC ( ) . exec ( ) ) ; tassertEquals ( sorted . size ( ) , 9 , " expecting sort results of size 9 " ) ; tfor ( String s : sorted ) tSystem . out . format ( " [t.2]: %s " , s ) ; tLog . log ( " TEST: SORTED LIST [t.3] " ) ; tsorted = toStr ( provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( MEDIUM_CNT - 1 , 1 ) . DESC ( ) . exec ( ) ) ; tassertEquals ( sorted . size ( ) , 1 , " expecting sort results of size 1 " ) ; tfor ( String s : sorted ) tSystem . out . format ( " [t.3]: %s " , s ) ; tLog . log ( " TEST: SORTED SET " ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd . requestType ) { tcase NO_ARG : } 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , byte [ ] value ) throws RedisException ; public long append ( String key , String stringValue ) throws RedisException ; public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , String stringValue ) throws RedisException ; public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long del ( String . . . keys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrangeSubset ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Future < ResponseStatus > ping ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > quit ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , byte [ ] value ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , String stringValue ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > set ( String key , Number numberValue ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > set ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , byte [ ] value ) ; public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , String stringValue ) ; public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > setnx ( String key , Number numberValue ) ; public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > setnx ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > get ( String key ) ; public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , byte [ ] value ) ; public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , String stringValue ) ; public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > getset ( String key , Number numberValue ) ; public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > mget ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > incrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decr ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > decrby ( String key , int delta ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > substr ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , byte [ ] value ) ; public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , String stringValue ) ; public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > append ( String key , Number numberValue ) ; public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > Future < Long > append ( String key , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > exists ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > del ( String . . . keys ) ; public Future<ObjectInfo> debug (String key);} 
public Future < RedisType > type ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( String pattern ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < String > > keys ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < String > randomkey ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rename ( String oldkey , String newkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > renamenx ( String oldkey , String brandnewkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > dbsize ( ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expire ( String key , int ttlseconds ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > expireat ( String key , long epochtimeMillisecs ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > ttl ( String key ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > rpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > rpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , byte [ ] value ) ; public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , String stringValue ) ; public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lpush ( String listkey , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lpush ( String listkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , byte [ ] value ) ; public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , String stringValue ) ; public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > lset ( String key , long index , Number numberValue ) ; public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < ResponseStatus > lset ( String key , long index , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , byte [ ] value , int count ) ; public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , String stringValue , int count ) ; public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > lrem ( String listKey , Number numberValue , int count ) ; public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > llen ( String listkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > lrange ( String listkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > ltrim ( String listkey , long keepFrom , long keepTo ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lindex ( String listkey , long index ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > lpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpop ( String listKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , byte [ ] member ) ; public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , String stringValue ) ; public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sadd ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sadd ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , byte [ ] member ) ; public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , String stringValue ) ; public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > srem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > srem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , byte [ ] member ) ; public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , String stringValue ) ; public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > sismember ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > sismember ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) ; public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , String stringValue ) ; public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > smove ( String srcKey , String destKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > smove ( String srcKey , String destKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > scard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sinterstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sunionstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < ResponseStatus > sdiffstore ( String destSetKey , String . . . sets ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > smembers ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > srandmember ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < byte [ ] > spop ( String setkey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , byte [ ] member ) ; public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , String stringValue ) ; public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zadd ( String setkey , double score , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zadd ( String setkey , double score , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , byte [ ] member ) ; public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , String stringValue ) ; public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Boolean > zrem ( String setKey , Number numberValue ) ; public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Boolean > zrem ( String setKey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zcard ( String setKey ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , byte [ ] member ) ; public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , String stringValue ) ; public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Double > zscore ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Double > zscore ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , byte [ ] member ) ; public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , String stringValue ) ; public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > zrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , byte [ ] member ) ; public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , String stringValue ) ; public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < Long > zrevrank ( String setkey , Number numberValue ) ; public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public < T extends Serializable > tFuture < Long > zrevrank ( String setkey , T object ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < byte [ ] > > zrevrange ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
public Future < List < ZSetEntry > > zrangeSubset ( String setkey , long from , long to ) ; public Future<ObjectInfo> debug (String key);} 
tstatic final public int bitset ( Flag . . . flags ) { tint bitset = OPAQUE_BITMASK ; tfor ( Flag f : flags ) tbitset = bitset | f . bitmask ; treturn bitset ; } 
tprotected final < T extends RuntimeException > void assertDidRaiseRuntimeError ( Runnable test , Class < T > errtype ) { tboolean didRaiseError = false ; ttry { test . run ( ) ; } tcatch ( RuntimeException ) { 
public void testCommandSemanticsRequestType ( ) { tlog . info ( " TEST: Command sematics - RequestType " ) ; tfor ( Command c : Command . values ( ) ) { tassertTrue ( new String ( c . bytes ) . indexOf ( Command . OPTCODE ) = = - 1 , " Command bytes must not include control characters. " ) ; 
public Future < List < ZSetEntry > > zrangeSubset ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureZSetList ( this . queueRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public Future < List < ZSetEntry > > zrevrangeSubset ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureZSetList ( this . queueRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public List < ZSetEntry > zrangeSubset ( String key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < ZSetEntry > list = null ; ttry { tMultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Option . WITHSCORES . bytes ) ; tList < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; tif ( null ! = bulkData ) { tlist = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; tfor ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { tlist . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn list ; } 
public List < ZSetEntry > zrevrangeSubset ( String key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < ZSetEntry > list = null ; ttry { tMultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Option . WITHSCORES . bytes ) ; tList < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; tif ( null ! = bulkData ) { tlist = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; tfor ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { tlist . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn list ; } 
public Sort ALPHA ( ) { alphaSpec = String . format ( " %s%s " , Command . Option . ALPHA . name ( ) , PAD ) ; return this ; } public Sort DESC ( ) { sortSpec = String . format ( " %s%s " , Command . Option . DESC . name ( ) , PAD ) ; return this ; } 
public Sort DESC ( ) { sortSpec = String . format ( " %s%s " , Command . Option . DESC . name ( ) , PAD ) ; return this ; } public Sort BY ( String pattern ) { bySpec = String . format ( " %s %s%s " , Command . Option . BY . name ( ) , pattern , PAD ) ; return this ; } 
public Sort BY ( String pattern ) { bySpec = String . format ( " %s %s%s " , Command . Option . BY . name ( ) , pattern , PAD ) ; return this ; } public Sort GET ( String pattern ) { getSpec = String . format ( " %s %s%s " , Command . Option . GET . name ( ) , pattern , PAD ) ; return this ; } 
public Sort GET ( String pattern ) { getSpec = String . format ( " %s %s%s " , Command . Option . GET . name ( ) , pattern , PAD ) ; return this ; } public Sort LIMIT ( long from , long count ) { 
public Sort LIMIT ( long from , long count ) { tif ( from < 0 ) throw new ClientRuntimeException ( " from in LIMIT clause: " + from ) ; tif ( count < = 0 ) throw new ClientRuntimeException ( " count in LIMIT clause: " + from ) ; tlimitSpec = String . format ( " %s %d %d%s " , Command . Option . LIMIT . name ( ) , from , count , PAD ) ; treturn this ; } 
public Sort STORE ( String destKey ) { tAssert . notNull ( destKey , " deskKey is null " , ClientRuntimeException . class ) ; } 
tfinal public ConnectionSpec setAddress ( InetAddress address ) { tthis . address = address ; treturn this ; } 
tfinal public ConnectionSpec setCredentials ( byte [ ] credentials ) { tthis . credentials = credentials ; treturn this ; } 
tfinal public ConnectionSpec setDatabase ( int database ) { tthis . database = database ; treturn this ; } 
tfinal public ConnectionSpec setReconnectCnt ( int reconnectCnt ) { tthis . reconnectCnt = reconnectCnt ; treturn this ; } 
private final void initialize ( ) { tconnPoolAccess = new Semaphore ( connCount ) ; tconns = new Connection [ connCount ] ; tconnInUse = new boolean [ connCount ] ; tConnection conn = null ; tconnectionSpec . setConnectionFlag ( ConnectionFlag . RELIABLE , true ) ; tfor ( int i = 0 ; i < connCount ; i + + ) { ttry { 
protected Protocol newProtocolHandler ( ) { treturn spec . getConnectionFlag ( ConnectionFlag . SHARED ) ? new ConcurrentSynchProtocol ( ) : new SynchProtocol ( ) ; TODO: rewire it to get it from the ProtocolManager } 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
protected void initializeComponents ( ) { tspec . setConnectionFlag ( ConnectionFlag . RELIABLE , true ) ; tspec . setConnectionFlag ( ConnectionFlag . PIPELINE , true ) ; tspec . setConnectionFlag ( ConnectionFlag . SHARED , true ) ; tsuper . initializeComponents ( ) ; tserviceLock = new Object ( ) ; tisActive = new AtomicBoolean ( false ) ; tconnectionEstablished = new CountDownLatch ( 1 ) ; tpendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; trespHandler = new ResponseHandler ( ) ; trespHandlerThread = new Thread ( respHandler , " response-handler " ) ; trespHandlerThread . start ( ) ; tisActive . set ( false ) ; } 
public ConnectionSpec getSpec ( ) ; public enum Type {Established,Dropped,Faulted}}} 
public Modality getModality ( ) ; public enum Type {Established,Dropped,Faulted}}} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public enum Type {Established,Dropped,Faulted}}} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; }} 
public void onEvent ( Connection . Event event ) ; } public enum Type { tEstablished , tDropped , tFaulted } } } 
public ConnectionSpec getSpec ( ) ; public enum Type {Established,Dropped,Faulted}}} 
public Modality getModality ( ) ; public enum Type {Established,Dropped,Faulted}}} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public enum Type {Established,Dropped,Faulted}}} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; }} 
 public boolean addListener ( Listener connListener ) ; public enum Type {Established,Dropped,Faulted}}} 
public boolean removeListener ( Listener connListener ) ; }} 
final public boolean addListener ( Listener connListener ) { tthrow new NotSupportedException ( " Events not supported " ) ; } 
final public boolean removeListener ( Listener connListener ) { tthrow new NotSupportedException ( " Events not supported " ) ; } 
public ConnectionSpec getSpec ( ) ; SHUTDOWN}}} 
public Modality getModality ( ) ; SHUTDOWN}}} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; SHUTDOWN}}} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; }} 
 public boolean addListener ( Listener connListener ) ; SHUTDOWN}}} 
public boolean removeListener ( Listener connListener ) ; }} 
public void onEvent ( Connection . Event event ) ; } tSHUTDOWN } } } 
protected void notifyConnected ( ) { notifyListeners(new Event(this, Type.CONNECTED)); } 
protected void notifyDisconnected ( ) { notifyListeners(new Event(this, Type.DISCONNECTED)); } 
tprotected final void onConnectionFault ( String fault , boolean raiseEx ) throws ClientRuntimeException { tnotifyFaulted ( fault ) ; tLog . problem ( " Conn FAULT: %s - %s " , fault , this ) ; tif ( raiseEx ) tthrow new ClientRuntimeException ( fault ) ; 
tprotected final void connect ( ) throws IllegalStateException , ClientRuntimeException { } 
tprotected final void disconnect ( ) throws IllegalStateException { tAssert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; tsocketClose ( ) ; tisConnected = false ; tnotifyDisconnected ( ) ; tLog . debug ( " DISCONNECTED | conn: %s " , toString ( ) ) ; } 
public String toString ( ) { return String.format("Connection: %-12s %s:%d db:%d | %s@%d", getModality().name().toUpperCase(), spec.getAddress(), spec.getPort(), spec.getDatabase(), getClass().getSimpleName(), hashCode()); } 
public void run ( ) { } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Modality getModality ( ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
private final void initialize ( ) { tconnPoolAccess = new Semaphore ( connCount ) ; tconns = new Connection [ connCount ] ; tconnInUse = new boolean [ connCount ] ; tConnection conn = null ; tconnectionSpec . setConnectionFlag ( Connection . Flag . RELIABLE , true ) ; tfor ( int i = 0 ; i < connCount ; i + + ) { ttry { 
protected Protocol newProtocolHandler ( ) { treturn spec . getConnectionFlag ( Connection . Flag . SHARED ) ? new ConcurrentSynchProtocol ( ) : new SynchProtocol ( ) ; TODO: rewire it to get it from the ProtocolManager } 
protected void initializeComponents ( ) { tspec . setConnectionFlag ( Connection . Flag . RELIABLE , true ) ; tspec . setConnectionFlag ( Connection . Flag . PIPELINE , true ) ; tspec . setConnectionFlag ( Connection . Flag . SHARED , true ) ; tsuper . initializeComponents ( ) ; tserviceLock = new Object ( ) ; tisActive = new AtomicBoolean ( false ) ; tconnectionEstablished = new CountDownLatch ( 1 ) ; tpendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; trespHandler = new ResponseHandler ( ) ; trespHandlerThread = new Thread ( respHandler , " response-handler " ) ; trespHandlerThread . start ( ) ; tisActive . set ( false ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tPendingRequest pendingResponse = null ; tsynchronized ( serviceLock ) { return pendingResponse; } 
public static void main ( String [ ] args ) { tfinal ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) ; tspec . setCredentials ( " jredis " . getBytes ( ) ) ; tspec . setDatabase ( 13 ) ; tspec . setSocketProperty ( SocketProperty . SO_RCVBUF , 1024 * 24 ) ; tspec . setSocketProperty ( SocketProperty . SO_SNDBUF , 1024 * 24 ) ; tusingSynchSemantics ( spec ) ; tfinal boolean forever = true ; trunJRedisPipelineSET ( spec , 100000 , 3 , forever ) ; } 
tprotected final void connect ( ) throws IllegalStateException , ClientRuntimeException { } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Modality getModality ( ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
tstatic final public int bitset ( int bitset , Flag . . . flags ) { tfor ( Flag f : flags ) bitset = bitset | f . bitmask ; treturn bitset ; } 
tstatic final public int bitclear ( int bitset , Flag . . . flags ) { tfor ( Flag f : flags ) bitset = bitset ^ f . bitmask ; treturn bitset ; } 
tfinal public Integer getSocketProperty ( Connection . Socket . Property property ) { treturn socketProperties . get ( property ) ; } 
tfinal public boolean getConnectionFlag ( Connection . Flag flag ) { treturn Connection . Flag . isSet ( connectionFlagBitmask , flag ) ; } 
tprotected final InputStream newInputStream ( InputStream socketInputStream ) throws IllegalArgumentException { tInputStream in = super . newInputStream ( socketInputStream ) ; tif ( ! ( in instanceof FastBufferedInputStream ) ) { tLog . log ( String . format ( " WARN: input was: %s " , in . getClass ( ) . getCanonicalName ( ) ) ) ; tin = new FastBufferedInputStream ( in , spec . getSocketProperty ( Connection . Socket . Property . SO_RCVBUF ) ) ; } treturn in ; } 
private final void newSocketConnect ( ) tthrows IOException { tsocket = new java . net . Socket ( ) ; tsocket . setKeepAlive ( tspec . getSocketFlag ( Connection . Socket . Flag . SO_KEEP_ALIVE ) ) ; tsocket . setPerformancePreferences ( tspec . getSocketProperty ( SO_PREF_CONN_TIME ) , tspec . getSocketProperty ( SO_PREF_LATENCY ) , tspec . getSocketProperty ( SO_PREF_BANDWIDTH ) ) ; tsocket . setSoTimeout ( tspec . getSocketProperty ( SO_TIMEOUT ) ) ; tif ( socket . getSendBufferSize ( ) < spec . getSocketProperty ( SO_SNDBUF ) ) tsocket . setSendBufferSize ( spec . getSocketProperty ( SO_SNDBUF ) ) ; tif ( socket . getReceiveBufferSize ( ) < spec . getSocketProperty ( SO_RCVBUF ) ) tsocket . setReceiveBufferSize ( spec . getSocketProperty ( SO_RCVBUF ) ) ; tsocket . connect ( socketAddress ) ; 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
tprotected final InputStream newInputStream ( InputStream socketInputStream ) throws IllegalArgumentException { tInputStream in = super . newInputStream ( socketInputStream ) ; tif ( ! ( in instanceof FastBufferedInputStream ) ) { tLog . log ( String . format ( " WARN: input was: %s " , in . getClass ( ) . getCanonicalName ( ) ) ) ; tin = new FastBufferedInputStream ( in , spec . getSocketProperty ( SO_RCVBUF ) ) ; } treturn in ; } 
public static void main ( String [ ] args ) { tfinal ConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) ; tspec . setCredentials ( " jredis " . getBytes ( ) ) ; tspec . setDatabase ( 13 ) ; tspec . setSocketProperty ( SO_RCVBUF , 1024 * 24 ) ; tspec . setSocketProperty ( SO_SNDBUF , 1024 * 24 ) ; tusingSynchSemantics ( spec ) ; tfinal boolean forever = true ; trunJRedisPipelineSET ( spec , 100000 , 3 , forever ) ; } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Modality getModality ( ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec connectionSpecification) throws ClientRuntimeException; }} 
public void testConnectionFlags ( ) { tlog . info ( " TEST:CONNECTOR spec sematics - ConnectionFlags " ) ; tFlag flags [ ] = { Flag . CONNECT_IMMEDIATELY , Flag . SHARED , Flag . RELIABLE } ; int bitset = Flag . bitset ( flags ) ; for ( Flag f : flags ) tAssert . assertTrue ( Flag . isSet ( bitset , f ) , String . format ( " %s should have been set! " , f . name ( ) ) ) ; int oldbitset = bitset ; bitset = Flag . bitclear ( bitset , flags [ 1 ] ) ; Assert . assertFalse ( bitset = = oldbitset , " clearing flag should have changed bitset " ) ; Assert . assertFalse ( Flag . isSet ( bitset , flags [ 1 ] ) , String . format ( " %s should have been cleared! " , flags [ 1 ] . name ( ) ) ) ; } 
public void testCommandSemanticsRequestType ( ) { tlog . info ( " TEST:PROTOCOL Command sematics - RequestType " ) ; tfor ( Command c : Command . values ( ) ) { tassertTrue ( new String ( c . bytes ) . indexOf ( Command . OPTCODE ) = = - 1 , " Command bytes must not include control characters. " ) ; 
public void testCommandFlags ( ) { tlog . info ( " TEST:PROTOCOL Command sematics - CommandFlags " ) ; tFlag flags [ ] = { TEST , FOO , BAR } ; int bitset = Flag . bitset ( flags ) ; for ( Flag f : flags ) tAssert . assertTrue ( Flag . isSet ( bitset , f ) , String . format ( " %s should have been set! " , f . name ( ) ) ) ; int oldbitset = bitset ; bitset = Flag . bitclear ( bitset , flags [ 1 ] ) ; Assert . assertFalse ( bitset = = oldbitset , " clearing flag should have changed bitset " ) ; Assert . assertFalse ( Flag . isSet ( bitset , flags [ 1 ] ) , String . format ( " %s should have been cleared! " , flags [ 1 ] . name ( ) ) ) ; } 
public synchronized Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException { tif ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; tRequest trequest = null ; tResponse tresponse = null ; tResponseStatus status = null ; ttry { } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
tfinal public Modality getModality ( ) { return modality ; } 
public boolean isCompatibleWithVersion ( String version ) ; public Protocol newProtocol ( ConnectionSpec connSpec ) throws NotSupportedException ; } } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException ; public Protocol newProtocol ( ConnectionSpec connSpec ) throws NotSupportedException ; } } 
public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException ; public interface Factory { public Protocol newProtocol ( ConnectionSpec connSpec ) throws NotSupportedException ; } } 
private final void initialize ( ) { tconnPoolAccess = new Semaphore ( connCount ) ; tconns = new Connection [ connCount ] ; tconnInUse = new boolean [ connCount ] ; tConnection conn = null ; tconnectionSpec . setConnectionFlag ( Connection . Flag . RELIABLE , true ) ; tconnectionSpec . setConnectionFlag ( Connection . Flag . SHARED , true ) ; tfor ( int i = 0 ; i < connCount ; i + + ) { ttry { 
tprotected abstract void setConnection ( Connection connection ) ; }} 
tprotected Connection createSynchConnection ( ConnectionSpec connectionSpec ) { tConnection tsynchConnection = null ; ttry { tsynchConnection = new SynchConnection ( connectionSpec ) ; tAssert . notNull ( synchConnection , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( ProviderException e ) { tLog . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; tthrow e ; } tcatch ( ClientRuntimeException e ) { tString msg = e . getMessage ( ) + " nMake sure your server is running. " ; tLog . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; tsetConnection ( new FaultedConnection ( connectionSpec , msg ) ) ; } treturn synchConnection ; } 
public String toString ( ) { return String.format("Connection: %-12s %s:%d db:%d | %s@%d", spec.getModality().name().toUpperCase(), spec.getAddress(), spec.getPort(), spec.getDatabase(), getClass().getSimpleName(), hashCode()); } 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
public Protocol newProtocol ( ConnectionSpec connSpec ) throws NotSupportedException { treturn connSpec . getConnectionFlag ( Connection . Flag . SHARED ) ? new ConcurrentSynchProtocol ( ) : new SynchProtocol ( ) ; } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
tfinal public ConnectionSpec setAddress ( InetAddress address ) { tsetConnectionProperty ( Connection . Property . HOST , address ) ; treturn this ; } 
tfinal public ConnectionSpec setPort ( int port ) { tsetConnectionProperty ( Connection . Property . PORT , port ) ; return this; } 
tfinal public ConnectionSpec setCredentials ( byte [ ] credentials ) { tsetConnectionProperty ( Connection . Property . CREDENTIAL , credentials ) ; treturn this ; } 
tfinal public ConnectionSpec setDatabase ( int database ) { tsetConnectionProperty ( Connection . Property . DB , database ) ; treturn this ; } 
tfinal public ConnectionSpec setModality ( Modality modality ) { tsetConnectionProperty ( Connection . Property . MODALITY , modality ) ; treturn this ; } 
public void testConnectionFlags ( ) { tlog . info ( " TEST:CONNECTOR spec sematics - ConnectionFlags " ) ; tFlag flags [ ] = { Flag . CONNECT_IMMEDIATELY , Flag . SHARED , Flag . RELIABLE } ; int bitset = Flag . bitset ( flags ) ; for ( Flag f : flags ) tAssert . assertTrue ( Flag . isSet ( bitset , f ) , String . format ( " %s should have been set! " , f . name ( ) ) ) ; int oldbitset = bitset ; bitset = Flag . bitclear ( bitset , flags [ 1 ] ) ; Assert . assertFalse ( bitset = = oldbitset , " clearing flag should have changed bitset " ) ; Assert . assertFalse ( Flag . isSet ( bitset , flags [ 1 ] ) , String . format ( " %s should have been cleared! " , flags [ 1 ] . name ( ) ) ) ; int bitset2 = 0x0000 ; tbitset2 = Flag . bitset ( bitset2 , flags ) ; for ( Flag f : flags ) tAssert . assertTrue ( Flag . isSet ( bitset2 , f ) , String . format ( " %s should have been set! " , f . name ( ) ) ) ; 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
tfinal public int getMaxConnectWait ( ) { treturn ( Integer ) getConnectionProperty ( Connection . Property . MAX_CONNECT_WAIT ) ; } 
tfinal public ConnectionSpec setReconnectCnt ( int reconnectCnt ) { tsetConnectionProperty ( Connection . Property . MAX_CONNECT_ATTEMPT , reconnectCnt ) ; treturn this ; } 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
tfinal public int getReconnectCnt ( ) { treturn ( Integer ) getConnectionProperty ( Connection . Property . MAX_CONNECT_ATTEMPT ) ; } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
tfinal public ConnectionSpec setCredentials ( String credentials ) { treturn setCredentials ( credentials . getBytes ( ) ) ; } 
public static final void assertNotNull ( Object object , String msgfmt , Object . . . optionalFmtArgs ) { tString message = String . format ( msgfmt , optionalFmtArgs ) ; tAssert . assertNotNull ( object , message ) ; } 
public static final void assertNull ( Object object , String msgfmt , Object . . . optionalFmtArgs ) { tString message = String . format ( msgfmt , optionalFmtArgs ) ; tAssert . assertNull ( object , message ) ; } 
public static final void assertEquals ( Object actual , Object expected , String msgfmt , Object . . . optionalFmtArgs ) { tString message = String . format ( msgfmt , optionalFmtArgs ) ; tAssert . assertEquals ( actual , expected , message ) ; } 
public static final void assertEquals ( byte [ ] actual , byte [ ] expected , String msgfmt , Object . . . optionalFmtArgs ) { tString message = String . format ( msgfmt , optionalFmtArgs ) ; tAssert . assertEquals ( actual , expected , message ) ; } 
public static final void assertTrue ( boolean condition , String msgfmt , Object . . . optionalFmtArgs ) { tString message = String . format ( msgfmt , optionalFmtArgs ) ; tAssert . assertTrue ( condition , message ) ; } 
public static final void assertFalse ( boolean condition , String msgfmt , Object . . . optionalFmtArgs ) { tString message = String . format ( msgfmt , optionalFmtArgs ) ; tAssert . assertFalse ( condition , message ) ; } 
public void testConnectionFlags ( ) { tlog . info ( " TEST:CONNECTOR spec sematics - ConnectionFlags " ) ; tFlag flags [ ] = { Flag . CONNECT_IMMEDIATELY , Flag . SHARED , Flag . RELIABLE } ; int bitset = Flag . bitset ( flags ) ; for ( Flag f : flags ) tassertTrue ( Flag . isSet ( bitset , f ) , " %s should have been set! " , f . name ( ) ) ; int oldbitset = bitset ; bitset = Flag . bitclear ( bitset , flags [ 1 ] ) ; assertFalse ( bitset = = oldbitset , " clearing flag should have changed bitset " ) ; assertFalse ( Flag . isSet ( bitset , flags [ 1 ] ) , " %s should have been cleared! " , flags [ 1 ] . name ( ) ) ; int bitset2 = 0x0000 ; tbitset2 = Flag . bitset ( bitset2 , flags ) ; for ( Flag f : flags ) tassertTrue ( Flag . isSet ( bitset2 , f ) , " %s should have been set! " , f . name ( ) ) ; 
public void testCredentialsOverloads ( ) { tString property = Connection . Property . CREDENTIAL . name ( ) ; tlog . info ( String . format ( " TEST:CONNECTOR spec sematics - Credentials " , property ) ) ; tConnectionSpec spec = new ConnectionSpec . RefImpl ( ) ; tassertNull ( spec . getCredentials ( ) , " RefImpl should not have defined: %s " , property ) ; tString password = " jredis " ; } 
tfinal public ConnectionSpec setCredentials ( String credentials ) { tbyte [ ] bytes ; tif ( credentials = = null | | credentials . length ( ) = = 0 ) tbytes = null ; telse tbytes = credentials . getBytes ( ) ; treturn setCredentials ( bytes ) ; } 
public void testConnectionFlags ( ) { tlog . info ( " TEST:CONNECTOR spec sematics - ConnectionFlags " ) ; tFlag flags [ ] = { Flag . CONNECT_IMMEDIATELY , Flag . SHARED , Flag . RELIABLE } ; int bitset = Flag . bitset ( flags ) ; for ( Flag f : flags ) tassertTrue ( Flag . isSet ( bitset , f ) , " %s should have been set! " , f . name ( ) ) ; int oldbitset = bitset ; bitset = Flag . bitclear ( bitset , flags [ 1 ] ) ; assertFalse ( bitset = = oldbitset , " clearing flag should have changed bitset " ) ; assertFalse ( Flag . isSet ( bitset , flags [ 1 ] ) , " %s should have been cleared! " , flags [ 1 ] . name ( ) ) ; int bitset2 = 0x0000 ; tbitset2 = Flag . bitset ( bitset2 , flags ) ; for ( Flag f : flags ) tassertTrue ( Flag . isSet ( bitset2 , f ) , " %s should have been set! " , f . name ( ) ) ; 
public void testCredentialsOverloads ( ) { tString property = Connection . Property . CREDENTIAL . name ( ) ; tlog . info ( String . format ( " TEST:CONNECTOR spec sematics - Credentials " , property ) ) ; } 
public static final ConnectionSpec newSpec ( ) tthrows ClientRuntimeException { treturn newSpec ( DEFAULT_REDIS_HOST_NAME , DEFAULT_REDIS_PORT , DEFAULT_REDIS_DB , DEFAULT_REDIS_PASSWORD ) ; } 
public static final ConnectionSpec newSpec ( tInetAddress taddress , tint tport , tint tdatabase , tbyte [ ] tcredentials ) tthrows ClientRuntimeException { 
public static void main ( String [ ] args ) { tString password = " jredis " ; tif ( args . length > 0 ) password = args [ 0 ] ; tnew HelloAgain ( ) . run ( password ) ; } 
private void run ( String password ) { ttry { tConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( password ) ; 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
public Protocol newProtocol ( ConnectionSpec connSpec ) throws NotSupportedException { treturn connSpec . getConnectionFlag ( Connection . Flag . SHARED ) ? new ConcurrentSynchProtocol ( ) : new SynchProtocol ( ) ; } 
protected Protocol newProtocolHandler ( ) { tProtocol . Factory protfac = ( Protocol . Factory ) spec . getConnectionProperty ( Property . PROTOCOL_FACTORY ) ; tif ( protfac = = null ) protfac = new DefaultProtocolFactory ( ) ; treturn protfac . newProtocol ( spec ) ; 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
tprotected abstract void setConnection ( Connection connection ) ; }} 
tprotected Connection createSynchConnection ( ConnectionSpec connSpec ) { tConnection . Factory cfact = ( Connection . Factory ) connSpec . getConnectionProperty ( Property . CONNECTION_FACTORY ) ; tConnection tsynchConnection = null ; ttry { tsynchConnection = Assert . notNull ( cfact . newConnection ( connSpec ) , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( ProviderException e ) { tLog . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; tthrow e ; } tcatch ( ClientRuntimeException e ) { tString msg = String . format ( " %s nMake sure your server is running. " , e . getMessage ( ) ) ; tLog . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; tsetConnection ( new FaultedConnection ( connSpec , msg ) ) ; } treturn synchConnection ; } 
private void setDefaultProperties ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
public FutureLong linsert ( String key , boolean after , byte [ ] oldvalue , byte [ ] newvalue ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] bulk = new byte [ 4 ] [ ] ; bulk [ 0 ] = keybytes ; bulk [ 1 ] = ( after ? " AFTER " : " BEFORE " ) . getBytes ( ) ; bulk [ 2 ] = oldvalue ; bulk [ 3 ] = newvalue ; treturn new FutureLong ( this . queueRequest ( Command . LINSERT , bulk ) ) ; } 
tfinal private Connection createAsynchConnection ( ) { tConnection . Factory cfact = ( Connection . Factory ) connSpec . getConnectionProperty ( Property . CONNECTION_FACTORY ) ; tConnection tconn = null ; ttry { tconn = Assert . notNull ( cfact . newConnection ( connSpec ) , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( ProviderException e ) { tLog . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; tthrow e ; } tcatch ( ClientRuntimeException e ) { tString msg = String . format ( " %s nMake sure your server is running. " , e . getMessage ( ) ) ; tLog . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; tconn = new FaultedConnection ( connSpec , msg ) ; } tLog . debug ( " %s: Using %s " , this . getClass ( ) . getSimpleName ( ) , conn ) ; treturn conn ; } 
tprotected abstract void setConnection ( Connection connection ) ; }} 
tprotected Connection createSynchConnection ( ConnectionSpec connSpec ) { tConnection . Factory cfact = ( Connection . Factory ) connSpec . getConnectionProperty ( Property . CONNECTION_FACTORY ) ; tConnection tconn = null ; ttry { tconn = Assert . notNull ( cfact . newConnection ( connSpec ) , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( ProviderException e ) { tLog . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; tthrow e ; } tcatch ( ClientRuntimeException e ) { tString msg = String . format ( " %s nMake sure your server is running. " , e . getMessage ( ) ) ; tLog . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; tsetConnection ( new FaultedConnection ( connSpec , msg ) ) ; } tLog . debug ( " %s: Using %s " , this . getClass ( ) . getSimpleName ( ) , conn ) ; treturn conn ; } 
protected void initializeComponents ( ) { isActive.set(false); } 
tprotected final InputStream newInputStream ( InputStream socketInputStream ) throws IllegalArgumentException { tInputStream in = super . newInputStream ( socketInputStream ) ; tif ( ! ( in instanceof FastBufferedInputStream ) ) { tSystem . out . format ( " WARN: input was: %s " , in . getClass ( ) . getCanonicalName ( ) ) ; tin = new FastBufferedInputStream ( in , spec . getSocketProperty ( Connection . Socket . Property . SO_RCVBUF ) ) ; } treturn in ; } 
private void onResponseHandlerError ( ClientRuntimeException cre , PendingRequest request ) { tLog . error ( " Pipeline response handler encountered an error: " + cre . getMessage ( ) ) ; ry { 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException } 
public < T extends Serializable > void mset ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException ; public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . ByteArrays mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Strings mappings ) throws RedisException ; public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean msetnx ( KeyValueSet . Numbers mappings ) throws RedisException ; public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > mappings ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long incrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decr ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long decrby ( String key , int delta ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] substr ( String key , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , byte [ ] value ) throws RedisException ; public long append ( String key , String stringValue ) throws RedisException ; public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , String stringValue ) throws RedisException ; public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long append ( String key , Number numberValue ) throws RedisException ; public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long append ( String key , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean exists ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long del ( String . . . keys ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public RedisType type ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( String pattern ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > keys ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public String randomkey ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rename ( String oldkey , String newkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean renamenx ( String oldkey , String brandnewkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long dbsize ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expire ( String key , int ttlseconds ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean expireat ( String key , long epochtimeMillisecs ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long ttl ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , byte [ ] value ) throws RedisException ; public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , String stringValue ) throws RedisException ; public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void rpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void rpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , byte [ ] value ) throws RedisException ; public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , String stringValue ) throws RedisException ; public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lpush ( String listkey , Number numberValue ) throws RedisException ; public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lpush ( String listkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , byte [ ] value ) throws RedisException ; public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , String stringValue ) throws RedisException ; public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void lset ( String key , long index , Number numberValue ) throws RedisException ; public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > void lset ( String key , long index , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , byte [ ] value , int count ) throws RedisException ; public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , String stringValue , int count ) throws RedisException ; public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long lrem ( String listKey , Number numberValue , int count ) throws RedisException ; public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > long lrem ( String listKey , T object , int count ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long llen ( String listkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > lrange ( String listkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void ltrim ( String listkey , long keepFrom , long keepTo ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lindex ( String listkey , long index ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] lpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpop ( String listKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] rpoplpush ( String srcList , String destList ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , byte [ ] member ) throws RedisException ; public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , String stringValue ) throws RedisException ; public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sadd ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sadd ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , byte [ ] member ) throws RedisException ; public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , String stringValue ) throws RedisException ; public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean srem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean srem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , byte [ ] member ) throws RedisException ; public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , String stringValue ) throws RedisException ; public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean sismember ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean sismember ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , byte [ ] member ) throws RedisException ; public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , String stringValue ) throws RedisException ; public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean smove ( String srcKey , String destKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean smove ( String srcKey , String destKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long scard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > smembers ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] srandmember ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] spop ( String setkey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , byte [ ] member ) throws RedisException ; public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , String stringValue ) throws RedisException ; public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zadd ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zadd ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , byte [ ] member ) throws RedisException ; public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , String stringValue ) throws RedisException ; public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean zrem ( String setKey , Number numberValue ) throws RedisException ; public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > boolean zrem ( String setKey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcard ( String setKey ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , byte [ ] member ) throws RedisException ; public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , String stringValue ) throws RedisException ; public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zscore ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zscore ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , String stringValue ) throws RedisException ; public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , byte [ ] member ) throws RedisException ; public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , String stringValue ) throws RedisException ; public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zrevrank ( String setkey , Number numberValue ) throws RedisException ; public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tlong zrevrank ( String setkey , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrevrange ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrangeSubset ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < ZSetEntry > zrevrangeSubset ( String setkey , long from , long to ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > zrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyscore ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zremrangebyrank ( String setkey , long minRank , long maxRank ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , byte [ ] member ) throws RedisException ; public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , String stringValue ) throws RedisException ; public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Double zincrby ( String setkey , double score , Number numberValue ) throws RedisException ; public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tDouble zincrby ( String setkey , double score , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long zcount ( String setkey , double minScore , double maxScore ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , byte [ ] value ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , String string ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hset ( String key , String field , Number number ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public < T extends Serializable > tboolean hset ( String key , String field , T object ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public byte [ ] hget ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hexists ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public boolean hdel ( String key , String field ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public long hlen ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < String > hkeys ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public List < byte [ ] > hvals ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public Map < String , byte [ ] > hgetall ( String key ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public JRedis multi ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public JRedis discard ( ) throws RedisException ; public ObjectInfo debug (String key) throws RedisException;} 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public JRedis multi ( ) throws RedisException { tif ( true ) throw new ProviderException ( " NOT IMPLEMENTED " ) ; } 
public JRedis discard ( ) throws RedisException { tif ( true ) throw new ProviderException ( " NOT IMPLEMENTED " ) ; } 
private void setDefaultValues ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tbyte [ ] setCmdLenBytes = Convert . toBytes ( cmd . bytes . length ) ; tbyte [ ] bulkSetLineCntBytes = Convert . toBytes ( args . length + 1 ) ; tswitch ( cmd . requestType ) { tcase NO_ARG : } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tbyte [ ] cmdLenBytes = Convert . toBytes ( cmd . bytes . length ) ; tbyte [ ] lineCntBytes = Convert . toBytes ( args . length + 1 ) ; tswitch ( cmd . requestType ) { tcase NO_ARG : } 
public String toString ( ) { tFormatter formatter = new Formatter ( ) ; tformatter . format ( " ObjectInfo: key [addr:%s refCnt: %d] encoding:%s serializedLength: %d lru %d lruSecondsIdle %d " , tkeyAddress , keyRefCount , encoding , serializedLength , tlru , lruSecondsIdle ) ; treturn formatter . toString ( ) ; } 
tstatic public final ObjectInfo valueOf ( String strRep ) { tStringTokenizer tokenizer = new StringTokenizer ( strRep ) ; tint tokenCnt = tokenizer . countTokens ( ) ; tif ( tokenCnt ! = numTokens ) tthrow new ProviderException ( " DEBUG OBJECT <key> response does not conform to expected format. Got: [ " + strRep + " ] " ) ; tList < String > tokens = new ArrayList < String > ( tokenCnt ) ; twhile ( tokenizer . hasMoreElements ( ) ) ttokens . add ( tokenizer . nextToken ( ) ) ; tString keyAddr = tokens . get ( 1 ) . substring ( 3 ) ; tString keyCnt = tokens . get ( 2 ) . substring ( " refcount: " . length ( ) ) ; tString encodingRep = tokens . get ( 3 ) . substring ( " encoding: " . length ( ) ) ; tString serlen = tokens . get ( 4 ) . substring ( " serializedlength: " . length ( ) ) ; tString lru = tokens . get ( 5 ) . substring ( " lru: " . length ( ) ) ; tString lruSecondsIdle = tokens . get ( 6 ) . substring ( " lru_seconds_idle: " . length ( ) ) ; tObjectInfo info = new ObjectInfo ( keyAddr , Integer . parseInt ( keyCnt ) , tObjectEncoding . valueOf ( encodingRep . toUpperCase ( ) ) , tInteger . parseInt ( serlen ) , Integer . parseInt ( lru ) , tInteger . parseInt ( lruSecondsIdle ) ) ; treturn info ; } 
public Sort sort ( final String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisFutureSupport client = this ; tSort sortQuery = new SortSupport ( key , keybytes ) { } 
tprotected Future < List < byte [ ] > > execAsynchSort ( byte [ ] . . . fullSortCmd ) { treturn new FutureByteArrayList ( client . queueRequest ( Command . SORT , fullSortCmd ) ) ; } 
tprotected Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] . . . fullSortCmd ) { tFuture < Response > fResp = client . queueRequest ( Command . SORT$STORE , fullSortCmd ) ; tnew FutureLong ( fResp ) ; treturn new FutureSortStoreResp ( fResp ) ; } 
tprotected List < byte [ ] > execSort ( byte [ ] . . . fullSortCmd ) { tthrow new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } 
tprotected List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) { tthrow new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } 
public Sort sort ( final String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisSupport client = this ; tSort sortQuery = new SortSupport ( key , keybytes ) { } 
tprotected List < byte [ ] > execSort ( byte [ ] . . . fullSortCmd ) tthrows IllegalStateException , RedisException { tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) client . serviceRequest ( Command . SORT , fullSortCmd ) ; tmultiBulkData = multiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
tprotected List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) tthrows IllegalStateException , RedisException { tList < byte [ ] > multiBulkData = new ArrayList < byte [ ] > ( 1 ) ; ttry { tValueResponse valueResp = ( ValueResponse ) client . serviceRequest ( Command . SORT$STORE , fullSortCmd ) ; tlong resSize = valueResp . getLongValue ( ) ; tmultiBulkData . add ( Convert . toBytes ( resSize ) ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
 protected Future < List < byte [ ] > > execAsynchSort ( byte [ ] . . . fullSortCmd ) { tthrow new IllegalStateException ( " JRedis does not support asynchronous sort. " ) ; } 
 protected Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] . . . fullSortCmd ) { tthrow new IllegalStateException ( " JRedis does not support asynchronous sort. " ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tbyte [ ] cmdLenBytes = Convert . toBytes ( cmd . bytes . length ) ; tbyte [ ] lineCntBytes = Convert . toBytes ( args . length + 1 ) ; tswitch ( cmd . requestType ) { tcase NO_ARG : } 
public Sort ALPHA ( ) { String alphaSpecName = Command . Option . ALPHA . name ( ) ; alphaSpec . add ( alphaSpecName ) ; return this ; } 
public Sort DESC ( ) { String sortSpecName = Command . Option . DESC . name ( ) ; descSpec . add ( sortSpecName ) ; return this ; } 
public Sort BY ( String pattern ) { String bySpecName = Command . Option . BY . name ( ) ; bySpec . add ( bySpecName ) ; bySpec . add ( pattern ) ; return this ; } 
public Sort GET ( String pattern ) { String getSpecName = Command . Option . GET . name ( ) ; getSpec . add ( getSpecName ) ; getSpec . add ( pattern ) ; return this ; } 
public Sort LIMIT ( long from , long count ) { tif ( from < 0 ) { throw new ClientRuntimeException ( " from in LIMIT clause: " + from ) ; } tif ( count < = 0 ) { throw new ClientRuntimeException ( " count in LIMIT clause: " + from ) ; } tString limitSpecName = Command . Option . LIMIT . name ( ) ; String fromString = new Long ( from ) . toString ( ) ; String countString = new Long ( count ) . toString ( ) ; limitSpec . add ( limitSpecName ) ; limitSpec . add ( fromString ) ; limitSpec . add ( countString ) ; treturn this ; } 
public Sort STORE ( String destKey ) { tAssert . notNull ( destKey , " deskKey is null " , ClientRuntimeException . class ) ; tString storeSpecName = Command . Option . STORE . name ( ) ; tstoreSpec . add ( storeSpecName ) ; tstoreSpec . add ( destKey ) ; tstores = true ; treturn this ; } 
private final byte [ ] [ ] buildSortCmd ( ) { ArrayList < String > sortSpecs = new ArrayList < String > ( ) ; sortSpecs . addAll ( bySpec ) ; sortSpecs . addAll ( limitSpec ) ; sortSpecs . addAll ( getSpec ) ; sortSpecs . addAll ( descSpec ) ; sortSpecs . addAll ( alphaSpec ) ; sortSpecs . addAll ( storeSpec ) ; byte [ ] [ ] sortCmd = new byte [ sortSpecs . size ( ) + 1 ] [ ] ; sortCmd [ 0 ] = keyBytes ; for ( int i = 0 ; i < sortSpecs . size ( ) ; i + + ) { sortCmd [ i + 1 ] = sortSpecs . get ( i ) . getBytes ( ) ; } return sortCmd ; } 
public List < byte [ ] > exec ( ) throws IllegalStateException , RedisException { System . out . format ( " sort spec: [%S %S %S %S %S %S] " , bySpec , limitSpec , getSpec , descSpec , alphaSpec , storeSpec ) ; tList < byte [ ] > res = null ; tif ( ! stores ) tres = execSort ( buildSortCmd ( ) ) ; telse tres = execSortStore ( buildSortCmd ( ) ) ; treturn res ; } 
public Future < List < byte [ ] > > execAsynch ( ) { tSystem . out . format ( " sort spec: [%S %S %S %S %S %S] " , bySpec , limitSpec , getSpec , descSpec , alphaSpec , storeSpec ) ; tFuture < List < byte [ ] > > res = null ; tif ( ! stores ) tres = execAsynchSort ( buildSortCmd ( ) ) ; telse tres = execAsynchSortStore ( buildSortCmd ( ) ) ; treturn res ; } 
tprotected abstract List < byte [ ] > execSort ( byte [ ] . . . fullSortCmd ) throws IllegalStateException , RedisException ; tprotected abstract List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) throws IllegalStateException , RedisException ; tprotected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] . . . fullSortCmd ) ; tprotected abstract Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] . . . fullSortCmd ) ; } 
tprotected abstract List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) throws IllegalStateException , RedisException ; tprotected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] . . . fullSortCmd ) ; tprotected abstract Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] . . . fullSortCmd ) ; } 
tprotected abstract Future < List < byte [ ] > > execAsynchSort ( byte [ ] . . . fullSortCmd ) ; tprotected abstract Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] . . . fullSortCmd ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tbyte [ ] cmdLenBytes = Convert . toBytes ( cmd . bytes . length ) ; tbyte [ ] lineCntBytes = Convert . toBytes ( args . length + 1 ) ; } 
public void run ( ) throws RedisException { tLog . log ( " ***** JProfileTestCase **** " ) ; } 
public Future < byte [ ] > echo ( byte [ ] msg ) { tif ( msg = = null ) tthrow new IllegalArgumentException ( " invalid value for echo => [null] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ECHO , msg ) ; treturn new FutureByteArray ( futureResponse ) ; 
public byte [ ] echo ( byte [ ] value ) throws RedisException { tif ( value = = null ) tthrow new IllegalArgumentException ( " invalid echo value => [null] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . ECHO , value ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
private final void checkStatus ( ) throws ExecutionException { hrow new ExecutionException("Redis Exception on ["+cmd.name()+"] " + response.getStatus().message(), new RedisException(cmd, response.getStatus().message())); 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd . requestType ) { tcase NO_ARG : } 
@Override public boolean equals ( Object o ) { tif ( o instanceof TestBean ) { tTestBean isItMe = ( TestBean ) o ; treturn isItMe . getName ( ) . equals ( name ) & & isItMe . getCreated_on ( ) = = this . named_on ; } treturn false ; } 
public static final byte [ ] toBytes ( int i ) { tif ( i < INT_N_65535 | | i > INT_P_65535 ) { treturn Integer . toString ( i ) . getBytes ( ) ; } tfinal int absi = Math . abs ( i ) ; tfinal byte [ ] cachedData = i2b_65535 [ absi ] ; tfinal byte [ ] data ; tif ( cachedData = = null ) { tdata = Integer . toString ( i ) . getBytes ( ) ; ti2b_65535 [ absi ] = data ; } telse { tdata = cachedData ; } treturn i > = 0 ? data : getNegativeNumberBytes ( data ) ; } 
public static final int toInt ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) throws IllegalArgumentException { tbyte [ ] buff = potentiallySignedAsciiBytes ; } 
public Future < ResponseStatus > slaveof ( String host , int port ) { tbyte [ ] hostbytes = null ; tif ( ( hostbytes = JRedisSupport . getKeyBytes ( host ) ) = = null ) tthrow new IllegalArgumentException ( " invalid host => [ " + host + " ] " ) ; tbyte [ ] portbytes = null ; tif ( ( portbytes = Convert . toBytes ( port ) ) = = null ) tthrow new IllegalArgumentException ( " invalid port => [ " + port + " ] " ) ; treturn new FutureStatus ( this . queueRequest ( Command . SLAVEOF , hostbytes , portbytes ) ) ; } 
public FutureStatus rename ( String oldkey , String newkey ) { tbyte [ ] oldkeydata = null ; tif ( ( oldkeydata = JRedisSupport . getKeyBytes ( oldkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; tbyte [ ] newkeydata = null ; tif ( ( newkeydata = JRedisSupport . getKeyBytes ( newkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; treturn new FutureStatus ( this . queueRequest ( Command . RENAME , oldkeydata , newkeydata ) ) ; } 
public Future < Boolean > renamenx ( String oldkey , String newkey ) { tbyte [ ] oldkeydata = null ; tif ( ( oldkeydata = JRedisSupport . getKeyBytes ( oldkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; tbyte [ ] newkeydata = null ; tif ( ( newkeydata = JRedisSupport . getKeyBytes ( newkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . RENAMENX , oldkeydata , newkeydata ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public FutureStatus rpush ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureStatus ( this . queueRequest ( Command . RPUSH , keybytes , value ) ) ; } 
public FutureByteArray rpoplpush ( String srcList , String destList ) { tbyte [ ] srckeybytes = null ; tif ( ( srckeybytes = JRedisSupport . getKeyBytes ( srcList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; tbyte [ ] destkeybytes = null ; tif ( ( destkeybytes = JRedisSupport . getKeyBytes ( destList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . RPOPLPUSH , srckeybytes , destkeybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public Future < Boolean > sadd ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SADD , keybytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > zadd ( String key , double score , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZADD , keybytes , Convert . toBytes ( score ) , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Double > zincrby ( String key , double score , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZINCRBY , keybytes , Convert . toBytes ( score ) , member ) ; treturn new FutureDouble ( futureResponse ) ; } 
public FutureStatus set ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; treturn new FutureStatus ( this . queueRequest ( Command . SET , keybytes , value ) ) ; } 
public Future < byte [ ] > getset ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . GETSET , keybytes , value ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public < T extends Serializable > tFuture < byte [ ] > getset ( String key , T value ) { treturn getset ( key , DefaultCodec . encode ( value ) ) ; } 
public Future < Boolean > setnx ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SETNX , keybytes , value ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Long > append ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . APPEND , keybytes , value ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Boolean > sismember ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SISMEMBER , keybytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > smove ( String srcKey , String destKey , byte [ ] member ) { tbyte [ ] srcKeyBytes = null ; tif ( ( srcKeyBytes = JRedisSupport . getKeyBytes ( srcKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + srcKey + " ] " ) ; tbyte [ ] destKeyBytes = null ; tif ( ( destKeyBytes = JRedisSupport . getKeyBytes ( destKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + destKey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SMOVE , srcKeyBytes , destKeyBytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < T extends Serializable > Future < Boolean > smove ( String srcKey , String destKey , T object ) { treturn smove ( srcKey , destKey , DefaultCodec . encode ( object ) ) ; } 
public Future < Boolean > hset ( String key , String field , byte [ ] value ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = JRedisSupport . getKeyBytes ( field ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + field + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HSET , hashKeyBytes , hashFieldBytes , value ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < T extends Serializable > tFuture < Boolean > hset ( String key , String field , T object ) { treturn hset ( key , field , DefaultCodec . encode ( object ) ) ; } 
public Future < byte [ ] > hget ( String hashKey , String hashField ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = JRedisSupport . getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HGET , hashKeyBytes , hashFieldBytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public Future < Boolean > hexists ( String hashKey , String hashField ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = JRedisSupport . getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HEXISTS , hashKeyBytes , hashFieldBytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > hdel ( String hashKey , String hashField ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = JRedisSupport . getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HDEL , hashKeyBytes , hashFieldBytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Long > hlen ( String hashKey ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HLEN , hashKeyBytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < List < String > > hkeys ( String hashKey ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HKEYS , hashKeyBytes ) ; treturn new FutureKeyList ( futureResponse ) ; } 
public Future < List < byte [ ] > > hvals ( String hashKey ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HKEYS , hashKeyBytes ) ; treturn new FutureByteArrayList ( futureResponse ) ; } 
public Future < Map < String , byte [ ] > > hgetall ( String hashKey ) { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = JRedisSupport . getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HGETALL , hashKeyBytes ) ; treturn new FutureDataDictionary ( futureResponse ) ; } 
public Future < Long > incr ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . INCR , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > incrby ( String key , int delta ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . INCRBY , keybytes , Convert . toBytes ( delta ) ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > decr ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . DECR , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > decrby ( String key , int delta ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . DECRBY , keybytes , Convert . toBytes ( delta ) ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > llen ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LLEN , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > scard ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SCARD , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > zcard ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZCARD , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < byte [ ] > srandmember ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SRANDMEMBER , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > spop ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SPOP , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > get ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . GET , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > lindex ( String key , long index ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LINDEX , keybytes , Convert . toBytes ( index ) ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > lpop ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LPOP , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public Future < byte [ ] > rpop ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . RPOP , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public Future < RedisType > type ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; treturn new FutureRedisType ( this . queueRequest ( Command . TYPE , keybytes ) ) ; } 
public Future < ObjectInfo > debug ( String key ) { tbyte [ ] keybytes = JRedisSupport . getKeyBytes ( key ) ; tif ( key . length ( ) = = 0 ) tthrow new IllegalArgumentException ( " invalid zero length key => [ " + key + " ] " ) ; treturn new FutureObjectInfo ( this . queueRequest ( Command . DEBUG , " OBJECT " . getBytes ( ) , keybytes ) ) ; } 
public Future < List < byte [ ] > > mget ( String . . . keys ) { tif ( null = = keys | | keys . length = = 0 ) throw new IllegalArgumentException ( " no keys specified " ) ; tbyte [ ] keydata = null ; tbyte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; tint i = 0 ; tfor ( String k : keys ) { tif ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . MGET , keybytes ) ) ; } 
public Future < List < byte [ ] > > smembers ( String key ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " null key. " ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . SMEMBERS , keydata ) ) ; } 
public Future < List < String > > keys ( String pattern ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( pattern ) ) = = null ) tthrow new IllegalArgumentException ( " null key. " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . KEYS , keydata ) ; treturn new FutureKeyList ( futureResponse ) ; } 
public Future < List < byte [ ] > > lrange ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . LRANGE , keybytes , fromBytes , toBytes ) ) ; } 
public Future < byte [ ] > substr ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureByteArray ( this . queueRequest ( Command . SUBSTR , keybytes , fromBytes , toBytes ) ) ; } 
public Future < List < byte [ ] > > zrange ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . ZRANGE , keybytes , fromBytes , toBytes ) ) ; } 
public Future < List < byte [ ] > > zrangebyscore ( String key , double minScore , double maxScore ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minScore ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxScore ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . ZRANGEBYSCORE , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public Future < Long > zremrangebyscore ( String key , double minScore , double maxScore ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minScore ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxScore ) ; treturn new FutureLong ( this . queueRequest ( Command . ZREMRANGEBYSCORE , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public Future < Long > zcount ( String key , double minScore , double maxScore ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minScore ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxScore ) ; treturn new FutureLong ( this . queueRequest ( Command . ZCOUNT , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public Future < Long > zremrangebyrank ( String key , long minRank , long maxRank ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minRank ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxRank ) ; treturn new FutureLong ( this . queueRequest ( Command . ZREMRANGEBYRANK , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public Future < List < byte [ ] > > zrevrange ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . ZREVRANGE , keybytes , fromBytes , toBytes ) ) ; } 
public Future < List < ZSetEntry > > zrangeSubset ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureZSetList ( this . queueRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public Future < List < ZSetEntry > > zrevrangeSubset ( String key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureZSetList ( this . queueRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public Sort sort ( final String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisFutureSupport client = this ; tSort sortQuery = new SortSupport ( key , keybytes ) { } 
public Future < List < byte [ ] > > sinter ( String set1 , String . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . SINTER , keybytes ) ) ; } 
public Future < List < byte [ ] > > sunion ( String set1 , String . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . SUNION , keybytes ) ) ; } 
public Future < List < byte [ ] > > sdiff ( String set1 , String . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . SDIFF , keybytes ) ) ; } 
public FutureStatus sinterstore ( String dest , String . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } treturn new FutureStatus ( this . queueRequest ( Command . SINTERSTORE , setbytes ) ) ; } 
public FutureStatus sunionstore ( String dest , String . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } treturn new FutureStatus ( this . queueRequest ( Command . SUNIONSTORE , setbytes ) ) ; } 
public FutureStatus sdiffstore ( String dest , String . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } treturn new FutureStatus ( this . queueRequest ( Command . SDIFFSTORE , setbytes ) ) ; } 
public Future < Long > del ( String . . . keys ) { tif ( null = = keys | | keys . length = = 0 ) throw new IllegalArgumentException ( " no keys specified " ) ; tbyte [ ] keydata = null ; tbyte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; tint i = 0 ; tfor ( String k : keys ) { tif ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; tkeybytes [ i + + ] = keydata ; } tFuture < Response > futureResponse = this . queueRequest ( Command . DEL , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Boolean > exists ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . EXISTS , keybytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public FutureStatus lpush ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureStatus ( this . queueRequest ( Command . LPUSH , keybytes , value ) ) ; } 
public Future < Long > lrem ( String key , byte [ ] value , int count ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] countBytes = Convert . toBytes ( count ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LREM , keybytes , value , countBytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public < T extends Serializable > tFuture < Long > lrem ( String listKey , T object , int count ) { treturn lrem ( listKey , DefaultCodec . encode ( object ) , count ) ; } 
public FutureStatus lset ( String key , long index , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] indexBytes = Convert . toBytes ( index ) ; treturn new FutureStatus ( this . queueRequest ( Command . LSET , keybytes , indexBytes , value ) ) ; } 
public Future < Boolean > move ( String key , int dbIndex ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . MOVE , keybytes , Convert . toBytes ( dbIndex ) ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > srem ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SREM , keybytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > zrem ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZREM , keybytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Double > zscore ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZSCORE , keybytes , member ) ; treturn new FutureDouble ( futureResponse ) ; } 
public Future < Long > zrank ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZRANK , keybytes , member ) ; treturn new FutureLong ( futureResponse ) ; } 
public Future < Long > zrevrank ( String key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZREVRANK , keybytes , member ) ; treturn new FutureLong ( futureResponse ) ; } 
public FutureStatus ltrim ( String key , long keepFrom , long keepTo ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( keepFrom ) ; tbyte [ ] toBytes = Convert . toBytes ( keepTo ) ; treturn new FutureStatus ( this . queueRequest ( Command . LTRIM , keybytes , fromBytes , toBytes ) ) ; } 
public Future < Boolean > expire ( String key , int ttlseconds ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] ttlbytes = Convert . toBytes ( ttlseconds ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . EXPIRE , keybytes , ttlbytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Boolean > expireat ( String key , long epochtime ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong expiretime = TimeUnit . SECONDS . convert ( epochtime , TimeUnit . MILLISECONDS ) ; tbyte [ ] expiretimeBytes = Convert . toBytes ( expiretime ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . EXPIREAT , keybytes , expiretimeBytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public Future < Long > ttl ( String key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . TTL , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public ResponseStatus get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { return pendingRequest.get(timeout, unit).getStatus(); } 
public Boolean get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn valResp . getBooleanValue ( ) ; } 
public String get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn valResp . getStringValue ( ) ; } 
public RedisType get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn getRedisType ( valResp ) ; } 
public Long get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn valResp . getLongValue ( ) ; } 
public Double get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tBulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( timeout , unit ) ; tif ( bulkResp . getBulkData ( ) ! = null ) treturn Convert . toDouble ( bulkResp . getBulkData ( ) ) ; treturn null ; } 
public byte [ ] get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tBulkResponse resp = ( BulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn resp . getBulkData ( ) ; } 
public List < byte [ ] > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse resp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn packValueResult ( resp . getLongValue ( ) ) ; } 
public List < byte [ ] > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn resp . getMultiBulkData ( ) ; } 
public Map < String , byte [ ] > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn convert ( resp . getMultiBulkData ( ) ) ; } 
public List < String > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( timeout , unit ) ; tList < byte [ ] > multibulkdata = resp . getMultiBulkData ( ) ; tList < String > list = null ; tif ( null ! = multibulkdata ) tlist = DefaultCodec . toStr ( multibulkdata ) ; treturn list ; } 
public Map < String , String > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tBulkResponse resp = ( BulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn getResultMap ( resp ) ; } 
public ObjectInfo get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn getObjectInfo ( valResp ) ; } 
public List < ZSetEntry > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn convert ( resp . getMultiBulkData ( ) ) ; } 
public Future < byte [ ] > echo ( byte [ ] msg ) { tif ( msg = = null ) tthrow new IllegalArgumentException ( " invalid value for echo => [null] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ECHO , msg ) ; treturn new FutureByteArray ( futureResponse ) ; 
public static byte [ ] getKeyBytes ( String key ) throws IllegalArgumentException { tif ( null = = key ) throw new IllegalArgumentException ( " key is null " ) ; tbyte [ ] bytes = null ; tif ( JRedisSupport . CacheKeys = = true ) tbytes = keyByteCache . get ( key ) ; tif ( null = = bytes ) { } 
public static byte [ ] getKeyBytes ( String key ) throws IllegalArgumentException { tif ( null = = key ) throw new IllegalArgumentException ( " key is null " ) ; tbyte [ ] bytes = null ; tif ( JRedisSupport . CacheKeys = = true ) tbytes = keyByteCache . get ( key ) ; tif ( null = = bytes ) { } 
public < T > boolean register ( Codec < T > code , Class < T > type ) { tCodec < ? > existing = map . get ( type ) ; tif ( null = = existing ) { tif ( code . supports ( type ) ) { tmap . put ( type , code ) ; treturn true ; } } treturn false ; } 
private void writeObject ( ObjectOutputStream out ) throws IOException { tout . defaultWriteObject ( ) ; tout . writeObject ( srcRef . get ( ) ) ; } 
private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { tin . defaultReadObject ( ) ; tsrcRef = new WeakReference < SRC > ( ( SRC ) in . readObject ( ) ) ; } 
tprotected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
tprotected abstract JRedis newConnection ( String host , int port , int db , String password ) throws ClientRuntimeException ; protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . ping ( ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . dbsize ( ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . sadd ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . lpush ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . rpush ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . incr ( key ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . decr ( key ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . incrby ( key , 10 ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . decrby ( key , 10 ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . set ( key , data ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . setnx ( key , data ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected abstract Class < ? extends JRedis > getImplementationClass ( ) ; protected abstract void work();}} 
tprotected abstract JRedis newConnection ( String host , int port , int db , String password ) throws ClientRuntimeException ; protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . ping ( ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . dbsize ( ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . sadd ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . lpush ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . rpush ( key , i ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . incr ( key ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . decr ( key ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . incrby ( key , 10 ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . decrby ( key , 10 ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newSetWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tbyte [ ] data = fixedbytes ; 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . set ( key , data ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newSetnxWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tbyte [ ] data = fixedbytes ; 
tprotected void prep ( ) { } @Override tprotected void work ( ) { tfor ( int i = 0 ; i < reqCnt ; i + + ) { ttry { tjredis . setnx ( key , data ) ; } tcatch ( RedisException e ) { e . printStackTrace ( ) ; } } } } ; } protected abstract void work();}} 
public final BenchmarkWorker newGetWorker ( String host , int port , int db ) { treturn new BenchmarkWorker ( host , port , db ) { tbyte [ ] data = fixedbytes ; 
public void testCredentialsOverloads ( ) { tString property = Connection . Property . CREDENTIAL . name ( ) ; tlog . info ( String . format ( " TEST:CONNECTOR spec sematics - Credentials %s " , property ) ) ; } 
public static final byte [ ] toBytes ( int i ) { tif ( i < INT_N_65535 | | i > INT_P_65535 ) { treturn Integer . toString ( i ) . getBytes ( ) ; } tfinal int absi = Math . abs ( i ) ; tfinal byte [ ] cachedData = i2b_65535 [ absi ] ; tfinal byte [ ] data ; tif ( cachedData = = null ) { tdata = Integer . toString ( absi ) . getBytes ( ) ; ti2b_65535 [ absi ] = data ; } telse { tdata = cachedData ; } treturn i > = 0 ? data : getNegativeNumberBytes ( data ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tswitch ( cmd . requestType ) { tcase NO_ARG : } 
public FutureLong rpush ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureLong ( this . queueRequest ( Command . RPUSH , keybytes , value ) ) ; } 
public FutureLong rpushx ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureLong ( this . queueRequest ( Command . RPUSHX , keybytes , value ) ) ; } 
public FutureLong lpushx ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureLong ( this . queueRequest ( Command . LPUSHX , keybytes , value ) ) ; } 
public FutureLong linsert ( String key , boolean after , byte [ ] oldvalue , byte [ ] newvalue ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] bulk = new byte [ 4 ] [ ] ; bulk [ 0 ] = keybytes ; bulk [ 1 ] = ( after ? " AFTER " : " BEFORE " ) . getBytes ( ) ; bulk [ 2 ] = oldvalue ; bulk [ 3 ] = newvalue ; treturn new FutureLong ( this . queueRequest ( Command . LINSERT , bulk ) ) ; } 
public Future < Long > keystolist ( String pattern , String listname ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( pattern ) ) = = null ) tthrow new IllegalArgumentException ( " null key. " ) ; tbyte [ ] listnamedata = null ; tif ( ( listnamedata = JRedisSupport . getKeyBytes ( listname ) ) = = null ) tthrow new IllegalArgumentException ( " null list name. " ) ; treturn new FutureLong ( this . queueRequest ( Command . KEYSTOLIST , keydata , listnamedata ) ) ; } 
public FutureLong lpush ( String key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureLong ( this . queueRequest ( Command . LPUSH , keybytes , value ) ) ; } 
tprotected final void disconnect ( ) throws IllegalStateException { tAssert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; tsocketClose ( ) ; tisConnected = false ; cleanup ( ) ; tnotifyDisconnected ( ) ; tLog . debug ( " DISCONNECTED | conn: %s " , toString ( ) ) ; } 
public static final void error ( String msg ) { _error ( Category . ERROR , msg ) ; } public static final void error ( String msg , Throwable ) { logger . log ( Level . SEVERE , msg , ) ; } 
public static final void error ( String msg , Throwable ) { logger . log ( Level . SEVERE , msg , ) ; } public static final void error ( String msg , Object . . . args ) { _error ( Category . ERROR , msg , args ) ; } 
private static final void _error ( Category cat , String msg , Object . . . args ) { tmsg = String . format ( msg , args ) ; tif ( cat . equals ( Category . ERROR ) ) tlogger . severe ( String . format ( " %s " , msg ) ) ; 
public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType type ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < String > keys ( K pattern ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < String > keys ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int ttlseconds ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long ttl ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) throws RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > smembers ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] srandmember ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] spop ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , byte [ ] member ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > long zrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrange ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrevrange ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangeSubset ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrevrangeSubset ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrangebyscore ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zremrangebyscore ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zremrangebyrank ( K setkey , long minRank , long maxRank ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , byte [ ] member ) throws RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcount ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , String field , byte [ ] value ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , String field , String string ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , String field , Number number ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tboolean hset ( K key , String field , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] hget ( K key , String field ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hexists ( K key , String field ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hdel ( K key , String field ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long hlen ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < String > hkeys ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > hvals ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Map < String , byte [ ] > hgetall ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > JRedis multi ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > JRedis discard ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > JRedis flushdb ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > JRedis flushall ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean move ( K key , int dbIndex ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Sort sort ( K key ) ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void save ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void bgsave ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > String bgrewriteaof ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lastsave ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Map < String , String > tinfo ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void slaveof ( String host , int port ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void slaveofnone ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] echo ( byte [ ] msg ) throws RedisException ; public < K extends Object > byte [ ] echo ( String msg ) throws RedisException ; public < K extends Object > byte [ ] echo ( Number msg ) throws RedisException ; public < K extends Object , T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; public < K extends Object > ObjectInfo debug ( K key ) throws RedisException ; } 
public < K extends Object > byte [ ] echo ( String msg ) throws RedisException ; public < K extends Object > byte [ ] echo ( Number msg ) throws RedisException ; public < K extends Object , T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; public < K extends Object > ObjectInfo debug ( K key ) throws RedisException ; } 
public < K extends Object > byte [ ] echo ( Number msg ) throws RedisException ; public < K extends Object , T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; public < K extends Object > ObjectInfo debug ( K key ) throws RedisException ; } 
public < K extends Object , T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; public < K extends Object > ObjectInfo debug ( K key ) throws RedisException ; } 
public < K extends Object > Future < ResponseStatus > set ( K key , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , String stringValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , Number numberValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > set ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) ; public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > get ( K key ) ; public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( Map < String , byte [ ] > keyValueMap ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > substr ( K listkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , byte [ ] value ) ; public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > exists ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > del ( K . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < RedisType > type ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( K pattern ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > randomkey ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > rename ( K oldkey , K newkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > renamenx ( K oldkey , K brandnewkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > dbsize ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expire ( K key , int ttlseconds ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expireat ( K key , long epochtimeMillisecs ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > ttl ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , byte [ ] value ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , byte [ ] value , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > llen ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > lrange ( K listkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > ltrim ( K listkey , long keepFrom , long keepTo ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lindex ( K listkey , long index ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , byte [ ] member ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > scard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sinter ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sinterstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sunion ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sunionstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sdiff ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sdiffstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > smembers ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > srandmember ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > spop ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrange ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrevrange ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangeSubset ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrevrangeSubset ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcount ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyrank ( K setkey , long minRank , long maxRank ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , String string ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , Number number ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > hset ( K key , K entry , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > hget ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hexists ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hdel ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > hlen ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hkeys ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hvals ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Map < String , byte [ ] > > hgetall ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > flushdb ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > flushall ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > move ( K key , int dbIndex ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Sort sort ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > save ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > bgsave ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < String > bgrewriteaof ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lastsave ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Map < String , String > > tinfo ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > slaveof ( String host , int port ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > slaveofnone ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > echo ( byte [ ] msg ) ; public < K extends Object > Future < byte [ ] > echo ( String msg ) ; public < K extends Object > Future < byte [ ] > echo ( Number msg ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K extends Object > Future < byte [ ] > echo ( String msg ) ; public < K extends Object > Future < byte [ ] > echo ( Number msg ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K extends Object > Future < byte [ ] > echo ( Number msg ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K extends Object , T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
< K extends Object > Sort BY ( K pattern ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
< K extends Object > Sort GET ( K pattern ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
tSort LIMIT ( long from , long count ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
tSort DESC ( ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
tSort ALPHA ( ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
public static void main ( String [ ] args ) { } 
public < K extends Object > FutureString bgrewriteaof ( ) { tFuture < Response > futureResponse = this . queueRequest ( Command . BGREWRITEAOF ) ; treturn new FutureString ( futureResponse ) ; } 
public < K extends Object > Future < ResponseStatus > slaveof ( String host , int port ) { tbyte [ ] hostbytes = null ; tif ( ( hostbytes = JRedisSupport . getKeyBytes ( host ) ) = = null ) tthrow new IllegalArgumentException ( " invalid host => [ " + host + " ] " ) ; tbyte [ ] portbytes = null ; tif ( ( portbytes = Convert . toBytes ( port ) ) = = null ) tthrow new IllegalArgumentException ( " invalid port => [ " + port + " ] " ) ; treturn new FutureStatus ( this . queueRequest ( Command . SLAVEOF , hostbytes , portbytes ) ) ; } 
public < K extends Object > Future < ResponseStatus > slaveofnone ( ) { treturn new FutureStatus ( this . queueRequest ( Command . SLAVEOF , " no " . getBytes ( ) , " one " . getBytes ( ) ) ) ; } 
public < K extends Object > FutureStatus rename ( K oldkey , K newkey ) { tbyte [ ] oldkeydata = null ; tif ( ( oldkeydata = JRedisSupport . getKeyBytes ( oldkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; tbyte [ ] newkeydata = null ; tif ( ( newkeydata = JRedisSupport . getKeyBytes ( newkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; treturn new FutureStatus ( this . queueRequest ( Command . RENAME , oldkeydata , newkeydata ) ) ; } 
public < K extends Object > Future < Boolean > renamenx ( K oldkey , K newkey ) { tbyte [ ] oldkeydata = null ; tif ( ( oldkeydata = JRedisSupport . getKeyBytes ( oldkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; tbyte [ ] newkeydata = null ; tif ( ( newkeydata = JRedisSupport . getKeyBytes ( newkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . RENAMENX , oldkeydata , newkeydata ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > FutureLong rpush ( K key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureLong ( this . queueRequest ( Command . RPUSH , keybytes , value ) ) ; } 
public < K extends Object > FutureLong rpushx ( K key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureLong ( this . queueRequest ( Command . RPUSHX , keybytes , value ) ) ; } 
public < K extends Object > FutureLong lpushx ( K key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureLong ( this . queueRequest ( Command . LPUSHX , keybytes , value ) ) ; } 
public < K extends Object > FutureLong linsert ( K key , boolean after , byte [ ] oldvalue , byte [ ] newvalue ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; byte [ ] [ ] bulk = new byte [ 4 ] [ ] ; bulk [ 0 ] = keybytes ; bulk [ 1 ] = ( after ? " AFTER " : " BEFORE " ) . getBytes ( ) ; bulk [ 2 ] = oldvalue ; bulk [ 3 ] = newvalue ; treturn new FutureLong ( this . queueRequest ( Command . LINSERT , bulk ) ) ; } 
public < K extends Object > FutureLong linsertAfter ( K key , byte [ ] oldvalue , byte [ ] newvalue ) { return linsert ( key , true , oldvalue , newvalue ) ; } 
public < K extends Object > FutureLong linsertBefore ( K key , byte [ ] oldvalue , byte [ ] newvalue ) { return linsert ( key , false , oldvalue , newvalue ) ; } 
public < K extends Object > FutureByteArray rpoplpush ( String srcList , String destList ) { tbyte [ ] srckeybytes = null ; tif ( ( srckeybytes = JRedisSupport . getKeyBytes ( srcList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; tbyte [ ] destkeybytes = null ; tif ( ( destkeybytes = JRedisSupport . getKeyBytes ( destList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . RPOPLPUSH , srckeybytes , destkeybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > FutureLong rpush ( K key , String value ) { } 
public < K extends Object , T extends Serializable > FutureLong rpush ( K key , T value ) { treturn rpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > sadd ( K key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SADD , keybytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > sadd ( K key , Number value ) { treturn sadd ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > sadd ( K key , T value ) { treturn sadd ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > zadd ( K key , double score , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZADD , keybytes , Convert . toBytes ( score ) , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > zadd ( K key , double score , String value ) { treturn zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > zadd ( K key , double score , Number value ) { treturn zadd ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > zadd ( K key , double score , T value ) { treturn zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Double > zincrby ( K key , double score , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZINCRBY , keybytes , Convert . toBytes ( score ) , member ) ; treturn new FutureDouble ( futureResponse ) ; } 
public < K extends Object > Future < Double > zincrby ( K key , double score , String value ) { treturn zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Double > zincrby ( K key , double score , Number value ) { treturn zincrby ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Double > zincrby ( K key , double score , T value ) { treturn zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > FutureStatus set ( K key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; treturn new FutureStatus ( this . queueRequest ( Command . SET , keybytes , value ) ) ; } 
public < K extends Object , T extends Serializable > FutureStatus set ( K key , T value ) { treturn set ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . GETSET , keybytes , value ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > getset ( K key , Number value ) { treturn getset ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T value ) { treturn getset ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SETNX , keybytes , value ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > setnx ( K key , Number value ) { treturn setnx ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T value ) { treturn setnx ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Long > append ( K key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . APPEND , keybytes , value ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > append ( K key , Number value ) { treturn append ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Long > append ( K key , T value ) { treturn append ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > sismember ( K key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SISMEMBER , keybytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > sismember ( K key , String value ) { treturn sismember ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > sismember ( K key , Number numberValue ) { treturn sismember ( key , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > sismember ( K key , T object ) { treturn sismember ( key , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , byte [ ] member ) { tbyte [ ] srcKeyBytes = null ; tif ( ( srcKeyBytes = JRedisSupport . getKeyBytes ( srcKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + srcKey + " ] " ) ; tbyte [ ] destKeyBytes = null ; tif ( ( destKeyBytes = JRedisSupport . getKeyBytes ( destKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + destKey + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SMOVE , srcKeyBytes , destKeyBytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) { treturn smove ( srcKey , destKey , DefaultCodec . encode ( stringValue ) ) ; } 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) { treturn smove ( srcKey , destKey , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > smove ( K srcKey , K destKey , T object ) { treturn smove ( srcKey , destKey , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > Future < Boolean > hset ( K key , K field , byte [ ] value ) { tbyte [ ] keyBytes = null ; tif ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] entryBytes = null ; tif ( ( entryBytes = JRedisSupport . getKeyBytes ( field ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + field + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HSET , keyBytes , entryBytes , value ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > hset ( K key , K field , String stringValue ) { treturn hset ( key , field , DefaultCodec . encode ( stringValue ) ) ; } 
public < K extends Object > Future < Boolean > hset ( K key , K field , Number numberValue ) { treturn hset ( key , field , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > tFuture < Boolean > hset ( K key , K field , T object ) { treturn hset ( key , field , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > Future < byte [ ] > hget ( K key , K entry ) { tbyte [ ] keyBytes = null ; tif ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] entryBytes = null ; tif ( ( entryBytes = JRedisSupport . getKeyBytes ( entry ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + entry + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HGET , keyBytes , entryBytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > hexists ( K key , K entry ) { tbyte [ ] keyBytes = null ; tif ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] entryBytes = null ; tif ( ( entryBytes = JRedisSupport . getKeyBytes ( entry ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + entry + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HEXISTS , keyBytes , entryBytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > hdel ( K key , K entry ) { tbyte [ ] keyBytes = null ; tif ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] entryBytes = null ; tif ( ( entryBytes = JRedisSupport . getKeyBytes ( entry ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + entry + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HDEL , keyBytes , entryBytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Long > hlen ( K key ) { tbyte [ ] keyBytes = null ; tif ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HLEN , keyBytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < List < byte [ ] > > hkeys ( K key ) { tbyte [ ] keyBytes = null ; tif ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HKEYS , keyBytes ) ; treturn new FutureKeyList ( futureResponse ) ; } 
public < K extends Object > Future < List < byte [ ] > > hvals ( K key ) { tbyte [ ] keyBytes = null ; tif ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HKEYS , keyBytes ) ; treturn new FutureByteArrayList ( futureResponse ) ; } 
public < K extends Object > Future < Map < String , byte [ ] > > hgetall ( K key ) { tbyte [ ] keyBytes = null ; tif ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HGETALL , keyBytes ) ; treturn new FutureDataDictionary ( futureResponse ) ; } 
public < K extends Object > Future < Long > incr ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . INCR , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > incrby ( K key , int delta ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . INCRBY , keybytes , Convert . toBytes ( delta ) ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > decr ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . DECR , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > decrby ( K key , int delta ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . DECRBY , keybytes , Convert . toBytes ( delta ) ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > llen ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LLEN , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > scard ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SCARD , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > zcard ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZCARD , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > srandmember ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SRANDMEMBER , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > spop ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SPOP , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < Long > dbsize ( ) { tFuture < Response > futureResponse = this . queueRequest ( Command . DBSIZE ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > lastsave ( ) { tFuture < Response > futureResponse = this . queueRequest ( Command . LASTSAVE ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > get ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . GET , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > lindex ( K key , long index ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LINDEX , keybytes , Convert . toBytes ( index ) ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > lpop ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LPOP , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > rpop ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . RPOP , keybytes ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < byte [ ] > randomkey ( ) { tFuture < Response > futureResponse = this . queueRequest ( Command . RANDOMKEY ) ; treturn new FutureByteArray ( futureResponse ) ; } 
public < K extends Object > Future < RedisType > type ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; treturn new FutureRedisType ( this . queueRequest ( Command . TYPE , keybytes ) ) ; } 
public < K extends Object > Future < ObjectInfo > debug ( K key ) { tbyte [ ] keybytes = JRedisSupport . getKeyBytes ( key ) ; } 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) { tif ( null = = keys | | keys . length = = 0 ) throw new IllegalArgumentException ( " no keys specified " ) ; tbyte [ ] keydata = null ; tbyte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; tint i = 0 ; tfor ( String k : keys ) { tif ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . MGET , keybytes ) ) ; } 
public < K extends Object > FutureStatus mset ( Map < String , byte [ ] > keyValueMap ) { tKeyCodec codec = DefaultKeyCodec . provider ( ) ; tbyte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; tint i = 0 ; tfor ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { tmappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; tmappings [ i + + ] = e . getValue ( ) ; } treturn mset ( mappings ) ; } 
public < K extends Object > FutureStatus mset ( KeyValueSet . ByteArrays keyValueMap ) { treturn mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > FutureStatus mset ( KeyValueSet . Objects < T > keyValueMap ) { treturn mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < Boolean > msetnx ( Map < String , byte [ ] > keyValueMap ) { tKeyCodec codec = DefaultKeyCodec . provider ( ) ; tbyte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; tint i = 0 ; tfor ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { tmappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; tmappings [ i + + ] = e . getValue ( ) ; } treturn msetnx ( mappings ) ; } 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays keyValueMap ) { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings keyValueMap ) { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers keyValueMap ) { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < T > keyValueMap ) { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > smembers ( K key ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " null key. " ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . SMEMBERS , keydata ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > keys ( K pattern ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( pattern ) ) = = null ) tthrow new IllegalArgumentException ( " null key. " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . KEYS , keydata ) ; treturn new FutureKeyList ( futureResponse ) ; } 
public < K extends Object > Future < Long > keystolist ( String pattern , String listname ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( pattern ) ) = = null ) tthrow new IllegalArgumentException ( " null key. " ) ; tbyte [ ] listnamedata = null ; tif ( ( listnamedata = JRedisSupport . getKeyBytes ( listname ) ) = = null ) tthrow new IllegalArgumentException ( " null list name. " ) ; treturn new FutureLong ( this . queueRequest ( Command . KEYSTOLIST , keydata , listnamedata ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > lrange ( K key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . LRANGE , keybytes , fromBytes , toBytes ) ) ; } 
public < K extends Object > Future < byte [ ] > substr ( K key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureByteArray ( this . queueRequest ( Command . SUBSTR , keybytes , fromBytes , toBytes ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > zrange ( K key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . ZRANGE , keybytes , fromBytes , toBytes ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > zrangebyscore ( K key , double minScore , double maxScore ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minScore ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxScore ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . ZRANGEBYSCORE , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public < K extends Object > Future < Long > zremrangebyscore ( K key , double minScore , double maxScore ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minScore ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxScore ) ; treturn new FutureLong ( this . queueRequest ( Command . ZREMRANGEBYSCORE , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public < K extends Object > Future < Long > zcount ( K key , double minScore , double maxScore ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minScore ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxScore ) ; treturn new FutureLong ( this . queueRequest ( Command . ZCOUNT , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public < K extends Object > Future < Long > zremrangebyrank ( K key , long minRank , long maxRank ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minRank ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxRank ) ; treturn new FutureLong ( this . queueRequest ( Command . ZREMRANGEBYRANK , keybytes , minScoreBytes , maxScoreBytes ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > zrevrange ( K key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureByteArrayList ( this . queueRequest ( Command . ZREVRANGE , keybytes , fromBytes , toBytes ) ) ; } 
public < K extends Object > Future < List < ZSetEntry > > zrangeSubset ( K key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureZSetList ( this . queueRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public < K extends Object > Future < List < ZSetEntry > > zrevrangeSubset ( K key , long from , long to ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; treturn new FutureZSetList ( this . queueRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public < K extends Object > Sort sort ( final K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisFutureSupport client = this ; tSort sortQuery = new SortSupport ( keybytes ) { } 
public < K extends Object > Future < List < byte [ ] > > sinter ( K set1 , K . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( K k : sets ) { tif ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . SINTER , keybytes ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > sunion ( K set1 , K . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( K k : sets ) { tif ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . SUNION , keybytes ) ) ; } 
public < K extends Object > Future < List < byte [ ] > > sdiff ( K set1 , K . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ sets . length + 1 ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( K k : sets ) { tif ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } treturn new FutureByteArrayList ( this . queueRequest ( Command . SDIFF , keybytes ) ) ; } 
public < K extends Object > FutureStatus sinterstore ( K dest , K . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( K k : sets ) { tif ( ( setdata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } treturn new FutureStatus ( this . queueRequest ( Command . SINTERSTORE , setbytes ) ) ; } 
public < K extends Object > FutureStatus sunionstore ( K dest , K . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( K k : sets ) { tif ( ( setdata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } treturn new FutureStatus ( this . queueRequest ( Command . SUNIONSTORE , setbytes ) ) ; } 
public < K extends Object > FutureStatus sdiffstore ( K dest , K . . . sets ) { tbyte [ ] keydata = null ; tif ( ( keydata = JRedisSupport . getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( K k : sets ) { tif ( ( setdata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } treturn new FutureStatus ( this . queueRequest ( Command . SDIFFSTORE , setbytes ) ) ; } 
public < K extends Object > Future < Long > del ( K . . . keys ) { tif ( null = = keys | | keys . length = = 0 ) throw new IllegalArgumentException ( " no keys specified " ) ; tbyte [ ] keydata = null ; tbyte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; tint i = 0 ; tfor ( K k : keys ) { tif ( ( keydata = JRedisSupport . getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; tkeybytes [ i + + ] = keydata ; } tFuture < Response > futureResponse = this . queueRequest ( Command . DEL , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > exists ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . EXISTS , keybytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > FutureLong lpush ( K key , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value " ) ; treturn new FutureLong ( this . queueRequest ( Command . LPUSH , keybytes , value ) ) ; } 
public < K extends Object , T extends Serializable > FutureLong lpush ( K key , T value ) { treturn lpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Long > lrem ( K key , byte [ ] value , int count ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] countBytes = Convert . toBytes ( count ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LREM , keybytes , value , countBytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > lrem ( K listKey , String value , int count ) { treturn lrem ( listKey , DefaultCodec . encode ( value ) , count ) ; } 
public < K extends Object > Future < Long > lrem ( K listKey , Number numberValue , int count ) { treturn lrem ( listKey , String . valueOf ( numberValue ) . getBytes ( ) , count ) ; } 
public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listKey , T object , int count ) { treturn lrem ( listKey , DefaultCodec . encode ( object ) , count ) ; } 
public < K extends Object > FutureStatus lset ( K key , long index , byte [ ] value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] indexBytes = Convert . toBytes ( index ) ; treturn new FutureStatus ( this . queueRequest ( Command . LSET , keybytes , indexBytes , value ) ) ; } 
public < K extends Object > FutureStatus lset ( K key , long index , String value ) { treturn lset ( key , index , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > FutureStatus lset ( K key , long index , Number numberValue ) { treturn lset ( key , index , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > FutureStatus lset ( K key , long index , T object ) { treturn lset ( key , index , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > Future < Boolean > move ( K key , int dbIndex ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . MOVE , keybytes , Convert . toBytes ( dbIndex ) ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > srem ( K key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SREM , keybytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > srem ( K key , Number value ) { treturn srem ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > srem ( K key , T value ) { treturn srem ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Boolean > zrem ( K key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZREM , keybytes , member ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > zrem ( K key , Number value ) { treturn zrem ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > zrem ( K key , T value ) { treturn zrem ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Double > zscore ( K key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZSCORE , keybytes , member ) ; treturn new FutureDouble ( futureResponse ) ; } 
public < K extends Object > Future < Double > zscore ( K key , String value ) { treturn zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Double > zscore ( K key , Number value ) { treturn zscore ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Double > zscore ( K key , T value ) { treturn zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Long > zrank ( K key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZRANK , keybytes , member ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > zrank ( K key , Number value ) { treturn zrank ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Long > zrank ( K key , T value ) { treturn zrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Long > zrevrank ( K key , byte [ ] member ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ZREVRANK , keybytes , member ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > Future < Long > zrevrank ( K key , String value ) { treturn zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Future < Long > zrevrank ( K key , Number value ) { treturn zrevrank ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Long > zrevrank ( K key , T value ) { treturn zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > FutureStatus ltrim ( K key , long keepFrom , long keepTo ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( keepFrom ) ; tbyte [ ] toBytes = Convert . toBytes ( keepTo ) ; treturn new FutureStatus ( this . queueRequest ( Command . LTRIM , keybytes , fromBytes , toBytes ) ) ; } 
public < K extends Object > Future < Boolean > expire ( K key , int ttlseconds ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] ttlbytes = Convert . toBytes ( ttlseconds ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . EXPIRE , keybytes , ttlbytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Boolean > expireat ( K key , long epochtime ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong expiretime = TimeUnit . SECONDS . convert ( epochtime , TimeUnit . MILLISECONDS ) ; tbyte [ ] expiretimeBytes = Convert . toBytes ( expiretime ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . EXPIREAT , keybytes , expiretimeBytes ) ; treturn new FutureBoolean ( futureResponse ) ; } 
public < K extends Object > Future < Long > ttl ( K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . TTL , keybytes ) ; treturn new FutureLong ( futureResponse ) ; } 
public List < byte [ ] > get ( ) throws InterruptedException , ExecutionException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( ) ; tList < byte [ ] > multibulkdata = resp . getMultiBulkData ( ) ; return multibulkdata; } 
public List < byte [ ] > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( timeout , unit ) ; tList < byte [ ] > multibulkdata = resp . getMultiBulkData ( ) ; return multibulkdata; } 
private Map < String , String > getResultMap ( BulkResponse resp ) { tStringTokenizer tokenizer = new StringTokenizer ( new String ( resp . getBulkData ( ) ) , " r " ) ; tMap < String , String > infomap = new HashMap < String , String > ( 12 ) ; twhile ( tokenizer . hasMoreTokens ( ) ) { tString info = tokenizer . nextToken ( ) ; tint c = info . indexOf ( ':' ) ; tString _key = info . substring ( 0 , c ) ; tString _value = info . substring ( c + 1 ) ; tinfomap . put ( _key , _value ) ; } treturn infomap ; } 
public < K extends Object > Future < byte [ ] > echo ( byte [ ] msg ) { tif ( msg = = null ) tthrow new IllegalArgumentException ( " invalid value for echo => [null] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . ECHO , msg ) ; treturn new FutureByteArray ( futureResponse ) ; 
public < K extends Object , T extends Serializable > tFuture < byte [ ] > echo ( T msg ) { treturn echo ( DefaultCodec . encode ( msg ) ) ; } 
public < K extends Object > String bgrewriteaof ( ) throws RedisException { tString value = null ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . BGREWRITEAOF ) ; tvalue = valResponse . getStringValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > JRedis flushall ( ) throws RedisException { tthis . serviceRequest ( Command . FLUSHALL ) . getStatus ( ) ; treturn this ; } 
public < K extends Object > JRedis flushdb ( ) throws RedisException { tthis . serviceRequest ( Command . FLUSHDB ) . getStatus ( ) ; treturn this ; } 
public < K extends Object > void slaveof ( String host , int port ) throws RedisException { tbyte [ ] hostbytes = null ; tif ( ( hostbytes = getKeyBytes ( host ) ) = = null ) tthrow new IllegalArgumentException ( " invalid host => [ " + host + " ] " ) ; tbyte [ ] portbytes = null ; tif ( ( portbytes = Convert . toBytes ( port ) ) = = null ) tthrow new IllegalArgumentException ( " invalid port => [ " + port + " ] " ) ; tthis . serviceRequest ( Command . SLAVEOF , hostbytes , portbytes ) ; } 
public < K extends Object > void slaveofnone ( ) throws RedisException { tthis . serviceRequest ( Command . SLAVEOF , " no " . getBytes ( ) , " one " . getBytes ( ) ) ; } 
public < K extends Object > void rename ( K oldkey , K newkey ) throws RedisException { tbyte [ ] oldkeydata = null ; tif ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; tbyte [ ] newkeydata = null ; tif ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; tthis . serviceRequest ( Command . RENAME , oldkeydata , newkeydata ) ; } 
public < K extends Object > boolean renamenx ( K oldkey , K newkey ) throws RedisException { tbyte [ ] oldkeydata = null ; tif ( ( oldkeydata = getKeyBytes ( oldkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + oldkey + " ] " ) ; tbyte [ ] newkeydata = null ; tif ( ( newkeydata = getKeyBytes ( newkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + newkey + " ] " ) ; tboolean value = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . RENAMENX , oldkeydata , newkeydata ) ; tvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) tthrows RedisException { tbyte [ ] srckeybytes = null ; tif ( ( srckeybytes = getKeyBytes ( srcList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid src key => [ " + srcList + " ] " ) ; tbyte [ ] destkeybytes = null ; tif ( ( destkeybytes = getKeyBytes ( destList ) ) = = null ) tthrow new IllegalArgumentException ( " invalid dest key => [ " + destList + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . RPOPLPUSH , srckeybytes , destkeybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; 
public < K extends Object > void rpush ( K key , byte [ ] value ) tthrows RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value for list op " ) ; tthis . serviceRequest ( Command . RPUSH , keybytes , value ) ; } 
public < K extends Object > void rpush ( K key , String value ) throws RedisException { } 
public < K extends Object > void rpush ( K key , Number value ) throws RedisException { trpush ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > void rpush ( K key , T value ) throws RedisException { trpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean sadd ( K key , byte [ ] member ) tthrows RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean res = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SADD , keybytes , member ) ; tres = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn res ; } 
public < K extends Object > boolean sadd ( K key , String value ) throws RedisException { treturn sadd ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean sadd ( K key , Number value ) throws RedisException { treturn sadd ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean sadd ( K key , T value ) throws RedisException { treturn sadd ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean zadd ( K key , double score , byte [ ] member ) tthrows RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean res = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . ZADD , keybytes , Convert . toBytes ( score ) , member ) ; tres = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn res ; } 
public < K extends Object > boolean zadd ( K key , double score , String value ) throws RedisException { treturn zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean zadd ( K key , double score , Number value ) throws RedisException { treturn zadd ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean zadd ( K key , double score , T value ) throws RedisException { treturn zadd ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Double zincrby ( K key , double score , byte [ ] member ) tthrows RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tDouble resvalue = null ; ttry { tBulkResponse bulkResponse = ( BulkResponse ) this . serviceRequest ( Command . ZINCRBY , keybytes , Convert . toBytes ( score ) , member ) ; tif ( bulkResponse . getBulkData ( ) ! = null ) tresvalue = Convert . toDouble ( bulkResponse . getBulkData ( ) ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > Double zincrby ( K key , double score , String value ) throws RedisException { treturn zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Double zincrby ( K key , double score , Number value ) throws RedisException { treturn zincrby ( key , score , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Double zincrby ( K key , double score , T value ) throws RedisException { treturn zincrby ( key , score , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > void set ( K key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tthis . serviceRequest ( Command . SET , keybytes , value ) ; } 
public < K extends Object > void set ( K key , Number value ) throws RedisException { tset ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > void set ( K key , T value ) throws RedisException { tset ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > byte [ ] getset ( K key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . GETSET , keybytes , value ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public < K extends Object > byte [ ] getset ( K key , String value ) throws RedisException { treturn getset ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > byte [ ] getset ( K key , Number value ) throws RedisException { treturn getset ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > tbyte [ ] getset ( K key , T value ) throws RedisException { treturn getset ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean setnx ( K key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SETNX , keybytes , value ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > boolean setnx ( K key , String value ) throws RedisException { treturn setnx ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean setnx ( K key , Number value ) throws RedisException { treturn setnx ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean setnx ( K key , T value ) throws RedisException { treturn setnx ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long append ( K key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong resvalue = - 1 ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . APPEND , keybytes , value ) ; tresvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > long append ( K key , String value ) throws RedisException { treturn append ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long append ( K key , Number value ) throws RedisException { treturn append ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > long append ( K key , T value ) throws RedisException { treturn append ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean msetnx ( Map < String , byte [ ] > keyValueMap ) throws RedisException { tKeyCodec < Object > codec = DefaultKeyCodec . provider ( ) ; tbyte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; tint i = 0 ; tfor ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { tmappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; tmappings [ i + + ] = e . getValue ( ) ; } treturn msetnx ( mappings ) ; } 
public < K extends Object > boolean msetnx ( KeyValueSet . ByteArrays keyValueMap ) throws RedisException { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > boolean msetnx ( KeyValueSet . Strings keyValueMap ) throws RedisException { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > boolean msetnx ( KeyValueSet . Numbers keyValueMap ) throws RedisException { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean msetnx ( KeyValueSet . Objects < T > keyValueMap ) throws RedisException { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > boolean sismember ( K key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean value = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SISMEMBER , keybytes , member ) ; tvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > boolean sismember ( K key , String value ) throws RedisException { treturn sismember ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean sismember ( K key , Number numberValue ) throws RedisException { treturn sismember ( key , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean sismember ( K key , T object ) throws RedisException { treturn sismember ( key , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) throws RedisException { tbyte [ ] srcKeyBytes = null ; tif ( ( srcKeyBytes = getKeyBytes ( srcKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + srcKey + " ] " ) ; tbyte [ ] destKeyBytes = null ; tif ( ( destKeyBytes = getKeyBytes ( destKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + destKey + " ] " ) ; tboolean value = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SMOVE , srcKeyBytes , destKeyBytes , member ) ; tvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException { treturn smove ( srcKey , destKey , DefaultCodec . encode ( stringValue ) ) ; } 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException { treturn smove ( srcKey , destKey , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > tboolean smove ( K srcKey , K destKey , T object ) throws RedisException { treturn smove ( srcKey , destKey , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > boolean hset ( K hashKey , String hashField , byte [ ] value ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tboolean response = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . HSET , hashKeyBytes , hashFieldBytes , value ) ; tresponse = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn response ; } 
public < K extends Object > boolean hset ( K key , String field , String stringValue ) throws RedisException { treturn hset ( key , field , DefaultCodec . encode ( stringValue ) ) ; } 
public < K extends Object > boolean hset ( K key , String field , Number numberValue ) throws RedisException { treturn hset ( key , field , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > tboolean hset ( K key , String field , T object ) throws RedisException { treturn hset ( key , field , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > byte [ ] hget ( K hashKey , String hashField ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . HGET , hashKeyBytes , hashFieldBytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public < K extends Object > boolean hexists ( K hashKey , String hashField ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tboolean resp = false ; ttry { tValueResponse response = ( ValueResponse ) this . serviceRequest ( Command . HEXISTS , hashKeyBytes , hashFieldBytes ) ; tresp = response . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public < K extends Object > boolean hdel ( K hashKey , String hashField ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tboolean resp = false ; ttry { tValueResponse response = ( ValueResponse ) this . serviceRequest ( Command . HDEL , hashKeyBytes , hashFieldBytes ) ; tresp = response . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public < K extends Object > long hlen ( K hashKey ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tlong resp = 0 ; ttry { tValueResponse response = ( ValueResponse ) this . serviceRequest ( Command . HLEN , hashKeyBytes ) ; tresp = response . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public < K extends Object > List < String > hkeys ( K hashKey ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tList < String > resp = null ; ttry { tMultiBulkResponse response = ( MultiBulkResponse ) this . serviceRequest ( Command . HKEYS , hashKeyBytes ) ; tif ( null ! = response . getMultiBulkData ( ) ) resp = DefaultCodec . toStr ( response . getMultiBulkData ( ) ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public < K extends Object > List < byte [ ] > hvals ( K hashKey ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tList < byte [ ] > resp = null ; ttry { tMultiBulkResponse response = ( MultiBulkResponse ) this . serviceRequest ( Command . HVALS , hashKeyBytes ) ; tresp = response . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public < K extends Object > Map < String , byte [ ] > hgetall ( K hashKey ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tMap < String , byte [ ] > resp = null ; ttry { tMultiBulkResponse response = ( MultiBulkResponse ) this . serviceRequest ( Command . HGETALL , hashKeyBytes ) ; tList < byte [ ] > bulkdata = response . getMultiBulkData ( ) ; tif ( null ! = bulkdata ) { tresp = new HashMap < String , byte [ ] > ( bulkdata . size ( ) / 2 ) ; tfor ( int i = 0 ; i < bulkdata . size ( ) ; i + = 2 ) { tresp . put ( DefaultCodec . toStr ( bulkdata . get ( i ) ) , bulkdata . get ( i + 1 ) ) ; } } } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public < K extends Object > long incr ( K key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . INCR , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > long incrby ( K key , int delta ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . INCRBY , keybytes , Convert . toBytes ( delta ) ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > long decr ( K key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MAX_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . DECR , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > long decrby ( K key , int delta ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MAX_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . DECRBY , keybytes , Convert . toBytes ( delta ) ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > long llen ( K key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Integer . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . LLEN , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > long scard ( K key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SCARD , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > long zcard ( K key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . ZCARD , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > byte [ ] srandmember ( K setkey ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( setkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + setkey + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . SRANDMEMBER , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public < K extends Object > byte [ ] spop ( K setkey ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( setkey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + setkey + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . SPOP , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public < K extends Object > long dbsize ( ) throws RedisException { tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . DBSIZE ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > long lastsave ( ) throws RedisException { tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . LASTSAVE ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > byte [ ] get ( K key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . GET , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public < K extends Object > byte [ ] lindex ( K key , long index ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . LINDEX , keybytes , Convert . toBytes ( index ) ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public < K extends Object > byte [ ] lpop ( K key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . LPOP , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public < K extends Object > byte [ ] rpop ( K key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . RPOP , keybytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public byte [ ] randomkey ( ) throws RedisException { tbyte [ ] bulkData = null ; } 
public < K extends Object > RedisType type ( K key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tRedisType ttype = null ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . TYPE , keybytes ) ; tString stringValue = valResponse . getStringValue ( ) ; ttype = RedisType . valueOf ( stringValue ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn type ; } 
public < K extends Object > ObjectInfo debug ( K key ) throws RedisException { tbyte [ ] keybytes = getKeyBytes ( key ) ; } 
public < K extends Object > Map < String , String > info ( ) throws RedisException { tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . INFO ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } tStringTokenizer tokenizer = new StringTokenizer ( new String ( bulkData ) , " r " ) ; tMap < String , String > infomap = new HashMap < String , String > ( 12 ) ; twhile ( tokenizer . hasMoreTokens ( ) ) { tString info = tokenizer . nextToken ( ) ; tint c = info . indexOf ( ':' ) ; tString key = info . substring ( 0 , c ) ; tString value = info . substring ( c + 1 ) ; tinfomap . put ( key , value ) ; } treturn infomap ; } 
public < K extends Object > void mset ( Map < String , byte [ ] > keyValueMap ) throws RedisException { tKeyCodec < Object > codec = DefaultKeyCodec . provider ( ) ; tbyte [ ] [ ] mappings = new byte [ keyValueMap . size ( ) * 2 ] [ ] ; tint i = 0 ; tfor ( Entry < String , byte [ ] > e : keyValueMap . entrySet ( ) ) { tmappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; tmappings [ i + + ] = e . getValue ( ) ; } tmset ( mappings ) ; } 
public < K extends Object > void mset ( KeyValueSet . ByteArrays keyValueMap ) throws RedisException { tmset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > void mset ( KeyValueSet . Strings keyValueMap ) throws RedisException { tmset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > void mset ( KeyValueSet . Numbers keyValueMap ) throws RedisException { tmset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > void mset ( KeyValueSet . Objects < T > keyValueMap ) throws RedisException { tmset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > List < byte [ ] > mget ( String . . . keys ) throws RedisException { tif ( null = = keys | | keys . length = = 0 ) throw new IllegalArgumentException ( " no keys specified " ) ; tbyte [ ] keydata = null ; tbyte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; tint i = 0 ; tfor ( String k : keys ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . MGET , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > List < byte [ ] > smembers ( K key ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( key ) ) = = null ) tthrow new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . SMEMBERS , keydata ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > List < String > keys ( K pattern ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( pattern ) ) = = null ) tthrow new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . KEYS , keydata ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn DefaultCodec . toStr ( multiBulkData ) ; / * 
public < K extends Object > List < byte [ ] > lrange ( K key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . LRANGE , keybytes , fromBytes , toBytes ) ; tmultiBulkData = multiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > byte [ ] substr ( K key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse bulkResponse = ( BulkResponse ) this . serviceRequest ( Command . SUBSTR , keybytes , fromBytes , toBytes ) ; tbulkData = bulkResponse . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public < K extends Object > List < byte [ ] > zrangebyscore ( K key , double minScore , double maxScore ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( minScore ) ; tbyte [ ] toBytes = Convert . toBytes ( maxScore ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZRANGEBYSCORE , keybytes , fromBytes , toBytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > long zremrangebyscore ( K key , double minScore , double maxScore ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( minScore ) ; tbyte [ ] toBytes = Convert . toBytes ( maxScore ) ; tlong resp = Long . MIN_VALUE ; ttry { tValueResponse valueResponse = ( ValueResponse ) this . serviceRequest ( Command . ZREMRANGEBYSCORE , keybytes , fromBytes , toBytes ) ; tresp = valueResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public < K extends Object > long zcount ( K key , double minScore , double maxScore ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( minScore ) ; tbyte [ ] toBytes = Convert . toBytes ( maxScore ) ; tlong resp = Long . MIN_VALUE ; ttry { tValueResponse valueResponse = ( ValueResponse ) this . serviceRequest ( Command . ZCOUNT , keybytes , fromBytes , toBytes ) ; tresp = valueResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public < K extends Object > long zremrangebyrank ( K key , long minRank , long maxRank ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( minRank ) ; tbyte [ ] toBytes = Convert . toBytes ( maxRank ) ; tlong resp = Long . MIN_VALUE ; ttry { tValueResponse valueResponse = ( ValueResponse ) this . serviceRequest ( Command . ZREMRANGEBYRANK , keybytes , fromBytes , toBytes ) ; tresp = valueResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a numeric ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public < K extends Object > List < byte [ ] > zrange ( K key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZRANGE , keybytes , fromBytes , toBytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > List < byte [ ] > zrevrange ( K key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZREVRANGE , keybytes , fromBytes , toBytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > List < ZSetEntry > zrangeSubset ( K key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < ZSetEntry > list = null ; ttry { tMultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Option . WITHSCORES . bytes ) ; tList < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; tif ( null ! = bulkData ) { tlist = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; tfor ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { tlist . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn list ; } 
public < K extends Object > List < ZSetEntry > zrevrangeSubset ( K key , long from , long to ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( from ) ; tbyte [ ] toBytes = Convert . toBytes ( to ) ; tList < ZSetEntry > list = null ; ttry { tMultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZREVRANGE$OPTS , keybytes , fromBytes , toBytes , Command . Option . WITHSCORES . bytes ) ; tList < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; tif ( null ! = bulkData ) { tlist = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; tfor ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { tlist . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn list ; } 
public < K extends Object > Sort sort ( final K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisSupport client = this ; } 
public < K extends Object > List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . SINTER , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . SUNION , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( String k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . SDIFF , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > void sinterstore ( String dest , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } tthis . serviceRequest ( Command . SINTERSTORE , setbytes ) ; } 
public < K extends Object > void sunionstore ( String dest , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } tthis . serviceRequest ( Command . SUNIONSTORE , setbytes ) ; } 
public < K extends Object > void sdiffstore ( String dest , String . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( String k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } tthis . serviceRequest ( Command . SDIFFSTORE , setbytes ) ; } 
public < K extends Object > long del ( K . . . keys ) throws RedisException { tif ( null = = keys | | keys . length = = 0 ) throw new IllegalArgumentException ( " no keys specified " ) ; tbyte [ ] keydata = null ; tbyte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; tint i = 0 ; tfor ( K k : keys ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; tkeybytes [ i + + ] = keydata ; } tlong resvalue = - 1 ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . DEL , keybytes ) ; tresvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > boolean exists ( K key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . EXISTS , keybytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > void lpush ( K key , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tif ( value = = null ) tthrow new IllegalArgumentException ( " null value for list op " ) ; tthis . serviceRequest ( Command . LPUSH , keybytes , value ) ; } 
public < K extends Object > void lpush ( K key , String value ) throws RedisException { tlpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > void lpush ( K key , Number value ) throws RedisException { tlpush ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > void lpush ( K key , T value ) throws RedisException { tlpush ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long lrem ( K key , byte [ ] value , int count ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] countBytes = Convert . toBytes ( count ) ; tlong remcnt = 0 ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . LREM , keybytes , value , countBytes ) ; tremcnt = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn remcnt ; } 
public < K extends Object > long lrem ( K listKey , String value , int count ) throws RedisException { treturn lrem ( listKey , DefaultCodec . encode ( value ) , count ) ; } 
public < K extends Object > long lrem ( K listKey , Number numberValue , int count ) throws RedisException { treturn lrem ( listKey , String . valueOf ( numberValue ) . getBytes ( ) , count ) ; } 
public < K extends Object , T extends Serializable > tlong lrem ( K listKey , T object , int count ) throws RedisException { treturn lrem ( listKey , DefaultCodec . encode ( object ) , count ) ; } 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] indexBytes = Convert . toBytes ( index ) ; tthis . serviceRequest ( Command . LSET , keybytes , indexBytes , value ) ; } 
public < K extends Object > void lset ( K key , long index , String value ) throws RedisException { tlset ( key , index , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException { tlset ( key , index , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException { tlset ( key , index , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > boolean move ( K key , int dbIndex ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] toBytes = Convert . toBytes ( dbIndex ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . MOVE , keybytes , toBytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > boolean srem ( K key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SREM , keybytes , member ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > boolean srem ( K key , String value ) throws RedisException { treturn srem ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean srem ( K key , Number value ) throws RedisException { treturn srem ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean srem ( K key , T value ) throws RedisException { treturn srem ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean zrem ( K key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . ZREM , keybytes , member ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > boolean zrem ( K key , String value ) throws RedisException { treturn zrem ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > boolean zrem ( K key , Number value ) throws RedisException { treturn zrem ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean zrem ( K key , T value ) throws RedisException { treturn zrem ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Double zscore ( K key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tDouble resvalue = null ; ttry { tBulkResponse bulkResponse = ( BulkResponse ) this . serviceRequest ( Command . ZSCORE , keybytes , member ) ; tif ( bulkResponse . getBulkData ( ) ! = null ) tresvalue = Convert . toDouble ( bulkResponse . getBulkData ( ) ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > Double zscore ( K key , String value ) throws RedisException { treturn zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > Double zscore ( K key , Number value ) throws RedisException { treturn zscore ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > Double zscore ( K key , T value ) throws RedisException { treturn zscore ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long zrank ( K key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong resvalue = - 1 ; ttry { tValueResponse bulkResponse = ( ValueResponse ) this . serviceRequest ( Command . ZRANK , keybytes , member ) ; tresvalue = bulkResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > long zrank ( K key , String value ) throws RedisException { treturn zrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long zrank ( K key , Number value ) throws RedisException { treturn zrank ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > long zrank ( K key , T value ) throws RedisException { treturn zrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long zrevrank ( K key , byte [ ] member ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong resvalue = - 1 ; ttry { tValueResponse bulkResponse = ( ValueResponse ) this . serviceRequest ( Command . ZREVRANK , keybytes , member ) ; tresvalue = bulkResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > long zrevrank ( K key , String value ) throws RedisException { treturn zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > long zrevrank ( K key , Number value ) throws RedisException { treturn zrevrank ( key , String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > long zrevrank ( K key , T value ) throws RedisException { treturn zrevrank ( key , DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > void ltrim ( K key , long keepFrom , long keepTo ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( keepFrom ) ; tbyte [ ] toBytes = Convert . toBytes ( keepTo ) ; tthis . serviceRequest ( Command . LTRIM , keybytes , fromBytes , toBytes ) ; } 
public < K extends Object > boolean expire ( K key , int ttlseconds ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] ttlbytes = Convert . toBytes ( ttlseconds ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . EXPIRE , keybytes , ttlbytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > boolean expireat ( K key , long epochtime ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong expiretime = TimeUnit . SECONDS . convert ( epochtime , TimeUnit . MILLISECONDS ) ; tbyte [ ] expiretimeBytes = Convert . toBytes ( expiretime ) ; tboolean resvalue = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . EXPIREAT , keybytes , expiretimeBytes ) ; tresvalue = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resvalue ; } 
public < K extends Object > long ttl ( K key ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tlong value = Long . MIN_VALUE ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . TTL , keybytes ) ; tvalue = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn value ; } 
public < K extends Object > byte [ ] echo ( byte [ ] value ) throws RedisException { tif ( value = = null ) tthrow new IllegalArgumentException ( " invalid echo value => [null] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . ECHO , value ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public < K extends Object > byte [ ] echo ( Number value ) throws RedisException { treturn echo ( String . valueOf ( value ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > tbyte [ ] echo ( T value ) throws RedisException { treturn echo ( DefaultCodec . encode ( value ) ) ; } 
public < K extends Object > JRedis multi ( ) throws RedisException { tthrow new ProviderException ( " NOT IMPLEMENTED " ) ; works 
public < K extends Object > JRedis discard ( ) throws RedisException { tthrow new ProviderException ( " NOT IMPLEMENTED " ) ; works 
public static < K extends Object > byte [ ] getKeyBytes ( K key ) throws IllegalArgumentException { treturn DefaultKeyCodec . provider ( ) . encode ( key ) ; if(null == key) throw new IllegalArgumentException("key is null"); 
public byte [ ] encode ( K key ) { tif ( null = = key ) throw new IllegalArgumentException ( " key is null " ) ; tif ( key instanceof String ) { treturn encodeString ( ( String ) key ) ; 
public static byte [ ] encodeString ( String key ) throws IllegalArgumentException { tif ( null = = key ) throw new IllegalArgumentException ( " key is null " ) ; tbyte [ ] bytes = null ; tif ( JRedisSupport . CacheKeys = = true ) tbytes = keyByteCache . get ( key ) ; tif ( null = = bytes ) { } 
public K decode ( byte [ ] bytes ) { tthrow new RuntimeException ( " TODO Auto-generated Codec<K>#decode stub -- NOT IMPLEMENTED " ) ; } 
public byte [ ] encode ( K object ) { tthrow new RuntimeException ( " TODO Auto-generated Codec<K>#encode stub -- NOT IMPLEMENTED " ) ; } 
public boolean supports ( Class < ? > type ) { tthrow new RuntimeException ( " TODO Auto-generated Codec<K>#supports stub -- NOT IMPLEMENTED " ) ; } 
public Sort ALPHA ( ) { } 
public Sort DESC ( ) { } 
public < K extends Object > Sort BY ( K pattern ) { } 
public < K extends Object > Sort GET ( K pattern ) { } 
public Sort LIMIT ( long from , long count ) { tif ( from < 0 ) { throw new ClientRuntimeException ( " from in LIMIT clause: " + from ) ; } tif ( count < = 0 ) { throw new ClientRuntimeException ( " count in LIMIT clause: " + from ) ; } } 
public < K extends Object > Sort STORE ( K destKey ) { tAssert . notNull ( destKey , " deskKey is null " , ClientRuntimeException . class ) ; } 
private final byte [ ] [ ] buildSortCmd ( ) { ArrayList < byte [ ] > sortSpecs = new ArrayList < byte [ ] > ( ) ; sortSpecs . addAll ( bySpec ) ; sortSpecs . addAll ( limitSpec ) ; sortSpecs . addAll ( getSpec ) ; sortSpecs . addAll ( descSpec ) ; sortSpecs . addAll ( alphaSpec ) ; sortSpecs . addAll ( storeSpec ) ; byte [ ] [ ] sortCmd = new byte [ sortSpecs . size ( ) + 1 ] [ ] ; sortCmd [ 0 ] = keyBytes ; for ( int i = 0 ; i < sortSpecs . size ( ) ; i + + ) { sortCmd [ i + 1 ] = sortSpecs . get ( i ) ; } 
public List < byte [ ] > exec ( ) throws IllegalStateException , RedisException { } 
public Future < List < byte [ ] > > execAsynch ( ) { } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; tPendingRequest pendingResponse = null ; tsynchronized ( serviceLock ) { tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tRequest request = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; tif ( cmd ! = Command . QUIT ) trequest . write ( getOutputStream ( ) ) ; telse { tpendingQuit = true ; tisActive . set ( false ) ; return pendingResponse; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException } 
public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType type ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > mget ( K . . . keys ) throws RedisException { tif ( null = = keys | | keys . length = = 0 ) throw new IllegalArgumentException ( " no keys specified " ) ; tbyte [ ] keydata = null ; tbyte [ ] [ ] keybytes = new byte [ keys . length ] [ ] ; tint i = 0 ; tfor ( K k : keys ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] @ index: " + i ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . MGET , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > List < byte [ ] > keys ( K pattern ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( pattern ) ) = = null ) tthrow new RedisException ( Command . KEYS , " ERR Invalid key. " ) ; tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . KEYS , keydata ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } /* 
public < K extends Object > Future < ResponseStatus > set ( K key , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , String stringValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , Number numberValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > set ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) ; public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > get ( K key ) ; public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public KeyValueSet < K , T > add ( K key , T value ) ; tbyte [ ] [ ] getMappings ( ) ; public interface ByteArrays < K extends Object > extends KeyValueSet < K , byte [ ] > { } public interface Numbers < K extends Object > extends KeyValueSet < K , Number > { } public interface Strings < K extends Object > extends KeyValueSet < K , String > { } public interface Objects < K extends Object , T extends Serializable > extends KeyValueSet < K , T > { } }} 
tbyte [ ] [ ] getMappings ( ) ; public interface ByteArrays < K extends Object > extends KeyValueSet < K , byte [ ] > { } public interface Numbers < K extends Object > extends KeyValueSet < K , Number > { } public interface Strings < K extends Object > extends KeyValueSet < K , String > { } public interface Objects < K extends Object , T extends Serializable > extends KeyValueSet < K , T > { } }} 
tabstract byte [ ] toBytes ( T value ) ; public byte [ ] [ ] getMappings ( ) { tKeyCodec < Object > codec = DefaultKeyCodec . provider ( ) ; tbyte [ ] [ ] mappings = new byte [ map . size ( ) * 2 ] [ ] ; tint i = 0 ; tfor ( Entry < Object , T > e : map . entrySet ( ) ) { tmappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; tmappings [ i + + ] = toBytes ( e . getValue ( ) ) ; } treturn mappings ; } public KeyValueSet < K , T > add ( K key , T value ) { tmap . put ( key , value ) ; return this ; } }} 
public byte [ ] [ ] getMappings ( ) { tKeyCodec < Object > codec = DefaultKeyCodec . provider ( ) ; tbyte [ ] [ ] mappings = new byte [ map . size ( ) * 2 ] [ ] ; tint i = 0 ; tfor ( Entry < Object , T > e : map . entrySet ( ) ) { tmappings [ i + + ] = codec . encode ( e . getKey ( ) ) ; tmappings [ i + + ] = toBytes ( e . getValue ( ) ) ; } treturn mappings ; } 
public static < K extends Object > KeyValueSet . ByteArrays < K > newByteArrayKVSet ( ) { return new BulkSetMapping . Bytes < K > ( ) ; } tfinal static class Bytes < K extends Object > extends BulkSetMapping < K , byte [ ] > implements KeyValueSet . ByteArrays < K > { 
public static < K extends Object > KeyValueSet . Strings < K > newStringKVSet ( ) { return new BulkSetMapping . Strings < K > ( ) ; } tfinal static class Strings < K extends Object > extends BulkSetMapping < K , String > implements KeyValueSet . Strings < K > { 
public static < K extends Object > KeyValueSet . Numbers < K > newNumberKVSet ( ) { return new BulkSetMapping . Numbers < K > ( ) ; } tfinal static class Numbers < K extends Object > extends BulkSetMapping < K , Number > implements KeyValueSet . Numbers < K > { 
public static < K extends Object , T extends Serializable > KeyValueSet . Objects < K , T > newObjectKVSet ( ) { return new BulkSetMapping . Objects < K , T > ( ) ; } tfinal static class Objects < K extends Object , T extends Serializable > extends BulkSetMapping < K , T > implements KeyValueSet . Objects < K , T > { 
public < K extends Object > FutureStatus mset ( Map < K , byte [ ] > keyValueMap ) { } 
public < K extends Object > FutureStatus mset ( KeyValueSet . ByteArrays < K > keyValueMap ) { treturn mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > FutureStatus mset ( KeyValueSet . Strings < K > keyValueMap ) { treturn mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > FutureStatus mset ( KeyValueSet . Numbers < K > keyValueMap ) { treturn mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > FutureStatus mset ( KeyValueSet . Objects < K , T > keyValueMap ) { treturn mset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < Boolean > msetnx ( Map < K , byte [ ] > keyValueMap ) { } 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > keyValueMap ) { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > keyValueMap ) { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > keyValueMap ) { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > keyValueMap ) { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > boolean msetnx ( Map < K , byte [ ] > keyValueMap ) throws RedisException { } 
public < K extends Object > boolean msetnx ( KeyValueSet . ByteArrays < K > keyValueMap ) throws RedisException { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > boolean msetnx ( KeyValueSet . Strings < K > keyValueMap ) throws RedisException { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > boolean msetnx ( KeyValueSet . Numbers < K > keyValueMap ) throws RedisException { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > boolean msetnx ( KeyValueSet . Objects < K , T > keyValueMap ) throws RedisException { treturn msetnx ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > void mset ( Map < K , byte [ ] > keyValueMap ) throws RedisException { } 
public < K extends Object > void mset ( KeyValueSet . ByteArrays < K > keyValueMap ) throws RedisException { tmset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > void mset ( KeyValueSet . Strings < K > keyValueMap ) throws RedisException { tmset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object > void mset ( KeyValueSet . Numbers < K > keyValueMap ) throws RedisException { tmset ( keyValueMap . getMappings ( ) ) ; } 
public < K extends Object , T extends Serializable > void mset ( KeyValueSet . Objects < K , T > keyValueMap ) throws RedisException { tmset ( keyValueMap . getMappings ( ) ) ; } 
public static < K extends Object > byte [ ] getKeyBytes ( K key ) throws IllegalArgumentException { treturn DefaultKeyCodec . provider ( ) . encode ( key ) ; } 
public < K extends Object > long append ( K key , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType type ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int ttlseconds ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long ttl ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) throws RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > smembers ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] srandmember ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] spop ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , byte [ ] member ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > long zrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrange ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrevrange ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangeSubset ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrevrangeSubset ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrangebyscore ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zremrangebyscore ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zremrangebyrank ( K setkey , long minRank , long maxRank ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , byte [ ] member ) throws RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcount ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , byte [ ] value ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , String string ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , Number number ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tboolean hset ( K key , K field , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K hashKey , K hashField , byte [ ] value ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tboolean response = false ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . HSET , hashKeyBytes , hashFieldBytes , value ) ; tresponse = valResponse . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn response ; } 
public < K extends Object > boolean hset ( K key , K field , String stringValue ) throws RedisException { treturn hset ( key , field , DefaultCodec . encode ( stringValue ) ) ; } 
public < K extends Object > boolean hset ( K key , K field , Number numberValue ) throws RedisException { treturn hset ( key , field , String . valueOf ( numberValue ) . getBytes ( ) ) ; } 
public < K extends Object , T extends Serializable > tboolean hset ( K key , K field , T object ) throws RedisException { treturn hset ( key , field , DefaultCodec . encode ( object ) ) ; } 
public < K extends Object > long append ( K key , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType type ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int ttlseconds ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long ttl ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) throws RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( String set1 , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( String destSetKey , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( String set1 , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sunionstore ( String destSetKey , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sdiff ( String set1 , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sdiffstore ( String destSetKey , String . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > smembers ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] srandmember ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] spop ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , byte [ ] member ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > long zrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrange ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrevrange ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangeSubset ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrevrangeSubset ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrangebyscore ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zremrangebyscore ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zremrangebyrank ( K setkey , long minRank , long maxRank ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , byte [ ] member ) throws RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcount ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , byte [ ] value ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , String string ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , Number number ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tboolean hset ( K key , K field , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] hget ( K key , K field ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hexists ( K key , K field ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean hdel ( K key , K field ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long hlen ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > hkeys ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > hvals ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Map < byte [ ] , byte [ ] > hgetall ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Future < ResponseStatus > set ( K key , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , String stringValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , Number numberValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > set ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) ; public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > get ( K key ) ; public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > substr ( K listkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , byte [ ] value ) ; public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > exists ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > del ( K . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < RedisType > type ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( K pattern ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > randomkey ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > rename ( K oldkey , K newkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > renamenx ( K oldkey , K brandnewkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > dbsize ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expire ( K key , int ttlseconds ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expireat ( K key , long epochtimeMillisecs ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > ttl ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , byte [ ] value ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , byte [ ] value , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > llen ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > lrange ( K listkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > ltrim ( K listkey , long keepFrom , long keepTo ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lindex ( K listkey , long index ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , byte [ ] member ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > scard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sinter ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sinterstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sunion ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sunionstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sdiff ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sdiffstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > smembers ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > srandmember ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > spop ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrange ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrevrange ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangeSubset ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrevrangeSubset ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcount ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyrank ( K setkey , long minRank , long maxRank ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , String string ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , Number number ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > hset ( K key , K entry , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > hget ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hexists ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hdel ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > hlen ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hkeys ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hvals ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Map < byte [ ] , byte [ ] > > hgetall ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Map < byte [ ] , byte [ ] > > hgetall ( K key ) { tbyte [ ] keyBytes = null ; tif ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HGETALL , keyBytes ) ; treturn new FutureDataDictionary ( futureResponse ) ; } 
public < K extends Object > Sort sort ( final K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisFutureSupport client = this ; tSort sortQuery = new SortSupport ( keybytes ) { @Override tprotected Future < List < byte [ ] > > execAsynchSort ( byte [ ] . . . fullSortCmd ) { treturn new FutureByteArrayList ( client . queueRequest ( Command . SORT , fullSortCmd ) ) ; } tprotected Future < List < byte [ ] > > execAsynchSortStore ( byte [ ] . . . fullSortCmd ) { tFuture < Response > fResp = client . queueRequest ( Command . SORT$STORE , fullSortCmd ) ; tnew FutureLong ( fResp ) ; treturn new FutureSortStoreResp ( fResp ) ; } tprotected List < byte [ ] > execSort ( byte [ ] . . . fullSortCmd ) { tthrow new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } tprotected List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) { tthrow new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } } ; treturn sortQuery ; } 
public Map < byte [ ] , byte [ ] > get ( ) throws InterruptedException , ExecutionException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( ) ; treturn convert ( resp . getMultiBulkData ( ) ) ; } 
public Map < byte [ ] , byte [ ] > get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tMultiBulkResponse resp = ( MultiBulkResponse ) pendingRequest . get ( timeout , unit ) ; treturn convert ( resp . getMultiBulkData ( ) ) ; } 
private static final Map < byte [ ] , byte [ ] > convert ( List < byte [ ] > bulkdata ) { tMap < byte [ ] , byte [ ] > map = null ; tif ( null ! = bulkdata ) { tmap = new HashMap < byte [ ] , byte [ ] > ( bulkdata . size ( ) / 2 ) ; tfor ( int i = 0 ; i < bulkdata . size ( ) ; i + = 2 ) { return map; } 
public < K extends Object > byte [ ] hget ( K hashKey , K hashField ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . HGET , hashKeyBytes , hashFieldBytes ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn bulkData ; } 
public < K extends Object > boolean hexists ( K hashKey , K hashField ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tboolean resp = false ; ttry { tValueResponse response = ( ValueResponse ) this . serviceRequest ( Command . HEXISTS , hashKeyBytes , hashFieldBytes ) ; tresp = response . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public < K extends Object > boolean hdel ( K hashKey , K hashField ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tbyte [ ] hashFieldBytes = null ; tif ( ( hashFieldBytes = getKeyBytes ( hashField ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + hashField + " ] " ) ; tboolean resp = false ; ttry { tValueResponse response = ( ValueResponse ) this . serviceRequest ( Command . HDEL , hashKeyBytes , hashFieldBytes ) ; tresp = response . getBooleanValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public < K extends Object > List < byte [ ] > hkeys ( K hashKey ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tList < byte [ ] > multibulkData = null ; ttry { tMultiBulkResponse response = ( MultiBulkResponse ) this . serviceRequest ( Command . HKEYS , hashKeyBytes ) ; } 
public < K extends Object > Map < byte [ ] , byte [ ] > hgetall ( K hashKey ) throws RedisException { tbyte [ ] hashKeyBytes = null ; tif ( ( hashKeyBytes = getKeyBytes ( hashKey ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + hashKey + " ] " ) ; tMap < byte [ ] , byte [ ] > resp = null ; ttry { tMultiBulkResponse response = ( MultiBulkResponse ) this . serviceRequest ( Command . HGETALL , hashKeyBytes ) ; tList < byte [ ] > bulkdata = response . getMultiBulkData ( ) ; tif ( null ! = bulkdata ) { tresp = new HashMap < byte [ ] , byte [ ] > ( bulkdata . size ( ) / 2 ) ; tfor ( int i = 0 ; i < bulkdata . size ( ) ; i + = 2 ) { tresp . put ( bulkdata . get ( i ) , bulkdata . get ( i + 1 ) ) ; } } } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn resp ; } 
public static final Map < String , byte [ ] > toDataDictionary ( Map < byte [ ] , byte [ ] > binaryMap ) { tif ( null = = binaryMap ) return null ; tMap < String , byte [ ] > dict = new HashMap < String , byte [ ] > ( binaryMap . size ( ) ) ; tfor ( byte [ ] bkey : binaryMap . keySet ( ) ) tif ( null ! = bkey ) tdict . put ( toStr ( bkey ) , binaryMap . get ( bkey ) ) ; treturn dict ; } 
public < K extends Object > long append ( K key , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType type ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int ttlseconds ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long ttl ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) throws RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( K set1 , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Sort sort ( final K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisSupport client = this ; } 
public < K extends Object > List < byte [ ] > sinter ( K set1 , K . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( K k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . SINTER , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > long append ( K key , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType type ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int ttlseconds ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long ttl ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) throws RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( K set1 , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( K destSetKey , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( K dest , K . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( K k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } tthis . serviceRequest ( Command . SINTERSTORE , setbytes ) ; } 
public < K extends Object > long append ( K key , String stringValue ) throws RedisException ; public < K extends Object > long append ( K key , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long append ( K key , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long append ( K key , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean exists ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType type ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int ttlseconds ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long ttl ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) throws RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( K set1 , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( K destSetKey , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( K set1 , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sunionstore ( K destSetKey , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sdiff ( K set1 , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sdiffstore ( K destSetKey , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( K set1 , K . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( K k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . SUNION , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > List < byte [ ] > sdiff ( K set1 , K . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( set1 ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + set1 + " ] " ) ; tbyte [ ] [ ] keybytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; keybytes [ i + + ] = keydata ; tfor ( K k : sets ) { tif ( ( keydata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tkeybytes [ i + + ] = keydata ; } tList < byte [ ] > multiBulkData = null ; ttry { tMultiBulkResponse MultiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . SDIFF , keybytes ) ; tmultiBulkData = MultiBulkResponse . getMultiBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn multiBulkData ; } 
public < K extends Object > void sunionstore ( K dest , K . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( K k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } tthis . serviceRequest ( Command . SUNIONSTORE , setbytes ) ; } 
public < K extends Object > void sdiffstore ( K dest , K . . . sets ) throws RedisException { tbyte [ ] keydata = null ; tif ( ( keydata = getKeyBytes ( dest ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + dest + " ] " ) ; tbyte [ ] [ ] setbytes = new byte [ 1 + sets . length ] [ ] ; tint i = 0 ; tsetbytes [ i + + ] = keydata ; tbyte [ ] setdata = null ; tfor ( K k : sets ) { tif ( ( setdata = getKeyBytes ( k ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + k + " ] " ) ; tsetbytes [ i + + ] = setdata ; } tthis . serviceRequest ( Command . SDIFFSTORE , setbytes ) ; } 
private void run ( ) { tint database = 11 ; tConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; tJRedisFuture jredis = new JRedisAsynchClient ( connSpec ) ; tbyte [ ] key = " bench-jredis-pipeline-key " . getBytes ( ) ; tint iters = 100 * 1000 ; ttry { tcleandb ( jredis ) ; } catch ( Throwable e ) { te . printStackTrace ( ) ; treturn ; } tfor ( ; ; ) { tFuture < Long > frCounter = null ; 
private void run ( ) { tint database = 11 ; tConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; tJRedisFuture jredis = new JRedisPipeline ( connSpec ) ; tbyte [ ] key = " bench-jredis-pipeline-key " . getBytes ( ) ; tint iters = 100 * 1000 ; ttry { tcleandb ( jredis ) ; } catch ( Throwable e ) { te . printStackTrace ( ) ; treturn ; } tfor ( ; ; ) { tFuture < Long > frCounter = null ; 
protected void initializeComponents ( ) { tspec . setConnectionFlag ( Flag . PIPELINE , true ) ; tspec . setConnectionFlag ( Flag . RELIABLE , true ) ; tspec . setConnectionFlag ( Flag . SHARED , true ) ; tsuper . initializeComponents ( ) ; tserviceLock = new Object ( ) ; tisActive = new AtomicBoolean ( false ) ; tconnectionEstablished = new CountDownLatch ( 1 ) ; tpendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; trespHandler = new ResponseHandler ( ) ; trespHandlerThread = new Thread ( respHandler , " response-handler " ) ; trespHandlerThread . start ( ) ; tisActive . set ( false ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; tRequest trequest = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; return pendingResponse; } 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) tthrows RedisException { tif ( ! isConnected ( ) ) throw new NotConnectedException ( " Not connected! " ) ; tRequest trequest = null ; tResponse tresponse = null ; tResponseStatus status = null ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; ttry { } 
private void run ( ) throws RedisException { tint database = 11 ; tConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; tJRedis jredis = new JRedisClient ( connSpec ) ; tbyte [ ] key = " bench-jredis-pipeline-key " . getBytes ( ) ; tint iters = 100 * 1000 ; ttry { tcleandb ( jredis ) ; } catch ( Throwable e ) { te . printStackTrace ( ) ; treturn ; } tfor ( ; ; ) { tLong counter = null ; 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tbyte [ ] cmdLenBytes = Convert . toBytes ( cmd . bytes . length ) ; tbyte [ ] lineCntBytes = Convert . toBytes ( args . length + 1 ) ; } 
public < K extends Object > Future < ResponseStatus > set ( K key , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , String stringValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , Number numberValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > set ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) ; public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > get ( K key ) ; public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > substr ( K listkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , byte [ ] value ) ; public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > exists ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > del ( K . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < RedisType > type ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( K pattern ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > randomkey ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > rename ( K oldkey , K newkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > renamenx ( K oldkey , K brandnewkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > dbsize ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expire ( K key , int ttlseconds ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expireat ( K key , long epochtimeMillisecs ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > ttl ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , byte [ ] value ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , byte [ ] value , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > llen ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > lrange ( K listkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > ltrim ( K listkey , long keepFrom , long keepTo ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lindex ( K listkey , long index ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , byte [ ] member ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > scard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sinter ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sinterstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sunion ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sunionstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sdiff ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sdiffstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > smembers ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > srandmember ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > spop ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrange ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrevrange ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangeSubset ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrevrangeSubset ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcount ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyrank ( K setkey , long minRank , long maxRank ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , String string ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , Number number ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > hset ( K key , K entry , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > hget ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hexists ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hdel ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > hlen ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hkeys ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hvals ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Map < byte [ ] , byte [ ] > > hgetall ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > flushdb ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > flushall ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > move ( K key , int dbIndex ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public List < byte [ ] > exec ( ) throws IllegalStateException , RedisException ; public Future < List < byte [ ] > > execAsync ( ) ; public static class Support { public static long unpackValue ( List < byte [ ] > queryResult ) { tif ( null = = queryResult ) throw new ClientRuntimeException ( " queryResult is null " ) ; tif ( queryResult . size ( ) < 1 ) throw new ClientRuntimeException ( " queryResult must have at least 1 entry " ) ; treturn Long . parseLong ( new String ( queryResult . get ( 0 ) ) ) ; } } } 
public Future < List < byte [ ] > > execAsync ( ) ; public static class Support { public static long unpackValue ( List < byte [ ] > queryResult ) { tif ( null = = queryResult ) throw new ClientRuntimeException ( " queryResult is null " ) ; tif ( queryResult . size ( ) < 1 ) throw new ClientRuntimeException ( " queryResult must have at least 1 entry " ) ; treturn Long . parseLong ( new String ( queryResult . get ( 0 ) ) ) ; } } } 
< K extends Object > Sort BY ( K pattern ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
< K extends Object > Sort GET ( K pattern ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
tSort LIMIT ( long from , long count ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
tSort DESC ( ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
tSort ALPHA ( ) ; < K extends Object > Sort STORE ( K destKey ) ; } 
public static void main ( String [ ] args ) { tString host = " 127.0.0.1 " ; tint port = 6379 ; tint size = 3 ; tint workerCnt = 10 ; tint reqCnt = 20000 ; tint tdb = 13 ; tif ( args . length > 0 ) db = Integer . valueOf ( args [ 0 ] ) ; tif ( args . length > 1 ) workerCnt = Integer . valueOf ( args [ 1 ] ) ; tif ( args . length > 2 ) reqCnt = Integer . valueOf ( args [ 2 ] ) ; tif ( args . length > 3 ) size = Integer . parseInt ( args [ 3 ] ) ; tif ( args . length > 4 ) host = args [ 4 ] ; tSystem . out . format ( " ==> Usage: [db [conn [req [size [host]]]] " ) ; tnew JRedisClientBenchmark ( ) . runBenchmarks ( host , port , workerCnt , reqCnt , size , db ) ; } 
private void run ( ) { tint database = 11 ; tConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; tJRedisFuture jredis = new JRedisAsyncClient ( connSpec ) ; tbyte [ ] key = " bench-jredis-pipeline-key " . getBytes ( ) ; tint iters = 100 * 1000 ; ttry { tcleandb ( jredis ) ; } catch ( Throwable e ) { te . printStackTrace ( ) ; treturn ; } tfor ( ; ; ) { tFuture < Long > frCounter = null ; 
tfinal private Connection createAsyncConnection ( ) { tConnection . Factory cfact = ( Connection . Factory ) connSpec . getConnectionProperty ( Property . CONNECTION_FACTORY ) ; tConnection tconn = null ; ttry { tconn = Assert . notNull ( cfact . newConnection ( connSpec ) , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( ProviderException e ) { tLog . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; tthrow e ; } tcatch ( ClientRuntimeException e ) { tString msg = String . format ( " %s nMake sure your server is running. " , e . getMessage ( ) ) ; tLog . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; tconn = new FaultedConnection ( connSpec , msg ) ; } tLog . debug ( " %s: Using %s " , this . getClass ( ) . getSimpleName ( ) , conn ) ; treturn conn ; } 
public < K extends Object > Sort sort ( final K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisFutureSupport client = this ; tSort sortQuery = new SortSupport ( keybytes ) { @Override tprotected Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) { treturn new FutureByteArrayList ( client . queueRequest ( Command . SORT , fullSortCmd ) ) ; } tprotected Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) { tFuture < Response > fResp = client . queueRequest ( Command . SORT$STORE , fullSortCmd ) ; tnew FutureLong ( fResp ) ; treturn new FutureSortStoreResp ( fResp ) ; } tprotected List < byte [ ] > execSort ( byte [ ] . . . fullSortCmd ) { tthrow new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } tprotected List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) { tthrow new IllegalStateException ( " JRedisFuture does not support synchronous sort. " ) ; } } ; treturn sortQuery ; } 
tprotected Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) { treturn new FutureByteArrayList ( client . queueRequest ( Command . SORT , fullSortCmd ) ) ; } 
tprotected Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) { tFuture < Response > fResp = client . queueRequest ( Command . SORT$STORE , fullSortCmd ) ; tnew FutureLong ( fResp ) ; treturn new FutureSortStoreResp ( fResp ) ; } 
public < K extends Object > Sort sort ( final K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisSupport client = this ; } 
 protected Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) { tthrow new IllegalStateException ( " JRedis does not support asynchronous sort. " ) ; } 
 protected Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) { tthrow new IllegalStateException ( " JRedis does not support asynchronous sort. " ) ; } 
tprotected abstract void setConnection ( Connection connection ) ; }} 
tprotected Connection createSyncConnection ( ConnectionSpec connSpec ) { tConnection . Factory cfact = ( Connection . Factory ) connSpec . getConnectionProperty ( Property . CONNECTION_FACTORY ) ; tConnection tconn = null ; ttry { tconn = Assert . notNull ( cfact . newConnection ( connSpec ) , " connection delegate " , ClientRuntimeException . class ) ; } tcatch ( ProviderException e ) { tLog . bug ( " Couldn't create the handler delegate. => " + e . getLocalizedMessage ( ) ) ; tthrow e ; } tcatch ( ClientRuntimeException e ) { tString msg = String . format ( " %s nMake sure your server is running. " , e . getMessage ( ) ) ; tLog . error ( " Error creating connection -> " + e . getLocalizedMessage ( ) ) ; tsetConnection ( new FaultedConnection ( connSpec , msg ) ) ; } tLog . debug ( " %s: Using %s " , this . getClass ( ) . getSimpleName ( ) , conn ) ; treturn conn ; } 
tprotected Response createStatusResponse ( Command cmd ) { treturn new SyncLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , ValueType . STATUS ) ; } 
tprotected Response createBooleanResponse ( Command cmd ) { treturn new SyncLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , ValueType . BOOLEAN ) ; } 
tprotected Response createStringResponse ( Command cmd ) { treturn new SyncLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , ValueType . STRING ) ; } 
tprotected Response createNumberResponse ( Command cmd ) { tValueType flavor = ValueType . NUMBER64 ; treturn new SyncLineResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd , flavor ) ; } 
tprotected Response createBulkResponse ( Command cmd ) { treturn new SyncBulkResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd ) ; } 
tprotected Response createMultiBulkResponse ( Command cmd ) { treturn new SyncMultiBulkResponse ( new byte [ PREFERRED_LINE_BUFFER_SIZE ] , cmd ) ; } 
public Protocol newProtocol ( ConnectionSpec connSpec ) throws NotSupportedException { treturn connSpec . getConnectionFlag ( Connection . Flag . SHARED ) ? new ConcurrentSyncProtocol ( ) : new SyncProtocol ( ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tbyte [ ] cmdLenBytes = Convert . toBytes ( cmd . bytes . length ) ; tbyte [ ] lineCntBytes = Convert . toBytes ( args . length + 1 ) ; } 
tprotected Response createStatusResponse ( Command cmd ) { tif ( null = = cache_syncLineResponse ) tcache_syncLineResponse = new SyncLineResponse ( cmd , ValueType . STATUS ) ; telse { tcache_syncLineResponse . reset ( cmd ) ; } treturn cache_syncLineResponse ; } 
tprotected Response createBooleanResponse ( Command cmd ) { tif ( null = = cache_syncLineResponse ) tcache_syncLineResponse = new SyncLineResponse ( cmd , ValueType . BOOLEAN ) ; telse { tcache_syncLineResponse . reset ( cmd , ValueType . BOOLEAN ) ; } treturn cache_syncLineResponse ; } 
tprotected Response createStringResponse ( Command cmd ) { tif ( null = = cache_syncLineResponse ) tcache_syncLineResponse = new SyncLineResponse ( cmd , ValueType . STRING ) ; telse { tcache_syncLineResponse . reset ( cmd , ValueType . STRING ) ; } treturn cache_syncLineResponse ; } 
tprotected Response createNumberResponse ( Command cmd ) { tValueType flavor = ValueType . NUMBER64 ; tif ( null = = cache_syncLineResponse ) tcache_syncLineResponse = new SyncLineResponse ( cmd , flavor ) ; telse { tcache_syncLineResponse . reset ( cmd , flavor ) ; } treturn cache_syncLineResponse ; } 
tprotected Response createBulkResponse ( Command cmd ) { tif ( null = = cache_syncBulkResponse ) tcache_syncBulkResponse = new SyncBulkResponse ( cmd ) ; telse { tcache_syncBulkResponse . reset ( cmd ) ; } treturn cache_syncBulkResponse ; } 
tprotected Response createMultiBulkResponse ( Command cmd ) { tif ( null = = cache_syncMultiBulkResponse ) tcache_syncMultiBulkResponse = new SyncMultiBulkResponse ( cmd ) ; telse { tcache_syncMultiBulkResponse . reset ( cmd ) ; } treturn cache_syncMultiBulkResponse ; } 
public static final int toInt ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) throws IllegalArgumentException { tfinal byte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final long toLong ( byte [ ] potentiallySignedAsciiBytes , int offset , int len ) throws IllegalArgumentException { tfinal byte [ ] buff = potentiallySignedAsciiBytes ; } 
public Future < List < byte [ ] > > execAsync ( ) { } 
tprotected abstract List < byte [ ] > execSort ( byte [ ] . . . fullSortCmd ) throws IllegalStateException , RedisException ; tprotected abstract List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) throws IllegalStateException , RedisException ; tprotected abstract Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) ; tprotected abstract Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) ; } 
tprotected abstract List < byte [ ] > execSortStore ( byte [ ] . . . fullSortCmd ) throws IllegalStateException , RedisException ; tprotected abstract Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) ; tprotected abstract Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) ; } 
tprotected abstract Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) ; tprotected abstract Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) ; } 
tprotected JRedisFuture newProviderInstance ( ) { tJRedisFuture provider = null ; ttry { tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( this . host , this . port , this . db2 , this . password . getBytes ( ) ) ; tprovider = new JRedisAsyncClient ( connectionSpec ) ; } catch ( ClientRuntimeException e ) { tLog . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
public void testSort ( ) throws InterruptedException { tcmd = Command . SORT . code ; tLog . log ( " TEST: %s command " , cmd ) ; tfinal String setkey = " set-key " ; tfinal String listkey = " list-key " ; ttry { tprovider . flushdb ( ) ; tfor ( int i = 0 ; i < MEDIUM_CNT ; i + + ) { tprovider . sadd ( setkey , stringList . get ( i ) ) ; tprovider . lpush ( listkey , stringList . get ( i ) ) ; } tint cnt1 = MEDIUM_CNT , cnt2 = 9 , cnt3 = 1 ; tFuture < List < byte [ ] > > sortListResp1 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , cnt1 ) . DESC ( ) . execAsync ( ) ; tFuture < List < byte [ ] > > sortListResp2 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 10 , cnt2 ) . DESC ( ) . execAsync ( ) ; tFuture < List < byte [ ] > > sortListResp3 = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( MEDIUM_CNT - 1 , cnt3 ) . DESC ( ) . execAsync ( ) ; tFuture < List < byte [ ] > > sortSetResp = provider . sort ( setkey ) . ALPHA ( ) . LIMIT ( 0 , 555 ) . DESC ( ) . execAsync ( ) ; ttry { tassertEquals ( sortListResp1 . get ( ) . size ( ) , cnt1 , " expecting sort results of size MEDIUM_CNT " ) ; tassertEquals ( sortListResp2 . get ( ) . size ( ) , cnt2 , " expecting sort results of size 9 " ) ; tassertEquals ( sortListResp3 . get ( ) . size ( ) , cnt3 , " expecting sort results of size 1 " ) ; tLog . log ( " TEST: SORTED LIST " ) ; tfor ( String s : toStr ( sortListResp1 . get ( ) ) ) tSystem . out . format ( " [t.1] %s " , s ) ; tLog . log ( " TEST: SORTED LIST " ) ; tfor ( String s : toStr ( sortListResp2 . get ( ) ) ) tSystem . out . format ( " [t.1] %s " , s ) ; tLog . log ( " TEST: SORTED LIST " ) ; tfor ( String s : toStr ( sortListResp3 . get ( ) ) ) tSystem . out . format ( " [t.1] %s " , s ) ; tLog . log ( " TEST: SORTED SET " ) ; tfor ( String s : toStr ( sortSetResp . get ( ) ) ) tSystem . out . format ( " %s " , s ) ; tString destKey = String . format ( " %s_store " , listkey ) ; tList < byte [ ] > ssres = provider . sort ( listkey ) . ALPHA ( ) . LIMIT ( 0 , MEDIUM_CNT ) . DESC ( ) . STORE ( destKey ) . execAsync ( ) . get ( ) ; tassertNotNull ( ssres , " result of srot with STORE should be non-null " ) ; tassertEquals ( ssres . size ( ) , 1 , " result of sort with STORE should be a list of single entry (the stored list's size) " ) ; tlong sortedListSize = Query . Support . unpackValue ( ssres ) ; tassertEquals ( sortedListSize , MEDIUM_CNT ) ; tRedisType type = provider . type ( destKey ) . get ( ) ; tassertEquals ( type , RedisType . list , " dest key of SORT .. STORE should be a LIST " ) ; tlong sslistSize = provider . llen ( destKey ) . get ( ) ; tassertEquals ( sslistSize , sortedListSize , " result of SORT ... STORE and LLEN of destkey list should be same " ) ; } tcatch ( ExecutionException e ) { tThrowable cause = e . getCause ( ) ; tfail ( cmd + " ERROR => " + cause . getLocalizedMessage ( ) , e ) ; } } tcatch ( ClientRuntimeException e ) { fail ( cmd + " Runtime ERROR => " + e . getLocalizedMessage ( ) , e ) ; } 
public static void usingAsyncClient ( ) { tConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( " jredis " . getBytes ( ) ) . setDatabase ( 10 ) ; tJRedisFuture jredis = new JRedisAsyncClient ( spec ) ; tSystem . out . println ( " nusing the AsyncClient: " ) ; tuseMSet ( jredis ) ; tuseMSetNX ( jredis ) ; jredis . quit ( ) ; 
public static void usingAsyncClient ( ) { tConnectionSpec spec = DefaultConnectionSpec . newSpec ( ) . setCredentials ( " jredis " . getBytes ( ) ) . setDatabase ( 10 ) ; tJRedisFuture jredis = new JRedisAsyncClient ( spec ) ; tSystem . out . println ( " n** using JRedisFuture ** " ) ; tuseZRangeSubset ( jredis ) ; jredis . quit ( ) ; 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tbyte [ ] cmdLenBytes = Convert . toBytes ( cmd . bytes . length ) ; tbyte [ ] lineCntBytes = Convert . toBytes ( args . length + 1 ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tbyte [ ] cmdLenBytes = Convert . toBytes ( cmd . bytes . length ) ; tbyte [ ] lineCntBytes = Convert . toBytes ( args . length + 1 ) ; } 
public static final < T , E extends RuntimeException > tT notNull ( T obj , int idx , Class < E > clazz ) tthrows E { tif ( null = = obj ) { throwIt ( String . format ( " null reference: arg {%d} " , idx ) , clazz ) ; } treturn obj ; } 
public < K extends Object > Future < Long > lrem ( K key , byte [ ] value , int count ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] countBytes = Convert . toBytes ( count ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . LREM , keybytes , countBytes , value ) ; treturn new FutureLong ( futureResponse ) ; } 
public < K extends Object > long lrem ( K key , byte [ ] value , int count ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] countBytes = Convert . toBytes ( count ) ; tlong remcnt = 0 ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . LREM , keybytes , countBytes , value ) ; tremcnt = valResponse . getLongValue ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a ValueResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn remcnt ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tbyte [ ] cmdLenBytes = Convert . toBytes ( cmd . bytes . length ) ; tbyte [ ] lineCntBytes = Convert . toBytes ( args . length + 1 ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tbyte [ ] cmdLenBytes = Convert . toBytes ( cmd . bytes . length ) ; tbyte [ ] lineCntBytes = Convert . toBytes ( args . length + 1 ) ; buffer . write ( COUNT_BYTE ) ; buffer . write ( lineCntBytes ) ; buffer . write ( CRLF ) ; buffer . write ( SIZE_BYTE ) ; buffer . write ( cmdLenBytes ) ; buffer . write ( CRLF ) ; buffer . write ( cmd . bytes ) ; buffer . write ( CRLF ) ; tswitch ( cmd . requestType ) { tcase NO_ARG : break ; tcase KEY : tcase VALUE : tcase KEY_NUM_NUM : tcase KEY_NUM_NUM_OPTS : case KEY_KEY : case KEY_NUM : tcase KEY_VALUE : tcase KEY_IDX_VALUE : tcase KEY_KEY_VALUE : tcase KEY_CNT_VALUE : tcase MULTI_KEY : tfor ( int i = 0 ; i < args . length ; i + + ) { tbuffer . write ( SIZE_BYTE ) ; tbuffer . write ( Convert . toBytes ( Assert . notNull ( args [ i ] , i , ProviderException . class ) . length ) ) ; tbuffer . write ( CRLF ) ; tbuffer . write ( args [ i ] ) ; tbuffer . write ( CRLF ) ; } tbreak ; tcase BULK_SET : tfinal String errmsg = " Only MSET, MSETNX, LINSERT bulk commands are supported " ; tAssert . isTrue ( cmd = = Command . MSET | | cmd = = Command . MSETNX | | cmd = = Command . LINSERT , errmsg , NotSupportedException . class ) ; } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { tByteArrayOutputStream buffer = createRequestBufffer ( cmd ) ; ttry { tbyte [ ] cmdLenBytes = Convert . toBytes ( cmd . bytes . length ) ; tbyte [ ] lineCntBytes = Convert . toBytes ( args . length + 1 ) ; buffer . write ( COUNT_BYTE ) ; buffer . write ( lineCntBytes ) ; buffer . write ( CRLF ) ; buffer . write ( SIZE_BYTE ) ; buffer . write ( cmdLenBytes ) ; buffer . write ( CRLF ) ; buffer . write ( cmd . bytes ) ; buffer . write ( CRLF ) ; tswitch ( cmd . requestType ) { tcase NO_ARG : break ; } 
tprotected abstract ByteArrayOutputStream createRequestBufffer ( Command cmd ) ; tprotected abstract Request createRequest ( ByteArrayOutputStream buffer ) ; tprotected abstract Response createMultiBulkResponse ( Command cmd ) ; tprotected abstract Response createBulkResponse ( Command cmd ) ; tprotected abstract Response createNumberResponse ( Command cmd @Overridepublic void write(OutputStream out) throws ClientRuntimeException, ProviderException {try {}} 
tprotected abstract Request createRequest ( ByteArrayOutputStream buffer ) ; tprotected abstract Response createMultiBulkResponse ( Command cmd ) ; tprotected abstract Response createBulkResponse ( Command cmd ) ; tprotected abstract Response createNumberResponse ( Command cmd @Overridepublic void write(OutputStream out) throws ClientRuntimeException, ProviderException {try {}} 
tprotected abstract Response createMultiBulkResponse ( Command cmd ) ; tprotected abstract Response createBulkResponse ( Command cmd ) ; tprotected abstract Response createNumberResponse ( Command cmd @Overridepublic void write(OutputStream out) throws ClientRuntimeException, ProviderException {try {}} 
tprotected abstract Response createBulkResponse ( Command cmd ) ; tprotected abstract Response createNumberResponse ( Command cmd @Overridepublic void write(OutputStream out) throws ClientRuntimeException, ProviderException {try {}} 
tprotected abstract Response createNumberResponse ( Command cmd @Overridepublic void write(OutputStream out) throws ClientRuntimeException, ProviderException {try {}} 
tprotected abstract Response createBooleanResponse ( Command cmd ) ; tprotected abstract Response createStringResponse ( Command cmd ) ; tprotected abstract Response createStatusResponse ( Command cmd ) ; }} 
tprotected abstract Response createStringResponse ( Command cmd ) ; tprotected abstract Response createStatusResponse ( Command cmd ) ; }} 
tprotected abstract Response createStatusResponse ( Command cmd ) ; }} 
public < K extends Object > boolean exists ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > RedisType type ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public byte [ ] randomkey ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long dbsize ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int ttlseconds ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long ttl ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) throws RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( K set1 , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sinterstore ( K destSetKey , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( K set1 , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sunionstore ( K destSetKey , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > sdiff ( K set1 , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > void sdiffstore ( K destSetKey , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > smembers ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] srandmember ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > byte [ ] spop ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , byte [ ] member ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zcard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > long zrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrange ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrevrange ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangeSubset ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrevrangeSubset ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrangebyscore ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangebyscoreSubset ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;} 
public < K extends Object > Future < ResponseStatus > set ( K key , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , String stringValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , Number numberValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > set ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) ; public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > get ( K key ) ; public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > substr ( K listkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , byte [ ] value ) ; public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > exists ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > del ( K . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < RedisType > type ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( K pattern ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > randomkey ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > rename ( K oldkey , K newkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > renamenx ( K oldkey , K brandnewkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > dbsize ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expire ( K key , int ttlseconds ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expireat ( K key , long epochtimeMillisecs ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > ttl ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , byte [ ] value ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , byte [ ] value , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > llen ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > lrange ( K listkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > ltrim ( K listkey , long keepFrom , long keepTo ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lindex ( K listkey , long index ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , byte [ ] member ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > scard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sinter ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sinterstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sunion ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sunionstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sdiff ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sdiffstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > smembers ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > srandmember ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > spop ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrange ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrevrange ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangeSubset ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrevrangeSubset ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangebyscoreSubset ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangebyscoreSubset ( K key , double minScore , double maxScore ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] minScoreBytes = Convert . toBytes ( minScore ) ; tbyte [ ] maxScoreBytes = Convert . toBytes ( maxScore ) ; treturn new FutureZSetList ( this . queueRequest ( Command . ZRANGEBYSCORE$OPTS , keybytes , minScoreBytes , maxScoreBytes , Command . Option . WITHSCORES . bytes ) ) ; } 
public < K extends Object > List < ZSetEntry > zrangebyscoreSubset ( K key , double minScore , double maxScore ) throws RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] fromBytes = Convert . toBytes ( minScore ) ; tbyte [ ] toBytes = Convert . toBytes ( maxScore ) ; tList < ZSetEntry > list = null ; ttry { tMultiBulkResponse multiBulkResponse = ( MultiBulkResponse ) this . serviceRequest ( Command . ZRANGEBYSCORE$OPTS , keybytes , fromBytes , toBytes , Command . Option . WITHSCORES . bytes ) ; tList < byte [ ] > bulkData = multiBulkResponse . getMultiBulkData ( ) ; tif ( null ! = bulkData ) { tlist = new ArrayList < ZSetEntry > ( bulkData . size ( ) / 2 ) ; tfor ( int i = 0 ; i < bulkData . size ( ) ; i + = 2 ) { tlist . add ( new ZSetEntryImpl ( bulkData . get ( i ) , bulkData . get ( i + 1 ) ) ) ; } } } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a MultiBulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } treturn list ; } 
public void testZrangebyscoreWithScoresStringByteArray ( ) { tcmd = Command . ZRANGEBYSCORE$OPTS . code + " byte[] " ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
tprotected InputStream newInputStream ( InputStream socketInputStream ) { treturn new FastBufferedInputStream ( socketInputStream , spec . getSocketProperty ( SO_RCVBUF ) ) ; } 
tprotected final void disconnect ( ) throws IllegalStateException { tAssert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; tsocketClose ( ) ; tisConnected = false ; tcleanup ( ) ; tnotifyDisconnected ( ) ; tLog . debug ( " DISCONNECTED | conn: %s " , toString ( ) ) ; } 
public void run ( ) { } 
void onResponseHandlerError ( ClientRuntimeException cre , PendingRequest request ) { tLog . error ( " Pipeline response handler encountered an error: " + cre . getMessage ( ) ) ; ry { 
private static void usingSynchSemantics ( ConnectionSpec spec ) { tJRedisPipeline pipeline = new JRedisPipeline ( spec ) ; ttry { tlong start = System . currentTimeMillis ( ) ; 
private static void runJRedisPipelineGET ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { tlong totTime = 0 ; tlong avgRespTime = 0 ; tfloat avgThroughput = 0 ; tlong iters = 0 ; tJRedisFuture pipeline = new JRedisPipeline ( spec ) ; ttry { tString key = " pipeKey " ; 
private static void runJRedisPipelinePING ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { tlong totTime = 0 ; tlong avgRespTime = 0 ; tfloat avgThroughput = 0 ; tlong iters = 0 ; tJRedisFuture pipeline = new JRedisPipeline ( spec ) ; ttry { tdo { 
private static void runJRedisPipelineLPUSH ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { tJRedisFuture pipeline = new JRedisPipeline ( spec ) ; tlong totTime = 0 ; tlong avgRespTime = 0 ; tfloat avgThroughput = 0 ; tlong iters = 0 ; ttry { tString key = " pipeKey " ; 
private static void runJRedisPipelineSET ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { tJRedisFuture pipeline = new JRedisPipeline ( spec ) ; tlong totTime = 0 ; tlong avgRespTime = 0 ; tfloat avgThroughput = 0 ; tlong iters = 0 ; ttry { tString key = " pipeKey " ; 
private static void runJRedisPipelineINCR ( ConnectionSpec spec , int reqCnt , int size , boolean forever ) { tJRedisFuture pipeline = new JRedisPipeline ( spec ) ; tlong totTime = 0 ; tlong avgRespTime = 0 ; tfloat avgThroughput = 0 ; tlong iters = 0 ; ttry { tString key = " pipeCounter " ; 
private static void exampleUsingCustomTCPSettings ( ) { Note that if your localhost:6379 redis server expects a password 
private static void exampleUsingDefaultConnectionSpec ( ) { Note that if your localhost:6379 redis server expects a password 
public static void main ( String [ ] args ) { tint database = 11 ; tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; tconnectionSpec . setDatabase ( 13 ) ; exampleUseofSyncInPipeline(connectionSpec); } 
private static void exampleUseofSyncInPipeline ( ConnectionSpec connectionSpec ) { long start = System.currentTimeMillis(); 
private void run ( ) { ttry { jredis . ping ( ) ; tbasicStuff ( ) ; elicitErrors ( ) ; } catch ( RedisException e ) { e . printStackTrace ( ) ; } jredis.quit(); } 
public void run ( ) { final String wkey = " foo " + j ; String wvalue = null ; tfor ( int i = 0 ; i < opcnt ; i + + ) { try { tclient . incr ( wkey ) ; wvalue = toStr ( client . get ( wkey ) ) ; } catch ( RedisException e ) { te . printStackTrace ( ) ; tbreak ; } } System . out . format ( " %s => %s " , wkey , wvalue ) ; } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
tstatic final public int bitset ( final int bitset , Flag . . . flags ) { tint _bitset = bitset ; tfor ( Flag f : flags ) _bitset = _bitset | f . bitmask ; treturn _bitset ; } 
tstatic final public int bitclear ( final int bitset , Flag . . . flags ) { tint _bitset = bitset ; tfor ( Flag f : flags ) _bitset = _bitset ^ f . bitmask ; treturn _bitset ; } 
public static final void error ( String msg ) { _error ( Category . ERROR , msg ) ; } public static final void error ( String msg , Throwable ) { logger . log ( Level . SEVERE , msg , ) ; } 
public static final void error ( String msg , Throwable ) { logger . log ( Level . SEVERE , msg , ) ; } public static final void error ( String msg , Object . . . args ) { _error ( Category . ERROR , msg , args ) ; } 
private static final void _error ( final Category cat , final String msg , final Object . . . args ) { tfinal String _msg = String . format ( msg , args ) ; tif ( cat . equals ( Category . ERROR ) ) tlogger . severe ( String . format ( " %s " , _msg ) ) ; 
public String format ( LogRecord record ) { } 
public String format ( LogRecord record ) { } 
public KeyValueSet < K , T > add ( K key , T value ) ; tbyte [ ] [ ] getMappings ( ) ; public interface ByteArrays < K extends Object > extends KeyValueSet < K , byte [ ] > { } }} 
tbyte [ ] [ ] getMappings ( ) ; public interface ByteArrays < K extends Object > extends KeyValueSet < K , byte [ ] > { } }} 
tstatic final public int bitset ( final int bitsetin , Flag . . . flags ) { tint bitset = bitsetin ; tfor ( Flag f : flags ) bitset = bitset | f . bitmask ; treturn bitset ; } 
tstatic final public int bitclear ( final int bitsetin , Flag . . . flags ) { tint bitset = bitsetin ; tfor ( Flag f : flags ) bitset = bitset ^ f . bitmask ; treturn bitset ; } 
public < K extends Object > Sort sort ( final K key ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tfinal JRedisFutureSupport client = this ; tSort sortQuery = new SortSupport ( keybytes ) { @Override tprotected Future < List < byte [ ] > > execAsyncSort ( byte [ ] . . . fullSortCmd ) { treturn new FutureByteArrayList ( client . queueRequest ( Command . SORT , fullSortCmd ) ) ; } tprotected Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) { tFuture < Response > fResp = client . queueRequest ( Command . SORT$STORE , fullSortCmd ) ; } 
tprotected Future < List < byte [ ] > > execAsyncSortStore ( byte [ ] . . . fullSortCmd ) { tFuture < Response > fResp = client . queueRequest ( Command . SORT$STORE , fullSortCmd ) ; } 
public Boolean get ( ) throws InterruptedException , ExecutionException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; treturn valResp . getBooleanValue ( ) ; } 
public Boolean get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn valResp . getBooleanValue ( ) ; } 
public Long get ( ) throws InterruptedException , ExecutionException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; treturn valResp . getLongValue ( ) ; } 
public Long get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn valResp . getLongValue ( ) ; } 
public Double get ( ) throws InterruptedException , ExecutionException { tBulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( ) ; tif ( bulkResp . getBulkData ( ) ! = null ) treturn Convert . toDouble ( bulkResp . getBulkData ( ) ) ; treturn null ; } 
public Double get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tBulkResponse bulkResp = ( BulkResponse ) pendingRequest . get ( timeout , unit ) ; tif ( bulkResp . getBulkData ( ) ! = null ) treturn Convert . toDouble ( bulkResp . getBulkData ( ) ) ; treturn null ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; tRequest trequest = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; return pendingResponse; } 
public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException { tResponse response = null ; tswitch ( cmd . responseType ) { tcase BOOLEAN : tresponse = createBooleanResponse ( cmd ) ; tbreak ; tcase BULK : tresponse = createBulkResponse ( cmd ) ; tbreak ; tcase MULTI_BULK : tresponse = createMultiBulkResponse ( cmd ) ; tbreak ; tcase NUMBER : tresponse = createNumberResponse ( cmd ) ; tbreak ; tcase STATUS : tresponse = createStatusResponse ( cmd ) ; tbreak ; tcase STRING : tresponse = createStringResponse ( cmd ) ; tbreak ; tcase VIRTUAL : tresponse = new VirtualResponse ( ResponseStatus . STATUS_CIAO ) ; tbreak ; tcase QUEUED : tcase RESULT_SET : tthrow new NotSupportedException ( String . format ( " ResponseType %s not yet supported " , cmd . requestType . name ( ) ) ) ; } treturn response ; 
private static final < E extends RuntimeException > tvoid throwIt ( String msg , Class < E > clazz ) tthrows E { } 
public static final int toInt ( final byte [ ] potentiallySignedAsciiBytes , final int offsetin , final int len ) throws IllegalArgumentException { tint offset = offsetin ; tfinal byte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final long toLong ( byte [ ] potentiallySignedAsciiBytes , final int offsetin , int len ) throws IllegalArgumentException { tint offset = offsetin ; tfinal byte [ ] buff = potentiallySignedAsciiBytes ; } 
public static final < T extends Serializable > tList < T > decode ( List < byte [ ] > byteList ) { tif ( null = = byteList ) return null ; tList < T > tobjectList = new ArrayList < T > ( byteList . size ( ) ) ; tfor ( byte [ ] bytes : byteList ) { tif ( null ! = bytes ) { tT object = ( T ) decode ( bytes ) ; tobjectList . add ( object ) ; } telse { tobjectList . add ( null ) ; } } treturn objectList ; } 
public int read ( ) throws IOException { tbyte [ ] b = new byte [ 1 ] ; tint c = read ( b , 0 , 1 ) ; tif ( c = = - 1 ) return - 1 ; treturn b [ 0 ] ; } 
public static final byte [ ] decompress ( byte [ ] data ) { tByteArrayOutputStream buffer = null ; tGZIPInputStream gizpInputStream = null ; ttry { tbuffer = new ByteArrayOutputStream ( ) ; tgizpInputStream = new GZIPInputStream ( new ByteArrayInputStream ( data ) ) ; tint = - 1 ; @SuppressWarnings ( " unused " ) tint tot = 0 ; tbyte [ ] _buffer = new byte [ 1024 * 12 ] ; twhile ( - 1 ! = ( = gizpInputStream . read ( _buffer ) ) ) { tbuffer . write ( _buffer , 0 , ) ; ttot + = ; } tgizpInputStream . close ( ) ; tbuffer . close ( ) ; } tcatch ( IOException e ) { tthrow new RuntimeException ( " Failed to GZip decompress data " , e ) ; } treturn buffer . toByteArray ( ) ; } 
public String format ( LogRecord record ) { } 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public void onEvent ( Connection . Event event ) ; } public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
tprotected final void onConnectionFault ( String fault , boolean raiseEx ) throws ClientRuntimeException { tnotifyFaulted ( fault ) ; tLog . problem ( " Shutting down due to connection FAULT: %s - %s " , fault , this ) ; tnotifyShutingDown ( ) ; tif ( raiseEx ) tthrow new ClientRuntimeException ( fault ) ; 
tprotected final void connect ( ) throws IllegalStateException , ClientRuntimeException { } 
tprotected final void connect ( ) throws IllegalStateException , ClientRuntimeException { } 
final private void stop ( ) { tLog . log ( " %s stopping. " , this ) ; trun_flag . set ( false ) ; tPipelineConnectionBase . this . respHandlerThread . interrupt ( ) ; } 
public static void main ( String [ ] args ) { tfinal int database = 13 ; tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; exampleUseofSyncInPipeline ( connectionSpec ) ; } 
private static void exampleUseofSyncInPipeline ( ConnectionSpec connectionSpec ) { long start = System.currentTimeMillis(); 
final private void stopHandler ( ) { tLog . log ( " %s stopping handler thread " , this ) ; twork_flag . set ( false ) ; tPipelineConnectionBase . this . respHandlerThread . interrupt ( ) ; } 
final private void shutdownHandler ( ) { tLog . log ( " %s shutting down response handler " , this ) ; tif ( work_flag . get ( ) ! = false | | alive_flag . get ( ) ! = false ) tstopHandler ( ) ; talive_flag . set ( false ) ; tPipelineConnectionBase . this . removeListener ( this ) ; } 
tprotected final void onConnectionFault ( String fault , boolean raiseEx ) throws ClientRuntimeException { tnotifyFaulted ( fault ) ; tLog . problem ( " Shutting down due to connection FAULT: %s - %s " , fault , this ) ; tnotifyShuttingDown ( ) ; tif ( raiseEx ) tthrow new ClientRuntimeException ( fault ) ; 
final private void stopHandler ( ) { tLog . log ( " %s stopping handler thread " , this ) ; twork_flag . set ( false ) ; tthread . get ( ) . interrupt ( ) ; PipelineConnectionBase.this.respHandlerThread.interrupt(); 
final private void shutdownHandler ( ) { tif ( work_flag . get ( ) ! = false | | alive_flag . get ( ) ! = false ) tstopHandler ( ) ; talive_flag . set ( false ) ; tPipelineConnectionBase . this . removeListener ( this ) ; tLog . log ( " %s response handler has shutdown " , this ) ; } 
tprotected abstract void setConnection ( Connection connection ) ; }} 
public ConnectionSpec getSpec ( ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Response serviceRequest ( Command cmd , byte [ ] . . . args ) throws RedisException , ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) throws ClientRuntimeException , ProviderException ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
 public boolean addListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
public boolean removeListener ( Listener connListener ) ; public Connection newConnection (ConnectionSpec spec) throws ClientRuntimeException, NotSupportedException; }} 
private void setDefaultValues ( ) { setHeartbeat(DEFAULT_HEARTBEAT_SEC); } 
public boolean isCompatibleWithVersion ( String version ) ; public Protocol newProtocol ( ConnectionSpec connSpec ) throws NotSupportedException ; } } 
public Request createRequest ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException ; public Protocol newProtocol ( ConnectionSpec connSpec ) throws NotSupportedException ; } } 
public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException ; public Protocol newProtocol ( ConnectionSpec connSpec ) throws NotSupportedException ; } } 
public byte [ ] createRequestBuffer ( Command cmd , byte [ ] . . . args ) throws ProviderException , IllegalArgumentException ; public interface Factory { public Protocol newProtocol ( ConnectionSpec connSpec ) throws NotSupportedException ; } } 
public static void main ( String [ ] args ) { tRunnable bench = new SimpleBenchJRedisChunkedPipeline ( ) ; tThread bt = new Thread ( bench , " " ) ; tbt . start ( ) ; ttry { tbt . join ( ) ; 
public void run ( ) { tint database = 11 ; tConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; tJRedisFuture jredis = new JRedisChunkedPipeline ( connSpec ) ; tbyte [ ] key = " cpct " . getBytes ( ) ; tint iters = 100000 ; tfor ( ; ; ) { tFuture < Long > frCounter = null ; 
private void cleandb ( JRedisFuture jredis ) throws InterruptedException , ExecutionException { tFuture < ResponseStatus > fr = jredis . flushdb ( ) ; tjredis . flush ( ) ; tfr . get ( ) ; } 
tprotected Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { treturn connection . queueRequest ( cmd , args ) ; } 
protected void initializeComponents ( ) { tspec . setConnectionFlag ( Flag . PIPELINE , true ) ; tspec . setConnectionFlag ( Flag . RELIABLE , true ) ; tspec . setConnectionFlag ( Flag . SHARED , true ) ; chunkbuff = new byte [ MTU_SIZE ] ; tsuper . initializeComponents ( ) ; tserviceLock = new Object ( ) ; tisActive = new AtomicBoolean ( false ) ; tconnectionEstablished = new CountDownLatch ( 1 ) ; tpendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; trespHandler = new ResponseHandler ( ) ; trespHandlerThread = new Thread ( respHandler , " response-handler " ) ; trespHandlerThread . start ( ) ; tisActive . set ( false ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { final boolean doflush = cmd == Command.AUTH || cmd == Command.SELECT || isflush;synchronized (serviceLock) {boolean overflows = off + reqbyteslen > MTU_SIZE ? true : false;if(cmd != Command.QUIT) { return queuedRequest; } 
final private void shutdownHandler ( ) { tif ( work_flag . get ( ) ! = false | | alive_flag . get ( ) ! = false ) tstopHandler ( ) ; talive_flag . set ( false ) ; tChunkedPipelineConnection . this . removeListener ( this ) ; tLog . log ( " %s response handler has shutdown " , this ) ; } 
public Response createResponse ( Command cmd ) throws ProviderException , ClientRuntimeException { tResponse response = null ; tswitch ( cmd . responseType ) { tcase BOOLEAN : tresponse = createBooleanResponse ( cmd ) ; tbreak ; tcase BULK : tresponse = createBulkResponse ( cmd ) ; tbreak ; tcase MULTI_BULK : tresponse = createMultiBulkResponse ( cmd ) ; tbreak ; tcase NUMBER : tresponse = createNumberResponse ( cmd ) ; tbreak ; tcase STATUS : tresponse = createStatusResponse ( cmd ) ; tbreak ; tcase STRING : tresponse = createStringResponse ( cmd ) ; tbreak ; tcase VIRTUAL : tresponse = new VirtualResponse ( ResponseStatus . STATUS_CIAO ) ; tbreak ; tcase NOP : tresponse = new VirtualResponse ( ResponseStatus . STATUS_OK ) ; 
public static void main ( String [ ] args ) throws Throwable { ttry { tAdHocTestChunkPipeline tester = new AdHocTestChunkPipeline ( ) ; 
private void run ( ) { tfinal Thread [ ] workers = new Thread [ wcnt ] ; tfor ( int i = 0 ; i < workers . length ; i + + ) { tString tname = String . format ( " w-%02d " , i ) ; tworkers [ i ] = worker ( jredis , tname ) ; } tfinal long start = System . currentTimeMillis ( ) ; tfor ( Thread : workers ) { tt . start ( ) ; } tfor ( Thread : workers ) { ttry { tt . join ( ) ; } catch ( InterruptedException e ) { te . printStackTrace ( ) ; } } tLog . log ( " %d x %d @ %d msecs " , wcnt , reqnums , System . currentTimeMillis ( ) - start ) ; } 
private Thread worker ( final JRedisFuture jredis , String tname ) { tfinal Runnable task = task ( jredis ) ; treturn new Thread ( task , tname ) ; } 
@Override public void run ( ) { tfinal String tname = Thread . currentThread ( ) . getName ( ) ; tfinal byte [ ] key = tname . getBytes ( ) ; tfinal byte [ ] cntr = ( tname + " # " ) . getBytes ( ) ; tFuture < Long > fCntr = null ; tfor ( int i = 0 ; i < reqnums ; i + + ) { Log.log("done"); 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { final boolean doflush = cmd == Command.AUTH || cmd == Command.SELECT || isflush;synchronized (serviceLock) {boolean overflows = off + reqbyteslen > MTU_SIZE ? true : false;if(cmd != Command.QUIT) { return queuedRequest; } 
public Response get ( ) tthrows InterruptedException , ExecutionException { tpipeline . queueRequest ( Command . FLUSH ) ; treturn super . get ( ) ; } 
public Response get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tpipeline . queueRequest ( Command . FLUSH ) ; treturn super . get ( timeout , unit ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { final boolean doflush = cmd == Command.AUTH || cmd == Command.SELECT || isflush;synchronized (serviceLock) {boolean overflows = off + reqbyteslen > MTU_SIZE ? true : false;if(cmd != Command.QUIT) { return queuedRequest; } 
public Response get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { trequestFlush ( ) ; treturn super . get ( timeout , unit ) ; } 
tprotected JRedisFuture newProviderInstance ( ) { tJRedisFuture provider = null ; ttry { tConnectionSpec connectionSpec = DefaultConnectionSpec . newSpec ( this . host , this . port , this . db2 , this . password . getBytes ( ) ) ; tprovider = new JRedisChunkedPipeline ( connectionSpec ) ; } catch ( ClientRuntimeException e ) { tLog . error ( e . getLocalizedMessage ( ) ) ; } return provider ; } 
private void run ( ) { tint database = 11 ; tConnectionSpec connSpec = DefaultConnectionSpec . newSpec ( " localhost " , 6379 , database , " jredis " . getBytes ( ) ) ; tJRedisFuture jredis = new JRedisPipeline ( connSpec ) ; tbyte [ ] key = " pipe " . getBytes ( ) ; tint iters = 100 * 1000 ; ttry { tcleandb ( jredis ) ; } catch ( Throwable e ) { te . printStackTrace ( ) ; treturn ; } tfor ( ; ; ) { tFuture < Long > frCounter = null ; 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { final boolean doflush = cmd == Command.AUTH || cmd == Command.SELECT || isflush;synchronized (serviceLock) {boolean overflows = exceeds || off + reqbyteslen > MTU_SIZE ? true : false;if(cmd != Command.QUIT) { return queuedRequest; } 
@Override public void run ( ) { tfinal String tname = Thread . currentThread ( ) . getName ( ) ; tfinal byte [ ] key = tname . getBytes ( ) ; tfinal byte [ ] cntr = ( tname + " # " ) . getBytes ( ) ; tFuture < Long > fCntr = null ; tfor ( int i = 0 ; i < reqnums ; i + + ) { Long counter = fCntr.get(); 
tprotected void initializeComponents ( ) { tspec . setConnectionFlag ( Flag . PIPELINE , true ) ; tspec . setConnectionFlag ( Flag . RELIABLE , true ) ; tspec . setConnectionFlag ( Flag . SHARED , true ) ; tchunkbuff = new byte [ MTU_SIZE ] ; tsuper . initializeComponents ( ) ; tserviceLock = new Object ( ) ; tisActive = new AtomicBoolean ( false ) ; tconnectionEstablished = new CountDownLatch ( 1 ) ; tpendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; trespHandler = new ResponseHandler ( ) ; trespHandlerThread = new Thread ( respHandler , " response-handler " ) ; trespHandlerThread . start ( ) ; tisActive . set ( false ) ; } 
tprotected void notifyConnected ( ) { tsuper . notifyConnected ( ) ; tLog . log ( " Pipeline <%s> connected " , this ) ; tisActive . set ( true ) ; tconnectionEstablished . countDown ( ) ; } 
tprotected void notifyDisconnected ( ) { tsuper . notifyDisconnected ( ) ; tLog . log ( " Pipeline <%s> disconnected " , this ) ; tisActive . set ( true ) ; tconnectionEstablished . countDown ( ) ; } 
tprotected final InputStream newInputStream ( InputStream socketInputStream ) throws IllegalArgumentException { tInputStream in = super . newInputStream ( socketInputStream ) ; tif ( ! ( in instanceof FastBufferedInputStream ) ) { tSystem . out . format ( " WARN: input was: %s " , in . getClass ( ) . getCanonicalName ( ) ) ; tin = new FastBufferedInputStream ( in , spec . getSocketProperty ( Connection . Socket . Property . SO_RCVBUF ) ) ; } treturn in ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; } 
tvoid onResponseHandlerError ( ClientRuntimeException cre , PendingRequest request ) { tLog . error ( " Pipeline response handler encountered an error: " + cre . getMessage ( ) ) ; ry { 
public static int calcReqBuffSize ( Command cmd , byte [ ] . . . args ) throws IllegalArgumentException { tbyte [ ] cmdLenBytes = Convert . toBytes ( cmd . bytes . length ) ; tbyte [ ] lineCntBytes = Convert . toBytes ( args . length + 1 ) ; tint bsize = 1 + lineCntBytes . length + CRLF_LEN + 1 + cmdLenBytes . length + CRLF_LEN + cmd . bytes . length + CRLF_LEN ; tfor ( int i = 0 ; i < args . length ; i + + ) { tbyte [ ] argLenBytes = Convert . toBytes ( Assert . notNull ( args [ i ] , i , ProviderException . class ) . length ) ; tint _bsize = 1 + argLenBytes . length + CRLF_LEN + args [ i ] . length + CRLF_LEN ; tbsize + = _bsize ; } treturn bsize ; } 
tstatic public byte [ ] writeRequestToBuffer ( final Buffer buffer , final Command cmd , final byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { } 
public Response get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { trequestFlush ( ) ; treturn super . get ( timeout , unit ) ; } 
tfinal private void stopHandler ( ) { tLog . log ( " %s stopping handler thread " , this ) ; twork_flag . set ( false ) ; tthread . get ( ) . interrupt ( ) ; PipelineConnectionBase.this.respHandlerThread.interrupt(); 
tfinal private void shutdownHandler ( ) { tif ( work_flag . get ( ) ! = false | | alive_flag . get ( ) ! = false ) tstopHandler ( ) ; talive_flag . set ( false ) ; tChunkedPipelineConnection . this . removeListener ( this ) ; tLog . log ( " %s response handler has shutdown " , this ) ; } 
@Override public void run ( ) { tfinal String tname = Thread . currentThread ( ) . getName ( ) ; tfinal byte [ ] key = tname . getBytes ( ) ; tfinal byte [ ] cntr = ( tname + " # " ) . getBytes ( ) ; tFuture < Long > fCntr = null ; tfor ( int i = 0 ; i < reqnums ; i + + ) { conn.flush(); 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; } 
tprotected void initializeComponents ( ) { tspec . setConnectionFlag ( Flag . PIPELINE , true ) ; tspec . setConnectionFlag ( Flag . RELIABLE , true ) ; tspec . setConnectionFlag ( Flag . SHARED , true ) ; tchunkbuff = new byte [ CHUNK_BUFF_SIZE ] ; tchunkqueue = new PendingCPRequest [ CHUNK_Q_SIZE ] ; tsuper . initializeComponents ( ) ; tserviceLock = new Object ( ) ; tisActive = new AtomicBoolean ( false ) ; tconnectionEstablished = new CountDownLatch ( 1 ) ; tpendingResponseQueue = new LinkedBlockingQueue < PendingRequest > ( ) ; trespHandler = new ResponseHandler ( ) ; trespHandlerThread = new Thread ( respHandler , " response-handler " ) ; trespHandlerThread . start ( ) ; tisActive . set ( false ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; } 
private void requestFlush ( ) { Log.log("[%s] requesting flush .. INSIDE", cmd.code); 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; tRequest trequest = Assert . notNull ( protocol . createRequest ( cmd , args ) , " request object from handler " , ProviderException . class ) ; tPendingRequest tpendingResponse = new PendingRequest ( cmd ) ; tif ( cmd = = Command . CONN_FLUSH ) { tLog . log ( " %s not supported -- ignored " , cmd . code ) ; treturn pendingResponse ; } tsynchronized ( serviceLock ) { tif ( cmd ! = Command . QUIT ) { trequest . write ( getOutputStream ( ) ) ; } telse { tpendingQuit = true ; tisActive . set ( false ) ; } tpendingResponseQueue . add ( pendingResponse ) ; } treturn pendingResponse ; } 
@Override public void run ( ) { tfinal String tname = Thread . currentThread ( ) . getName ( ) ; tfinal byte [ ] key = tname . getBytes ( ) ; tfinal byte [ ] cntr = ( tname + " # " ) . getBytes ( ) ; tFuture < Long > fCntr = null ; tfor ( int i = 0 ; i < reqnums ; i + + ) { conn.set(key, key); 
tprotected void initializeComponents ( ) { tspec . setConnectionFlag ( Flag . PIPELINE , true ) ; tspec . setConnectionFlag ( Flag . RELIABLE , true ) ; tspec . setConnectionFlag ( Flag . SHARED , true ) ; tchunkbuff = new byte [ CHUNK_BUFF_SIZE ] ; toff = 0 ; tchunkqueue = new PendingCPRequest [ CHUNK_Q_SIZE ] ; tidx = 0 ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; } 
tfinal private void stopHandler ( ) { tLog . log ( " %s stopping handler thread " , this ) ; PipelineConnectionBase.this.respHandlerThread.interrupt(); 
tfinal private void shutdownHandler ( ) { } 
tprotected final void onConnectionFault ( String fault , boolean raiseEx ) throws ClientRuntimeException { tnotifyFaulted ( fault ) ; tLog . problem ( " Shutting down due to connection FAULT: %s - %s " , fault , this ) ; hrow new ClientRuntimeException(fault); 
tprotected final void disconnect ( ) throws IllegalStateException { tAssert . isTrue ( isConnected ( ) , IllegalStateException . class ) ; } 
tprotected final void shutdown ( ) throws IllegalStateException { tnotifyShuttingDown ( ) ; tif ( isConnected ) tdisconnect ( ) ; 
@Override public void run ( ) { tfinal String tname = Thread . currentThread ( ) . getName ( ) ; tfinal byte [ ] key = tname . getBytes ( ) ; tfinal byte [ ] cntr = ( tname + " # " ) . getBytes ( ) ; tFuture < Long > fCntr = null ; tfor ( int i = 0 ; i < reqnums ; i + + ) { ttry { 
tprotected void initializeComponents ( ) { tspec . setConnectionFlag ( Flag . PIPELINE , true ) ; tspec . setConnectionFlag ( Flag . RELIABLE , true ) ; tspec . setConnectionFlag ( Flag . SHARED , true ) ; tchunkbuff = new byte [ CHUNK_BUFF_SIZE ] ; toff = 0 ; tchunkqueue = new PendingCPRequest [ CHUNK_Q_SIZE ] ; tidx = 0 ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; } 
tvoid onResponseHandlerError ( ClientRuntimeException cre , PendingRequest request ) { tLog . error ( " Pipeline response handler encountered an error: " + cre . getMessage ( ) ) ; ry { 
 public final boolean offer ( E item ) { tif ( null = = item ) throw new NullPointerException ( " item " ) ; tNode < E > = new Node < E > ( item , null ) ; } 
public E poll ( long timeout , TimeUnit unit ) throws InterruptedException { tthrow new RuntimeException ( " not supported " ) ; } 
 public final E poll ( ) { tE hi = null ; } 
 public E peek ( ) { tE item = null ; } 
public E take ( ) throws InterruptedException { tE titem = null ; twhile ( true ) { titem = poll ( ) ; tif ( item ! = null ) tbreak ; tLockSupport . parkNanos ( 10L ) ; } 
public boolean offer ( E e , long timeout , TimeUnit unit ) throws InterruptedException { tthrow new RuntimeException ( " not supported " ) ; } 
tprotected void initializeComponents ( ) { tspec . setConnectionFlag ( Flag . PIPELINE , true ) ; tspec . setConnectionFlag ( Flag . RELIABLE , true ) ; tspec . setConnectionFlag ( Flag . SHARED , true ) ; tchunkbuff = new byte [ CHUNK_BUFF_SIZE ] ; tchunkqueue = new PendingCPRequest [ CHUNK_Q_SIZE ] ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; } 
tprotected void initializeComponents ( ) { tspec . setConnectionFlag ( Flag . PIPELINE , true ) ; tspec . setConnectionFlag ( Flag . RELIABLE , true ) ; tspec . setConnectionFlag ( Flag . SHARED , true ) ; tchunkbuff = new byte [ CHUNK_BUFF_SIZE ] ; tchunkqueue = new PendingCPRequest [ CHUNK_Q_SIZE ] ; tctl_word = 0 ; trequestlock = new ReentrantLock ( false ) ; tsuper . initializeComponents ( ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; } 
public final Future < Response > queueRequest ( Command cmd , byte [ ] . . . args ) tthrows ClientRuntimeException , ProviderException { tif ( ! isConnected ( ) ) tthrow new NotConnectedException ( " Not connected! " ) ; tif ( pendingQuit ) tthrow new ClientRuntimeException ( " Pipeline shutting down: Quit in progess; no further requests are accepted. " ) ; tProtocol tprotocol = Assert . notNull ( getProtocolHandler ( ) , " thread protocol handler " , ProviderException . class ) ; } 
 public final boolean offer ( E item ) { tif ( null = = item ) throw new NullPointerException ( " item " ) ; tNode < E > = new Node < E > ( item , null ) ; tNode < E > = tail ; tt . setNext ( ) ; ttail = ; treturn true ; } 
 public final E poll ( ) { tE hi = null ; tNode < E > h = head ; tNode < E > newhead = h . getNext ( ) ; tif ( newhead ! = null ) { thi = newhead . getItem ( ) ; thead = newhead ; tnewhead . setItem ( null ) ; th . setNext ( null ) ; } treturn hi ; } 
 public E peek ( ) { tE item = null ; tNode < E > h = head ; tNode < E > f = h . getNext ( ) ; tif ( f ! = null ) { titem = f . getItem ( ) ; } treturn item ; } 
tstatic public byte [ ] writeRequestToBuffer ( final Buffer buffer , final Command cmd , final byte [ ] . . . args ) throws ProviderException , IllegalArgumentException { } 
 public final boolean offer ( E item ) { tif ( null = = item ) throw new NullPointerException ( " item " ) ; tfinal Node < E > = new Node < E > ( item , null ) ; tNode < E > = tail ; tt . setNext ( ) ; ttail = ; treturn true ; } 
 public final E poll ( ) { tE item = null ; tfinal Node < E > h = head ; tfinal Node < E > newhead = h . getNext ( ) ; tif ( newhead ! = null ) { titem = newhead . getItem ( ) ; thead = newhead ; tnewhead . setItem ( null ) ; th . setNext ( null ) ; } treturn item ; } 
 public E peek ( ) { tE item = null ; tfinal Node < E > h = head ; tfinal Node < E > f = h . getNext ( ) ; tif ( f ! = null ) { titem = f . getItem ( ) ; } treturn item ; } 
public E take ( ) throws InterruptedException { tE titem = null ; twhile ( true ) { titem = poll ( ) ; tif ( item ! = null ) tbreak ; tLockSupport . parkNanos ( 1L ) ; } 
public E remove ( ) { tfinal E item = poll ( ) ; tif ( item = = null ) tthrow new NoSuchElementException ( ) ; treturn item ; } 
@Override public void run ( ) { tfinal String tname = Thread . currentThread ( ) . getName ( ) ; tfinal byte [ ] key = tname . getBytes ( ) ; tfinal byte [ ] cntr = ( tname + " # " ) . getBytes ( ) ; tFuture < Long > fCntr = null ; tfor ( int i = 0 ; i < reqnums ; i + + ) { ttry { Long counter = fCntr.get(); 
public void testBgsave ( ) { tcmd = Command . BGSAVE . code ; tLog . log ( " TEST: %s command " , cmd ) ; if(!didflush) { 
private final void run ( ) throws Exception { tList < String > cmdlist = getSpecCommandList ( ) ; tcheckAndReportCompliance ( cmdlist , JRedis . class ) ; tcheckAndReportCompliance ( cmdlist , JRedisFuture . class ) ; } 
private List < String > checkAndReportCompliance ( List < String > cmdlist , Class < ? > jredis_class ) { tMethod [ ] pubmethods = jredis_class . getMethods ( ) ; tSet < String > uniqueMethodNames = new HashSet < String > ( ) ; tfor ( Method m : pubmethods ) tuniqueMethodNames . add ( m . getName ( ) ) ; tList < String > notsupported = new ArrayList < String > ( ) ; tfor ( String cmd : cmdlist ) { tif ( ! uniqueMethodNames . contains ( cmd ) ) tnotsupported . add ( cmd ) ; } tif ( ! notsupported . isEmpty ( ) ) { treportNonCompliance ( notsupported , jredis_class . getSimpleName ( ) ) ; } treturn notsupported ; } 
private void reportNonCompliance ( List < String > notsupported , String simpleName ) { tSystem . out . format ( " n / non-compliance report for %-12s " , simpleName ) ; tint i = 0 ; tfor ( String cmd : notsupported ) { tSystem . out . format ( " [%2d] %s " , i + + , cmd ) ; } tSystem . out . format ( " n / " , simpleName ) ; } 
private List < String > getSpecCommandList ( ) throws IOException { tList < String > cmdlist = new ArrayList < String > ( ) ; tBufferedReader reader = new BufferedReader ( new InputStreamReader ( specfilein ) ) ; tString cmd = null ; twhile ( ( cmd = reader . readLine ( ) ) ! = null ) { tcmdlist . add ( cmd ) ; } treturn cmdlist ; } 
public < K extends Object > boolean exists ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long del ( K . . . keys ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > RedisType type ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( K pattern ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > keys ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public byte [ ] randomkey ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void rename ( K oldkey , K newkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean renamenx ( K oldkey , K brandnewkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long dbsize ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean expire ( K key , int ttlseconds ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean expireat ( K key , long epochtimeMillisecs ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long ttl ( K key ) throws RedisException ; } 
public < K extends Object > void rpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void rpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > void rpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , byte [ ] value ) throws RedisException ; public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , String stringValue ) throws RedisException ; public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void lpush ( K listkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > void lpush ( K listkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , byte [ ] value ) throws RedisException ; public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , String stringValue ) throws RedisException ; public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void lset ( K key , long index , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > void lset ( K key , long index , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , byte [ ] value , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , String stringValue , int count ) throws RedisException ; public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long lrem ( K listkey , Number numberValue , int count ) throws RedisException ; public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > long lrem ( K listkey , T object , int count ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long llen ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > lrange ( K listkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void ltrim ( K listkey , long keepFrom , long keepTo ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] lindex ( K listkey , long index ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] lpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] rpop ( K listkey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] rpoplpush ( K srcList , K destList ) throws RedisException ; } 
public < K extends Object > boolean sadd ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean sadd ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sadd ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean srem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean srem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean sismember ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean sismember ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , String stringValue ) throws RedisException ; public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean smove ( K srcKey , K destKey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean smove ( K srcKey , K destKey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long scard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > sinter ( K set1 , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void sinterstore ( K destSetKey , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > sunion ( K set1 , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void sunionstore ( K destSetKey , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > sdiff ( K set1 , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void sdiffstore ( K destSetKey , K . . . sets ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > smembers ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] srandmember ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] spop ( K setKey ) throws RedisException ; } 
public < K extends Object > boolean zadd ( K setkey , double score , byte [ ] member ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean zadd ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zadd ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean zrem ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > boolean zrem ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zcard ( K setKey ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Double zscore ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > tDouble zscore ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > long zrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > tlong zrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , byte [ ] member ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , String stringValue ) throws RedisException ; public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zrevrank ( K setkey , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > tlong zrevrank ( K setkey , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrange ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrevrange ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangeSubset ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrevrangeSubset ( K setkey , long from , long to ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > zrangebyscore ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < ZSetEntry > zrangebyscoreSubset ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zremrangebyscore ( K setkey , double minScore , double maxScore ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zremrangebyrank ( K setkey , long minRank , long maxRank ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , byte [ ] member ) throws RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , String stringValue ) throws RedisException ; public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Double zincrby ( K setkey , double score , Number numberValue ) throws RedisException ; public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > tDouble zincrby ( K setkey , double score , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long zcount ( K setkey , double minScore , double maxScore ) throws RedisException ; } 
public < K extends Object > boolean hset ( K key , K field , byte [ ] value ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , String string ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean hset ( K key , K field , Number number ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object , T extends Serializable > tboolean hset ( K key , K field , T object ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > byte [ ] hget ( K key , K field ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean hexists ( K key , K field ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean hdel ( K key , K field ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long hlen ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > hkeys ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > List < byte [ ] > hvals ( K key ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > Map < byte [ ] , byte [ ] > hgetall ( K key ) throws RedisException ; } 
public < K extends Object > JRedis multi ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > JRedis discard ( ) throws RedisException ; } 
public < K extends Object > JRedis flushdb ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > JRedis flushall ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > boolean move ( K key , int dbIndex ) throws RedisException ; } 
public < K extends Object > Sort sort ( K key ) ; } 
public < K extends Object > void save ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void bgsave ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > String bgrewriteaof ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > long lastsave ( ) throws RedisException ; } 
public < K extends Object > Map < String , String > tinfo ( ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void slaveof ( String host , int port ) throws RedisException ; public <K extends Object> ObjectInfo debug (K key) throws RedisException;public <K extends Object> boolean setbit(K key, int offset, boolean value) throws RedisException;public <K extends Object> boolean getbit(K key, int offset) throws RedisException;} 
public < K extends Object > void slaveofnone ( ) throws RedisException ; } 
public < K extends Object > byte [ ] echo ( byte [ ] msg ) throws RedisException ; public < K extends Object > byte [ ] echo ( String msg ) throws RedisException ; public < K extends Object > byte [ ] echo ( Number msg ) throws RedisException ; public < K extends Object , T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; public < K extends Object > ObjectInfo debug ( K key ) throws RedisException ; public < K extends Object > boolean setbit ( K key , int offset , boolean value ) throws RedisException ; public < K extends Object > boolean getbit ( K key , int offset ) throws RedisException ; } 
public < K extends Object > byte [ ] echo ( String msg ) throws RedisException ; public < K extends Object > byte [ ] echo ( Number msg ) throws RedisException ; public < K extends Object , T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; public < K extends Object > ObjectInfo debug ( K key ) throws RedisException ; public < K extends Object > boolean setbit ( K key , int offset , boolean value ) throws RedisException ; public < K extends Object > boolean getbit ( K key , int offset ) throws RedisException ; } 
public < K extends Object > byte [ ] echo ( Number msg ) throws RedisException ; public < K extends Object , T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; public < K extends Object > ObjectInfo debug ( K key ) throws RedisException ; public < K extends Object > boolean setbit ( K key , int offset , boolean value ) throws RedisException ; public < K extends Object > boolean getbit ( K key , int offset ) throws RedisException ; } 
public < K extends Object , T extends Serializable > tbyte [ ] echo ( T msg ) throws RedisException ; public < K extends Object > ObjectInfo debug ( K key ) throws RedisException ; public < K extends Object > boolean setbit ( K key , int offset , boolean value ) throws RedisException ; public < K extends Object > boolean getbit ( K key , int offset ) throws RedisException ; } 
public < K extends Object > ObjectInfo debug ( K key ) throws RedisException ; public < K extends Object > boolean setbit ( K key , int offset , boolean value ) throws RedisException ; public < K extends Object > boolean getbit ( K key , int offset ) throws RedisException ; } 
public < K extends Object > boolean setbit ( K key , int offset , boolean value ) throws RedisException ; public < K extends Object > boolean getbit ( K key , int offset ) throws RedisException ; } 
public < K extends Object > Future < ResponseStatus > set ( K key , String stringValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > set ( K key , Number numberValue ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > set ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , byte [ ] value ) ; public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public < K extends Object > Future < Boolean > setbit ( K key , int offset , boolean value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , String stringValue ) ; public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public < K extends Object > Future < Boolean > setbit ( K key , int offset , boolean value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setnx ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public < K extends Object > Future < Boolean > setbit ( K key , int offset , boolean value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > setnx ( K key , T object ) ; public < K extends Object > Future < Boolean > setbit ( K key , int offset , boolean value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > setbit ( K key , int offset , boolean value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > get ( K key ) ; public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public < K extends Object > Future < Boolean > getbit ( K key , int offset ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , byte [ ] value ) ; public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public < K extends Object > Future < Boolean > getbit ( K key , int offset ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , String stringValue ) ; public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public < K extends Object > Future < Boolean > getbit ( K key , int offset ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > getset ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public < K extends Object > Future < Boolean > getbit ( K key , int offset ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < byte [ ] > getset ( K key , T object ) ; public < K extends Object > Future < Boolean > getbit ( K key , int offset ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > getbit ( K key , int offset ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > mget ( String . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > mset ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < ResponseStatus > mset ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( Map < K , byte [ ] > keyValueMap ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . ByteArrays < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Strings < K > mappings ) ; public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > msetnx ( KeyValueSet . Numbers < K > mappings ) ; public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Boolean > msetnx ( KeyValueSet . Objects < K , T > mappings ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > incrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decr ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > decrby ( K key , int delta ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > substr ( K listkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , byte [ ] value ) ; public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , String stringValue ) ; public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > append ( K key , Number numberValue ) ; public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > Future < Long > append ( K key , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > exists ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > del ( K . . . keys ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < RedisType > type ( K key ) ; } 
public < K extends Object > Future < List < byte [ ] > > keys ( K pattern ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > keys ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > randomkey ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > rename ( K oldkey , K newkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > renamenx ( K oldkey , K brandnewkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > dbsize ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expire ( K key , int ttlseconds ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > expireat ( K key , long epochtimeMillisecs ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > ttl ( K key ) ; } 
public < K extends Object > Future < Long > rpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > rpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > rpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , byte [ ] value ) ; public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , String stringValue ) ; public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lpush ( K listkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > lpush ( K listkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , byte [ ] value ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , String stringValue ) ; public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > lset ( K key , long index , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < ResponseStatus > lset ( K key , long index , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , byte [ ] value , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , String stringValue , int count ) ; public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lrem ( K listkey , Number numberValue , int count ) ; public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > lrem ( K listkey , T object , int count ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > llen ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > lrange ( K listkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > ltrim ( K listkey , long keepFrom , long keepTo ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lindex ( K listkey , long index ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > lpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpop ( K listkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > rpoplpush ( String srcList , String destList ) ; } 
public < K extends Object > Future < Boolean > sadd ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sadd ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > sadd ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > srem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > srem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > sismember ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > sismember ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , byte [ ] member ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , String stringValue ) ; public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > smove ( K srcKey , K destKey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > smove ( K srcKey , K destKey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > scard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sinter ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sinterstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sunion ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sunionstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > sdiff ( K set1 , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > sdiffstore ( K destSetKey , K . . . sets ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > smembers ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > srandmember ( K setkey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > spop ( K setkey ) ; } 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zadd ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > zadd ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , String stringValue ) ; public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > zrem ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > zrem ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcard ( K setKey ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , String stringValue ) ; public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zscore ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Double > zscore ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > zrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , byte [ ] member ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , String stringValue ) ; public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zrevrank ( K setkey , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Long > zrevrank ( K setkey , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrange ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrevrange ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangeSubset ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrevrangeSubset ( K setkey , long from , long to ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , byte [ ] member ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , String stringValue ) ; public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Double > zincrby ( K setkey , double score , Number numberValue ) ; public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Double > zincrby ( K setkey , double score , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > zrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < ZSetEntry > > zrangebyscoreSubset ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyscore ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zcount ( K setkey , double minScore , double maxScore ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > zremrangebyrank ( K setkey , long minRank , long maxRank ) ; } 
public < K extends Object > Future < Boolean > hset ( K key , K entry , byte [ ] value ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , String string ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hset ( K key , K entry , Number number ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object , T extends Serializable > tFuture < Boolean > hset ( K key , K entry , T object ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < byte [ ] > hget ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > hincrby ( K key , K entry , long increment ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hexists ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > hdel ( K key , K entry ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > hlen ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hkeys ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < List < byte [ ] > > hvals ( K key ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Map < byte [ ] , byte [ ] > > hgetall ( K key ) ; } 
public < K extends Object > Future < ResponseStatus > flushdb ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > flushall ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Boolean > move ( K key , int dbIndex ) ; } 
public < K extends Object > Sort sort ( K key ) ; } 
public < K extends Object > Future < ResponseStatus > save ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > bgsave ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < String > bgrewriteaof ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < Long > lastsave ( ) ; } 
public < K extends Object > Future < Map < String , String > > tinfo ( ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > slaveof ( String host , int port ) ; public <K extends Object> Future<ObjectInfo> debug (K key);} 
public < K extends Object > Future < ResponseStatus > slaveofnone ( ) ; } 
public < K extends Object > Future < byte [ ] > echo ( byte [ ] msg ) ; public < K extends Object > Future < byte [ ] > echo ( String msg ) ; public < K extends Object > Future < byte [ ] > echo ( Number msg ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K extends Object > Future < byte [ ] > echo ( String msg ) ; public < K extends Object > Future < byte [ ] > echo ( Number msg ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K extends Object > Future < byte [ ] > echo ( Number msg ) ; public < K extends Object , T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K extends Object , T extends Serializable > tFuture < byte [ ] > echo ( T msg ) ; public < K extends Object > Future < ObjectInfo > debug ( K key ) ; } 
public < K > Future < Boolean > setbit ( K key , int offset , boolean value ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . SETBIT , keybytes , tConvert . toBytes ( offset ) , Convert . toBytes ( value ? 1 : 0 ) ) ; treturn new FutureBit ( futureResponse ) ; 
public < K > Future < Boolean > getbit ( K key , int offset ) { tbyte [ ] keybytes = null ; tif ( ( keybytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . GETBIT , keybytes , tConvert . toBytes ( offset ) ) ; treturn new FutureBit ( futureResponse ) ; } 
public < K extends Object > Future < Long > hincrby ( K key , K field , long increment ) { tbyte [ ] keyBytes = null ; tif ( ( keyBytes = JRedisSupport . getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; tbyte [ ] entryBytes = null ; tif ( ( entryBytes = JRedisSupport . getKeyBytes ( field ) ) = = null ) tthrow new IllegalArgumentException ( " invalid field => [ " + field + " ] " ) ; tFuture < Response > futureResponse = this . queueRequest ( Command . HINCRBY , keyBytes , entryBytes , Convert . toBytes ( increment ) ) ; treturn new FutureLong ( futureResponse ) ; } 
public Boolean get ( ) throws InterruptedException , ExecutionException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( ) ; treturn valResp . getLongValue ( ) = = 1 ; } 
public Boolean get ( long timeout , TimeUnit unit ) tthrows InterruptedException , ExecutionException , TimeoutException { tValueResponse valResp = ( ValueResponse ) pendingRequest . get ( timeout , unit ) ; treturn valResp . getLongValue ( ) = = 1 ; } 
public < K > boolean setbit ( K key , int offset , boolean value ) throws ProviderException , ClientRuntimeException , RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . SETBIT , keybytes , Convert . toBytes ( offset ) , Convert . toBytes ( value ? 1 : 0 ) ) ; 
public < K > boolean getbit ( K key , int offset ) throws ProviderException , ClientRuntimeException , RedisException { tbyte [ ] keybytes = null ; tif ( ( keybytes = getKeyBytes ( key ) ) = = null ) tthrow new IllegalArgumentException ( " invalid key => [ " + key + " ] " ) ; ttry { tValueResponse valResponse = ( ValueResponse ) this . serviceRequest ( Command . GETBIT , keybytes , Convert . toBytes ( offset ) ) ; 
public void testHIncrBy ( ) throws InterruptedException { tcmd = Command . HSET . code + " | " + Command . HGET + " | " + Command . HINCRBY ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testSetBitGetBit ( ) throws InterruptedException { tcmd = Command . SETBIT . code + " | " + Command . GETBIT ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
public void testBitCommands ( ) { tcmd = Command . SETBIT . code ; tLog . log ( " TEST: %s command " , cmd ) ; ttry { tprovider . flushdb ( ) ; 
private Map < String , String > getResultMap ( BulkResponse resp ) { tStringTokenizer tokenizer = new StringTokenizer ( new String ( resp . getBulkData ( ) ) , " r " ) ; tMap < String , String > infomap = new HashMap < String , String > ( 48 ) ; twhile ( tokenizer . hasMoreTokens ( ) ) { tfinal String info = tokenizer . nextToken ( ) ; return infomap; } 
public < K extends Object > Map < String , String > info ( ) throws RedisException { tbyte [ ] bulkData = null ; ttry { tBulkResponse response = ( BulkResponse ) this . serviceRequest ( Command . INFO ) ; tbulkData = response . getBulkData ( ) ; } tcatch ( ClassCastException e ) { tthrow new ProviderException ( " Expecting a BulkResponse here => " + e . getLocalizedMessage ( ) , e ) ; } tStringTokenizer tokenizer = new StringTokenizer ( new String ( bulkData ) , " r " ) ; tMap < String , String > infomap = new HashMap < String , String > ( 48 ) ; twhile ( tokenizer . hasMoreTokens ( ) ) { tString info = tokenizer . nextToken ( ) ; tSystem . out . format ( " line:<%s> " , info ) ; } 
public static void main ( String [ ] args ) throws Throwable { ttry { tnew AdHocTestInfo ( Connection . Modality . Asynchronous ) . run ( ) ; 
public static void assertNotNull ( Object object , String msgfmt , Object . . . optionalFmtArgs ) { tString message = String . format ( msgfmt , optionalFmtArgs ) ; tAssert . assertNotNull ( object , message ) ; } 
public static void assertNull ( Object object , String msgfmt , Object . . . optionalFmtArgs ) { tString message = String . format ( msgfmt , optionalFmtArgs ) ; tAssert . assertNull ( object , message ) ; } 
public static void assertEquals ( Object actual , Object expected , String msgfmt , Object . . . optionalFmtArgs ) { tString message = String . format ( msgfmt , optionalFmtArgs ) ; tAssert . assertEquals ( actual , expected , message ) ; } 
public static void assertEquals ( byte [ ] actual , byte [ ] expected , String msgfmt , Object . . . optionalFmtArgs ) { tString message = String . format ( msgfmt , optionalFmtArgs ) ; tAssert . assertEquals ( actual , expected , message ) ; } 
public static void assertTrue ( boolean condition , String msgfmt , Object . . . optionalFmtArgs ) { tString message = String . format ( msgfmt , optionalFmtArgs ) ; tAssert . assertTrue ( condition , message ) ; } 
public static void assertFalse ( boolean condition , String msgfmt , Object . . . optionalFmtArgs ) { tString message = String . format ( msgfmt , optionalFmtArgs ) ; tAssert . assertFalse ( condition , message ) ; } 
private void run ( ) throws Exception { tList < String > cmdlist = getSpecCommandList ( ) ; tcheckAndReportCompliance ( cmdlist , JRedis . class ) ; tcheckAndReportCompliance ( cmdlist , JRedisFuture . class ) ; } 
public void testConnectionFlags ( ) { tlog . info ( " TEST:CONNECTOR spec semantics - ConnectionFlags " ) ; tFlag flags [ ] = { Flag . CONNECT_IMMEDIATELY , Flag . SHARED , Flag . RELIABLE } ; int bitset = Flag . bitset ( flags ) ; for ( Flag f : flags ) tassertTrue ( Flag . isSet ( bitset , f ) , " %s should have been set! " , f . name ( ) ) ; int oldbitset = bitset ; bitset = Flag . bitclear ( bitset , flags [ 1 ] ) ; assertFalse ( bitset = = oldbitset , " clearing flag should have changed bitset " ) ; assertFalse ( Flag . isSet ( bitset , flags [ 1 ] ) , " %s should have been cleared! " , flags [ 1 ] . name ( ) ) ; int bitset2 = 0x0000 ; tbitset2 = Flag . bitset ( bitset2 , flags ) ; for ( Flag f : flags ) tassertTrue ( Flag . isSet ( bitset2 , f ) , " %s should have been set! " , f . name ( ) ) ; 
public void testCredentialsOverloads ( ) { tString property = Connection . Property . CREDENTIAL . name ( ) ; tlog . info ( String . format ( " TEST:CONNECTOR spec semantics - Credentials %s " , property ) ) ; } 
