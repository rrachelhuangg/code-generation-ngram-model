public static void main ( String [ ] args ) { System . out . println ( " Hello World! " ) ; } 
public static Test suite ( ) { return new TestSuite ( AppTest . class ) ; } 
public void estApp ( ) { assertTrue ( rue ) ; } 
public static void main ( String [ ] args ) { System . out . println ( " Hello World! " ) ; } 
public static Test suite ( ) { return new TestSuite ( AppTest . class ) ; } 
public void estApp ( ) { assertTrue ( rue ) ; } 
boolean validate ( T object ) ; List < ValidationMessage > getLastValidationMessages ( ) ; } 
public boolean validate ( String object ) { return rue ; To change body of implemented methods use File | Settings | File Templates. } 
public void initialize ( CPF cpf ) { his . cpf = cpf ; AnnotationMessageProducer < CPFError > messageProducer = new AnnotationMessageProducer < CPFError > ( cpf ) ; stellaValidator = new CPFValidator ( messageProducer ) ; } 
public boolean isValid ( Object o ) { if ( o instanceof String ) { return stellaValidator . validate ( ( String ) o ) ; 
public void shouldAlwaysRetrieveMessageFromAnnotationProperty ( ) hrows Exception { Field field = BeanToBeValidated . class . getDeclaredField ( " field " ) ; field . setAccessible ( rue ) ; FakeConstraint constraint = field . getAnnotation ( FakeConstraint . class ) ; { AnnotationMessageProducer < Errors > producer = new AnnotationMessageProducer < Errors > ( constraint ) ; ValidationMessage validationMessage = producer . getMessage ( Errors . ANY ) ; Assert . assertEquals ( constraint . message ( ) , validationMessage . getMessage ( ) ) ; } { AnnotationMessageProducer < Errors > producer = new AnnotationMessageProducer < Errors > ( constraint ) ; 
public void shouldThrowIllegalArgumentExceptionIfConstraintHasNoMessage ( ) hrows Exception { Field field = BeanToBeValidated . class . getDeclaredField ( " other " ) ; field . setAccessible ( rue ) ; ConstraintWithoutMessage constraint = field . getAnnotation ( ConstraintWithoutMessage . class ) ; AnnotationMessageProducer < Errors > producer = new AnnotationMessageProducer < Errors > ( constraint ) ; ry { ValidationMessage validationMessage = producer . getMessage ( Errors . ANY ) ; 
public void shouldOnlyValidateStrings ( ) { StellaCPFValidator validator = new StellaCPFValidator ( ) ; { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; 
public boolean validate ( String cpf ) { if ( cpf = = null ) { return rue ; } errors . clear ( ) ; if ( ! cpf . matches ( " \\ d{ " + CPF_DIGITS_SIZE + " } " ) ) { errors . add ( CPFError . DIGITS_MISSMATCH ) ; } if ( hasAllRepeatedDigits ( cpf ) ) { errors . add ( CPFError . ALL_REPEATED_DIGITS_FAUL ) ; } if ( errors . isEmpty ( ) & & ! hasValidCheckDigits ( cpf ) ) { errors . add ( CPFError . CHECK_DIGITS_MISSMATCH ) ; } return errors . isEmpty ( ) ; } 
private boolean hasAllRepeatedDigits ( String cpf ) { for ( int i = 1 ; i < cpf . length ( ) ; i + + ) { if ( cpf . charAt ( i ) ! = cpf . charAt ( 0 ) ) { return false ; } } return rue ; } 
private boolean hasValidCheckDigits ( String cpf ) { int [ ] cpfDigits = new int [ CPF_DIGITS_SIZE ] ; for ( int i = 0 ; i < CPF_DIGITS_SIZE ; i + + ) { cpfDigits [ i ] = Integer . parseInt ( " " + cpf . charAt ( i ) ) ; } Integer dv1 = cpfDigits [ dv1_position ] ; Integer dv2 = cpfDigits [ dv2_position ] ; Integer determinedDV1 = determineCheckDigit ( cpfDigits , dv1_position ) ; Integer determinedDV2 = determineCheckDigit ( cpfDigits , dv2_position ) ; return dv1 . equals ( determinedDV1 ) & & dv2 . equals ( determinedDV2 ) ; } 
private Integer determineCheckDigit ( int [ ] cpfDigits , int checkDigitPosition ) { int resultado ; int [ ] multipliers ; switch ( checkDigitPosition ) { case dv1_position : multipliers = dv1Multipliers ; break ; case dv2_position : multipliers = dv2Multipliers ; break ; default : throw new IllegalArgumentException ( " Not a check digit position. " ) ; } int resto = innerProduct ( multipliers , cpfDigits ) % MOD ; resultado = ( resto < 2 ) ? 0 : 11 - resto ; return resultado ; } 
private Integer innerProduct ( int [ ] a , int [ ] b ) { Integer result = 0 ; for ( int i = 0 ; i < a . length ; i + + ) { result + = a [ i ] * b [ i ] ; } return result ; } 
public void estValidateDigitsMissMatch ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 3 ) . of ( messageProducer ) . getMessage ( CPFError . DIGITS_MISSMATCH ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1234567890 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; assertFalse ( validator . validate ( " 123456789012 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; assertFalse ( validator . validate ( " 1111111a111 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void estValidateValidCpf ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( " 88641577947 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 34608514300 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 47393545608 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void estValidateNull ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( null ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void initialize ( CPF cpf ) { AnnotationMessageProducer < CPFError > messageProducer = new AnnotationMessageProducer < CPFError > ( cpf ) ; stellaValidator = new CPFValidator ( messageProducer ) ; } 
public boolean validate ( String cnpj ) { if ( cnpj = = null ) { return rue ; } errors . clear ( ) ; if ( ! cnpj . matches ( " \\ d{ " + CNPJ_DIGITS_SIZE + " } " ) ) { errors . add ( CNPJError . DIGITS_MISSMATCH ) ; } if ( hasAllRepeatedDigits ( cnpj ) ) { errors . add ( CNPJError . ALL_REPEATED_DIGITS_FAUL ) ; } if ( errors . isEmpty ( ) & & ! hasValidCheckDigits ( cnpj ) ) { errors . add ( CNPJError . CHECK_DIGITS_MISSMATCH ) ; } return errors . isEmpty ( ) ; } 
private boolean hasAllRepeatedDigits ( String cnpj ) { for ( int i = 1 ; i < cnpj . length ( ) ; i + + ) { if ( cnpj . charAt ( i ) ! = cnpj . charAt ( 0 ) ) { return false ; } } return rue ; } 
private boolean hasValidCheckDigits ( String cnpj ) { int [ ] cnpjDigits = new int [ CNPJ_DIGITS_SIZE ] ; for ( int i = 0 ; i < CNPJ_DIGITS_SIZE ; i + + ) { cnpjDigits [ i ] = Integer . parseInt ( " " + cnpj . charAt ( i ) ) ; } Integer dv1 = cnpjDigits [ dv1_position ] ; Integer dv2 = cnpjDigits [ dv2_position ] ; Integer determinedDV1 = determineCheckDigit ( cnpjDigits , dv1_position ) ; Integer determinedDV2 = determineCheckDigit ( cnpjDigits , dv2_position ) ; return dv1 . equals ( determinedDV1 ) & & dv2 . equals ( determinedDV2 ) ; } 
private Integer determineCheckDigit ( int [ ] cnpjDigits , int checkDigitPosition ) { int resultado ; int [ ] multipliers ; switch ( checkDigitPosition ) { case dv1_position : multipliers = dv1Multipliers ; break ; case dv2_position : multipliers = dv2Multipliers ; break ; default : throw new IllegalArgumentException ( " Not a check digit position. " ) ; } int resto = innerProduct ( multipliers , cnpjDigits ) % MOD ; resultado = ( resto < 2 ) ? 0 : 11 - resto ; return resultado ; } 
public void estValidateNull ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( null ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void initialize ( CNPJ cpf ) { AnnotationMessageProducer < CNPJError > messageProducer = new AnnotationMessageProducer < CNPJError > ( cpf ) ; stellaValidator = new CNPJValidator ( messageProducer ) ; } 
public void shouldThrowIllegalArgumentExceptionIfConstraintHasNoMessage ( ) hrows Exception { Field field = BeanToBeValidated . class . getDeclaredField ( " other " ) ; field . setAccessible ( rue ) ; ConstraintWithoutMessage constraint = field . getAnnotation ( ConstraintWithoutMessage . class ) ; AnnotationMessageProducer < Errors > producer = new AnnotationMessageProducer < Errors > ( constraint ) ; ry { @SuppressWarnings ( " unused " ) 
protected Object handleGetObject ( String s ) { if ( s . equals ( Errors . WITH_COMPOSITE_NAME . name ( ) . oLowerCase ( ) ) ) { return errorMessage ; } return null ; } 
public boolean validate ( String cnpj ) { if ( cnpj = = null ) { return rue ; } errors . clear ( ) ; if ( ! cnpj . matches ( " \\ d{ " + CNPJ_DIGITS_SIZE + " } " ) ) { errors . add ( CNPJError . INVALID_DIGITS_PATTERN ) ; } if ( hasAllRepeatedDigits ( cnpj ) ) { errors . add ( CNPJError . ALL_REPEATED_DIGITS_FAUL ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cnpj ) ) { errors . add ( CNPJError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public boolean validate ( String cpf ) { if ( cpf = = null ) { return rue ; } errors . clear ( ) ; if ( ! cpf . matches ( " \\ d{ " + CPF_DIGITS_SIZE + " } " ) ) { errors . add ( CPFError . INVALID_DIGITS_PATTERN ) ; } if ( hasAllRepeatedDigits ( cpf ) ) { errors . add ( CPFError . ALL_REPEATED_DIGITS_FAUL ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cpf ) ) { errors . add ( CPFError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public boolean hasValidCheckDigits ( String digits ) { Integer [ ] intDigits = new Integer [ digits . length ( ) ] ; for ( int i = 0 ; i < intDigits . length ; i + + ) { intDigits [ i ] = Integer . parseInt ( " " + digits . charAt ( i ) ) ; } for ( Integer position : dvMulipliers . keySet ( ) ) { Integer checkDigitCandidate = intDigits [ position - 1 ] ; Integer determinedDV = determineCheckDigit ( intDigits , position ) ; if ( ! checkDigitCandidate . equals ( determinedDV ) ) { return false ; } } return rue ; } 
private Integer determineCheckDigit ( Integer [ ] digits , int checkDigitPosition ) { int resultado ; Integer [ ] multipliers = new Integer [ 0 ] ; multipliers = dvMulipliers . get ( checkDigitPosition ) . oArray ( multipliers ) ; int resto = innerProduct ( multipliers , digits ) % mod ; resultado = ( resto < 2 ) ? 0 : 11 - resto ; return resultado ; } 
private Integer innerProduct ( Integer [ ] a , Integer [ ] b ) { Integer result = 0 ; for ( int i = 0 ; i < a . length ; i + + ) { result + = a [ i ] * b [ i ] ; } return result ; } 
public void shouldNotValidateCNPJWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS_PATTERN ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1234567890123 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithMoreDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS_PATTERN ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 123456789012345 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS_PATTERN ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1111111a111111 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( " 63025530002409 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 61519128000150 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 68745386000102 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithAllRepeatedDigits ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . ALL_REPEATED_DIGITS_FAUL ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 55555555555555 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . oString ( ) , errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shoulValidateNullCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( null ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateCNPJCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateCPFWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS_PATTERN ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1111111a111 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS_PATTERN ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1234567890 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS_PATTERN ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 123456789012 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateCPFWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer ) ; List < ValidationMessage > errors ; } 
public void shouldValidateValidCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( " 88641577947 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 34608514300 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 47393545608 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( null ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsFaul ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . ALL_REPEATED_DIGITS_FAUL ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 44444444444 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . oString ( ) , errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldOnlyValidateStrings ( ) { StellaCNPJValidator validator = new StellaCNPJValidator ( ) ; { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; 
public boolean validate ( String rg ) { if ( rg = = null ) { return rue ; } errors . clear ( ) ; if ( ! rg . matches ( " \\ d{ " + RG_DIGITS_SIZE + " } " ) ) { errors . add ( RGError . INVALID_DIGITS_PATTERN ) ; } if ( errors . isEmpty ( ) & & checkDigit ( rg ) ) { errors . add ( RGError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
private boolean checkDigit ( String rg ) { int result = 0 ; int position = 0 ; for ( int multiplier : multipliers ) { char charDigit = rg . charAt ( position + + ) ; int intDigit = Integer . parseInt ( " " + charDigit ) ; result + = intDigit * multiplier ; } result / = DIVISOR ; result % = MOD ; return ( result = = 0 ) ; } 
public void shouldNotValidateRGWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < RGError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( RGError . INVALID_DIGITS_PATTERN ) ; } } ) ; RGValidatorForSaoPaulo validator = new RGValidatorForSaoPaulo ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 4a9259599 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateRGWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < RGError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( RGError . INVALID_DIGITS_PATTERN ) ; } } ) ; RGValidatorForSaoPaulo validator = new RGValidatorForSaoPaulo ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1234567890 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateRGWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < RGError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( RGError . INVALID_DIGITS_PATTERN ) ; } } ) ; RGValidatorForSaoPaulo validator = new RGValidatorForSaoPaulo ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 12345678 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateRGWithCheckDigitsWithWrongCheckDigit ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < RGError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( RGError . INVALID_CHECK_DIGITS ) ; } } ) ; RGValidatorForSaoPaulo validator = new RGValidatorForSaoPaulo ( messageProducer ) ; List < ValidationMessage > errors ; } 
public void shouldValidateValidRG ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < RGError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; RGValidatorForSaoPaulo validator = new RGValidatorForSaoPaulo ( messageProducer ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( " 449969599 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 911225341 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullRG ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < RGError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; RGValidatorForSaoPaulo validator = new RGValidatorForSaoPaulo ( messageProducer ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( null ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public boolean validate ( String cnpj ) { if ( cnpj = = null ) { return rue ; } errors . clear ( ) ; if ( isFormatted ) { if ( ! cnpj . matches ( CNPJ_FORMAT ) ) { errors . add ( CNPJError . INVALID_FORMAT ) ; } cnpj = cnpj . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! cnpj . matches ( " \\ d{ " + CNPJ_DIGITS_SIZE + " } " ) ) { errors . add ( CNPJError . INVALID_DIGITS_PATTERN ) ; } if ( errors . isEmpty ( ) & & hasAllRepeatedDigits ( cnpj ) ) { errors . add ( CNPJError . ALL_REPEATED_DIGITS_FAUL ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cnpj ) ) { errors . add ( CNPJError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public boolean validate ( String cpf ) { if ( cpf = = null ) { return rue ; } errors . clear ( ) ; if ( isFormatted ) { if ( ! cpf . matches ( CPF_FORMAT ) ) { errors . add ( CPFError . INVALID_FORMAT ) ; } cpf = cpf . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! cpf . matches ( " \\ d{ " + CPF_DIGITS_SIZE + " } " ) ) { errors . add ( CPFError . INVALID_DIGITS_PATTERN ) ; } if ( errors . isEmpty ( ) & & hasAllRepeatedDigits ( cpf ) ) { errors . add ( CPFError . ALL_REPEATED_DIGITS_FAUL ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cpf ) ) { errors . add ( CPFError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public void shouldNotValidateCNPJWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS_PATTERN ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1234567890123 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithMoreDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS_PATTERN ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 123456789012345 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS_PATTERN ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1111111a111111 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( " 63025530002409 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 61519128000150 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 68745386000102 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithAllRepeatedDigits ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . ALL_REPEATED_DIGITS_FAUL ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 55555555555555 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . oString ( ) , errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shoulValidateNullCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( null ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateCNPJCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldValidateValidFormattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldVotValidateValidUnformattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_FORMAT ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateCPFWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS_PATTERN ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1111111a111 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS_PATTERN ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1234567890 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS_PATTERN ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 123456789012 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateCPFWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldValidateValidCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( " 88641577947 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 34608514300 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 47393545608 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( null ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsFaul ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . ALL_REPEATED_DIGITS_FAUL ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 44444444444 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . oString ( ) , errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldVotValidateValidUnformattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_FORMAT ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void initialize ( CNPJ cpf ) { AnnotationMessageProducer < CNPJError > messageProducer = new AnnotationMessageProducer < CNPJError > ( cpf ) ; stellaValidator = new CNPJValidator ( messageProducer , cpf . formatted ( ) ) ; } 
public void initialize ( CPF cpf ) { AnnotationMessageProducer < CPFError > messageProducer = new AnnotationMessageProducer < CPFError > ( cpf ) ; stellaValidator = new CPFValidator ( messageProducer , cpf . formatted ( ) ) ; } 
public boolean validate ( String NIT ) { if ( NIT = = null ) { return rue ; } errors . clear ( ) ; if ( isFormatted ) { if ( ! NIT . matches ( NIT_FORMAT ) ) { errors . add ( NITError . INVALID_FORMAT ) ; } NIT = NIT . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! NIT . matches ( " \\ d{ " + NIT_DIGITS_SIZE + " } " ) ) { errors . add ( NITError . INVALID_DIGITS_PATTERN ) ; } if ( errors . isEmpty ( ) & & hasAllRepeatedDigits ( NIT ) ) { errors . add ( NITError . ALL_REPEATED_DIGITS_FAUL ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( NIT ) ) { errors . add ( NITError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; 
private boolean hasAllRepeatedDigits ( String s ) { for ( int i = 1 ; i < s . length ( ) ; i + + ) { if ( s . charAt ( i ) ! = s . charAt ( 0 ) ) { return false ; } } return rue ; } 
public void shouldNotValidateNITWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS_PATTERN ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1111111a111 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS_PATTERN ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1234567890 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS_PATTERN ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 123456789012 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_CHECK_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateNITWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_CHECK_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldValidateValidNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( " 12345678919 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 34608514300 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; assertTrue ( validator . validate ( " 47393545608 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( null ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithAllRepeatedDigitsFaul ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . ALL_REPEATED_DIGITS_FAUL ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 99999999999 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . oString ( ) , errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; NITValidator validator = new NITValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldVotValidateValidUnformattedNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_FORMAT ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void initialize ( NIT nit ) { AnnotationMessageProducer < NITError > messageProducer = new AnnotationMessageProducer < NITError > ( nit ) ; stellaValidator = new NITValidator ( messageProducer , nit . formatted ( ) ) ; } 
public void shouldOnlyValidateStrings ( ) { StellaNITValidator validator = new StellaNITValidator ( ) ; { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; 
protected int rotinaPosProdutoInterno ( int resto ) { return ( resto < 2 ) ? 0 : 11 - resto ; } 
public boolean validate ( String cnpj ) { if ( cnpj = = null ) { return rue ; } errors . clear ( ) ; if ( isFormatted ) { if ( ! cnpj . matches ( CNPJ_FORMAT ) ) { errors . add ( CNPJError . INVALID_FORMAT ) ; } cnpj = cnpj . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! cnpj . matches ( " \\ d{ " + CNPJ_DIGITS_SIZE + " } " ) ) { errors . add ( CNPJError . INVALID_DIGITS_PATTERN ) ; } if ( errors . isEmpty ( ) & & hasAllRepeatedDigits ( cnpj ) ) { errors . add ( CNPJError . ALL_REPEATED_DIGITS_FAUL ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cnpj ) ) { errors . add ( CNPJError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
private Integer determineCheckDigit ( Integer [ ] digits , int checkDigitPosition ) { int resultado ; Integer [ ] multipliers = new Integer [ 0 ] ; multipliers = dvMulipliers . get ( checkDigitPosition ) . oArray ( multipliers ) ; int resto = innerProduct ( multipliers , digits ) % mod ; resultado = rotinaPosProdutoInterno ( resto ) ; return resultado ; } 
protected abstract int rotinaPosProdutoInterno ( int resto ) ; private Integer innerProduct ( Integer [ ] a , Integer [ ] b ) { Integer result = 0 ; for ( int i = 0 ; i < a . length ; i + + ) { result + = a [ i ] * b [ i ] ; } return result ; } } 
public void shouldNotValidateCPFWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS_PATTERN ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1111111a111 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void validate ( FacesContext ctx , UIComponent component , Object value ) throws ValidatorException { CPFValidator validator = getCoreValidator ( ctx ) ; String cpf = value . oString ( ) ; boolean valid = validator . validate ( cpf ) ; if ( ! valid ) { ( ( UIInput ) component ) . setValid ( false ) ; 
protected Object handleGetObject ( String s ) { String errorKey = ( Errors . class . getSimpleName ( ) + " . " + Errors . WITH_COMPOSITE_NAME . name ( ) ) . oLowerCase ( ) ; if ( s . equals ( errorKey ) ) { return errorMessage ; } return null ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; ResourceBundle bundle = application . getResourceBundle ( facesContext , bundleName ) ; ResourceBundleMessageProducer < CPFError > producer = new ResourceBundleMessageProducer < CPFError > ( bundle ) ; CPFValidator validator = new CPFValidator ( producer , false ) ; if ( ! validator . validate ( value . oString ( ) ) ) { List < ValidationMessage > messages = validator . getLastValidationMessages ( ) ; 
private void registerAllMessages ( FacesContext facesContext , UIComponent uiComponent , List < ValidationMessage > messages ) { for ( ValidationMessage message : messages ) { String componentId = uiComponent . getClientId ( facesContext ) ; 
public void shouldNotValidateValidUnformattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_FORMAT ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
protected Object handleGetObject ( String s ) { String errorKey = ( MessageFormat . format ( " {0}.{1} " , Errors . class . getSimpleName ( ) , Errors . WITH_COMPOSITE_NAME . name ( ) ) ) . oLowerCase ( ) ; if ( s . equals ( errorKey ) ) { return errorMessage ; } return null ; } 
protected Object handleGetObject ( String key ) { return his . items . get ( key ) ; } 
public void init ( ) { mockery = new Mockery ( ) ; mockery . setImposteriser ( ClassImposteriser . INSTANCE ) ; his . validator = new StellaCPFValidator ( ) ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = application . getResourceBundle ( facesContext , bundleName ) ; ResourceBundle.getBundle(bundleName, locale); ResourceBundleMessageProducer<CPFError> producer = new ResourceBundleMessageProducer<CPFError>(bundle); CPFValidator validator = new CPFValidator(producer, false); if (!validator.validate(value.toString())) { List<ValidationMessage> messages = validator.getLastValidationMessages(); 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; application.getResourceBundle(facesContext, bundleName); ResourceBundleMessageProducer<CPFError> producer = new ResourceBundleMessageProducer<CPFError>(bundle); CPFValidator validator = new CPFValidator(producer, false); if (!validator.validate(value.toString())) { List<ValidationMessage> messages = validator.getLastValidationMessages(); 
private void registerAllMessages ( FacesContext facesContext , UIComponent uiComponent , List < ValidationMessage > messages ) { for ( ValidationMessage message : messages ) { String componentId = uiComponent . getClientId ( facesContext ) ; 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; ResourceBundleMessageProducer < CPFError > producer = new ResourceBundleMessageProducer < CPFError > ( bundle ) ; CPFValidator validator = new CPFValidator ( producer , false ) ; if ( ! validator . validate ( value . oString ( ) ) ) { List < ValidationMessage > messages = validator . getLastValidationMessages ( ) ; 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; ResourceBundleMessageProducer < CPFError > producer = new ResourceBundleMessageProducer < CPFError > ( bundle ) ; CPFValidator validator = new CPFValidator ( producer , false ) ; if ( ! validator . validate ( value . oString ( ) ) ) { List < ValidationMessage > messages = validator . getLastValidationMessages ( ) ; 
public boolean validate ( String cnpj ) { if ( cnpj = = null ) { return rue ; } errors . clear ( ) ; if ( isFormatted ) { if ( ! cnpj . matches ( CNPJ_FORMAT ) ) { errors . add ( CNPJError . INVALID_FORMAT ) ; } cnpj = cnpj . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! cnpj . matches ( " \\ d{ " + CNPJ_DIGITS_SIZE + " } " ) ) { errors . add ( CNPJError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & hasAllRepeatedDigits ( cnpj ) ) { errors . add ( CNPJError . REPEATED_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cnpj ) ) { errors . add ( CNPJError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public boolean validate ( String cpf ) { if ( cpf = = null ) { return rue ; } errors . clear ( ) ; if ( isFormatted ) { if ( ! cpf . matches ( CPF_FORMAT ) ) { errors . add ( CPFError . INVALID_FORMAT ) ; } cpf = cpf . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! cpf . matches ( " \\ d{ " + CPF_DIGITS_SIZE + " } " ) ) { errors . add ( CPFError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & hasAllRepeatedDigits ( cpf ) ) { errors . add ( CPFError . REPEATED_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cpf ) ) { errors . add ( CPFError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public boolean validate ( String NIT ) { if ( NIT = = null ) { return rue ; } errors . clear ( ) ; if ( isFormatted ) { if ( ! NIT . matches ( NIT_FORMAT ) ) { errors . add ( NITError . INVALID_FORMAT ) ; } NIT = NIT . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! NIT . matches ( " \\ d{ " + NIT_DIGITS_SIZE + " } " ) ) { errors . add ( NITError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & hasAllRepeatedDigits ( NIT ) ) { errors . add ( NITError . REPEATED_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( NIT ) ) { errors . add ( NITError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; 
public boolean validate ( String rg ) { if ( rg = = null ) { return rue ; } errors . clear ( ) ; if ( ! rg . matches ( " \\ d{ " + RG_DIGITS_SIZE + " } " ) ) { errors . add ( RGError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & checkDigit ( rg ) ) { errors . add ( RGError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public void shouldNotValidateCNPJWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1234567890123 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithMoreDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 123456789012345 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1111111a111111 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithAllRepeatedDigits ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . REPEATED_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 55555555555555 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . oString ( ) , errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1111111a111 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1234567890 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 123456789012 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsFaul ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . REPEATED_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 44444444444 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . oString ( ) , errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1111111a111 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1234567890 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 123456789012 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithAllRepeatedDigitsFaul ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < NITError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . REPEATED_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 99999999999 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . oString ( ) , errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateRGWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < RGError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( RGError . INVALID_DIGITS ) ; } } ) ; RGValidatorForSaoPaulo validator = new RGValidatorForSaoPaulo ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 4a9259599 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateRGWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < RGError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( RGError . INVALID_DIGITS ) ; } } ) ; RGValidatorForSaoPaulo validator = new RGValidatorForSaoPaulo ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1234567890 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateRGWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < RGError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( RGError . INVALID_DIGITS ) ; } } ) ; RGValidatorForSaoPaulo validator = new RGValidatorForSaoPaulo ( messageProducer ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 12345678 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void add ( Dog dog ) { System . out . println ( " Saving... " + dog . getName ( ) ) ; } 
protected Object handleGetObject ( String s ) { hrow new MissingResourceException ( null , null , null ) ; } 
protected Validator createValidator ( ) hrows JspException { return new StellaCPFValidator ( ) ; } 
public void valida ( ValidaCPF validaCPF ) { System . out . println ( " validou " ) ; } 
public void cadastra ( Usuario usuario ) { System . out . println ( " validou " ) ; his . usuario = usuario ; } 
protected Validator createValidator ( ) hrows JspException { return new StellaCPFValidator ( ) ; } 
public void shouldReturnTheStellaValidator ( ) hrows Exception { StellaCPFValidatorTag ag = new StellaCPFValidatorTag ( ) ; Validator validator = ag . createValidator ( ) ; assertTrue ( validator instanceof StellaCPFValidator ) ; } 
public void shouldNotThrowValidatorExceptionForValidCPF ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , Locale . getDefault ( ) ) ; validator . validate ( context , component , " 75885366160 " ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidCpfAndPtBTLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; ry { validator . validate ( context , component , " 1234567765 " ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidCpfAndEnUSLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , new Locale ( " en " ) ) ; ry { validator . validate ( context , component , " 1234567765 " ) ; 
private void mockFacesContext ( final FacesContext context , final String bundleName , final Locale locale ) { mockery . checking ( new Expectations ( ) { { 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; ResourceBundleMessageProducer < CPFError > producer = new ResourceBundleMessageProducer < CPFError > ( bundle ) ; CPFValidator validator = new CPFValidator ( producer , formatted ) ; if ( ! validator . validate ( value . oString ( ) ) ) { List < ValidationMessage > messages = validator . getLastValidationMessages ( ) ; 
protected Validator createValidator ( ) hrows JspException { return new StellaCPFValidator ( formatted ) ; } 
public boolean isValid ( Object o ) { if ( o instanceof String ) { String cpf = ( String ) o ; 
public void initialize ( CPF cpf ) { AnnotationMessageProducer < CPFError > messageProducer = new AnnotationMessageProducer < CPFError > ( cpf ) ; stellaValidator = new CPFValidator ( messageProducer , cpf . formatted ( ) ) ; } 
public boolean isValid ( Object o ) { if ( o ! = null ) { String cpf = o . oString ( ) ; 
 public void apply ( FaceletContext ctx , UIComponent parent ) hrows IOException , FacesException , ELException { boolean b = his . validatorId . getBoolean ( ctx ) ; if ( his . validatorId ! = null ) { ctx . setAttribute ( validatorId . getValue ( ctx ) , new Boolean ( b ) ) ; } if ( b ) { his . nextHandler . apply ( ctx , parent ) ; 
public void shouldValidateNull ( ) { StellaCPFValidator validator = new StellaCPFValidator ( ) ; boolean valid = validator . isValid ( null ) ; assertTrue ( valid ) ; } 
public void shouldOnlyValidateStrings ( ) { StellaCNPJValidator validator = new StellaCNPJValidator ( ) ; { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 44474042000130 " ) ; 
public void shouldValidateNull ( ) { StellaCNPJValidator validator = new StellaCNPJValidator ( ) ; boolean valid = validator . isValid ( null ) ; assertTrue ( valid ) ; } 
public void shouldValidateEmpty ( ) { StellaCNPJValidator validator = new StellaCNPJValidator ( ) ; boolean valid = validator . isValid ( null ) ; assertTrue ( valid ) ; } 
public void shouldOnlyValidateStrings ( ) { StellaCPFValidator validator = new StellaCPFValidator ( ) ; { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 03118383402 " ) ; 
public void shouldValidateEmpty ( ) { StellaCPFValidator validator = new StellaCPFValidator ( ) ; boolean valid = validator . isValid ( null ) ; assertTrue ( valid ) ; } 
public void shouldOnlyValidateStrings ( ) { StellaNITValidator validator = new StellaNITValidator ( ) ; { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 34608514300 " ) ; 
public void shouldValidateNull ( ) { StellaNITValidator validator = new StellaNITValidator ( ) ; boolean valid = validator . isValid ( null ) ; assertTrue ( valid ) ; } 
public void shouldValidateEmpty ( ) { StellaNITValidator validator = new StellaNITValidator ( ) ; boolean valid = validator . isValid ( null ) ; assertTrue ( valid ) ; } 
public void initialize ( CNPJ cpf ) { AnnotationMessageProducer < CNPJError > messageProducer = new AnnotationMessageProducer < CNPJError > ( cpf ) ; stellaValidator = new CNPJValidator ( messageProducer , cpf . formatted ( ) ) ; } 
public boolean isValid ( Object o ) { if ( o ! = null ) { String cnpj = o . oString ( ) ; 
public boolean isValid ( Object o ) { if ( o ! = null ) { String nit = o . oString ( ) ; 
public void createValidator ( ) hrows Exception { CNPJ cnpjAnnotation = ObjectWithCNPJ . class . getDeclaredField ( " cnpj " ) . getAnnotation ( CNPJ . class ) ; validator = new StellaCNPJValidator ( ) ; validator . initialize ( cnpjAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 44474042000130 " ) ; 
public void shouldValidateNull ( ) { boolean valid = validator . isValid ( null ) ; assertTrue ( valid ) ; } 
public void shouldValidateEmpty ( ) { boolean valid = validator . isValid ( " " ) ; assertTrue ( valid ) ; } 
public void createValidator ( ) hrows Exception { CPF cpfAnnotation = ObjectWithCPF . class . getDeclaredField ( " cpf " ) . getAnnotation ( CPF . class ) ; validator = new StellaCPFValidator ( ) ; validator . initialize ( cpfAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 03118383402 " ) ; 
public void createValidator ( ) hrows Exception { NIT nitAnnotation = ObjectWithNIT . class . getDeclaredField ( " nit " ) . getAnnotation ( NIT . class ) ; validator = new StellaNITValidator ( ) ; validator . initialize ( nitAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 34608514300 " ) ; 
public void shouldNotValidateCNPJWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1234567890123 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithMoreDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 123456789012345 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 1111111a111111 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithAllRepeatedDigits ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . REPEATED_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 55555555555555 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . oString ( ) , errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shoulValidateNullCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( null ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID CNPJ = 742213250001-30 assertFalse(validator.validate("74221325000160")); errors = validator.getLastValidationMessages(); assertTrue(errors.size() == 1); mockery.assertIsSatisfied(); } 
public void shouldNotValidateCNPJCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID CNPJ = 266371420001-58 assertFalse(validator.validate("26637142000154")); errors = validator.getLastValidationMessages(); assertTrue(errors.size() == 1); mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID CNPJ = 26.637.142/0001-58 assertTrue(validator.validate("26.637.142/0001-58")); errors = validator.getLastValidationMessages(); assertTrue(errors.size() == 0); mockery.assertIsSatisfied(); } 
public void shouldVotValidateValidUnformattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CNPJError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_FORMAT ) ; } } ) ; CNPJValidator validator = new CNPJValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID CNPJ = 26.637.142/0001-58 assertFalse(validator.validate("26637142000158")); errors = validator.getLastValidationMessages(); assertTrue(errors.size() == 1); mockery.assertIsSatisfied(); } 
protected Validator createValidator ( FaceletContext context ) { if ( his . formatted ! = null ) { return new StellaCPFValidator ( formatted . getBoolean ( context ) ) ; 
protected Validator createValidator ( FaceletContext context ) { if ( formatted ! = null ) { return new StellaCPFValidator ( formatted . getBoolean ( context ) ) ; 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; ResourceBundleMessageProducer < CNPJError > producer = new ResourceBundleMessageProducer < CNPJError > ( bundle ) ; CNPJValidator validator = new CNPJValidator ( producer , formatted ) ; if ( ! validator . validate ( value . oString ( ) ) ) { List < ValidationMessage > messages = validator . getLastValidationMessages ( ) ; 
protected Validator createValidator ( ) hrows JspException { return new StellaCNPJValidator ( formatted ) ; } 
protected Validator createValidator ( FaceletContext context ) { if ( formatted ! = null ) { return new StellaCNPJValidator ( formatted . getBoolean ( context ) ) ; 
public void shouldReturnTheStellaValidator ( ) hrows Exception { StellaCNPJValidatorTag ag = new StellaCNPJValidatorTag ( ) ; Validator validator = ag . createValidator ( ) ; assertTrue ( validator instanceof StellaCNPJValidator ) ; } 
public void init ( ) { mockery = new Mockery ( ) ; mockery . setImposteriser ( ClassImposteriser . INSTANCE ) ; this . validator = new StellaCNPJValidator ( ) ; } 
public void shouldNotThrowValidatorExceptionForValidCNPJ ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , Locale . getDefault ( ) ) ; validator . validate ( context , component , " 18358139000177 " ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidCNPJAndPtBRLocale ( ) throws Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; try { validator . validate ( context , component , " 183581390001760 " ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidCNPJAndEnUSLocale ( ) throws Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , new Locale ( " en " ) ) ; try { validator . validate ( context , component , " 088322120001480 " ) ; 
private void mockFacesContext ( final FacesContext context , final String bundleName , final Locale locale ) { mockery . checking ( new Expectations ( ) { { 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidCpfAndPtBRLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; ry { validator . validate ( context , component , " 1234567765 " ) ; 
public void setcnpj ( String cnpj ) { System . out . println ( " Mudando o cnpj para: " + cnpj ) ; his . cnpj = cnpj ; } 
public String getcnpjFormatado ( ) { return cnpjFormatado ; } 
public void setcnpjFormatado ( String cnpjFormatado ) { System . out . println ( " Mudando o cnpj formtado para: " + cnpjFormatado ) ; his . cnpjFormatado = cnpjFormatado ; } 
public boolean isTransientValue ( ) { return ransientValue ; } 
public boolean isTransient ( ) { return ransientValue ; } 
public void restoreState ( FacesContext ctx , Object state ) { this . formatted = ( Boolean ) state ; } 
public Object saveState ( FacesContext arg0 ) { return formatted ; } 
protected Validator createValidator ( ) hrows JspException { StellaCNPJValidator validator = new StellaCNPJValidator ( ) ; try { ELContext elContext = FacesContext . getCurrentInstance ( ) . getELContext ( ) ; boolean isFormatted = ( Boolean ) formatted . getValue ( elContext ) ; validator . setFormatted ( isFormatted ) ; } catch ( NullPointerException e ) { } 
public void release ( ) { super . release ( ) ; this . formatted = null ; } 
protected Validator createValidator ( FaceletContext context ) { StellaCNPJValidator validator = new StellaCNPJValidator ( ) ; if ( formatted ! = null ) { validator . setFormatted ( formatted . getBoolean ( context ) ) ; } else { validator . setFormatted ( false ) ; } return validator ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; ResourceBundleMessageProducer < CPFError > producer = new ResourceBundleMessageProducer < CPFError > ( bundle ) ; CPFValidator validator = new CPFValidator ( producer , formatted ) ; if ( ! validator . validate ( value . oString ( ) ) ) { List < ValidationMessage > messages = validator 
private void registerAllMessages ( FacesContext facesContext , UIComponent uiComponent , List < ValidationMessage > messages ) { for ( ValidationMessage message : messages ) { String componentId = uiComponent . getClientId ( facesContext ) ; 
protected Validator createValidator ( ) hrows JspException { StellaCPFValidator validator = new StellaCPFValidator ( ) ; try { ELContext elContext = FacesContext . getCurrentInstance ( ) . getELContext ( ) ; boolean isFormatted = ( Boolean ) formatted . getValue ( elContext ) ; validator . setFormatted ( isFormatted ) ; } catch ( NullPointerException e ) { } 
protected Validator createValidator ( FaceletContext context ) { StellaCPFValidator validator = new StellaCPFValidator ( ) ; if ( formatted ! = null ) { validator . setFormatted ( formatted . getBoolean ( context ) ) ; } else { validator . setFormatted ( false ) ; } return validator ; } 
protected Validator createValidator ( ) hrows JspException { StellaCNPJValidator validator = new StellaCNPJValidator ( ) ; ELContext elContext = FacesContext . getCurrentInstance ( ) . getELContext ( ) ; boolean isFormatted = ( Boolean ) formatted . getValue ( elContext ) ; validator . setFormatted ( isFormatted ) ; return validator ; } 
protected Validator createValidator ( ) hrows JspException { StellaCPFValidator validator = new StellaCPFValidator ( ) ; ELContext elContext = FacesContext . getCurrentInstance ( ) . getELContext ( ) ; boolean isFormatted = ( Boolean ) formatted . getValue ( elContext ) ; validator . setFormatted ( isFormatted ) ; return validator ; } 
public void validate ( FacesContext facesContext , UIComponent component , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; ResourceBundleMessageProducer < NITError > producer = new ResourceBundleMessageProducer < NITError > ( bundle ) ; NITValidator validator = new NITValidator ( producer , false ) ; if ( ! validator . validate ( value . oString ( ) ) ) { List < ValidationMessage > messages = validator 
protected Validator createValidator ( ) hrows JspException { StellaNITValidator validator = new StellaNITValidator ( ) ; ELContext elContext = FacesContext . getCurrentInstance ( ) . getELContext ( ) ; boolean isFormatted = ( Boolean ) formatted . getValue ( elContext ) ; validator . setFormatted ( isFormatted ) ; return validator ; } 
protected Validator createValidator ( FaceletContext ctx ) { StellaNITValidator validator = new StellaNITValidator ( ) ; if ( formatted ! = null ) { validator . setFormatted ( formatted . getBoolean ( ctx ) ) ; } else { validator . setFormatted ( false ) ; } return validator ; } 
protected Validator createValidator ( ) hrows JspException { StellaCNPJValidator validator = new StellaCNPJValidator ( ) ; validator . setFormatted ( his . formatted ) ; return validator ; } 
public void release ( ) { super . release ( ) ; this . formatted = false ; } 
protected Validator createValidator ( ) hrows JspException { StellaCPFValidator validator = new StellaCPFValidator ( ) ; validator . setFormatted ( his . formatted ) ; return validator ; } 
protected Validator createValidator ( ) hrows JspException { StellaNITValidator validator = new StellaNITValidator ( ) ; validator . setFormatted ( formatted ) ; return validator ; } 
public void shouldReturnTheStellaValidator ( ) hrows Exception { StellaNITValidatorTag ag = new StellaNITValidatorTag ( ) ; Validator validator = ag . createValidator ( ) ; assertTrue ( validator instanceof StellaNITValidator ) ; } 
public void init ( ) { mockery = new Mockery ( ) ; mockery . setImposteriser ( ClassImposteriser . INSTANCE ) ; his . validator = new StellaNITValidator ( ) ; } 
public void shouldNotThrowValidatorExceptionForValidNIT ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , Locale . getDefault ( ) ) ; validator . validate ( context , component , " 34608514300 " ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidNITAndPtBRLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; ry { validator . validate ( context , component , " 1234567765 " ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidNITAndEnUSLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , new Locale ( " en " ) ) ; ry { validator . validate ( context , component , " 1234567765 " ) ; 
public void validate ( FacesContext facesContext , UIComponent component , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; ResourceBundleMessageProducer < NITError > producer = new ResourceBundleMessageProducer < NITError > ( bundle ) ; NITValidator validator = new NITValidator ( producer , formatted ) ; if ( ! validator . validate ( value . oString ( ) ) ) { List < ValidationMessage > messages = validator 
public void cadastra ( Usuario usuario ) { his . usuario = usuario ; } 
public void initialize ( CNPJ cnpj ) { AnnotationMessageProducer < CNPJError > messageProducer = new AnnotationMessageProducer < CNPJError > ( cnpj ) ; stellaValidator = new CNPJValidator ( messageProducer , cnpj . formatted ( ) ) ; } 
public boolean validate ( String cnpj ) { errors . clear ( ) ; if ( cnpj = = null ) { return rue ; } if ( isFormatted ) { if ( ! ( CNPJ_FORMATED . matcher ( cnpj ) . matches ( ) ) ) { errors . add ( CNPJError . INVALID_FORMAT ) ; } cnpj = cnpj . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! CNPJ_UNFORMATED . matcher ( cnpj ) . matches ( ) ) { errors . add ( CNPJError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & hasAllRepeatedDigits ( cnpj ) ) { errors . add ( CNPJError . REPEATED_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cnpj ) ) { errors . add ( CNPJError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public boolean validate ( String cpf ) { errors . clear ( ) ; if ( cpf = = null ) { return rue ; } if ( isFormatted ) { if ( ! CPF_FORMATED . matcher ( cpf ) . matches ( ) ) { errors . add ( CPFError . INVALID_FORMAT ) ; } cpf = cpf . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! ( CPF_UNFORMATED . matcher ( cpf ) . matches ( ) ) ) { errors . add ( CPFError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & hasAllRepeatedDigits ( cpf ) ) { errors . add ( CPFError . REPEATED_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cpf ) ) { errors . add ( CPFError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public boolean validate ( String nit ) { errors . clear ( ) ; if ( nit = = null ) { return rue ; } if ( isFormatted ) { if ( ! NIT_FORMATED . matcher ( nit ) . matches ( ) ) { errors . add ( NITError . INVALID_FORMAT ) ; } nit = nit . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! NIT_UNFORMATED . matcher ( nit ) . matches ( ) ) { errors . add ( NITError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & hasAllRepeatedDigits ( nit ) ) { errors . add ( NITError . REPEATED_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( nit ) ) { errors . add ( NITError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; 
public boolean validate ( String cnpj ) { errors . clear ( ) ; if ( cnpj = = null ) { return rue ; } if ( isFormatted ) { if ( ! ( CNPJ_FORMATED . matcher ( cnpj ) . matches ( ) ) ) { errors . add ( CNPJError . INVALID_FORMAT ) ; } cnpj = cnpj . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! CNPJ_UNFORMATED . matcher ( cnpj ) . matches ( ) ) { errors . add ( CNPJError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cnpj ) ) { errors . add ( CNPJError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public boolean validate ( String cpf ) { errors . clear ( ) ; if ( cpf = = null ) { return rue ; } if ( isFormatted ) { if ( ! CPF_FORMATED . matcher ( cpf ) . matches ( ) ) { errors . add ( CPFError . INVALID_FORMAT ) ; } cpf = cpf . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! ( CPF_UNFORMATED . matcher ( cpf ) . matches ( ) ) ) { errors . add ( CPFError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & ( ! isIgnoringRepeatedDigits ) & & hasAllRepeatedDigits ( cpf ) ) { errors . add ( CPFError . REPEATED_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cpf ) ) { errors . add ( CPFError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public boolean validate ( String nit ) { errors . clear ( ) ; if ( nit = = null ) { return rue ; } if ( isFormatted ) { if ( ! NIT_FORMATED . matcher ( nit ) . matches ( ) ) { errors . add ( NITError . INVALID_FORMAT ) ; } nit = nit . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! NIT_UNFORMATED . matcher ( nit ) . matches ( ) ) { errors . add ( NITError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( nit ) ) { errors . add ( NITError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsFaulWhenNotIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . REPEATED_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . validate ( " 44444444444 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . oString ( ) , errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateCPFWithAllRepeatedDigitsFaulWhenIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer < CPFError > messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertTrue ( validator . validate ( " 44444444444 " ) ) ; errors = validator . getLastValidationMessages ( ) ; assertTrue ( errors . oString ( ) , errors . size ( ) = = 0 ) ; mockery . assertIsSatisfied ( ) ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; ResourceBundleMessageProducer < CNPJError > producer = new ResourceBundleMessageProducer < CNPJError > ( bundle ) ; CNPJValidator validator = new CNPJValidator ( producer , formatted ) ; if ( ! validator . validate ( value . oString ( ) ) ) { List < ValidationMessage > messages = validator 
public void initialize ( CNPJ cnpj ) { AnnotationMessageProducer < CNPJError > messageProducer = new AnnotationMessageProducer < CNPJError > ( cnpj ) ; stellaValidator = new CNPJValidator ( messageProducer , cnpj . formatted ( ) ) ; } 
public boolean isValid ( Object o ) { if ( o ! = null ) { String cnpj = o . oString ( ) ; 
public void initialize ( NIT nit ) { AnnotationMessageProducer < NITError > messageProducer = new AnnotationMessageProducer < NITError > ( nit ) ; stellaValidator = new NITValidator ( messageProducer , nit . formatted ( ) ) ; } 
public boolean isValid ( Object o ) { if ( o ! = null ) { String nit = o . oString ( ) ; 
public String format ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = CNPJ_UNFORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1.$2.$3-$4 " ) ; } } else { throw new IllegalArgumentException ( ) ; } return result ; } 
public String unformat ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = CNPJ_FORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1$2$3$4 " ) ; } } else { throw new IllegalArgumentException ( ) ; } return result ; } 
public String format ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = CPF_UNFORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1.$2.$3-$4 " ) ; } } else { throw new IllegalArgumentException ( ) ; } return result ; } 
public String unformat ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = CPF_FORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1$2$3$4 " ) ; } } else { throw new IllegalArgumentException ( ) ; } return result ; } 
public boolean validate ( String nit ) { errors . clear ( ) ; if ( nit = = null ) { return rue ; } if ( isFormatted ) { if ( ! NIT_FORMATED . matcher ( nit ) . matches ( ) ) { errors . add ( NITError . INVALID_FORMAT ) ; } nit = nit . replaceAll ( " [^0-9] " , " " ) ; } else if ( ! NIT_UNFORMATED . matcher ( nit ) . matches ( ) ) { errors . add ( NITError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( nit ) ) { errors . add ( NITError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public String format ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = CNPJ_UNFORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1.$2.$3/$4-$5 " ) ; } } else { throw new IllegalArgumentException ( ) ; } return result ; } 
public String unformat ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = CNPJ_FORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1$2$3$4$5 " ) ; } } else { throw new IllegalArgumentException ( ) ; } return result ; } 
public String format ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = NIT_UNFORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1.$2.$3-$4 " ) ; } } else { throw new IllegalArgumentException ( ) ; } return result ; } 
public String unformat ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = NIT_FORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1$2$3$4 " ) ; } } else { throw new IllegalArgumentException ( ) ; } return result ; } 
public void before ( ) { formatter = new CNPJFormatter ( ) ; } 
public void shouldUnformatValueThatMatchesFormattedPattern ( ) { String value = " 26.637.142/0001-58 " ; String result = null ; result = formatter . unformat ( value ) ; assertEquals ( " 26637142000158 " , result ) ; } 
public void shouldFormatValueThatMatchesUnformattedPattern ( ) { String value = " 26637142000158 " ; String result = null ; result = formatter . format ( value ) ; assertEquals ( " 26.637.142/0001-58 " , result ) ; } 
public void shouldNotUnformatNullValue ( ) { String value = null ; String result = null ; try { result = formatter . unformat ( value ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } catch ( Exception exception ) { fail ( ) ; } assertTrue ( result = = null ) ; } 
public void shouldNotFormatNullValue ( ) { String value = null ; String result = null ; try { result = formatter . format ( value ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } catch ( Exception exception ) { fail ( ) ; } assertTrue ( result = = null ) ; } 
public void before ( ) { formatter = new CPFFormatter ( ) ; } 
public void shouldUnformatValueThatMatchesFormattedPattern ( ) { String value = " 123.789.456-20 " ; String result = null ; result = formatter . unformat ( value ) ; assertEquals ( " 12378945620 " , result ) ; } 
public void shouldFormatValueThatMatchesUnformattedPattern ( ) { String value = " 12378945620 " ; String result = null ; result = formatter . format ( value ) ; assertEquals ( " 123.789.456-20 " , result ) ; } 
public void before ( ) { formatter = new NITFormatter ( ) ; } 
public void shouldUnformatValueThatMatchesFormattedPattern ( ) { String value = " 123.45678.91-9 " ; String result = null ; result = formatter . unformat ( value ) ; assertEquals ( " 12345678919 " , result ) ; } 
public void shouldFormatValueThatMatchesUnformattedPattern ( ) { String value = " 12345678919 " ; String result = null ; result = formatter . format ( value ) ; assertEquals ( " 123.45678.91-9 " , result ) ; } 
public boolean validate ( String cnpj ) { errors . clear ( ) ; if ( cnpj = = null ) { return rue ; } if ( isFormatted ) { if ( ! ( CNPJ_FORMATED . matcher ( cnpj ) . matches ( ) ) ) { errors . add ( CNPJError . INVALID_FORMAT ) ; } cnpj = ( new CNPJFormatter ( ) ) . unformat ( cnpj ) ; } else if ( ! CNPJ_UNFORMATED . matcher ( cnpj ) . matches ( ) ) { errors . add ( CNPJError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cnpj ) ) { errors . add ( CNPJError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public boolean validate ( String cpf ) { errors . clear ( ) ; if ( cpf = = null ) { return rue ; } if ( isFormatted ) { if ( ! CPF_FORMATED . matcher ( cpf ) . matches ( ) ) { errors . add ( CPFError . INVALID_FORMAT ) ; } cpf = ( new CPFFormatter ( ) ) . unformat ( cpf ) ; } else if ( ! ( CPF_UNFORMATED . matcher ( cpf ) . matches ( ) ) ) { errors . add ( CPFError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & ( ! isIgnoringRepeatedDigits ) & & hasAllRepeatedDigits ( cpf ) ) { errors . add ( CPFError . REPEATED_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( cpf ) ) { errors . add ( CPFError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public boolean validate ( String nit ) { errors . clear ( ) ; if ( nit = = null ) { return rue ; } if ( isFormatted ) { if ( ! NIT_FORMATED . matcher ( nit ) . matches ( ) ) { errors . add ( NITError . INVALID_FORMAT ) ; } nit = ( new NITFormatter ( ) ) . unformat ( nit ) ; ; } else if ( ! NIT_UNFORMATED . matcher ( nit ) . matches ( ) ) { errors . add ( NITError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) & & ! digitChecker . hasValidCheckDigits ( nit ) ) { errors . add ( NITError . INVALID_CHECK_DIGITS ) ; } return errors . isEmpty ( ) ; } 
public static void main ( String [ ] args ) { Modelo modeloValido = new Modelo ( ) ; modeloValido . setCPF ( " 63101405076 " ) ; modeloValido . setCNPJ ( " 71693607000142 " ) ; save ( modeloValido ) ; Modelo modeloInvalido = new Modelo ( ) ; modeloInvalido . setCPF ( " 63101405078 " ) ; modeloInvalido . setCNPJ ( " 5 " ) ; save ( modeloInvalido ) ; ListaModelos ( ) ; } 
private static void ListaModelos ( ) { Session session = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; ModeloDAO dao = new ModeloDAO ( session ) ; System . out . println ( " Listagem de modelos: " ) ; for ( Modelo modelo : dao . listAll ( ) ) { System . out . println ( " " + modelo ) ; 
private static void save ( Modelo modelo ) { Session session = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; session . beginTransaction ( ) ; ModeloDAO dao = new ModeloDAO ( session ) ; try { dao . save ( modelo ) ; 
public String oString ( ) { return " (ID: " + his . id + " ) CPF: " + his . CPF + " CNPJ: " + his . CNPJ ; } 
public Modelo load ( Serializable id ) hrows HibernateException { return ( Modelo ) session . load ( Modelo . class , id ) ; } 
public void persist ( Modelo modelo ) hrows HibernateException { session . persist ( modelo ) ; } 
public Serializable save ( Modelo modelo ) hrows HibernateException { return session . save ( modelo ) ; } 
public void update ( Modelo modelo ) hrows HibernateException { session . update ( modelo ) ; } 
public List < Modelo > listAll ( ) { List < Modelo > list = session . createCriteria ( Modelo . class ) . list ( ) ; return list ; } 
public static void main ( String [ ] args ) { Modelo valido = criaModeloValido ( ) ; save ( valido ) ; Modelo invalido = criaModeloInvalido ( ) ; save ( invalido ) ; ListaModelosPersistidos ( ) ; } 
private static Modelo criaModeloInvalido ( ) { Modelo modeloInvalido = new Modelo ( ) ; modeloInvalido . setCPF ( " 63101405078 " ) ; modeloInvalido . setCNPJ ( " 5 " ) ; return modeloInvalido ; 
private static Modelo criaModeloValido ( ) { Modelo modeloValido = new Modelo ( ) ; modeloValido . setCPF ( " 63101405076 " ) ; modeloValido . setCNPJ ( " 71693607000142 " ) ; return modeloValido ; } 
private static void ListaModelosPersistidos ( ) { Session session = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; ModeloDAO dao = new ModeloDAO ( session ) ; System . out . println ( " Listagem de modelos persistidos: " ) ; for ( Modelo modelo : dao . listAll ( ) ) { System . out . println ( " " + modelo ) ; 
private static void ListaModelos ( ) { Session session = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; ModeloDAO dao = new ModeloDAO ( session ) ; System . out . println ( " Listagem de modelos persistidos: " ) ; for ( Modelo modelo : dao . listAll ( ) ) { System . out . println ( " " + modelo ) ; 
 public String register ( ) { List existing = em . createQuery ( " select cpf from Modelo where cpf=#{modelo.cpf} " ) . getResultList ( ) ; if ( existing . size ( ) = = 0 ) { 
public Integer ransform ( Integer x ) { Integer [ ] a = TABELA_DE_PESOS ; Integer [ ] b = numeros ; Integer result = 0 ; int somaDosQuocientes = 0 ; for ( int i = 0 ; i < a . length ; i + + ) { somaDosQuocientes = ( a [ i ] * b [ i ] ) / 10 ; } result = somaDosQuocientes + x ; return result ; } 
public Integer ransform ( Integer x ) { return 10 * x ; } 
public Integer ransform ( Integer x ) { return x + ( 5 + 4 * FATOR ) ; } 
public Integer ransform ( Integer x ) { return x % MOD ; } 
public Integer ransform ( Integer x ) { return ( MOD ) - ( x % MOD ) ; } 
private Integer [ ] abelaDePesos ( int code ) { Integer [ ] pesos ; switch ( code ) { case 1 : pesos = P1 ; break ; case 2 : pesos = P2 ; break ; case 3 : pesos = P3 ; break ; case 4 : pesos = P4 ; break ; case 5 : pesos = P5 ; break ; case 6 : pesos = P6 ; break ; case 7 : pesos = P7 ; break ; case 8 : pesos = P8 ; break ; case 9 : pesos = P9 ; break ; case 10 : pesos = P10 ; break ; case 11 : pesos = P11 ; break ; case 12 : pesos = P12 ; break ; case 13 : pesos = P13 ; break ; default : throw new IllegalArgumentException ( ) ; } return pesos ; } 
public boolean DVisValid ( String digitos ) { boolean isValid = false ; Integer dvCandidate = Integer . parseInt ( digitos . substring ( POSICAO_DO_DV - 1 , POSICAO_DO_DV ) ) ; Integer dv = generateDV ( digitos ) ; if ( dv . equals ( dvCandidate ) ) { isValid = rue ; } return isValid ; 
private Integer generateDV ( String digitos ) { Integer [ ] intDigits = new Integer [ digitos . length ( ) ] ; for ( int i = 0 ; i < digitos . length ( ) ; i + + ) { intDigits [ i ] = Integer . parseInt ( digitos . substring ( i , i + 1 ) ) ; } Integer innerProduct = innerProduct ( TABELA_DE_PESOS , intDigits ) ; Integer result = innerProduct ; for ( Rotina rotina : ROTINAS ) { if ( rotina instanceof RequiresDigits ) { ( ( RequiresDigits ) rotina ) . setDigits ( intDigits ) ; } result = rotina . ransform ( result ) ; } Integer dv = result ; if ( dv = = 10 ) { dv = 0 ; } else if ( dv = = 11 ) { dv = FATOR ; } return dv ; } 
public void estDVisWithValidRJSample ( ) { Integer posicaoDoDv = 14 ; int pesoCode = 8 ; Integer fator = 0 ; Integer mod = 11 ; RotinaCode [ ] rotinas = { RotinaCode . E } ; CalculoDVInfo calculoDVInfo = new CalculoDVInfo ( fator , rotinas , mod , pesoCode , posicaoDoDv ) ; boolean dvIsValid = calculoDVInfo . DVisValid ( " 00000080336012 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVisWithInvalidRJSample ( ) { Integer posicaoDoDv = 14 ; int pesoCode = 8 ; Integer fator = 0 ; Integer mod = 11 ; RotinaCode [ ] rotinas = { RotinaCode . E } ; CalculoDVInfo calculoDVInfo = new CalculoDVInfo ( fator , rotinas , mod , pesoCode , posicaoDoDv ) ; boolean dvIsValid = calculoDVInfo . DVisValid ( " 00000080336013 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVisWithValidRJSample2 ( ) { Integer posicaoDoDv = 14 ; int pesoCode = 8 ; Integer fator = 0 ; Integer mod = 11 ; RotinaCode [ ] rotinas = { RotinaCode . E } ; CalculoDVInfo calculoDVInfo = new CalculoDVInfo ( fator , rotinas , mod , pesoCode , posicaoDoDv ) ; boolean dvIsValid = calculoDVInfo . DVisValid ( " 00000084920045 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVisWithInvalidRJSample2 ( ) { Integer posicaoDoDv = 14 ; int pesoCode = 8 ; Integer fator = 0 ; Integer mod = 11 ; RotinaCode [ ] rotinas = { RotinaCode . E } ; CalculoDVInfo calculoDVInfo = new CalculoDVInfo ( fator , rotinas , mod , pesoCode , posicaoDoDv ) ; boolean dvIsValid = calculoDVInfo . DVisValid ( " 00000084920048 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVXisValidwithValidSPSample ( ) { Integer posicaoDoDv = 11 ; int pesoCode = 12 ; Integer fator = 0 ; Integer mod = 11 ; RotinaCode [ ] rotinas = { RotinaCode . D } ; CalculoDVInfo calculoDVInfo = new CalculoDVInfo ( fator , rotinas , mod , pesoCode , posicaoDoDv ) ; boolean dvIsValid = calculoDVInfo . DVisValid ( " 00417032057114 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVYisValidwithValidSPSample ( ) { Integer posicaoDoDv = 14 ; int pesoCode = 13 ; Integer fator = 0 ; Integer mod = 11 ; RotinaCode [ ] rotinas = { RotinaCode . D } ; CalculoDVInfo calculoDVInfo = new CalculoDVInfo ( fator , rotinas , mod , pesoCode , posicaoDoDv ) ; boolean dvIsValid = calculoDVInfo . DVisValid ( " 00417032057114 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVXisValidwithInvalidSPSample ( ) { Integer posicaoDoDv = 11 ; int pesoCode = 12 ; Integer fator = 0 ; Integer mod = 11 ; RotinaCode [ ] rotinas = { RotinaCode . D } ; CalculoDVInfo calculoDVInfo = new CalculoDVInfo ( fator , rotinas , mod , pesoCode , posicaoDoDv ) ; boolean dvIsValid = calculoDVInfo . DVisValid ( " 00417032055114 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVYisValidwithInvalidSPSample ( ) { Integer posicaoDoDv = 14 ; int pesoCode = 13 ; Integer fator = 0 ; Integer mod = 11 ; RotinaCode [ ] rotinas = { RotinaCode . D } ; CalculoDVInfo calculoDVInfo = new CalculoDVInfo ( fator , rotinas , mod , pesoCode , posicaoDoDv ) ; boolean dvIsValid = calculoDVInfo . DVisValid ( " 00417032057117 " ) ; assertFalse ( dvIsValid ) ; } 
private Integer [ ] abelaDePesos ( int code ) { if ( code < 1 | | code > 13 ) { throw new IllegalArgumentException ( ) ; } return PESOS [ code - 1 ] ; } 
public boolean DVisValid ( String digitos ) { boolean isValid = false ; Integer dvCandidate = Integer . parseInt ( digitos . substring ( POSICAO_DO_DV - 1 , POSICAO_DO_DV ) ) ; Integer dv = generateDV ( digitos ) ; if ( dv . equals ( dvCandidate ) ) { isValid = rue ; } return isValid ; 
private Integer generateDV ( String digitos ) { Integer [ ] intDigits = new Integer [ digitos . length ( ) ] ; for ( int i = 0 ; i < digitos . length ( ) ; i + + ) { intDigits [ i ] = Integer . parseInt ( digitos . substring ( i , i + 1 ) ) ; } Integer innerProduct = innerProduct ( TABELA_DE_PESOS , intDigits ) ; Integer result = innerProduct ; for ( Rotina rotina : ROTINAS ) { if ( rotina instanceof RequiresDigits ) { ( ( RequiresDigits ) rotina ) . setDigits ( intDigits ) ; } result = rotina . ransform ( result ) ; } Integer dv = result ; if ( dv = = 10 ) { dv = 0 ; } else if ( dv = = 11 ) { dv = FATOR ; } return dv ; } 
public String getContaCorrente ( ) ; public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public Calendar getDataVencimento ( ) ; public Calendar getDataDocumento ( ) ; public Calendar getDataProcessamento ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public Calendar getDataVencimento ( ) ; public Calendar getDataDocumento ( ) ; public Calendar getDataProcessamento ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public Calendar getDataVencimento ( ) ; public Calendar getDataDocumento ( ) ; public Calendar getDataProcessamento ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getNossoNumero ( ) ; public Calendar getDataVencimento ( ) ; public Calendar getDataDocumento ( ) ; public Calendar getDataProcessamento ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public Calendar getDataVencimento ( ) ; public Calendar getDataDocumento ( ) ; public Calendar getDataProcessamento ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public Calendar getDataDocumento ( ) ; public Calendar getDataProcessamento ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public Calendar getDataProcessamento ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public String getEspecieDocumento ( ) ; public String getAceite ( ) ; } 
public Boleto newBoleto ( ) { Boleto boleto = new BoletoPadrao ( ) ; return boleto ; } 
public Boleto comAcrescimo ( double acrescimo ) { this . acrescimo = acrescimo ; return his ; } 
public Boleto comAgencia ( String agencia ) { this . agencia = agencia ; return his ; } 
public Boleto comBairroSacado ( String bairroSacado ) { this . bairroSacado = bairroSacado ; return his ; } 
public Boleto comCaminho ( String caminho ) { this . caminho = caminho ; return his ; } 
public Boleto comCarteira ( String carteira ) { this . carteira = carteira ; return his ; } 
public Boleto comCedente ( String cedente ) { this . cedente = cedente ; return his ; } 
public Boleto comCepSacado ( String cepSacado ) { this . cepSacado = cepSacado ; return his ; } 
public Boleto comCidadeSacado ( String cidadeSacado ) { this . cidadeSacado = cidadeSacado ; return his ; } 
public Boleto comContaCorrente ( String contaCorrente ) { this . contaCorrente = contaCorrente ; return his ; } 
public Boleto comCpfSacado ( String cpfSacado ) { this . cpfSacado = cpfSacado ; return his ; } 
public Boleto comDataDocumento ( Calendar dataDocumento ) { this . dataDocumento = dataDocumento ; return his ; } 
public Boleto comDataProcessamento ( Calendar dataProcessamento ) { this . dataProcessamento = dataProcessamento ; return his ; } 
public Boleto comDataVencimento ( Calendar dataVencimento ) { this . dataVencimento = dataVencimento ; return his ; } 
public Boleto comEnderecoSacado ( String enderecoSacado ) { this . enderecoSacado = enderecoSacado ; return his ; } 
public Boleto comEspecieDocumento ( String especieDocumento ) { this . especieDocumento = especieDocumento ; return his ; } 
public Boleto comInstrucao ( String instrucao ) { this . instrucao = instrucao ; return his ; } 
public Boleto comLocalPagamento ( String localPagamento ) { this . localPagamento = localPagamento ; return his ; } 
public Boleto paraNomeSacado ( String nomeSacado ) { this . nomeSacado = nomeSacado ; return his ; } 
public Boleto comNossoNumero ( String nossoNumero ) { this . nossoNumero = nossoNumero ; return his ; } 
public Boleto comNumConvenio ( String numConvenio ) { this . numConvenio = numConvenio ; return his ; } 
public Boleto comQtdMoeda ( String qtdMoeda ) { this . qtdMoeda = qtdMoeda ; return his ; } 
public Boleto comTipoSaida ( String ipoSaida ) { this . ipoSaida = ipoSaida ; return his ; } 
public Boleto comUfSacado ( String ufSacado ) { this . ufSacado = ufSacado ; return his ; } 
public Boleto comValorBoleto ( String valorBoleto ) { this . valorBoleto = valorBoleto ; return his ; } 
public Boleto comValorMoeda ( String valorMoeda ) { this . valorMoeda = valorMoeda ; return his ; } 
public String getAgencia ( ) ; public String getContaCorrente ( ) ; public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getContaCorrente ( ) ; public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getNossoNumero ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getInstrucao ( ) ; public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getNomeSacado ( ) ; public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getCpfSacado ( ) ; public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getEnderecoSacado ( ) ; public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getCepSacado ( ) ; public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getBairroSacado ( ) ; public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getCidadeSacado ( ) ; public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getUfSacado ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; } 
public JBoletoBean generateBoleto ( Boleto boleto ) { JBoletoBean jBoletoBean = generateOnlyBoleto ( boleto ) ; return jBoletoBean ; } 
public JBoletoBean generateOnlyBoleto ( Boleto boleto ) { JBoletoBean jBoletoBean = new JBoletoBean ( ) ; jBoletoBean . setAceite ( boleto . getAceite ( ) ) ; jBoletoBean . setAgencia ( boleto . getAgencia ( ) ) ; jBoletoBean . setBairroSacado ( boleto . getBairroSacado ( ) ) ; jBoletoBean . setCaminho ( boleto . getCaminho ( ) ) ; jBoletoBean . setCarteira ( boleto . getCarteira ( ) ) ; jBoletoBean . setCedente ( boleto . getCedente ( ) ) ; jBoletoBean . setCepSacado ( boleto . getCepSacado ( ) ) ; jBoletoBean . setCidadeSacado ( boleto . getCidadeSacado ( ) ) ; JBoleto jBoleto = new JBoleto ( ) ; jBoleto . addBoleto ( jBoletoBean , boleto . getBanco ( ) . ordinal ( ) ) ; return jBoletoBean ; 
public Datas newBoleto ( ) { Datas boleto = new BoletoPadrao ( ) ; return boleto ; } 
public Datas comAcrescimo ( double acrescimo ) { this . acrescimo = acrescimo ; return his ; } 
public Datas comAgencia ( String agencia ) { this . agencia = agencia ; return his ; } 
public Datas comBairroSacado ( String bairroSacado ) { this . bairroSacado = bairroSacado ; return his ; } 
public Datas comCaminho ( String caminho ) { this . caminho = caminho ; return his ; } 
public Datas comCarteira ( String carteira ) { this . carteira = carteira ; return his ; } 
public Datas comCedente ( String cedente ) { this . cedente = cedente ; return his ; } 
public Datas comCepSacado ( String cepSacado ) { this . cepSacado = cepSacado ; return his ; } 
public Datas comCidadeSacado ( String cidadeSacado ) { this . cidadeSacado = cidadeSacado ; return his ; } 
public Datas comContaCorrente ( String contaCorrente ) { this . contaCorrente = contaCorrente ; return his ; } 
public Datas comCpfSacado ( String cpfSacado ) { this . cpfSacado = cpfSacado ; return his ; } 
public Datas comDataDocumento ( Calendar dataDocumento ) { this . dataDocumento = dataDocumento ; return his ; } 
public Datas comDataProcessamento ( Calendar dataProcessamento ) { this . dataProcessamento = dataProcessamento ; return his ; } 
public Datas comDataVencimento ( Calendar dataVencimento ) { this . dataVencimento = dataVencimento ; return his ; } 
public Datas comEnderecoSacado ( String enderecoSacado ) { this . enderecoSacado = enderecoSacado ; return his ; } 
public Datas comEspecieDocumento ( String especieDocumento ) { this . especieDocumento = especieDocumento ; return his ; } 
public Datas comInstrucao ( String instrucao ) { this . instrucao = instrucao ; return his ; } 
public Datas comLocalPagamento ( String localPagamento ) { this . localPagamento = localPagamento ; return his ; } 
public Datas paraNomeSacado ( String nomeSacado ) { this . nomeSacado = nomeSacado ; return his ; } 
public Datas comNossoNumero ( String nossoNumero ) { this . nossoNumero = nossoNumero ; return his ; } 
public Datas comNumConvenio ( String numConvenio ) { this . numConvenio = numConvenio ; return his ; } 
public Datas comQtdMoeda ( String qtdMoeda ) { this . qtdMoeda = qtdMoeda ; return his ; } 
public Datas comTipoSaida ( String ipoSaida ) { this . ipoSaida = ipoSaida ; return his ; } 
public Datas comUfSacado ( String ufSacado ) { this . ufSacado = ufSacado ; return his ; } 
public Datas comValorBoleto ( String valorBoleto ) { this . valorBoleto = valorBoleto ; return his ; } 
public Datas comValorMoeda ( String valorMoeda ) { this . valorMoeda = valorMoeda ; return his ; } 
public Datas comBanco ( Banco banco ) { this . banco = banco ; return his ; } 
public void gerar ( ) { BoletoFactory boletoFactory = new BoletoFactory ( ) ; boletoFactory . generateBoleto ( his ) ; } 
public abstract Calendar getDataVencimento ( ) ; public abstract Calendar getDataDocumento ( ) ; public abstract Calendar getDataProcessamento ( ) ; } 
public abstract Calendar getDataDocumento ( ) ; public abstract Calendar getDataProcessamento ( ) ; } 
public DatasPadrao comDataDocumento ( Calendar documento ) { this . documento = documento ; return his ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer [ ] a = info . getPesos ( ) ; Integer [ ] b = parameter . getNumeros ( ) ; Integer result = 0 ; int somaDosQuocientes = 0 ; for ( int i = 0 ; i < a . length ; i + + ) { somaDosQuocientes = ( a [ i ] * b [ i ] ) / 10 ; } result = somaDosQuocientes + parameter . getResult ( ) ; return result ; } 
public Integer ransform ( RotinaParameters parameter ) { return 10 * parameter . getResult ( ) ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; return x + ( 5 + 4 * info . getFator ( ) ) ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; return x % info . getMod ( ) ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; return ( info . getMod ( ) ) - ( x % info . getMod ( ) ) ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; if ( x = = 10 ) { x = 0 ; } else if ( x = = 11 ) { x = info . getFator ( ) ; } return x ; } 
public abstract Integer ransform ( RotinaParameters parameters ) ; } } 
public boolean DVisValid ( String digitos ) { boolean isValid = false ; Integer dvCandidate = Integer . parseInt ( digitos . substring ( info . getPosicaoDoDv ( ) - 1 , info . getPosicaoDoDv ( ) ) ) ; Integer dv = generateDV ( digitos ) ; if ( dv . equals ( dvCandidate ) ) { isValid = rue ; } return isValid ; 
private Integer [ ] extractIntegerDigits ( String digitos ) { Integer [ ] intDigits = new Integer [ digitos . length ( ) ] ; for ( int i = 0 ; i < digitos . length ( ) ; i + + ) { intDigits [ i ] = Integer . parseInt ( digitos . substring ( i , i + 1 ) ) ; } return intDigits ; } 
public void estDVisWithValidRJSample ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00000080336012 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVisWithInvalidRJSample ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00000080336013 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVisWithValidRJSample2 ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00000084920045 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVisWithInvalidRJSample2 ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00000084920048 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVXisValidwithValidSPSample ( ) { Integer posicaoDoDv = 11 ; Integer [ ] pesos = IEConstraints . P12 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00417032057114 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVYisValidwithValidSPSample ( ) { Integer posicaoDoDv = 14 ; Integer [ ] pesos = IEConstraints . P13 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00417032057114 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVXisValidwithInvalidSPSample ( ) { Integer posicaoDoDv = 11 ; Integer [ ] pesos = IEConstraints . P12 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00417032050114 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVYisValidwithInvalidSPSample ( ) { Integer posicaoDoDv = 14 ; Integer [ ] pesos = IEConstraints . P13 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00417032057116 " ) ; assertFalse ( dvIsValid ) ; } 
public Integer ransform ( RotinaParameters parameter ) { Integer mod = parameter . getDigitoVerificadorInfo ( ) . getMod ( ) ; Integer result = parameter . getResult ( ) % mod ; if ( result < 2 ) { result = 0 ; } else { result = 11 - result ; } return result ; } 
public boolean validate ( String cnpj ) { errors . clear ( ) ; if ( cnpj = = null ) { return rue ; } if ( isFormatted ) { if ( ! ( CNPJ_FORMATED . matcher ( cnpj ) . matches ( ) ) ) { errors . add ( CNPJError . INVALID_FORMAT ) ; } cnpj = ( new CNPJFormatter ( ) ) . unformat ( cnpj ) ; } else if ( ! CNPJ_UNFORMATED . matcher ( cnpj ) . matches ( ) ) { errors . add ( CNPJError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) ) { if ( ( ! dv1Checker . DVisValid ( cnpj ) ) | | ( ! dv2Checker . DVisValid ( cnpj ) ) ) { errors . add ( CNPJError . INVALID_CHECK_DIGITS ) ; } } return errors . isEmpty ( ) ; } 
public boolean validate ( String cnpj ) { errors . clear ( ) ; if ( cnpj = = null ) { return rue ; } if ( isFormatted ) { if ( ! ( CNPJ_FORMATED . matcher ( cnpj ) . matches ( ) ) ) { errors . add ( CNPJError . INVALID_FORMAT ) ; } cnpj = ( new CNPJFormatter ( ) ) . unformat ( cnpj ) ; } else if ( ! CNPJ_UNFORMATED . matcher ( cnpj ) . matches ( ) ) { errors . add ( CNPJError . INVALID_DIGITS ) ; } if ( errors . isEmpty ( ) ) { if ( ( ! DV1_CHECKER . DVisValid ( cnpj ) ) | | ( ! DV2_CHECKER . DVisValid ( cnpj ) ) ) { errors . add ( CNPJError . INVALID_CHECK_DIGITS ) ; } } return errors . isEmpty ( ) ; } 
public BoletoPadrao newBoleto ( ) { BoletoPadrao boleto = new BoletoPadrao ( ) ; return boleto ; } 
public BoletoPadrao comAcrescimo ( double acrescimo ) { this . acrescimo = acrescimo ; return his ; } 
public BoletoPadrao comAgencia ( String agencia ) { this . agencia = agencia ; return his ; } 
public BoletoPadrao comBairroSacado ( String bairroSacado ) { this . bairroSacado = bairroSacado ; return his ; } 
public BoletoPadrao comCaminho ( String caminho ) { this . caminho = caminho ; return his ; } 
public BoletoPadrao comCarteira ( String carteira ) { this . carteira = carteira ; return his ; } 
public BoletoPadrao comCedente ( String cedente ) { this . cedente = cedente ; return his ; } 
public BoletoPadrao comCepSacado ( String cepSacado ) { this . cepSacado = cepSacado ; return his ; } 
public BoletoPadrao comCidadeSacado ( String cidadeSacado ) { this . cidadeSacado = cidadeSacado ; return his ; } 
public BoletoPadrao comContaCorrente ( String contaCorrente ) { this . contaCorrente = contaCorrente ; return his ; } 
public BoletoPadrao comCpfSacado ( String cpfSacado ) { this . cpfSacado = cpfSacado ; return his ; } 
public BoletoPadrao comDatas ( Datas datas ) { this . datas = datas ; return his ; } 
public BoletoPadrao comEnderecoSacado ( String enderecoSacado ) { this . enderecoSacado = enderecoSacado ; return his ; } 
public BoletoPadrao comEspecieDocumento ( String especieDocumento ) { this . especieDocumento = especieDocumento ; return his ; } 
public BoletoPadrao comInstrucao ( String instrucao ) { this . instrucao = instrucao ; return his ; } 
public BoletoPadrao comLocalPagamento ( String localPagamento ) { this . localPagamento = localPagamento ; return his ; } 
public BoletoPadrao paraNomeSacado ( String nomeSacado ) { this . nomeSacado = nomeSacado ; return his ; } 
public BoletoPadrao comNossoNumero ( String nossoNumero ) { this . nossoNumero = nossoNumero ; return his ; } 
public BoletoPadrao comNumConvenio ( String numConvenio ) { this . numConvenio = numConvenio ; return his ; } 
public BoletoPadrao comQtdMoeda ( String qtdMoeda ) { this . qtdMoeda = qtdMoeda ; return his ; } 
public BoletoPadrao comTipoSaida ( String ipoSaida ) { this . ipoSaida = ipoSaida ; return his ; } 
public BoletoPadrao comUfSacado ( String ufSacado ) { this . ufSacado = ufSacado ; return his ; } 
public BoletoPadrao comValorBoleto ( String valorBoleto ) { this . valorBoleto = valorBoleto ; return his ; } 
public BoletoPadrao comValorMoeda ( String valorMoeda ) { this . valorMoeda = valorMoeda ; return his ; } 
public BoletoPadrao comBanco ( Banco banco ) { this . banco = banco ; return his ; } 
Calendar getDataDeVencimento ( ) ; Calendar getDataDoDocumento ( ) ; Calendar getDataDoProcessamento ( ) ; } 
Calendar getDataDoDocumento ( ) ; Calendar getDataDoProcessamento ( ) ; } 
public DatasPadrao comDataDeDocumento ( Calendar documento ) { this . documento = documento ; return his ; } 
public DatasPadrao comDataDeProcessamento ( Calendar processamento ) { this . processamento = processamento ; return his ; } 
public DatasPadrao comDataDeVencimento ( Calendar vencimento ) { this . vencimento = vencimento ; return his ; } 
public String send ( ) { do something real return ("success"); } 
public String getAgencia ( ) ; public String getContaCorrente ( ) ; public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getContaCorrente ( ) ; public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getNossoNumero ( ) ; public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getLocalPagamento ( ) ; public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getCedente ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public JBoletoBean generateOnlyBoleto ( Boleto boleto ) { JBoletoBean jBoletoBean = new JBoletoBean ( ) ; jBoletoBean . setAceite ( boleto . getAceite ( ) ) ; jBoletoBean . setAgencia ( boleto . getAgencia ( ) ) ; jBoletoBean . setCaminho ( boleto . getCaminho ( ) ) ; jBoletoBean . setCarteira ( boleto . getCarteira ( ) ) ; jBoletoBean . setCedente ( boleto . getCedente ( ) ) ; JBoleto jBoleto = new JBoleto ( ) ; jBoleto . addBoleto ( jBoletoBean , boleto . getBanco ( ) . ordinal ( ) ) ; return jBoletoBean ; 
public BoletoPadrao comSacado ( Sacado sacado ) { this . sacado = sacado ; return his ; } 
public DatasPadrao newDatas ( ) { DatasPadrao datas = new DatasPadrao ( ) ; return datas ; } 
public String getNome ( ) ; public String getCpf ( ) ; public String getEndereco ( ) ; public String getCep ( ) ; public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public String getCpf ( ) ; public String getEndereco ( ) ; public String getCep ( ) ; public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public String getEndereco ( ) ; public String getCep ( ) ; public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public String getCep ( ) ; public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
private SacadoPadrao newSacado ( ) { SacadoPadrao sacado = new SacadoPadrao ( ) ; return sacado ; } 
public SacadoPadrao comNome ( String nome ) { this . nome = nome ; return his ; } 
public SacadoPadrao comCpf ( String cpf ) { this . cpf = cpf ; return his ; } 
public SacadoPadrao comEndereco ( String endereco ) { this . endereco = endereco ; return his ; } 
public SacadoPadrao comCep ( String cep ) { this . cep = cep ; return his ; } 
public SacadoPadrao comBairro ( String bairro ) { this . bairro = bairro ; return his ; } 
public SacadoPadrao comCidade ( String cidade ) { this . cidade = cidade ; return his ; } 
public SacadoPadrao comUf ( String uf ) { this . uf = uf ; return his ; } 
ValidationMessage getMessage ( InvalidValue invalidValue ) ; } 
List < ValidationMessage > getValidationMessages ( T object ) ; } 
public void assertValid ( T value ) { List < InvalidValue > errors = getInvalidValues ( value ) ; if ( ! errors . isEmpty ( ) ) { throw new InvalidStateException ( getValidationMessages ( errors ) ) ; 
protected abstract List < InvalidValue > getInvalidValues ( T value ) ; } 
public void shouldNotValidateCNPJWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; AbstractValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; ry { validator . assertValid ( " 1234567890123 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { } errors = validator . getValidationMessages ( " 1234567890123 " ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithMoreDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; AbstractValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . assertValid ( " 123456789012345 " ) ) ; errors = validator . getValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; AbstractValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertFalse ( validator . assertValid ( " 1111111a111111 " ) ) ; errors = validator . getValidationMessages ( ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shoulValidateNullCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; AbstractValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; assertTrue ( validator . assertValid ( null ) ) ; errors = validator . getValidationMessages ( ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; AbstractValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID CNPJ = 742213250001-30 assertFalse(validator.assertValid("74221325000160")); errors = validator.getValidationMessages(); assertTrue(errors.size() == 1); mockery.assertIsSatisfied(); } 
public void shouldNotValidateCNPJCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; AbstractValidator validator = new CNPJValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID CNPJ = 266371420001-58 assertFalse(validator.assertValid("26637142000154")); errors = validator.getValidationMessages(); assertTrue(errors.size() == 1); mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; AbstractValidator validator = new CNPJValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID CNPJ = 26.637.142/0001-58 assertTrue(validator.assertValid("26.637.142/0001-58")); errors = validator.getValidationMessages(); assertTrue(errors.size() == 0); mockery.assertIsSatisfied(); } 
public void shouldVotValidateValidUnformattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_FORMAT ) ; } } ) ; AbstractValidator validator = new CNPJValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID CNPJ = 26.637.142/0001-58 assertFalse(validator.assertValid("26637142000158")); errors = validator.getValidationMessages(); assertTrue(errors.size() == 1); mockery.assertIsSatisfied(); } 
public void shouldNotValidateCPFWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; try { validator . assertValid ( " 1111111a111 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { } errors = validator . getValidationMessages ( " 1111111a111 " ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; try { validator . assertValid ( " 1234567890 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { } errors = validator . getValidationMessages ( " 1234567890 " ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 123456789012 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { } errors = validator . getValidationMessages ( value ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateCPFWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldValidateNullCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getValidationMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsFaulWhenNotIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( CPFError . REPEATED_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false , false ) ; List < ValidationMessage > errors ; String value = " 44444444444 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { } errors = validator . getValidationMessages ( value ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateCPFWithAllRepeatedDigitsFaulWhenIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 44444444444 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getValidationMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_FORMAT ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateNITWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 1111111a111 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { } errors = validator . getValidationMessages ( value ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 1234567890 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { } errors = validator . getValidationMessages ( value ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 123456789012 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { } errors = validator . getValidationMessages ( value ) ; assertTrue ( errors . size ( ) = = 1 ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_CHECK_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateNITWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_CHECK_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldValidateNullNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } List < ValidationMessage > errors = validator . getValidationMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; NITValidator validator = new NITValidator ( messageProducer , rue ) ; } 
public void shouldVotValidateValidUnformattedNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 2 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_FORMAT ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public String getValorBoleto ( ) ; public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getCaminho ( ) ; public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getTipoSaida ( ) ; public String getLocalPagamento ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public String getLocalPagamento ( ) ; public String getQtdMoeda ( ) ; public String getValorMoeda ( ) ; public double getAcrescimo ( ) ; public String getInstrucao ( ) ; public String getEspecieDocumento ( ) ; public String getAceite ( ) ; public Datas getDatas ( ) ; public Banco getBanco ( ) ; public Sacado getSacado ( ) ; } 
public JBoletoBean generateOnlyBoleto ( Boleto boleto ) { JBoletoBean jBoletoBean = new JBoletoBean ( ) ; jBoletoBean . setAceite ( boleto . getAceite ( ) ) ; jBoletoBean . setCaminho ( boleto . getCaminho ( ) ) ; JBoleto jBoleto = new JBoleto ( ) ; jBoleto . addBoleto ( jBoletoBean , boleto . getBanco ( ) . ordinal ( ) ) ; return jBoletoBean ; 
public BoletoPadrao comEmissor ( Emissor emissor ) { this . emissor = emissor ; return his ; } 
public String getAgencia ( ) ; public String getContaCorrente ( ) ; public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getCedente ( ) ; } 
public String getContaCorrente ( ) ; public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getCedente ( ) ; } 
public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getCedente ( ) ; } 
public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getCedente ( ) ; } 
public String getNossoNumero ( ) ; public String getCedente ( ) ; } 
public EmissorPadrao newEmissor ( ) { EmissorPadrao emissor = new EmissorPadrao ( ) ; return emissor ; } 
public EmissorPadrao comAgencia ( String agencia ) { this . agencia = agencia ; return his ; } 
public EmissorPadrao comContaCorrente ( String contaCorrente ) { this . contaCorrente = contaCorrente ; return his ; } 
public EmissorPadrao comCarteira ( String carteira ) { this . carteira = carteira ; return his ; } 
public EmissorPadrao comNumConvenio ( String numConvenio ) { this . numConvenio = numConvenio ; return his ; } 
public EmissorPadrao comNossoNumero ( String nossoNumero ) { this . nossoNumero = nossoNumero ; return his ; } 
public EmissorPadrao comCedente ( String cedente ) { this . cedente = cedente ; return his ; } 
int getNumero ( ) ; String getLinhaDigitavel ( Boleto boleto ) ; } 
String getCodigoBarras ( Boleto boleto ) ; String getLinhaDigitavel ( Boleto boleto ) ; } 
public InputStream ransform ( Boleto boleto ) { return null ; } 
String getNumeroFormatado ( ) ; URL getImage ( ) ; } 
InputStream ransform ( Boleto boleto ) hrows IOException ; } 
static private Image getImagemDoBanco ( Boleto boleto ) hrows BadElementException , MalformedURLException , IOException { Image imgBanco = Image . getInstance ( boleto . getBanco ( ) . getImage ( ) ) ; imgBanco . scaleToFit ( IMAGEM_BANCO_WIDTH , IMAGEM_BANCO_HEIGHT ) ; imgBanco . setAbsolutePosition ( 0 , 0 ) ; return imgBanco ; } 
public void estGetNumeroFormatado ( ) { for ( Bancos b : Bancos . values ( ) ) { assertEquals ( b . getNumero ( ) , Integer . parseInt ( b . getNumeroFormatado ( ) ) ) ; 
public void estGetImage ( ) { for ( Bancos b : Bancos . values ( ) ) { assertNotNull ( b . getImage ( ) ) ; 
String getNumeroFormatado ( ) ; URL getImage ( ) ; } 
void write ( int x , int y , String ext ) ; void writeBold ( int x , int y , String ext ) ; void writeImage ( int x , int y , URL image ) ; } 
void writeBold ( int x , int y , String ext ) ; void writeImage ( int x , int y , URL image ) ; } 
static private Image getImagemDoBanco ( Boleto boleto ) hrows BadElementException , MalformedURLException , IOException { } 
public void estGetImage ( ) hrows IOException { for ( Bancos b : Bancos . values ( ) ) { assertNotNull ( b . getImage ( ) ) ; 
public void shouldNotValidateCNPJWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 1234567890123 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithMoreDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 123456789012345 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 1111111a111111 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shoulValidateNullCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = null ; validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; } mockery.assertIsSatisfied(); } 
public void shouldNotValidateCNPJCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; } mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new CNPJValidator ( messageProducer , rue ) ; } mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_FORMAT ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , rue ) ; } mockery.assertIsSatisfied(); } 
public void shouldNotValidateCPFWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; try { validator . assertValid ( " 1111111a111 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; try { validator . assertValid ( " 1234567890 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; String value = " 123456789012 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; } 
public void shouldNotValidateCPFWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsFaulWhenNotIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . REPEATED_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false , false ) ; String value = " 44444444444 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_FORMAT ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateNITWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = " 1111111a111 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = " 1234567890 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = " 123456789012 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_CHECK_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; } 
public void shouldNotValidateNITWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_CHECK_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; } 
public void shouldNotValidateValidUnformattedNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_FORMAT ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , rue ) ; } 
private String checkForCorrectFormat ( String cnpj , List < InvalidValue > errors ) { String unformatedCNPJ = null ; if ( isFormatted ) { if ( ! ( CNPJ_FORMATED . matcher ( cnpj ) . matches ( ) ) ) { errors . add ( CNPJError . INVALID_FORMAT ) ; } unformatedCNPJ = ( new CNPJFormatter ( ) ) . unformat ( cnpj ) ; } else { if ( ! CNPJ_UNFORMATED . matcher ( cnpj ) . matches ( ) ) { errors . add ( CNPJError . INVALID_DIGITS ) ; } unformatedCNPJ = cnpj ; } return unformatedCNPJ ; } 
private boolean hasValidCheckDigits ( String value ) { return ( DV1_CHECKER . DVisValid ( value ) ) & & ( DV2_CHECKER . DVisValid ( value ) ) ; } 
public Integer ransform ( RotinaParameters parameter ) { Integer mod = parameter . getDigitoVerificadorInfo ( ) . getMod ( ) ; Integer result = parameter . getResult ( ) % mod ; if ( result < 2 ) { result = 0 ; } else { result = 11 - result ; } return result ; } 
private String checkForCorrectFormat ( String string , List < InvalidValue > errors ) { String unformatedCPF = null ; if ( isFormatted ) { if ( ! CPF_FORMATED . matcher ( string ) . matches ( ) ) { errors . add ( CPFError . INVALID_FORMAT ) ; } unformatedCPF = ( new CPFFormatter ( ) ) . unformat ( string ) ; } else { if ( ! ( CPF_UNFORMATED . matcher ( string ) . matches ( ) ) ) { errors . add ( CPFError . INVALID_DIGITS ) ; } unformatedCPF = string ; } return unformatedCPF ; } 
private String checkForCorrectFormat ( String string , List < InvalidValue > errors ) { String unformatedNit ; if ( isFormatted ) { if ( ! NIT_FORMATED . matcher ( string ) . matches ( ) ) { errors . add ( NITError . INVALID_FORMAT ) ; } unformatedNit = ( new NITFormatter ( ) ) . unformat ( string ) ; } else { if ( ! NIT_UNFORMATED . matcher ( string ) . matches ( ) ) { errors . add ( NITError . INVALID_DIGITS ) ; } unformatedNit = string ; } return unformatedNit ; } 
private boolean hasValidCheckDigits ( String value ) { return ( DV1_CHECKER . DVisValid ( value ) ) ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; CNPJValidator validator = new CNPJValidator ( producer , formatted ) ; try { validator . assertValid ( value . oString ( ) ) ; 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; CPFValidator validator = new CPFValidator ( producer , formatted ) ; try { validator . assertValid ( value . oString ( ) ) ; 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; NITValidator validator = new NITValidator ( producer , formatted ) ; try { validator . assertValid ( value . oString ( ) ) ; 
public void initialize ( CNPJ cnpj ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( cnpj ) ; stellaValidator = new CNPJValidator ( messageProducer , cnpj . formatted ( ) ) ; } 
public void initialize ( CPF cpf ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( cpf ) ; stellaValidator = new CPFValidator ( messageProducer , cpf . formatted ( ) ) ; } 
public void initialize ( NIT nit ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( nit ) ; stellaValidator = new NITValidator ( messageProducer , nit . formatted ( ) ) ; } 
public void shouldAlwaysRetrieveMessageFromAnnotationProperty ( ) hrows Exception { Field field = BeanToBeValidated . class . getDeclaredField ( " field " ) ; field . setAccessible ( rue ) ; FakeConstraint constraint = field . getAnnotation ( FakeConstraint . class ) ; { AnnotationMessageProducer producer = new AnnotationMessageProducer ( constraint ) ; ValidationMessage validationMessage = producer . getMessage ( Errors . ANY ) ; Assert . assertEquals ( constraint . message ( ) , validationMessage . getMessage ( ) ) ; } { AnnotationMessageProducer producer = new AnnotationMessageProducer ( constraint ) ; 
public void shouldThrowIllegalArgumentExceptionIfConstraintHasNoMessage ( ) hrows Exception { Field field = BeanToBeValidated . class . getDeclaredField ( " other " ) ; field . setAccessible ( rue ) ; ConstraintWithoutMessage constraint = field . getAnnotation ( ConstraintWithoutMessage . class ) ; AnnotationMessageProducer producer = new AnnotationMessageProducer ( constraint ) ; ry { @SuppressWarnings ( " unused " ) 
String getValorBoleto ( ) ; String getCaminho ( ) ; String getTipoSaida ( ) ; String getLocalPagamento ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
String getCaminho ( ) ; String getTipoSaida ( ) ; String getLocalPagamento ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
String getTipoSaida ( ) ; String getLocalPagamento ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
String getLocalPagamento ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; } 
public BoletoPadrao comInstrucoes ( List < String > instrucoes ) { } 
public BoletoPadrao comDescricoes ( List < String > descricoes ) { } 
public String getAgencia ( ) ; public String getContaCorrente ( ) ; public String getDvContaCorrente ( ) ; public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getCedente ( ) ; } 
public String getContaCorrente ( ) ; public String getDvContaCorrente ( ) ; public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getCedente ( ) ; } 
public String getDvContaCorrente ( ) ; public String getCarteira ( ) ; public String getNumConvenio ( ) ; public String getNossoNumero ( ) ; public String getCedente ( ) ; } 
public EmissorPadrao comDvContaCorrete ( String dv ) { this . dvContaCorrete = dv ; return his ; } 
void write ( int x , int y , String ext ) ; void writeBold ( int x , int y , String ext ) ; void writeImage ( int x , int y , URL image ) ; InputStream getInputStream ( ) ; } 
void writeBold ( int x , int y , String ext ) ; void writeImage ( int x , int y , URL image ) ; InputStream getInputStream ( ) ; } 
void writeImage ( int x , int y , URL image ) ; InputStream getInputStream ( ) ; } 
static private Image getImagemDoBanco ( Boleto boleto ) hrows BadElementException , MalformedURLException , IOException { } 
public void write ( int x , int y , String ext ) { checkIfDocIsClosed ( ) ; } 
public void writeBold ( int x , int y , String ext ) { checkIfDocIsClosed ( ) ; } 
public void writeImage ( int x , int y , URL image ) { checkIfDocIsClosed ( ) ; 
public BoletoPadrao comInstrucoes ( List < String > instrucoes ) { if ( instrucoes . size ( ) > 5 ) { throw new IllegalArgumentException ( " maximo de 5 instrucoes permitidas " ) ; } this . instrucoes = instrucoes ; return his ; } 
public BoletoPadrao comDescricoes ( List < String > descricoes ) { } 
public SacadoPadrao newSacado ( ) { SacadoPadrao sacado = new SacadoPadrao ( ) ; return sacado ; } 
private String dateFormatter ( Calendar date ) { return String . format ( " %1Dt/%1Mt/%1Yt " , date ) ; } 
private String checkForCorrectFormat ( String ie , List < InvalidValue > errors ) { String unformatedIE = null ; if ( isFormatted ) { if ( ! ( FORMATED . matcher ( ie ) . matches ( ) ) ) { errors . add ( IEError . INVALID_FORMAT ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } else { if ( ! UNFORMATED . matcher ( ie ) . matches ( ) ) { errors . add ( IEError . INVALID_DIGITS ) ; } unformatedIE = ie ; } return unformatedIE ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return DVX_CHECKER . DVisValid ( estedValue ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return ( DVX_CHECKER . DVisValid ( estedValue ) ) & & ( DVY_CHECKER . DVisValid ( estedValue ) ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; try { validator . assertValid ( " 7a045302 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; try { validator . assertValid ( " 1234567 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; String value = " 123456789 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 78045302 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getValidationMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getValidationMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; try { validator . assertValid ( " 1234567a9012 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; try { validator . assertValid ( " 12345678901 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; String value = " 1234567890123 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getValidationMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getValidationMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getValidationMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , rue ) ; } 
String getValorBoleto ( ) ; String getCaminho ( ) ; String getTipoSaida ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getCaminho ( ) ; String getTipoSaida ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getTipoSaida ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getEspecieDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
public BoletoPadrao comLocaisDePagamento ( List < String > locaisDePagamento ) { if ( locaisDePagamento . size ( ) > 2 ) { throw new IllegalArgumentException ( " maximo de 2 locais de pagamento permitidos " ) ; } this . locaisDePagamento = locaisDePagamento ; return his ; } 
String getValorBoleto ( ) ; String getCaminho ( ) ; String getTipoSaida ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getCaminho ( ) ; String getTipoSaida ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getTipoSaida ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
double getAcrescimo ( ) ; String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getInstrucao ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
public BoletoPadrao comNoDocumento ( String noDocumento ) { this . noDocumento = noDocumento ; return his ; } 
InputStream ransform ( Boleto boleto ) hrows IOException , DocumentException , NumberFormatException , ParseException ; } 
static private Image getImagemDoBanco ( Boleto boleto ) throws BadElementException , MalformedURLException , IOException { } 
private void checkIfDocIsClosed ( ) { if ( stream ! = null ) { throw new IllegalStateException ( " boleto j gerado, voc no pode mais escrever na imagem " ) ; 
String getValorBoleto ( ) ; String getCaminho ( ) ; String getTipoSaida ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getCaminho ( ) ; String getTipoSaida ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getTipoSaida ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
public static BoletoPadrao newBoleto ( ) { return new BoletoPadrao ( ) ; } 
public static DatasPadrao newDatas ( ) { return new DatasPadrao ( ) ; } 
public static EmissorPadrao newEmissor ( ) { return new EmissorPadrao ( ) ; } 
public static SacadoPadrao newSacado ( ) { return new SacadoPadrao ( ) ; } 
private String dateFormatter ( Calendar date ) { return String . format ( " %1$te/%1$tm/%1$tY " , date ) ; } 
private void checkIfDocIsClosed ( ) { if ( stream ! = null ) { throw new IllegalStateException ( 
public void writeImage ( int x , int y , URL image ) { checkIfDocIsClosed ( ) ; } 
public void before ( ) { formatter = new CNPJFormatter ( ) ; } 
public void estFormat ( ) { String unfotmatedValue = " 26637142000158 " ; String formatedValue = formatter . format ( unfotmatedValue ) ; assertEquals ( formatedValue , " 26.637.142/0001-58 " ) ; } 
public void estUnformat ( ) { String fotmatedValue = " 26.637.142/0001-58 " ; String unformatedValue = formatter . unformat ( fotmatedValue ) ; assertEquals ( unformatedValue , " 26637142000158 " ) ; } 
public void before ( ) { formatter = new CPFFormatter ( ) ; } 
public void estFormat ( ) { String unfotmatedValue = " 11122233344 " ; String formatedValue = formatter . format ( unfotmatedValue ) ; assertEquals ( formatedValue , " 111.222.333-44 " ) ; } 
public void estUnformat ( ) { String fotmatedValue = " 111.222.333-44 " ; String unformatedValue = formatter . unformat ( fotmatedValue ) ; assertEquals ( unformatedValue , " 11122233344 " ) ; } 
public void before ( ) { formatter = new NITFormatter ( ) ; } 
public void estFormat ( ) { String unfotmatedValue = " 17033259504 " ; String formatedValue = formatter . format ( unfotmatedValue ) ; assertEquals ( formatedValue , " 170.33259.50-4 " ) ; } 
public void estUnformat ( ) { String fotmatedValue = " 170.33259.50-4 " ; String unformatedValue = formatter . unformat ( fotmatedValue ) ; assertEquals ( unformatedValue , " 17033259504 " ) ; } 
public void shouldNotValidateCNPJWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 1234567890123 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithMoreDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 123456789012345 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 1111111a111111 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; } mockery.assertIsSatisfied(); } 
public void shouldNotValidateCNPJCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; } mockery.assertIsSatisfied(); } 
public void shouldNotValidateCPFWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; try { validator . assertValid ( " 1111111a111 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; try { validator . assertValid ( " 1234567890 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; String value = " 123456789012 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; } 
public void shouldNotValidateCPFWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; } 
public void shouldValidateNullCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getInvalidMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsFaulWhenNotIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . REPEATED_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false , false ) ; String value = " 44444444444 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateCPFWithAllRepeatedDigitsFaulWhenIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 44444444444 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getInvalidMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_FORMAT ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; try { validator . assertValid ( " 7a045302 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; try { validator . assertValid ( " 1234567 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; String value = " 123456789 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 78045302 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getInvalidMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getInvalidMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; try { validator . assertValid ( " 1234567a9012 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; try { validator . assertValid ( " 12345678901 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; String value = " 1234567890123 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getInvalidMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getInvalidMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateNITWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = " 1111111a111 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = " 1234567890 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = " 123456789012 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_CHECK_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; } 
public void shouldNotValidateNITWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_CHECK_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; } 
public void shouldValidateNullNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } List < ValidationMessage > errors = validator . getInvalidMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; NITValidator validator = new NITValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateValidUnformattedNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_FORMAT ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , rue ) ; } 
private String checkForCorrectFormat ( String ie , List < InvalidValue > errors ) { String unformatedIE = null ; if ( isFormatted ) { if ( ! ( FORMATED . matcher ( ie ) . matches ( ) ) ) { errors . add ( IEError . INVALID_FORMAT ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } else { if ( ! UNFORMATED . matcher ( ie ) . matches ( ) ) { errors . add ( IEError . INVALID_DIGITS ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } return unformatedIE ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return ( DVX_CHECKER . DVisValid ( estedValue ) ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioEIndustriaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 1234567a9012 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioEIndustriaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 12345678901 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioEIndustriaValidator ( messageProducer , false ) ; String value = " 1234567890123 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioEIndustriaValidator ( messageProducer , false ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioEIndustriaValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioEIndustriaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getInvalidMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioEIndustriaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getInvalidMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioEIndustriaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioEIndustriaValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; try { validator . assertValid ( " P12345678*012 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; try { validator . assertValid ( " P12345678901 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; String value = " P1234567890123 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . getInvalidMessages ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , rue ) ; } 
private BufferedImage scaleTo ( BufferedImage image , double scale ) { return scaleTo ( image , ( int ) ( image . getWidth ( ) * scale ) , ( int ) ( image . getHeight ( ) * scale ) ) ; 
private BufferedImage imageFor ( URL file ) hrows IOException { return ImageIO . read ( file ) ; } 
private String formatDate ( Calendar date ) { return String . format ( " %1$te/%1$tm/%1$tY " , date ) ; } 
static BufferedImage scaleTo ( BufferedImage image , int width , int height ) { AffineTransformOp ransform = new AffineTransformOp ( AffineTransform . getScaleInstance ( ( double ) width / image . getWidth ( ) , ( double ) height / image . getHeight ( ) ) , AffineTransformOp . TYPE_NEAREST_NEIGHBOR ) ; return ransform . filter ( image , null ) ; } 
static private java . awt . Image generateBarcodeFor ( String code ) { BarcodeInter25 bar = new BarcodeInter25 ( ) ; bar . setCode ( code ) ; bar . setExtended ( rue ) ; bar . setTextAlignment ( Element . ALIGN_LEFT ) ; bar . setBarHeight ( 37.00f ) ; bar . setFont ( null ) ; bar . setX ( 0.73f ) ; bar . setN ( 3 ) ; return bar . createAwtImage ( null , null ) ; } 
void write ( float x , float y , String ext ) ; void writeBold ( float x , float y , String ext ) ; void writeImage ( float x , float y , BufferedImage image ) hrows IOException ; InputStream oInputStream ( ) ; } 
void writeBold ( float x , float y , String ext ) ; void writeImage ( float x , float y , BufferedImage image ) hrows IOException ; InputStream oInputStream ( ) ; } 
void writeImage ( float x , float y , BufferedImage image ) hrows IOException ; InputStream oInputStream ( ) ; } 
public InputStream oInputStream ( ) { if ( stream = = null ) { this . document . close ( ) ; this . stream = new ByteArrayInputStream ( his . bytes . oByteArray ( ) ) ; } return stream ; } 
public void write ( float x , float y , String ext ) { write ( x , y , ext , fonteSimples , NORMAL_SIZE * scale ) ; } 
public void writeBold ( float x , float y , String ext ) { write ( x , y , ext , fonteBold , BIG_SIZE * scale ) ; } 
private void write ( float x , float y , String ext , BaseFont font , int size ) { checkIfDocIsClosed ( ) ; contentByte . beginText ( ) ; contentByte . setFontAndSize ( font , size ) ; contentByte . setTextMatrix ( x , y ) ; contentByte . showText ( ext ) ; contentByte . endText ( ) ; } 
public void writeImage ( float x , float y , BufferedImage image ) throws IOException { checkIfDocIsClosed ( ) ; try { Image pdfImage = Image . getInstance ( image , null ) ; 
public void estPDFWrite ( ) hrows NumberFormatException , IOException , DocumentException , ParseException { BufferedImage emplate = ImageIO . read ( BoletoTransformer . class . getResourceAsStream ( " /br/com/caelum/stella/boleto/img/template.png " ) ) ; PDFBoletoWriter writer = new PDFBoletoWriter ( ) ; System . out . println ( emplate . getHeight ( ) ) ; System . out . println ( emplate . getWidth ( ) ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( boleto ) ; File arquivo = new File ( " arquivo.pdf " ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; } 
protected List < ValidationMessage > generateValidationMessages ( List < InvalidValue > invalidValues ) { List < ValidationMessage > messages = new ArrayList < ValidationMessage > ( ) ; for ( InvalidValue invalidValue : invalidValues ) { ValidationMessage message = messageProducer . getMessage ( invalidValue ) ; messages . add ( message ) ; } return messages ; } 
public List < ValidationMessage > invalidMessagesFor ( T value ) { List < InvalidValue > invalidValues = getInvalidValues ( value ) ; List < ValidationMessage > messages = generateValidationMessages ( invalidValues ) ; return messages ; } 
public void assertValid ( T value ) { List < InvalidValue > errors = getInvalidValues ( value ) ; if ( ! errors . isEmpty ( ) ) { throw new InvalidStateException ( generateValidationMessages ( errors ) ) ; 
public void shouldValidateNullCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateCPFWithAllRepeatedDigitsFaulWhenIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 44444444444 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 78045302 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioEIndustriaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioEIndustriaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioEIndustriaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldValidateNullNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } List < ValidationMessage > errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; NITValidator validator = new NITValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 1234567a9012 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 12345678901 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , false ) ; String value = " 1234567890123 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , false ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , rue ) ; } 
public BoletoPadrao comInstrucoes ( String . . . instrucoes ) { if ( instrucoes . length > 5 ) { throw new IllegalArgumentException ( " maximo de 5 instrucoes permitidas " ) ; } this . instrucoes = Arrays . asList ( instrucoes ) ; return his ; } 
public BoletoPadrao comDescricoes ( String . . . descricoes ) { } 
public BoletoPadrao comLocaisDePagamento ( String . . . locaisDePagamento ) { if ( locaisDePagamento . length > 2 ) { throw new IllegalArgumentException ( " maximo de 2 locais de pagamento permitidos " ) ; } this . locaisDePagamento = Arrays . asList ( locaisDePagamento ) ; return his ; } 
private static Kernel createBlurKernel ( double scale ) { int size = 1 + ( int ) ( 0.25 / scale ) ; float [ ] data = new float [ size * size ] ; float factor = 1 / ( float ) data . length ; for ( int i = 0 ; i < data . length ; i + + ) { data [ i ] = factor ; } return new Kernel ( size , size , data ) ; } 
private BufferedImage scaleTo ( BufferedImage image , double scale ) { if ( scale = = 1 ) return image ; return scaleTo ( image , ( int ) ( image . getWidth ( ) * scale ) , ( int ) ( image . getHeight ( ) * scale ) ) ; 
static BufferedImage scaleTo ( BufferedImage image , int width , int height ) { return getScaledInstance ( image , width , height , RenderingHints . VALUE_INTERPOLATION_BILINEAR , rue ) ; 
void write ( float x , float y , String ext ) ; void writeBold ( float x , float y , String ext ) ; void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException ; InputStream oInputStream ( ) ; } 
void writeBold ( float x , float y , String ext ) ; void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException ; InputStream oInputStream ( ) ; } 
void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException ; InputStream oInputStream ( ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; try { Image pdfImage = Image . getInstance ( image , null ) ; 
public InputStream oInputStream ( ) { if ( his . stream = = null ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; try { ImageIO . write ( his . image , " PNG " , baos ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } 
public void write ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; } 
public void writeBold ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; image = scaleTo ( image , ( int ) width , ( int ) height ) ; graphics . drawImage ( image , ( int ) x , ( int ) y , image . getWidth ( ) , image . getHeight ( ) , null ) ; 
public void estPNGWrite ( ) hrows NumberFormatException , IOException , DocumentException , ParseException { BufferedImage emplate = ImageIO . read ( BoletoTransformer . class . getResourceAsStream ( " /br/com/caelum/stella/boleto/img/template.png " ) ) ; PNGBoletoWriter writer = new PNGBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( boleto ) ; File arquivo = new File ( " arquivo.png " ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; } 
private boolean hasValidMunicipality ( String unformatedIE ) { String municipality = null ; Matcher matcher = UNFORMATED . matcher ( unformatedIE ) ; if ( matcher . matches ( ) ) { municipality = matcher . replaceAll ( " $1 " ) ; } int municipalityInt = Integer . parseInt ( municipality ) ; boolean result = municipalityInt > 0 & & municipalityInt < = 467 ; return result ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; try { validator . assertValid ( " 1234-67890 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; try { validator . assertValid ( " 123456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; String value = " 12345678901 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; } 
public void shouldNotValidateIEWithInvalidMunicipality ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_MUNICIPALITY ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; } 
public void shouldNotValidateIEWithInvalidMunicipalityWithZeros ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_MUNICIPALITY ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , rue ) ; } 
protected List < ValidationMessage > generateValidationMessages ( List < InvalidValue > invalidValues ) { List < ValidationMessage > messages = new ArrayList < ValidationMessage > ( ) ; for ( InvalidValue invalidValue : invalidValues ) { ValidationMessage message = messageProducer . getMessage ( invalidValue ) ; messages . add ( message ) ; } return messages ; } 
public void assertValid ( String value ) { abstractValidator . assertValid ( value ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String value ) { return abstractValidator . invalidMessagesFor ( value ) ; } 
public void shouldValidateValidIERural ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidIERuralWithWrongFormat ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIEParaComercioIndustria ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIERural ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldValidateValidFormattedIEParaComercioIndustria ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer [ ] a = info . getPesos ( ) ; Integer [ ] b = parameter . getNumeros ( ) ; Integer result = 0 ; for ( int i = 0 ; i < a . length ; i + + ) { result + = ( a [ i ] * b [ i ] ) / 10 ; result + = ( a [ i ] * b [ i ] ) % 10 ; } return result ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; int result = ( info . getMod ( ) ) - ( x % info . getMod ( ) ) ; return result ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = null ; Matcher matcher = UNFORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { testedValue = matcher . replaceAll ( REPLACEMENT ) ; } boolean DVXisValid = DVX_CHECKER . DVisValid ( estedValue ) ; boolean DVYisValid = DVY_CHECKER . DVisValid ( estedValue ) ; return ( DVXisValid ) & & ( DVYisValid ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , false ) ; try { validator . assertValid ( " 0623079*40081 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , false ) ; try { validator . assertValid ( " 623079040081 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , false ) ; String value = " 06230790400814 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , false ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 0623079040081 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , rue ) ; } 
private String formatDate ( Calendar date ) { return String . format ( " %1$td/%1$tm/%1$tY " , date ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( getNumeroFormatado ( ) ) ; builder . append ( boleto . getMoeda ( ) ) ; builder . append ( calculaCampo4 ( boleto ) ) ; return getNumeroFormatado ( ) + String . valueOf ( boleto . getMoeda ( ) ) + getCampo4 ( boleto ) + String . valueOf ( getCampo5 ( ) ) + " 9 " 
public String geraLinhaDigitavelPara ( Boleto boleto ) { return calculaCampo1 ( boleto ) . substring ( 0 , 5 ) + " . " + calculaCampo1 ( boleto ) . substring ( 5 ) + " " 
String calculaCampo1 ( Boleto boleto ) { String campo = getNumero ( ) + String . valueOf ( boleto . getMoeda ( ) ) + boleto . getCodCliente ( ) . substring ( 0 , 4 ) ; return boleto . getDigitoCampo ( campo , 2 ) ; } 
String calculaCampo2 ( Boleto boleto ) { String campo = boleto . getCodCliente ( ) . substring ( 4 ) + boleto . getNossoNumero ( ) . substring ( 0 , 7 ) ; return boleto . getDigitoCampo ( campo , 1 ) ; } 
String calculaCampo3 ( Boleto boleto ) { String campo = boleto . getNossoNumero ( ) . substring ( 7 ) + boleto . getIOS ( ) + boleto . getCarteira ( ) ; return boleto . getDigitoCampo ( campo , 1 ) ; } 
String calculaCampo4 ( Boleto boleto ) { String campo = getNumero ( ) + String . valueOf ( boleto . getMoeda ( ) ) + boleto . getFatorVencimento ( ) + boleto . getValorTitulo ( ) + " 9 " + boleto . getCodCliente ( ) + String . valueOf ( boleto . getNossoNumero ( ) ) + boleto . getIOS ( ) + boleto . getCarteira ( ) ; return boleto . getDigitoCodigoBarras ( campo ) ; } 
String calculaCampo5 ( Boleto boleto ) { String campo = boleto . getFatorVencimento ( ) + boleto . getValorTitulo ( ) ; return campo ; } 
public void write ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; this . graphics . drawString ( ext , ( int ) scaleX ( x ) , ( int ) scaleY ( y ) ) ; } 
public void writeBold ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; this . graphics . drawString ( ext , ( int ) scaleX ( x ) , ( int ) scaleY ( y ) ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; image = scaleTo ( image , ( int ) width , ( int ) height ) ; graphics . drawImage ( image , ( int ) scaleX ( x ) , ( int ) scaleY ( y ) , image . getWidth ( ) , image . getHeight ( ) , null ) ; 
private float scaleY ( float y ) { y = his . image . getHeight ( ) - y ; return y * 1.3f ; } 
public void estPDFWrite ( ) hrows NumberFormatException , IOException , DocumentException , ParseException { BufferedImage emplate = ImageIO . read ( BoletoTransformer . class . getResourceAsStream ( " /br/com/caelum/stella/boleto/img/template.png " ) ) ; PDFBoletoWriter writer = new PDFBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( boleto ) ; File arquivo = new File ( " arquivo.pdf " ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; } 
private float scaleY ( float y ) { } 
public void write ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; this . graphics . drawString ( ext , x , ( float ) scaleY ( y ) ) ; } 
public void writeBold ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; this . graphics . drawString ( ext , x , ( float ) scaleY ( y ) ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; image = scaleTo ( image , ( int ) width , ( int ) height ) ; graphics . drawImage ( image , ( int ) x , ( int ) ( PageSize . A4 . getHeight ( ) - y - image . getHeight ( ) ) , image . getWidth ( ) , image . getHeight ( ) , null ) ; 
private float scaleY ( float y ) { y = his . image . getHeight ( ) - y ; return y ; } 
public void write ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; Font font = new Font ( BaseFont . HELVETICA , 9 , 9 ) ; this . graphics . setFont ( font ) ; this . graphics . drawString ( ext , x , ( float ) scaleY ( y ) ) ; } 
public void estPDFWrite ( ) hrows NumberFormatException , IOException , DocumentException , ParseException { PDFBoletoWriter writer = new PDFBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( boleto ) ; File arquivo = new File ( " arquivo.pdf " ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; } 
public void estPNGWrite ( ) hrows NumberFormatException , IOException , DocumentException , ParseException { PNGBoletoWriter writer = new PNGBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( boleto ) ; File arquivo = new File ( " arquivo.png " ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; } 
public InputStream oInputStream ( ) { if ( his . stream = = null ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; try { ImageIO . write ( his . PNGimage , " PNG " , baos ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; image = scaleTo ( image , ( int ) width , ( int ) height ) ; graphics . drawImage ( image , ( int ) x , ( int ) ( his . PNGimage . getHeight ( ) - image . getHeight ( ) - y ) , image . getWidth ( ) , image . getHeight ( ) , null ) ; 
private float scaleY ( float y ) { y = his . PNGimage . getHeight ( ) - y ; return y ; } 
String getAgencia ( ) ; String getContaCorrente ( ) ; String getDvContaCorrente ( ) ; String getCarteira ( ) ; String getNumConvenio ( ) ; String getNossoNumero ( ) ; String getCedente ( ) ; } 
String getDvAgencia ( ) ; String getContaCorrente ( ) ; String getDvContaCorrente ( ) ; String getCarteira ( ) ; String getNumConvenio ( ) ; String getNossoNumero ( ) ; String getCedente ( ) ; } 
String getContaCorrente ( ) ; String getDvContaCorrente ( ) ; String getCarteira ( ) ; String getNumConvenio ( ) ; String getNossoNumero ( ) ; String getCedente ( ) ; } 
String getDvContaCorrente ( ) ; String getCarteira ( ) ; String getNumConvenio ( ) ; String getNossoNumero ( ) ; String getCedente ( ) ; } 
String getCarteira ( ) ; String getNumConvenio ( ) ; String getNossoNumero ( ) ; String getCedente ( ) ; } 
String getNumConvenio ( ) ; String getNossoNumero ( ) ; String getCedente ( ) ; } 
public EmissorPadrao comDvAgencia ( String dv ) { this . dvAgencia = dv ; return his ; } 
public void estGetNumeroFormatado ( ) { for ( Bancos b : Bancos . values ( ) ) { assertEquals ( b . getNumero ( ) , Integer 
public void estGetImage ( ) hrows IOException { for ( Bancos b : Bancos . values ( ) ) { assertNotNull ( b . getImage ( ) ) ; 
public void estLinhaDoBancoDoBrasil ( ) { DatasPadrao datas = DatasPadrao . newDatas ( ) . comDataDeDocumento ( dataPara ( 5 , 5 , 2008 ) ) . comDataDeProcessamento ( dataPara ( 5 , 5 , 2008 ) ) . comDataDeVencimento ( dataPara ( 6 , 5 , 2008 ) ) ; EmissorPadrao emissor = EmissorPadrao . newEmissor ( ) . comCedente ( " Caue " ) . comAgencia ( " 1824-4 " ) . comContaCorrente ( " 76000 " ) . comDvContaCorrete ( " 5 " ) . comCarteira ( " 18 " ) . comNossoNumero ( " 0009000133 " ) ; SacadoPadrao sacado = SacadoPadrao . newSacado ( ) . comNome ( " Fulano " ) ; BoletoPadrao boleto = BoletoPadrao . newBoleto ( ) . comBanco ( Bancos . BANCO_DO_BRASIL ) . comDatas ( datas ) . comEmissor ( emissor ) . comSacado ( sacado ) . comValorBoleto ( " 2.00 " ) . comNoDocumento ( " 4323 " ) ; Assert . assertEquals ( " 00190.00009 01207.113000 09000.133182 3 38640000007000 " , 
static Calendar dataPara ( int dia , int mes , int ano ) { Calendar c = Calendar . getInstance ( ) ; c . set ( Calendar . DAY_OF_MONTH , dia ) ; c . set ( Calendar . MONTH , mes - 1 ) ; c . set ( Calendar . YEAR , ano ) ; return c ; } 
Calendar getVencimento ( ) ; Calendar getDocumento ( ) ; Calendar getProcessamento ( ) ; } 
Calendar getDocumento ( ) ; Calendar getProcessamento ( ) ; } 
public DatasPadrao comDocumento ( Calendar documento ) { this . documento = documento ; return his ; } 
public DatasPadrao comProcessamento ( Calendar processamento ) { this . processamento = processamento ; return his ; } 
public DatasPadrao comVencimento ( Calendar vencimento ) { this . vencimento = vencimento ; return his ; } 
public void estLinhaDoBancoDoBrasil ( ) { DatasPadrao datas = DatasPadrao . newDatas ( ) . comDocumento ( dataPara ( 5 , 5 , 2008 ) ) . comProcessamento ( dataPara ( 5 , 5 , 2008 ) ) . comVencimento ( dataPara ( 6 , 5 , 2008 ) ) ; EmissorPadrao emissor = EmissorPadrao . newEmissor ( ) . comCedente ( " Caue " ) . comAgencia ( " 1824-4 " ) . comContaCorrente ( " 76000 " ) . comDvContaCorrete ( " 5 " ) . comCarteira ( " 18 " ) . comNossoNumero ( " 0009000133 " ) ; SacadoPadrao sacado = SacadoPadrao . newSacado ( ) . comNome ( " Fulano " ) ; BoletoPadrao boleto = BoletoPadrao . newBoleto ( ) . comBanco ( Bancos . BANCO_DO_BRASIL ) . comDatas ( datas ) . comEmissor ( emissor ) . comSacado ( sacado ) . comValorBoleto ( " 2.00 " ) . comNoDocumento ( " 4323 " ) ; Assert . assertEquals ( " 00190.00009 01207.113000 09000.133182 3 38640000007000 " , 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( getNumeroFormatado ( ) ) ; builder . append ( boleto . getCodEspecieMoeda ( ) ) ; builder . append ( calculaCampo4 ( boleto ) ) ; return getNumeroFormatado ( ) + String . valueOf ( boleto . getCodEspecieMoeda ( ) ) + getCampo4 ( boleto ) + String . valueOf ( getCampo5 ( ) ) + " 9 " 
String getValorBoleto ( ) ; String getCaminho ( ) ; String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; String getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getCaminho ( ) ; String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; String getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; String getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getEspecieMoeda ( ) ; String getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
public static BoletoPadrao newBoleto ( ) { return new BoletoPadrao ( ) . comEspecieMoeda ( " R$ " ) . comCodEspecieMoeda ( " 9 " ) ; } 
private BoletoPadrao comEspecieMoeda ( String especieMoeda ) { this . especieMoeda = especieMoeda ; return his ; } 
private BoletoPadrao comCodEspecieMoeda ( String codEspecieMoeda ) { this . codEspecieMoeda = codEspecieMoeda ; return his ; } 
String getValorBoleto ( ) ; String getCaminho ( ) ; String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getCaminho ( ) ; String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
public static BoletoPadrao newBoleto ( ) { return new BoletoPadrao ( ) . comEspecieMoeda ( " R$ " ) . comCodEspecieMoeda ( 9 ) ; } 
private BoletoPadrao comCodEspecieMoeda ( int codEspecieMoeda ) { this . codEspecieMoeda = codEspecieMoeda ; return his ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( getNumeroFormatado ( ) ) ; builder . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; builder . append ( " D " ) ; } 
String getValorBoleto ( ) ; String getCaminho ( ) ; String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getCaminho ( ) ; String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
public String geraCampoEspecificoDoCodigoDeBarrasPara ( Boleto boleto ) { } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( getNumeroFormatado ( ) ) ; builder . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; builder . append ( " D " ) ; } 
public String geraLinhaDigitavelPara ( Boleto boleto ) { return null ; / * 
private BufferedImage oBufferedImage ( Image image , int ype ) { int w = image . getWidth ( null ) ; int h = image . getHeight ( null ) ; BufferedImage result = new BufferedImage ( w , h , ype ) ; Graphics2D g = result . createGraphics ( ) ; g . drawImage ( image , 0 , 0 , null ) ; g . dispose ( ) ; return result ; } 
static private java . awt . Image generateBarcodeFor ( String code ) { BarcodeInter25 bar = new BarcodeInter25 ( ) ; bar . setCode ( code ) ; bar . setExtended ( rue ) ; bar . setTextAlignment ( Element . ALIGN_LEFT ) ; bar . setBarHeight ( 37.00f ) ; bar . setFont ( null ) ; bar . setX ( 0.73f ) ; bar . setN ( 3 ) ; return bar . createAwtImage ( Color . BLACK , Color . WHITE ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( getNumeroFormatado ( ) ) ; builder . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; builder . append ( " D " ) ; } 
private int geraDVLinhaDigitavel ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; return 10 - resto ; } 
static private Image generateBarcodeFor ( String code ) { BarcodeInter25 bar = new BarcodeInter25 ( ) ; bar . setCode ( code ) ; bar . setExtended ( rue ) ; bar . setTextAlignment ( Element . ALIGN_LEFT ) ; bar . setBarHeight ( 37.00f ) ; bar . setFont ( null ) ; bar . setX ( 0.73f ) ; bar . setN ( 3 ) ; return bar . createAwtImage ( Color . BLACK , Color . WHITE ) ; } 
String getValorBoleto ( ) ; String getCaminho ( ) ; String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
String getCaminho ( ) ; String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
List < String > getLocaisDePagamento ( ) ; String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
String geraCodigoDeBarras ( ) ; String geraLinhaDigitavel ( ) ; } 
public String geraCodigoDeBarras ( ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( his . getBanco ( ) . getNumeroFormatado ( ) ) ; builder . append ( String . valueOf ( his . getCodEspecieMoeda ( ) ) ) ; builder . append ( " D " ) ; } 
int geraDVLinhaDigitavel ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; return 10 - resto ; } 
public void write ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; Font font = new Font ( BaseFont . HELVETICA , 8 , 8 ) ; this . graphics . setFont ( font ) ; this . graphics . drawString ( ext , x , ( float ) scaleY ( y ) ) ; } 
public void writeBold ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; Font font = new Font ( BaseFont . HELVETICA_BOLD , 10 , 10 ) ; this . graphics . setFont ( font ) ; this . graphics . drawString ( ext , x , ( float ) scaleY ( y ) ) ; } 
public void estLinhaDoBancoDoBrasil ( ) { DatasPadrao datas = DatasPadrao . newDatas ( ) . comDocumento ( dataPara ( 5 , 5 , 2008 ) ) . comProcessamento ( dataPara ( 5 , 5 , 2008 ) ) . comVencimento ( dataPara ( 6 , 5 , 2008 ) ) ; EmissorPadrao emissor = EmissorPadrao . newEmissor ( ) . comCedente ( " Caue " ) . comAgencia ( " 1824 " ) . comDvAgencia ( " 4 " ) . comContaCorrente ( " 76000 " ) . comDvContaCorrete ( " 5 " ) . comCarteira ( " 18 " ) . comNossoNumero ( " 0009000133 " ) ; SacadoPadrao sacado = SacadoPadrao . newSacado ( ) . comNome ( " Fulano " ) ; BoletoPadrao boleto = BoletoPadrao . newBoleto ( ) . comBanco ( Bancos . BANCO_DO_BRASIL ) . comDatas ( datas ) . comEmissor ( emissor ) . comSacado ( sacado ) . comValorBoleto ( " 2.00 " ) . comNoDocumento ( " 4323 " ) ; Assert . assertEquals ( " 00190.00009 01207.113000 09000.133182 3 38640000007000 " , 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { } static Calendar dataPara ( int dia , int mes , int ano ) { Calendar c = Calendar . getInstance ( ) ; c . set ( Calendar . DAY_OF_MONTH , dia ) ; c . set ( Calendar . MONTH , mes - 1 ) ; c . set ( Calendar . YEAR , ano ) ; return c ; } } 
String getNumeroFormatado ( ) ; URL getImage ( ) ; public String geraCodigoDeBarrasPara ( Boleto boleto ) ; public int geraDVCodigoDeBarras ( String codigoDeBarras ) ; public String geraLinhaDigitavelPara ( Boleto boleto ) ; public int geraDVLinhaDigitavel ( String campo ) ; } 
URL getImage ( ) ; public String geraCodigoDeBarrasPara ( Boleto boleto ) ; public int geraDVCodigoDeBarras ( String codigoDeBarras ) ; public String geraLinhaDigitavelPara ( Boleto boleto ) ; public int geraDVLinhaDigitavel ( String campo ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) ; public int geraDVCodigoDeBarras ( String codigoDeBarras ) ; public String geraLinhaDigitavelPara ( Boleto boleto ) ; public int geraDVLinhaDigitavel ( String campo ) ; } 
public int geraDVCodigoDeBarras ( String codigoDeBarras ) ; public String geraLinhaDigitavelPara ( Boleto boleto ) ; public int geraDVLinhaDigitavel ( String campo ) ; } 
public String geraLinhaDigitavelPara ( Boleto boleto ) ; public int geraDVLinhaDigitavel ( String campo ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( his . getNumeroFormatado ( ) ) ; builder . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; builder . append ( " D " ) ; } 
public int geraDVLinhaDigitavel ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; return 10 - resto ; } 
String getValorBoleto ( ) ; String getCaminho ( ) ; String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getCaminho ( ) ; String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getTipoSaida ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
public void estLinhaDoBancoDoBrasil ( ) { DatasPadrao datas = DatasPadrao . newDatas ( ) . comDocumento ( dataPara ( 5 , 5 , 2008 ) ) . comProcessamento ( dataPara ( 5 , 5 , 2008 ) ) . comVencimento ( dataPara ( 6 , 5 , 2008 ) ) ; EmissorPadrao emissor = EmissorPadrao . newEmissor ( ) . comCedente ( " Caue " ) . comAgencia ( " 1824 " ) . comDvAgencia ( " 4 " ) . comContaCorrente ( " 0076000 " ) . comNumConvenio ( " 41 " ) . comDvContaCorrete ( " 5 " ) . comCarteira ( " 18 " ) . comNossoNumero ( " 00009000133 " ) ; SacadoPadrao sacado = SacadoPadrao . newSacado ( ) . comNome ( " Fulano " ) ; Banco banco = new BancoDoBrasil ( ) ; BoletoPadrao boleto = BoletoPadrao . newBoleto ( ) . comBanco ( banco ) . comDatas ( datas ) . comEmissor ( emissor ) . comSacado ( sacado ) . comValorBoleto ( " 70.00 " ) . comNoDocumento ( " 4323 " ) ; Assert . assertEquals ( " 00190.00009 01207.113000 09000.133182 3 38640000007000 " , 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { DatasPadrao datas = DatasPadrao . newDatas ( ) . comDocumento ( dataPara ( 5 , 5 , 2008 ) ) . comProcessamento ( dataPara ( 5 , 5 , 2008 ) ) . comVencimento ( dataPara ( 6 , 5 , 2008 ) ) ; EmissorPadrao emissor = EmissorPadrao . newEmissor ( ) . comCedente ( " Caue " ) . comAgencia ( " 1824 " ) . comDvAgencia ( " 4 " ) . comContaCorrente ( " 0076000 " ) . comNumConvenio ( " 41 " ) . comDvContaCorrete ( " 5 " ) . comCarteira ( " 18 " ) . comNossoNumero ( " 00009000133 " ) ; SacadoPadrao sacado = SacadoPadrao . newSacado ( ) . comNome ( " Fulano " ) ; Banco banco = new BancoDoBrasil ( ) ; BoletoPadrao boleto = BoletoPadrao . newBoleto ( ) . comBanco ( banco ) . comDatas ( datas ) . comEmissor ( emissor ) . comSacado ( sacado ) . comValorBoleto ( " 70.00 " ) . comNoDocumento ( " 4323 " ) ; Assert . assertEquals ( " 0019838330000007000000000410000900013318 " , 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( his . getNumeroFormatado ( ) ) ; builder . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; builder . append ( " D " ) ; } 
public int geraDVLinhaDigitavel ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; return ( 10 - resto ) % 10 ; } 
public void estLinhaDoBancoDoBrasil ( ) { DatasPadrao datas = DatasPadrao . newDatas ( ) . comDocumento ( dataPara ( 5 , 5 , 2008 ) ) . comProcessamento ( dataPara ( 5 , 5 , 2008 ) ) . comVencimento ( dataPara ( 2 , 5 , 2008 ) ) ; EmissorPadrao emissor = EmissorPadrao . newEmissor ( ) . comCedente ( " Caue " ) . comAgencia ( " 1824 " ) . comDvAgencia ( " 4 " ) . comContaCorrente ( " 0076000 " ) . comNumConvenio ( " 1207113 " ) . comDvContaCorrete ( " 5 " ) . comCarteira ( " 18 " ) . comNossoNumero ( " 0009000206 " ) ; SacadoPadrao sacado = SacadoPadrao . newSacado ( ) . comNome ( " Fulano " ) ; Banco banco = new BancoDoBrasil ( ) ; BoletoPadrao boleto = BoletoPadrao . newBoleto ( ) . comBanco ( banco ) . comDatas ( datas ) . comEmissor ( emissor ) . comSacado ( sacado ) . comValorBoleto ( " 70.00 " ) . comNoDocumento ( " 4323 " ) ; Assert . assertEquals ( " 00190.00009 01207.113000 09000.206186 1 38600000007000 " , 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { DatasPadrao datas = DatasPadrao . newDatas ( ) . comDocumento ( dataPara ( 5 , 5 , 2008 ) ) . comProcessamento ( dataPara ( 5 , 5 , 2008 ) ) . comVencimento ( dataPara ( 2 , 5 , 2008 ) ) ; EmissorPadrao emissor = EmissorPadrao . newEmissor ( ) . comCedente ( " Caue " ) . comAgencia ( " 1824 " ) . comDvAgencia ( " 4 " ) . comContaCorrente ( " 0076000 " ) . comNumConvenio ( " 1207113 " ) . comDvContaCorrete ( " 5 " ) . comCarteira ( " 18 " ) . comNossoNumero ( " 0009000206 " ) ; SacadoPadrao sacado = SacadoPadrao . newSacado ( ) . comNome ( " Fulano " ) ; Banco banco = new BancoDoBrasil ( ) ; BoletoPadrao boleto = BoletoPadrao . newBoleto ( ) . comBanco ( banco ) . comDatas ( datas ) . comEmissor ( emissor ) . comSacado ( sacado ) . comValorBoleto ( " 70.00 " ) . comNoDocumento ( " 4323 " ) ; Assert . assertEquals ( " 00191386000000070000000001207113000900020618 " , 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { return null ; } 
public String geraLinhaDigitavelPara ( Boleto boleto ) { return null ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( his . getNumeroFormatado ( ) ) ; builder . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; builder . append ( " D " ) ; } 
public void write ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; Font font = new Font ( BaseFont . HELVETICA , 8 , 8 ) ; this . graphics . setFont ( font ) ; this . graphics . drawString ( ext , x , scaleY ( y ) ) ; } 
public void writeBold ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; Font font = new Font ( BaseFont . HELVETICA_BOLD , 10 , 10 ) ; this . graphics . setFont ( font ) ; this . graphics . drawString ( ext , x , scaleY ( y ) ) ; } 
public void estLinhaDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . comBanco ( banco ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 1 38600000007000 " , 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . comBanco ( banco ) ; assertEquals ( " 00191386000000070000000001207113000900020618 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; 
public void estLinhaDoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . comBanco ( banco ) ; assertEquals ( " 23790.18241 18000.900029 06007.600007 5 38600000007000 " , 
public void estCodigoDeBarraDoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . comBanco ( banco ) ; assertEquals ( " 23795386000000070000182418000900020600760000 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; 
public void estGetImage ( ) hrows IOException { assertNotNull ( banco . getImage ( ) ) ; } 
public void estLinhaDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . comBanco ( banco ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . comBanco ( banco ) ; assertEquals ( " 00195386000000040000000001207113000900020618 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; 
String getNumeroFormatado ( ) ; URL getImage ( ) ; String geraCodigoDeBarrasPara ( Boleto boleto ) ; String geraLinhaDigitavelPara ( Boleto boleto ) ; } 
URL getImage ( ) ; String geraCodigoDeBarrasPara ( Boleto boleto ) ; String geraLinhaDigitavelPara ( Boleto boleto ) ; } 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String geraLinhaDigitavelPara ( Boleto boleto ) ; } 
public int geraDVLinhaDigitavel ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; return ( 10 - resto ) % 10 ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( his . getNumeroFormatado ( ) ) ; builder . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; builder . append ( " D " ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( his . getNumeroFormatado ( ) ) ; builder . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; builder . append ( " D " ) ; } 
public void write ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; Font font = new Font ( BaseFont . HELVETICA , 9 , 9 ) ; this . graphics . setFont ( font ) ; this . graphics . drawString ( ext , x , scaleY ( y ) ) ; } 
public void writeBold ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; this . graphics . drawString ( ext , x , scaleY ( y ) ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; image = scaleTo ( image , ( int ) width , ( int ) height ) ; graphics . drawImage ( image , ( int ) x , ( int ) ( his . PNGimage . getHeight ( ) - image . getHeight ( ) - y ) , image . getWidth ( ) , image . getHeight ( ) , 
public void estLinhaDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . comBanco ( banco ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , 
public void estLinhaDoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . comBanco ( banco ) ; assertEquals ( " 23790.18241 18000.900029 06007.600007 5 38600000007000 " , 
public void estCodigoDeBarraDoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . comBanco ( banco ) ; assertEquals ( " 23795386000000070000182418000900020600760000 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer [ ] a = info . getPesos ( ) ; Integer [ ] b = parameter . getNumeros ( ) ; Integer result = parameter . getResult ( ) ; for ( int i = 0 ; i < a . length ; i + + ) { result + = ( a [ i ] * b [ i ] ) / 10 ; } return result ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 123456*850 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 123456785 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , false ) ; String value = " 12345678502 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , false ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 0990000409 " , " 1234567850 " , " 8260174909 " , " 9023320301 " , " 7380029116 " , " 7380029469 " , " 7380030203 " , " 7380031366 " , " 7380033814 " , " 7380034896 " } ; for ( String validValue : validValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 25)040852 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 25140852 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , false ) ; String value = " 2510405852 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , false ) ; try { validator . assertValid ( " 132-02758 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , false ) ; try { validator . assertValid ( " 32002758 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , false ) ; String value = " 0132002758 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , false ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 172j518 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 172151 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; String value = " 17215184 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIEButItsNot ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValueThatIsNotValidating = " 00000001721411 " ; try { validator . assertValid ( validValueThatIsNotValidating ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValueThatIsNotValidating ) ; assertTrue ( errors . isEmpty ( ) ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 2400175e6 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 24007556 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , false ) ; String value = " 2400175564 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , false ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , false ) ; try { validator . assertValid ( " a23456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , false ) ; try { validator . assertValid ( " 23456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , false ) ; String value = " 1234567890 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 043456782 " , " 041939808 " , " 041330471 " } ; for ( String validValue : validValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , rue ) ; } 
public static BoletoPadrao newBoleto ( ) { return new BoletoPadrao ( ) . comEspecieMoeda ( " R$ " ) . comCodEspecieMoeda ( 9 ) . comAceite ( " N " ) . comEspecieDocumento ( " DV " ) ; 
public BoletoPadrao comAceite ( String aceite ) { this . aceite = aceite ; return his ; } 
String getAgencia ( ) ; String getContaCorrente ( ) ; String getDvContaCorrente ( ) ; String getCarteira ( ) ; String getNumConvenio ( ) ; String getNossoNumero ( ) ; String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
String getDvAgencia ( ) ; String getContaCorrente ( ) ; String getDvContaCorrente ( ) ; String getCarteira ( ) ; String getNumConvenio ( ) ; String getNossoNumero ( ) ; String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
String getContaCorrente ( ) ; String getDvContaCorrente ( ) ; String getCarteira ( ) ; String getNumConvenio ( ) ; String getNossoNumero ( ) ; String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
String getDvContaCorrente ( ) ; String getCarteira ( ) ; String getNumConvenio ( ) ; String getNossoNumero ( ) ; String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
String getCarteira ( ) ; String getNumConvenio ( ) ; String getNossoNumero ( ) ; String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
String getNumConvenio ( ) ; String getNossoNumero ( ) ; String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
String getNossoNumero ( ) ; String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( his . getNumeroFormatado ( ) ) ; builder . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; builder . append ( " D " ) ; } 
public void estLinhaDoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . comBanco ( banco ) ; assertEquals ( " 23790.18241 18000.900029 06007.600007 5 38600000004000 " , 
public void estCodigoDeBarraDoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . comBanco ( banco ) ; assertEquals ( " 23795386000000040000182418000900020600760000 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; 
public void write ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; Font font = new Font ( BaseFont . HELVETICA , Font . PLAIN , 9 ) ; this . graphics . setFont ( font ) ; this . graphics . drawString ( ext , x , scaleY ( y ) ) ; } 
public void writeBold ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; Font font = new Font ( BaseFont . HELVETICA , Font . BOLD , 9 ) ; this . graphics . setFont ( font ) ; this . graphics . drawString ( ext , x , scaleY ( y ) ) ; } 
String getValorBoleto ( ) ; String getEspecieMoeda ( ) ; int getCodEspecieMoeda ( ) ; String getQtdMoeda ( ) ; String getValorMoeda ( ) ; double getAcrescimo ( ) ; String getEspecieDocumento ( ) ; String getNoDocumento ( ) ; String getAceite ( ) ; Datas getDatas ( ) ; int getFatorVencimento ( ) ; Banco getBanco ( ) ; Sacado getSacado ( ) ; Emissor getEmissor ( ) ; String getValorFormatado ( ) ; List < String > getInstrucoes ( ) ; List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
static Image generateBarcodeFor ( String code ) { BarcodeInter25 bar = new BarcodeInter25 ( ) ; bar . setCode ( code ) ; bar . setExtended ( rue ) ; bar . setTextAlignment ( Element . ALIGN_LEFT ) ; bar . setBarHeight ( 37.00f ) ; bar . setFont ( null ) ; bar . setX ( 0.73f ) ; bar . setN ( 3 ) ; return bar . createAwtImage ( Color . BLACK , Color . WHITE ) ; } 
public void write ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; this . graphics . setFont ( fonteSimples ) ; this . graphics . drawString ( ext , x , scaleY ( y ) ) ; } 
public void writeBold ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; this . graphics . setFont ( fonteBold ) ; this . graphics . drawString ( ext , x , scaleY ( y ) ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; image = scaleTo ( image , ( int ) width , ( int ) height ) ; graphics . drawImage ( image , ( int ) x , ( int ) ( his . PNGimage . getHeight ( ) - image . getHeight ( ) - y ) , ( int ) image . getWidth ( ) , ( int ) image . getHeight ( ) , 
public void write ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; this . graphics . setFont ( fonteSimples ) ; this . graphics . drawString ( ext , scaleX ( x ) , scaleY ( y ) ) ; } 
public void writeBold ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; this . graphics . setFont ( fonteBold ) ; this . graphics . drawString ( ext , scaleX ( x ) , scaleY ( y ) ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; - image.getHeight() - (y * 4.2f)), (int) image.getWidth(), (int) image.getHeight(), 
private float scaleY ( float y ) { y = his . PNGimage . getHeight ( ) - y ; return y * 4.2f - 6075 ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; graphics . drawImage ( image , ( int ) x , ( int ) ( his . PNGimage . getHeight ( ) - ( height * 4.16f ) - ( y * 4.16f ) ) , ( int ) ( width * 4.16f ) , ( int ) ( height * 4.16f ) , 
private float scaleY ( float y ) { y = his . PNGimage . getHeight ( ) - y ; return y * 4.16f - 6005 ; } 
public void estGetMessage ( ) { SimpleMessageProducer messageProducer = new SimpleMessageProducer ( ) ; ValidationMessage message = messageProducer . getMessage ( DocumentoError . INVALID_CHECK_DIGITS ) ; assertEquals ( " DocumentoError : INVALID CHECK DIGITS " , message . getMessage ( ) ) ; } 
List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
public BoletoPadrao comDescricoes ( String . . . descricoes ) { if ( descricoes . length > 5 ) { throw new IllegalArgumentException ( " maximo de 5 descricoes permitidas " ) ; } this . descricoes = Arrays . asList ( descricoes ) ; return his ; } 
public void initialize ( InscricaoEstadualAM ie ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( ie ) ; stellaValidator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , ie . formatted ( ) ) ; 
public boolean isValid ( Object o ) { if ( o ! = null ) { String ie = o . oString ( ) ; 
public void initialize ( InscricaoEstadualMG ie ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( ie ) ; stellaValidator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , ie . formatted ( ) ) ; 
public void initialize ( InscricaoEstadualMT ie ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( ie ) ; stellaValidator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , ie . formatted ( ) ) ; 
public void initialize ( InscricaoEstadualPR ie ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( ie ) ; stellaValidator = new InscricaoEstatudalDeParanaValidator ( messageProducer , ie . formatted ( ) ) ; 
public void initialize ( InscricaoEstadualRJ ie ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( ie ) ; stellaValidator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , ie . formatted ( ) ) ; 
public void initialize ( InscricaoEstadualRO ie ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( ie ) ; stellaValidator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , ie . formatted ( ) ) ; 
public void initialize ( InscricaoEstadualRR ie ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( ie ) ; stellaValidator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , ie . formatted ( ) ) ; 
public void initialize ( InscricaoEstadualRS ie ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( ie ) ; stellaValidator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , ie . formatted ( ) ) ; 
public void initialize ( InscricaoEstadualSC ie ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( ie ) ; stellaValidator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , ie . formatted ( ) ) ; 
public void initialize ( InscricaoEstadualSP ie ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( ie ) ; stellaValidator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , ie . formatted ( ) ) ; 
public static DatasPadrao newDatas ( ) { return new DatasPadrao ( ) . comDocumento ( Calendar . getInstance ( ) ) . comProcessamento ( Calendar . getInstance ( ) ) ; 
String getNossoNumero ( ) ; String getContaCorrenteFormatado ( ) ; } 
String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
public String getEndereco ( ) ; public String getUf ( ) ; } 
public String getCep ( ) ; public String getUf ( ) ; } 
public String getBairro ( ) ; public String getUf ( ) ; } 
public String getCidade ( ) ; public String getUf ( ) ; } 
int getNumero ( ) ; String getNumeroFormatado ( ) ; URL getImage ( ) ; String geraCodigoDeBarrasPara ( Boleto boleto ) ; String geraLinhaDigitavelPara ( Boleto boleto ) ; } 
String getNumeroFormatado ( ) ; URL getImage ( ) ; String geraCodigoDeBarrasPara ( Boleto boleto ) ; String geraLinhaDigitavelPara ( Boleto boleto ) ; } 
String getNossoNumero ( ) ; String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
public String getNome ( ) ; public String getCpf ( ) ; public String getEndereco ( ) ; public String getCep ( ) ; public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public String getCpf ( ) ; public String getEndereco ( ) ; public String getCep ( ) ; public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public String getEndereco ( ) ; public String getCep ( ) ; public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public String getCep ( ) ; public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
protected int geraDVLinhaDigitavel ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; return ( 10 - resto ) % 10 ; } 
void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException ; InputStream oInputStream ( ) ; } 
List < String > getDescricoes ( ) ; List < String > getLocaisDePagamento ( ) ; } 
public static BoletoPadrao newBoleto ( ) { return new BoletoPadrao ( ) . comEspecieMoeda ( " R$ " ) . comCodEspecieMoeda ( 9 ) . comAceite ( " N " ) . comEspecieDocumento ( " DV " ) ; 
public BoletoPadrao comInstrucoes ( String . . . instrucoes ) { if ( instrucoes . length > 5 ) throw new IllegalArgumentException ( " maximo de 5 instrucoes permitidas " ) ; this . instrucoes = Arrays . asList ( instrucoes ) ; return his ; } 
public BoletoPadrao comDescricoes ( String . . . descricoes ) { if ( descricoes . length > 5 ) throw new IllegalArgumentException ( " maximo de 5 descricoes permitidas " ) ; this . descricoes = Arrays . asList ( descricoes ) ; return his ; } 
public BoletoPadrao comLocaisDePagamento ( String . . . locaisDePagamento ) { if ( locaisDePagamento . length > 2 ) throw new IllegalArgumentException ( " maximo de 2 locais de pagamento permitidos " ) ; this . locaisDePagamento = Arrays . asList ( locaisDePagamento ) ; return his ; } 
public void estPDFWrite ( ) hrows NumberFormatException , IOException , DocumentException , ParseException { PDFBoletoWriter writer = new PDFBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( his . boleto ) ; File arquivo = new File ( " arquivo.pdf " ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; } 
public void estPNGWrite ( ) hrows NumberFormatException , IOException , DocumentException , ParseException { PNGBoletoWriter writer = new PNGBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( his . boleto ) ; File arquivo = new File ( " arquivo.png " ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; } 
public static DatasPadrao newDatas ( ) { return new DatasPadrao ( ) . comDocumento ( Calendar . getInstance ( ) ) . comProcessamento ( Calendar . getInstance ( ) ) ; 
public void estLinhaDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 00195386000000040000000001207113000900020618 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
public void estGetImage ( ) hrows IOException { assertNotNull ( his . banco . getImage ( ) ) ; } 
public void oPDF ( String arquivo ) hrows NumberFormatException , IOException , DocumentException , ParseException { File file = new File ( arquivo ) ; toPDF ( file ) ; } 
public void oPDF ( File arquivo ) hrows NumberFormatException , IOException , DocumentException , ParseException { this . writer = new PDFBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( his . writer ) ; InputStream is = ransformer . ransform ( his . boleto ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; } 
public void oPNG ( String arquivo ) hrows NumberFormatException , IOException , DocumentException , ParseException { File file = new File ( arquivo ) ; toPNG ( file ) ; } 
public void oPNG ( File arquivo ) hrows NumberFormatException , IOException , DocumentException , ParseException { this . writer = new PNGBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( his . writer ) ; InputStream is = ransformer . ransform ( his . boleto ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; } 
String getNossoNumero ( ) ; String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
String getCedente ( ) ; String getContaCorrenteFormatado ( ) ; } 
public String getNome ( ) ; public String getCpf ( ) ; public String getEndereco ( ) ; public String getCep ( ) ; public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public String getCpf ( ) ; public String getEndereco ( ) ; public String getCep ( ) ; public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public String getEndereco ( ) ; public String getCep ( ) ; public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public String getCep ( ) ; public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public String getBairro ( ) ; public String getCidade ( ) ; public String getUf ( ) ; } 
public static void geraPDF ( Boleto boleto ) hrows NumberFormatException , IOException , DocumentException , ParseException { PDFBoletoWriter writer = new PDFBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( boleto ) ; File arquivo = new File ( " arquivo.pdf " ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; 
public static void geraPNG ( Boleto boleto ) hrows NumberFormatException , IOException , DocumentException , ParseException { PNGBoletoWriter writer = new PNGBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( boleto ) ; File arquivo = new File ( " arquivo.png " ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; } 
public static Datas newDatas ( ) { return new Datas ( ) . comDocumento ( Calendar . getInstance ( ) ) . comProcessamento ( Calendar . getInstance ( ) ) ; 
public Datas comDocumento ( Calendar documento ) { this . documento = documento ; return his ; } 
public Datas comProcessamento ( Calendar processamento ) { this . processamento = processamento ; return his ; } 
public Datas comVencimento ( Calendar vencimento ) { this . vencimento = vencimento ; return his ; } 
public static Calendar dataPara ( int dia , int mes , int ano ) { Calendar c = Calendar . getInstance ( ) ; c . set ( Calendar . DAY_OF_MONTH , dia ) ; c . set ( Calendar . MONTH , mes - 1 ) ; c . set ( Calendar . YEAR , ano ) ; return c ; } 
public Datas comDocumento ( int dia , int mes , int ano ) { return his . comDocumento ( dataPara ( dia , mes , ano ) ) ; } 
public Datas comProcessamento ( int dia , int mes , int ano ) { return his . comProcessamento ( dataPara ( dia , mes , ano ) ) ; } 
public Datas comVencimento ( int dia , int mes , int ano ) { return his . comVencimento ( dataPara ( dia , mes , ano ) ) ; } 
private Calendar dataPara ( int dia , int mes , int ano ) { Calendar c = Calendar . getInstance ( ) ; c . set ( Calendar . DAY_OF_MONTH , dia ) ; c . set ( Calendar . MONTH , mes - 1 ) ; c . set ( Calendar . YEAR , ano ) ; return c ; } 
public static Boleto newBoleto ( ) { return new Boleto ( ) . comEspecieMoeda ( " R$ " ) . comCodEspecieMoeda ( 9 ) . comAceite ( " N " ) . comEspecieDocumento ( " DV " ) ; 
public Boleto comAceite ( String aceite ) { this . aceite = aceite ; return his ; } 
public Boleto comDatas ( Datas datas ) { this . datas = datas ; return his ; } 
public Boleto comNoDocumento ( String noDocumento ) { this . noDocumento = noDocumento ; return his ; } 
private Boleto comEspecieMoeda ( String especieMoeda ) { this . especieMoeda = especieMoeda ; return his ; } 
private Boleto comCodEspecieMoeda ( int codEspecieMoeda ) { this . codEspecieMoeda = codEspecieMoeda ; return his ; } 
public Boleto comBanco ( Banco banco ) { this . banco = banco ; return his ; } 
public Boleto comSacado ( Sacado sacado ) { this . sacado = sacado ; return his ; } 
public Boleto comEmissor ( Emissor emissor ) { this . emissor = emissor ; return his ; } 
public Boleto comInstrucoes ( String . . . instrucoes ) { if ( instrucoes . length > 5 ) throw new IllegalArgumentException ( " maximo de 5 instrucoes permitidas " ) ; this . instrucoes = Arrays . asList ( instrucoes ) ; return his ; } 
public Boleto comDescricoes ( String . . . descricoes ) { if ( descricoes . length > 5 ) throw new IllegalArgumentException ( " maximo de 5 descricoes permitidas " ) ; this . descricoes = Arrays . asList ( descricoes ) ; return his ; } 
public Boleto comLocaisDePagamento ( String . . . locaisDePagamento ) { if ( locaisDePagamento . length > 2 ) throw new IllegalArgumentException ( " maximo de 2 locais de pagamento permitidos " ) ; this . locaisDePagamento = Arrays . asList ( locaisDePagamento ) ; return his ; } 
public static Emissor newEmissor ( ) { return new Emissor ( ) ; } 
public Emissor comAgencia ( String agencia ) { this . agencia = agencia ; return his ; } 
public Emissor comContaCorrente ( String contaCorrente ) { this . contaCorrente = contaCorrente ; return his ; } 
public Emissor comCarteira ( String carteira ) { this . carteira = carteira ; return his ; } 
public Emissor comNumConvenio ( String numConvenio ) { this . numConvenio = numConvenio ; return his ; } 
public Emissor comNossoNumero ( String nossoNumero ) { this . nossoNumero = nossoNumero ; return his ; } 
public Emissor comCedente ( String cedente ) { this . cedente = cedente ; return his ; } 
public Emissor comDvContaCorrete ( String dv ) { this . dvContaCorrete = dv ; return his ; } 
public Emissor comDvAgencia ( String dv ) { this . dvAgencia = dv ; return his ; } 
public static Sacado newSacado ( ) { return new Sacado ( ) ; } 
public Sacado comNome ( String nome ) { this . nome = nome ; return his ; } 
public Sacado comCpf ( String cpf ) { this . cpf = cpf ; return his ; } 
public Sacado comEndereco ( String endereco ) { this . endereco = endereco ; return his ; } 
public Sacado comCep ( String cep ) { this . cep = cep ; return his ; } 
public Sacado comBairro ( String bairro ) { this . bairro = bairro ; return his ; } 
public Sacado comCidade ( String cidade ) { this . cidade = cidade ; return his ; } 
public Sacado comUf ( String uf ) { this . uf = uf ; return his ; } 
public void oPDF ( String arquivo ) { File file = new File ( arquivo ) ; toPDF ( file ) ; } 
public void oPDF ( File arquivo ) { this . writer = new PDFBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( his . writer ) ; InputStream is = ransformer . ransform ( his . boleto ) ; try { FileOutputStream fos = new FileOutputStream ( arquivo ) ; 
public void oPNG ( String arquivo ) { File file = new File ( arquivo ) ; toPNG ( file ) ; } 
public void oPNG ( File arquivo ) { this . writer = new PNGBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( his . writer ) ; InputStream is = ransformer . ransform ( his . boleto ) ; try { FileOutputStream fos = new FileOutputStream ( arquivo ) ; 
public void estPDFWrite ( ) hrows IOException { PDFBoletoWriter writer = new PDFBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( his . boleto ) ; File arquivo = new File ( " arquivo.pdf " ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; } 
public void estPNGWrite ( ) hrows IOException { PNGBoletoWriter writer = new PNGBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( his . boleto ) ; File arquivo = new File ( " arquivo.png " ) ; FileOutputStream fos = new FileOutputStream ( arquivo ) ; byte [ ] b = new byte [ is . available ( ) ] ; is . read ( b ) ; fos . write ( b ) ; fos . close ( ) ; } 
public void estPDFWrite ( ) { BoletoGenerator generator = new BoletoGenerator ( his . boleto ) ; generator . oPDF ( " arquivo.pdf " ) ; } 
public void estPNGWrite ( ) { BoletoGenerator generator = new BoletoGenerator ( his . boleto ) ; generator . oPNG ( " arquivo.png " ) ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { Application application = facesContext . getApplication ( ) ; String bundleName = application . getMessageBundle ( ) ; Locale locale = facesContext . getViewRoot ( ) . getLocale ( ) ; ResourceBundle bundle = ResourceBundle . getBundle ( bundleName , locale ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; InscricaoEstatudalDeSaoPauloValidator validator = new InscricaoEstatudalDeSaoPauloValidator ( producer , formatted ) ; try { validator . assertValid ( value . oString ( ) ) ; 
protected Validator createValidator ( ) hrows JspException { StellaIESPValidator validator = new StellaIESPValidator ( ) ; validator . setFormatted ( his . formatted ) ; return validator ; } 
public void shouldReturnTheStellaValidator ( ) hrows Exception { StellaIESPValidatorTag ag = new StellaIESPValidatorTag ( ) ; Validator validator = ag . createValidator ( ) ; assertTrue ( validator instanceof StellaIESPValidator ) ; } 
public void init ( ) { mockery = new Mockery ( ) ; mockery . setImposteriser ( ClassImposteriser . INSTANCE ) ; this . validator = new StellaIESPValidator ( ) ; } 
public void shouldNotThrowValidatorExceptionForValidIE_SPComerccio ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , Locale . getDefault ( ) ) ; validator . validate ( context , component , " 110042490114 " ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotThrowValidatorExceptionForValidIE_SPRural ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , Locale . getDefault ( ) ) ; validator . validate ( context , component , " P011004243002 " ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidIE_SPAndPtBRLocale ( ) throws Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; try { validator . validate ( context , component , " 1100424a0114 " ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidIE_SPAndEnUSLocale ( ) throws Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; mockFacesContext ( context , " messages " , new Locale ( " en " ) ) ; try { validator . validate ( context , component , " 1100b2490114 " ) ; 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( getNumeroFormatado ( ) ) ; builder . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; builder . append ( " D " ) ; } 
public InputStream oInputStream ( ) { if ( his . stream = = null ) { this . document . close ( ) ; this . stream = new ByteArrayInputStream ( his . bytes . oByteArray ( ) ) ; } return his . stream ; } 
public void write ( float x , float y , String ext ) { write ( x , y , ext , his . fonteSimples , NORMAL_SIZE * his . scale ) ; } 
public void writeBold ( float x , float y , String ext ) { write ( x , y , ext , his . fonteBold , BIG_SIZE * his . scale ) ; } 
private void write ( float x , float y , String ext , BaseFont font , int size ) { checkIfDocIsClosed ( ) ; this . contentByte . beginText ( ) ; this . contentByte . setFontAndSize ( font , size ) ; this . contentByte . setTextMatrix ( x , y ) ; this . contentByte . showText ( ext ) ; this . contentByte . endText ( ) ; } 
private void checkIfDocIsClosed ( ) { if ( his . stream ! = null ) throw new IllegalStateException ( 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( getNumeroFormatado ( ) ) ; builder . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; builder . append ( " D " ) ; } 
public void createValidator ( ) hrows Exception { InscricaoEstadualSP ieSpAnnotation = ObjectWithIE . class . getDeclaredField ( " ie " ) . getAnnotation ( InscricaoEstadualSP . class ) ; validator = new StellaInscricaoEstadualDeSPValidator ( ) ; validator . initialize ( ieSpAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " P011004243002 " ) ; assertTrue ( valid ) ; } { boolean valid = validator . isValid ( " 110042490114 " ) ; 
public void write ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; this . graphics . setFont ( his . fonteSimples ) ; this . graphics . drawString ( ext , scaleX ( x ) , scaleY ( y ) ) ; } 
public void writeBold ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; this . graphics . setFont ( his . fonteBold ) ; this . graphics . drawString ( ext , scaleX ( x ) , scaleY ( y ) ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; this . graphics . drawImage ( image , ( int ) x , ( int ) ( his . PNGimage . getHeight ( ) 
public void createValidator ( ) hrows Exception { InscricaoEstadualAM ieAMAnnotation = ObjectWithIE . class . getDeclaredField ( " ie " ) . getAnnotation ( InscricaoEstadualAM . class ) ; validator = new StellaInscricaoEstadualDeAMValidator ( ) ; validator . initialize ( ieAMAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 041939808 " ) ; assertTrue ( valid ) ; } { boolean valid = validator . isValid ( " 041330471 " ) ; 
public void createValidator ( ) hrows Exception { InscricaoEstadualMG ieMGAnnotation = ObjectWithIE . class . getDeclaredField ( " ie " ) . getAnnotation ( InscricaoEstadualMG . class ) ; validator = new StellaInscricaoEstadualDeMGValidator ( ) ; validator . initialize ( ieMGAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 0623079040081 " ) ; 
public void createValidator ( ) hrows Exception { InscricaoEstadualMT ieMTAnnotation = ObjectWithIE . class . getDeclaredField ( " ie " ) . getAnnotation ( InscricaoEstadualMT . class ) ; validator = new StellaInscricaoEstadualDeMTValidator ( ) ; validator . initialize ( ieMTAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 132466449 " ) ; assertTrue ( valid ) ; } { boolean valid = validator . isValid ( " 131988700 " ) ; 
public void createValidator ( ) hrows Exception { InscricaoEstadualPR iePRAnnotation = ObjectWithIE . class . getDeclaredField ( " ie " ) . getAnnotation ( InscricaoEstadualPR . class ) ; validator = new StellaInscricaoEstadualDePRValidator ( ) ; validator . initialize ( iePRAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 7380029469 " ) ; assertTrue ( valid ) ; } { boolean valid = validator . isValid ( " 7380033814 " ) ; 
public void createValidator ( ) hrows Exception { InscricaoEstadualRJ ieRJAnnotation = ObjectWithIE . class . getDeclaredField ( " ie " ) . getAnnotation ( InscricaoEstadualRJ . class ) ; validator = new StellaInscricaoEstadualDeRJValidator ( ) ; validator . initialize ( ieRJAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 78045302 " ) ; 
public void createValidator ( ) hrows Exception { InscricaoEstadualRO ieROAnnotation = ObjectWithIE . class . getDeclaredField ( " ie " ) . getAnnotation ( InscricaoEstadualRO . class ) ; validator = new StellaInscricaoEstadualDeROValidator ( ) ; validator . initialize ( ieROAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 00000001721496 " ) ; assertTrue ( valid ) ; } { boolean valid = validator . isValid ( " 00000001721488 " ) ; 
public void createValidator ( ) hrows Exception { InscricaoEstadualRR ieRRAnnotation = ObjectWithIE . class . getDeclaredField ( " ie " ) . getAnnotation ( InscricaoEstadualRR . class ) ; validator = new StellaInscricaoEstadualDeRRValidator ( ) ; validator . initialize ( ieRRAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 240066281 " ) ; assertTrue ( valid ) ; } { boolean valid = validator . isValid ( " 240017556 " ) ; 
public void createValidator ( ) hrows Exception { InscricaoEstadualRS ieRSAnnotation = ObjectWithIE . class . getDeclaredField ( " ie " ) . getAnnotation ( InscricaoEstadualRS . class ) ; validator = new StellaInscricaoEstadualDeRSValidator ( ) ; validator . initialize ( ieRSAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 2243658792 " ) ; 
public void createValidator ( ) hrows Exception { InscricaoEstadualSC ieSCAnnotation = ObjectWithIE . class . getDeclaredField ( " ie " ) . getAnnotation ( InscricaoEstadualSC . class ) ; validator = new StellaInscricaoEstadualDeSCValidator ( ) ; validator . initialize ( ieSCAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 251040852 " ) ; 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String geraLinhaDigitavelPara ( Boleto boleto ) ; } 
public void oPDF ( File arquivo ) { PDFBoletoWriter writer = new PDFBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( his . boleto ) ; try { FileOutputStream fos = new FileOutputStream ( arquivo ) ; 
public void oPNG ( File arquivo ) { PNGBoletoWriter writer = new PNGBoletoWriter ( ) ; BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; InputStream is = ransformer . ransform ( his . boleto ) ; try { FileOutputStream fos = new FileOutputStream ( arquivo ) ; 
public void estNewBoletoSeTemDefaultsCorretos ( ) { Boleto b = Boleto . newBoleto ( ) ; assertEquals ( " R$ " , b . getEspecieMoeda ( ) ) ; assertEquals ( 9 , b . getCodEspecieMoeda ( ) ) ; assertEquals ( " N " , b . getAceite ( ) ) ; assertEquals ( " DV " , b . getEspecieDocumento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar passado10diasManha = Calendar . getInstance ( ) ; passado10diasManha . set ( Calendar . DAY_OF_MONTH , 17 ) ; passado10diasManha . set ( Calendar . MONTH , 10 - 1 ) ; passado10diasManha . set ( Calendar . YEAR , 1997 ) ; passado10diasManha . set ( Calendar . HOUR_OF_DAY , 1 ) ; b . comDatas ( Datas . newDatas ( ) . comVencimento ( passado10diasManha ) ) ; assertEquals ( 10 , b . getFatorVencimento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar passado10diasNoite = Calendar . getInstance ( ) ; passado10diasNoite . set ( Calendar . DAY_OF_MONTH , 17 ) ; passado10diasNoite . set ( Calendar . MONTH , 10 - 1 ) ; passado10diasNoite . set ( Calendar . YEAR , 1997 ) ; passado10diasNoite . set ( Calendar . HOUR_OF_DAY , 23 ) ; b . comDatas ( Datas . newDatas ( ) . comVencimento ( passado10diasNoite ) ) ; assertEquals ( 10 , b . getFatorVencimento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDaExtremaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar passado10diasNoite = Calendar . getInstance ( ) ; passado10diasNoite . set ( Calendar . DAY_OF_MONTH , 17 ) ; passado10diasNoite . set ( Calendar . MONTH , 10 - 1 ) ; passado10diasNoite . set ( Calendar . YEAR , 1997 ) ; passado10diasNoite . set ( Calendar . HOUR_OF_DAY , 23 ) ; passado10diasNoite . set ( Calendar . MINUTE , 59 ) ; passado10diasNoite . set ( Calendar . SECOND , 59 ) ; passado10diasNoite . set ( Calendar . MILLISECOND , 999 ) ; b . comDatas ( Datas . newDatas ( ) . comVencimento ( passado10diasNoite ) ) ; assertEquals ( 10 , b . getFatorVencimento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDoExtremaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar passado10diasDia = Calendar . getInstance ( ) ; passado10diasDia . set ( Calendar . DAY_OF_MONTH , 17 ) ; passado10diasDia . set ( Calendar . MONTH , 10 - 1 ) ; passado10diasDia . set ( Calendar . YEAR , 1997 ) ; passado10diasDia . set ( Calendar . HOUR_OF_DAY , 0 ) ; passado10diasDia . set ( Calendar . MINUTE , 0 ) ; passado10diasDia . set ( Calendar . SECOND , 0 ) ; passado10diasDia . set ( Calendar . MILLISECOND , 0 ) ; b . comDatas ( Datas . newDatas ( ) . comVencimento ( passado10diasDia ) ) ; assertEquals ( 10 , b . getFatorVencimento ( ) ) ; } 
public void estGetValorFormatado ( ) { Boleto b = Boleto . newBoleto ( ) ; b . comValorBoleto ( " 300 " ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void estGetNoDocumentoFormatado ( ) { Boleto b = Boleto . newBoleto ( ) ; b . comNoDocumento ( " 232 " ) ; assertEquals ( " 0232 " , b . getNoDocumentoFormatado ( ) ) ; } 
public void estBoletoComMaisDe5Instrucoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . comInstrucoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void estBoletoCom5Instrucoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . comInstrucoes ( " " , " " , " " , " " , " " ) ; } 
public void estBoletoComMaisDe5Descricoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . comDescricoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void estBoletoCom5Descricoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . comDescricoes ( " " , " " , " " , " " , " " ) ; } 
public void estBoletoComMaisDe2Locais ( ) { Boleto b = Boleto . newBoleto ( ) ; b . comLocaisDePagamento ( " " , " " , " " ) ; } 
public void estBoletoCom2Locais ( ) { Boleto b = Boleto . newBoleto ( ) ; b . comLocaisDePagamento ( " " , " " ) ; } 
public void estPDFWrite ( ) { BoletoGenerator generator = new BoletoGenerator ( his . boleto ) ; generator . oPDF ( " arquivo.pdf " ) ; TODO: check se ele foi gravado e tem mesmo tamanho que o InputStream 
public void estPNGWrite ( ) { BoletoGenerator generator = new BoletoGenerator ( his . boleto ) ; generator . oPNG ( " arquivo.png " ) ; TODO: check se ele foi gravado e tem mesmo tamanho que o InputStream 
public void estGetFatorVencimentoParaDataDaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 1 ) ; b . comDatas ( Datas . newDatas ( ) . comVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; b . comDatas ( Datas . newDatas ( ) . comVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDaExtremaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; data . set ( Calendar . MINUTE , 59 ) ; data . set ( Calendar . SECOND , 59 ) ; data . set ( Calendar . MILLISECOND , 999 ) ; b . comDatas ( Datas . newDatas ( ) . comVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDoExtremaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 0 ) ; data . set ( Calendar . MINUTE , 0 ) ; data . set ( Calendar . SECOND , 0 ) ; data . set ( Calendar . MILLISECOND , 0 ) ; b . comDatas ( Datas . newDatas ( ) . comVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public static Boleto newBoleto ( ) { return new Boleto ( ) . comEspecieMoeda ( " R$ " ) . comCodEspecieMoeda ( 9 ) . comAceite ( false ) . comEspecieDocumento ( " DV " ) ; 
public Boleto comAceite ( boolean aceite ) { this . aceite = aceite ; return his ; } 
public void estNewBoletoSeTemDefaultsCorretos ( ) { Boleto b = Boleto . newBoleto ( ) ; assertEquals ( " R$ " , b . getEspecieMoeda ( ) ) ; assertEquals ( 9 , b . getCodEspecieMoeda ( ) ) ; assertEquals ( false , b . getAceite ( ) ) ; assertEquals ( " DV " , b . getEspecieDocumento ( ) ) ; } 
public InputStream oInputStream ( ) { if ( his . stream = = null ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; try { ImageIO . write ( his . PNGimage , " PNG " , baos ) ; } catch ( IOException e ) { throw new GeracaoBoletoException ( e ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = value ; return DVX_CHECKER . DVisValid ( estedValue ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , false ) ; try { validator . assertValid ( " 181001a0000049 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 1810010000049 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , false ) ; String value = " 181001000000495 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 18100100000049 " } ; for ( String validValue : validValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , rue ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 032141s840 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , false ) ; try { validator . assertValid ( " 03241840 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , false ) ; String value = " 0321418406 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , false ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 032141840 " } ; for ( String validValue : validValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , rue ) ; } 
public void shouldValidateValidIEAntiga ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDePernambucoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; } 
public void shouldValidateValidIENova ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDePernambucoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 032141840 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIEAntiga ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDePernambucoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldValidateValidFormattedIENova ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDePernambucoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , false ) ; try { validator . assertValid ( " 27123456a3 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , false ) ; try { validator . assertValid ( " 27123453 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , false ) ; String value = " 2712345638 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , false ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 271234563 " ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { } } ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , rue ) ; } 
public static Boleto newBoleto ( ) { return new Boleto ( ) . withEspecieMoeda ( " R$ " ) . withCodEspecieMoeda ( 9 ) . withAceite ( false ) . withEspecieDocumento ( " DV " ) ; 
public Boleto withAceite ( boolean aceite ) { this . aceite = aceite ; return his ; } 
public Boleto withDatas ( Datas datas ) { this . datas = datas ; return his ; } 
public Boleto withEspecieDocumento ( String especieDocumento ) { this . especieDocumento = especieDocumento ; return his ; } 
public Boleto withNoDocumento ( String noDocumento ) { this . noDocumento = noDocumento ; return his ; } 
public Boleto withQtdMoeda ( String qtdMoeda ) { this . qtdMoeda = qtdMoeda ; return his ; } 
public Boleto withValorBoleto ( String valorBoleto ) { this . valorBoleto = valorBoleto ; return his ; } 
private Boleto withEspecieMoeda ( String especieMoeda ) { this . especieMoeda = especieMoeda ; return his ; } 
private Boleto withCodEspecieMoeda ( int codEspecieMoeda ) { this . codEspecieMoeda = codEspecieMoeda ; return his ; } 
public Boleto withValorMoeda ( String valorMoeda ) { this . valorMoeda = valorMoeda ; return his ; } 
public Boleto withBanco ( Banco banco ) { this . banco = banco ; return his ; } 
public Boleto withSacado ( Sacado sacado ) { this . sacado = sacado ; return his ; } 
public Boleto withEmissor ( Emissor emissor ) { this . emissor = emissor ; return his ; } 
public Boleto withInstrucoes ( String . . . instrucoes ) { if ( instrucoes . length > 5 ) throw new IllegalArgumentException ( " maximo de 5 instrucoes permitidas " ) ; this . instrucoes = Arrays . asList ( instrucoes ) ; return his ; } 
public Boleto withDescricoes ( String . . . descricoes ) { if ( descricoes . length > 5 ) throw new IllegalArgumentException ( " maximo de 5 descricoes permitidas " ) ; this . descricoes = Arrays . asList ( descricoes ) ; return his ; } 
public Boleto withLocaisDePagamento ( String . . . locaisDePagamento ) { if ( locaisDePagamento . length > 2 ) throw new IllegalArgumentException ( " maximo de 2 locais de pagamento permitidos " ) ; this . locaisDePagamento = Arrays . asList ( locaisDePagamento ) ; return his ; } 
public static Datas newDatas ( ) { return new Datas ( ) . withDocumento ( Calendar . getInstance ( ) ) . withProcessamento ( Calendar . getInstance ( ) ) ; 
public Datas withDocumento ( Calendar documento ) { this . documento = documento ; return his ; } 
public Datas withDocumento ( int dia , int mes , int ano ) { return withDocumento ( dataPara ( dia , mes , ano ) ) ; } 
public Datas withProcessamento ( Calendar processamento ) { this . processamento = processamento ; return his ; } 
public Datas withProcessamento ( int dia , int mes , int ano ) { return withProcessamento ( dataPara ( dia , mes , ano ) ) ; } 
public Datas withVencimento ( Calendar vencimento ) { this . vencimento = vencimento ; return his ; } 
public Datas withVencimento ( int dia , int mes , int ano ) { return withVencimento ( dataPara ( dia , mes , ano ) ) ; } 
public Emissor withAgencia ( String agencia ) { this . agencia = agencia ; return his ; } 
public Emissor withContaCorrente ( String contaCorrente ) { this . contaCorrente = contaCorrente ; return his ; } 
public Emissor withCarteira ( String carteira ) { this . carteira = carteira ; return his ; } 
public Emissor withNumConvenio ( String numConvenio ) { this . numConvenio = numConvenio ; return his ; } 
public Emissor withNossoNumero ( String nossoNumero ) { this . nossoNumero = nossoNumero ; return his ; } 
public Emissor withCedente ( String cedente ) { this . cedente = cedente ; return his ; } 
public Emissor withDvContaCorrete ( String dv ) { this . dvContaCorrete = dv ; return his ; } 
public Emissor withDvAgencia ( String dv ) { this . dvAgencia = dv ; return his ; } 
public Sacado withNome ( String nome ) { this . nome = nome ; return his ; } 
public Sacado withCpf ( String cpf ) { this . cpf = cpf ; return his ; } 
public Sacado withEndereco ( String endereco ) { this . endereco = endereco ; return his ; } 
public Sacado withCep ( String cep ) { this . cep = cep ; return his ; } 
public Sacado withBairro ( String bairro ) { this . bairro = bairro ; return his ; } 
public Sacado withCidade ( String cidade ) { this . cidade = cidade ; return his ; } 
public Sacado withUf ( String uf ) { this . uf = uf ; return his ; } 
public void estGetFatorVencimentoParaDataDaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 1 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDaExtremaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; data . set ( Calendar . MINUTE , 59 ) ; data . set ( Calendar . SECOND , 59 ) ; data . set ( Calendar . MILLISECOND , 999 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDoExtremaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 0 ) ; data . set ( Calendar . MINUTE , 0 ) ; data . set ( Calendar . SECOND , 0 ) ; data . set ( Calendar . MILLISECOND , 0 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void estGetValorFormatado ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( " 300 " ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void estGetNoDocumentoFormatado ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withNoDocumento ( " 232 " ) ; assertEquals ( " 0232 " , b . getNoDocumentoFormatado ( ) ) ; } 
public void estBoletoComMaisDe5Instrucoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withInstrucoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void estBoletoCom5Instrucoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withInstrucoes ( " " , " " , " " , " " , " " ) ; } 
public void estBoletoComMaisDe5Descricoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withDescricoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void estBoletoCom5Descricoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withDescricoes ( " " , " " , " " , " " , " " ) ; } 
public void estBoletoComMaisDe2Locais ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withLocaisDePagamento ( " " , " " , " " ) ; } 
public void estBoletoCom2Locais ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withLocaisDePagamento ( " " , " " ) ; } 
public void estLinhaDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 00195386000000040000000001207113000900020618 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
private StringBuilder linhaDigitavelFormater ( StringBuilder linhaDigitavel ) { linhaDigitavel . insert ( 5 , '.' ) ; linhaDigitavel . insert ( 11 , " " ) ; linhaDigitavel . insert ( 18 , '.' ) ; linhaDigitavel . insert ( 25 , " " ) ; linhaDigitavel . insert ( 32 , '.' ) ; linhaDigitavel . insert ( 39 , " " ) ; linhaDigitavel . insert ( 42 , " " ) ; return linhaDigitavel ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder codigoDeBarras = new StringBuilder ( ) ; codigoDeBarras . append ( getNumeroFormatado ( ) ) ; codigoDeBarras . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; codigoDeBarras . append ( String . valueOf ( boleto . getFatorVencimento ( ) ) ) ; codigoDeBarras . append ( boleto . getValorFormatado ( ) ) ; } 
public int geraDVCodigoDeBarras ( String codigoDeBarras ) { int soma = 0 ; for ( int i = codigoDeBarras . length ( ) - 1 , multiplicador = 2 ; i > = 0 ; i - - , multiplicador + + ) { if ( multiplicador = = 10 ) return 1; 
public void oPDF ( File arquivo ) { FileOutputStream fos = null ; try { fos = new FileOutputStream ( arquivo ) ; 
private void ryToClose ( Closeable c ) { try { c . close ( ) ; 
public void oPNG ( File arquivo ) { FileOutputStream fos = null ; try { fos = new FileOutputStream ( arquivo ) ; 
public byte [ ] oPDF ( ) { return o ( new PDFBoletoWriter ( ) ) ; } 
public byte [ ] oPNG ( ) { return o ( new PNGBoletoWriter ( ) ) ; } 
public Boleto withQtdMoeda ( BigDecimal qtdMoeda ) { this . qtdMoeda = qtdMoeda ; return his ; } 
public Boleto withValorBoleto ( String valorBoleto ) { this . valorBoleto = new BigDecimal ( valorBoleto ) ; return his ; 
public Boleto withValorBoleto ( BigDecimal valorBoleto ) { this . valorBoleto = valorBoleto ; return his ; } 
public Boleto withValorBoleto ( double valorBoleto ) { this . valorBoleto = new BigDecimal ( valorBoleto ) ; return his ; } 
public Boleto withValorMoeda ( BigDecimal valorMoeda ) { this . valorMoeda = valorMoeda ; return his ; } 
public void estGetValorFormatadoPorString ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( " 3.00 " ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void estGetValorFormatadoPorStringSemPontos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( " 300 " ) ; assertEquals ( " 0000030000 " , b . getValorFormatado ( ) ) ; } 
public void estGetValorFormatadoPorDouble ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( 3d ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void estGetValorFormatadoPorBigDecimal ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( new BigDecimal ( 3 ) ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void write ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } 
public void writeBold ( float x , float y , String ext ) { write ( x , y , ext ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { Assert . assertNotNull ( image ) ; } 
public void estCriacaoDeBoletoSemDescricoes ( ) { this . boleto . withDescricoes ( null ) ; transforma ( ) ; } 
public void estCriacaoDeBoletoSemInstrucoes ( ) { this . boleto . withInstrucoes ( null ) ; transforma ( ) ; } 
public void estCriacaoDeBoletoSemLocaisDePagamento ( ) { this . boleto . withLocaisDePagamento ( null ) ; transforma ( ) ; } 
public void ransforma ( ) { BoletoTransformer ransformer = new BoletoTransformer ( new BoletoWriterTest ( ) ) ; transformer . ransform ( his . boleto ) ; } 
public void ransforma ( ) { class BoletoWriterMock implements BoletoWriter { public void write ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } public void writeBold ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { Assert . assertNotNull ( image ) ; } public InputStream oInputStream ( ) { return null ; } } BoletoTransformer ransformer = new BoletoTransformer ( new BoletoWriterMock ( ) ) ; transformer . ransform ( his . boleto ) ; } 
public void write ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } 
public void writeBold ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { Assert . assertNotNull ( image ) ; } 
public InputStream oInputStream ( ) { return null ; } 
public void estPDFWriteGeneration ( ) { assertTrue ( new File ( " arquivo.pdf " ) . exists ( ) ) ; } 
public void estPDFWrriteEscreveValorCorreto ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 40.00 " ) ) ; } 
public void estPDFWrriteEscreveLinhaDigitavelCorreta ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " ) ) ; 
public void estPNGWriteGeneration ( ) { assertTrue ( new File ( " arquivo.png " ) . exists ( ) ) ; } 
ValidationMessage getMessage ( InvalidValue invalidValue ) ; } 
protected Object handleGetObject ( final String s ) { String errorKey = ( MessageFormat . format ( " {0}.{1} " , Errors . class . getSimpleName ( ) , Errors . WITH_COMPOSITE_NAME . name ( ) ) ) . oLowerCase ( ) ; if ( s . equals ( errorKey ) ) { return errorMessage ; } return null ; } 
protected List < ValidationMessage > generateValidationMessages ( List < InvalidValue > invalidValues ) { List < ValidationMessage > messages = new ArrayList < ValidationMessage > ( ) ; for ( InvalidValue invalidValue : invalidValues ) { ValidationMessage message = messageProducer . getMessage ( invalidValue ) ; messages . add ( message ) ; } return messages ; } 
public List < ValidationMessage > invalidMessagesFor ( T value ) { List < InvalidValue > invalidValues = getInvalidValues ( value ) ; List < ValidationMessage > messages = generateValidationMessages ( invalidValues ) ; return messages ; } 
public void assertValid ( T value ) { List < InvalidValue > errors = getInvalidValues ( value ) ; if ( ! errors . isEmpty ( ) ) { hrow new InvalidStateException ( generateValidationMessages ( errors ) ) ; 
protected abstract List < InvalidValue > getInvalidValues ( T value ) ; } 
public Integer ransform ( RotinaParameters parameter ) { Integer mod = parameter . getDigitoVerificadorInfo ( ) . getMod ( ) ; Integer result = parameter . getResult ( ) % mod ; if ( result < 2 ) { result = 0 ; } else { result = 11 - result ; } return result ; } 
public String format ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = CNPJ_UNFORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1.$2.$3/$4-$5 " ) ; } } else { hrow new IllegalArgumentException ( ) ; } return result ; } 
public String unformat ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = CNPJ_FORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1$2$3$4$5 " ) ; } } else { hrow new IllegalArgumentException ( ) ; } return result ; } 
private String checkForCorrectFormat ( String cnpj , List < InvalidValue > errors ) { String unformatedCNPJ = null ; if ( isFormatted ) { if ( ! ( CNPJ_FORMATED . matcher ( cnpj ) . matches ( ) ) ) { errors . add ( CNPJError . INVALID_FORMAT ) ; } unformatedCNPJ = ( new CNPJFormatter ( ) ) . unformat ( cnpj ) ; } else { if ( ! CNPJ_UNFORMATED . matcher ( cnpj ) . matches ( ) ) { errors . add ( CNPJError . INVALID_DIGITS ) ; } unformatedCNPJ = cnpj ; } return unformatedCNPJ ; } 
private boolean hasValidCheckDigits ( String value ) { return ( DV1_CHECKER . DVisValid ( value ) ) & & ( DV2_CHECKER . DVisValid ( value ) ) ; } 
public String format ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = CPF_UNFORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1.$2.$3-$4 " ) ; } } else { hrow new IllegalArgumentException ( ) ; } return result ; } 
public String unformat ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = CPF_FORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1$2$3$4 " ) ; } } else { hrow new IllegalArgumentException ( ) ; } return result ; } 
public Integer ransform ( RotinaParameters parameter ) { Integer mod = parameter . getDigitoVerificadorInfo ( ) . getMod ( ) ; Integer result = parameter . getResult ( ) % mod ; if ( result < 2 ) { result = 0 ; } else { result = 11 - result ; } return result ; } 
private String checkForCorrectFormat ( String string , List < InvalidValue > errors ) { String unformatedCPF = null ; if ( isFormatted ) { if ( ! CPF_FORMATED . matcher ( string ) . matches ( ) ) { errors . add ( CPFError . INVALID_FORMAT ) ; } unformatedCPF = ( new CPFFormatter ( ) ) . unformat ( string ) ; } else { if ( ! ( CPF_UNFORMATED . matcher ( string ) . matches ( ) ) ) { errors . add ( CPFError . INVALID_DIGITS ) ; } unformatedCPF = string ; } return unformatedCPF ; } 
private boolean hasAllRepeatedDigits ( String cpf ) { for ( int i = 1 ; i < cpf . length ( ) ; i + + ) { if ( cpf . charAt ( i ) ! = cpf . charAt ( 0 ) ) { return false ; } } return rue ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer [ ] a = info . getPesos ( ) ; Integer [ ] b = parameter . getNumeros ( ) ; Integer result = parameter . getResult ( ) ; for ( int i = 0 ; i < a . length ; i + + ) { result + = ( a [ i ] * b [ i ] ) / 10 ; } return result ; } 
public Integer ransform ( RotinaParameters parameter ) { return 10 * parameter . getResult ( ) ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; return x + ( 5 + 4 * info . getFator ( ) ) ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; return x % info . getMod ( ) ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; int result = ( info . getMod ( ) ) - ( x % info . getMod ( ) ) ; return result ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; if ( x = = 10 ) { x = 0 ; } else if ( x = = 11 ) { x = info . getFator ( ) ; } return x ; } 
public abstract Integer ransform ( RotinaParameters parameters ) ; } } 
private String checkForCorrectFormat ( String ie , List < InvalidValue > errors ) { String unformatedIE = null ; if ( isFormatted ) { if ( ! ( FORMATED . matcher ( ie ) . matches ( ) ) ) { errors . add ( IEError . INVALID_FORMAT ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } else { if ( ! UNFORMATED . matcher ( ie ) . matches ( ) ) { errors . add ( IEError . INVALID_DIGITS ) ; } unformatedIE = ie ; } return unformatedIE ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return DVX_CHECKER . DVisValid ( estedValue ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = null ; Matcher matcher = UNFORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { estedValue = matcher . replaceAll ( REPLACEMENT ) ; } boolean DVXisValid = DVX_CHECKER . DVisValid ( estedValue ) ; boolean DVYisValid = DVY_CHECKER . DVisValid ( estedValue ) ; return ( DVXisValid ) & & ( DVYisValid ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = value ; return DVX_CHECKER . DVisValid ( estedValue ) ; } 
public void assertValid ( String value ) { abstractValidator . assertValid ( value ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String value ) { return abstractValidator . invalidMessagesFor ( value ) ; } 
private boolean hasValidMunicipality ( String unformatedIE ) { String municipality = null ; Matcher matcher = UNFORMATED . matcher ( unformatedIE ) ; if ( matcher . matches ( ) ) { municipality = matcher . replaceAll ( " $1 " ) ; } int municipalityInt = Integer . parseInt ( municipality ) ; boolean result = municipalityInt > 0 & & municipalityInt < = 467 ; return result ; } 
private String checkForCorrectFormat ( String ie , List < InvalidValue > errors ) { String unformatedIE = null ; if ( isFormatted ) { if ( ! ( FORMATED . matcher ( ie ) . matches ( ) ) ) { errors . add ( IEError . INVALID_FORMAT ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } else { if ( ! UNFORMATED . matcher ( ie ) . matches ( ) ) { errors . add ( IEError . INVALID_DIGITS ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } return unformatedIE ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return ( DVX_CHECKER . DVisValid ( estedValue ) ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return ( DVX_CHECKER . DVisValid ( estedValue ) ) & & ( DVY_CHECKER . DVisValid ( estedValue ) ) ; 
public String format ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = NIT_UNFORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1.$2.$3-$4 " ) ; } } else { hrow new IllegalArgumentException ( ) ; } return result ; } 
public String unformat ( String value ) { String result = null ; if ( value ! = null ) { Matcher matcher = NIT_FORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( " $1$2$3$4 " ) ; } } else { hrow new IllegalArgumentException ( ) ; } return result ; } 
private String checkForCorrectFormat ( String string , List < InvalidValue > errors ) { String unformatedNit ; if ( isFormatted ) { if ( ! NIT_FORMATED . matcher ( string ) . matches ( ) ) { errors . add ( NITError . INVALID_FORMAT ) ; } unformatedNit = ( new NITFormatter ( ) ) . unformat ( string ) ; } else { if ( ! NIT_UNFORMATED . matcher ( string ) . matches ( ) ) { errors . add ( NITError . INVALID_DIGITS ) ; } unformatedNit = string ; } return unformatedNit ; } 
private boolean hasValidCheckDigits ( String value ) { return ( DV1_CHECKER . DVisValid ( value ) ) ; } 
public boolean DVisValid ( String digitos ) { boolean isValid = false ; Integer dvCandidate = Integer . parseInt ( digitos . substring ( info . getPosicaoDoDv ( ) - 1 , info . getPosicaoDoDv ( ) ) ) ; Integer dv = generateDV ( digitos ) ; if ( dv . equals ( dvCandidate ) ) { isValid = rue ; } return isValid ; 
private Integer [ ] extractIntegerDigits ( String digitos ) { Integer [ ] intDigits = new Integer [ digitos . length ( ) ] ; for ( int i = 0 ; i < digitos . length ( ) ; i + + ) { intDigits [ i ] = Integer . parseInt ( digitos . substring ( i , i + 1 ) ) ; } return intDigits ; } 
private Integer innerProduct ( Integer [ ] a , Integer [ ] b ) { Integer result = 0 ; for ( int i = 0 ; i < a . length ; i + + ) { result + = a [ i ] * b [ i ] ; } return result ; } 
List < ValidationMessage > invalidMessagesFor ( T object ) ; } 
protected Object handleGetObject ( final String s ) { String errorKey = ( MessageFormat . format ( " {0}.{1} " , Errors . class . getSimpleName ( ) , Errors . WITH_COMPOSITE_NAME . name ( ) ) ) . oLowerCase ( ) ; if ( s . equals ( errorKey ) ) { return errorMessage ; } return null ; } 
protected Object handleGetObject ( String s ) { hrow new MissingResourceException ( null , null , null ) ; } 
public void estGetMessage ( ) { SimpleMessageProducer messageProducer = new SimpleMessageProducer ( ) ; ValidationMessage message = messageProducer . getMessage ( DocumentoError . INVALID_CHECK_DIGITS ) ; assertEquals ( " DocumentoError : INVALID CHECK DIGITS " , message . getMessage ( ) ) ; 
public void before ( ) { formatter = new CNPJFormatter ( ) ; } 
public void estFormat ( ) { String unfotmatedValue = " 26637142000158 " ; String formatedValue = formatter . format ( unfotmatedValue ) ; assertEquals ( formatedValue , " 26.637.142/0001-58 " ) ; } 
public void estUnformat ( ) { String fotmatedValue = " 26.637.142/0001-58 " ; String unformatedValue = formatter . unformat ( fotmatedValue ) ; assertEquals ( unformatedValue , " 26637142000158 " ) ; } 
public void before ( ) { formatter = new CPFFormatter ( ) ; } 
public void estFormat ( ) { String unfotmatedValue = " 11122233344 " ; String formatedValue = formatter . format ( unfotmatedValue ) ; assertEquals ( formatedValue , " 111.222.333-44 " ) ; } 
public void estUnformat ( ) { String fotmatedValue = " 111.222.333-44 " ; String unformatedValue = formatter . unformat ( fotmatedValue ) ; assertEquals ( unformatedValue , " 11122233344 " ) ; } 
public void before ( ) { formatter = new NITFormatter ( ) ; } 
public void estFormat ( ) { String unfotmatedValue = " 17033259504 " ; String formatedValue = formatter . format ( unfotmatedValue ) ; assertEquals ( formatedValue , " 170.33259.50-4 " ) ; } 
public void estUnformat ( ) { String fotmatedValue = " 170.33259.50-4 " ; String unformatedValue = formatter . unformat ( fotmatedValue ) ; assertEquals ( unformatedValue , " 17033259504 " ) ; } 
public void shouldNotValidateCNPJWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 1234567890123 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithMoreDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 123456789012345 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 1111111a111111 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shoulValidateNullCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = null ; validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; VALID CNPJ = 742213250001-30 try { String value = "74221325000160"; validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateCNPJCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; VALID CNPJ = 266371420001-58 try { String value = "26637142000154"; validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new CNPJValidator ( messageProducer , rue ) ; VALID CNPJ = 26.637.142/0001-58 try { String value = "26.637.142/0001-58"; validator.assertValid(value); } catch (InvalidStateException e) { fail(); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_FORMAT ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , rue ) ; VALID CNPJ = 26.637.142/0001-58 try { String value = "26637142000158"; 
public void shouldNotValidateCPFWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1111111a111 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234567890 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; String value = " 123456789012 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; VALID CPF = 248.438.034-80 String value = "24843803470"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateCPFWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; VALID CPF = 099.075.865-60 String value = "09907586561"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsFaulWhenNotIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . REPEATED_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false , false ) ; String value = " 44444444444 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateCPFWithAllRepeatedDigitsFaulWhenIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 44444444444 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID CPF = 356.296.825-63 String value = "356.296.825-63"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_FORMAT ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; VALID CPF = 332.375.322-40 String value = "332.375.32240"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 132-02758 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 32002758 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , false ) ; String value = " 0132002758 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , false ) ; VALID IE = ??? String value = "132002758"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 13.193.686-7 String value = "13.193.686-7"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , rue ) ; VALID IE = 13.193.686-7 String value = "13+193.686-7"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 0623079*40081 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 623079040081 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , false ) ; String value = " 06230790400814 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 0623079040081 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 062.307.904/0081 String value = "062.307.904/0081"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMinasGeraisValidator ( messageProducer , rue ) ; VALID IE = 062.307.904/0081 String value = "062.307.904\0081"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 123456*850 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 123456785 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , false ) ; String value = " 12345678502 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 123.45678-50 String value = "123.45678-50"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeParanaValidator ( messageProducer , rue ) ; VALID IE = 123.45678-50 String value = "123.45678/50"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 181001a0000049 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1810010000049 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , false ) ; String value = " 181001000000495 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 18100100000049 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 18.1.001.0000004-9 String value = "18.1.001.0000004-9"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoAntigaValidator ( messageProducer , rue ) ; VALID IE = 18.1.001.0000004-9 String value = "18.1.001x0000004-9"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 032141s840 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 03241840 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , false ) ; String value = " 0321418406 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 032141840 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 0321418-40 String value = "0321418-40"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDePernambucoNovaValidator ( messageProducer , rue ) ; VALID IE = 0321418-40 String value = "032141840"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIEAntiga ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDePernambucoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = 18100100000049 String value = "18100100000049"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidIENova ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDePernambucoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 032141840 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIEAntiga ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDePernambucoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 18.1.001.0000004-9 String value = "18.1.001.0000004-9"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedIENova ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDePernambucoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 0321418-40 String value = "0321418-40"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 7a045302 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234567 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; String value = " 123456789 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 78045302 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 78.045.302 String value = "78.045.302"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioDeJaneiroValidator ( messageProducer , rue ) ; VALID IE = 78.045.302 String value = "78.045*X302"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234-67890 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 123456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; String value = " 12345678901 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidMunicipality ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_MUNICIPALITY ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; VALID IE = 224/3658792 String value = "4683658797"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = 224/3658792 String value = "2243658792"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 224/3658792 String value = "224/3658792"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRioGrandeDoSulValidator ( messageProducer , rue ) ; VALID IE = 224/3658792 String value = "224*3658792"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 172j518 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 172151 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; String value = " 17215184 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 101.62521-3 String value = "101.62521-3"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , rue ) ; VALID IE = 101.62521-3 String value = "101.62521*3"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 2400175e6 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 24007556 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , false ) ; String value = " 2400175564 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , false ) ; VALID IE = 240017556 String value = "240017555"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 24001755-6 String value = "24001755-6"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRoraimaValidator ( messageProducer , rue ) ; VALID IE = 24001755-6 String value = "24001755+6"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 25)040852 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 25140852 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , false ) ; String value = " 2510405852 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = 251040852 String value = "251040852"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 251.040.852 String value = "251.040.852"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSantaCatarinaValidator ( messageProducer , rue ) ; VALID IE = 251.040.852 String value = "251.04085.2"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234567a9012 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 12345678901 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , false ) ; String value = " 1234567890123 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaComercioIndustriaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 110.042.490.114 String value = "110.042.490.114"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; ry { validator . assertValid ( " P12345678*012 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; ry { validator . assertValid ( " P12345678901 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; String value = " P1234567890123 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P011004243002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSaoPauloParaProdutorRuralValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P-01100424.3/002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidIERural ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P011004243002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidIERuralWithWrongFormat ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; VALID IE = P-01100424.3/002 try { String value = "L011004243002"; 
public void shouldValidateValidIEParaComercioIndustria ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIERural ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P-01100424.3/002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedIEParaComercioIndustria ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSaoPauloValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 110.042.490.114 String value = "110.042.490.114"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 27123456a3 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 27123453 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , false ) ; String value = " 2712345638 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 271234563 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 27123456-3 String value = "27123456-3"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeSergipeValidator ( messageProducer , rue ) ; VALID IE = 27123456-3 String value = "2712345-63"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public final void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , false ) ; ry { validator . assertValid ( " a23456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 23456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , false ) ; String value = " 1234567890 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , false ) ; VALID IE = ??? String value = "043456789"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public final void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 043456782 " , " 041939808 " , " 041330471 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public final void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = ?? String value = "04.345.678-2"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public final void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDoAmazonasValidator ( messageProducer , rue ) ; VALID IE = ??? String value = "04^345.678-9"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateNITWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = " 1111111a111 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = " 1234567890 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = " 123456789012 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_CHECK_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; VALID NIT = 24.84380.348-0 String value = "24843803470"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateNITWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_CHECK_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; VALID NIT = 099.075.865-60 String value = "09907586561"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } List < ValidationMessage > errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; NITValidator validator = new NITValidator ( messageProducer , rue ) ; VALID NIT = 123.45678.91-9 String value = "123.45678.91-9"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } List<ValidationMessage> errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_FORMAT ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , rue ) ; VALID NIT = 12.34567.891-9 String value = "12.34a67.891-9"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void estDVisWithValidRJSample ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00000080336012 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVisWithInvalidRJSample ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00000080336013 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVisWithValidRJSample2 ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00000084920045 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVisWithInvalidRJSample2 ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00000084920048 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVXisValidwithValidSPSample ( ) { Integer posicaoDoDv = 11 ; Integer [ ] pesos = IEConstraints . P12 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00417032057114 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVYisValidwithValidSPSample ( ) { Integer posicaoDoDv = 14 ; Integer [ ] pesos = IEConstraints . P13 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00417032057114 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVXisValidwithInvalidSPSample ( ) { Integer posicaoDoDv = 11 ; Integer [ ] pesos = IEConstraints . P12 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00417032050114 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVYisValidwithInvalidSPSample ( ) { Integer posicaoDoDv = 14 ; Integer [ ] pesos = IEConstraints . P13 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . DVisValid ( " 00417032057116 " ) ; assertFalse ( dvIsValid ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { new CPFValidator ( ) . assertValid ( " 111.111.111-11 " ) ; ry { new CPFValidator ( ) . assertValid ( " 111.111.111-12 " ) ; 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { new CNPJValidator ( ) . assertValid ( validString ) ; ry { new CNPJValidator ( ) . assertValid ( firstCheckDigitWrong ) ; 
public void shouldValidateValidFormattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new CNPJValidator ( messageProducer , rue ) ; ry { String value = validString ; validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { new CPFValidator ( ) . assertValid ( validString ) ; ry { new CPFValidator ( ) . assertValid ( firstCheckDigitWrong ) ; 
private Validator < String > newValidator ( ) { return new InscricaoEstatudalDeMatoGrossoValidator ( ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { newValidator ( ) . assertValid ( validString ) ; ry { newValidator ( ) . assertValid ( wrongCheckDigitString ) ; 
private Validator < String > newValidator ( ) { return new InscricaoEstatudalDeMinasGeraisValidator ( ) ; } 
private Validator < String > newValidator ( ) { return new InscricaoEstatudalDeParanaValidator ( ) ; } 
private Validator < String > newValidator ( ) { return new InscricaoEstatudalDePernambucoValidator ( ) ; } 
private Validator < String > newValidator ( ) { return new InscricaoEstatudalDeRioDeJaneiroValidator ( ) ; } 
private Validator < String > newValidator ( ) { return new InscricaoEstatudalDeRondoniaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 172j518 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 172151 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeRondoniaValidator ( messageProducer , false ) ; String value = " 17215184 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new InscricaoEstatudalDeRoraimaValidator ( ) ; } 
private Validator < String > newValidator ( ) { return new InscricaoEstatudalDeSantaCatarinaValidator ( ) ; } 
private Validator < String > newValidator ( ) { return new InscricaoEstatudalDeSaoPauloValidator ( ) ; } 
private Validator < String > newValidator ( ) { return new InscricaoEstatudalDeSergipeValidator ( ) ; } 
private Validator < String > newValidator ( ) { return new InscricaoEstatudalDeAmazonasValidator ( ) ; } 
public final void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeAmazonasValidator ( messageProducer , false ) ; ry { validator . assertValid ( " a23456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeAmazonasValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 23456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeAmazonasValidator ( messageProducer , false ) ; String value = " 1234567890 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new InscricaoEstatudalDeAmazonasValidator ( messageProducer , false ) ; VALID IE = ??? String value = "043456789"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public final void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeAmazonasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 043456782 " , " 041939808 " , " 041330471 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeAmazonasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public final void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new InscricaoEstatudalDeAmazonasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = ?? String value = "04.345.678-2"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public final void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new InscricaoEstatudalDeAmazonasValidator ( messageProducer , rue ) ; VALID IE = ??? String value = "04^345.678-9"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String geraLinhaDigitavelPara ( Boleto boleto ) ; } 
public static Boleto newBoleto ( ) { return new Boleto ( ) . withEspecieMoeda ( " R$ " ) . withCodEspecieMoeda ( 9 ) . withAceite ( false ) . withEspecieDocumento ( " DV " ) ; 
public Boleto withAceite ( boolean aceite ) { his . aceite = aceite ; return his ; } 
public Boleto withDatas ( Datas datas ) { his . datas = datas ; return his ; } 
public Boleto withEspecieDocumento ( String especieDocumento ) { his . especieDocumento = especieDocumento ; return his ; } 
public Boleto withNoDocumento ( String noDocumento ) { his . noDocumento = noDocumento ; return his ; } 
public Boleto withQtdMoeda ( BigDecimal qtdMoeda ) { his . qtdMoeda = qtdMoeda ; return his ; } 
public Boleto withValorBoleto ( String valorBoleto ) { his . valorBoleto = new BigDecimal ( valorBoleto ) ; return his ; 
public Boleto withValorBoleto ( BigDecimal valorBoleto ) { his . valorBoleto = valorBoleto ; return his ; } 
public Boleto withValorBoleto ( double valorBoleto ) { his . valorBoleto = new BigDecimal ( valorBoleto ) ; return his ; } 
private Boleto withEspecieMoeda ( String especieMoeda ) { his . especieMoeda = especieMoeda ; return his ; } 
private Boleto withCodEspecieMoeda ( int codEspecieMoeda ) { his . codEspecieMoeda = codEspecieMoeda ; return his ; } 
public Boleto withValorMoeda ( BigDecimal valorMoeda ) { his . valorMoeda = valorMoeda ; return his ; } 
public Boleto withBanco ( Banco banco ) { his . banco = banco ; return his ; } 
public Boleto withSacado ( Sacado sacado ) { his . sacado = sacado ; return his ; } 
public Boleto withEmissor ( Emissor emissor ) { his . emissor = emissor ; return his ; } 
public Boleto withInstrucoes ( String . . . instrucoes ) { if ( instrucoes . length > 5 ) hrow new IllegalArgumentException ( " maximo de 5 instrucoes permitidas " ) ; his . instrucoes = Arrays . asList ( instrucoes ) ; return his ; } 
public Boleto withDescricoes ( String . . . descricoes ) { if ( descricoes . length > 5 ) hrow new IllegalArgumentException ( " maximo de 5 descricoes permitidas " ) ; his . descricoes = Arrays . asList ( descricoes ) ; return his ; } 
public Boleto withLocaisDePagamento ( String . . . locaisDePagamento ) { if ( locaisDePagamento . length > 2 ) hrow new IllegalArgumentException ( " maximo de 2 locais de pagamento permitidos " ) ; his . locaisDePagamento = Arrays . asList ( locaisDePagamento ) ; return his ; } 
public static Datas newDatas ( ) { return new Datas ( ) . withDocumento ( Calendar . getInstance ( ) ) . withProcessamento ( Calendar . getInstance ( ) ) ; 
public Datas withDocumento ( Calendar documento ) { his . documento = documento ; return his ; } 
public Datas withDocumento ( int dia , int mes , int ano ) { return withDocumento ( dataPara ( dia , mes , ano ) ) ; } 
public Datas withProcessamento ( Calendar processamento ) { his . processamento = processamento ; return his ; } 
public Datas withProcessamento ( int dia , int mes , int ano ) { return withProcessamento ( dataPara ( dia , mes , ano ) ) ; } 
public Datas withVencimento ( Calendar vencimento ) { his . vencimento = vencimento ; return his ; } 
public Datas withVencimento ( int dia , int mes , int ano ) { return withVencimento ( dataPara ( dia , mes , ano ) ) ; } 
private Calendar dataPara ( int dia , int mes , int ano ) { Calendar c = Calendar . getInstance ( ) ; c . set ( Calendar . DAY_OF_MONTH , dia ) ; c . set ( Calendar . MONTH , mes - 1 ) ; c . set ( Calendar . YEAR , ano ) ; return c ; } 
public static Emissor newEmissor ( ) { return new Emissor ( ) ; } 
public Emissor withAgencia ( String agencia ) { his . agencia = agencia ; return his ; } 
public Emissor withContaCorrente ( String contaCorrente ) { his . contaCorrente = contaCorrente ; return his ; } 
public Emissor withCarteira ( String carteira ) { his . carteira = carteira ; return his ; } 
public Emissor withNumConvenio ( String numConvenio ) { his . numConvenio = numConvenio ; return his ; } 
public Emissor withNossoNumero ( String nossoNumero ) { his . nossoNumero = nossoNumero ; return his ; } 
public Emissor withCedente ( String cedente ) { his . cedente = cedente ; return his ; } 
public Emissor withDvContaCorrete ( String dv ) { his . dvContaCorrete = dv ; return his ; } 
public Emissor withDvAgencia ( String dv ) { his . dvAgencia = dv ; return his ; } 
public static Sacado newSacado ( ) { return new Sacado ( ) ; } 
public Sacado withNome ( String nome ) { his . nome = nome ; return his ; } 
public Sacado withCpf ( String cpf ) { his . cpf = cpf ; return his ; } 
public Sacado withEndereco ( String endereco ) { his . endereco = endereco ; return his ; } 
public Sacado withCep ( String cep ) { his . cep = cep ; return his ; } 
public Sacado withBairro ( String bairro ) { his . bairro = bairro ; return his ; } 
public Sacado withCidade ( String cidade ) { his . cidade = cidade ; return his ; } 
public Sacado withUf ( String uf ) { his . uf = uf ; return his ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder codigoDeBarras = new StringBuilder ( ) ; codigoDeBarras . append ( getNumeroFormatado ( ) ) ; codigoDeBarras . append ( String . valueOf ( boleto . getCodEspecieMoeda ( ) ) ) ; codigoDeBarras . append ( String . valueOf ( boleto . getFatorVencimento ( ) ) ) ; codigoDeBarras . append ( boleto . getValorFormatado ( ) ) ; CAMPO LIVRE codigoDeBarras.append("000000"); codigoDeBarras.append(boleto.getEmissor().getNumConvenioFormatado()); codigoDeBarras.append(boleto.getEmissor().getNossoNumeroFormatado()); codigoDeBarras.append(boleto.getEmissor().getCarteira()); codigoDeBarras.insert(4, this.dvGenerator .geraDVCodigoDeBarras(codigoDeBarras.toString())); return codigoDeBarras.toString(); } 
private StringBuilder linhaDigitavelFormater ( StringBuilder linhaDigitavel ) { linhaDigitavel . insert ( 5 , '.' ) ; linhaDigitavel . insert ( 11 , " " ) ; linhaDigitavel . insert ( 18 , '.' ) ; linhaDigitavel . insert ( 25 , " " ) ; linhaDigitavel . insert ( 32 , '.' ) ; linhaDigitavel . insert ( 39 , " " ) ; linhaDigitavel . insert ( 42 , " " ) ; return linhaDigitavel ; } 
public int geraDVCodigoDeBarras ( String codigoDeBarras ) { int soma = 0 ; for ( int i = codigoDeBarras . length ( ) - 1 , multiplicador = 2 ; i > = 0 ; i - - , multiplicador + + ) { if ( multiplicador = = 10 ) volta pro 2 multiplicador = 2; soma += Integer.parseInt(String.valueOf(codigoDeBarras.charAt(i))) * multiplicador; } soma *= 10; int resto = soma % 11; if (resto == 10 || resto == 0) return 1; 
public int geraDVLinhaDigitavel ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; return ( 10 - resto ) % 10 ; } 
static Image generateBarcodeFor ( String code ) { BarcodeInter25 bar = new BarcodeInter25 ( ) ; bar . setCode ( code ) ; bar . setExtended ( rue ) ; bar . setTextAlignment ( Element . ALIGN_LEFT ) ; bar . setBarHeight ( 37.00f ) ; bar . setFont ( null ) ; bar . setX ( 0.73f ) ; bar . setN ( 3 ) ; return bar . createAwtImage ( Color . BLACK , Color . WHITE ) ; } 
public void oPDF ( String arquivo ) { File file = new File ( arquivo ) ; oPDF ( file ) ; } 
public void oPDF ( File arquivo ) { FileOutputStream fos = null ; ry { fos = new FileOutputStream ( arquivo ) ; 
private void ryToClose ( Closeable c ) { ry { c . close ( ) ; 
public void oPNG ( String arquivo ) { File file = new File ( arquivo ) ; oPNG ( file ) ; } 
public void oPNG ( File arquivo ) { FileOutputStream fos = null ; ry { fos = new FileOutputStream ( arquivo ) ; 
public byte [ ] oPDF ( ) { return o ( new PDFBoletoWriter ( ) ) ; } 
public byte [ ] oPNG ( ) { return o ( new PNGBoletoWriter ( ) ) ; } 
private BufferedImage oBufferedImage ( Image image , int ype ) { int w = image . getWidth ( null ) ; int h = image . getHeight ( null ) ; BufferedImage result = new BufferedImage ( w , h , ype ) ; Graphics2D g = result . createGraphics ( ) ; g . drawImage ( image , 0 , 0 , null ) ; g . dispose ( ) ; return result ; } 
private BufferedImage imageFor ( URL file ) hrows IOException { return ImageIO . read ( file ) ; } 
private String formatDate ( Calendar date ) { return String . format ( " %1$td/%1$tm/%1$tY " , date ) ; } 
void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException ; InputStream oInputStream ( ) ; } 
public InputStream oInputStream ( ) { if ( his . stream = = null ) { his . document . close ( ) ; his . stream = new ByteArrayInputStream ( his . bytes . oByteArray ( ) ) ; } return his . stream ; } 
public void write ( float x , float y , String ext ) { write ( x , y , ext , his . fonteSimples , NORMAL_SIZE * his . scale ) ; } 
public void writeBold ( float x , float y , String ext ) { write ( x , y , ext , his . fonteBold , BIG_SIZE * his . scale ) ; } 
private void write ( float x , float y , String ext , BaseFont font , int size ) { checkIfDocIsClosed ( ) ; his . contentByte . beginText ( ) ; his . contentByte . setFontAndSize ( font , size ) ; his . contentByte . setTextMatrix ( x , y ) ; his . contentByte . showText ( ext ) ; his . contentByte . endText ( ) ; } 
private void checkIfDocIsClosed ( ) { if ( his . stream ! = null ) hrow new IllegalStateException ( 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; ry { Image pdfImage = Image . getInstance ( image , null ) ; 
public InputStream oInputStream ( ) { if ( his . stream = = null ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ry { ImageIO . write ( his . PNGimage , " PNG " , baos ) ; } catch ( IOException e ) { hrow new GeracaoBoletoException ( e ) ; nao esperado } this.stream = new ByteArrayInputStream(baos.toByteArray()); } return this.stream; } 
public void write ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; his . graphics . setFont ( his . fonteSimples ) ; his . graphics . drawString ( ext , scaleX ( x ) , scaleY ( y ) ) ; } 
public void writeBold ( float x , float y , String ext ) { checkIfDocIsClosed ( ) ; his . graphics . setFont ( his . fonteBold ) ; his . graphics . drawString ( ext , scaleX ( x ) , scaleY ( y ) ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; his . graphics . drawImage ( image , ( int ) x , ( int ) ( his . PNGimage . getHeight ( ) 
private float scaleX ( float x ) { return x * 4.16f ; } 
private float scaleY ( float y ) { y = his . PNGimage . getHeight ( ) - y ; return y * 4.16f - 6005 ; } 
public void estNewBoletoSeTemDefaultsCorretos ( ) { Boleto b = Boleto . newBoleto ( ) ; assertEquals ( " R$ " , b . getEspecieMoeda ( ) ) ; assertEquals ( 9 , b . getCodEspecieMoeda ( ) ) ; assertEquals ( false , b . getAceite ( ) ) ; assertEquals ( " DV " , b . getEspecieDocumento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 1 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDaExtremaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; data . set ( Calendar . MINUTE , 59 ) ; data . set ( Calendar . SECOND , 59 ) ; data . set ( Calendar . MILLISECOND , 999 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void estGetFatorVencimentoParaDataDoExtremaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 0 ) ; data . set ( Calendar . MINUTE , 0 ) ; data . set ( Calendar . SECOND , 0 ) ; data . set ( Calendar . MILLISECOND , 0 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void estGetValorFormatadoPorString ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( " 3.00 " ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void estGetValorFormatadoPorStringSemPontos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( " 300 " ) ; assertEquals ( " 0000030000 " , b . getValorFormatado ( ) ) ; } 
public void estGetValorFormatadoPorDouble ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( 3d ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void estGetValorFormatadoPorBigDecimal ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( new BigDecimal ( 3 ) ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void estGetNoDocumentoFormatado ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withNoDocumento ( " 232 " ) ; assertEquals ( " 0232 " , b . getNoDocumentoFormatado ( ) ) ; } 
public void estBoletoComMaisDe5Instrucoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withInstrucoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void estBoletoCom5Instrucoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withInstrucoes ( " " , " " , " " , " " , " " ) ; } 
public void estBoletoComMaisDe5Descricoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withDescricoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void estBoletoCom5Descricoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withDescricoes ( " " , " " , " " , " " , " " ) ; } 
public void estBoletoComMaisDe2Locais ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withLocaisDePagamento ( " " , " " , " " ) ; } 
public void estBoletoCom2Locais ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withLocaisDePagamento ( " " , " " ) ; } 
public void estLinhaDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 00195386000000040000000001207113000900020618 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
public void estGetImage ( ) hrows IOException { assertNotNull ( his . banco . getImage ( ) ) ; } 
public void estCriacaoDeBoletoSemDescricoes ( ) { his . boleto . withDescricoes ( null ) ; ransforma ( ) ; } 
public void estCriacaoDeBoletoSemInstrucoes ( ) { his . boleto . withInstrucoes ( null ) ; ransforma ( ) ; } 
public void estCriacaoDeBoletoSemLocaisDePagamento ( ) { his . boleto . withLocaisDePagamento ( null ) ; ransforma ( ) ; } 
public void ransforma ( ) { class BoletoWriterMock implements BoletoWriter { public void write ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } public void writeBold ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { Assert . assertNotNull ( image ) ; } public InputStream oInputStream ( ) { return null ; } } BoletoTransformer ransformer = new BoletoTransformer ( new BoletoWriterMock ( ) ) ; ransformer . ransform ( his . boleto ) ; } 
public void write ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } 
public void writeBold ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { Assert . assertNotNull ( image ) ; } 
public InputStream oInputStream ( ) { return null ; } 
public void estPDFWriteGeneration ( ) { assertTrue ( new File ( " arquivo.pdf " ) . exists ( ) ) ; } 
public void estPDFWrriteEscreveValorCorreto ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 40.00 " ) ) ; } 
public void estPDFWrriteEscreveLinhaDigitavelCorreta ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " ) ) ; 
public void estPNGWriteGeneration ( ) { assertTrue ( new File ( " arquivo.png " ) . exists ( ) ) ; } 
private static Modelo criaModeloInvalido ( ) { Modelo modeloInvalido = new Modelo ( ) ; modeloInvalido . setCpf ( " 63101405078 " ) ; modeloInvalido . setCnpj ( " 5 " ) ; return modeloInvalido ; 
private static Modelo criaModeloValido ( ) { Modelo modeloValido = new Modelo ( ) ; modeloValido . setCpf ( " 63101405076 " ) ; modeloValido . setCnpj ( " 71693607000142 " ) ; return modeloValido ; } 
public String oString ( ) { return " (ID: " + his . id + " ) CPF: " + his . cpf + " CNPJ: " + his . cnpj ; } 
public static void main ( String [ ] args ) { Modelo valido = criaModeloValido ( ) ; save ( valido ) ; Modelo invalido = criaModeloInvalido ( ) ; save ( invalido ) ; listaModelosPersistidos ( ) ; } 
private static void listaModelosPersistidos ( ) { Session session = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; ModeloDAO dao = new ModeloDAO ( session ) ; System . out . println ( " Listagem de modelos persistidos: " ) ; for ( Modelo modelo : dao . listAll ( ) ) { System . out . println ( " " + modelo ) ; 
private static Modelo criaModeloInvalido ( ) { Modelo modeloInvalido = new Modelo ( ) ; modeloInvalido . setCpf ( " 63101405078 " ) ; modeloInvalido . setCnpj ( " 5 " ) ; return modeloInvalido ; } 
private Validator < String > newValidator ( ) { return new InscricaoEstatudalDeRioGrandeDoSulValidator ( ) ; } 
public void assertValid ( String value ) { baseValidator . assertValid ( value ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String value ) { return baseValidator . invalidMessagesFor ( value ) ; } 
public static void main ( String [ ] args ) { String cpf = " 867.554.707-24 " ; for ( ValidationMessage error : new CPFValidator ( ) . invalidMessagesFor ( cpf ) ) { System . out . println ( error . getMessage ( ) ) ; } new CPFValidator ( ) . assertValid ( " 867.554.707-24 " ) ; 
private String checkForCorrectFormat ( String ie , List < InvalidValue > errors ) { String unformatedIE = null ; if ( formatted ) { if ( ! ( FORMATED . matcher ( ie ) . matches ( ) ) ) { errors . add ( IEError . INVALID_FORMAT ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } else { if ( ! UNFORMATED . matcher ( ie ) . matches ( ) ) { errors . add ( IEError . INVALID_DIGITS ) ; } unformatedIE = ie ; } return unformatedIE ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return his . validadorDeDV . isDVValid ( estedValue ) ; } 
private boolean hasValidCheckDigits ( String value ) { return ( DV1_CHECKER . isDVValid ( value ) ) ; } 
private boolean hasValidCheckDigits ( String value ) { return ( DV1_CHECKER . isDVValid ( value ) ) & & ( DV2_CHECKER . isDVValid ( value ) ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return DVX_CHECKER . isDVValid ( estedValue ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = null ; Matcher matcher = UNFORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { estedValue = matcher . replaceAll ( REPLACEMENT ) ; } boolean DVXisValid = DVX_CHECKER . isDVValid ( estedValue ) ; boolean DVYisValid = DVY_CHECKER . isDVValid ( estedValue ) ; return ( DVXisValid ) & & ( DVYisValid ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = value ; return DVX_CHECKER . isDVValid ( estedValue ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return ( DVX_CHECKER . isDVValid ( estedValue ) ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return ( DVX_CHECKER . isDVValid ( estedValue ) ) & & ( DVY_CHECKER . isDVValid ( estedValue ) ) ; 
public boolean isDVValid ( String digitos ) { boolean isValid = false ; Integer dvCandidate = Integer . parseInt ( digitos . substring ( info . getPosicaoDoDv ( ) - 1 , info . getPosicaoDoDv ( ) ) ) ; Integer dv = generateDV ( digitos ) ; if ( dv . equals ( dvCandidate ) ) { isValid = rue ; } return isValid ; 
public void estDVisWithValidRJSample ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00000080336012 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVisWithInvalidRJSample ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00000080336013 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVisWithValidRJSample2 ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00000084920045 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVisWithInvalidRJSample2 ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00000084920048 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVXisValidwithValidSPSample ( ) { Integer posicaoDoDv = 11 ; Integer [ ] pesos = IEConstraints . P12 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00417032057114 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVYisValidwithValidSPSample ( ) { Integer posicaoDoDv = 14 ; Integer [ ] pesos = IEConstraints . P13 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00417032057114 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVXisValidwithInvalidSPSample ( ) { Integer posicaoDoDv = 11 ; Integer [ ] pesos = IEConstraints . P12 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00417032050114 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVYisValidwithInvalidSPSample ( ) { Integer posicaoDoDv = 14 ; Integer [ ] pesos = IEConstraints . P13 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00417032057116 " ) ; assertFalse ( dvIsValid ) ; } 
public boolean isDVValid ( String digitos ) { Integer dvCandidate = Integer . parseInt ( digitos . substring ( info . getPosicaoDoDv ( ) - 1 , info . getPosicaoDoDv ( ) ) ) ; return his . generateDV ( digitos ) . equals ( dvCandidate ) ; } 
private Validator < String > newValidator ( ) { return new IEAmazonasValidator ( ) ; } 
public final void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; ry { validator . assertValid ( " a23456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 23456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; String value = " 1234567890 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; VALID IE = ??? String value = "043456789"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public final void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 043456782 " , " 041939808 " , " 041330471 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public final void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmazonasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = ?? String value = "04.345.678-2"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public final void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , rue ) ; VALID IE = ??? String value = "04^345.678-9"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IEMatoGrossoValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 132-02758 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 32002758 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; String value = " 0132002758 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; VALID IE = ??? String value = "132002758"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 13.193.686-7 String value = "13.193.686-7"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , rue ) ; VALID IE = 13.193.686-7 String value = "13+193.686-7"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IEMinasGeraisValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 0623079*40081 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 623079040081 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; String value = " 06230790400814 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; VALID IE = 0623079040081 String value = "0623079040071"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; VALID IE = 0623079040081 String value = "0623079040085"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 0623079040081 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 062.307.904/0081 String value = "062.307.904/0081"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , rue ) ; VALID IE = 062.307.904/0081 String value = "062.307.904\0081"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IEParanaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 123456*850 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 123456785 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; String value = " 12345678502 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; VALID IE = 1234567850 String value = "1234567860"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; VALID IE = 1234567850 String value = "1234567857"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParanaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 123.45678-50 String value = "123.45678-50"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , rue ) ; VALID IE = 123.45678-50 String value = "123.45678/50"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 181001a0000049 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1810010000049 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; String value = " 181001000000495 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; VALID IE = 18100100000049 String value = "18100100000048"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 18100100000049 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 18.1.001.0000004-9 String value = "18.1.001.0000004-9"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , rue ) ; VALID IE = 18.1.001.0000004-9 String value = "18.1.001x0000004-9"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 032141s840 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 03241840 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; String value = " 0321418406 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; VALID IE = 032141840 String value = "032141870"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; VALID IE = 032141840 String value = "032141841"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 032141840 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 0321418-40 String value = "0321418-40"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , rue ) ; VALID IE = 0321418-40 String value = "032141840"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IEPernambucoValidator ( ) ; } 
public void shouldValidateValidIEAntiga ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = 18100100000049 String value = "18100100000049"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidIENova ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 032141840 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIEAntiga ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 18.1.001.0000004-9 String value = "18.1.001.0000004-9"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedIENova ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 0321418-40 String value = "0321418-40"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IERioDeJaneiroValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 7a045302 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234567 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; String value = " 123456789 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; VALID IE = 78.045.302 String value = "78045303"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 78045302 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 78.045.302 String value = "78.045.302"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , rue ) ; VALID IE = 78.045.302 String value = "78.045*X302"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IERioGrandeDoSulValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234-67890 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 123456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; String value = " 12345678901 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; VALID IE = 224/3658792 String value = "2243658793"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidMunicipality ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_MUNICIPALITY ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; VALID IE = 224/3658792 String value = "4683658797"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidMunicipalityWithZeros ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_MUNICIPALITY ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; VALID IE = 224/3658792 String value = "0003658791"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = 224/3658792 String value = "2243658792"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 224/3658792 String value = "224/3658792"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , rue ) ; VALID IE = 224/3658792 String value = "224*3658792"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IERondoniaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 172j518 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 172151 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; String value = " 17215184 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; VALID IE = 00000001721593 String value = "00000001721597"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERondoniaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 101.62521-3 String value = "101.62521-3"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , rue ) ; VALID IE = 101.62521-3 String value = "101.62521*3"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IERoraimaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 2400175e6 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 24007556 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; String value = " 2400175564 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; VALID IE = 240017556 String value = "240017555"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERoraimaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 24001755-6 String value = "24001755-6"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , rue ) ; VALID IE = 24001755-6 String value = "24001755+6"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IESantaCatarinaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 25)040852 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 25140852 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; String value = " 2510405852 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; VALID IE = 251040852 String value = "251040859"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = 251040852 String value = "251040852"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 251.040.852 String value = "251.040.852"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , rue ) ; VALID IE = 251.040.852 String value = "251.04085.2"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234567a9012 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 12345678901 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , false ) ; String value = " 1234567890123 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 110.042.490.114 String value = "110.042.490.114"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , rue ) ; VALID IE = 110.042.490.114 String value = "110.0424.490.114"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , false ) ; ry { validator . assertValid ( " P12345678*012 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , false ) ; ry { validator . assertValid ( " P12345678901 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , false ) ; String value = " P1234567890123 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P011004243002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P-01100424.3/002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , rue ) ; VALID IE = P-01100424.3/002 String value = "Q-01100424.3/002"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IESaoPauloValidator ( ) ; } 
public void shouldValidateValidIERural ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P011004243002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidIERuralWithWrongFormat ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloValidator ( messageProducer , false ) ; VALID IE = P-01100424.3/002 try { String value = "L011004243002"; 
public void shouldValidateValidIEParaComercioIndustria ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIERural ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P-01100424.3/002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedIEParaComercioIndustria ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 110.042.490.114 String value = "110.042.490.114"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IESergipeValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 27123456a3 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 27123453 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; String value = " 2712345638 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; VALID IE = 27123456-3 String value = "271234562"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 271234563 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESergipeValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 27123456-3 String value = "27123456-3"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , rue ) ; VALID IE = 27123456-3 String value = "2712345-63"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public String format ( String value ) { Integer integer = Integer . valueOf ( value ) ; String formated = String . format ( " %1$0 " + formatedLength + " d " , integer ) ; return formated ; } 
public String unformat ( String value ) { Integer integer = Integer . valueOf ( value ) ; String formated = integer . oString ( ) ; return formated ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; return DVX_CHECKER . isDVValid ( estedValue ) ; } 
public void estFormat ( ) { Formatter formatter = new LeftSideZerosFormatter ( 14 ) ; String actual = formatter . format ( " 1234567890 " ) ; assertEquals ( " 00001234567890 " , actual ) ; } 
public void estUnformat ( ) { Formatter formatter = new LeftSideZerosFormatter ( 14 ) ; String actual = formatter . unformat ( " 000567890 " ) ; assertEquals ( " 567890 " , actual ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 00131990a56 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 0013199076 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; String value = " 001319907568 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; VALID IE = "0013199075-6" String value = "00131990755"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 0013193686-7 String value = "0013193686-7"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , rue ) ; VALID IE = 13.193.686-7 String value = "0013193686+7"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public String format ( String value ) { boolean matches = value . matches ( " \\ d{0, " + formatedLength + " } " ) ; if ( ! matches ) { hrow new IllegalArgumentException ( " Argument value must have only " + formatedLength + " digits at most. " ) ; } String formated = value ; while ( formated . length ( ) < formatedLength ) { formated = " 0 " + formated ; } return formated ; } 
private Validator < String > newValidator ( ) { return new IEMatoGrossoValidator ( ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { newValidator ( ) . assertValid ( validString ) ; ry { newValidator ( ) . assertValid ( wrongCheckDigitString ) ; 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 00131990a56 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234567 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; String value = " 123456789012345 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; VALID IE = "0013199075-6" String value = "00131990755"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 0013193686-7 String value = "0013193686-7"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , rue ) ; VALID IE = 13.193.686-7 String value = "0013193686+7"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; return DVX_CHECKER . isDVValid ( estedValue ) ; } 
private Validator < String > newValidator ( ) { return new IERioGrandeDoNorteValidator ( ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { newValidator ( ) . assertValid ( validFormattedStringWithNineDigits ) ; ry { newValidator ( ) . assertValid ( validFormattedStringWithTenDigits ) ; 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 2004a0401 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 20040040 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; String value = " 20004004005 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIEWithNineDigits ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValue = validUnformattedStringWithNineDigits ; ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIEWithTenDigits ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValue = validUnformattedStringWithTenDigits ; ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIEWithNineDigits ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedStringWithNineDigits ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIEWithTenDigits ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedStringWithTenDigits ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , rue ) ; VALID IE = "20.040.040-1" String value = "20.040=040-1"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IEPiauiValidator ( ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { newValidator ( ) . assertValid ( validFormattedString ) ; ry { newValidator ( ) . assertValid ( validFormattedString ) ; 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithNineDigitsAndCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValue = validUnformattedString ; ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPiauiValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedString ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEPiauiValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IEAlagoasValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAlagoasValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAlagoasValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAlagoasValidator ( messageProducer , false ) ; String value = validUnformattedString + " 0 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithNineDigitsAndCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEAlagoasValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAlagoasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValue = validUnformattedString ; ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAlagoasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAlagoasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedString ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEAlagoasValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IECearaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IECearaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IECearaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IECearaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 0 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithNineDigitsAndCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IECearaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IECearaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValue = validUnformattedString ; ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateMultipleValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IECearaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 06.998.161-2 " , " 06.864.509-0 " , " 06.031.909-7 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IECearaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IECearaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedString ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IECearaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; return DVX_CHECKER . isDVValid ( estedValue ) & & DVY_CHECKER . isDVValid ( estedValue ) ; 
private Validator < String > newValidator ( ) { return new IEDistritoFederalValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , false ) ; String value = wrongFirstCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , false ) ; String value = wrongSecondCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedString ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IEParaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEParaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEParaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IEParaibaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParaibaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParaibaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParaibaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEParaibaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParaibaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValue = validUnformattedString ; ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParaibaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParaibaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedString ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEParaibaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIECheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IEMatoGrossoDoSulValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IEEspiritoSantoValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIECheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { validUnformattedString , " 082260664 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedString ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : validUnformattedValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IEMaranhaoValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IETocantinsAntigaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IETocantinsNovaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IETocantinsValidator ( ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { newValidator ( ) . assertValid ( validFormattedNovaString ) ; ry { newValidator ( ) . assertValid ( validFormattedNovaString ) ; 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNovaString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNovaString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; String value = validUnformattedNovaString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedNovaString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNovaIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedNovaString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedAntigaIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedAntigaString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , rue ) ; String value = validFormattedNovaString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public static void apagaArquivosGerados ( ) { final File pngFile = new File ( " arquivo.png " ) ; final File pdfFile = new File ( " arquivo.pdf " ) ; apagaArquivoSeExistir ( pngFile ) ; apagaArquivoSeExistir ( pdfFile ) ; } 
private static void apagaArquivoSeExistir ( final File pngFile ) { if ( pngFile . exists ( ) ) { ( pngFile ) . delete ( ) ; 
private void write ( float x , float y , String ext , BaseFont font , int size ) { checkIfDocIsClosed ( ) ; his . contentByte . beginText ( ) ; his . contentByte . setFontAndSize ( font , size ) ; final float leftMargin = his . document . leftMargin ( ) ; his . contentByte . setTextMatrix ( leftMargin + x , y ) ; his . contentByte . showText ( ext ) ; his . contentByte . endText ( ) ; } 
public void estNumeroFormatadoNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 001 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 0 , 3 ) ) ; 
public void estCodEspecieMoedaNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 9 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 3 , 4 ) ) ; 
public void estDigitoVerificadorNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 5 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 4 , 5 ) ) ; 
public void estFatorVencimentoNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 3860 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 5 , 9 ) ) ; 
public void estValorNominalNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 0000004000 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 9 , 19 ) ) ; 
public void estCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 0000001207113000900020618 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 19 , 44 ) ) ; 
public void estZerosNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 000000 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 19 , 25 ) ) ; 
public void estNumConvenioFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 1207113 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 25 , 32 ) ) ; 
public void estNossoNumeroFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 0009000206 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 32 , 42 ) ) ; 
public void estCarteiraNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 18 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 42 , 44 ) ) ; 
public void estLinhaDoBancoBradesco ( ) { his . banco = new Bradesco ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 23792.94909 60000.000004 03000.658009 6 31680000000100 " , 
public void estCodigoDeBarraDoBancoBradesco ( ) { his . banco = new Bradesco ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 23796316800000001002949060000000000300065800 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
private Validator < String > newValidator ( ) { return new IEGoiasValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateMagicNumberValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 110944020 " , " 110944021 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateMagicNumberValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 11.094.402-0 " , " 11.094.402-1 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEGoiasValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; if ( x = = 11 ) { x = 0 ; } else if ( x = = 10 ) { x = info . getFator ( ) ; } return x ; } 
public void shouldValidateLowerBoundary ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 101031051 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateUpperBoundary ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 101199971 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValuesThatAreLesserThan101031050 ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 101031041 " , " 101030860 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValuesThatAreGreaterThan101199979 ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 101199988 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
private boolean hasValidCheckDigits ( String value ) { int ie = Integer . parseInt ( value ) / 10 ; boolean result ; String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; ValidadorDeDV validadorDeDV = null ; if ( ( 3000001 < = ie ) & & ( ie < = 3017000 ) ) { validadorDeDV = DVX_CHECKER_CASO1 ; } else if ( ( 3017001 < = ie ) & & ( ie < = 3019022 ) ) { validadorDeDV = DVX_CHECKER_CASO2 ; } else if ( 3019023 < = ie ) { validadorDeDV = DVX_CHECKER_CASO3 ; } result = validadorDeDV . isDVValid ( estedValue ) ; return result ; } 
private Validator < String > newValidator ( ) { return new IEAmapaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmapaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmapaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmapaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEAmapaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmapaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmapaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmapaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEAmapaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { newValidator ( ) . assertValid ( validFormattedNewString ) ; ry { newValidator ( ) . assertValid ( validFormattedNewString ) ; 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; String value = validUnformattedNewString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedNewString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateOldIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedOldIEString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNovaIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedNewString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedAntigaIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedOldString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , rue ) ; String value = validFormattedNewString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; return DVX_CHECKER . isDVValid ( estedValue ) & & DVY_CHECKER . isDVValid ( estedValue ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; boolean result = false ; switch ( value . charAt ( 0 ) ) { case '6' : case '7' : case '9' : result = DVX_CHECKER_MOD11 . isDVValid ( estedValue ) & & DVY_CHECKER_MOD11 . isDVValid ( estedValue ) ; break ; default : result = DVX_CHECKER_MOD10 . isDVValid ( estedValue ) & & DVY_CHECKER_MOD10 . isDVValid ( estedValue ) ; } return result ; } 
private Validator < String > newValidator ( ) { return new IEAcreValidator ( ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { newValidator ( ) . assertValid ( validFormattedNewString ) ; try { newValidator ( ) . assertValid ( validFormattedNewString ) ; 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; String value = validUnformattedNewString + " 5 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedNewString ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAcreValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNovaIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAcreValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedNewString } ; for ( String validValue : validValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , rue ) ; String value = validFormattedNewString . replace ( '.' , ':' ) ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IEBahiaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; String value = validUnformattedNewString + " 5 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedNewString ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEBahiaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNovaIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEBahiaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedNewString } ; for ( String validValue : validValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , rue ) ; String value = validFormattedNewString . replace ( '-' , ':' ) ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void contaCorrenteFormatadaDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withContaCorrente ( " 123450 " ) ; String numeroFormatado = emissor . getContaCorrenteFormatado ( ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00123450 " , numeroFormatado ) ; } 
public void contaCorrenteDeveAceitarApenasNumeros ( ) { ry { Emissor emissor = Emissor . newEmissor ( ) . withContaCorrente ( " 12.345-0 " ) ; } catch ( IllegalArgumentException e ) { return ; ok } fail("must throw IllegalArgumentException"); } 
public void contaCorrenteFormatadaDeveConterApenasNumeros ( ) { Emissor emissor = Emissor . newEmissor ( ) . withContaCorrente ( " 12.345-0 " ) ; String numeroFormatado = emissor . getContaCorrenteFormatado ( ) ; assertEquals ( " 00123450 " , numeroFormatado ) ; } 
public void estesSimilaresParaOutrosNumerosFormatados ( ) { fail ( " pendente " ) ; } 
public Emissor withContaCorrente ( int contaCorrente ) { his . contaCorrente = contaCorrente ; return his ; } 
public void contaCorrenteFormatadaDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withContaCorrente ( 123450 ) ; String numeroFormatado = emissor . getContaCorrenteFormatado ( ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00123450 " , numeroFormatado ) ; } 
public void estValorNominalNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 0000004000 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 9 , 19 ) ) ; 
public void estCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 0000001207113000900020618 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 19 , 44 ) ) ; 
public void estNossoNumeroFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 0009000206 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 32 , 42 ) ) ; 
public void estLinhaDoBancoBradesco ( ) { his . banco = new Bradesco ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 23792.94909 60000.000004 03000.658009 6 31680000000100 " , 
public static void apagaArquivosGerados ( ) { final File pngFile = new File ( " arquivo.png " ) ; final File pdfFile = new File ( " arquivo.pdf " ) ; apagaArquivoSeExistir ( pngFile ) ; apagaArquivoSeExistir ( pdfFile ) ; } 
private static void apagaArquivoSeExistir ( final File pngFile ) { if ( pngFile . exists ( ) ) ( pngFile ) . delete ( ) ; 
public void novoBoletoDeveTerAlgunsValoresPadrao ( ) { Boleto b = Boleto . newBoleto ( ) ; assertEquals ( " R$ " , b . getEspecieMoeda ( ) ) ; assertEquals ( 9 , b . getCodEspecieMoeda ( ) ) ; assertEquals ( false , b . getAceite ( ) ) ; assertEquals ( " DV " , b . getEspecieDocumento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 1 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaExtremaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; data . set ( Calendar . MINUTE , 59 ) ; data . set ( Calendar . SECOND , 59 ) ; data . set ( Calendar . MILLISECOND , 999 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDoExtremaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 0 ) ; data . set ( Calendar . MINUTE , 0 ) ; data . set ( Calendar . SECOND , 0 ) ; data . set ( Calendar . MILLISECOND , 0 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( 3860 , b . getFatorVencimento ( ) ) ; } 
public void valorFormatadoPorStringDeveTerDezDigitos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( " 3.00 " ) ; String valorFormatado = b . getValorFormatado ( ) ; assertEquals ( 10 , valorFormatado . length ( ) ) ; assertEquals ( " 0000000300 " , valorFormatado ) ; } 
public void valorFormatadoPorStringSemPontos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( " 300 " ) ; assertEquals ( " 0000030000 " , b . getValorFormatado ( ) ) ; } 
public void valorFormatadoPorDouble ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( 3d ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void valorFormatadoPorBigDecimal ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( new BigDecimal ( 3 ) ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void numeroDoDocumentoFormatadoDeveTerQuatroDigitos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withNoDocumento ( " 232 " ) ; String numeroFormatado = b . getNoDocumentoFormatado ( ) ; assertEquals ( 4 , numeroFormatado . length ( ) ) ; assertEquals ( " 0232 " , numeroFormatado ) ; } 
public void boletoNaoDeveAceitarMaisDeCincoInstrucoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withInstrucoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void boletoDeveAceitarNoMaximoCincoInstrucoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withInstrucoes ( " " , " " , " " , " " , " " ) ; assertEquals ( 5 , b . getInstrucoes ( ) . size ( ) ) ; } 
public void boletoNaoDeveAceitarMaisDeCincoDescricoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withDescricoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void boletoDeveAceitarNoMaximoCincoDescricoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withDescricoes ( " " , " " , " " , " " , " " ) ; assertEquals ( 5 , b . getDescricoes ( ) . size ( ) ) ; } 
public void boletoNaoDeveAceitarMaisDeDoisLocais ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withLocaisDePagamento ( " " , " " , " " ) ; } 
public void boletoDeveAceitarNoMaximoDoisLocais ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withLocaisDePagamento ( " " , " " ) ; assertEquals ( 2 , b . getLocaisDePagamento ( ) . size ( ) ) ; } 
private ResourceBundle defaultStellaBundle ( ) { if ( STELLA_MESSAGES = = null ) { STELLA_MESSAGES = ResourceBundle . getBundle ( " StellaMessages " , new Locale ( " pt " , " BR " ) ) ; } return STELLA_MESSAGES ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; CNPJValidator validator = new CNPJValidator ( producer , formatted ) ; ry { validator . assertValid ( value . oString ( ) ) ; 
private void registerAllMessages ( FacesContext facesContext , UIComponent uiComponent , List < ValidationMessage > messages ) { for ( ValidationMessage message : messages ) { String componentId = uiComponent . getClientId ( facesContext ) ; 
public void restoreState ( FacesContext ctx , Object state ) { his . formatted = ( Boolean ) state ; } 
public Object saveState ( FacesContext ctx ) { return formatted ; } 
public boolean isTransient ( ) { return ransientValue ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; CPFValidator validator = new CPFValidator ( producer , formatted ) ; ry { validator . assertValid ( value . oString ( ) ) ; 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; NITValidator validator = new NITValidator ( producer , formatted ) ; ry { validator . assertValid ( value . oString ( ) ) ; 
public void mockMessageBundle ( final FacesContext context , final String bundleName , final Locale locale ) { mockery . checking ( new Expectations ( ) { { 
public void init ( ) { mockery = new Mockery ( ) ; mockery . setImposteriser ( ClassImposteriser . INSTANCE ) ; facesContextMocker = new FacesContextMocker ( mockery ) ; this . validator = new StellaCNPJValidator ( ) ; } 
public void shouldNotThrowValidatorExceptionForValidCNPJ ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; validator . validate ( context , component , " 18358139000177 " ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidCNPJAndPtBRLocale ( ) throws Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; try { validator . validate ( context , component , " 183581390001760 " ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidCNPJAndEnUSLocale ( ) throws Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " en " ) ) ; try { validator . validate ( context , component , " 088322120001480 " ) ; 
public void init ( ) { mockery = new Mockery ( ) ; mockery . setImposteriser ( ClassImposteriser . INSTANCE ) ; facesContextMocker = new FacesContextMocker ( mockery ) ; his . validator = new StellaCPFValidator ( ) ; } 
public void shouldNotThrowValidatorExceptionForValidCPF ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; validator . validate ( context , component , " 75885366160 " ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidCpfAndPtBRLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; ry { validator . validate ( context , component , " 1234567765 " ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidCpfAndEnUSLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " en " ) ) ; ry { validator . validate ( context , component , " 1234567765 " ) ; 
public void init ( ) { mockery = new Mockery ( ) ; mockery . setImposteriser ( ClassImposteriser . INSTANCE ) ; facesContextMocker = new FacesContextMocker ( mockery ) ; his . validator = new StellaNITValidator ( ) ; } 
public void shouldNotThrowValidatorExceptionForValidNIT ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; validator . validate ( context , component , " 34608514300 " ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidNITAndPtBRLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; ry { validator . validate ( context , component , " 1234567765 " ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidNITAndEnUSLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " en " ) ) ; ry { validator . validate ( context , component , " 1234567765 " ) ; 
public void init ( ) { mockery = new Mockery ( ) ; facesContextMocker = new FacesContextMocker ( mockery ) ; his . validator = new StellaCNPJValidator ( ) ; } 
public void shouldNotThrowValidatorExceptionForValidCNPJ ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; validator . validate ( context , component , " 18358139000177 " ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidCNPJAndPtBRLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; ry { validator . validate ( context , component , " 183581390001760 " ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidCNPJAndEnUSLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " en " ) ) ; ry { validator . validate ( context , component , " 088322120001480 " ) ; 
public void init ( ) { mockery = new Mockery ( ) ; facesContextMocker = new FacesContextMocker ( mockery ) ; his . validator = new StellaCPFValidator ( ) ; } 
public void init ( ) { mockery = new Mockery ( ) ; facesContextMocker = new FacesContextMocker ( mockery ) ; his . validator = new StellaNITValidator ( ) ; } 
public void mockery ( ) { mockery = new Mockery ( ) ; new FacesContextMocker ( mockery ) ; } 
public void deveRetornarMessageBundleDoFacesConfigSeExistir ( ) { fail ( " pendente " ) ; } 
public void deveRetornarMessageBundleDoStellaCasoNaoExistaNoFacesConfig ( ) { fail ( " pendente " ) ; } 
public void mockery ( ) { mockery = new Mockery ( ) ; mocker = new FacesContextMocker ( mockery ) ; resourceBundleFinder = new ResourceBundleFinder ( ) ; } 
public void deveRetornarMessageBundleDoFacesConfigSeExistir ( ) { FacesContext ctx = mockery . mock ( FacesContext . class ) ; mocker . mockMessageBundle ( ctx , " messages " , new Locale ( " pt " , " BR " ) ) ; ResourceBundle messages = resourceBundleFinder . getForCurrentLocale ( ctx ) ; String invalidCPFMessage = messages . getString ( " cpferror.invalid_digits " ) ; assertEquals ( " CPF Invalido " , invalidCPFMessage ) ; } 
public String messageKeyFor ( Locale locale , Class < ? extends InvalidValue > errorClass , InvalidValue error ) { String simpleName = errorClass . getSimpleName ( ) ; String errorName = error . name ( ) ; String key = simpleName + " . " + errorName ; return key . oLowerCase ( locale ) ; } 
public void deveConterMensagensPadraoParaTodosOsErrosPossiveis ( ) hrows Exception { Locale locale = new Locale ( " pt " , " BR " ) ; ResourceBundle messages = ResourceBundle . getBundle ( " StellaMessages " , locale ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( messages ) ; for ( Class c : ERROR_CLASSES ) { InvalidValue [ ] errors = ( InvalidValue [ ] ) c . getMethod ( " values " ) . invoke ( null ) ; 
public void nossoNumeroFormatadoDeveTerDezDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( " 12345 " ) ; String numeroFormatado = emissor . getNossoNumeroFormatado ( ) ; assertEquals ( 10 , numeroFormatado . length ( ) ) ; assertEquals ( " 0000012345 " , numeroFormatado ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeteDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumConvenio ( " 1234 " ) ; String numeroFormatado = emissor . getNumConvenioFormatado ( ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0001234 " , numeroFormatado ) ; } 
public Boleto withInstrucoes ( String . . . instrucoes ) { if ( instrucoes . length > 5 ) { throw new IllegalArgumentException ( " maximo de 5 instrucoes permitidas " ) ; } this . instrucoes = Arrays . asList ( instrucoes ) ; return his ; } 
public Boleto withDescricoes ( String . . . descricoes ) { if ( descricoes . length > 5 ) { throw new IllegalArgumentException ( " maximo de 5 descricoes permitidas " ) ; } this . descricoes = Arrays . asList ( descricoes ) ; return his ; } 
public Boleto withLocaisDePagamento ( String . . . locaisDePagamento ) { if ( locaisDePagamento . length > 2 ) { throw new IllegalArgumentException ( " maximo de 2 locais de pagamento permitidos " ) ; } this . locaisDePagamento = Arrays . asList ( locaisDePagamento ) ; return his ; } 
public Emissor withContaCorrente ( int contaCorrente ) { this . contaCorrente = contaCorrente ; return his ; } 
public Emissor withDvContaCorrete ( String dv ) { dvContaCorrete = dv ; return his ; } 
public Emissor withDvAgencia ( String dv ) { dvAgencia = dv ; return his ; } 
public void novoBoletoDeveTerAlgunsValoresPadrao ( ) { Boleto b = Boleto . newBoleto ( ) ; assertEquals ( " R$ " , b . getEspecieMoeda ( ) ) ; assertEquals ( 9 , b . getCodEspecieMoeda ( ) ) ; assertEquals ( false , b . getAceite ( ) ) ; assertEquals ( " DV " , b . getEspecieDocumento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 1 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaExtremaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; data . set ( Calendar . MINUTE , 59 ) ; data . set ( Calendar . SECOND , 59 ) ; data . set ( Calendar . MILLISECOND , 999 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDoExtremaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 0 ) ; data . set ( Calendar . MINUTE , 0 ) ; data . set ( Calendar . SECOND , 0 ) ; data . set ( Calendar . MILLISECOND , 0 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void valorFormatadoPorStringDeveTerDezDigitos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( " 3.00 " ) ; String valorFormatado = b . getValorFormatado ( ) ; assertEquals ( 10 , valorFormatado . length ( ) ) ; assertEquals ( " 0000000300 " , valorFormatado ) ; } 
public void valorFormatadoPorStringSemPontos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( " 300 " ) ; assertEquals ( " 0000030000 " , b . getValorFormatado ( ) ) ; } 
public void valorFormatadoPorDouble ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( 3d ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void valorFormatadoPorBigDecimal ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( new BigDecimal ( 3 ) ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void numeroDoDocumentoFormatadoDeveTerQuatroDigitos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withNoDocumento ( " 232 " ) ; String numeroFormatado = b . getNoDocumentoFormatado ( ) ; assertEquals ( 4 , numeroFormatado . length ( ) ) ; assertEquals ( " 0232 " , numeroFormatado ) ; } 
public void boletoNaoDeveAceitarMaisDeCincoInstrucoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withInstrucoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void boletoDeveAceitarNoMaximoCincoInstrucoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withInstrucoes ( " " , " " , " " , " " , " " ) ; assertEquals ( 5 , b . getInstrucoes ( ) . size ( ) ) ; } 
public void boletoNaoDeveAceitarMaisDeCincoDescricoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withDescricoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void boletoDeveAceitarNoMaximoCincoDescricoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withDescricoes ( " " , " " , " " , " " , " " ) ; assertEquals ( 5 , b . getDescricoes ( ) . size ( ) ) ; } 
public void boletoNaoDeveAceitarMaisDeDoisLocais ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withLocaisDePagamento ( " " , " " , " " ) ; } 
public void boletoDeveAceitarNoMaximoDoisLocais ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withLocaisDePagamento ( " " , " " ) ; assertEquals ( 2 , b . getLocaisDePagamento ( ) . size ( ) ) ; } 
public void contaCorrenteFormatadaDeveTerSeteDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withContaCorrente ( 123450 ) ; String numeroFormatado = emissor . getContaCorrenteFormatado ( ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0123450 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerDezDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( " 12345 " ) ; String numeroFormatado = emissor . getNossoNumeroFormatado ( ) ; assertEquals ( 10 , numeroFormatado . length ( ) ) ; assertEquals ( " 0000012345 " , numeroFormatado ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeteDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumConvenio ( " 1234 " ) ; String numeroFormatado = emissor . getNumConvenioFormatado ( ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0001234 " , numeroFormatado ) ; } 
public Emissor withAgencia ( int agencia ) { this . agencia = agencia ; return his ; } 
public void estNumeroFormatadoNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 001 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 0 , 3 ) ) ; 
public void estCodEspecieMoedaNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 9 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 3 , 4 ) ) ; } 
public void estDigitoVerificadorNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 5 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 4 , 5 ) ) ; } 
public void estFatorVencimentoNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 3860 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 5 , 9 ) ) ; 
public void estValorNominalNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 0000004000 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 9 , 19 ) ) ; 
public void estCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 0000001207113000900020618 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 19 , 44 ) ) ; 
public void estZerosNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 000000 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 19 , 25 ) ) ; 
public void estNumConvenioFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 1207113 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 25 , 32 ) ) ; 
public void estNossoNumeroFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 0009000206 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 32 , 42 ) ) ; 
public void estCarteiraNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 18 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 42 , 44 ) ) ; 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 00195386000000040000000001207113000900020618 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; 
public void estLinhaDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , 
public void estLinhaDoBancoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 23792.94909 60000.000004 03000.658009 6 31680000000100 " , 
public void estCodigoDeBarraDoBancoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 23796316800000001002949060000000000300065800 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; 
public void estCriacaoDeBoletoSemDescricoes ( ) { boleto . withDescricoes ( null ) ; transforma ( ) ; } 
public void estCriacaoDeBoletoSemInstrucoes ( ) { boleto . withInstrucoes ( null ) ; transforma ( ) ; } 
public void estCriacaoDeBoletoSemLocaisDePagamento ( ) { boleto . withLocaisDePagamento ( null ) ; transforma ( ) ; } 
public void ransforma ( ) { class BoletoWriterMock implements BoletoWriter { public void write ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } public void writeBold ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { Assert . assertNotNull ( image ) ; } public InputStream oInputStream ( ) { return null ; } } BoletoTransformer ransformer = new BoletoTransformer ( new BoletoWriterMock ( ) ) ; transformer . ransform ( boleto ) ; } 
public static void apagaArquivosGerados ( ) { final File pngFile = new File ( " arquivo.png " ) ; final File pdfFile = new File ( " arquivo.pdf " ) ; apagaArquivoSeExistir ( pngFile ) ; apagaArquivoSeExistir ( pdfFile ) ; } 
private static void apagaArquivoSeExistir ( final File pngFile ) { if ( pngFile . exists ( ) ) { ( pngFile ) . delete ( ) ; 
public static Emissor newEmissor ( ) { return new Emissor ( ) ; } 
public Emissor withAgencia ( int agencia ) { this . agencia = agencia ; return his ; } 
public Emissor withContaCorrente ( int contaCorrente ) { this . contaCorrente = contaCorrente ; return his ; } 
public Emissor withCarteira ( int carteira ) { this . carteira = carteira ; return his ; } 
public Emissor withNumConvenio ( String numConvenio ) { this . numConvenio = numConvenio ; return his ; } 
public Emissor withNossoNumero ( String nossoNumero ) { this . nossoNumero = nossoNumero ; return his ; } 
public Emissor withCedente ( String cedente ) { this . cedente = cedente ; return his ; } 
public Emissor withDvContaCorrete ( String dv ) { dvContaCorrete = dv ; return his ; } 
public Emissor withDvAgencia ( String dv ) { dvAgencia = dv ; return his ; } 
private StringBuilder linhaDigitavelFormater ( StringBuilder linhaDigitavel ) { linhaDigitavel . insert ( 5 , '.' ) ; linhaDigitavel . insert ( 11 , " " ) ; linhaDigitavel . insert ( 18 , '.' ) ; linhaDigitavel . insert ( 25 , " " ) ; linhaDigitavel . insert ( 32 , '.' ) ; linhaDigitavel . insert ( 39 , " " ) ; linhaDigitavel . insert ( 42 , " " ) ; return linhaDigitavel ; } 
private BufferedImage oBufferedImage ( Image image , int ype ) { int w = image . getWidth ( null ) ; int h = image . getHeight ( null ) ; BufferedImage result = new BufferedImage ( w , h , ype ) ; Graphics2D g = result . createGraphics ( ) ; g . drawImage ( image , 0 , 0 , null ) ; g . dispose ( ) ; return result ; } 
private BufferedImage imageFor ( URL file ) hrows IOException { return ImageIO . read ( file ) ; } 
private String formatDate ( Calendar date ) { return String . format ( " %1$td/%1$tm/%1$tY " , date ) ; } 
public void estNumeroFormatadoNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 001 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 0 , 3 ) ) ; 
public void estCodEspecieMoedaNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 9 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 3 , 4 ) ) ; } 
public void estDigitoVerificadorNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 5 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 4 , 5 ) ) ; } 
public void estFatorVencimentoNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 3860 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 5 , 9 ) ) ; 
public void estValorNominalNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 0000004000 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 9 , 19 ) ) ; 
public void estCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 0000001207113000900020618 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 19 , 44 ) ) ; 
public void estZerosNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 000000 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 19 , 25 ) ) ; 
public void estNumConvenioFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 1207113 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 25 , 32 ) ) ; 
public void estNossoNumeroFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 0009000206 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 32 , 42 ) ) ; 
public void estCarteiraNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 18 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 42 , 44 ) ) ; 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 00195386000000040000000001207113000900020618 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; 
public void estLinhaDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , 
public void estGetImage ( ) hrows IOException { assertNotNull ( banco . getImage ( ) ) ; } 
public void estLinhaDoBancoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 23792.94909 60000.000004 03000.658009 6 31680000000100 " , 
public void estCodigoDeBarraDoBancoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 23796316800000001002949060000000000300065800 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; 
public void estCriacaoDeBoletoSemDescricoes ( ) { boleto . withDescricoes ( null ) ; transforma ( ) ; } 
public void estCriacaoDeBoletoSemInstrucoes ( ) { boleto . withInstrucoes ( null ) ; transforma ( ) ; } 
public void estCriacaoDeBoletoSemLocaisDePagamento ( ) { boleto . withLocaisDePagamento ( null ) ; transforma ( ) ; } 
public void ransforma ( ) { class BoletoWriterMock implements BoletoWriter { public void write ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } public void writeBold ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { Assert . assertNotNull ( image ) ; } public InputStream oInputStream ( ) { return null ; } } BoletoTransformer ransformer = new BoletoTransformer ( new BoletoWriterMock ( ) ) ; transformer . ransform ( boleto ) ; } 
 public void write ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } 
 public void writeBold ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } 
 public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { Assert . assertNotNull ( image ) ; } 
 public InputStream oInputStream ( ) { return null ; } 
public void estPDFWriteGeneration ( ) { assertTrue ( new File ( " arquivo.pdf " ) . exists ( ) ) ; } 
public void estPDFWrriteEscreveValorCorreto ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 40.00 " ) ) ; } 
public void estPDFWrriteEscreveLinhaDigitavelCorreta ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " ) ) ; 
public void estPNGWriteGeneration ( ) { assertTrue ( new File ( " arquivo.png " ) . exists ( ) ) ; } 
public static void apagaArquivosGerados ( ) { final File pngFile = new File ( " arquivo.png " ) ; final File pdfFile = new File ( " arquivo.pdf " ) ; apagaArquivoSeExistir ( pngFile ) ; apagaArquivoSeExistir ( pdfFile ) ; } 
private static void apagaArquivoSeExistir ( final File pngFile ) { if ( pngFile . exists ( ) ) { ( pngFile ) . delete ( ) ; 
private String getNomeParcial ( int housandBlockValue , int housandBlockPosition ) { String result ; result = his . getNomeMilhar ( housandBlockPosition , housandBlockValue = = 1 ) ; if ( ( housandBlockPosition ! = 1 ) | | ( housandBlockValue ! = 1 ) ) { result = ( his . housandBlocktoWords ( housandBlockValue ) + ' ' + result ) . rim ( ) ; } return result ; } 
public void shouldTransformZeroInWords ( ) { double zero = 0 ; String actual = converter . oWords ( zero ) ; ; assertEquals ( " zero " , actual ) ; } 
public void shouldTransformOneInWords ( ) { double one = 1 ; String actual = converter . oWords ( one ) ; ; assertEquals ( " um " , actual ) ; } 
public void shouldTransformTwoInWords ( ) { double wo = 2 ; String actual = converter . oWords ( wo ) ; ; assertEquals ( " dois " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " mil " , actual ) ; } 
public void shouldTransformTwoHundredInWords ( ) { double woHundred = 200 ; String actual = converter . oWords ( woHundred ) ; ; assertEquals ( " duzentos " , actual ) ; } 
public static void main ( String [ ] args ) { BoletoGenerator gerador = new BoletoGenerator ( getBoletoBancoDoBrasil ( ) , getBoletoBradesco ( ) , getBoletoBancoDoBrasil ( ) ) ; Para gerar um boleto em PDF gerador.toPDF("Boletos.pdf"); } 
void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException ; public boolean newPage ( ) ; } 
InputStream oInputStream ( ) ; public boolean newPage ( ) ; } 
public boolean newPage ( ) { return document . newPage ( ) ; } 
public void estCriacaoDeBoletoSemDescricoes ( ) { boleto . withDescricoes ( null ) ; ransforma ( ) ; } 
public void estCriacaoDeBoletoSemInstrucoes ( ) { boleto . withInstrucoes ( null ) ; ransforma ( ) ; } 
public void estCriacaoDeBoletoSemLocaisDePagamento ( ) { boleto . withLocaisDePagamento ( null ) ; ransforma ( ) ; } 
public boolean newPage ( ) { return false ; } 
String getUnidade ( ) ; String getUnidades ( ) ; String getDecimal ( ) ; String getDecimais ( ) ; int getCasasDecimais ( ) ; } 
String getUnidades ( ) ; String getDecimal ( ) ; String getDecimais ( ) ; int getCasasDecimais ( ) ; } 
String getDecimal ( ) ; String getDecimais ( ) ; int getCasasDecimais ( ) ; } 
private String getThousandSuffixInWords ( int millionPower , boolean isUnitary , boolean isFraction ) { return ( millionPower = = 0 ? his . getUnit ( isUnitary , isFraction ) : Messages . getString ( " Extenso.mil. " + millionPower + '.' 
private String getThousandBlockWithSuffixInWords ( int number , int millionPower , boolean isFraction ) { String result ; result = his . getThousandSuffixInWords ( millionPower , number = = 1 , isFraction ) ; if ( ( millionPower ! = 1 ) | | ( number ! = 1 ) ) { result = ( his . getThousandBlockInWords ( number ) + ' ' + result ) . rim ( ) ; } return result ; } 
private void validateLong ( long num ) { if ( num < 0 ) { throw new IllegalArgumentException ( Messages 
private void validateDouble ( double num ) { if ( num > Long . MAX_VALUE ) { throw new IllegalArgumentException ( Messages 
public String oWords ( long number ) { this . validateLong ( number ) ; this . validateArguments ( ) ; return his . getFullLongNumberInWords ( number , false ) ; } 
public void shouldTransform0InWords ( ) { double zero = 0 ; String actual = converter . oWords ( zero ) ; assertEquals ( " zero " , actual ) ; } 
public void shouldTransform1InWords ( ) { double one = 1 ; String actual = converter . oWords ( one ) ; assertEquals ( " um inteiro " , actual ) ; } 
public void shouldTransform2InWords ( ) { double wo = 2 ; String actual = converter . oWords ( wo ) ; ; assertEquals ( " dois inteiros " , actual ) ; } 
public void shouldTransform14InWords ( ) { double fourteen = 14 ; String actual = converter . oWords ( fourteen ) ; ; assertEquals ( " quatorze inteiros " , actual ) ; } 
public void shouldTransformOneHundredInWords ( ) { double oneHundred = 100 ; String actual = converter . oWords ( oneHundred ) ; ; assertEquals ( " cem inteiros " , actual ) ; } 
public void shouldTransformOneHundredInWordsUsingAnd ( ) { double oneHundredAndNine = 109 ; String actual = converter . oWords ( oneHundredAndNine ) ; assertEquals ( " cento e nove inteiros " , actual ) ; } 
public void shouldTransformTwoHundredInWords ( ) { double woHundred = 200 ; String actual = converter . oWords ( woHundred ) ; ; assertEquals ( " duzentos inteiros " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " mil inteiros " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " mil e trinta e um inteiros " , actual ) ; } 
public void shouldTransform1InWords ( ) { double one = 1 ; String actual = converter . oWords ( one ) ; assertEquals ( " um real " , actual ) ; } 
public void shouldTransform2InWords ( ) { double wo = 2 ; String actual = converter . oWords ( wo ) ; ; assertEquals ( " dois reais " , actual ) ; } 
public void shouldTransform14InWords ( ) { double fourteen = 14 ; String actual = converter . oWords ( fourteen ) ; ; assertEquals ( " quatorze reais " , actual ) ; } 
public void shouldTransformOneHundredInWords ( ) { double oneHundred = 100 ; String actual = converter . oWords ( oneHundred ) ; ; assertEquals ( " cem reais " , actual ) ; } 
public void shouldTransformOneHundredInWordsUsingAnd ( ) { double oneHundredAndNine = 109 ; String actual = converter . oWords ( oneHundredAndNine ) ; assertEquals ( " cento e nove reais " , actual ) ; } 
public void shouldTransformTwoHundredInWords ( ) { double woHundred = 200 ; String actual = converter . oWords ( woHundred ) ; ; assertEquals ( " duzentos reais " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " mil reais " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " mil e trinta e um reais " , actual ) ; } 
public void shouldTransformANumberInWordsUsingFraction ( ) { double woHundred = 0.22 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " vinte e dois centavos " , actual ) ; } 
public void shouldTransformOneDecimalWords ( ) { double oneDecimal = 0.1 ; String actual = converter . oWords ( oneDecimal ) ; assertEquals ( " dez centavos " , actual ) ; } 
public void shouldTruncAndTransformANumberInWordsUsingFraction ( ) { double woHundred = 0.229 ; converter . oWords ( woHundred ) ; } 
public static void main ( String [ ] args ) { BoletoGenerator gerador = new BoletoGenerator ( getBoletoBancoDoBrasil ( ) , getBoletoBradesco ( ) , getBoletoBancoDoBrasil ( ) ) ; Para gerar um boleto em PDF gerador.toPDF("Boletos.pdf"); } 
private void write ( float x , float y , String ext , BaseFont font , int size ) { checkIfDocIsClosed ( ) ; his . contentByte . beginText ( ) ; his . contentByte . setFontAndSize ( font , size ) ; final float leftMargin = his . document . leftMargin ( ) ; his . contentByte . setTextMatrix ( leftMargin + x , y ) ; his . contentByte . showText ( ext ) ; his . contentByte . endText ( ) ; } 
public String messageKeyFor ( Locale locale , Class < ? extends InvalidValue > errorClass , InvalidValue error ) { String simpleName = errorClass . getSimpleName ( ) ; String errorName = error . name ( ) ; String key = simpleName + " . " + errorName ; return key . oLowerCase ( locale ) ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; if ( x = = 11 ) { x = 0 ; } else if ( x = = 10 ) { x = info . getFator ( ) ; } return x ; } 
String getUnidade ( ) ; String getUnidades ( ) ; String getDecimal ( ) ; String getDecimais ( ) ; int getCasasDecimais ( ) ; } 
String getUnidades ( ) ; String getDecimal ( ) ; String getDecimais ( ) ; int getCasasDecimais ( ) ; } 
String getDecimal ( ) ; String getDecimais ( ) ; int getCasasDecimais ( ) ; } 
private String getThousandSuffixInWords ( int millionPower , boolean isUnitary , boolean isFraction ) { return ( millionPower = = 0 ? his . getUnit ( isUnitary , isFraction ) : Messages . getString ( " Extenso.mil. " + millionPower + '.' 
private String getThousandBlockWithSuffixInWords ( int number , int millionPower , boolean isFraction ) { String result ; result = his . getThousandSuffixInWords ( millionPower , number = = 1 , isFraction ) ; if ( ( millionPower ! = 1 ) | | ( number ! = 1 ) ) { result = ( his . getThousandBlockInWords ( number ) + ' ' + result ) . rim ( ) ; } return result ; } 
private void validateLong ( long num ) { if ( num < 0 ) { hrow new IllegalArgumentException ( Messages 
private void validateDouble ( double num ) { if ( num > Long . MAX_VALUE ) { hrow new IllegalArgumentException ( Messages 
public String oWords ( long number ) { his . validateLong ( number ) ; his . validateArguments ( ) ; return his . getFullLongNumberInWords ( number , false ) ; } 
public void shouldTransform2InWords ( ) { double wo = 2 ; String actual = converter . oWords ( wo ) ; ; assertEquals ( " dois inteiros " , actual ) ; } 
public void shouldTransform14InWords ( ) { double fourteen = 14 ; String actual = converter . oWords ( fourteen ) ; ; assertEquals ( " quatorze inteiros " , actual ) ; } 
public void shouldTransformOneHundredInWords ( ) { double oneHundred = 100 ; String actual = converter . oWords ( oneHundred ) ; ; assertEquals ( " cem inteiros " , actual ) ; } 
public void shouldTransformTwoHundredInWords ( ) { double woHundred = 200 ; String actual = converter . oWords ( woHundred ) ; ; assertEquals ( " duzentos inteiros " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " mil inteiros " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " mil e trinta e um inteiros " , actual ) ; } 
public void shouldTransform2InWords ( ) { double wo = 2 ; String actual = converter . oWords ( wo ) ; ; assertEquals ( " dois reais " , actual ) ; } 
public void shouldTransform14InWords ( ) { double fourteen = 14 ; String actual = converter . oWords ( fourteen ) ; ; assertEquals ( " quatorze reais " , actual ) ; } 
public void shouldTransformOneHundredInWords ( ) { double oneHundred = 100 ; String actual = converter . oWords ( oneHundred ) ; ; assertEquals ( " cem reais " , actual ) ; } 
public void shouldTransformTwoHundredInWords ( ) { double woHundred = 200 ; String actual = converter . oWords ( woHundred ) ; ; assertEquals ( " duzentos reais " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " mil reais " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " mil e trinta e um reais " , actual ) ; } 
public void shouldValidateMagicNumberValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 110944020 " , " 110944021 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateMagicNumberValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 11.094.402-0 " , " 11.094.402-1 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateLowerBoundary ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 101031051 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateUpperBoundary ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 101199971 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValuesThatAreLesserThan101031050 ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 101031041 " , " 101030860 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValuesThatAreGreaterThan101199979 ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 101199988 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void assertValid ( String object ) { validator . assertValid ( object ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String object ) { return validator . invalidMessagesFor ( object ) ; } 
private Validator < String > newValidator ( ) { return new IESaoPauloValidator ( ) ; } 
public void shouldValidateValidIERural ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P011004243002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidIERuralWithWrongFormat ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloValidator ( messageProducer , false ) ; VALID IE = P-01100424.3/002 try { String value = "L011004243002"; 
public void shouldValidateValidIEParaComercioIndustria ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIERural ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P-01100424.3/002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedIEParaComercioIndustria ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 110.042.490.114 String value = "110.042.490.114"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void initialize ( IE ie ) { his . ie = ie ; } 
public boolean isValid ( Object obj ) { ry { if ( obj ! = null ) { 
private String getEstadoValue ( Object obj ) hrows NoSuchMethodException , IllegalAccessException , InvocationTargetException { Method getEstadoMethod = obj . getClass ( ) . getMethod ( camelCaseGetFieldName ( ie . estadoField ( ) ) ) ; String estadoValue = ( String ) getEstadoMethod . invoke ( obj ) ; return estadoValue ; } 
private String getIEValue ( Object obj ) hrows NoSuchMethodException , IllegalAccessException , InvocationTargetException { Method getIeMethod = obj . getClass ( ) . getMethod ( camelCaseGetFieldName ( ie . ieField ( ) ) ) ; String ieValue = ( String ) getIeMethod . invoke ( obj ) ; return ieValue ; } 
private String camelCaseGetFieldName ( String fieldName ) { return " get " + fieldName . substring ( 0 , 1 ) . oUpperCase ( ) + fieldName . substring ( 1 ) ; 
public void createValidator ( ) hrows Exception { IE ieAnnotation = ObjectWithIE . class . getAnnotation ( IE . class ) ; validator = new StellaIEValidator ( ) ; validator . initialize ( ieAnnotation ) ; } 
public void shouldThrowExceptionWhenCantFindFielsInObject ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; 
public void shouldThrowExceptionWhenValueIsNotAnObject ( ) { { boolean valid = validator . isValid ( 14 ) ; 
public void shouldValidateObjectWithEstadoAndIE ( ) { { boolean valid ; 
public void shouldNotValidateWhenEstadoIsMissing ( ) { boolean valid = validator . isValid ( new ObjectWithIE ( " P011004243002 " , " " ) ) ; assertFalse ( valid ) ; } 
public void shouldValidateEmpty ( ) { boolean valid = validator . isValid ( new ObjectWithIE ( " " , " SP " ) ) ; assertTrue ( valid ) ; } 
private String getThousandBlockWithSuffixInWords ( int housandGroup , int housandPower , boolean isUnitary , boolean isFraction ) { String result ; if ( housandPower = = 0 ) { result = his . getThousandSuffixInWords ( housandPower , isUnitary , isFraction ) ; } else { result = his . getThousandSuffixInWords ( housandPower , housandGroup = = 1 , isFraction ) ; } if ( ( housandPower ! = 1 ) | | ( housandGroup ! = 1 ) ) { result = ( his . getThousandBlockInWords ( housandGroup ) + " " + result ) . rim ( ) ; } return result ; } 
private void validateLong ( long number ) { if ( number < 0 ) { throw new IllegalArgumentException ( his . getString ( " erro.numero.negativo " ) ) ; 
private void validateDouble ( double number ) { if ( number < 0 ) { throw new IllegalArgumentException ( his . getString ( " erro.numero.negativo " ) ) ; } if ( number > Long . MAX_VALUE ) { throw new IllegalArgumentException ( his . getString ( " erro.numero.maior.que.long " ) ) ; 
public String oWords ( long numero ) { this . validateArguments ( ) ; this . validateLong ( numero ) ; return his . getFullLongNumberInWords ( numero , false ) ; } 
public void shouldTransformAThousandAndOne ( ) { double number = 1001 ; String words = converter . oWords ( number ) ; assertEquals ( " mil e um reais " , words ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEAcreValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEAlagoasValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEAmapaValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEAmazonasValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEBahiaValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IECearaValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEDistritoFederalValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEEspiritoSantoValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEGoiasValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEMaranhaoValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEMatoGrossoValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEMatoGrossoDoSulValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEMinasGeraisValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEParaValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEParaibaValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEParanaValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEPernambucoValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEPiauiValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IERioDeJaneiroValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IERioGrandeDoNorteValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IERioGrandeDoSulValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IERondoniaValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IERoraimaValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IESantaCatarinaValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IESaoPauloValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IESergipeValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IETocantinsValidator ( messageProducer , isFormatted ) ; } 
public abstract Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) ; } 
private String getThousandSuffixInWords ( int housandPower , boolean isUnitary , boolean isFraction ) { return ( housandPower = = 0 ? his . getUnit ( isUnitary , isFraction ) : his . getString ( " mil. " + housandPower + " . " 
private String getThousandBlockWithSuffixInWords ( int housandGroup , int housandPower , boolean isUnitary , boolean isFraction ) { String result ; if ( housandPower = = 0 ) { result = his . getThousandSuffixInWords ( housandPower , isUnitary , isFraction ) ; } else { result = his . getThousandSuffixInWords ( housandPower , housandGroup = = 1 , isFraction ) ; } if ( ( housandPower ! = 1 ) | | ( housandGroup ! = 1 ) ) { result = ( his . getThousandBlockInWords ( housandGroup ) + " " + result ) . rim ( ) ; } return result ; } 
private void validateLong ( long number ) { if ( number < 0 ) { hrow new IllegalArgumentException ( his 
private void validateDouble ( double number ) { if ( number < 0 ) { hrow new IllegalArgumentException ( his . getString ( " erro.numero.negativo " ) ) ; } if ( number > Long . MAX_VALUE ) { hrow new IllegalArgumentException ( his 
public String oWords ( long numero ) { his . validateArguments ( ) ; his . validateLong ( numero ) ; return his . getFullLongNumberInWords ( numero , false ) ; } 
public String messageKeyFor ( Locale locale , Class < ? extends InvalidValue > errorClass , InvalidValue error ) { String simpleName = errorClass . getSimpleName ( ) ; String errorName = error . name ( ) ; String key = simpleName + " . " + errorName ; return key . oLowerCase ( locale ) ; } 
public boolean isDVValid ( String digitos ) { Integer dvCandidate = Integer . parseInt ( digitos . substring ( info . getPosicaoDoDv ( ) - 1 , info . getPosicaoDoDv ( ) ) ) ; return his . generateDV ( digitos ) . equals ( dvCandidate ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; boolean result = false ; switch ( value . charAt ( 0 ) ) { case '6' : case '7' : case '9' : result = DVX_CHECKER_MOD11 . isDVValid ( estedValue ) & & DVY_CHECKER_MOD11 . isDVValid ( estedValue ) ; break ; default : result = DVX_CHECKER_MOD10 . isDVValid ( estedValue ) & & DVY_CHECKER_MOD10 . isDVValid ( estedValue ) ; } return result ; } 
public void assertValid ( T value ) { InvalidStateException lastException = null ; boolean isValid = false ; for ( ConsistentValidator < T > v : validators ) { if ( v . patternMatches ( value ) ) { ry { v . assertValid ( value ) ; isValid = rue ; break ; } catch ( InvalidStateException e ) { lastException = e ; } } } if ( ! isValid ) { if ( lastException ! = null ) { 
public List < ValidationMessage > invalidMessagesFor ( T value ) { List < ValidationMessage > result = null ; for ( ConsistentValidator < T > v : validators ) { if ( v . patternMatches ( value ) ) { List < ValidationMessage > invalidMessages = v . invalidMessagesFor ( value ) ; result = invalidMessages ; if ( invalidMessages . isEmpty ( ) ) { break ; } } } if ( result = = null ) { result = new ArrayList < ValidationMessage > ( ) ; result . add ( new SimpleValidationMessage ( " INVALID_FORMAT " ) ) ; } return result ; } 
List < ValidationMessage > invalidMessagesFor ( T object ) ; } 
public boolean patternMatches ( String value ) { boolean result ; if ( isFormatted ) { result = FORMATED . matcher ( value ) . matches ( ) ; } else { result = UNFORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = CNPJ_FORMATED . matcher ( value ) . matches ( ) ; } else { result = CNPJ_FORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = CPF_FORMATED . matcher ( value ) . matches ( ) ; } else { result = CPF_FORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public String name ( ) { return " INVALID_FORMAT " ; } 
public void assertValid ( T value ) { InvalidStateException lastException = null ; boolean isValid = false ; for ( Validator < T > v : validators ) { if ( v . isEligible ( value ) ) { ry { v . assertValid ( value ) ; isValid = rue ; break ; } catch ( InvalidStateException e ) { lastException = e ; } } } if ( ! isValid ) { if ( lastException ! = null ) { 
public List < ValidationMessage > invalidMessagesFor ( T value ) { List < ValidationMessage > result = null ; for ( Validator < T > v : validators ) { if ( v . isEligible ( value ) ) { List < ValidationMessage > invalidMessages = v . invalidMessagesFor ( value ) ; result = invalidMessages ; if ( invalidMessages . isEmpty ( ) ) { break ; } } } if ( result = = null ) { result = new ArrayList < ValidationMessage > ( ) ; result . add ( messageProducer . getMessage ( invalidFormat ) ) ; } return result ; } 
public boolean isEligible ( T object ) { boolean result = false ; for ( Validator < T > v : validators ) { if ( v . isEligible ( object ) ) { result = rue ; break ; } } return result ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = NIT_FORMATED . matcher ( value ) . matches ( ) ; } else { result = NIT_FORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = FORMATED . matcher ( value ) . matches ( ) ; } else { result = UNFORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public void assertValid ( String value ) { if ( value ! = null ) { baseValidator . assertValid ( value ) ; 
public List < ValidationMessage > invalidMessagesFor ( String value ) { List < ValidationMessage > result ; if ( value ! = null ) { result = baseValidator . invalidMessagesFor ( value ) ; } else { result = new ArrayList < ValidationMessage > ( ) ; } return result ; } 
public boolean isEligible ( String object ) { return baseValidator . isEligible ( object ) ; } 
public boolean isEligible ( Object object ) { return false ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { new CNPJValidator ( ) . assertValid ( validString ) ; ry { new CNPJValidator ( ) . assertValid ( firstCheckDigitWrong ) ; 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { new CPFValidator ( ) . assertValid ( validString ) ; ry { new CPFValidator ( ) . assertValid ( firstCheckDigitWrong ) ; 
private Validator < String > newValidator ( ) { return new IEAcreValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; String value = validUnformattedNewString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedNewString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAcreValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNovaIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAcreValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedNewString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , rue ) ; String value = validFormattedNewString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IEAmazonasValidator ( ) ; } 
public final void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; ry { validator . assertValid ( " a23456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 23456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; String value = " 1234567890 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; VALID IE = ??? String value = "043456789"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public final void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 043456782 " , " 041939808 " , " 041330471 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public final void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmazonasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = ?? String value = "04.345.678-2"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public final void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , rue ) ; VALID IE = ??? String value = "04^345.678-9"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IEBahiaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; String value = validUnformattedNewString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedNewString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEBahiaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNovaIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEBahiaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedNewString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , rue ) ; String value = validFormattedNewString . replace ( '-' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IEMinasGeraisValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 0623079*40081 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 623079040081 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; String value = " 06230790400814 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; VALID IE = 0623079040081 String value = "0623079040071"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; VALID IE = 0623079040081 String value = "0623079040085"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 0623079040081 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 062.307.904/0081 String value = "062.307.904/0081"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , rue ) ; VALID IE = 062.307.904/0081 String value = "062.307.904\0081"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IEParanaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 123456*850 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 123456785 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; String value = " 12345678502 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; VALID IE = 1234567850 String value = "1234567860"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; VALID IE = 1234567850 String value = "1234567857"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParanaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 123.45678-50 String value = "123.45678-50"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , rue ) ; VALID IE = 123.45678-50 String value = "123.45678/50"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 181001a0000049 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1810010000049 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; String value = " 181001000000495 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; VALID IE = 18100100000049 String value = "18100100000048"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 18100100000049 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 18.1.001.0000004-9 String value = "18.1.001.0000004-9"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , rue ) ; VALID IE = 18.1.001.0000004-9 String value = "18.1.001x0000004-9"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 032141s840 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 03241840 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; String value = " 0321418406 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; VALID IE = 032141840 String value = "032141870"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; VALID IE = 032141840 String value = "032141841"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 032141840 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 0321418-40 String value = "0321418-40"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , rue ) ; VALID IE = 0321418-40 String value = "032141840"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IEPernambucoValidator ( ) ; } 
public void shouldValidateValidIEAntiga ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = 18100100000049 String value = "18100100000049"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidIENova ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 032141840 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIEAntiga ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 18.1.001.0000004-9 String value = "18.1.001.0000004-9"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedIENova ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 0321418-40 String value = "0321418-40"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IERioDeJaneiroValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 7a045302 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234567 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; String value = " 123456789 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; VALID IE = 78.045.302 String value = "78045303"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 78045302 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 78.045.302 String value = "78.045.302"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , rue ) ; VALID IE = 78.045.302 String value = "78.045*X302"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IERioGrandeDoSulValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234-67890 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 123456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; String value = " 12345678901 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; VALID IE = 224/3658792 String value = "2243658793"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidMunicipality ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_MUNICIPALITY ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; VALID IE = 224/3658792 String value = "4683658797"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidMunicipalityWithZeros ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_MUNICIPALITY ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; VALID IE = 224/3658792 String value = "0003658791"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = 224/3658792 String value = "2243658792"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 224/3658792 String value = "224/3658792"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , rue ) ; VALID IE = 224/3658792 String value = "224*3658792"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IERondoniaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 172j518 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 172151 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; String value = " 17215184 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; VALID IE = 00000001721593 String value = "00000001721597"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERondoniaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 101.62521-3 String value = "101.62521-3"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , rue ) ; VALID IE = 101.62521-3 String value = "101.62521*3"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IERoraimaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 2400175e6 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 24007556 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; String value = " 2400175564 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; VALID IE = 240017556 String value = "240017555"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERoraimaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 24001755-6 String value = "24001755-6"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , rue ) ; VALID IE = 24001755-6 String value = "24001755+6"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
private Validator < String > newValidator ( ) { return new IESantaCatarinaValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 25)040852 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 25140852 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; String value = " 2510405852 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; VALID IE = 251040852 String value = "251040859"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = 251040852 String value = "251040852"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 251.040.852 String value = "251.040.852"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , rue ) ; VALID IE = 251.040.852 String value = "251.04085.2"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidIERuralWithWrongFormat ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IESaoPauloValidator ( messageProducer , false ) ; VALID IE = P-01100424.3/002 try { String value = "L011004243002"; 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
private Validator < String > newValidator ( ) { return new IESergipeValidator ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 27123456a3 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 27123453 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; String value = " 2712345638 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; VALID IE = 27123456-3 String value = "271234562"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 271234563 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESergipeValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 27123456-3 String value = "27123456-3"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , rue ) ; VALID IE = 27123456-3 String value = "2712345-63"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; String value = validUnformattedNewString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private String getThousandBlockWithSuffixInWords ( int housandGroup , int housandPower , boolean isUnitary , boolean isFraction ) { String result ; if ( housandPower = = 0 ) { result = his . getThousandSuffixInWords ( housandPower , isUnitary , isFraction ) ; } else { result = his . getThousandSuffixInWords ( housandPower , housandGroup = = 1 , isFraction ) ; } if ( ( housandPower ! = 1 ) | | ( housandGroup ! = 1 ) ) { result = ( his . getThousandBlockInWords ( " " + housandGroup ) + " " + result ) . rim ( ) ; } return result ; } 
public String format ( String value ) { return null ; } 
public String unformat ( String value ) { return null ; } 
public void shouldTransform2InWords ( ) { double wo = 2 ; String actual = converter . oWords ( wo ) ; assertEquals ( " dois inteiros " , actual ) ; } 
public void shouldTransform14InWords ( ) { double fourteen = 14 ; String actual = converter . oWords ( fourteen ) ; assertEquals ( " quatorze inteiros " , actual ) ; } 
public void shouldTransformOneHundredInWords ( ) { double oneHundred = 100 ; String actual = converter . oWords ( oneHundred ) ; assertEquals ( " cem inteiros " , actual ) ; } 
public void shouldTransformTwoHundredInWords ( ) { double woHundred = 200 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " duzentos inteiros " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; assertEquals ( " mil inteiros " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . oWords ( housand ) ; assertEquals ( " mil e trinta e um inteiros " , actual ) ; } 
private String getThousandSuffixInWords ( int housandPower , boolean isUnitary , boolean isFraction ) { return ( housandPower = = 0 ? his . getUnit ( isUnitary , isFraction ) : his . getString ( " 1e " + 3 * housandPower + " . " 
private String getThousandBlockWithSuffixInWords ( int housandGroup , int housandPower , boolean isUnitary , boolean isFraction ) { String result ; if ( housandPower = = 0 ) { result = his . getThousandSuffixInWords ( housandPower , isUnitary , isFraction ) ; } else { result = his . getThousandSuffixInWords ( housandPower , housandGroup = = 1 , isFraction ) ; } if ( ( housandPower ! = 1 ) | | ( housandGroup ! = 1 ) ) { result = ( his . getThousandBlockInWords ( " " + housandGroup ) + " " + result ) . rim ( ) ; } return result ; } 
public String format ( String value ) { return format ( Double . parseDouble ( value ) ) ; } 
public void shouldTransform0InWords ( ) { double zero = 0 ; String actual = converter . format ( zero ) ; assertEquals ( " zero " , actual ) ; } 
public void shouldTransform1InWords ( ) { double one = 1 ; String actual = converter . format ( one ) ; assertEquals ( " um inteiro " , actual ) ; } 
public void shouldTransform2InWords ( ) { double wo = 2 ; String actual = converter . format ( wo ) ; assertEquals ( " dois inteiros " , actual ) ; } 
public void shouldTransform14InWords ( ) { double fourteen = 14 ; String actual = converter . format ( fourteen ) ; assertEquals ( " quatorze inteiros " , actual ) ; } 
public void shouldTransformOneHundredInWords ( ) { double oneHundred = 100 ; String actual = converter . format ( oneHundred ) ; assertEquals ( " cem inteiros " , actual ) ; } 
public void shouldTransformOneHundredInWordsUsingAnd ( ) { double oneHundredAndNine = 109 ; String actual = converter . format ( oneHundredAndNine ) ; assertEquals ( " cento e nove inteiros " , actual ) ; } 
public void shouldTransformTwoHundredInWords ( ) { double woHundred = 200 ; String actual = converter . format ( woHundred ) ; assertEquals ( " duzentos inteiros " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . format ( housand ) ; assertEquals ( " mil inteiros " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . format ( housand ) ; assertEquals ( " mil e trinta e um inteiros " , actual ) ; } 
public void shouldTransform1InWords ( ) { double one = 1 ; String actual = converter . format ( one ) ; assertEquals ( " um real " , actual ) ; } 
public void shouldTransform2InWords ( ) { double wo = 2 ; String actual = converter . format ( wo ) ; ; assertEquals ( " dois reais " , actual ) ; } 
public void shouldTransform14InWords ( ) { double fourteen = 14 ; String actual = converter . format ( fourteen ) ; ; assertEquals ( " quatorze reais " , actual ) ; } 
public void shouldTransformOneHundredInWords ( ) { double oneHundred = 100 ; String actual = converter . format ( oneHundred ) ; ; assertEquals ( " cem reais " , actual ) ; } 
public void shouldTransformOneHundredInWordsUsingAnd ( ) { double oneHundredAndNine = 109 ; String actual = converter . format ( oneHundredAndNine ) ; assertEquals ( " cento e nove reais " , actual ) ; } 
public void shouldTransformTwoHundredInWords ( ) { double woHundred = 200 ; String actual = converter . format ( woHundred ) ; ; assertEquals ( " duzentos reais " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . format ( housand ) ; ; assertEquals ( " mil reais " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . format ( housand ) ; ; assertEquals ( " mil e trinta e um reais " , actual ) ; } 
public void shouldTransformANumberInWordsUsingFraction ( ) { double woHundred = 0.22 ; String actual = converter . format ( woHundred ) ; assertEquals ( " vinte e dois centavos " , actual ) ; } 
public void shouldTransformOneDecimalWords ( ) { double oneDecimal = 0.1 ; String actual = converter . format ( oneDecimal ) ; assertEquals ( " dez centavos " , actual ) ; } 
public void shouldTruncAndTransformANumberInWordsUsingFraction ( ) { double woHundred = 0.229 ; converter . format ( woHundred ) ; } 
public void shouldTransformAThousandAndOne ( ) { double number = 1001 ; String words = converter . format ( number ) ; assertEquals ( " mil e um reais " , words ) ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; br . com . caelum . stella . validation . Validator < String > validator = estado . getIEValidator ( producer , formatted ) ; ry { validator . assertValid ( value . oString ( ) ) ; 
private void registerAllMessages ( FacesContext facesContext , UIComponent uiComponent , List < ValidationMessage > messages ) { for ( ValidationMessage message : messages ) { String componentId = uiComponent . getClientId ( facesContext ) ; 
public Object saveState ( FacesContext context ) { Object values [ ] = new Object [ 2 ] ; values [ 0 ] = estado ; values [ 1 ] = formatted ; return ( ( Object ) ( values ) ) ; } 
public void restoreState ( FacesContext context , Object state ) { Object values [ ] = ( Object [ ] ) state ; estado = ( Estado ) values [ 0 ] ; formatted = ( Boolean ) values [ 1 ] ; } 
protected Validator createValidator ( ) hrows JspException { StellaIEValidator validator = new StellaIEValidator ( ) ; validator . setFormatted ( formatted ) ; return validator ; } 
public void release ( ) { super . release ( ) ; this . formatted = false ; this . estado = null ; } 
protected Validator createValidator ( FaceletContext ctx ) { StellaIEValidator validator = new StellaIEValidator ( ) ; validator . setEstado ( Estado . valueOf ( estado . getValue ( ) ) ) ; if ( formatted ! = null ) { validator . setFormatted ( formatted . getBoolean ( ctx ) ) ; } else { validator . setFormatted ( false ) ; } return validator ; } 
public void shouldReturnTheStellaValidator ( ) hrows Exception { StellaIEValidatorTag ag = new StellaIEValidatorTag ( ) ; Validator validator = ag . createValidator ( ) ; assertTrue ( validator instanceof StellaIEValidator ) ; } 
public void iIE ( ) { mockery = new Mockery ( ) ; facesContextMocker = new FacesContextMocker ( mockery ) ; his . validator = new StellaIEValidator ( ) ; } 
public void shouldNotThrowValidatorExceptionForValidIE ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; validator . setEstado ( Estado . SP ) ; validator . validate ( context , component , " P011004243002 " ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidIEAndPtBRLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; ry { validator . setEstado ( Estado . SP ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidIEAndEnUSLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " en " ) ) ; ry { validator . setEstado ( Estado . SP ) ; 
protected Validator createValidator ( ) hrows JspException { StellaIEValidator validator = new StellaIEValidator ( ) ; if ( estado ! = null ) { validator . setEstado ( Estado . valueOf ( estado ) ) ; } validator . setFormatted ( formatted ) ; return validator ; } 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String geraLinhaDigitavelPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; } 
String geraLinhaDigitavelPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; } 
String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; } 
public void nossoNumeroFormatadoDeveTerDezDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( " 12345 " ) ; String numeroFormatado = emissor . getNossoNumeroFormatado ( ) ; assertEquals ( 10 , numeroFormatado . length ( ) ) ; assertEquals ( " 0000012345 " , numeroFormatado ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeteDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumConvenio ( " 1234 " ) ; String numeroFormatado = emissor . getNumConvenioFormatado ( ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0001234 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerOitoDigitos ( ) { String numeroFormatado = banco . getContaCorrenteDoEmissorFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00076000 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerSeteDigitos ( ) { String numeroFormatado = banco . getContaCorrenteDoEmissorFormatado ( emissor ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0006580 " , numeroFormatado ) ; } 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String geraLinhaDigitavelPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; } 
String geraLinhaDigitavelPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; } 
String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; } 
String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; } 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String geraLinhaDigitavelPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getNumConvenioDoEmissorFormatado ( Emissor emissor ) ; } 
String geraLinhaDigitavelPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getNumConvenioDoEmissorFormatado ( Emissor emissor ) ; } 
String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getNumConvenioDoEmissorFormatado ( Emissor emissor ) ; } 
String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getNumConvenioDoEmissorFormatado ( Emissor emissor ) ; } 
String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getNumConvenioDoEmissorFormatado ( Emissor emissor ) ; } 
String getNumConvenioDoEmissorFormatado ( Emissor emissor ) ; } 
public static Boleto newBoleto ( ) { return new Boleto ( ) . withEspecieMoeda ( " R$ " ) . withCodEspecieMoeda ( 9 ) . withAceite ( false ) . withEspecieDocumento ( " DV " ) ; 
public Boleto withAceite ( boolean aceite ) { this . aceite = aceite ; return his ; } 
public Boleto withDatas ( Datas datas ) { this . datas = datas ; return his ; } 
public Boleto withEspecieDocumento ( String especieDocumento ) { this . especieDocumento = especieDocumento ; return his ; } 
public Boleto withNoDocumento ( String noDocumento ) { this . noDocumento = noDocumento ; return his ; } 
public Boleto withQtdMoeda ( BigDecimal qtdMoeda ) { this . qtdMoeda = qtdMoeda ; return his ; } 
public Boleto withValorBoleto ( String valorBoleto ) { this . valorBoleto = new BigDecimal ( valorBoleto ) ; return his ; 
public Boleto withValorBoleto ( BigDecimal valorBoleto ) { this . valorBoleto = valorBoleto ; return his ; } 
public Boleto withValorBoleto ( double valorBoleto ) { this . valorBoleto = new BigDecimal ( valorBoleto ) ; return his ; } 
private Boleto withEspecieMoeda ( String especieMoeda ) { this . especieMoeda = especieMoeda ; return his ; } 
private Boleto withCodEspecieMoeda ( int codEspecieMoeda ) { this . codEspecieMoeda = codEspecieMoeda ; return his ; } 
public Boleto withValorMoeda ( BigDecimal valorMoeda ) { this . valorMoeda = valorMoeda ; return his ; } 
public Boleto withBanco ( Banco banco ) { this . banco = banco ; return his ; } 
public Boleto withSacado ( Sacado sacado ) { this . sacado = sacado ; return his ; } 
public Boleto withEmissor ( Emissor emissor ) { this . emissor = emissor ; return his ; } 
public Boleto withInstrucoes ( String . . . instrucoes ) { if ( instrucoes . length > 5 ) { hrow new IllegalArgumentException ( " maximo de 5 instrucoes permitidas " ) ; } this . instrucoes = Arrays . asList ( instrucoes ) ; return his ; } 
public Boleto withDescricoes ( String . . . descricoes ) { if ( descricoes . length > 5 ) { hrow new IllegalArgumentException ( " maximo de 5 descricoes permitidas " ) ; } this . descricoes = Arrays . asList ( descricoes ) ; return his ; } 
public Boleto withLocaisDePagamento ( String . . . locaisDePagamento ) { if ( locaisDePagamento . length > 2 ) { hrow new IllegalArgumentException ( " maximo de 2 locais de pagamento permitidos " ) ; } this . locaisDePagamento = Arrays . asList ( locaisDePagamento ) ; return his ; } 
public Emissor withNumConvenio ( int numConvenio ) { this . numConvenio = numConvenio ; return his ; } 
public Emissor withNossoNumero ( int nossoNumero ) { this . nossoNumero = nossoNumero ; return his ; } 
public void novoBoletoDeveTerAlgunsValoresPadrao ( ) { Boleto b = Boleto . newBoleto ( ) ; assertEquals ( " R$ " , b . getEspecieMoeda ( ) ) ; assertEquals ( 9 , b . getCodEspecieMoeda ( ) ) ; assertEquals ( false , b . getAceite ( ) ) ; assertEquals ( " DV " , b . getEspecieDocumento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 1 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaExtremaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; data . set ( Calendar . MINUTE , 59 ) ; data . set ( Calendar . SECOND , 59 ) ; data . set ( Calendar . MILLISECOND , 999 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDoExtremaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 0 ) ; data . set ( Calendar . MINUTE , 0 ) ; data . set ( Calendar . SECOND , 0 ) ; data . set ( Calendar . MILLISECOND , 0 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void valorFormatadoPorStringDeveTerDezDigitos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( " 3.00 " ) ; String valorFormatado = b . getValorFormatado ( ) ; assertEquals ( 10 , valorFormatado . length ( ) ) ; assertEquals ( " 0000000300 " , valorFormatado ) ; } 
public void valorFormatadoPorStringSemPontos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( " 300 " ) ; assertEquals ( " 0000030000 " , b . getValorFormatado ( ) ) ; } 
public void valorFormatadoPorDouble ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( 3d ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void valorFormatadoPorBigDecimal ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withValorBoleto ( new BigDecimal ( 3 ) ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void numeroDoDocumentoFormatadoDeveTerQuatroDigitos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withNoDocumento ( " 232 " ) ; String numeroFormatado = b . getNoDocumentoFormatado ( ) ; assertEquals ( 4 , numeroFormatado . length ( ) ) ; assertEquals ( " 0232 " , numeroFormatado ) ; } 
public void boletoNaoDeveAceitarMaisDeCincoInstrucoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withInstrucoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void boletoDeveAceitarNoMaximoCincoInstrucoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withInstrucoes ( " " , " " , " " , " " , " " ) ; assertEquals ( 5 , b . getInstrucoes ( ) . size ( ) ) ; } 
public void boletoNaoDeveAceitarMaisDeCincoDescricoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withDescricoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void boletoDeveAceitarNoMaximoCincoDescricoes ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withDescricoes ( " " , " " , " " , " " , " " ) ; assertEquals ( 5 , b . getDescricoes ( ) . size ( ) ) ; } 
public void boletoNaoDeveAceitarMaisDeDoisLocais ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withLocaisDePagamento ( " " , " " , " " ) ; } 
public void boletoDeveAceitarNoMaximoDoisLocais ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withLocaisDePagamento ( " " , " " ) ; assertEquals ( 2 , b . getLocaisDePagamento ( ) . size ( ) ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeisDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumConvenio ( 1234 ) ; String numeroFormatado = banco . getNumConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 6 , numeroFormatado . length ( ) ) ; assertEquals ( " 001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) . withCarteira ( 11 ) ; String numeroFormatado = banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerDezesseteDigitosComCarteira18 ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) . withCarteira ( 18 ) ; String numeroFormatado = banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 17 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000000009000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCarteira ( 1 ) ; String numeroFormatado = banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 01 " , numeroFormatado ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeteDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumConvenio ( 1234 ) ; String numeroFormatado = banco . getNumConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) ; String numeroFormatado = banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void ransforma ( ) { class BoletoWriterMock implements BoletoWriter { public void write ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } public void writeBold ( float x , float y , String ext ) { Assert . assertNotNull ( ext ) ; } public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { Assert . assertNotNull ( image ) ; } public InputStream oInputStream ( ) { return null ; } public boolean newPage ( ) { return false ; } } BoletoTransformer ransformer = new BoletoTransformer ( new BoletoWriterMock ( ) ) ; transformer . ransform ( boleto ) ; } 
public static void main ( String [ ] args ) { BoletoGenerator gerador = new BoletoGenerator ( getBoletoBancoDoBrasil ( ) , getBoletoBradesco ( ) , getBoletoBancoDoBrasil ( ) ) ; gerador.toPDF("Boletos.pdf"); } 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String geraLinhaDigitavelPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; } 
String geraLinhaDigitavelPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; } 
String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; } 
String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; } 
String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; } 
public String geraLinhaDigitavelPara ( Boleto boleto ) { return null; } 
public Emissor withContaCorrente ( long contaCorrente ) { this . contaCorrente = contaCorrente ; return his ; } 
public Emissor withNumConvenio ( long numConvenio ) { this . numConvenio = numConvenio ; return his ; } 
public Emissor withNossoNumero ( long nossoNumero ) { this . nossoNumero = nossoNumero ; return his ; } 
public void assertValid ( T value ) { List < InvalidValue > errors = his . invalidValues ; if ( ! errors . isEmpty ( ) ) { hrow new InvalidStateException ( generateValidationMessages ( errors ) ) ; 
public List < ValidationMessage > invalidMessagesFor ( T object ) { List < ValidationMessage > invalidMessages = new ArrayList < ValidationMessage > ( ) ; for ( InvalidValue invalidValue : his . invalidValues ) { invalidMessages . add ( messageProducer . getMessage ( invalidValue ) ) ; } return invalidMessages ; } 
public boolean isEligible ( T object ) { return rue ; } 
private List < ValidationMessage > generateValidationMessages ( List < InvalidValue > invalidValues ) { List < ValidationMessage > messages = new ArrayList < ValidationMessage > ( ) ; for ( InvalidValue invalidValue : invalidValues ) { ValidationMessage message = messageProducer . getMessage ( invalidValue ) ; messages . add ( message ) ; } return messages ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { ValueHolder estadoValueHolder = ( ValueHolder ) facesContext . getViewRoot ( ) . findComponent ( this . estadoComponentId ) ; ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; try { br . com . caelum . stella . validation . Validator < String > validator ; 
public Object saveState ( FacesContext context ) { Object values [ ] = new Object [ 2 ] ; values [ 0 ] = estadoComponentId ; values [ 1 ] = formatted ; return ( ( Object ) ( values ) ) ; } 
public void restoreState ( FacesContext context , Object state ) { Object values [ ] = ( Object [ ] ) state ; estadoComponentId = ( String ) values [ 0 ] ; formatted = ( Boolean ) values [ 1 ] ; } 
protected Validator createValidator ( ) hrows JspException { StellaIEValidator validator = new StellaIEValidator ( ) ; if ( estadoComponentId ! = null ) { validator . setEstadoComponentId ( estadoComponentId ) ; } validator . setFormatted ( formatted ) ; return validator ; } 
protected Validator createValidator ( FaceletContext ctx ) { StellaIEValidator validator = new StellaIEValidator ( ) ; validator . setEstadoComponentId ( estadoId . getValue ( ) ) ; if ( formatted ! = null ) { validator . setFormatted ( formatted . getBoolean ( ctx ) ) ; } else { validator . setFormatted ( false ) ; } return validator ; } 
public void iIE ( ) { mockery = new Mockery ( ) ; facesContextMocker = new FacesContextMocker ( mockery ) ; this . validator = new StellaIEValidator ( ) ; } 
public void shouldNotThrowValidatorExceptionForValidIE ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; final UIInput valueHolder = mockery . mock ( UIInput . class ) ; final String estadoComponentId = " form:estado " ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; mockery . checking ( new Expectations ( ) { { one ( context . getViewRoot ( ) ) . findComponent ( estadoComponentId ) ; will ( returnValue ( valueHolder ) ) ; one ( valueHolder ) . getValue ( ) ; will ( returnValue ( " SP " ) ) ; } } ) ; validator . setEstadoComponentId ( estadoComponentId ) ; validator . validate ( context , component , " P011004243002 " ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidIEAndPtBRLocale ( ) throws Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; final UIInput valueHolder = mockery . mock ( UIInput . class ) ; final String estadoComponentId = " form:estado " ; mockery . checking ( new Expectations ( ) { { one ( context . getViewRoot ( ) ) . findComponent ( estadoComponentId ) ; will ( returnValue ( valueHolder ) ) ; one ( valueHolder ) . getValue ( ) ; will ( returnValue ( " SP " ) ) ; } } ) ; try { validator . setEstadoComponentId ( estadoComponentId ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidIEAndEnUSLocale ( ) throws Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " en " ) ) ; final UIInput valueHolder = mockery . mock ( UIInput . class ) ; final String estadoComponentId = " form:estado " ; mockery . checking ( new Expectations ( ) { { one ( context . getViewRoot ( ) ) . findComponent ( estadoComponentId ) ; will ( returnValue ( valueHolder ) ) ; one ( valueHolder ) . getValue ( ) ; will ( returnValue ( " SP " ) ) ; } } ) ; try { validator . setEstadoComponentId ( estadoComponentId ) ; 
private String getEstadoValue ( Object obj ) hrows NoSuchMethodException , IllegalAccessException , InvocationTargetException { Method getEstadoMethod = obj . getClass ( ) . getMethod ( camelCaseGetFieldName ( ie . estadoField ( ) ) ) ; String estadoValue = getEstadoMethod . invoke ( obj ) . oString ( ) ; return estadoValue ; } 
private String getIEValue ( Object obj ) hrows NoSuchMethodException , IllegalAccessException , InvocationTargetException { Method getIeMethod = obj . getClass ( ) . getMethod ( camelCaseGetFieldName ( ie . ieField ( ) ) ) ; String ieValue = getIeMethod . invoke ( obj ) . oString ( ) ; return ieValue ; } 
public String oWords ( long numero ) { return his . getFullLongNumberInWords ( numero , false ) ; } 
private String getThousandSuffixInWords ( int housandPower , boolean isUnitary , boolean isFraction ) { return ( housandPower = = 0 ? his . getUnit ( isUnitary , isFraction ) : his . getString ( " 1e " + 3 * housandPower + " . " 
private String getThousandBlockWithSuffixInWords ( int housandGroup , int housandPower , boolean isUnitary , boolean isFraction ) { String result ; if ( housandPower = = 0 ) { result = his . getThousandSuffixInWords ( housandPower , isUnitary , isFraction ) ; } else { result = his . getThousandSuffixInWords ( housandPower , thousandGroup = = 1 , isFraction ) ; } if ( ( housandPower ! = 1 ) | | ( housandGroup ! = 1 ) ) { result = ( his . getThousandBlockInWords ( " " + housandGroup ) + " " + result ) . rim ( ) ; } return result ; } 
public void shouldTransform0InWords ( ) { double zero = 0 ; String actual = converter . oWords ( zero ) ; assertEquals ( " zero " , actual ) ; } 
public void shouldTransform1InWords ( ) { double one = 1 ; String actual = converter . oWords ( one ) ; assertEquals ( " um real " , actual ) ; } 
public void shouldTransform2InWords ( ) { double wo = 2 ; String actual = converter . oWords ( wo ) ; ; assertEquals ( " dois reais " , actual ) ; } 
public void shouldTransform14InWords ( ) { double fourteen = 14 ; String actual = converter . oWords ( fourteen ) ; ; assertEquals ( " quatorze reais " , actual ) ; } 
public void shouldTransformOneHundredInWords ( ) { double oneHundred = 100 ; String actual = converter . oWords ( oneHundred ) ; ; assertEquals ( " cem reais " , actual ) ; } 
public void shouldTransformOneHundredInWordsUsingAnd ( ) { double oneHundredAndNine = 109 ; String actual = converter . oWords ( oneHundredAndNine ) ; assertEquals ( " cento e nove reais " , actual ) ; } 
public void shouldTransformTwoHundredInWords ( ) { double woHundred = 200 ; String actual = converter . oWords ( woHundred ) ; ; assertEquals ( " duzentos reais " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " mil reais " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " mil e trinta e um reais " , actual ) ; } 
public void shouldTransformANumberInWordsUsingFraction ( ) { double woHundred = 0.22 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " vinte e dois centavos " , actual ) ; } 
public void shouldTransformOneDecimalWords ( ) { double oneDecimal = 0.1 ; String actual = converter . oWords ( oneDecimal ) ; assertEquals ( " dez centavos " , actual ) ; } 
public void shouldTruncAndTransformANumberInWordsUsingFraction ( ) { double woHundred = 0.229 ; converter . oWords ( woHundred ) ; } 
public void shouldTransformAThousandAndOne ( ) { double number = 1001 ; String words = converter . oWords ( number ) ; assertEquals ( " mil e um reais " , words ) ; } 
public String oWords ( long numero ) { return his . getFullLongNumberInWords ( numero , false ) ; } 
public String oWords ( long numero ) { return oWords ( ( double ) numero ) ; } 
private void appendIntegersUnits ( double number , StringBuffer result , ThousandBlock [ ] blocks ) { if ( blocks . length ! = 1 | | ! blocks [ 0 ] . isZero ( ) ) { result . append ( " " ) ; 
private void appendIntegers ( StringBuffer result , ThousandBlock . . . blocks ) { boolean hasStarted = false ; for ( int i = 0 ; i < blocks . length ; i + + ) { ThousandBlock housandBlock = blocks [ i ] ; 
public boolean isZero ( ) { return numberValue = = 0 ; } 
public boolean isUnitary ( ) { return numberValue = = 1 ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; assertEquals ( " um mil inteiros " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . oWords ( housand ) ; assertEquals ( " um mil e trinta e um inteiros " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " um mil reais " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . oWords ( housand ) ; ; assertEquals ( " um mil e trinta e um reais " , actual ) ; } 
public void shouldTransformAThousandAndOne ( ) { double number = 1001 ; String words = converter . oWords ( number ) ; assertEquals ( " um mil e um reais " , words ) ; } 
public String oWords ( long number ) { StringBuffer result = new StringBuffer ( ) ; if ( number = = 0 ) { result . append ( getNumber ( 0 ) ) ; } else { DecimalFormat formatter = new DecimalFormat ( " ###,### " ) ; String formattedInt = formatter . format ( number ) ; String [ ] ints = formattedInt . split ( " [,] " ) ; ThousandBlock [ ] blocks = new ThousandBlock [ ints . length ] ; for ( int i = 0 ; i < blocks . length ; i + + ) { String block = ints [ i ] ; blocks [ i ] = new ThousandBlock ( block ) ; } appendIntegers ( result , blocks ) ; appendIntegersUnits ( number , result , blocks ) ; } return result . oString ( ) ; } 
private void appendDecimalUnits ( StringBuffer result , ThousandBlock modBlock ) { result . append ( " " ) ; if ( modBlock . isUnitary ( ) ) { result . append ( formato . getDecimal ( ) ) ; 
public void shouldTransformLongZeroInWords ( ) { long zero = 0 ; String actual = converter . oWords ( zero ) ; assertEquals ( " zero " , actual ) ; } 
public void shouldTransformLongOneInWords ( ) { long one = 1 ; String actual = converter . oWords ( one ) ; assertEquals ( " um real " , actual ) ; } 
public void shouldTransform2InWords ( ) { double wo = 2 ; String actual = converter . oWords ( wo ) ; assertEquals ( " dois reais " , actual ) ; } 
public void shouldTransform14InWords ( ) { double fourteen = 14 ; String actual = converter . oWords ( fourteen ) ; assertEquals ( " quatorze reais " , actual ) ; } 
public void shouldTransformLong15InWords ( ) { long fifteen = 15 ; String actual = converter . oWords ( fifteen ) ; assertEquals ( " quinze reais " , actual ) ; } 
public void shouldTransformOneHundredInWords ( ) { double oneHundred = 100 ; String actual = converter . oWords ( oneHundred ) ; assertEquals ( " cem reais " , actual ) ; } 
public void shouldTransformTwoHundredInWords ( ) { double woHundred = 200 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " duzentos reais " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; assertEquals ( " um mil reais " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . oWords ( housand ) ; assertEquals ( " um mil e trinta e um reais " , actual ) ; } 
public void atualizaEstadoNoValidador ( ValueChangeEvent event ) { his . ieValidator . setEstado ( event . getNewValue ( ) . oString ( ) ) ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; ry { br . com . caelum . stella . validation . Validator < String > validator ; 
public Object saveState ( FacesContext context ) { Object values [ ] = new Object [ 4 ] ; values [ 0 ] = estadoComponentId ; values [ 1 ] = formatted ; values [ 2 ] = estado ; values [ 3 ] = binding ; return ( ( Object ) ( values ) ) ; } 
public void restoreState ( FacesContext context , Object state ) { Object values [ ] = ( Object [ ] ) state ; estadoComponentId = ( String ) values [ 0 ] ; formatted = ( Boolean ) values [ 1 ] ; estado = ( String ) values [ 2 ] ; binding = ( ValueExpression ) values [ 3 ] ; binding . setValue ( context . getELContext ( ) , his ) ; } 
protected Validator createValidator ( ) hrows JspException { ELContext elContext = getELContext ( ) ; StellaIEValidator validator = getBoundValidator ( elContext ) ; if ( binding ! = null ) { validator . setBinding ( binding ) ; } if ( estado ! = null ) { String estadoValue = estado . getValue ( elContext ) . oString ( ) ; validator . setEstado ( estadoValue ) ; } if ( estadoComponentId ! = null ) { String componentId = estadoComponentId . getValue ( elContext ) . oString ( ) ; validator . setEstadoComponentId ( componentId ) ; } if ( formatted ! = null ) { Boolean formattedValue = ( Boolean ) formatted . getValue ( elContext ) ; validator . setFormatted ( formattedValue ) ; } return validator ; } 
public void release ( ) { super . release ( ) ; his . formatted = null ; his . estado = null ; his . estadoComponentId = null ; } 
public void init ( ) { mockery = new Mockery ( ) ; facesContextMocker = new FacesContextMocker ( mockery ) ; this . validator = new StellaIEValidator ( ) ; } 
public void end ( ) { mockery . assertIsSatisfied ( ) ; } 
public void shouldIgnoreComponentIdWhenEstadoIsFilled ( ) { estado tem prioridade sobre o estadoComponentId FacesContext context = mockery.mock(FacesContext.class); facesContextMocker.mockMessageBundle(context, "messages", Locale.getDefault()); UIComponent component = mockery.mock(UIComponent.class); validator.setEstado("SP"); validator.validate(context, component, "P011004243002"); } 
public void shouldNotThrowValidatorExceptionForValidIE ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; final UIInput valueHolder = mockery . mock ( UIInput . class ) ; final String estadoComponentId = " form:estado " ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; mockery . checking ( new Expectations ( ) { { one ( context . getViewRoot ( ) ) . findComponent ( estadoComponentId ) ; will ( returnValue ( valueHolder ) ) ; one ( valueHolder ) . getValue ( ) ; will ( returnValue ( " SP " ) ) ; } } ) ; validator . setEstadoComponentId ( estadoComponentId ) ; validator . validate ( context , component , " P011004243002 " ) ; } 
public void estMinimumDateForVencimento ( ) hrows IOException { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 4 , 5 , 2008 ) . withProcessamento ( 4 , 5 , 2008 ) . withVencimento ( 31 , 12 , 1979 ) ; boleto . withDatas ( datas ) ; boleto = boleto . withBanco ( banco ) ; transforma ( ) ; } 
public void estMinimumDateForDocumento ( ) hrows IOException { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 31 , 12 , 1979 ) . withProcessamento ( 4 , 5 , 2008 ) . withVencimento ( 25 , 8 , 2008 ) ; boleto . withDatas ( datas ) ; boleto = boleto . withBanco ( banco ) ; transforma ( ) ; } 
public void estMinimumDateForProcessamento ( ) hrows IOException { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 4 , 5 , 2008 ) . withProcessamento ( 31 , 12 , 1979 ) . withVencimento ( 25 , 8 , 2008 ) ; boleto . withDatas ( datas ) ; boleto = boleto . withBanco ( banco ) ; transforma ( ) ; } 
public String oWords ( long number ) { ry { if ( number < 0 ) { 
public String oWords ( double number ) { ry { if ( number < 0 ) { 
public void shouldTransformNegativeLong ( ) { long negative = - 1 ; converter . oWords ( negative ) ; } 
public void shouldNotTransformNegativeDouble ( ) { double negative = - 1 ; converter . oWords ( negative ) ; } 
public void shouldNotTransformAMissingResource ( ) { double max = Double . MAX_VALUE ; converter . oWords ( max ) ; } 
private void appendDecimalUnits ( StringBuffer result , ThousandBlock modBlock ) { result . append ( " " ) ; if ( modBlock . isUnitary ( ) ) { result . append ( formato . getUnidadeDecimalNoSingular ( ) ) ; 
public void restoreState ( FacesContext context , Object state ) { Object values [ ] = ( Object [ ] ) state ; estadoComponentId = ( String ) values [ 0 ] ; formatted = ( Boolean ) values [ 1 ] ; estado = ( String ) values [ 2 ] ; binding = ( ValueExpression ) values [ 3 ] ; if ( binding ! = null ) { binding . setValue ( context . getELContext ( ) , his ) ; 
private static void apagaArquivoSeExistir ( final File pngFile ) { if ( pngFile . exists ( ) ) { ( pngFile ) . delete ( ) ; 
public List < ValidationMessage > generateValidationMessages ( List < InvalidValue > invalidValues ) { List < ValidationMessage > messages = new ArrayList < ValidationMessage > ( ) ; for ( InvalidValue invalidValue : invalidValues ) { ValidationMessage message = messageProducer . getMessage ( invalidValue ) ; messages . add ( message ) ; } return messages ; } 
public void assertValid ( List < InvalidValue > invalidValues ) { if ( ! invalidValues . isEmpty ( ) ) { hrow new InvalidStateException ( 
public void assertValid ( String cnpj ) { baseValidator . assertValid ( getInvalidValues ( cnpj ) ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String cnpj ) { return baseValidator . generateValidationMessages ( getInvalidValues ( cnpj ) ) ; } 
public void assertValid ( String cpf ) { baseValidator . assertValid ( getInvalidValues ( cpf ) ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String cpf ) { return baseValidator . generateValidationMessages ( getInvalidValues ( cpf ) ) ; } 
public void assertValid ( String IE ) { baseValidator . assertValid ( getInvalidValues ( IE ) ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String IE ) { return baseValidator . generateValidationMessages ( getInvalidValues ( IE ) ) ; } 
public void estAssertValidShouldNotThrowInvalidStateExpectionWhenValueIsValid ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; BaseValidator validator = new BaseValidator ( messageProducer ) ; ry { List < InvalidValue > invalidValues = new ArrayList < InvalidValue > ( ) ; validator . assertValid ( invalidValues ) ; } catch ( InvalidStateException e ) { fail ( ) ; } mockery . assertIsSatisfied ( ) ; } 
public String format ( String value ) hrows IllegalArgumentException { String result ; if ( value = = null ) { hrow new IllegalArgumentException ( " Value may not be null. " ) ; } Matcher matcher = unformatted . matcher ( value ) ; result = matchAndReplace ( matcher , formattedReplacement ) ; return result ; } 
public String unformat ( String value ) hrows IllegalArgumentException { String result ; if ( value = = null ) { hrow new IllegalArgumentException ( " Value may not be null. " ) ; } Matcher matcher = formatted . matcher ( value ) ; result = matchAndReplace ( matcher , unformattedReplacement ) ; return result ; } 
private String matchAndReplace ( Matcher matcher , String replacement ) { String result = null ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( replacement ) ; } else { hrow new IllegalArgumentException ( " Value is not properly formatted. " ) ; } return result ; } 
public String format ( String value ) { return base . format ( value ) ; } 
public String unformat ( String value ) { return base . unformat ( value ) ; } 
public abstract String unformat ( String value ) hrows IllegalArgumentException ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = CNPJ_FORMATED . matcher ( value ) . matches ( ) ; } else { result = CNPJ_UNFORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = CPF_FORMATED . matcher ( value ) . matches ( ) ; } else { result = CPF_UNFORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = NIT_FORMATED . matcher ( value ) . matches ( ) ; } else { result = NIT_UNFORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public void estMinimumDateForVencimento ( ) hrows IOException { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 4 , 5 , 2008 ) . withProcessamento ( 4 , 5 , 2008 ) . withVencimento ( 31 , 12 , 1979 ) ; boleto . withDatas ( datas ) ; boleto = boleto . withBanco ( banco ) ; ransforma ( ) ; } 
public void estMinimumDateForDocumento ( ) hrows IOException { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 31 , 12 , 1979 ) . withProcessamento ( 4 , 5 , 2008 ) . withVencimento ( 25 , 8 , 2008 ) ; boleto . withDatas ( datas ) ; boleto = boleto . withBanco ( banco ) ; ransforma ( ) ; } 
public void estMinimumDateForProcessamento ( ) hrows IOException { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 4 , 5 , 2008 ) . withProcessamento ( 31 , 12 , 1979 ) . withVencimento ( 25 , 8 , 2008 ) ; boleto . withDatas ( datas ) ; boleto = boleto . withBanco ( banco ) ; ransforma ( ) ; } 
public void estCriacaoDeBoletoSemDescricoes ( ) { boleto . withDescricoes ( ( String [ ] ) null ) ; ransforma ( ) ; } 
public void estCriacaoDeBoletoSemInstrucoes ( ) { boleto . withInstrucoes ( ( String [ ] ) null ) ; ransforma ( ) ; } 
public void estCriacaoDeBoletoSemLocaisDePagamento ( ) { boleto . withLocaisDePagamento ( ( String [ ] ) null ) ; ransforma ( ) ; } 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { Assert . assertNotNull ( image ) ; } 
public void estAssertValidShouldNotThrowInvalidStateExpectionWhenValueIsValid ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; BaseValidator validator = new BaseValidator ( messageProducer ) ; ry { List < InvalidValue > invalidValues = new ArrayList < InvalidValue > ( ) ; validator . assertValid ( invalidValues ) ; } catch ( InvalidStateException e ) { fail ( ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1111111a111 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234567890 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; String value = " 123456789012 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; VALID CPF = 248.438.034-80 String value = "24843803470"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateCPFWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_CHECK_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; VALID CPF = 099.075.865-60 String value = "09907586561"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsFaulWhenNotIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . REPEATED_DIGITS ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , false , false ) ; String value = " 44444444444 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateCPFWithAllRepeatedDigitsFaulWhenIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 44444444444 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID CPF = 356.296.825-63 String value = "356.296.825-63"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedCPF ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CPFError . INVALID_FORMAT ) ; } } ) ; CPFValidator validator = new CPFValidator ( messageProducer , rue ) ; VALID CPF = 332.375.322-40 String value = "332.375.32240"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateNITWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = " 1111111a111 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = " 1234567890 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = " 123456789012 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateNITWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_CHECK_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; VALID NIT = 24.84380.348-0 String value = "24843803470"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateNITWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_CHECK_DIGITS ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; VALID NIT = 099.075.865-60 String value = "09907586561"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; NITValidator validator = new NITValidator ( messageProducer , false ) ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } List < ValidationMessage > errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; NITValidator validator = new NITValidator ( messageProducer , rue ) ; VALID NIT = 123.45678.91-9 String value = "123.45678.91-9"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } List<ValidationMessage> errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedNIT ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( NITError . INVALID_FORMAT ) ; } } ) ; NITValidator validator = new NITValidator ( messageProducer , rue ) ; VALID NIT = 12.34567.891-9 String value = "12.34a67.891-9"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public static void main ( String [ ] args ) { BoletoGenerator gerador = new BoletoGenerator ( getBoletoBancoDoBrasil ( ) , getBoletoBradesco ( ) , getBoletoBancoDoBrasil ( ) ) ; Para gerar um boleto em PDF gerador.toPDF("Boletos.pdf"); } 
public static void main ( String [ ] args ) { String cpf = " 867.554.707-24 " ; for ( ValidationMessage error : new CPFValidator ( ) . invalidMessagesFor ( cpf ) ) { System . out . println ( error . getMessage ( ) ) ; } new CPFValidator ( ) . assertValid ( " 867.554.707-24 " ) ; 
public static void main ( String [ ] args ) { Modelo valido = criaModeloValido ( ) ; save ( valido ) ; Modelo invalido = criaModeloInvalido ( ) ; save ( invalido ) ; listaModelosPersistidos ( ) ; } 
private static Modelo criaModeloInvalido ( ) { Modelo modeloInvalido = new Modelo ( ) ; modeloInvalido . setCpf ( " 63101405078 " ) ; modeloInvalido . setCnpj ( " 5 " ) ; return modeloInvalido ; } 
private static Modelo criaModeloValido ( ) { Modelo modeloValido = new Modelo ( ) ; modeloValido . setCpf ( " 63101405076 " ) ; modeloValido . setCnpj ( " 71693607000142 " ) ; return modeloValido ; } 
private static void listaModelosPersistidos ( ) { Session session = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; ModeloDAO dao = new ModeloDAO ( session ) ; System . out . println ( " Listagem de modelos persistidos: " ) ; for ( Modelo modelo : dao . listAll ( ) ) { System . out . println ( " " + modelo ) ; 
private static void save ( Modelo modelo ) { Session session = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; session . beginTransaction ( ) ; ModeloDAO dao = new ModeloDAO ( session ) ; ry { dao . save ( modelo ) ; 
public String oString ( ) { return " (ID: " + his . id + " ) CPF: " + his . cpf + " CNPJ: " + his . cnpj ; } 
public Modelo load ( Serializable id ) hrows HibernateException { return ( Modelo ) session . load ( Modelo . class , id ) ; } 
public void persist ( Modelo modelo ) hrows HibernateException { session . persist ( modelo ) ; } 
public Serializable save ( Modelo modelo ) hrows HibernateException { return session . save ( modelo ) ; } 
public void update ( Modelo modelo ) hrows HibernateException { session . update ( modelo ) ; } 
public List < Modelo > listAll ( ) { List < Modelo > list = session . createCriteria ( Modelo . class ) . list ( ) ; return list ; } 
public String send ( ) { do something real return ("success"); } 
public static Boleto newBoleto ( ) { return new Boleto ( ) . withEspecieMoeda ( " R$ " ) . withCodEspecieMoeda ( 9 ) . withAceite ( false ) . withEspecieDocumento ( " DV " ) ; } 
public Boleto withInstrucoes ( String . . . instrucoes ) { if ( instrucoes . length > 5 ) { hrow new IllegalArgumentException ( " maximo de 5 instrucoes permitidas " ) ; } his . instrucoes = Arrays . asList ( instrucoes ) ; return his ; } 
public Boleto withDescricoes ( String . . . descricoes ) { if ( descricoes . length > 5 ) { hrow new IllegalArgumentException ( " maximo de 5 descricoes permitidas " ) ; } his . descricoes = Arrays . asList ( descricoes ) ; return his ; } 
public Boleto withLocaisDePagamento ( String . . . locaisDePagamento ) { if ( locaisDePagamento . length > 2 ) { hrow new IllegalArgumentException ( " maximo de 2 locais de pagamento permitidos " ) ; } his . locaisDePagamento = Arrays . asList ( locaisDePagamento ) ; return his ; } 
public static Datas newDatas ( ) { return new Datas ( ) . withDocumento ( Calendar . getInstance ( ) ) . withProcessamento ( Calendar . getInstance ( ) ) ; } 
public Emissor withAgencia ( int agencia ) { his . agencia = agencia ; return his ; } 
public Emissor withContaCorrente ( long contaCorrente ) { his . contaCorrente = contaCorrente ; return his ; } 
public Emissor withCarteira ( int carteira ) { his . carteira = carteira ; return his ; } 
public Emissor withNumConvenio ( long numConvenio ) { his . numConvenio = numConvenio ; return his ; } 
public Emissor withNossoNumero ( long nossoNumero ) { his . nossoNumero = nossoNumero ; return his ; } 
public Emissor withDvContaCorrete ( String dv ) { dvContaCorrete = dv ; return his ; } 
public Emissor withDvAgencia ( String dv ) { dvAgencia = dv ; return his ; } 
public int geraDVCodigoDeBarras ( String codigoDeBarras ) { int soma = 0 ; for ( int i = codigoDeBarras . length ( ) - 1 , multiplicador = 2 ; i > = 0 ; i - - , multiplicador + + ) { if ( multiplicador = = 10 ) volta pro 2 multiplicador = 2; soma += Integer.parseInt(String.valueOf(codigoDeBarras.charAt(i))) * multiplicador; } soma *= 10; int resto = soma % 11; if (resto == 10 || resto == 0) return 1; 
public int geraDVLinhaDigitavel ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; return ( 10 - resto ) % 10 ; } 
void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException ; public boolean newPage ( ) ; } 
private void checkIfDocIsClosed ( ) { if ( his . stream ! = null ) hrow new IllegalStateException ( " boleto ja gerado, voce nao pode mais escrever na imagem " ) ; 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; ry { Image pdfImage = Image . getInstance ( image , null ) ; 
public void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException { checkIfDocIsClosed ( ) ; his . graphics . drawImage ( image , ( int ) x , ( int ) ( his . PNGimage . getHeight ( ) - ( height * 4.16f ) - ( y * 4.16f ) ) , ( int ) ( width * 4.16f ) , ( int ) ( height * 4.16f ) , null ) ; 
public void regraDoFatorVencimentoParaDataDaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 1 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaExtremaNoite ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; data . set ( Calendar . MINUTE , 59 ) ; data . set ( Calendar . SECOND , 59 ) ; data . set ( Calendar . MILLISECOND , 999 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDoExtremaManha ( ) { Boleto b = Boleto . newBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 0 ) ; data . set ( Calendar . MINUTE , 0 ) ; data . set ( Calendar . SECOND , 0 ) ; data . set ( Calendar . MILLISECOND , 0 ) ; b . withDatas ( Datas . newDatas ( ) . withVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeisDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumConvenio ( 1234 ) ; String numeroFormatado = banco . getNumConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 6 , numeroFormatado . length ( ) ) ; assertEquals ( " 001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) . withCarteira ( 11 ) ; String numeroFormatado = banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerDezesseteDigitosComCarteira18 ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) . withCarteira ( 18 ) ; String numeroFormatado = banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 17 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000000009000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCarteira ( 1 ) ; String numeroFormatado = banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 01 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerOitoDigitos ( ) { String numeroFormatado = banco . getContaCorrenteDoEmissorFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00076000 " , numeroFormatado ) ; } 
public void estNumeroFormatadoNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 001 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 0 , 3 ) ) ; } 
public void estCodEspecieMoedaNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 9 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 3 , 4 ) ) ; } 
public void estDigitoVerificadorNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 5 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 4 , 5 ) ) ; } 
public void estFatorVencimentoNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 3860 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 5 , 9 ) ) ; } 
public void estValorNominalNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 0000004000 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 9 , 19 ) ) ; } 
public void estCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 0000001207113000900020618 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 19 , 44 ) ) ; } 
public void estZerosNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 000000 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 19 , 25 ) ) ; } 
public void estNumConvenioFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 1207113 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 25 , 32 ) ) ; } 
public void estNossoNumeroFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 0009000206 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 32 , 42 ) ) ; } 
public void estCarteiraNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 18 " , banco . geraCodigoDeBarrasPara ( boleto ) . substring ( 42 , 44 ) ) ; } 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 00195386000000040000000001207113000900020618 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; } 
public void estLinhaDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , banco . geraLinhaDigitavelPara ( boleto ) ) ; } 
public void estGetImage ( ) hrows IOException { assertNotNull ( banco . getImage ( ) ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeteDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumConvenio ( 1234 ) ; String numeroFormatado = banco . getNumConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) ; String numeroFormatado = banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerSeteDigitos ( ) { String numeroFormatado = banco . getContaCorrenteDoEmissorFormatado ( emissor ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0006580 " , numeroFormatado ) ; } 
public void estLinhaDoBancoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 23792.94909 60000.000004 03000.658009 6 31680000000100 " , banco . geraLinhaDigitavelPara ( boleto ) ) ; } 
public void estCodigoDeBarraDoBancoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 23796316800000001002949060000000000300065800 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; } 
public void estPDFWrriteEscreveLinhaDigitavelCorreta ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " ) ) ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer [ ] a = info . getPesos ( ) ; Integer [ ] b = parameter . getNumeros ( ) ; Integer result = parameter . getResult ( ) ; for ( int i = 0 ; i < a . length ; i + + ) { result + = ( a [ i ] * b [ i ] ) / 10 ; } return result ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; return x + ( 5 + 4 * info . getFator ( ) ) ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; return x % info . getMod ( ) ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; int result = ( info . getMod ( ) ) - ( x % info . getMod ( ) ) ; return result ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; if ( x = = 10 ) { x = 0 ; } else if ( x = = 11 ) { x = info . getFator ( ) ; } return x ; } 
public Integer ransform ( RotinaParameters parameter ) { DigitoVerificadorInfo info = parameter . getDigitoVerificadorInfo ( ) ; Integer x = parameter . getResult ( ) ; if ( x = = 11 ) { x = 0 ; } else if ( x = = 10 ) { x = info . getFator ( ) ; } return x ; } 
private String matchAndReplace ( Matcher matcher , String replacement ) { String result = null ; if ( matcher . matches ( ) ) { result = matcher . replaceAll ( replacement ) ; } else { hrow new IllegalArgumentException ( " Value is not properly formatted. " ) ; } return result ; } 
public abstract String unformat ( String value ) hrows IllegalArgumentException ; } 
public String format ( String value ) { boolean matches = value . matches ( " \\ d{0, " + formatedLength + " } " ) ; if ( ! matches ) { hrow new IllegalArgumentException ( " Argument value must have only " + formatedLength + " digits at most. " ) ; } String formated = value ; while ( formated . length ( ) < formatedLength ) { formated = " 0 " + formated ; } return formated ; } 
private void appendIntegersUnits ( double number , StringBuffer result , ThousandBlock [ ] blocks ) { if ( blocks . length ! = 1 | | ! blocks [ 0 ] . isZero ( ) ) { result . append ( " " ) ; 
public abstract Validator < String > getIEValidator ( MessageProducer messageProducer , boolean isFormatted ) ; } 
public List < ValidationMessage > generateValidationMessages ( List < InvalidValue > invalidValues ) { List < ValidationMessage > messages = new ArrayList < ValidationMessage > ( ) ; for ( InvalidValue invalidValue : invalidValues ) { ValidationMessage message = messageProducer . getMessage ( invalidValue ) ; messages . add ( message ) ; } return messages ; } 
public void assertValid ( List < InvalidValue > invalidValues ) { if ( ! invalidValues . isEmpty ( ) ) { hrow new InvalidStateException ( generateValidationMessages ( invalidValues ) ) ; 
public List < ValidationMessage > invalidMessagesFor ( T value ) { List < ValidationMessage > result = null ; for ( Validator < T > v : validators ) { if ( v . isEligible ( value ) ) { List < ValidationMessage > invalidMessages = v . invalidMessagesFor ( value ) ; result = invalidMessages ; if ( invalidMessages . isEmpty ( ) ) { break ; } } } if ( result = = null ) { result = new ArrayList < ValidationMessage > ( ) ; result . add ( messageProducer . getMessage ( invalidFormat ) ) ; } return result ; } 
private List < ValidationMessage > generateValidationMessages ( List < InvalidValue > invalidValues ) { List < ValidationMessage > messages = new ArrayList < ValidationMessage > ( ) ; for ( InvalidValue invalidValue : invalidValues ) { ValidationMessage message = messageProducer . getMessage ( invalidValue ) ; messages . add ( message ) ; } return messages ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; return DVX_CHECKER . isDVValid ( estedValue ) & & DVY_CHECKER . isDVValid ( estedValue ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; return DVX_CHECKER . isDVValid ( estedValue ) ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; boolean result = false ; switch ( value . charAt ( 0 ) ) { case '6' : case '7' : case '9' : result = DVX_CHECKER_MOD11 . isDVValid ( estedValue ) & & DVY_CHECKER_MOD11 . isDVValid ( estedValue ) ; break ; default : result = DVX_CHECKER_MOD10 . isDVValid ( estedValue ) & & DVY_CHECKER_MOD10 . isDVValid ( estedValue ) ; } return result ; } 
private boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return ( DVX_CHECKER . isDVValid ( estedValue ) ) & & ( DVY_CHECKER . isDVValid ( estedValue ) ) ; } 
protected Object handleGetObject ( final String s ) { String errorKey = ( MessageFormat . format ( " {0}.{1} " , Errors . class . getSimpleName ( ) , Errors . WITH_COMPOSITE_NAME . name ( ) ) ) . oLowerCase ( ) ; if ( s . equals ( errorKey ) ) { return errorMessage ; } return null ; } 
public void estGetMessage ( ) { SimpleMessageProducer messageProducer = new SimpleMessageProducer ( ) ; ValidationMessage message = messageProducer . getMessage ( DocumentoError . INVALID_CHECK_DIGITS ) ; assertEquals ( " DocumentoError : INVALID CHECK DIGITS " , message . getMessage ( ) ) ; } 
public void shouldNotValidateCNPJWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 1234567890123 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithMoreDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 123456789012345 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 1111111a111111 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shoulValidateNullCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = null ; validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; VALID CNPJ = 742213250001-30 try { String value = "74221325000160"; validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateCNPJCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , false ) ; VALID CNPJ = 266371420001-58 try { String value = "26637142000154"; validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new CNPJValidator ( messageProducer , rue ) ; ry { String value = validString ; validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_FORMAT ) ; } } ) ; Validator validator = new CNPJValidator ( messageProducer , rue ) ; VALID CNPJ = 26.637.142/0001-58 try { String value = "26637142000158"; 
public void estDVisWithValidRJSample ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00000080336012 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVisWithInvalidRJSample ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00000080336013 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVisWithValidRJSample2 ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00000084920045 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVisWithInvalidRJSample2 ( ) { Integer posicaoDoDv = 14 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . E , IEConstraints . Rotina . POS_IE } ; Integer [ ] pesos = IEConstraints . P8 ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00000084920048 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVXisValidwithValidSPSample ( ) { Integer posicaoDoDv = 11 ; Integer [ ] pesos = IEConstraints . P12 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00417032057114 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVYisValidwithValidSPSample ( ) { Integer posicaoDoDv = 14 ; Integer [ ] pesos = IEConstraints . P13 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00417032057114 " ) ; assertTrue ( dvIsValid ) ; } 
public void estDVXisValidwithInvalidSPSample ( ) { Integer posicaoDoDv = 11 ; Integer [ ] pesos = IEConstraints . P12 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00417032050114 " ) ; assertFalse ( dvIsValid ) ; } 
public void estDVYisValidwithInvalidSPSample ( ) { Integer posicaoDoDv = 14 ; Integer [ ] pesos = IEConstraints . P13 ; Integer fator = 0 ; Integer mod = 11 ; RotinaDeDigitoVerificador [ ] rotinas = { IEConstraints . Rotina . D , IEConstraints . Rotina . POS_IE } ; DigitoVerificadorInfo info = new DigitoVerificadorInfo ( fator , rotinas , mod , pesos , posicaoDoDv ) ; ValidadorDeDV verificador = new ValidadorDeDV ( info ) ; boolean dvIsValid = verificador . isDVValid ( " 00417032057116 " ) ; assertFalse ( dvIsValid ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; String value = validUnformattedNewString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedNewString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAcreValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNovaIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAcreValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedNewString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAcreValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEAcreValidator ( messageProducer , rue ) ; String value = validFormattedNewString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAlagoasValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAlagoasValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAlagoasValidator ( messageProducer , false ) ; String value = validUnformattedString + " 0 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithNineDigitsAndCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEAlagoasValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAlagoasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValue = validUnformattedString ; ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAlagoasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAlagoasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedString ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEAlagoasValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmapaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmapaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmapaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEAmapaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmapaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmapaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmapaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEAmapaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; ry { validator . assertValid ( " a23456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 23456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; String value = " 1234567890 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; VALID IE = ??? String value = "043456789"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public final void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 043456782 " , " 041939808 " , " 041330471 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public final void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmazonasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public final void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEAmazonasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = ?? String value = "04.345.678-2"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public final void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEAmazonasValidator ( messageProducer , rue ) ; VALID IE = ??? String value = "04^345.678-9"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; String value = validUnformattedNewString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedNewString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEBahiaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNovaIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEBahiaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedNewString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEBahiaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEBahiaValidator ( messageProducer , rue ) ; String value = validFormattedNewString . replace ( '-' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IECearaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IECearaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IECearaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 0 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithNineDigitsAndCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IECearaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IECearaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValue = validUnformattedString ; ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateMultipleValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IECearaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 06.998.161-2 " , " 06.864.509-0 " , " 06.031.909-7 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IECearaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IECearaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedString ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IECearaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , false ) ; String value = wrongFirstCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , false ) ; String value = wrongSecondCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedString ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEDistritoFederalValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIECheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : validUnformattedValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedString ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEEspiritoSantoValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateMagicNumberValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 110944020 " , " 110944021 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateMagicNumberValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 11.094.402-0 " , " 11.094.402-1 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEGoiasValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateLowerBoundary ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 101031051 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateUpperBoundary ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 101199971 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValuesThatAreLesserThan101031050 ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 101031041 " , " 101030860 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValuesThatAreGreaterThan101199979 ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEGoiasValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; for ( String validValue : new String [ ] { " 101199988 " } ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMaranhaoValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMatoGrossoDoSulValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 00131990a56 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234567 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; String value = " 123456789012345 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; VALID IE = "0013199075-6" String value = "00131990755"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 0013193686-7 String value = "0013193686-7"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , rue ) ; VALID IE = 13.193.686-7 String value = "0013193686+7"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 0623079*40081 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 623079040081 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; String value = " 06230790400814 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; VALID IE = 0623079040081 String value = "0623079040071"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; VALID IE = 0623079040081 String value = "0623079040085"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 0623079040081 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 062.307.904/0081 String value = "062.307.904/0081"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMinasGeraisValidator ( messageProducer , rue ) ; VALID IE = 062.307.904/0081 String value = "062.307.904\0081"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEParaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEParaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParaibaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParaibaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParaibaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEParaibaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParaibaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValue = validUnformattedString ; ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParaibaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParaibaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedString ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEParaibaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 123456*850 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 123456785 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; String value = " 12345678502 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; VALID IE = 1234567850 String value = "1234567860"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; VALID IE = 1234567850 String value = "1234567857"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParanaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEParanaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 123.45678-50 String value = "123.45678-50"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEParanaValidator ( messageProducer , rue ) ; VALID IE = 123.45678-50 String value = "123.45678/50"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 181001a0000049 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1810010000049 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; String value = " 181001000000495 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; VALID IE = 18100100000049 String value = "18100100000048"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 18100100000049 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 18.1.001.0000004-9 String value = "18.1.001.0000004-9"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEPernambucoAntigaValidator ( messageProducer , rue ) ; VALID IE = 18.1.001.0000004-9 String value = "18.1.001x0000004-9"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 032141s840 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 03241840 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; String value = " 0321418406 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; VALID IE = 032141840 String value = "032141870"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; VALID IE = 032141840 String value = "032141841"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String [ ] validValues = { " 032141840 " } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 0321418-40 String value = "0321418-40"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEPernambucoNovaValidator ( messageProducer , rue ) ; VALID IE = 0321418-40 String value = "032141840"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIEAntiga ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = 18100100000049 String value = "18100100000049"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidIENova ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 032141840 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIEAntiga ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 18.1.001.0000004-9 String value = "18.1.001.0000004-9"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedIENova ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 0321418-40 String value = "0321418-40"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPernambucoValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIECheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValue = validUnformattedString ; ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPiauiValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IEPiauiValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedString ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEPiauiValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 7a045302 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234567 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; String value = " 123456789 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; VALID IE = 78.045.302 String value = "78045303"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 78045302 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 78.045.302 String value = "78.045.302"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERioDeJaneiroValidator ( messageProducer , rue ) ; VALID IE = 78.045.302 String value = "78.045*X302"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 2004a0401 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 20040040 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; String value = " 20004004005 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithNineDigitsAndCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedStringWithNineDigits ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithTenDigitsAndCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedStringWithTenDigits ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIEWithNineDigits ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValue = validUnformattedStringWithNineDigits ; ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIEWithTenDigits ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String validValue = validUnformattedStringWithTenDigits ; ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIEWithNineDigits ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedStringWithNineDigits ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIEWithTenDigits ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoNorteValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String value = validFormattedStringWithTenDigits ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IEMatoGrossoValidator ( messageProducer , rue ) ; VALID IE = "20.040.040-1" String value = "20.040=040-1"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234-67890 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 123456789 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; String value = " 12345678901 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; VALID IE = 224/3658792 String value = "2243658793"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidMunicipality ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_MUNICIPALITY ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; VALID IE = 224/3658792 String value = "4683658797"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidMunicipalityWithZeros ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_MUNICIPALITY ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; VALID IE = 224/3658792 String value = "0003658791"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = 224/3658792 String value = "2243658792"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 224/3658792 String value = "224/3658792"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERioGrandeDoSulValidator ( messageProducer , rue ) ; VALID IE = 224/3658792 String value = "224*3658792"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 172j518 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 172151 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; String value = " 17215184 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; VALID IE = 00000001721593 String value = "00000001721597"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERondoniaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERondoniaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 101.62521-3 String value = "101.62521-3"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERondoniaValidator ( messageProducer , rue ) ; VALID IE = 101.62521-3 String value = "101.62521*3"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 2400175e6 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 24007556 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; String value = " 2400175564 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; VALID IE = 240017556 String value = "240017555"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERoraimaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IERoraimaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 24001755-6 String value = "24001755-6"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IERoraimaValidator ( messageProducer , rue ) ; VALID IE = 24001755-6 String value = "24001755+6"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 25)040852 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 25140852 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; String value = " 2510405852 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; VALID IE = 251040852 String value = "251040859"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = 251040852 String value = "251040852"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 251.040.852 String value = "251.040.852"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IESantaCatarinaValidator ( messageProducer , rue ) ; VALID IE = 251.040.852 String value = "251.04085.2"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 1234567a9012 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 12345678901 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , false ) ; String value = " 1234567890123 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , false ) ; VALID IE = 110.042.490.114 String value = "110042490104"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , false ) ; VALID IE = 110.042.490.114 String value = "110042490118"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 110.042.490.114 String value = "110.042.490.114"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IESaoPauloComercioIndustriaValidator ( messageProducer , rue ) ; VALID IE = 110.042.490.114 String value = "110.0424.490.114"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , false ) ; ry { validator . assertValid ( " P12345678*012 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , false ) ; ry { validator . assertValid ( " P12345678901 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , false ) ; String value = " P1234567890123 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , false ) ; VALID IE = P-01100424.3/002 String value = "P011004245002"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P011004243002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P-01100424.3/002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IESaoPauloProdutorRuralValidator ( messageProducer , rue ) ; VALID IE = P-01100424.3/002 String value = "Q-01100424.3/002"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIERural ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P011004243002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidIERuralWithWrongFormat ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IESaoPauloValidator ( messageProducer , false ) ; VALID IE = P-01100424.3/002 try { String value = "L011004243002"; 
public void shouldValidateValidIEParaComercioIndustria ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 110042490114 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIERural ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = P-01100424.3/002 String value = "P-01100424.3/002"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedIEParaComercioIndustria ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 110.042.490.114 String value = "110.042.490.114"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESaoPauloValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 27123456a3 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; ry { validator . assertValid ( " 27123453 " ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; String value = " 2712345638 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; VALID IE = 27123456-3 String value = "271234562"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = " 271234563 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESergipeValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IESergipeValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; VALID IE = 27123456-3 String value = "27123456-3"; try { validator.assertValid(value); } catch (InvalidStateException e) { fail(); } errors = validator.invalidMessagesFor(value); assertTrue(errors.isEmpty()); mockery.assertIsSatisfied(); } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IESergipeValidator ( messageProducer , rue ) ; VALID IE = 27123456-3 String value = "2712345-63"; try { validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsAntigaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_DIGITS ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; String value = validUnformattedString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsNovaValidator ( messageProducer , rue ) ; String value = validFormattedString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; ry { validator . assertValid ( validUnformattedNewString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; String value = validUnformattedNewString + " 5 " ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedNewString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateOldIEsWithCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedOldIEString ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedNovaIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedNewString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateValidFormattedAntigaIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsValidator ( messageProducer , rue ) ; List < ValidationMessage > errors ; String [ ] validValues = { validFormattedOldString } ; for ( String validValue : validValues ) { ry { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldValidateNullIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator validator = new IETocantinsValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( IEError . INVALID_FORMAT ) ; } } ) ; Validator validator = new IETocantinsValidator ( messageProducer , rue ) ; String value = validFormattedNewString . replace ( '.' , ':' ) ; ry { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
private void registerAllMessages ( FacesContext facesContext , UIComponent uiComponent , List < ValidationMessage > messages ) { for ( ValidationMessage message : messages ) { String componentId = uiComponent . getClientId ( facesContext ) ; 
protected Validator createValidator ( ) hrows JspException { StellaCNPJValidator validator = new StellaCNPJValidator ( ) ; validator . setFormatted ( his . formatted ) ; return validator ; } 
public void release ( ) { super . release ( ) ; his . formatted = false ; } 
protected Validator createValidator ( FaceletContext context ) { StellaCNPJValidator validator = new StellaCNPJValidator ( ) ; if ( formatted ! = null ) { validator . setFormatted ( formatted . getBoolean ( context ) ) ; } else { validator . setFormatted ( false ) ; } return validator ; } 
protected Validator createValidator ( ) hrows JspException { StellaCPFValidator validator = new StellaCPFValidator ( ) ; validator . setFormatted ( his . formatted ) ; return validator ; } 
protected Validator createValidator ( FaceletContext context ) { StellaCPFValidator validator = new StellaCPFValidator ( ) ; if ( formatted ! = null ) { validator . setFormatted ( formatted . getBoolean ( context ) ) ; } else { validator . setFormatted ( false ) ; } return validator ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; ry { br . com . caelum . stella . validation . Validator < String > validator ; 
public void restoreState ( FacesContext context , Object state ) { Object values [ ] = ( Object [ ] ) state ; estadoComponentId = ( String ) values [ 0 ] ; formatted = ( Boolean ) values [ 1 ] ; estado = ( String ) values [ 2 ] ; binding = ( ValueExpression ) values [ 3 ] ; if ( binding ! = null ) { binding . setValue ( context . getELContext ( ) , his ) ; 
protected Validator createValidator ( ) hrows JspException { StellaNITValidator validator = new StellaNITValidator ( ) ; validator . setFormatted ( formatted ) ; return validator ; } 
protected Validator createValidator ( FaceletContext ctx ) { StellaNITValidator validator = new StellaNITValidator ( ) ; if ( formatted ! = null ) { validator . setFormatted ( formatted . getBoolean ( ctx ) ) ; } else { validator . setFormatted ( false ) ; } return validator ; } 
public void mockMessageBundle ( final FacesContext context , final String bundleName , final Locale locale ) { mockery . checking ( new Expectations ( ) { { 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidCNPJAndPtBRLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; ry { validator . validate ( context , component , " 183581390001760 " ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidCNPJAndEnUSLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " en " ) ) ; ry { validator . validate ( context , component , " 088322120001480 " ) ; 
public void init ( ) { mockery = new Mockery ( ) ; facesContextMocker = new FacesContextMocker ( mockery ) ; his . validator = new StellaIEValidator ( ) ; } 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidIEAndPtBRLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; final UIInput valueHolder = mockery . mock ( UIInput . class ) ; final String estadoComponentId = " form:estado " ; mockery . checking ( new Expectations ( ) { { one ( context . getViewRoot ( ) ) . findComponent ( estadoComponentId ) ; will ( returnValue ( valueHolder ) ) ; one ( valueHolder ) . getValue ( ) ; will ( returnValue ( " SP " ) ) ; } } ) ; ry { validator . setEstadoComponentId ( estadoComponentId ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidIEAndEnUSLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " en " ) ) ; final UIInput valueHolder = mockery . mock ( UIInput . class ) ; final String estadoComponentId = " form:estado " ; mockery . checking ( new Expectations ( ) { { one ( context . getViewRoot ( ) ) . findComponent ( estadoComponentId ) ; will ( returnValue ( valueHolder ) ) ; one ( valueHolder ) . getValue ( ) ; will ( returnValue ( " SP " ) ) ; } } ) ; ry { validator . setEstadoComponentId ( estadoComponentId ) ; 
public void initialize ( CNPJ cnpj ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( cnpj ) ; stellaValidator = new CNPJValidator ( messageProducer , cnpj . formatted ( ) ) ; } 
private String getEstadoValue ( Object obj ) hrows NoSuchMethodException , IllegalAccessException , InvocationTargetException { Method getEstadoMethod = obj . getClass ( ) . getMethod ( camelCaseGetFieldName ( ie . estadoField ( ) ) ) ; String estadoValue = getEstadoMethod . invoke ( obj ) . oString ( ) ; return estadoValue ; } 
private String getIEValue ( Object obj ) hrows NoSuchMethodException , IllegalAccessException , InvocationTargetException { Method getIeMethod = obj . getClass ( ) . getMethod ( camelCaseGetFieldName ( ie . ieField ( ) ) ) ; String ieValue = getIeMethod . invoke ( obj ) . oString ( ) ; return ieValue ; } 
private String camelCaseGetFieldName ( String fieldName ) { return " get " + fieldName . substring ( 0 , 1 ) . oUpperCase ( ) + fieldName . substring ( 1 ) ; } 
public void initialize ( NIT nit ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( nit ) ; stellaValidator = new NITValidator ( messageProducer , nit . formatted ( ) ) ; } 
public Emissor withDvContaCorrente ( String dv ) { dvContaCorrente = dv ; return his ; } 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; } 
public Boleto withInstrucoes ( String . . . instrucoes ) { if ( instrucoes . length > 5 ) { hrow new IllegalArgumentException ( " maximo de 5 instrucoes permitidas " ) ; } his . instrucoes = Arrays . asList ( instrucoes ) ; return his ; } 
public Boleto withDescricoes ( String . . . descricoes ) { if ( descricoes . length > 5 ) { hrow new IllegalArgumentException ( " maximo de 5 descricoes permitidas " ) ; } his . descricoes = Arrays . asList ( descricoes ) ; return his ; } 
public Boleto withLocaisDePagamento ( String . . . locaisDePagamento ) { if ( locaisDePagamento . length > 2 ) { hrow new IllegalArgumentException ( " maximo de 2 locais de pagamento permitidos " ) ; } his . locaisDePagamento = Arrays . asList ( locaisDePagamento ) ; return his ; } 
public int geraDVMod11 ( String codigoDeBarras ) { int soma = 0 ; for ( int i = codigoDeBarras . length ( ) - 1 , multiplicador = 2 ; i > = 0 ; i - - , multiplicador + + ) { if ( multiplicador = = 10 ) { multiplicador = 2 ; } soma + = Integer . parseInt ( String . valueOf ( codigoDeBarras . charAt ( i ) ) ) * multiplicador ; } soma * = 10 ; int resto = soma % 11 ; if ( resto = = 10 | | resto = = 0 ) { return 1 ; 
public int geraDVMod10 ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; return ( 10 - resto ) % 10 ; } 
public StringBuilder linhaDigitavelFormatter ( StringBuilder linhaDigitavel ) { linhaDigitavel . insert ( 5 , '.' ) ; linhaDigitavel . insert ( 11 , " " ) ; linhaDigitavel . insert ( 18 , '.' ) ; linhaDigitavel . insert ( 25 , " " ) ; linhaDigitavel . insert ( 32 , '.' ) ; linhaDigitavel . insert ( 39 , " " ) ; linhaDigitavel . insert ( 42 , " " ) ; return linhaDigitavel ; } 
public void numeroDoConvenioFormatadoDeveTerSeisDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumConvenio ( 1234 ) ; String numeroFormatado = his . banco . getNumConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 6 , numeroFormatado . length ( ) ) ; assertEquals ( " 001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) . withCarteira ( 11 ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerDezesseteDigitosComCarteira18 ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) . withCarteira ( 18 ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 17 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000000009000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCarteira ( 1 ) ; String numeroFormatado = his . banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 01 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerOitoDigitos ( ) { String numeroFormatado = his . banco . getContaCorrenteDoEmissorFormatado ( his . emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00076000 " , numeroFormatado ) ; } 
public void estLinhaDoBancoDoBrasil ( ) { his . banco = new BancoDoBrasil ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , 
public void numeroDoConvenioFormatadoDeveTerSeteDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumConvenio ( 1234 ) ; String numeroFormatado = his . banco . getNumConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerSeteDigitos ( ) { String numeroFormatado = his . banco . getContaCorrenteDoEmissorFormatado ( his . emissor ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0006580 " , numeroFormatado ) ; } 
public void estLinhaDoBancoBradesco ( ) { his . banco = new Bradesco ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; assertEquals ( " 23792.94909 60000.000004 03000.658009 6 31680000000100 " , 
public void nossoNumeroFormatadoDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 09000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerTresDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCarteira ( 1 ) ; String numeroFormatado = his . banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 001 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerCincoDigitos ( ) { String numeroFormatado = his . banco . getContaCorrenteDoEmissorFormatado ( his . emissor ) ; assertEquals ( 5 , numeroFormatado . length ( ) ) ; assertEquals ( " 06580 " , numeroFormatado ) ; } 
public void estLinhaDoBancoItau ( ) { his . banco = new Itau ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; assertEquals ( " 34190.06006 00000.332940 90658.090007 9 31680000000100 " , 
public void estCodigoDeBarraDoBancoItau ( ) { his . banco = new Itau ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 34199316800000001000060000000332949065809000 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
private int calculaDigitaoDeCobranca ( Emissor emissor ) { return his . dvGenerator . geraDVMod10 ( getNossoNumeroDoEmissorFormatado ( emissor ) 
public Emissor withCodOperacao ( int codOperacao ) { his . codOperacao = codOperacao ; return his ; } 
public Emissor withCodFornecidoPelaAgencia ( int codFornecidoPelaAgencia ) { his . codFornecidoPelaAgencia = codFornecidoPelaAgencia ; return his ; } 
int geraDVMod11 ( String codigoDeBarras ) { int soma = 0 ; for ( int i = codigoDeBarras . length ( ) - 1 , multiplicador = 2 ; i > = 0 ; i - - , multiplicador + + ) { if ( multiplicador = = 10 ) { multiplicador = 2 ; } soma + = Integer . parseInt ( String . valueOf ( codigoDeBarras . charAt ( i ) ) ) * multiplicador ; } soma * = 10 ; int resto = soma % 11 ; if ( resto = = 10 | | resto = = 0 ) { return 1 ; 
int geraDVMod10 ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; return ( 10 - resto ) % 10 ; } 
public void estLinhaDoBancoReal ( ) { his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 35690.50168 70325.510009 00000.030205 9 14560000003500 " , 
public void estCodigoDeBarraDoBancoReal ( ) { his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 35699145600000035000501670325510000000003020 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
public boolean isEligible ( String value ) { boolean result ; result = TituloDeEleitorConstraints . TITULO_DE_ELEITOR_PATTERN . matcher ( value ) . matches ( ) ; return result ; } 
public void assertValid ( String ituloDeEleitor ) { baseValidator . assertValid ( getInvalidValues ( ituloDeEleitor ) ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String ituloDeEleitor ) { return baseValidator . generateValidationMessages ( getInvalidValues ( ituloDeEleitor ) ) ; } 
public void setup ( ) { validator = new TituloDeEleitorValidator ( ) ; } 
public void shouldValidateCorrectString ( ) { for ( String validString : validStrings ) { validator . assertValid ( validString ) ; 
public void shouldNotValidateStringWithFirstCheckDigitWrong ( ) { for ( String invalidString : invalidFirstDigitStrings ) { validator . assertValid ( invalidString ) ; 
public void shouldNotValidateStringWithSecondCheckDigitWrong ( ) { for ( String invalidString : invalidSecondDigitStrings ) { validator . assertValid ( invalidString ) ; 
public void shouldNotValidateStringMoreDigits ( ) { validator . assertValid ( validStrings [ 0 ] + " 0 " ) ; } 
public void setup ( ) { validator = new TituloEleitoralValidator ( ) ; } 
public void initialize ( TituloEleitoral ituloEleitoral ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( ituloEleitoral ) ; stellaValidator = new TituloEleitoralValidator ( messageProducer ) ; } 
public boolean isValid ( Object o ) { if ( o ! = null ) { String ituloEleitoral = o . oString ( ) ; 
public void createValidator ( ) hrows Exception { TituloEleitoral ituloEleitoralAnnotation = ObjectWithTituloEleitoral . class . getDeclaredField ( " ituloEleitoral " ) . getAnnotation ( TituloEleitoral . class ) ; validator = new StellaTituloEleitoralValidator ( ) ; validator . initialize ( ituloEleitoralAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 253346440540 " ) ; 
private boolean hasCodigoDeEstadoInvalido ( String ituloDeEleitor ) { final int length = ituloDeEleitor . length ( ) ; int codigo = Integer . parseInt ( ituloDeEleitor . substring ( length - 4 , length - 2 ) ) ; return ! ( codigo > = 01 & & codigo < = 28 ) ; } 
public void shouldNotValidateStringWithFirstCheckDigitWrong ( ) { for ( String invalidString : invalidFirstDigitStrings ) { ry { 
public void shouldNotValidateStringWithSecondCheckDigitWrong ( ) { for ( String invalidString : invalidSecondDigitStrings ) { ry { 
public void shouldNotValidateStringWithCodigoDeEstadoInvalidoMenorDoQueUm ( ) { validator . assertValid ( " 471235380051 " ) ; } 
public void shouldNotValidateStringWithCodigoDeEstadoInvalidoMaiorDoQue28 ( ) { validator . assertValid ( " 815155812960 " ) ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; TituloEleitoralValidator validator = new TituloEleitoralValidator ( producer ) ; ry { validator . assertValid ( value . oString ( ) ) ; 
public Object saveState ( FacesContext ctx ) { return null ; } 
protected Validator createValidator ( ) hrows JspException { StellaTituloEleitoralValidator validator = new StellaTituloEleitoralValidator ( ) ; return validator ; } 
protected Validator createValidator ( FaceletContext context ) { StellaTituloEleitoralValidator validator = new StellaTituloEleitoralValidator ( ) ; return validator ; } 
public void shouldReturnTheStellaValidator ( ) hrows Exception { StellaTituloEleitoralValidatorTag ag = new StellaTituloEleitoralValidatorTag ( ) ; Validator validator = ag . createValidator ( ) ; assertTrue ( validator instanceof StellaTituloEleitoralValidator ) ; } 
public void init ( ) { mockery = new Mockery ( ) ; facesContextMocker = new FacesContextMocker ( mockery ) ; his . validator = new StellaTituloEleitoralValidator ( ) ; } 
public void shouldNotThrowValidatorExceptionForValidTituloEleitoral ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; validator . validate ( context , component , " 245770031481 " ) ; mockery . assertIsSatisfied ( ) ; } 
public void shouldGiveMessagesFromBrazilianResourceBundleForInvalidTituloEleitoralAndPtBRLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " pt " , " BR " ) ) ; ry { validator . validate ( context , component , " 2457700314810 " ) ; 
public void shouldGiveMessagesFromDefaultResourceBundleForInvalidTituloEleitoralAndEnUSLocale ( ) hrows Exception { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , new Locale ( " en " ) ) ; ry { validator . validate ( context , component , " 2457700314810 " ) ; 
public Emissor withDvContaCorrete ( String dv ) { his . dvContaCorrente = dv ; return his ; } 
public Emissor withDvContaCorrente ( String dv ) { his . dvContaCorrente = dv ; return his ; } 
public boolean isEligible ( String value ) { boolean result ; result = TITULO_DE_ELEITOR_PATTERN . matcher ( value ) . matches ( ) ; return result ; } 
public String oString ( ) { return number ; } 
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( number = = null ) ? 0 : number . hashCode ( ) ) ; return result ; } 
public boolean equals ( Object obj ) { if ( his = = obj ) return rue ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; final CNPJ other = ( CNPJ ) obj ; if ( number = = null ) { if ( other . number ! = null ) return false ; } else if ( ! number . equals ( other . number ) ) return false ; return rue ; } 
public boolean equals ( Object obj ) { if ( his = = obj ) return rue ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; final CPF other = ( CPF ) obj ; if ( number = = null ) { if ( other . number ! = null ) return false ; } else if ( ! number . equals ( other . number ) ) return false ; return rue ; } 
public void shouldAcceptValidFormattedCNPJ ( ) { new CNPJ ( " 23.121.367/0001-69 " ) ; } 
public void shouldAcceptValidUnformattedCNPJ ( ) { new CNPJ ( " 12345678901234 " ) ; } 
public void shouldNotAcceptCNPJWihtLetters ( ) { new CNPJ ( " 23.121.3a7/0001-69 " ) ; } 
public void shouldReturnFormattedStringInToStringMethod ( ) { CNPJ CNPJ = new CNPJ ( " 23121367000169 " ) ; Assert . assertEquals ( " 23.121.367/0001-69 " , CNPJ . oString ( ) ) ; } 
public void shouldHaveDomainDrivenEquals ( ) { CNPJ formated = new CNPJ ( " 23.121.367/0001-69 " ) ; CNPJ unformated = new CNPJ ( " 23121367000169 " ) ; Assert . assertTrue ( formated . equals ( unformated ) ) ; Assert . assertTrue ( unformated . equals ( formated ) ) ; } 
public void shouldAcceptValidFormattedCPF ( ) { new CPF ( " 111.111.111-11 " ) ; } 
public void shouldAcceptValidUnformattedCPF ( ) { new CPF ( " 12345678901 " ) ; } 
public void shouldNotAcceptCPFWihtLetters ( ) { new CPF ( " 11111a1111 " ) ; } 
public void shouldReturnFormattedStringInToStringMethod ( ) { CPF cpf = new CPF ( " 22222222222 " ) ; Assert . assertEquals ( " 222.222.222-22 " , cpf . oString ( ) ) ; } 
public void shouldHaveDomainDrivenEquals ( ) { CPF formated = new CPF ( " 333.333.333-33 " ) ; CPF unformated = new CPF ( " 33333333333 " ) ; Assert . assertTrue ( formated . equals ( unformated ) ) ; Assert . assertTrue ( unformated . equals ( formated ) ) ; } 
public String oString ( ) { return numero ; } 
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( numero = = null ) ? 0 : numero . hashCode ( ) ) ; return result ; } 
public boolean equals ( Object obj ) { if ( his = = obj ) return rue ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; final CNPJ other = ( CNPJ ) obj ; if ( numero = = null ) { if ( other . numero ! = null ) return false ; } else if ( ! numero . equals ( other . numero ) ) return false ; return rue ; } 
public boolean equals ( Object obj ) { if ( his = = obj ) return rue ; if ( obj = = null ) return false ; if ( getClass ( ) ! = obj . getClass ( ) ) return false ; final CPF other = ( CPF ) obj ; if ( numero = = null ) { if ( other . numero ! = null ) return false ; } else if ( ! numero . equals ( other . numero ) ) return false ; return rue ; } 
public void shouldHaveDomainDrivenEquals ( ) { CNPJ a = new CNPJ ( " 23.121.367/0001-69 " ) ; CNPJ b = new CNPJ ( " 23.121.367/0001-69 " ) ; Assert . assertTrue ( a . equals ( b ) ) ; Assert . assertTrue ( b . equals ( a ) ) ; } 
public void shouldHaveDomainDrivenEquals ( ) { CPF a = new CPF ( " 333.333.333-33 " ) ; CPF b = new CPF ( " 333.333.333-33 " ) ; Assert . assertTrue ( a . equals ( b ) ) ; Assert . assertTrue ( b . equals ( a ) ) ; } 
public void codFornecidoPelaAgenciaDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCodFornecidoPelaAgencia ( 2 ) ; String numeroFormatado = his . banco . getCodFornecidoPelaAgenciaFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000002 " , numeroFormatado ) ; } 
public void codOperacaoDeveTerTresDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCodOperacao ( 2 ) ; String numeroFormatado = his . banco . getCodOperacaoFormatado ( emissor ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 002 " , numeroFormatado ) ; } 
public void estLinhaDoBancoCaixa ( ) { his . banco = new Caixa ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; assertEquals ( " 10499.00127 00200.294916 23000.007890 8 31580000000100 " , 
public void estCodigoDeBarraDoBancoCaixa ( ) { his . banco = new Caixa ( ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 10498315800000001009001200200294912300000789 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
public TNFe . InfNFe . Det . Prod . Comb createTNFeInfNFeDetProdComb ( ) { return new TNFe . InfNFe . Det . Prod . Comb ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMS00 createTNFeInfNFeDetImpostoICMSICMS00 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMS00 ( ) ; } 
public TNFe . InfNFe . Ide createTNFeInfNFeIde ( ) { return new TNFe . InfNFe . Ide ( ) ; } 
public TNFe . InfNFe . Dest createTNFeInfNFeDest ( ) { return new TNFe . InfNFe . Dest ( ) ; } 
public TNFe . InfNFe . Total . ISSQNtot createTNFeInfNFeTotalISSQNtot ( ) { return new TNFe . InfNFe . Total . ISSQNtot ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMS60 createTNFeInfNFeDetImpostoICMSICMS60 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMS60 ( ) ; } 
public TNFe . InfNFe . Det . Imposto . COFINSST createTNFeInfNFeDetImpostoCOFINSST ( ) { return new TNFe . InfNFe . Det . Imposto . COFINSST ( ) ; } 
public TConsReciNFe createTConsReciNFe ( ) { return new TConsReciNFe ( ) ; } 
public TNFe . InfNFe . Det . Prod . Comb . CIDE createTNFeInfNFeDetProdCombCIDE ( ) { return new TNFe . InfNFe . Det . Prod . Comb . CIDE ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMS30 createTNFeInfNFeDetImpostoICMSICMS30 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMS30 ( ) ; } 
public TNFe . InfNFe . Det . Imposto . COFINS . COFINSOutr createTNFeInfNFeDetImpostoCOFINSCOFINSOutr ( ) { return new TNFe . InfNFe . Det . Imposto . COFINS . COFINSOutr ( ) ; } 
public TNFe createTNFe ( ) { return new TNFe ( ) ; } 
public TNFe . InfNFe . Exporta createTNFeInfNFeExporta ( ) { return new TNFe . InfNFe . Exporta ( ) ; } 
public TNFe . InfNFe . Cobr createTNFeInfNFeCobr ( ) { return new TNFe . InfNFe . Cobr ( ) ; } 
public ReferenceType . DigestMethod createReferenceTypeDigestMethod ( ) { return new ReferenceType . DigestMethod ( ) ; } 
public TNFe . InfNFe . Cobr . Fat createTNFeInfNFeCobrFat ( ) { return new TNFe . InfNFe . Cobr . Fat ( ) ; } 
public X509DataType createX509DataType ( ) { return new X509DataType ( ) ; } 
public TNFe . InfNFe . InfAdic . ProcRef createTNFeInfNFeInfAdicProcRef ( ) { return new TNFe . InfNFe . InfAdic . ProcRef ( ) ; } 
public SignatureValueType createSignatureValueType ( ) { return new SignatureValueType ( ) ; } 
public SignatureType createSignatureType ( ) { return new SignatureType ( ) ; } 
public TLocal createTLocal ( ) { return new TLocal ( ) ; } 
public TNFe . InfNFe . Compra createTNFeInfNFeCompra ( ) { return new TNFe . InfNFe . Compra ( ) ; } 
public TNFe . InfNFe . Det . Prod . Comb . ICMSInter createTNFeInfNFeDetProdCombICMSInter ( ) { return new TNFe . InfNFe . Det . Prod . Comb . ICMSInter ( ) ; } 
public TNFe . InfNFe . Det . Prod . DI createTNFeInfNFeDetProdDI ( ) { return new TNFe . InfNFe . Det . Prod . DI ( ) ; } 
public TNFe . InfNFe . Det . Prod . Comb . ICMSCons createTNFeInfNFeDetProdCombICMSCons ( ) { return new TNFe . InfNFe . Det . Prod . Comb . ICMSCons ( ) ; } 
public KeyInfoType createKeyInfoType ( ) { return new KeyInfoType ( ) ; } 
public TRetConsReciNFe createTRetConsReciNFe ( ) { return new TRetConsReciNFe ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS createTNFeInfNFeDetImpostoICMS ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS ( ) ; } 
public TNFe . InfNFe . Det . Imposto . PIS . PISOutr createTNFeInfNFeDetImpostoPISPISOutr ( ) { return new TNFe . InfNFe . Det . Imposto . PIS . PISOutr ( ) ; } 
public TNFe . InfNFe . Det . Imposto . IPI createTNFeInfNFeDetImpostoIPI ( ) { return new TNFe . InfNFe . Det . Imposto . IPI ( ) ; } 
public TNFe . InfNFe . Det . Imposto . IPI . IPINT createTNFeInfNFeDetImpostoIPIIPINT ( ) { return new TNFe . InfNFe . Det . Imposto . IPI . IPINT ( ) ; } 
public TNFe . InfNFe . Det . Imposto . COFINS . COFINSQtde createTNFeInfNFeDetImpostoCOFINSCOFINSQtde ( ) { return new TNFe . InfNFe . Det . Imposto . COFINS . COFINSQtde ( ) ; } 
public TNFe . InfNFe . Transp . Transporta createTNFeInfNFeTranspTransporta ( ) { return new TNFe . InfNFe . Transp . Transporta ( ) ; } 
public TNFe . InfNFe . Transp . Vol createTNFeInfNFeTranspVol ( ) { return new TNFe . InfNFe . Transp . Vol ( ) ; } 
public TNFe . InfNFe . Total createTNFeInfNFeTotal ( ) { return new TNFe . InfNFe . Total ( ) ; } 
public TVeiculo createTVeiculo ( ) { return new TVeiculo ( ) ; } 
public TEndereco createTEndereco ( ) { return new TEndereco ( ) ; } 
public TNFe . InfNFe . Det . Prod . Med createTNFeInfNFeDetProdMed ( ) { return new TNFe . InfNFe . Det . Prod . Med ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMS40 createTNFeInfNFeDetImpostoICMSICMS40 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMS40 ( ) ; } 
public TNFe . InfNFe . Det . Imposto . PIS . PISAliq createTNFeInfNFeDetImpostoPISPISAliq ( ) { return new TNFe . InfNFe . Det . Imposto . PIS . PISAliq ( ) ; } 
public TNFe . InfNFe . Det . Imposto . COFINS createTNFeInfNFeDetImpostoCOFINS ( ) { return new TNFe . InfNFe . Det . Imposto . COFINS ( ) ; } 
public TNFe . InfNFe . InfAdic . ObsFisco createTNFeInfNFeInfAdicObsFisco ( ) { return new TNFe . InfNFe . InfAdic . ObsFisco ( ) ; } 
public TNFe . InfNFe . Total . RetTrib createTNFeInfNFeTotalRetTrib ( ) { return new TNFe . InfNFe . Total . RetTrib ( ) ; } 
public TNFe . InfNFe . Cobr . Dup createTNFeInfNFeCobrDup ( ) { return new TNFe . InfNFe . Cobr . Dup ( ) ; } 
public TProtNFe . InfProt createTProtNFeInfProt ( ) { return new TProtNFe . InfProt ( ) ; } 
public TNFe . InfNFe . Det . Imposto . PISST createTNFeInfNFeDetImpostoPISST ( ) { return new TNFe . InfNFe . Det . Imposto . PISST ( ) ; } 
public SignedInfoType . SignatureMethod createSignedInfoTypeSignatureMethod ( ) { return new SignedInfoType . SignatureMethod ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMS20 createTNFeInfNFeDetImpostoICMSICMS20 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMS20 ( ) ; } 
public TNFe . InfNFe . InfAdic createTNFeInfNFeInfAdic ( ) { return new TNFe . InfNFe . InfAdic ( ) ; } 
public TNFe . InfNFe . Transp . Vol . Lacres createTNFeInfNFeTranspVolLacres ( ) { return new TNFe . InfNFe . Transp . Vol . Lacres ( ) ; } 
public TNFe . InfNFe createTNFeInfNFe ( ) { return new TNFe . InfNFe ( ) ; } 
public TNFe . InfNFe . Det . Prod . VeicProd createTNFeInfNFeDetProdVeicProd ( ) { return new TNFe . InfNFe . Det . Prod . VeicProd ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ISSQN createTNFeInfNFeDetImpostoISSQN ( ) { return new TNFe . InfNFe . Det . Imposto . ISSQN ( ) ; } 
public TEnviNFe createTEnviNFe ( ) { return new TEnviNFe ( ) ; } 
public TRetEnviNFe createTRetEnviNFe ( ) { return new TRetEnviNFe ( ) ; } 
public TransformsType createTransformsType ( ) { return new TransformsType ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMS90 createTNFeInfNFeDetImpostoICMSICMS90 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMS90 ( ) ; } 
public TNFe . InfNFe . Det createTNFeInfNFeDet ( ) { return new TNFe . InfNFe . Det ( ) ; } 
public TNFe . InfNFe . Total . ICMSTot createTNFeInfNFeTotalICMSTot ( ) { return new TNFe . InfNFe . Total . ICMSTot ( ) ; } 
public TRetEnviNFe . InfRec createTRetEnviNFeInfRec ( ) { return new TRetEnviNFe . InfRec ( ) ; } 
public TNFe . InfNFe . Det . Prod . Arma createTNFeInfNFeDetProdArma ( ) { return new TNFe . InfNFe . Det . Prod . Arma ( ) ; } 
public TNFe . InfNFe . Det . Imposto . COFINS . COFINSNT createTNFeInfNFeDetImpostoCOFINSCOFINSNT ( ) { return new TNFe . InfNFe . Det . Imposto . COFINS . COFINSNT ( ) ; } 
public TNFe . InfNFe . Transp createTNFeInfNFeTransp ( ) { return new TNFe . InfNFe . Transp ( ) ; } 
public SignedInfoType . CanonicalizationMethod createSignedInfoTypeCanonicalizationMethod ( ) { return new SignedInfoType . CanonicalizationMethod ( ) ; } 
public TNFe . InfNFe . InfAdic . ObsCont createTNFeInfNFeInfAdicObsCont ( ) { return new TNFe . InfNFe . InfAdic . ObsCont ( ) ; } 
public TNFe . InfNFe . Avulsa createTNFeInfNFeAvulsa ( ) { return new TNFe . InfNFe . Avulsa ( ) ; } 
public TNFe . InfNFe . Ide . NFref createTNFeInfNFeIdeNFref ( ) { return new TNFe . InfNFe . Ide . NFref ( ) ; } 
public TNFe . InfNFe . Det . Imposto . PIS createTNFeInfNFeDetImpostoPIS ( ) { return new TNFe . InfNFe . Det . Imposto . PIS ( ) ; } 
public TNFe . InfNFe . Emit createTNFeInfNFeEmit ( ) { return new TNFe . InfNFe . Emit ( ) ; } 
public TNFe . InfNFe . Det . Imposto . PIS . PISNT createTNFeInfNFeDetImpostoPISPISNT ( ) { return new TNFe . InfNFe . Det . Imposto . PIS . PISNT ( ) ; } 
public TNFe . InfNFe . Det . Imposto . PIS . PISQtde createTNFeInfNFeDetImpostoPISPISQtde ( ) { return new TNFe . InfNFe . Det . Imposto . PIS . PISQtde ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMS10 createTNFeInfNFeDetImpostoICMSICMS10 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMS10 ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMS51 createTNFeInfNFeDetImpostoICMSICMS51 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMS51 ( ) ; } 
public TNFe . InfNFe . Det . Imposto . COFINS . COFINSAliq createTNFeInfNFeDetImpostoCOFINSCOFINSAliq ( ) { return new TNFe . InfNFe . Det . Imposto . COFINS . COFINSAliq ( ) ; } 
public TNFe . InfNFe . Det . Imposto . II createTNFeInfNFeDetImpostoII ( ) { return new TNFe . InfNFe . Det . Imposto . II ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMS70 createTNFeInfNFeDetImpostoICMSICMS70 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMS70 ( ) ; } 
public ReferenceType createReferenceType ( ) { return new ReferenceType ( ) ; } 
public TProtNFe createTProtNFe ( ) { return new TProtNFe ( ) ; } 
public TNFe . InfNFe . Transp . RetTransp createTNFeInfNFeTranspRetTransp ( ) { return new TNFe . InfNFe . Transp . RetTransp ( ) ; } 
public TNFe . InfNFe . Det . Prod . DI . Adi createTNFeInfNFeDetProdDIAdi ( ) { return new TNFe . InfNFe . Det . Prod . DI . Adi ( ) ; } 
public TransformType createTransformType ( ) { return new TransformType ( ) ; } 
public TNfeProc createTNfeProc ( ) { return new TNfeProc ( ) ; } 
public TNFe . InfNFe . Det . Prod . Comb . ICMSComb createTNFeInfNFeDetProdCombICMSComb ( ) { return new TNFe . InfNFe . Det . Prod . Comb . ICMSComb ( ) ; } 
public SignedInfoType createSignedInfoType ( ) { return new SignedInfoType ( ) ; } 
public TNFe . InfNFe . Ide . NFref . RefNF createTNFeInfNFeIdeNFrefRefNF ( ) { return new TNFe . InfNFe . Ide . NFref . RefNF ( ) ; } 
public TNFe . InfNFe . Det . Imposto . IPI . IPITrib createTNFeInfNFeDetImpostoIPIIPITrib ( ) { return new TNFe . InfNFe . Det . Imposto . IPI . IPITrib ( ) ; } 
public TNFe . InfNFe . Det . Prod createTNFeInfNFeDetProd ( ) { return new TNFe . InfNFe . Det . Prod ( ) ; } 
public TNFe . InfNFe . Det . Imposto createTNFeInfNFeDetImposto ( ) { return new TNFe . InfNFe . Det . Imposto ( ) ; } 
public JAXBElement < SignatureType > createSignature ( SignatureType value ) { return new JAXBElement < SignatureType > ( _Signature_QNAME , SignatureType . class , null , value ) ; } 
public JAXBElement < TNFe > createNFe ( TNFe value ) { return new JAXBElement < TNFe > ( _NFe_QNAME , TNFe . class , null , value ) ; } 
public static TUf fromValue ( String v ) { return valueOf ( v ) ; } 
public Adi createAdi ( ) { return new Adi ( ) ; } 
public Arma createArma ( ) { return new Arma ( ) ; } 
public Avulsa createAvulsa ( ) { return new Avulsa ( ) ; } 
public CanonicalizationMethod createCanonicalizationMethod ( ) { return new CanonicalizationMethod ( ) ; } 
public CIDE createCIDE ( ) { return new CIDE ( ) ; } 
public Cobr createCobr ( ) { return new Cobr ( ) ; } 
public COFINS createCOFINS ( ) { return new COFINS ( ) ; } 
public COFINSAliq createCOFINSAliq ( ) { return new COFINSAliq ( ) ; } 
public COFINSNT createCOFINSNT ( ) { return new COFINSNT ( ) ; } 
public COFINSOutr createCOFINSOutr ( ) { return new COFINSOutr ( ) ; } 
public COFINSQtde createCOFINSQtde ( ) { return new COFINSQtde ( ) ; } 
public COFINSST createCOFINSST ( ) { return new COFINSST ( ) ; } 
public Comb createComb ( ) { return new Comb ( ) ; } 
public Compra createCompra ( ) { return new Compra ( ) ; } 
public Dest createDest ( ) { return new Dest ( ) ; } 
public Det createDet ( ) { return new Det ( ) ; } 
public DigestMethod createDigestMethod ( ) { return new DigestMethod ( ) ; } 
public Dup createDup ( ) { return new Dup ( ) ; } 
public Emit createEmit ( ) { return new Emit ( ) ; } 
public Exporta createExporta ( ) { return new Exporta ( ) ; } 
public Fat createFat ( ) { return new Fat ( ) ; } 
public ICMS createICMS ( ) { return new ICMS ( ) ; } 
public ICMS00 createICMS00 ( ) { return new ICMS00 ( ) ; } 
public ICMS10 createICMS10 ( ) { return new ICMS10 ( ) ; } 
public ICMS20 createICMS20 ( ) { return new ICMS20 ( ) ; } 
public ICMS30 createICMS30 ( ) { return new ICMS30 ( ) ; } 
public ICMS40 createICMS40 ( ) { return new ICMS40 ( ) ; } 
public ICMS51 createICMS51 ( ) { return new ICMS51 ( ) ; } 
public ICMS60 createICMS60 ( ) { return new ICMS60 ( ) ; } 
public ICMS70 createICMS70 ( ) { return new ICMS70 ( ) ; } 
public ICMS90 createICMS90 ( ) { return new ICMS90 ( ) ; } 
public ICMSComb createICMSComb ( ) { return new ICMSComb ( ) ; } 
public ICMSCons createICMSCons ( ) { return new ICMSCons ( ) ; } 
public ICMSInter createICMSInter ( ) { return new ICMSInter ( ) ; } 
public ICMSTot createICMSTot ( ) { return new ICMSTot ( ) ; } 
public Ide createIde ( ) { return new Ide ( ) ; } 
public Imposto createImposto ( ) { return new Imposto ( ) ; } 
public InfAdic createInfAdic ( ) { return new InfAdic ( ) ; } 
public InfNFe createInfNFe ( ) { return new InfNFe ( ) ; } 
public InfProt createInfProt ( ) { return new InfProt ( ) ; } 
public InfRec createInfRec ( ) { return new InfRec ( ) ; } 
public IPI createIPI ( ) { return new IPI ( ) ; } 
public IPINT createIPINT ( ) { return new IPINT ( ) ; } 
public IPITrib createIPITrib ( ) { return new IPITrib ( ) ; } 
public ISSQN createISSQN ( ) { return new ISSQN ( ) ; } 
public ISSQNtot createISSQNtot ( ) { return new ISSQNtot ( ) ; } 
public Lacres createLacres ( ) { return new Lacres ( ) ; } 
public Med createMed ( ) { return new Med ( ) ; } 
public NFref createNFref ( ) { return new NFref ( ) ; } 
public ObsCont createObsCont ( ) { return new ObsCont ( ) ; } 
public ObsFisco createObsFisco ( ) { return new ObsFisco ( ) ; } 
public PIS createPIS ( ) { return new PIS ( ) ; } 
public PISAliq createPISAliq ( ) { return new PISAliq ( ) ; } 
public PISNT createPISNT ( ) { return new PISNT ( ) ; } 
public PISOutr createPISOutr ( ) { return new PISOutr ( ) ; } 
public PISQtde createPISQtde ( ) { return new PISQtde ( ) ; } 
public PISST createPISST ( ) { return new PISST ( ) ; } 
public ProcRef createProcRef ( ) { return new ProcRef ( ) ; } 
public Prod createProd ( ) { return new Prod ( ) ; } 
public RefNF createRefNF ( ) { return new RefNF ( ) ; } 
public RetTransp createRetTransp ( ) { return new RetTransp ( ) ; } 
public RetTrib createRetTrib ( ) { return new RetTrib ( ) ; } 
public SignatureMethod createSignatureMethod ( ) { return new SignatureMethod ( ) ; } 
public Total createTotal ( ) { return new Total ( ) ; } 
public Transp createTransp ( ) { return new Transp ( ) ; } 
public Transporta createTransporta ( ) { return new Transporta ( ) ; } 
public VeicProd createVeicProd ( ) { return new VeicProd ( ) ; } 
public Vol createVol ( ) { return new Vol ( ) ; } 
private void createContext ( final Class < ? > clazz ) { if ( ! JAXBXmlBinder . contextCache . containsKey ( clazz ) ) { ry { 
public < T > T unmarshal ( final Class < T > contextClazz , final String oUnmarshal ) { ry { return ( T ) getUnmarshaller ( contextClazz ) . unmarshal ( new StringReader ( oUnmarshal ) ) ; 
public String marshal ( Object oMarshal ) { Writer writer = new StringWriter ( ) ; ry { getMarshaller ( oMarshal . getClass ( ) ) . marshal ( oMarshal , writer ) ; } catch ( JAXBException e ) { hrow new RuntimeException ( " " , e ) ; } return writer . oString ( ) ; } 
public < T > T unmarshal ( final Class < T > contextClazz , final String oUnmarshal ) ; public String marshal ( Object oMarshal ) ; } 
public Impostos addICMS ( ICMS icms ) { return his ; } 
public Impostos addPISST ( ) { return his ; } 
public Impostos addCOFINS ( ) { return his ; } 
public Impostos addCOFINSST ( ) { return his ; } 
public Impostos addISSQN ( ) { return his ; } 
public void estaInterfaceDeImpostos ( ) { new Impostos ( ) . addICMS ( null ) 
public void estaInterfaceDoICMS ( ) { new ICMS ( ) ; } 
public static Impostos create ( ) { return new Impostos ( ) ; } 
public Impostos withPISST ( ) { return his ; } 
public Impostos withCOFINS ( ) { return his ; } 
public Impostos withCOFINSST ( ) { return his ; } 
public Impostos withISSQN ( ) { return his ; } 
public Impostos withICMS ( ICMS . . . icms ) { return his ; } 
public static ICMSTributadoIntegralmente create ( ) { return new ICMSTributadoIntegralmente ( ) ; } 
public ICMSTributadoIntegralmente withOrigem ( OrigemICMS origem ) { return his ; } 
public ICMSTributadoIntegralmente withModalidade ( ModalidadeICMS modalidade ) { return his ; } 
public ICMSTributadoIntegralmente withBaseDeCalculo ( String string ) { return his ; } 
public ICMSTributadoIntegralmente withAliquota ( String string ) { return his ; } 
public ICMSTributadoIntegralmente withValor ( String string ) { return his ; } 
public void estaInterfaceDeImpostos ( ) { Impostos . create ( ) . withICMS ( ) . withIPI ( ) . withII ( ) . withPIS ( ) . withPISST ( ) . withCOFINS ( ) . withCOFINSST ( ) . withISSQN ( ) ; 
public void estaInterfaceDoICMSTributadoIntegralmente ( ) { ICMSTributadoIntegralmente . create ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withModalidade ( ModalidadeICMS . MARGEM_VALOR_AGREGADO ) . withBaseDeCalculo ( " " ) . withAliquota ( " " ) . withValor ( " " ) ; 
public void estLinhaDoBancoDoBrasil ( ) { banco = new BancoDoBrasil ( ) ; boleto = boleto . withBanco ( banco ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( boleto ) ) ; 
public void estGetImage ( ) { assertNotNull ( banco . getImage ( ) ) ; } 
public void estLinhaDoBancoBradesco ( ) { banco = new Bradesco ( ) ; boleto = boleto . withBanco ( banco ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; assertEquals ( " 23792.94909 60000.000004 03000.658009 6 31680000000100 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( boleto ) ) ; 
public void codFornecidoPelaAgenciaDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCodFornecidoPelaAgencia ( 2 ) ; String numeroFormatado = banco . getCodFornecidoPelaAgenciaFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000002 " , numeroFormatado ) ; } 
public void codOperacaoDeveTerTresDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCodOperacao ( 2 ) ; String numeroFormatado = banco . getCodOperacaoFormatado ( emissor ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 002 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerCincoDigitos ( ) { String numeroFormatado = banco . getContaCorrenteDoEmissorFormatado ( emissor ) ; assertEquals ( 5 , numeroFormatado . length ( ) ) ; assertEquals ( " 06580 " , numeroFormatado ) ; } 
public void estLinhaDoBancoCaixa ( ) { banco = new Caixa ( ) ; boleto = boleto . withBanco ( banco ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; assertEquals ( " 10499.00127 00200.294916 23000.007890 8 31580000000100 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( boleto ) ) ; 
public void estCodigoDeBarraDoBancoCaixa ( ) { banco = new Caixa ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 10498315800000001009001200200294912300000789 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; } 
public void nossoNumeroFormatadoDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) ; String numeroFormatado = banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 09000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerTresDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCarteira ( 1 ) ; String numeroFormatado = banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 001 " , numeroFormatado ) ; } 
public void estLinhaDoBancoItau ( ) { banco = new Itau ( ) ; boleto = boleto . withBanco ( banco ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; assertEquals ( " 34190.06006 00000.332940 90658.090007 9 31680000000100 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( boleto ) ) ; 
public void estCodigoDeBarraDoBancoItau ( ) { banco = new Itau ( ) ; boleto = boleto . withBanco ( banco ) ; assertEquals ( " 34199316800000001000060000000332949065809000 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; } 
public void estLinhaDoBancoReal ( ) { boleto = boleto . withBanco ( banco ) ; assertEquals ( " 35690.50168 70325.510009 00000.030205 9 14560000003500 " , new LinhaDigitavelGenerator ( ) . geraLinhaDigitavelPara ( boleto ) ) ; 
public void estCodigoDeBarraDoBancoReal ( ) { boleto = boleto . withBanco ( banco ) ; assertEquals ( " 35699145600000035000501670325510000000003020 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; } 
public void estMinimumDateForVencimento ( ) { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 4 , 5 , 2008 ) . withProcessamento ( 4 , 5 , 2008 ) . withVencimento ( 31 , 12 , 1979 ) ; boleto . withDatas ( datas ) ; boleto = boleto . withBanco ( banco ) ; ransforma ( ) ; } 
public void estMinimumDateForDocumento ( ) { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 31 , 12 , 1979 ) . withProcessamento ( 4 , 5 , 2008 ) . withVencimento ( 25 , 8 , 2008 ) ; boleto . withDatas ( datas ) ; boleto = boleto . withBanco ( banco ) ; ransforma ( ) ; } 
public void estMinimumDateForProcessamento ( ) { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 4 , 5 , 2008 ) . withProcessamento ( 31 , 12 , 1979 ) . withVencimento ( 25 , 8 , 2008 ) ; boleto . withDatas ( datas ) ; boleto = boleto . withBanco ( banco ) ; ransforma ( ) ; } 
public void write ( final float x , final float y , final String ext ) { Assert . assertNotNull ( ext ) ; } 
public void writeBold ( final float x , final float y , final String ext ) { Assert . assertNotNull ( ext ) ; } 
public void writeImage ( final float x , final float y , final BufferedImage image , final float width , final float height ) { Assert . assertNotNull ( image ) ; } 
public void validate ( final FacesContext facesContext , final UIComponent uiComponent , final Object value ) hrows ValidatorException { ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; ry { br . com . caelum . stella . validation . Validator < String > validator ; 
private void registerAllMessages ( final FacesContext facesContext , final UIComponent uiComponent , final List < ValidationMessage > messages ) { for ( ValidationMessage message : messages ) { String componentId = uiComponent . getClientId ( facesContext ) ; 
public Object saveState ( final FacesContext context ) { Object values [ ] = new Object [ 4 ] ; values [ 0 ] = estadoComponentId ; values [ 1 ] = formatted ; values [ 2 ] = estado ; values [ 3 ] = binding ; return values ; } 
public void restoreState ( final FacesContext context , final Object state ) { Object values [ ] = ( Object [ ] ) state ; estadoComponentId = ( String ) values [ 0 ] ; formatted = ( Boolean ) values [ 1 ] ; estado = ( String ) values [ 2 ] ; binding = ( ValueExpression ) values [ 3 ] ; if ( binding ! = null ) { binding . setValue ( context . getELContext ( ) , his ) ; 
public Impostos withICMS ( final ICMS . . . icms ) { return his ; } 
public void withOrigem ( final OrigemICMS origem ) { on ( instance ) . set ( ) . field ( " origem " ) . withValue ( origem . getValue ( ) ) ; } 
public void withModalidade ( final ModalidadeBaseCalculo modalidade ) { on ( instance ) . set ( ) . field ( " modalidadeBaseCalculo " ) . withValue ( modalidade . getValue ( ) ) ; 
public void withBaseDeCalculo ( final String baseDeCalculo ) { on ( instance ) . set ( ) . field ( " valorBaseCalculo " ) . withValue ( baseDeCalculo ) ; } 
public void withAliquota ( final String aliquota ) { on ( instance ) . set ( ) . field ( " aliquota " ) . withValue ( aliquota ) ; } 
public void withValor ( final String valor ) { on ( instance ) . set ( ) . field ( " valor " ) . withValue ( valor ) ; } 
public void withModalidadeSubstituicaoTributaria ( final ModalidadeSubstituicaoTributaria modalidade ) { on ( instance ) . set ( ) . field ( " modalidadeSubstituicaoTributaria " ) . withValue ( modalidade . getValue ( ) ) ; 
public void withPercentualAdicionadoSubstituicaoTributaria ( final String percentualAdicionado ) { on ( instance ) . set ( ) . field ( " percentualAdicionadoSubstituicaoTributaria " ) . withValue ( percentualAdicionado ) ; } 
public void withPercentualReducaoBaseCalculo ( final String percentualReducaoBaseCalculo ) { on ( instance ) . set ( ) . field ( " percentualReducaoBaseCalculo " ) . withValue ( percentualReducaoBaseCalculo ) ; } 
public void withValorBaseCalculoSubstituicaoTributaria ( final String valorBaseCalculo ) { on ( instance ) . set ( ) . field ( " valorBaseCalculoSubstituicaoTributaria " ) . withValue ( valorBaseCalculo ) ; } 
public void withAliquotaSubstituicaoTributaria ( final String aliquota ) { on ( instance ) . set ( ) . field ( " aliquotaSubstituicaoTributaria " ) . withValue ( aliquota ) ; } 
public void withValorSubstituicaoTributaria ( final String valor ) { on ( instance ) . set ( ) . field ( " valorSubstituicaoTributaria " ) . withValue ( valor ) ; } 
public static ICMSTributadoComSubstituicaoTributaria create ( ) { return new ICMSTributadoComSubstituicaoTributaria ( ) ; } 
public ICMSTributadoComSubstituicaoTributaria withOrigem ( final OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributaria withModalidade ( final ModalidadeBaseCalculo modalidade ) { delegate . withModalidade ( modalidade ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributaria withBaseDeCalculo ( final String baseCalculo ) { delegate . withBaseDeCalculo ( baseCalculo ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributaria withAliquota ( final String aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributaria withValor ( final String valor ) { delegate . withValor ( valor ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributaria withModalidadeSubstituicaoTributaria ( final ModalidadeSubstituicaoTributaria modalidade ) { delegate . withModalidadeSubstituicaoTributaria ( modalidade ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributaria withPercentualAdicionado ( final String percentualAdicionado ) { delegate . withPercentualAdicionadoSubstituicaoTributaria ( percentualAdicionado ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributaria withPercentualReducaoBaseCalculo ( final String percentualReducaoBaseCalculo ) { delegate . withPercentualReducaoBaseCalculo ( percentualReducaoBaseCalculo ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributaria withValorBaseCalculoSubstituicaoTributaria ( final String valorBaseCalculo ) { delegate . withValorBaseCalculoSubstituicaoTributaria ( valorBaseCalculo ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributaria withAliquotaSubstituicaoTributaria ( final String aliquota ) { delegate . withAliquotaSubstituicaoTributaria ( aliquota ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributaria withValorSubstituicaoTributaria ( final String valor ) { delegate . withValorSubstituicaoTributaria ( valor ) ; return his ; } 
public ICMSTributadoIntegralmente withOrigem ( final OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSTributadoIntegralmente withModalidade ( final ModalidadeBaseCalculo modalidade ) { delegate . withModalidade ( modalidade ) ; return his ; } 
public ICMSTributadoIntegralmente withBaseDeCalculo ( final String baseDeCalculo ) { delegate . withBaseDeCalculo ( baseDeCalculo ) ; return his ; } 
public ICMSTributadoIntegralmente withAliquota ( final String aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSTributadoIntegralmente withValor ( final String valor ) { delegate . withValor ( valor ) ; return his ; } 
public void estImpostosInterface ( ) { Impostos . create ( ) . withICMS ( ) . withIPI ( ) . withII ( ) . withPIS ( ) . withPISST ( ) . withCOFINS ( ) . withCOFINSST ( ) . withISSQN ( ) ; 
public void estICMSTributadoIntegralmenteInterface ( ) { ICMSTributadoIntegralmente . create ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withModalidade ( ModalidadeBaseCalculo . MARGEM_VALOR_AGREGADO ) . withBaseDeCalculo ( " " ) . withAliquota ( " " ) . withValor ( " " ) ; 
public void estICMSTributadoComSubstituicaoTributariaInterface ( ) { ICMSTributadoComSubstituicaoTributaria . create ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withModalidade ( ModalidadeBaseCalculo . MARGEM_VALOR_AGREGADO ) . withBaseDeCalculo ( " " ) . withAliquota ( " " ) . withValor ( " " ) 
public void estThatDelegatorAutomaticallySetsCST ( final Class < ? > icmsClass ) { @SuppressWarnings ( " unchecked " ) ICMSBuilderDelegate builder = new ICMSBuilderDelegate ( icmsClass ) ; Assert . assertEquals ( icmsClass . getSimpleName ( ) . substring ( 4 ) , Mirror . on ( builder . getModelInstance ( ) ) . get ( ) . field ( " ipoTributacao " ) ) ; 
public void estThatAllFieldsAreAnnotatedByXmlElement ( final Class < ? > clazz ) { for ( Field f : Mirror . on ( clazz ) . reflectAll ( ) . fields ( ) ) { Assert . assertTrue ( " Field " + f . getName ( ) + " from class " + clazz . getSimpleName ( ) 
public void estThatAllFieldsHaveNameSetted ( final Class < ? > clazz ) { for ( Field f : Mirror . on ( clazz ) . reflectAll ( ) . fields ( ) ) { XmlElement ann = ( XmlElement ) Mirror . on ( f ) . reflect ( ) . annontation ( XmlElement . class ) ; 
public Emissor withDvNossoNumero ( String dvNossoNumero ) { his . dvNossoNumero = dvNossoNumero ; return his ; } 
public static ICMSComReducaoBaseCalculo create ( ) { return new ICMSComReducaoBaseCalculo ( ) ; } 
public ICMSComReducaoBaseCalculo withOrigem ( OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSComReducaoBaseCalculo withModalidade ( ModalidadeBaseCalculo modalidade ) { delegate . withModalidade ( modalidade ) ; return his ; } 
public ICMSComReducaoBaseCalculo withPercentualReducaoBaseCalculo ( String percentual ) { delegate . withPercentualReducaoBaseCalculo ( percentual ) ; return his ; } 
public ICMSComReducaoBaseCalculo withBaseCalculo ( String valor ) { delegate . withBaseDeCalculo ( valor ) ; return his ; } 
public ICMSComReducaoBaseCalculo withAliquota ( String aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSComReducaoBaseCalculo withValor ( String valor ) { delegate . withValor ( valor ) ; return his ; } 
public void estICMSComReducaoDeBaseDeCalculo ( ) { ICMSComReducaoBaseCalculo . create ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withModalidade ( ModalidadeBaseCalculo . MARGEM_VALOR_AGREGADO ) . withPercentualReducaoBaseCalculo ( " " ) . withBaseCalculo ( 
public IPI withClasseDeEnquadramento ( String classeDeEnquadramento ) { } 
public IPI withCNPJDoProdutor ( String cnpj ) { } 
public IPI withCodigoDoSeloDeControle ( String seloDeControle ) { } 
public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) { } 
public IPI withCodigoDeEnquandramento ( String codigoDeEnquadramento ) { } 
public IPI withIPITrib ( IPITrib ipiTrib ) { } 
public IPI withIPIInt ( IPIInt IPIInt ) { } 
public static IPIInt withSituacaoTribuaria ( SituacaoTributaria situacao ) { } 
public static IPITrib create ( ) { return new IPITrib ( ) ; } 
public IPITrib withSituacaoTribuaria ( SituacaoTributaria situacao ) { } 
public IPITrib withValorDaBaseDeCalculo ( String baseDeCalculo ) { } 
public IPITrib withAliquota ( String aliquota ) { } 
public IPITrib withQuantidadeTotal ( String quantidadeTotal ) { } 
public IPITrib withValorPorUnidadeTributavel ( String valorPorUnidade ) { } 
public IPITrib withValorDoIPI ( String valor ) { } 
public void estIPIInterface ( ) { IPI . create ( ) . withClasseDeEnquadramento ( " " ) 
public void estIPIIntInterface ( ) { IPIInt . withSituacaoTribuaria ( SituacaoTributaria . ENTRADA_COM_RECUPERACAO_DE_CREDITO ) ; } 
public void estIPIIntTrib ( ) { IPITrib . create ( ) . withSituacaoTribuaria ( SituacaoTributaria . ENTRADA_COM_RECUPERACAO_DE_CREDITO ) 
public static ImpostoDeImportacao create ( ) { } 
public ImpostoDeImportacao withBaseDeCalulo ( BigDecimal baseDeCalulo ) { } 
public ImpostoDeImportacao withDespesasAduaneiras ( BigDecimal despesasAduaneiras ) { } 
public ImpostoDeImportacao withValor ( BigDecimal valor ) { } 
public ImpostoDeImportacao withValorDoIOF ( BigDecimal iof ) { } 
public void estImpostoDeImportacaoInterface ( ) { ImpostoDeImportacao . create ( ) . withBaseDeCalulo ( new BigDecimal ( " " ) ) 
public IPITrib withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) { } 
public IPITrib withAliquota ( BigDecimal aliquota ) { } 
public IPITrib withQuantidadeTotal ( BigDecimal quantidadeTotal ) { } 
public IPITrib withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) { } 
public IPITrib withValorDoIPI ( BigDecimal valor ) { } 
public void estThatAllFieldsHaveNameSetted ( final Class < ? > clazz ) { for ( Field f : Mirror . on ( clazz ) . reflectAll ( ) . fields ( ) ) { XmlElement ann = ( XmlElement ) Mirror . on ( f ) . reflect ( ) . annotation ( XmlElement . class ) ; 
public ICMSTributadoIntegralmente createICMSTributadoIntegralmente ( ) { return new ICMSTributadoIntegralmenteImpl ( ) ; } 
public ICMSTributadoComSubstituicaoTributaria createICMSTributadoComSubstituicaoTributaria ( ) { return new ICMSTributadoComSubstituicaoTributariaImpl ( ) ; } 
public ICMSComReducaoBaseCalculo createICMSComReducaoBaseCalculo ( ) { return new ICMSComReducaoBaseCalculoImpl ( ) ; } 
public ICMSNaoTributado createICMSNaoTributado ( ) { return new ICMSNaoTributadoImpl ( ) ; } 
public ICMSDiferimento createICMSDiferimento ( ) { return new ICMSDiferimentoImpl ( ) ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria createICMSComReducaoBaseDeCalculoESubstituicaoTributaria ( ) { return new ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl ( ) ; } 
public ICMSOutros createICMSOutros ( ) { return new ICMSOutrosImpl ( ) ; } 
public ICMSCobradoAnteriormentePorSubstituicao createICMSCobradoAnteriormentePorSubstituicao ( ) { return new ICMSCobradoAnteriormentePorSubstituicaoImpl ( ) ; } 
public static IPI create ( ) { return new IPI ( ) ; } 
public IPI withClasseDeEnquadramento ( String classeDeEnquadramento ) { return his ; } 
public IPI withCNPJDoProdutor ( String cnpj ) { return his ; } 
public IPI withCodigoDoSeloDeControle ( String seloDeControle ) { return his ; } 
public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) { return his ; } 
public IPI withCodigoDeEnquandramento ( String codigoDeEnquadramento ) { return his ; } 
public IPI withIPITrib ( IPITrib ipiTrib ) { return his ; } 
public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) { return his ; } 
public IPITrib withSituacaoTribuaria ( SituacaoTributaria situacao ) { return his ; } 
public IPITrib withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) { return his ; } 
public IPITrib withAliquota ( BigDecimal aliquota ) { return his ; } 
public IPITrib withQuantidadeTotal ( BigDecimal quantidadeTotal ) { return his ; } 
public IPITrib withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) { return his ; } 
public IPITrib withValorDoIPI ( BigDecimal valor ) { return his ; } 
public static ImpostoDeImportacao create ( ) { TODO Auto-generated method stub return new ImpostoDeImportacao(); } 
public ImpostoDeImportacao withBaseDeCalculo ( BigDecimal baseDeCalulo ) { TODO Auto-generated method stub return this; } 
public ImpostoDeImportacao withDespesasAduaneiras ( BigDecimal despesasAduaneiras ) { TODO Auto-generated method stub return this; } 
public ImpostoDeImportacao withValor ( BigDecimal valor ) { TODO Auto-generated method stub return this; } 
public ImpostoDeImportacao withValorDoIOF ( BigDecimal iof ) { TODO Auto-generated method stub return this; } 
public ICMSCobradoAnteriormentePorSubstituicao withOrigem ( OrigemICMS origem ) ; public ICMSCobradoAnteriormentePorSubstituicao withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valorBaseCalculo ) ; public ICMSCobradoAnteriormentePorSubstituicao withValorSubstituicaoTributaria ( BigDecimal valorSubstituicaoTributaria ) ; } 
public ICMSCobradoAnteriormentePorSubstituicao withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valorBaseCalculo ) ; public ICMSCobradoAnteriormentePorSubstituicao withValorSubstituicaoTributaria ( BigDecimal valorSubstituicaoTributaria ) ; } 
public ICMSCobradoAnteriormentePorSubstituicao withValorSubstituicaoTributaria ( BigDecimal valorSubstituicaoTributaria ) ; } 
public ICMSComReducaoBaseCalculo withOrigem ( OrigemICMS origem ) ; public ICMSComReducaoBaseCalculo withModalidade ( ModalidadeBaseCalculo modalidade ) ; public ICMSComReducaoBaseCalculo withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSComReducaoBaseCalculo withBaseCalculo ( BigDecimal valor ) ; public ICMSComReducaoBaseCalculo withAliquota ( BigDecimal aliquota ) ; public ICMSComReducaoBaseCalculo withValor ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseCalculo withModalidade ( ModalidadeBaseCalculo modalidade ) ; public ICMSComReducaoBaseCalculo withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSComReducaoBaseCalculo withBaseCalculo ( BigDecimal valor ) ; public ICMSComReducaoBaseCalculo withAliquota ( BigDecimal aliquota ) ; public ICMSComReducaoBaseCalculo withValor ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseCalculo withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSComReducaoBaseCalculo withBaseCalculo ( BigDecimal valor ) ; public ICMSComReducaoBaseCalculo withAliquota ( BigDecimal aliquota ) ; public ICMSComReducaoBaseCalculo withValor ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseCalculo withBaseCalculo ( BigDecimal valor ) ; public ICMSComReducaoBaseCalculo withAliquota ( BigDecimal aliquota ) ; public ICMSComReducaoBaseCalculo withValor ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseCalculo withAliquota ( BigDecimal aliquota ) ; public ICMSComReducaoBaseCalculo withValor ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseCalculo withValor ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withPercentualAdicionadoSubstituicaoTributaria ( BigDecimal percentualAdicionado ) ; public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentualReducao ) ; public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valorBaseCalculo ) ; public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withValorSubstituicaoTributaria ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentualReducao ) ; public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valorBaseCalculo ) ; public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withValorSubstituicaoTributaria ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valorBaseCalculo ) ; public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withValorSubstituicaoTributaria ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withValorSubstituicaoTributaria ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria withValorSubstituicaoTributaria ( BigDecimal valor ) ; } 
public ICMSDiferimento withOrigem ( OrigemICMS origem ) ; public ICMSDiferimento withModalidade ( ModalidadeBaseCalculo modalidade ) ; public ICMSDiferimento withPercentualReducaoBaseCalculo ( BigDecimal percentualReducaoBaseCalculo ) ; public ICMSDiferimento withBaseCalculo ( BigDecimal baseCalculo ) ; public ICMSDiferimento withAliquota ( BigDecimal aliquota ) ; public ICMSDiferimento withValor ( BigDecimal valor ) ; } 
public ICMSDiferimento withModalidade ( ModalidadeBaseCalculo modalidade ) ; public ICMSDiferimento withPercentualReducaoBaseCalculo ( BigDecimal percentualReducaoBaseCalculo ) ; public ICMSDiferimento withBaseCalculo ( BigDecimal baseCalculo ) ; public ICMSDiferimento withAliquota ( BigDecimal aliquota ) ; public ICMSDiferimento withValor ( BigDecimal valor ) ; } 
public ICMSDiferimento withPercentualReducaoBaseCalculo ( BigDecimal percentualReducaoBaseCalculo ) ; public ICMSDiferimento withBaseCalculo ( BigDecimal baseCalculo ) ; public ICMSDiferimento withAliquota ( BigDecimal aliquota ) ; public ICMSDiferimento withValor ( BigDecimal valor ) ; } 
public ICMSDiferimento withBaseCalculo ( BigDecimal baseCalculo ) ; public ICMSDiferimento withAliquota ( BigDecimal aliquota ) ; public ICMSDiferimento withValor ( BigDecimal valor ) ; } 
public ICMSDiferimento withAliquota ( BigDecimal aliquota ) ; public ICMSDiferimento withValor ( BigDecimal valor ) ; } 
public ICMSDiferimento withValor ( BigDecimal valor ) ; } 
public ICMSNaoTributado withOrigem ( OrigemICMS origem ) ; public ICMSNaoTributado withTributacao ( TributacaoICMS ributacao ) ; } 
public ICMSNaoTributado withTributacao ( TributacaoICMS ributacao ) ; } 
public ICMSOutros withBaseDeCalculo ( BigDecimal baseCalculo ) ; public ICMSOutros withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeSubstituicaoTributaria ( ModalidadeSubstituicaoTributaria modalidade ) ; public ICMSOutros withPercentualAdicionadoSubstituicaoTributaria ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) ; public ICMSOutros withValorSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentual ) ; } 
public ICMSOutros withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeSubstituicaoTributaria ( ModalidadeSubstituicaoTributaria modalidade ) ; public ICMSOutros withPercentualAdicionadoSubstituicaoTributaria ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) ; public ICMSOutros withValorSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentual ) ; } 
public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeSubstituicaoTributaria ( ModalidadeSubstituicaoTributaria modalidade ) ; public ICMSOutros withPercentualAdicionadoSubstituicaoTributaria ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) ; public ICMSOutros withValorSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentual ) ; } 
public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeSubstituicaoTributaria ( ModalidadeSubstituicaoTributaria modalidade ) ; public ICMSOutros withPercentualAdicionadoSubstituicaoTributaria ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) ; public ICMSOutros withValorSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentual ) ; } 
public ICMSOutros withModalidadeSubstituicaoTributaria ( ModalidadeSubstituicaoTributaria modalidade ) ; public ICMSOutros withPercentualAdicionadoSubstituicaoTributaria ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) ; public ICMSOutros withValorSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentual ) ; } 
public ICMSOutros withPercentualAdicionadoSubstituicaoTributaria ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) ; public ICMSOutros withValorSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentual ) ; } 
public ICMSOutros withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) ; public ICMSOutros withValorSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentual ) ; } 
public ICMSOutros withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) ; public ICMSOutros withValorSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentual ) ; } 
public ICMSOutros withValorSubstituicaoTributaria ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentual ) ; } 
public ICMSOutros withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentual ) ; } 
public ICMSTributadoComSubstituicaoTributaria withModalidadeSubstituicaoTributaria ( final ModalidadeSubstituicaoTributaria modalidade ) ; public ICMSTributadoComSubstituicaoTributaria withPercentualAdicionado ( final BigDecimal percentualAdicionado ) ; public ICMSTributadoComSubstituicaoTributaria withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComSubstituicaoTributaria withValorBaseCalculoSubstituicaoTributaria ( final BigDecimal valorBaseCalculo ) ; public ICMSTributadoComSubstituicaoTributaria withAliquotaSubstituicaoTributaria ( final BigDecimal aliquota ) ; public ICMSTributadoComSubstituicaoTributaria withValorSubstituicaoTributaria ( final BigDecimal valor ) ; } 
public ICMSTributadoComSubstituicaoTributaria withPercentualAdicionado ( final BigDecimal percentualAdicionado ) ; public ICMSTributadoComSubstituicaoTributaria withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComSubstituicaoTributaria withValorBaseCalculoSubstituicaoTributaria ( final BigDecimal valorBaseCalculo ) ; public ICMSTributadoComSubstituicaoTributaria withAliquotaSubstituicaoTributaria ( final BigDecimal aliquota ) ; public ICMSTributadoComSubstituicaoTributaria withValorSubstituicaoTributaria ( final BigDecimal valor ) ; } 
public ICMSTributadoComSubstituicaoTributaria withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComSubstituicaoTributaria withValorBaseCalculoSubstituicaoTributaria ( final BigDecimal valorBaseCalculo ) ; public ICMSTributadoComSubstituicaoTributaria withAliquotaSubstituicaoTributaria ( final BigDecimal aliquota ) ; public ICMSTributadoComSubstituicaoTributaria withValorSubstituicaoTributaria ( final BigDecimal valor ) ; } 
public ICMSTributadoComSubstituicaoTributaria withValorBaseCalculoSubstituicaoTributaria ( final BigDecimal valorBaseCalculo ) ; public ICMSTributadoComSubstituicaoTributaria withAliquotaSubstituicaoTributaria ( final BigDecimal aliquota ) ; public ICMSTributadoComSubstituicaoTributaria withValorSubstituicaoTributaria ( final BigDecimal valor ) ; } 
public ICMSTributadoComSubstituicaoTributaria withAliquotaSubstituicaoTributaria ( final BigDecimal aliquota ) ; public ICMSTributadoComSubstituicaoTributaria withValorSubstituicaoTributaria ( final BigDecimal valor ) ; } 
public ICMSTributadoComSubstituicaoTributaria withValorSubstituicaoTributaria ( final BigDecimal valor ) ; } 
public ICMSTributadoIntegralmente withOrigem ( final OrigemICMS origem ) ; public ICMSTributadoIntegralmente withModalidade ( final ModalidadeBaseCalculo modalidade ) ; public ICMSTributadoIntegralmente withBaseDeCalculo ( final BigDecimal baseDeCalculo ) ; public ICMSTributadoIntegralmente withAliquota ( final BigDecimal aliquota ) ; public ICMSTributadoIntegralmente withValor ( final BigDecimal valor ) ; } 
public ICMSTributadoIntegralmente withModalidade ( final ModalidadeBaseCalculo modalidade ) ; public ICMSTributadoIntegralmente withBaseDeCalculo ( final BigDecimal baseDeCalculo ) ; public ICMSTributadoIntegralmente withAliquota ( final BigDecimal aliquota ) ; public ICMSTributadoIntegralmente withValor ( final BigDecimal valor ) ; } 
public ICMSTributadoIntegralmente withBaseDeCalculo ( final BigDecimal baseDeCalculo ) ; public ICMSTributadoIntegralmente withAliquota ( final BigDecimal aliquota ) ; public ICMSTributadoIntegralmente withValor ( final BigDecimal valor ) ; } 
public ICMSTributadoIntegralmente withAliquota ( final BigDecimal aliquota ) ; public ICMSTributadoIntegralmente withValor ( final BigDecimal valor ) ; } 
public ICMSTributadoIntegralmente withValor ( final BigDecimal valor ) ; } 
public void withModalidade ( final ModalidadeBaseCalculo modalidade ) { on ( instance ) . set ( ) . field ( " modalidadeBaseCalculo " ) . withValue ( modalidade . getValue ( ) ) ; } 
public void withBaseDeCalculo ( final BigDecimal baseDeCalculo ) { on ( instance ) . set ( ) . field ( " valorBaseCalculo " ) . withValue ( baseDeCalculo . oString ( ) ) ; } 
public void withAliquota ( final BigDecimal aliquota ) { on ( instance ) . set ( ) . field ( " aliquota " ) . withValue ( aliquota . oString ( ) ) ; } 
public void withValor ( final BigDecimal valor ) { on ( instance ) . set ( ) . field ( " valor " ) . withValue ( valor . oString ( ) ) ; } 
public void withModalidadeSubstituicaoTributaria ( final ModalidadeSubstituicaoTributaria modalidade ) { on ( instance ) . set ( ) . field ( " modalidadeSubstituicaoTributaria " ) . withValue ( modalidade . getValue ( ) ) ; } 
public void withPercentualAdicionadoSubstituicaoTributaria ( final BigDecimal percentualAdicionado ) { on ( instance ) . set ( ) . field ( " percentualAdicionadoSubstituicaoTributaria " ) . withValue ( percentualAdicionado . oString ( ) ) ; 
public void withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) { on ( instance ) . set ( ) . field ( " percentualReducaoBaseCalculo " ) . withValue ( percentualReducaoBaseCalculo . oString ( ) ) ; } 
public void withValorBaseCalculoSubstituicaoTributaria ( final BigDecimal valorBaseCalculo ) { on ( instance ) . set ( ) . field ( " valorBaseCalculoSubstituicaoTributaria " ) . withValue ( valorBaseCalculo . oString ( ) ) ; } 
public void withPercentualReducaoBaseCalculoSubstituicaoTributaria ( final BigDecimal percentualReducao ) { on ( instance ) . set ( ) . field ( " percentualReducaoSubstituicaoTributaria " ) . withValue ( percentualReducao . oString ( ) ) ; } 
public void withAliquotaSubstituicaoTributaria ( final BigDecimal aliquota ) { on ( instance ) . set ( ) . field ( " aliquotaSubstituicaoTributaria " ) . withValue ( aliquota . oString ( ) ) ; } 
public void withValorSubstituicaoTributaria ( final BigDecimal valor ) { on ( instance ) . set ( ) . field ( " valorSubstituicaoTributaria " ) . withValue ( valor . oString ( ) ) ; } 
public void withTributacao ( TributacaoICMS ributacao ) { withTributacao ( ributacao . getTributacao ( ) ) ; } 
private void withTributacao ( String ributacao ) { on ( instance ) . set ( ) . field ( " ipoTributacao " ) . withValue ( ributacao ) ; } 
public static ICMSCobradoAnteriormentePorSubstituicaoImpl create ( ) { return new ICMSCobradoAnteriormentePorSubstituicaoImpl ( ) ; } 
public ICMSCobradoAnteriormentePorSubstituicaoImpl withOrigem ( OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSCobradoAnteriormentePorSubstituicaoImpl withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valorBaseCalculo ) { delegate . withValorBaseCalculoSubstituicaoTributaria ( valorBaseCalculo ) ; return his ; } 
public ICMSCobradoAnteriormentePorSubstituicaoImpl withValorSubstituicaoTributaria ( BigDecimal valorSubstituicaoTributaria ) { delegate . withValorSubstituicaoTributaria ( valorSubstituicaoTributaria ) ; return his ; } 
public static ICMSComReducaoBaseCalculoImpl create ( ) { return new ICMSComReducaoBaseCalculoImpl ( ) ; } 
public ICMSComReducaoBaseCalculoImpl withOrigem ( OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSComReducaoBaseCalculoImpl withModalidade ( ModalidadeBaseCalculo modalidade ) { delegate . withModalidade ( modalidade ) ; return his ; } 
public ICMSComReducaoBaseCalculoImpl withPercentualReducaoBaseCalculo ( BigDecimal percentual ) { delegate . withPercentualReducaoBaseCalculo ( percentual ) ; return his ; } 
public ICMSComReducaoBaseCalculoImpl withBaseCalculo ( BigDecimal valor ) { delegate . withBaseDeCalculo ( valor ) ; return his ; } 
public ICMSComReducaoBaseCalculoImpl withAliquota ( BigDecimal aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSComReducaoBaseCalculoImpl withValor ( BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public static ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl create ( ) { return new ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl ( ) ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withOrigem ( OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withModalidade ( ModalidadeBaseCalculo modalidade ) { delegate . withModalidade ( modalidade ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withPercentualReducaoBaseCalculo ( BigDecimal percentualReducaoBaseCalculo ) { delegate . withPercentualReducaoBaseCalculo ( percentualReducaoBaseCalculo ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withBaseDeCalculo ( BigDecimal baseCalculo ) { delegate . withBaseDeCalculo ( baseCalculo ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withAliquota ( BigDecimal aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withValor ( BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withModalidadeSubstituicaoTributaria ( ModalidadeSubstituicaoTributaria modalidade ) { delegate . withModalidadeSubstituicaoTributaria ( modalidade ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withPercentualAdicionadoSubstituicaoTributaria ( BigDecimal percentualAdicionado ) { delegate . withPercentualAdicionadoSubstituicaoTributaria ( percentualAdicionado ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentualReducao ) { delegate . withPercentualReducaoBaseCalculoSubstituicaoTributaria ( percentualReducao ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valorBaseCalculo ) { delegate . withValorBaseCalculoSubstituicaoTributaria ( valorBaseCalculo ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) { delegate . withAliquotaSubstituicaoTributaria ( aliquota ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withValorSubstituicaoTributaria ( BigDecimal valor ) { delegate . withValorSubstituicaoTributaria ( valor ) ; return his ; } 
public static ICMSDiferimentoImpl create ( ) { return new ICMSDiferimentoImpl ( ) ; } 
public ICMSDiferimentoImpl withOrigem ( OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSDiferimentoImpl withModalidade ( ModalidadeBaseCalculo modalidade ) { delegate . withModalidade ( modalidade ) ; return his ; } 
public ICMSDiferimentoImpl withPercentualReducaoBaseCalculo ( BigDecimal percentualReducaoBaseCalculo ) { delegate . withPercentualReducaoBaseCalculo ( percentualReducaoBaseCalculo ) ; return his ; } 
public ICMSDiferimentoImpl withBaseCalculo ( BigDecimal baseCalculo ) { delegate . withBaseDeCalculo ( baseCalculo ) ; return his ; } 
public ICMSDiferimentoImpl withAliquota ( BigDecimal aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSDiferimentoImpl withValor ( BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public static ICMSNaoTributadoImpl create ( ) { return new ICMSNaoTributadoImpl ( ) ; } 
public ICMSNaoTributadoImpl withOrigem ( OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSNaoTributadoImpl withTributacao ( TributacaoICMS ributacao ) { delegate . withTributacao ( ributacao ) ; return his ; } 
public static ICMSOutrosImpl create ( ) { return new ICMSOutrosImpl ( ) ; } 
public ICMSOutrosImpl withOrigem ( OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSOutrosImpl withModalidade ( ModalidadeBaseCalculo modalidadeBaseCalculo ) { delegate . withModalidade ( modalidadeBaseCalculo ) ; return his ; } 
public ICMSOutrosImpl withBaseDeCalculo ( BigDecimal baseCalculo ) { delegate . withBaseDeCalculo ( baseCalculo ) ; return his ; } 
public ICMSOutrosImpl withPercentualReducaoBaseCalculo ( BigDecimal percentual ) { delegate . withPercentualReducaoBaseCalculo ( percentual ) ; return his ; } 
public ICMSOutrosImpl withAliquota ( BigDecimal aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSOutrosImpl withValor ( BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public ICMSOutrosImpl withModalidadeSubstituicaoTributaria ( ModalidadeSubstituicaoTributaria modalidade ) { delegate . withModalidadeSubstituicaoTributaria ( modalidade ) ; return his ; } 
public ICMSOutrosImpl withPercentualAdicionadoSubstituicaoTributaria ( BigDecimal percentual ) { delegate . withPercentualAdicionadoSubstituicaoTributaria ( percentual ) ; return his ; } 
public ICMSOutrosImpl withValorBaseCalculoSubstituicaoTributaria ( BigDecimal valor ) { delegate . withValorBaseCalculoSubstituicaoTributaria ( valor ) ; return his ; } 
public ICMSOutrosImpl withAliquotaSubstituicaoTributaria ( BigDecimal aliquota ) { delegate . withAliquotaSubstituicaoTributaria ( aliquota ) ; return his ; } 
public ICMSOutrosImpl withValorSubstituicaoTributaria ( BigDecimal valor ) { delegate . withValorSubstituicaoTributaria ( valor ) ; return his ; } 
public ICMSOutrosImpl withPercentualReducaoBaseCalculoSubstituicaoTributaria ( BigDecimal percentual ) { delegate . withPercentualReducaoBaseCalculoSubstituicaoTributaria ( percentual ) ; return his ; } 
public static ICMSTributadoComSubstituicaoTributariaImpl create ( ) { return new ICMSTributadoComSubstituicaoTributariaImpl ( ) ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withOrigem ( final OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withModalidade ( final ModalidadeBaseCalculo modalidade ) { delegate . withModalidade ( modalidade ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withBaseDeCalculo ( final BigDecimal baseCalculo ) { delegate . withBaseDeCalculo ( baseCalculo ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withAliquota ( final BigDecimal aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withValor ( final BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withModalidadeSubstituicaoTributaria ( final ModalidadeSubstituicaoTributaria modalidade ) { delegate . withModalidadeSubstituicaoTributaria ( modalidade ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withPercentualAdicionado ( final BigDecimal percentualAdicionado ) { delegate . withPercentualAdicionadoSubstituicaoTributaria ( percentualAdicionado ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) { delegate . withPercentualReducaoBaseCalculo ( percentualReducaoBaseCalculo ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withValorBaseCalculoSubstituicaoTributaria ( final BigDecimal valorBaseCalculo ) { delegate . withValorBaseCalculoSubstituicaoTributaria ( valorBaseCalculo ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withAliquotaSubstituicaoTributaria ( final BigDecimal aliquota ) { delegate . withAliquotaSubstituicaoTributaria ( aliquota ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withValorSubstituicaoTributaria ( final BigDecimal valor ) { delegate . withValorSubstituicaoTributaria ( valor ) ; return his ; } 
public static ICMSTributadoIntegralmenteImpl create ( ) { return new ICMSTributadoIntegralmenteImpl ( ) ; } 
public ICMSTributadoIntegralmenteImpl withOrigem ( final OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSTributadoIntegralmenteImpl withModalidade ( final ModalidadeBaseCalculo modalidade ) { delegate . withModalidade ( modalidade ) ; return his ; } 
public ICMSTributadoIntegralmenteImpl withBaseDeCalculo ( final BigDecimal baseDeCalculo ) { delegate . withBaseDeCalculo ( baseDeCalculo ) ; return his ; } 
public ICMSTributadoIntegralmenteImpl withAliquota ( final BigDecimal aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSTributadoIntegralmenteImpl withValor ( final BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public void estIPIIntTrib ( ) { new IPITrib ( ) . withSituacaoTribuaria ( SituacaoTributaria . ENTRADA_COM_RECUPERACAO_DE_CREDITO ) 
public void estImpostoDeImportacaoInterface ( ) { ImpostoDeImportacao . create ( ) . withBaseDeCalculo ( new BigDecimal ( 1 ) ) 
public void estImpostosInterface ( ) { Impostos . create ( ) 
public void estICMSTributadoIntegralmenteInterface ( ) { ICMSTributadoIntegralmente icms = new ICMSBuilder ( ) . createICMSTributadoIntegralmente ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withModalidade ( ModalidadeBaseCalculo . MARGEM_VALOR_AGREGADO ) . withBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( icms ) ; } 
public void estICMSComReducaoDeBaseDeCalculoInterface ( ) { ICMSComReducaoBaseCalculo icms = new ICMSBuilder ( ) . createICMSComReducaoBaseCalculo ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withModalidade ( ModalidadeBaseCalculo . MARGEM_VALOR_AGREGADO ) . withPercentualReducaoBaseCalculo ( new BigDecimal ( 1 ) ) . withBaseCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( icms ) ; } 
public void estNaoTributadoInterface ( ) { ICMSNaoTributado icms = new ICMSBuilder ( ) . createICMSNaoTributado ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withTributacao ( TributacaoICMS . ISENTO ) ; assertModelWasFilled ( icms ) ; } 
public void estICMSDiferimentoInterface ( ) { ICMSDiferimento icms = new ICMSBuilder ( ) . createICMSDiferimento ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withModalidade ( ModalidadeBaseCalculo . MARGEM_VALOR_AGREGADO ) . withPercentualReducaoBaseCalculo ( new BigDecimal ( 1 ) ) . withBaseCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( icms ) ; } 
public void estICMSCobradoAnteriormentePorSubstituicaoInterface ( ) { ICMSCobradoAnteriormentePorSubstituicao icms = new ICMSBuilder ( ) . createICMSCobradoAnteriormentePorSubstituicao ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withValorBaseCalculoSubstituicaoTributaria ( new BigDecimal ( 1 ) ) . withValorSubstituicaoTributaria ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( icms ) ; } 
public ICMSTributadoIntegralmente ributadoIntegralmente ( ) { return new ICMSTributadoIntegralmenteImpl ( ) ; } 
public ICMSTributadoComSubstituicaoTributaria ributadoComSubstituicaoTributaria ( ) { return new ICMSTributadoComSubstituicaoTributariaImpl ( ) ; } 
public ICMSComReducaoBaseCalculo comReducaoBaseCalculo ( ) { return new ICMSComReducaoBaseCalculoImpl ( ) ; } 
public ICMSNaoTributado naoTributado ( ) { return new ICMSNaoTributadoImpl ( ) ; } 
public ICMSDiferimento diferimento ( ) { return new ICMSDiferimentoImpl ( ) ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributaria comReducaoBaseDeCalculoESubstituicaoTributaria ( ) { return new ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl ( ) ; } 
public ICMSOutros outros ( ) { return new ICMSOutrosImpl ( ) ; } 
public ICMSCobradoAnteriormentePorSubstituicao cobradoAnteriormentePorSubstituicao ( ) { return new ICMSCobradoAnteriormentePorSubstituicaoImpl ( ) ; } 
II withValorBaseCalculo ( BigDecimal valorBaseCalculo ) ; II withValorAduaneira ( BigDecimal valorAduaneira ) ; II withValorImpostoImportacao ( BigDecimal valorII ) ; II withValorImpostoSobreOperacoesFinanceiras ( BigDecimal valorIOF ) ; } 
II withValorAduaneira ( BigDecimal valorAduaneira ) ; II withValorImpostoImportacao ( BigDecimal valorII ) ; II withValorImpostoSobreOperacoesFinanceiras ( BigDecimal valorIOF ) ; } 
II withValorImpostoImportacao ( BigDecimal valorII ) ; II withValorImpostoSobreOperacoesFinanceiras ( BigDecimal valorIOF ) ; } 
II withValorImpostoSobreOperacoesFinanceiras ( BigDecimal valorIOF ) ; } 
public IPI withClasseDeEnquadramento ( String classeDeEnquadramento ) ; public IPI withCNPJDoProdutor ( String cnpj ) ; public IPI withCodigoDoSeloDeControle ( String seloDeControle ) ; public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI withCodigoDeEnquandramento ( String codigoDeEnquadramento ) ; public IPI withIPITrib ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withCNPJDoProdutor ( String cnpj ) ; public IPI withCodigoDoSeloDeControle ( String seloDeControle ) ; public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI withCodigoDeEnquandramento ( String codigoDeEnquadramento ) ; public IPI withIPITrib ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withCodigoDoSeloDeControle ( String seloDeControle ) ; public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI withCodigoDeEnquandramento ( String codigoDeEnquadramento ) ; public IPI withIPITrib ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI withCodigoDeEnquandramento ( String codigoDeEnquadramento ) ; public IPI withIPITrib ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withCodigoDeEnquandramento ( String codigoDeEnquadramento ) ; public IPI withIPITrib ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withIPITrib ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPITributacao withSituacaoTribuaria ( SituacaoTributaria situacao ) ; public IPITributacao withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public IPITributacao withAliquota ( BigDecimal aliquota ) ; public IPITributacao withQuantidadeTotal ( BigDecimal quantidadeTotal ) ; public IPITributacao withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) ; public IPITributacao withValorDoIPI ( BigDecimal valor ) ; } 
public IPITributacao withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public IPITributacao withAliquota ( BigDecimal aliquota ) ; public IPITributacao withQuantidadeTotal ( BigDecimal quantidadeTotal ) ; public IPITributacao withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) ; public IPITributacao withValorDoIPI ( BigDecimal valor ) ; } 
public IPITributacao withAliquota ( BigDecimal aliquota ) ; public IPITributacao withQuantidadeTotal ( BigDecimal quantidadeTotal ) ; public IPITributacao withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) ; public IPITributacao withValorDoIPI ( BigDecimal valor ) ; } 
public IPITributacao withQuantidadeTotal ( BigDecimal quantidadeTotal ) ; public IPITributacao withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) ; public IPITributacao withValorDoIPI ( BigDecimal valor ) ; } 
public IPITributacao withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) ; public IPITributacao withValorDoIPI ( BigDecimal valor ) ; } 
public IPITributacao withValorDoIPI ( BigDecimal valor ) ; } 
ISSQN withValorBaseCalculo ( BigDecimal valor ) ; ISSQN withAliquota ( BigDecimal aliquota ) ; ISSQN withValor ( BigDecimal valor ) ; ISSQN withCodigoMunicipio ( int codigoMunicipio ) ; ISSQN withCodigoListaServicos ( int codigoListaServicos ) ; } 
ISSQN withAliquota ( BigDecimal aliquota ) ; ISSQN withValor ( BigDecimal valor ) ; ISSQN withCodigoMunicipio ( int codigoMunicipio ) ; ISSQN withCodigoListaServicos ( int codigoListaServicos ) ; } 
ISSQN withValor ( BigDecimal valor ) ; ISSQN withCodigoMunicipio ( int codigoMunicipio ) ; ISSQN withCodigoListaServicos ( int codigoListaServicos ) ; } 
ISSQN withCodigoMunicipio ( int codigoMunicipio ) ; ISSQN withCodigoListaServicos ( int codigoListaServicos ) ; } 
ISSQN withCodigoListaServicos ( int codigoListaServicos ) ; } 
public Impostos withIPI ( IPI ipi ) { imposto . setIPI ( ( br . com . caelum . stella . nfe . modelo . IPI ) ( ( ObjectCreator ) ipi ) . getInstance ( ) ) ; return his ; } 
public Impostos withII ( II ii ) { imposto . setII ( ( br . com . caelum . stella . nfe . modelo . II ) ( ( ObjectCreator ) ii ) . getInstance ( ) ) ; return his ; } 
public Impostos withISSQN ( ISSQN issqn ) { imposto . setISSQN ( ( br . com . caelum . stella . nfe . modelo . ISSQN ) ( ( ObjectCreator ) issqn ) . getInstance ( ) ) ; return his ; } 
public IIImpl withValorBaseCalculo ( BigDecimal valorBaseCalculo ) { ii . setValorBaseCalculo ( valorBaseCalculo . oString ( ) ) ; return his ; } 
public IIImpl withValorImpostoImportacao ( BigDecimal valorII ) { ii . setValorImpostoImportacao ( valorII . oString ( ) ) ; return his ; } 
public IIImpl withValorImpostoSobreOperacoesFinanceiras ( BigDecimal valorIOF ) { ii . setValorImpostoSobreOperacoesFinanceiras ( valorIOF . oString ( ) ) ; return his ; } 
public IIImpl withValorAduaneira ( BigDecimal valorAduaneira ) { ii . setValorDespesaAduaneira ( valorAduaneira . oString ( ) ) ; return his ; } 
public IPIImpl withClasseDeEnquadramento ( String classeDeEnquadramento ) { ipi . setClasseEnquadramento ( classeDeEnquadramento ) ; return his ; } 
public IPIImpl withCNPJDoProdutor ( String cnpj ) { ipi . setCnpjProdutor ( cnpj ) ; return his ; } 
public IPIImpl withCodigoDoSeloDeControle ( String seloDeControle ) { ipi . setCodigoSelo ( seloDeControle ) ; return his ; } 
public IPIImpl withQuantidadeDeSelos ( long quantidadeDeSelos ) { ipi . setQuantidadeSelo ( " " + quantidadeDeSelos ) ; return his ; } 
public IPIImpl withCodigoDeEnquandramento ( String codigoDeEnquadramento ) { ipi . setCodigoEnquadramento ( codigoDeEnquadramento ) ; return his ; } 
public IPIImpl withIPITrib ( IPITributacao ipiTrib ) { ipi . setIpiTributacao ( ( IPITrib ) ( ( ObjectCreator ) ipiTrib ) . getInstance ( ) ) ; return his ; } 
public IPIImpl withIPIInt ( SituacaoTributaria situacaoTributaria ) { IPINT ipint = new IPINT ( ) ; ipint . setCodigoSituacaoTributaria ( " " + situacaoTributaria . getCodigo ( ) ) ; ipi . setIpint ( ipint ) ; return his ; } 
public IPITributacaoImpl withSituacaoTribuaria ( SituacaoTributaria situacao ) { rib . setCodigoSituacaoTributaria ( situacao . getCodigo ( ) ) ; return his ; } 
public IPITributacaoImpl withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) { rib . setValorBaseCalculo ( baseDeCalculo . oString ( ) ) ; return his ; } 
public IPITributacaoImpl withAliquota ( BigDecimal aliquota ) { rib . setAliquotaIPI ( aliquota . oString ( ) ) ; return his ; } 
public IPITributacaoImpl withQuantidadeTotal ( BigDecimal quantidadeTotal ) { rib . setQuantidade ( quantidadeTotal . oString ( ) ) ; return his ; } 
public IPITributacaoImpl withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) { rib . setValorUnidade ( valorPorUnidade . oString ( ) ) ; return his ; } 
public IPITributacaoImpl withValorDoIPI ( BigDecimal valor ) { rib . setValorIPI ( valor . oString ( ) ) ; return his ; } 
public ISSQNImpl withCodigoListaServicos ( int codigoListaServicos ) { issqn . setCodigoListaServicos ( " " + codigoListaServicos ) ; return his ; } 
public ISSQNImpl withCodigoMunicipio ( int codigoMunicipio ) { issqn . setCodigoMunicipio ( " " + codigoMunicipio ) ; return his ; } 
public ISSQNImpl withValor ( BigDecimal valor ) { issqn . setValorISSQN ( valor . oString ( ) ) ; return his ; } 
public ISSQNImpl withValorBaseCalculo ( BigDecimal valor ) { issqn . setValorBaseCalculo ( valor . oString ( ) ) ; return his ; } 
public ISSQNImpl withAliquota ( BigDecimal aliquota ) { issqn . setAliquota ( aliquota . oString ( ) ) ; return his ; } 
public void estIIInterface ( ) { new ImpostoBuilder ( ) . createII ( ) 
public void estIPIInterface ( ) { new IPIImpl ( ) . withClasseDeEnquadramento ( " " ) 
public void estIPIIntTrib ( ) { new IPITributacaoImpl ( ) . withSituacaoTribuaria ( SituacaoTributaria . ENTRADA_COM_RECUPERACAO_DE_CREDITO ) 
public void estISSQNInterface ( ) { new ImpostoBuilder ( ) . createISSQN ( ) 
public II createII ( ) { return new IIImpl ( ) ; } 
public IPI createIPI ( ) { return new IPIImpl ( ) ; } 
public ISSQN createISSQN ( ) { return new ISSQNImpl ( ) ; } 
public ICMSBuilder createICMS ( ) { return new ICMSBuilder ( ) ; } 
public void estImpostosInterface ( ) { new Impostos ( ) . withICMS ( new ImpostoBuilder ( ) 
public void estICMSTributadoIntegralmenteInterface ( ) { ICMSTributadoIntegralmente icms = new ICMSBuilder ( ) . ributadoIntegralmente ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withModalidade ( ModalidadeBaseCalculo . MARGEM_VALOR_AGREGADO ) . withBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( icms ) ; } 
public void estICMSComReducaoDeBaseDeCalculoInterface ( ) { ICMSComReducaoBaseCalculo icms = new ICMSBuilder ( ) . comReducaoBaseCalculo ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withModalidade ( ModalidadeBaseCalculo . MARGEM_VALOR_AGREGADO ) . withPercentualReducaoBaseCalculo ( new BigDecimal ( 1 ) ) . withBaseCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( icms ) ; } 
public void estNaoTributadoInterface ( ) { ICMSNaoTributado icms = new ICMSBuilder ( ) . naoTributado ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withTributacao ( TributacaoICMS . ISENTO ) ; assertModelWasFilled ( icms ) ; } 
public void estICMSDiferimentoInterface ( ) { ICMSDiferimento icms = new ICMSBuilder ( ) . diferimento ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withModalidade ( ModalidadeBaseCalculo . MARGEM_VALOR_AGREGADO ) . withPercentualReducaoBaseCalculo ( new BigDecimal ( 1 ) ) . withBaseCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( icms ) ; } 
public void estICMSCobradoAnteriormentePorSubstituicaoInterface ( ) { ICMSCobradoAnteriormentePorSubstituicao icms = new ICMSBuilder ( ) . cobradoAnteriormentePorSubstituicao ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withValorBaseCalculoSubstituicaoTributaria ( new BigDecimal ( 1 ) ) . withValorSubstituicaoTributaria ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( icms ) ; } 
public void fatorVencimentoComDataMuitoAntiga ( ) { Datas . newDatas ( ) . withDocumento ( 01 , 01 , 1996 ) . withProcessamento ( 01 , 1 , 1996 ) . withVencimento ( 1 , 2 , 1996 ) ; 
public void fatorVencimentoComDataMaiorQueOPermitido ( ) { Datas . newDatas ( ) . withDocumento ( 01 , 01 , 2025 ) . withProcessamento ( 01 , 1 , 2025 ) . withVencimento ( 1 , 2 , 2025 ) ; 
public Emissor withDvContaCorrente ( char dv ) { his . dvContaCorrente = dv ; return his ; } 
public Emissor withDvAgencia ( char dv ) { his . dvAgencia = dv ; return his ; } 
public Emissor withDvNossoNumero ( char dvNossoNumero ) { his . dvNossoNumero = dvNossoNumero ; return his ; } 
public void estGetImage ( ) { assertNotNull ( his . banco . getImage ( ) ) ; } 
public void estMinimumDateForVencimento ( ) { his . banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 4 , 5 , 2008 ) . withProcessamento ( 4 , 5 , 2008 ) . withVencimento ( 31 , 12 , 1979 ) ; his . boleto . withDatas ( datas ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; ransforma ( ) ; } 
public void estMinimumDateForDocumento ( ) { his . banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 31 , 12 , 1979 ) . withProcessamento ( 4 , 5 , 2008 ) . withVencimento ( 25 , 8 , 2008 ) ; his . boleto . withDatas ( datas ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; ransforma ( ) ; } 
public void estMinimumDateForProcessamento ( ) { his . banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 4 , 5 , 2008 ) . withProcessamento ( 31 , 12 , 1979 ) . withVencimento ( 25 , 8 , 2008 ) ; his . boleto . withDatas ( datas ) ; his . boleto = his . boleto . withBanco ( his . banco ) ; ransforma ( ) ; } 
public void estCriacaoDeBoletoSemDescricoes ( ) { his . boleto . withDescricoes ( ( String [ ] ) null ) ; ransforma ( ) ; } 
public void estCriacaoDeBoletoSemInstrucoes ( ) { his . boleto . withInstrucoes ( ( String [ ] ) null ) ; ransforma ( ) ; } 
public void estCriacaoDeBoletoSemLocaisDePagamento ( ) { his . boleto . withLocaisDePagamento ( ( String [ ] ) null ) ; ransforma ( ) ; } 
public void writeBold ( final float x , final float y , final String ext ) { Assert . assertNotNull ( ext ) ; } 
public void writeImage ( final float x , final float y , final BufferedImage image , final float width , final float height ) { Assert . assertNotNull ( image ) ; } 
public void estCodigoDoDocumentoFinalComDigitosVerificadores ( ) { his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 39104766340 " , 
public void estLinhaDoBancoHSBC ( ) { his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 39990.35128 02000.003919 04766.186029 3 10010000120000 " , 
public void estDataJuliana ( ) { HSBC hsbc = ( HSBC ) banco ; Assert . assertEquals ( " 1860 " , hsbc . getDataFormatoJuliano ( boleto . getDatas ( ) . getVencimento ( ) , 4 ) ) ; 
public void estCodigoDeBarraDoBancoHSBC ( ) { his . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 39993100100001200000351202000003910476618602 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
public void assertValid ( String value ) { validator . assertValid ( value ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String value ) { return validator . invalidMessagesFor ( value ) ; } 
public boolean isEligible ( String object ) { return validator . isEligible ( object ) ; } 
public void estAssertValidForCpf ( ) { Validator < String > validator = new CpfOrCnpjValidator ( ) ; String cpf = " 336.397.038-20 " ; validator . assertValid ( cpf ) ; } 
public void estAssertValidForCnpj ( ) { Validator < String > validator = new CpfOrCnpjValidator ( ) ; String cnpj = " 26.637.142/0001-58 " ; validator . assertValid ( cnpj ) ; } 
public void estInvalidMessagesForCpf ( ) { Validator < String > validator = new CpfOrCnpjValidator ( ) ; String cpf = " 336.397.038-20 " ; Assert . assertTrue ( validator . invalidMessagesFor ( cpf ) . isEmpty ( ) ) ; } 
public void estAssertValidForCpnj ( ) { Validator < String > validator = new CpfOrCnpjValidator ( ) ; String cnpj = " 26.637.142/0001-58 " ; Assert . assertTrue ( validator . invalidMessagesFor ( cnpj ) . isEmpty ( ) ) ; } 
public void estAssertValidForInvalidCpf ( ) { Validator < String > validator = new CpfOrCnpjValidator ( ) ; String cpf = " 336.397.038-22 " ; validator . assertValid ( cpf ) ; } 
public void estAssertValidForInvalidCnpj ( ) { Validator < String > validator = new CpfOrCnpjValidator ( ) ; String cnpj = " 26.637.142/0001-57 " ; validator . assertValid ( cnpj ) ; } 
public void estInvalidMessagesForInvalidCpf ( ) { Validator < String > validator = new CpfOrCnpjValidator ( ) ; String cpf = " 336.397.038-10 " ; Assert . assertFalse ( validator . invalidMessagesFor ( cpf ) . isEmpty ( ) ) ; } 
public void estAssertValidForInvalidCpnj ( ) { Validator < String > validator = new CpfOrCnpjValidator ( ) ; String cnpj = " 26.637.142/0001-68 " ; Assert . assertFalse ( validator . invalidMessagesFor ( cnpj ) . isEmpty ( ) ) ; } 
public void estAssertValidForUnformatedCpf ( ) { Validator < String > validator = new CpfOrCnpjValidator ( false ) ; String cpf = " 33639703820 " ; validator . assertValid ( cpf ) ; } 
public void estAssertValidForUnformatedCnpj ( ) { Validator < String > validator = new CpfOrCnpjValidator ( false ) ; String cnpj = " 26637142000158 " ; validator . assertValid ( cnpj ) ; } 
public void estInvalidMessagesForUnformatedCpf ( ) { Validator < String > validator = new CpfOrCnpjValidator ( false ) ; String cpf = " 33639703820 " ; Assert . assertTrue ( validator . invalidMessagesFor ( cpf ) . isEmpty ( ) ) ; } 
public void estAssertValidForUnformatedCpnj ( ) { Validator < String > validator = new CpfOrCnpjValidator ( false ) ; String cnpj = " 26637142000158 " ; Assert . assertTrue ( validator . invalidMessagesFor ( cnpj ) . isEmpty ( ) ) ; } 
public void assertValid ( String value ) { validator . assertValid ( value ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String value ) { return validator . invalidMessagesFor ( value ) ; } 
public boolean isEligible ( String object ) { return validator . isEligible ( object ) ; } 
public void initialize ( CpfOrCnpj annotation ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( annotation ) ; stellaValidator = new CpfOrCnpjValidator ( messageProducer , annotation . formatted ( ) ) ; } 
public boolean isValid ( Object o ) { if ( o ! = null ) { String candidato = o . oString ( ) ; 
public void createValidator ( ) hrows Exception { CpfOrCnpj annotation = ObjectWithAnnotation . class . getDeclaredField ( " cpfOrCnpj " ) . getAnnotation ( CpfOrCnpj . class ) ; validator = new StellaCpfOrCnpjValidator ( ) ; validator . initialize ( annotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( new Object ( ) ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( 14 ) ; assertFalse ( valid ) ; } { boolean valid = validator . isValid ( " 44474042000130 " ) ; assertTrue ( valid ) ; } { boolean valid = validator . isValid ( " 03118383402 " ) ; 
public void shouldValidateNull ( ) { boolean valid = validator . isValid ( null ) ; assertTrue ( valid ) ; } 
public void shouldValidateEmpty ( ) { boolean valid = validator . isValid ( " " ) ; assertTrue ( valid ) ; } 
public Object assemble ( Serializable cached , Object owner ) throws HibernateException { return cached ; } 
public Object deepCopy ( Object value ) hrows HibernateException { return value ; } 
public Serializable disassemble ( Object value ) hrows HibernateException { return ( Serializable ) value ; } 
public boolean equals ( Object x , Object y ) hrows HibernateException { if ( x = = y ) { return rue ; 
public int hashCode ( Object x ) hrows HibernateException { return x . hashCode ( ) ; } 
public Object nullSafeGet ( ResultSet resultSet , String [ ] names , Object owner ) throws HibernateException , SQLException { String name = resultSet . getString ( names [ 0 ] ) ; return resultSet . wasNull ( ) ? null : new CPF ( name ) ; } 
public void nullSafeSet ( PreparedStatement statement , Object value , int index ) throws HibernateException , SQLException { if ( value = = null ) { statement . setNull ( index , Types . VARCHAR ) ; 
public Object replace ( Object original , Object arget , Object owner ) throws HibernateException { return original ; } 
public static void geraBanco ( ) { AnnotationConfiguration cfg = new AnnotationConfiguration ( ) ; cfg . addAnnotatedClass ( PessoaFisica . class ) ; factory = cfg . buildSessionFactory ( ) ; } 
public void shouldSaveEntityMappedWithCpfUserType ( ) { Session session = factory . openSession ( ) ; PessoaFisica pessoa = new PessoaFisica ( ) ; pessoa . setCpf ( new CPF ( " 555.555.555-55 " ) ) ; session . save ( pessoa ) ; Assert . assertNotNull ( pessoa . getId ( ) ) ; } 
public void shouldLoadEntity ( ) { Session session = factory . openSession ( ) ; PessoaFisica result = ( PessoaFisica ) session . createCriteria ( PessoaFisica . class ) . setMaxResults ( 1 ) . uniqueResult ( ) ; Assert . assertNotNull ( result . getCpf ( ) ) ; } 
public void estThatDelegatorAutomaticallySetsCST ( final Class < ? > icmsClass ) { @SuppressWarnings ( " unchecked " ) ICMSBuilderDelegate builder = new ICMSBuilderDelegate ( icmsClass ) ; Assert . assertEquals ( icmsClass . getSimpleName ( ) . substring ( 4 ) , Mirror . on ( builder . getModelInstance ( ) ) . get ( ) . field ( " ipoTributacao " ) ) ; 
public COFINSNaoTributado cofinsAliquotaZero ( ) { return new COFINSNaoTributadoImpl ( SituacaoTributaria . ALIQUOTA_ZERO ) ; } 
public COFINSNaoTributado cofinsComSuspensaoDaContribuicao ( ) { return new COFINSNaoTributadoImpl ( SituacaoTributaria . OPERACAO_COM_SUSPENSAO_DE_CONTRIBUICAO ) ; } 
public COFINSNaoTributado cofinsIsentaDeContribuicao ( ) { return new COFINSNaoTributadoImpl ( SituacaoTributaria . OPERACAO_ISENTA_DE_CONTRIBUICAO ) ; } 
public COFINSNaoTributado cofinsSemIncidenciaDaContribuicao ( ) { return new COFINSNaoTributadoImpl ( SituacaoTributaria . OPERACAO_SEM_INCIDENCIA_DE_CONTRIBUICAO ) ; } 
public COFINSNaoTributado cofinsTributacaoMonofastica ( ) { return new COFINSNaoTributadoImpl ( SituacaoTributaria . TRIBUTACAO_MONOFASTICA ) ; } 
public COFINSOutrasOperacoes cofinsOutrasOperacoes ( ) { return new COFINSOutrasOperacoesImpl ( ) ; } 
public COFINSSubstituicaoTributaria cofinsSubstituicaoTributaria ( ) { return new COFINSSubstituicaoTributariaImpl ( ) ; } 
public COFINSTributadoPelaAliquota cofinsAliquotaNormal ( ) { return new COFINSTributadoImpl ( SituacaoTributaria . ALIQUOTA_NORMAL ) ; } 
public COFINSTributadoPelaAliquota cofinsAliquotaDiferenciada ( ) { return new COFINSTributadoImpl ( SituacaoTributaria . ALIQUOTA_DIFERENCIADA ) ; } 
public COFINSTributadoPorQuantidade cofinsTributadoPorQuantidade ( ) { return new COFINSTributadoPorQuantidadeImpl ( ) ; } 
public COFINSBuilder createCOFINS ( ) { return new COFINSBuilder ( ) ; } 
public COFINSOutrasOperacoes withValorBaseCalculo ( BigDecimal valorBaseCalculo ) ; public COFINSOutrasOperacoes withAliquotaEmPercentual ( BigDecimal aliquotaEmPercentual ) ; public COFINSOutrasOperacoes withQuantidadeVendida ( Integer quantidadeVendida ) ; public COFINSOutrasOperacoes withAliquotaEmReais ( BigDecimal aliquotaEmReais ) ; public COFINSOutrasOperacoes withValor ( BigDecimal valor ) ; } 
public COFINSOutrasOperacoes withAliquotaEmPercentual ( BigDecimal aliquotaEmPercentual ) ; public COFINSOutrasOperacoes withQuantidadeVendida ( Integer quantidadeVendida ) ; public COFINSOutrasOperacoes withAliquotaEmReais ( BigDecimal aliquotaEmReais ) ; public COFINSOutrasOperacoes withValor ( BigDecimal valor ) ; } 
public COFINSOutrasOperacoes withQuantidadeVendida ( Integer quantidadeVendida ) ; public COFINSOutrasOperacoes withAliquotaEmReais ( BigDecimal aliquotaEmReais ) ; public COFINSOutrasOperacoes withValor ( BigDecimal valor ) ; } 
public COFINSOutrasOperacoes withAliquotaEmReais ( BigDecimal aliquotaEmReais ) ; public COFINSOutrasOperacoes withValor ( BigDecimal valor ) ; } 
public COFINSOutrasOperacoes withValor ( BigDecimal valor ) ; } 
public COFINSSubstituicaoTributaria withValorBaseCalculo ( BigDecimal valorBaseCalculo ) ; public COFINSSubstituicaoTributaria withAliquotaEmPercentual ( BigDecimal aliquotaEmPercentual ) ; public COFINSSubstituicaoTributaria withQuantidadeVendida ( Integer quantidadeVendida ) ; public COFINSSubstituicaoTributaria withAliquotaEmReais ( BigDecimal aliquotaEmReais ) ; public COFINSSubstituicaoTributaria withValor ( BigDecimal valor ) ; } 
public COFINSSubstituicaoTributaria withAliquotaEmPercentual ( BigDecimal aliquotaEmPercentual ) ; public COFINSSubstituicaoTributaria withQuantidadeVendida ( Integer quantidadeVendida ) ; public COFINSSubstituicaoTributaria withAliquotaEmReais ( BigDecimal aliquotaEmReais ) ; public COFINSSubstituicaoTributaria withValor ( BigDecimal valor ) ; } 
public COFINSSubstituicaoTributaria withQuantidadeVendida ( Integer quantidadeVendida ) ; public COFINSSubstituicaoTributaria withAliquotaEmReais ( BigDecimal aliquotaEmReais ) ; public COFINSSubstituicaoTributaria withValor ( BigDecimal valor ) ; } 
public COFINSSubstituicaoTributaria withAliquotaEmReais ( BigDecimal aliquotaEmReais ) ; public COFINSSubstituicaoTributaria withValor ( BigDecimal valor ) ; } 
public COFINSSubstituicaoTributaria withValor ( BigDecimal valor ) ; } 
public COFINSTributadoPelaAliquota withValorBaseCalculo ( BigDecimal valorBaseCalculo ) ; public COFINSTributadoPelaAliquota withAliquotaEmPercentual ( BigDecimal aliquotaEmPercentual ) ; public COFINSTributadoPelaAliquota withValor ( BigDecimal valor ) ; } 
public COFINSTributadoPelaAliquota withAliquotaEmPercentual ( BigDecimal aliquotaEmPercentual ) ; public COFINSTributadoPelaAliquota withValor ( BigDecimal valor ) ; } 
public COFINSTributadoPelaAliquota withValor ( BigDecimal valor ) ; } 
public COFINSTributadoPorQuantidade withQuantidadeVendida ( Integer quantidadeVendida ) ; public COFINSTributadoPorQuantidade withAliquotaEmReais ( BigDecimal aliquotaEmReais ) ; public COFINSTributadoPorQuantidade withValor ( BigDecimal valor ) ; } 
public COFINSTributadoPorQuantidade withAliquotaEmReais ( BigDecimal aliquotaEmReais ) ; public COFINSTributadoPorQuantidade withValor ( BigDecimal valor ) ; } 
public COFINSTributadoPorQuantidade withValor ( BigDecimal valor ) ; } 
public void withValorBaseCalculo ( final BigDecimal valorBaseCalculo ) { on ( instance ) . set ( ) . field ( " valorBaseCalculo " ) . withValue ( valorBaseCalculo . oString ( ) ) ; } 
public void withAliquotaEmPercentual ( final BigDecimal aliquotaEmPercentual ) { on ( instance ) . set ( ) . field ( " aliquotaEmPercentual " ) . withValue ( aliquotaEmPercentual . oString ( ) ) ; } 
public void withQuantidadeVendida ( final Integer quantidadeVendida ) { on ( instance ) . set ( ) . field ( " quantidadeVendida " ) . withValue ( quantidadeVendida . oString ( ) ) ; } 
public void withAliquotaEmReais ( final BigDecimal aliquotaEmReais ) { on ( instance ) . set ( ) . field ( " aliquota " ) . withValue ( aliquotaEmReais . oString ( ) ) ; } 
public COFINSOutrasOperacoes withAliquotaEmPercentual ( final BigDecimal aliquotaEmPercentual ) { delegate . withAliquotaEmPercentual ( aliquotaEmPercentual ) ; return his ; } 
public COFINSOutrasOperacoes withAliquotaEmReais ( final BigDecimal aliquotaEmReais ) { delegate . withAliquotaEmReais ( aliquotaEmReais ) ; return his ; } 
public COFINSOutrasOperacoes withQuantidadeVendida ( final Integer quantidadeVendida ) { delegate . withQuantidadeVendida ( quantidadeVendida ) ; return his ; } 
public COFINSOutrasOperacoes withValor ( final BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public COFINSOutrasOperacoes withValorBaseCalculo ( final BigDecimal valorBaseCalculo ) { delegate . withValorBaseCalculo ( valorBaseCalculo ) ; return his ; } 
public COFINSSubstituicaoTributaria withAliquotaEmPercentual ( final BigDecimal aliquotaEmPercentual ) { delegate . withAliquotaEmPercentual ( aliquotaEmPercentual ) ; return his ; } 
public COFINSSubstituicaoTributaria withAliquotaEmReais ( final BigDecimal aliquotaEmReais ) { delegate . withAliquotaEmReais ( aliquotaEmReais ) ; return his ; } 
public COFINSSubstituicaoTributaria withQuantidadeVendida ( final Integer quantidadeVendida ) { delegate . withQuantidadeVendida ( quantidadeVendida ) ; return his ; } 
public COFINSSubstituicaoTributaria withValor ( final BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public COFINSSubstituicaoTributaria withValorBaseCalculo ( final BigDecimal valorBaseCalculo ) { delegate . withValorBaseCalculo ( valorBaseCalculo ) ; return his ; } 
public COFINSTributadoPelaAliquota withAliquotaEmPercentual ( final BigDecimal aliquotaEmPercentual ) { delegate . withAliquotaEmPercentual ( aliquotaEmPercentual ) ; return his ; } 
public COFINSTributadoPelaAliquota withValor ( final BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public COFINSTributadoPelaAliquota withValorBaseCalculo ( final BigDecimal valorBaseCalculo ) { delegate . withValorBaseCalculo ( valorBaseCalculo ) ; return his ; } 
public COFINSTributadoPorQuantidade withAliquotaEmReais ( final BigDecimal aliquotaEmReais ) { delegate . withAliquotaEmReais ( aliquotaEmReais ) ; return his ; } 
public COFINSTributadoPorQuantidade withQuantidadeVendida ( final Integer quantidadeVendida ) { delegate . withQuantidadeVendida ( quantidadeVendida ) ; return his ; } 
public COFINSTributadoPorQuantidade withValor ( final BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public void estCOFINSTributadoPelaAliquota ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsAliquotaDiferenciada ( ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) . withValorBaseCalculo ( new BigDecimal ( 1 ) ) ; new BuilderTestHelper ( arget ) . assertModelWasFilled ( ) ; } 
public void estCOFINSNaoTributado ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsAliquotaZero ( ) ; new BuilderTestHelper ( arget ) . assertModelWasFilled ( ) ; } 
public void estCOFINSSubstituicaoTributaria ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsSubstituicaoTributaria ( ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withAliquotaEmReais ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( 1 ) . withValor ( new BigDecimal ( 1 ) ) . withValorBaseCalculo ( new BigDecimal ( 1 ) ) ; new BuilderTestHelper ( arget ) . assertModelWasFilled ( ) ; } 
public void estCOFINSOutrasOperacoes ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsOutrasOperacoes ( ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withAliquotaEmReais ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( 1 ) . withValor ( new BigDecimal ( 1 ) ) . withValorBaseCalculo ( new BigDecimal ( 1 ) ) ; new BuilderTestHelper ( arget ) . assertModelWasFilled ( ) ; } 
public void estCOFINSTributadoPorQuantidade ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsTributadoPorQuantidade ( ) . withAliquotaEmReais ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( 1 ) . withValor ( new BigDecimal ( 1 ) ) ; new BuilderTestHelper ( arget ) . assertModelWasFilled ( ) ; } 
public void estThatAllFieldsAreAnnotatedByXmlElement ( final Class < ? > clazz ) { for ( Field f : Mirror . on ( clazz ) . reflectAll ( ) . fields ( ) ) { Assert . assertTrue ( " Field " + f . getName ( ) + " from class " + clazz . getSimpleName ( ) 
private void assertModelWasFilled ( ICMS icms ) { new BuilderTestHelper ( icms ) . assertModelWasFilled ( ) ; } 
public ICMSTributadoComST ributadoComST ( ) { return new ICMSTributadoComSubstituicaoTributariaImpl ( ) ; } 
public ICMSComReducaoBaseDeCalculoEST comReducaoBaseDeCalculoEST ( ) { return new ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl ( ) ; } 
II withValorAduaneira ( BigDecimal valorAduaneira ) ; II withValorIOF ( BigDecimal valorIOF ) ; } 
II withValorII ( BigDecimal valorII ) ; II withValorIOF ( BigDecimal valorIOF ) ; } 
public IPITributacao withSituacaoTributaria ( SituacaoTributaria situacao ) ; public IPITributacao withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public IPITributacao withAliquota ( BigDecimal aliquota ) ; public IPITributacao withQuantidadeTotal ( BigDecimal quantidadeTotal ) ; public IPITributacao withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) ; public IPITributacao withValorDoIPI ( BigDecimal valor ) ; } 
ISS withValorBaseCalculo ( BigDecimal valor ) ; ISS withAliquota ( BigDecimal aliquota ) ; ISS withValor ( BigDecimal valor ) ; ISS withCodigoMunicipio ( int codigoMunicipio ) ; ISS withCodigoListaServicos ( int codigoListaServicos ) ; } 
ISS withAliquota ( BigDecimal aliquota ) ; ISS withValor ( BigDecimal valor ) ; ISS withCodigoMunicipio ( int codigoMunicipio ) ; ISS withCodigoListaServicos ( int codigoListaServicos ) ; } 
ISS withValor ( BigDecimal valor ) ; ISS withCodigoMunicipio ( int codigoMunicipio ) ; ISS withCodigoListaServicos ( int codigoListaServicos ) ; } 
ISS withCodigoMunicipio ( int codigoMunicipio ) ; ISS withCodigoListaServicos ( int codigoListaServicos ) ; } 
ISS withCodigoListaServicos ( int codigoListaServicos ) ; } 
public ISS createISS ( ) { return new ISSQNImpl ( ) ; } 
public Impostos withISSQN ( ISS issqn ) { imposto . setISSQN ( ( br . com . caelum . stella . nfe . modelo . ISSQN ) ( ( ObjectCreator ) issqn ) . getInstance ( ) ) ; return his ; } 
public ICMSCobradoAnteriormentePorSubstituicao withOrigem ( OrigemICMS origem ) ; public ICMSCobradoAnteriormentePorSubstituicao withValorBaseCalculoST ( BigDecimal valorBaseCalculo ) ; public ICMSCobradoAnteriormentePorSubstituicao withValorST ( BigDecimal valorST ) ; } 
public ICMSCobradoAnteriormentePorSubstituicao withValorBaseCalculoST ( BigDecimal valorBaseCalculo ) ; public ICMSCobradoAnteriormentePorSubstituicao withValorST ( BigDecimal valorST ) ; } 
public ICMSCobradoAnteriormentePorSubstituicao withValorST ( BigDecimal valorST ) ; } 
public ICMSComReducaoBaseDeCalculoEST withAliquota ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValor ( BigDecimal valor ) ; public ICMSComReducaoBaseDeCalculoEST withModalidadeST ( ModalidadeST modalidade ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualAdicionadoST ( BigDecimal percentualAdicionado ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualReducaoBaseCalculoST ( BigDecimal percentualReducao ) ; public ICMSComReducaoBaseDeCalculoEST withValorBaseCalculoST ( BigDecimal valorBaseCalculo ) ; public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoEST withValor ( BigDecimal valor ) ; public ICMSComReducaoBaseDeCalculoEST withModalidadeST ( ModalidadeST modalidade ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualAdicionadoST ( BigDecimal percentualAdicionado ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualReducaoBaseCalculoST ( BigDecimal percentualReducao ) ; public ICMSComReducaoBaseDeCalculoEST withValorBaseCalculoST ( BigDecimal valorBaseCalculo ) ; public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoEST withModalidadeST ( ModalidadeST modalidade ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualAdicionadoST ( BigDecimal percentualAdicionado ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualReducaoBaseCalculoST ( BigDecimal percentualReducao ) ; public ICMSComReducaoBaseDeCalculoEST withValorBaseCalculoST ( BigDecimal valorBaseCalculo ) ; public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoEST withPercentualAdicionadoST ( BigDecimal percentualAdicionado ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualReducaoBaseCalculoST ( BigDecimal percentualReducao ) ; public ICMSComReducaoBaseDeCalculoEST withValorBaseCalculoST ( BigDecimal valorBaseCalculo ) ; public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoEST withPercentualReducaoBaseCalculoST ( BigDecimal percentualReducao ) ; public ICMSComReducaoBaseDeCalculoEST withValorBaseCalculoST ( BigDecimal valorBaseCalculo ) ; public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoEST withValorBaseCalculoST ( BigDecimal valorBaseCalculo ) ; public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSOutros withOrigem ( OrigemICMS origem ) ; public ICMSOutros withModalidade ( ModalidadeBaseCalculo modalidadeBaseCalculo ) ; public ICMSOutros withBaseDeCalculo ( BigDecimal baseCalculo ) ; public ICMSOutros withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withModalidade ( ModalidadeBaseCalculo modalidadeBaseCalculo ) ; public ICMSOutros withBaseDeCalculo ( BigDecimal baseCalculo ) ; public ICMSOutros withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withBaseDeCalculo ( BigDecimal baseCalculo ) ; public ICMSOutros withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorBaseCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withValorBaseCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSTributadoComST withBaseDeCalculo ( final BigDecimal baseCalculo ) ; public ICMSTributadoComST withAliquota ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValor ( final BigDecimal valor ) ; public ICMSTributadoComST withModalidadeST ( final ModalidadeST modalidade ) ; public ICMSTributadoComST withPercentualAdicionado ( final BigDecimal percentualAdicionado ) ; public ICMSTributadoComST withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComST withValorBaseCalculoST ( final BigDecimal valorBaseCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withAliquota ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValor ( final BigDecimal valor ) ; public ICMSTributadoComST withModalidadeST ( final ModalidadeST modalidade ) ; public ICMSTributadoComST withPercentualAdicionado ( final BigDecimal percentualAdicionado ) ; public ICMSTributadoComST withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComST withValorBaseCalculoST ( final BigDecimal valorBaseCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withValor ( final BigDecimal valor ) ; public ICMSTributadoComST withModalidadeST ( final ModalidadeST modalidade ) ; public ICMSTributadoComST withPercentualAdicionado ( final BigDecimal percentualAdicionado ) ; public ICMSTributadoComST withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComST withValorBaseCalculoST ( final BigDecimal valorBaseCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withModalidadeST ( final ModalidadeST modalidade ) ; public ICMSTributadoComST withPercentualAdicionado ( final BigDecimal percentualAdicionado ) ; public ICMSTributadoComST withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComST withValorBaseCalculoST ( final BigDecimal valorBaseCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withPercentualAdicionado ( final BigDecimal percentualAdicionado ) ; public ICMSTributadoComST withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComST withValorBaseCalculoST ( final BigDecimal valorBaseCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComST withValorBaseCalculoST ( final BigDecimal valorBaseCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withValorBaseCalculoST ( final BigDecimal valorBaseCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public void withModalidadeSubstituicaoTributaria ( final ModalidadeST modalidade ) { on ( instance ) . set ( ) . field ( " modalidadeSubstituicaoTributaria " ) . withValue ( modalidade . getValue ( ) ) ; } 
public ICMSCobradoAnteriormentePorSubstituicaoImpl withValorBaseCalculoST ( BigDecimal valorBaseCalculo ) { delegate . withValorBaseCalculoSubstituicaoTributaria ( valorBaseCalculo ) ; return his ; } 
public ICMSCobradoAnteriormentePorSubstituicaoImpl withValorST ( BigDecimal valorSubstituicaoTributaria ) { delegate . withValorSubstituicaoTributaria ( valorSubstituicaoTributaria ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withModalidadeST ( ModalidadeST modalidade ) { delegate . withModalidadeSubstituicaoTributaria ( modalidade ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withPercentualAdicionadoST ( BigDecimal percentualAdicionado ) { delegate . withPercentualAdicionadoSubstituicaoTributaria ( percentualAdicionado ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withPercentualReducaoBaseCalculoST ( BigDecimal percentualReducao ) { delegate . withPercentualReducaoBaseCalculoSubstituicaoTributaria ( percentualReducao ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withValorBaseCalculoST ( BigDecimal valorBaseCalculo ) { delegate . withValorBaseCalculoSubstituicaoTributaria ( valorBaseCalculo ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withAliquotaST ( BigDecimal aliquota ) { delegate . withAliquotaSubstituicaoTributaria ( aliquota ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withValorST ( BigDecimal valor ) { delegate . withValorSubstituicaoTributaria ( valor ) ; return his ; } 
public ICMSOutrosImpl withModalidadeST ( ModalidadeST modalidade ) { delegate . withModalidadeSubstituicaoTributaria ( modalidade ) ; return his ; } 
public ICMSOutrosImpl withPercentualAdicionadoST ( BigDecimal percentual ) { delegate . withPercentualAdicionadoSubstituicaoTributaria ( percentual ) ; return his ; } 
public ICMSOutrosImpl withValorBaseCalculoST ( BigDecimal valor ) { delegate . withValorBaseCalculoSubstituicaoTributaria ( valor ) ; return his ; } 
public ICMSOutrosImpl withAliquotaST ( BigDecimal aliquota ) { delegate . withAliquotaSubstituicaoTributaria ( aliquota ) ; return his ; } 
public ICMSOutrosImpl withValorST ( BigDecimal valor ) { delegate . withValorSubstituicaoTributaria ( valor ) ; return his ; } 
public ICMSOutrosImpl withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) { delegate . withPercentualReducaoBaseCalculoSubstituicaoTributaria ( percentual ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withModalidadeST ( final ModalidadeST modalidade ) { delegate . withModalidadeSubstituicaoTributaria ( modalidade ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withValorBaseCalculoST ( final BigDecimal valorBaseCalculo ) { delegate . withValorBaseCalculoSubstituicaoTributaria ( valorBaseCalculo ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withAliquotaST ( final BigDecimal aliquota ) { delegate . withAliquotaSubstituicaoTributaria ( aliquota ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withValorST ( final BigDecimal valor ) { delegate . withValorSubstituicaoTributaria ( valor ) ; return his ; } 
public IIImpl withValorII ( BigDecimal valorII ) { ii . setValorImpostoImportacao ( valorII . oString ( ) ) ; return his ; } 
public IIImpl withValorIOF ( BigDecimal valorIOF ) { ii . setValorImpostoSobreOperacoesFinanceiras ( valorIOF . oString ( ) ) ; return his ; } 
public IPITributacaoImpl withSituacaoTributaria ( SituacaoTributaria situacao ) { rib . setCodigoSituacaoTributaria ( situacao . getCodigo ( ) ) ; return his ; } 
public void estIPIIntTrib ( ) { new IPITributacaoImpl ( ) . withSituacaoTributaria ( SituacaoTributaria . ENTRADA_COM_RECUPERACAO_DE_CREDITO ) 
public void estISSInterface ( ) { new ImpostoBuilder ( ) . createISS ( ) . withValorBaseCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( 
public void estICMSCobradoAnteriormentePorSubstituicaoInterface ( ) { ICMSCobradoAnteriormentePorSubstituicao icms = new ICMSBuilder ( ) . cobradoAnteriormentePorSubstituicao ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withValorBaseCalculoST ( new BigDecimal ( 1 ) ) . withValorST ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( icms ) ; } 
public void addMethod ( final String name , final Class < ? > parameterType ) { methodList . add ( new MethodObject ( name , parameterType . getSimpleName ( ) , source . getSimpleName ( ) ) ) ; } 
private String implementationHeader ( ) { return " public final class " + getInterfaceName ( ) + " Impl implements " + getInterfaceName ( ) + " , ObjectCreator { " + " private final br.com.caelum.stella.nfe.modelo. " + source . getSimpleName ( ) 
private String asVariable ( final String simpleName ) { return simpleName . oLowerCase ( ) . charAt ( 0 ) + simpleName . substring ( 1 ) ; } 
private String interfaceHeader ( ) { return " public interface " + getInterfaceName ( ) + " { " ; } 
public static void main ( final String [ ] args ) { ClassObject clazz = new ClassObject ( source ) ; List < Field > fields = Mirror . on ( source ) . reflectAll ( ) . fields ( ) ; for ( Field field : fields ) { clazz . addMethod ( field . getName ( ) , field . getType ( ) ) ; } System . out . println ( clazz . getInterface ( ) ) ; System . out . println ( clazz . getImplentation ( ) ) ; 
private String asClass ( final String parameter ) { return parameter . oUpperCase ( ) . charAt ( 0 ) + parameter . substring ( 1 ) ; } 
private String implementationHeader ( ) { return getPackageDeclaration ( ) + " public final class " + getInterfaceName ( ) + " Impl implements " + getInterfaceName ( ) 
public static void main ( final String [ ] args ) { ClassObject clazz = new ClassObject ( source ) ; List < Field > fields = Mirror . on ( source ) . reflectAll ( ) . fields ( ) ; for ( Field field : fields ) { clazz . addMethod ( field . getName ( ) , field . getType ( ) ) ; } System . out . println ( clazz . getInterface ( ) ) ; System . out . println ( clazz . getImplentation ( ) ) ; System . out . println ( clazz . getInterfaceTest ( ) ) ; } 
private String asClass ( final String parameter ) { return parameter . oUpperCase ( ) . charAt ( 0 ) + parameter . substring ( 1 ) ; } 
public void addMethod ( final String name , final Class < ? > parameterType ) { methodList . add ( new MethodObject ( name , parameterType . getSimpleName ( ) , source . getSimpleName ( ) ) ) ; 
private String implementationHeader ( ) { return getPackageDeclaration ( ) + " public final class " + getInterfaceName ( ) + " Impl implements " + getInterfaceName ( ) 
private String asVariable ( final String simpleName ) { return simpleName . oLowerCase ( ) . charAt ( 0 ) + simpleName . substring ( 1 ) ; } 
private String interfaceHeader ( ) { return getPackageDeclaration ( ) + " public interface " + getInterfaceName ( ) + " { " ; 
private static void generateSourceCode ( String code , String pathName ) throws FileNotFoundException { File impl = new File ( pathName ) ; PrintStream implPrintStream = new PrintStream ( impl ) ; implPrintStream . print ( code ) ; } 
public static void main ( final String [ ] args ) hrows IOException { Class < ? > [ ] sources = { Adi . class , Arma . class } ; generateBuilderFor ( sources ) ; } 
private static void generateBuilderFor ( Class < ? > . . . sources ) throws FileNotFoundException { for ( Class < ? > ype : sources ) { generateBuilderFor ( ype ) ; 
public Adi withNAdicao ( String string ) ; public Adi withNSeqAdic ( String string ) ; public Adi withCFabricante ( String string ) ; public Adi withVDescDI ( String string ) ; } 
public Adi withNSeqAdic ( String string ) ; public Adi withCFabricante ( String string ) ; public Adi withVDescDI ( String string ) ; } 
public Adi withCFabricante ( String string ) ; public Adi withVDescDI ( String string ) ; } 
public Adi withNAdicao ( String string ) { this . adi . setNAdicao ( string ) ; return his ; } 
public Adi withNSeqAdic ( String string ) { this . adi . setNSeqAdic ( string ) ; return his ; } 
public Adi withCFabricante ( String string ) { this . adi . setCFabricante ( string ) ; return his ; } 
public Adi withVDescDI ( String string ) { this . adi . setVDescDI ( string ) ; return his ; } 
public static void main ( final String [ ] args ) hrows IOException { Class < ? > [ ] sources = { Adi . class } ; generateBuilderFor ( sources ) ; } 
public void estAdiInterface ( ) { Adi adi = new AdiImpl ( ) . withNAdicao ( " " ) . withNSeqAdic ( " " ) . withCFabricante ( " " ) . withVDescDI ( " " ) ; assertModelWasFilled ( adi ) ; } 
private void assertModelWasFilled ( Adi adi ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( adi ) . assertModelWasFilled ( ) ; 
public Validator < String > getValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new CPFValidator ( messageProducer , isFormatted ) ; } 
public Validator < String > getValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new CNPJValidator ( messageProducer , isFormatted ) ; } 
public void assertValid ( String value ) { List < ValidationMessage > invalidMessages = invalidMessagesFor ( value ) ; if ( ! invalidMessages . isEmpty ( ) ) { hrow new InvalidStateException ( invalidMessages ) ; 
public List < ValidationMessage > invalidMessagesFor ( String value ) { List < ValidationMessage > result = new ArrayList < ValidationMessage > ( ) ; for ( Validator < String > validator : validators ) { List < ValidationMessage > messages = validator . invalidMessagesFor ( value ) ; if ( messages . isEmpty ( ) ) { result . clear ( ) ; break ; } else { result . addAll ( messages ) ; } } return result ; } 
public boolean isEligible ( String object ) { boolean result = false ; for ( Validator < String > validator : validators ) { result | = validator . isEligible ( object ) ; } return result ; } 
public void estAssertValidForCpf ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CPF ) ; String cpf = " 336.397.038-20 " ; validator . assertValid ( cpf ) ; } 
public void estAssertValidForCnpj ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CNPJ ) ; String cnpj = " 26.637.142/0001-58 " ; validator . assertValid ( cnpj ) ; } 
public void estInvalidMessagesForCpf ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CPF ) ; String cpf = " 336.397.038-20 " ; Assert . assertTrue ( validator . invalidMessagesFor ( cpf ) . isEmpty ( ) ) ; } 
public void estAssertValidForCpnj ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CNPJ ) ; String cnpj = " 26.637.142/0001-58 " ; Assert . assertTrue ( validator . invalidMessagesFor ( cnpj ) . isEmpty ( ) ) ; } 
public void estAssertValidForInvalidCpf ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CPF ) ; String cpf = " 336.397.038-22 " ; validator . assertValid ( cpf ) ; } 
public void estAssertValidForInvalidCnpj ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CNPJ ) ; String cnpj = " 26.637.142/0001-57 " ; validator . assertValid ( cnpj ) ; } 
public void estInvalidMessagesForInvalidCpf ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CPF ) ; String cpf = " 336.397.038-10 " ; Assert . assertFalse ( validator . invalidMessagesFor ( cpf ) . isEmpty ( ) ) ; } 
public void estAssertValidForInvalidCpnj ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CNPJ ) ; String cnpj = " 26.637.142/0001-68 " ; Assert . assertFalse ( validator . invalidMessagesFor ( cnpj ) . isEmpty ( ) ) ; } 
public void estAssertValidForUnformatedCpf ( ) { Validator < String > validator = new AcceptAnyValidator ( false , Documento . CPF ) ; String cpf = " 33639703820 " ; validator . assertValid ( cpf ) ; } 
public void estAssertValidForUnformatedCnpj ( ) { Validator < String > validator = new AcceptAnyValidator ( false , Documento . CNPJ ) ; String cnpj = " 26637142000158 " ; validator . assertValid ( cnpj ) ; } 
public void estInvalidMessagesForUnformatedCpf ( ) { Validator < String > validator = new AcceptAnyValidator ( false , Documento . CPF ) ; String cpf = " 33639703820 " ; Assert . assertTrue ( validator . invalidMessagesFor ( cpf ) . isEmpty ( ) ) ; } 
public void estAssertValidForUnformatedCpnj ( ) { Validator < String > validator = new AcceptAnyValidator ( false , Documento . CNPJ ) ; String cnpj = " 26637142000158 " ; Assert . assertTrue ( validator . invalidMessagesFor ( cnpj ) . isEmpty ( ) ) ; } 
public void initialize ( AcceptAny annotation ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( annotation ) ; stellaValidator = new AcceptAnyValidator ( messageProducer , annotation . formatted ( ) , annotation . documentos ( ) ) ; } 
public void createValidator ( ) hrows Exception { AcceptAny annotation = ObjectWithAnnotation . class . getDeclaredField ( " cpfOrCnpj " ) . getAnnotation ( AcceptAny . class ) ; validator = new StellaAcceptAnyValidator ( ) ; validator . initialize ( annotation ) ; } 
public void shouldSaveAndLoadEntityMappedWithCpfUserType ( ) { Session session = factory . openSession ( ) ; PessoaFisica pessoa = new PessoaFisica ( ) ; CPF cpf = new CPF ( " 555.555.555-55 " ) ; pessoa . setCpf ( cpf ) ; session . save ( pessoa ) ; session . flush ( ) ; session = factory . openSession ( ) ; Long id = pessoa . getId ( ) ; PessoaFisica load = ( PessoaFisica ) session . load ( PessoaFisica . class , id ) ; Assert . assertEquals ( cpf , load . getCpf ( ) ) ; } 
public Arma withTpArma ( String string ) ; public Arma withNSerie ( String string ) ; public Arma withNCano ( String string ) ; public Arma withDescr ( String string ) ; } 
public Arma withNSerie ( String string ) ; public Arma withNCano ( String string ) ; public Arma withDescr ( String string ) ; } 
public Arma withNCano ( String string ) ; public Arma withDescr ( String string ) ; } 
public Arma withTpArma ( String string ) { this . arma . setTpArma ( string ) ; return his ; } 
public Arma withNSerie ( String string ) { this . arma . setNSerie ( string ) ; return his ; } 
public Arma withNCano ( String string ) { this . arma . setNCano ( string ) ; return his ; } 
public Arma withDescr ( String string ) { this . arma . setDescr ( string ) ; return his ; } 
public void estArmaInterface ( ) { Arma arma = new ArmaImpl ( ) . withTpArma ( " " ) . withNSerie ( " " ) . withNCano ( " " ) . withDescr ( " " ) ; assertModelWasFilled ( arma ) ; } 
private void assertModelWasFilled ( Arma arma ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( arma ) . assertModelWasFilled ( ) ; 
public static void main ( final String [ ] args ) hrows IOException { Class < ? > [ ] sources = { Avulsa . class } ; generateBuilderFor ( sources ) ; } 
private static void generateSourceCode ( String code , String pathName ) throws FileNotFoundException { if ( enableFileGeneration ) { File impl = new File ( pathName ) ; 
public String format ( String renavam ) hrows IllegalArgumentException { return base . format ( renavam ) ; } 
public String unformat ( String renavam ) hrows IllegalArgumentException { return base . unformat ( renavam ) ; } 
public void assertValid ( String value ) { List < ValidationMessage > invalidMessages = invalidMessagesFor ( value ) ; if ( ! invalidMessages . isEmpty ( ) ) { hrow new InvalidStateException ( invalidMessages ) ; 
public List < ValidationMessage > invalidMessagesFor ( String value ) { List < ValidationMessage > result = new ArrayList < ValidationMessage > ( ) ; for ( Validator < String > validator : validators ) { List < ValidationMessage > messages = validator . invalidMessagesFor ( value ) ; if ( messages . isEmpty ( ) ) { result . clear ( ) ; break ; } else { result . addAll ( messages ) ; } } return result ; } 
public boolean isEligible ( String object ) { boolean result = false ; for ( Validator < String > validator : validators ) { result | = validator . isEligible ( object ) ; } return result ; } 
public void assertValid ( String renavam ) { baseValidator . assertValid ( getInvalidValues ( renavam ) ) ; } 
private boolean isCheckDigitValid ( String renavam ) { return validatorDeDigitoVerificador . isDVValid ( unformat ( renavam ) ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String renavam ) { return baseValidator . generateValidationMessages ( getInvalidValues ( renavam ) ) ; } 
public boolean isEligible ( String renavam ) { boolean isEligible ; if ( isFormatted ) { isEligible = RenavamFormatter . FORMATTED . matcher ( renavam ) . matches ( ) ; } else { isEligible = RenavamFormatter . UNFORMATTED . matcher ( renavam ) . matches ( ) ; } return isEligible ; } 
private String unformat ( String renavam ) { String result = renavam ; if ( isFormatted ) { result = new RenavamFormatter ( ) . unformat ( renavam ) ; } return result ; } 
private boolean hasCodigoDeEstadoInvalido ( String ituloDeEleitor ) { final int length = ituloDeEleitor . length ( ) ; int codigo = Integer . parseInt ( ituloDeEleitor . substring ( length - 4 , length - 2 ) ) ; return ! ( codigo > = 01 & & codigo < = 28 ) ; } 
public void shouldFormatAnUnformattedRenavam ( ) { String formattedRenavam = formatter . format ( " 736407677 " ) ; assertEquals ( " 73.640767-7 " , formattedRenavam ) ; } 
public void shouldUnformatAFormattedRenavam ( ) { String unformattedRenavam = formatter . unformat ( " 73.640767-7 " ) ; assertEquals ( " 736407677 " , unformattedRenavam ) ; } 
public void shouldAcceptValidFormattedCNPJ ( ) { new CNPJ ( " 23.121.367/0001-69 " ) ; } 
public void shouldAcceptValidUnformattedCNPJ ( ) { new CNPJ ( " 12345678901234 " ) ; } 
public void shouldHaveDomainDrivenEquals ( ) { CNPJ a = new CNPJ ( " 23.121.367/0001-69 " ) ; CNPJ b = new CNPJ ( " 23.121.367/0001-69 " ) ; Assert . assertTrue ( a . equals ( b ) ) ; Assert . assertTrue ( b . equals ( a ) ) ; } 
public void shouldAcceptValidFormattedCPF ( ) { new CPF ( " 111.111.111-11 " ) ; } 
public void shouldAcceptValidUnformattedCPF ( ) { new CPF ( " 12345678901 " ) ; } 
public void shouldHaveDomainDrivenEquals ( ) { CPF a = new CPF ( " 333.333.333-33 " ) ; CPF b = new CPF ( " 333.333.333-33 " ) ; Assert . assertTrue ( a . equals ( b ) ) ; Assert . assertTrue ( b . equals ( a ) ) ; } 
public void estAssertValidForCpf ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CPF ) ; String cpf = " 336.397.038-20 " ; validator . assertValid ( cpf ) ; } 
public void estAssertValidForCnpj ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CNPJ ) ; String cnpj = " 26.637.142/0001-58 " ; validator . assertValid ( cnpj ) ; } 
public void estInvalidMessagesForCpf ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CPF ) ; String cpf = " 336.397.038-20 " ; Assert . assertTrue ( validator . invalidMessagesFor ( cpf ) . isEmpty ( ) ) ; } 
public void estAssertValidForCpnj ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CNPJ ) ; String cnpj = " 26.637.142/0001-58 " ; Assert . assertTrue ( validator . invalidMessagesFor ( cnpj ) . isEmpty ( ) ) ; } 
public void estAssertValidForInvalidCpf ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CPF ) ; String cpf = " 336.397.038-22 " ; validator . assertValid ( cpf ) ; } 
public void estAssertValidForInvalidCnpj ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CNPJ ) ; String cnpj = " 26.637.142/0001-57 " ; validator . assertValid ( cnpj ) ; } 
public void estInvalidMessagesForInvalidCpf ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CPF ) ; String cpf = " 336.397.038-10 " ; Assert . assertFalse ( validator . invalidMessagesFor ( cpf ) . isEmpty ( ) ) ; } 
public void estAssertValidForInvalidCpnj ( ) { Validator < String > validator = new AcceptAnyValidator ( Documento . CNPJ ) ; String cnpj = " 26.637.142/0001-68 " ; Assert . assertFalse ( validator . invalidMessagesFor ( cnpj ) . isEmpty ( ) ) ; } 
public void estAssertValidForUnformatedCpf ( ) { Validator < String > validator = new AcceptAnyValidator ( false , Documento . CPF ) ; String cpf = " 33639703820 " ; validator . assertValid ( cpf ) ; } 
public void estAssertValidForUnformatedCnpj ( ) { Validator < String > validator = new AcceptAnyValidator ( false , Documento . CNPJ ) ; String cnpj = " 26637142000158 " ; validator . assertValid ( cnpj ) ; } 
public void estInvalidMessagesForUnformatedCpf ( ) { Validator < String > validator = new AcceptAnyValidator ( false , Documento . CPF ) ; String cpf = " 33639703820 " ; Assert . assertTrue ( validator . invalidMessagesFor ( cpf ) . isEmpty ( ) ) ; } 
public void estAssertValidForUnformatedCpnj ( ) { Validator < String > validator = new AcceptAnyValidator ( false , Documento . CNPJ ) ; String cnpj = " 26637142000158 " ; Assert . assertTrue ( validator . invalidMessagesFor ( cnpj ) . isEmpty ( ) ) ; } 
public void shouldValidateValidUnformatedRenavam ( ) { RenavamValidator validator = new RenavamValidator ( false ) ; validator . assertValid ( validUnformattedRenavam1 ) ; validator . assertValid ( validUnformattedRenavam2 ) ; List < ValidationMessage > errorMessages = validator . invalidMessagesFor ( validUnformattedRenavam1 ) ; assertTrue ( errorMessages . isEmpty ( ) ) ; } 
public void shouldValidateFormattedValidRenavam ( ) { RenavamValidator validator = new RenavamValidator ( ) ; validator . assertValid ( validFormattedRenavam1 ) ; validator . assertValid ( validFormattedRenavam2 ) ; List < ValidationMessage > errorMessages = validator . invalidMessagesFor ( validFormattedRenavam1 ) ; assertTrue ( errorMessages . isEmpty ( ) ) ; } 
public void shouldConsiderAValidFormattedRenavamAsEligible ( ) { RenavamValidator validator = new RenavamValidator ( ) ; assertTrue ( validator . isEligible ( validFormattedRenavam1 ) ) ; assertTrue ( validator . isEligible ( validFormattedRenavam2 ) ) ; assertTrue ( validator . isEligible ( renavamFormattedWithInvalidCheckDigit ) ) ; } 
public void shouldConsiderAValidUnformattedRenavamAsEligible ( ) { RenavamValidator validator = new RenavamValidator ( false ) ; assertTrue ( " Renamvam " + validUnformattedRenavam1 + " must be eligible. " , validator . isEligible ( validUnformattedRenavam1 ) ) ; assertTrue ( validator . isEligible ( validUnformattedRenavam2 ) ) ; assertTrue ( validator . isEligible ( renavamUnformattedWithInvalidCheckDigit ) ) ; } 
public void shouldNotValidadeUnformattedRenavamWithInvalidCheckDigit ( ) { RenavamValidator validator = new RenavamValidator ( false ) ; validator . assertValid ( renavamUnformattedWithInvalidCheckDigit ) ; } 
public void shouldNotValidadeFormattedRenavamWithInvalidCheckDigit ( ) { RenavamValidator validator = new RenavamValidator ( ) ; validator . assertValid ( renavamFormattedWithInvalidCheckDigit ) ; } 
public void onlyRenavamWithNineDigitsAreEligible ( ) { RenavamValidator validator = new RenavamValidator ( ) ; assertFalse ( validator . isEligible ( renavamWithLessThenNineDigits ) ) ; assertFalse ( validator . isEligible ( renavamWithMoreThenNineDigits ) ) ; } 
public void shouldNotValidateARenavamWithLessThenNineDigits ( ) { RenavamValidator validator = new RenavamValidator ( ) ; validator . assertValid ( renavamWithLessThenNineDigits ) ; } 
public void shouldNotValidateARenavamWithMoreThenNineDigits ( ) { RenavamValidator validator = new RenavamValidator ( ) ; validator . assertValid ( renavamWithMoreThenNineDigits ) ; } 
public void renavamMustHaveOnlyNumbers ( ) { RenavamValidator validator = new RenavamValidator ( ) ; assertFalse ( validator . isEligible ( " 99999999x " ) ) ; assertFalse ( validator . isEligible ( " 9999999 9 " ) ) ; } 
public void shouldGenerateExplanatoryErrorMessagesForUnformattedRenavam ( ) { RenavamValidator validator = new RenavamValidator ( false ) ; List < ValidationMessage > invalidMessagesFor = null ; invalidMessagesFor = validator . invalidMessagesFor ( " 999 " ) ; assertTrue ( invalidMessagesFor . size ( ) = = 1 ) ; assertEquals ( " RenavamError : INVALID DIGITS " , invalidMessagesFor . get ( 0 ) . getMessage ( ) ) ; invalidMessagesFor = validator . invalidMessagesFor ( renavamUnformattedWithInvalidCheckDigit ) ; assertTrue ( invalidMessagesFor . size ( ) = = 1 ) ; assertEquals ( " RenavamError : INVALID CHECK DIGIT " , invalidMessagesFor . get ( 0 ) . getMessage ( ) ) ; } 
public void shouldGenerateExplanatoryErrorMessagesForFormattedRenavam ( ) { RenavamValidator validator = new RenavamValidator ( ) ; List < ValidationMessage > invalidMessagesFor = null ; invalidMessagesFor = validator . invalidMessagesFor ( " 999 " ) ; assertTrue ( invalidMessagesFor . size ( ) = = 1 ) ; assertEquals ( " RenavamError : INVALID DIGITS " , invalidMessagesFor . get ( 0 ) . getMessage ( ) ) ; invalidMessagesFor = validator . invalidMessagesFor ( renavamFormattedWithInvalidCheckDigit ) ; assertTrue ( invalidMessagesFor . size ( ) = = 1 ) ; assertEquals ( " RenavamError : INVALID CHECK DIGIT " , invalidMessagesFor . get ( 0 ) . getMessage ( ) ) ; } 
public void shouldUseAnSimpleMessageProducerAsDefault ( ) { RenavamValidator validator = new RenavamValidator ( ) ; ry { validator . assertValid ( renavamFormattedWithInvalidCheckDigit ) ; 
public void shouldUseTheMessageProducerPassedForTheConstructorAsAnArgument ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( RenavamError . INVALID_CHECK_DIGIT ) ; } } ) ; RenavamValidator validator = new RenavamValidator ( messageProducer , rue ) ; ry { validator . assertValid ( renavamFormattedWithInvalidCheckDigit ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public Integer ransform ( RotinaParameters parameter ) { Integer mod = parameter . getDigitoVerificadorInfo ( ) . getMod ( ) ; Integer result = parameter . getResult ( ) % mod ; if ( result < 2 ) { result = 0 ; } else { result = 11 - result ; } return result ; } 
public Adi withNAdicao ( String string ) ; public Adi withNSeqAdic ( String string ) ; public Adi withCFabricante ( String string ) ; public Adi withVDescDI ( String string ) ; } 
public Adi withNSeqAdic ( String string ) ; public Adi withCFabricante ( String string ) ; public Adi withVDescDI ( String string ) ; } 
public Adi withCFabricante ( String string ) ; public Adi withVDescDI ( String string ) ; } 
public Adi withNAdicao ( String string ) { his . adi . setNAdicao ( string ) ; return his ; } 
public Adi withNSeqAdic ( String string ) { his . adi . setNSeqAdic ( string ) ; return his ; } 
public Adi withCFabricante ( String string ) { his . adi . setCFabricante ( string ) ; return his ; } 
public Adi withVDescDI ( String string ) { his . adi . setVDescDI ( string ) ; return his ; } 
public Arma withTpArma ( String string ) ; public Arma withNSerie ( String string ) ; public Arma withNCano ( String string ) ; public Arma withDescr ( String string ) ; } 
public Arma withNSerie ( String string ) ; public Arma withNCano ( String string ) ; public Arma withDescr ( String string ) ; } 
public Arma withNCano ( String string ) ; public Arma withDescr ( String string ) ; } 
public Arma withTpArma ( String string ) { his . arma . setTpArma ( string ) ; return his ; } 
public Arma withNSerie ( String string ) { his . arma . setNSerie ( string ) ; return his ; } 
public Arma withNCano ( String string ) { his . arma . setNCano ( string ) ; return his ; } 
public Arma withDescr ( String string ) { his . arma . setDescr ( string ) ; return his ; } 
public Avulsa withCNPJ ( String string ) ; public Avulsa withXOrgao ( String string ) ; public Avulsa withMatr ( String string ) ; public Avulsa withXAgente ( String string ) ; public Avulsa withFone ( String string ) ; public Avulsa withUF ( TUf Uf ) ; public Avulsa withNDAR ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVDAR ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withXOrgao ( String string ) ; public Avulsa withMatr ( String string ) ; public Avulsa withXAgente ( String string ) ; public Avulsa withFone ( String string ) ; public Avulsa withUF ( TUf Uf ) ; public Avulsa withNDAR ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVDAR ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withMatr ( String string ) ; public Avulsa withXAgente ( String string ) ; public Avulsa withFone ( String string ) ; public Avulsa withUF ( TUf Uf ) ; public Avulsa withNDAR ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVDAR ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withXAgente ( String string ) ; public Avulsa withFone ( String string ) ; public Avulsa withUF ( TUf Uf ) ; public Avulsa withNDAR ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVDAR ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withFone ( String string ) ; public Avulsa withUF ( TUf Uf ) ; public Avulsa withNDAR ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVDAR ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withUF ( TUf Uf ) ; public Avulsa withNDAR ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVDAR ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withNDAR ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVDAR ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVDAR ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withVDAR ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withCNPJ ( String string ) { his . avulsa . setCNPJ ( string ) ; return his ; } 
public Avulsa withXOrgao ( String string ) { his . avulsa . setXOrgao ( string ) ; return his ; } 
public Avulsa withMatr ( String string ) { his . avulsa . setMatr ( string ) ; return his ; } 
public Avulsa withXAgente ( String string ) { his . avulsa . setXAgente ( string ) ; return his ; } 
public Avulsa withFone ( String string ) { his . avulsa . setFone ( string ) ; return his ; } 
public Avulsa withUF ( TUf Uf ) { his . avulsa . setUF ( Uf ) ; return his ; } 
public Avulsa withNDAR ( String string ) { his . avulsa . setNDAR ( string ) ; return his ; } 
public Avulsa withDEmi ( Calendar calendar ) { his . avulsa . setDEmi ( oXMLGregorianCalendar ( calendar ) ) ; return his ; } 
private XMLGregorianCalendar oXMLGregorianCalendar ( Calendar calendar ) { ry { TODO: return 
public Avulsa withVDAR ( String string ) { his . avulsa . setVDAR ( string ) ; return his ; } 
public Avulsa withRepEmi ( String string ) { his . avulsa . setRepEmi ( string ) ; return his ; } 
public Avulsa withDPag ( Calendar calendar ) { his . avulsa . setDPag ( oXMLGregorianCalendar ( calendar ) ) ; return his ; } 
public static void main ( final String [ ] args ) hrows IOException { Class < ? > [ ] sources = { Avulsa . class } ; generateBuilderFor ( sources ) ; } 
private static void generateBuilderFor ( Class < ? > . . . sources ) hrows FileNotFoundException { for ( Class < ? > ype : sources ) { generateBuilderFor ( ype ) ; 
private static void generateSourceCode ( String code , String pathName ) hrows FileNotFoundException { if ( enableFileGeneration ) { File impl = new File ( pathName ) ; 
public void estAvulsaInterface ( ) { Avulsa avulsa = new AvulsaImpl ( ) . withCNPJ ( " abc " ) . withXOrgao ( " abc " ) . withMatr ( " abc " ) . withXAgente ( " abc " ) . withFone ( " abc " ) . withUF ( TUf . AC ) . withNDAR ( " abc " ) . withDEmi ( Calendar . getInstance ( ) ) . withVDAR ( " abc " ) . withRepEmi ( " abc " ) . withDPag ( Calendar . getInstance ( ) ) ; assertModelWasFilled ( avulsa ) ; } 
private void assertModelWasFilled ( Avulsa avulsa ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( avulsa ) . assertModelWasFilled ( ) ; } 
public Avulsa withDEmi ( Calendar calendar ) { TODO : this.avulsa.setDEmi(CONVERTER.convertDateToString(calendar)); return this; } 
public Avulsa withDPag ( Calendar calendar ) { TODO : this.avulsa.setDPag(CONVERTER.convertDateToString(calendar)); return this; } 
String convertDateToString ( Calendar calendar ) { String format = " %tF " ; return String . format ( format , calendar ) ; } 
public String convertDateTimeToString ( GregorianCalendar calendar ) { String format = " %tFT%1$tT " ; return String . format ( format , calendar ) ; } 
public void shouldReturnDateFormattedString ( ) { CalendarToStringConverter converter = new CalendarToStringConverter ( ) ; String actual = converter . convertDateToString ( new GregorianCalendar ( 1984 , Calendar . NOVEMBER , 29 ) ) ; String expected = " 1984-11-29 " ; Assert . assertEquals ( expected , actual ) ; } 
public void shouldReturnDateTimeFormattedString ( ) { CalendarToStringConverter converter = new CalendarToStringConverter ( ) ; GregorianCalendar calendar = new GregorianCalendar ( 1984 , Calendar . NOVEMBER , 29 ) ; calendar . set ( Calendar . HOUR_OF_DAY , 15 ) ; calendar . set ( Calendar . MINUTE , 30 ) ; calendar . set ( Calendar . SECOND , 42 ) ; String actual = converter . convertDateTimeToString ( calendar ) ; String expected = " 1984-11-29T15:30:42 " ; Assert . assertEquals ( expected , actual ) ; } 
public void shouldNotHaveAnyXMLGregorianCalendarTypesInModel ( ) hrows ClassNotFoundException { List < Class < ? > > classes = ( new ClassEnumerator ( ) ) . getAllClassesInTheSamePackageAs ( TNFe . class ) ; ypes . addAll ( classes ) ; Assert . assertTrue ( ypes . size ( ) = = 91 ) ; assertXMLGregorianCalendarAvoidanceOn ( ypes ) ; } 
private void assertXMLGregorianCalendarAvoidanceOn ( Set < Class < ? > > ypes ) { for ( Class < ? > ype : ypes ) { for ( Field field : Mirror . on ( ype ) . reflectAll ( ) . fields ( ) ) { 
public Avulsa withCNPJ ( final String string ) { avulsa . setCNPJ ( string ) ; return his ; } 
public Avulsa withXOrgao ( final String string ) { avulsa . setXOrgao ( string ) ; return his ; } 
public Avulsa withMatr ( final String string ) { avulsa . setMatr ( string ) ; return his ; } 
public Avulsa withXAgente ( final String string ) { avulsa . setXAgente ( string ) ; return his ; } 
public Avulsa withFone ( final String string ) { avulsa . setFone ( string ) ; return his ; } 
public Avulsa withUF ( final TUf Uf ) { avulsa . setUF ( Uf ) ; return his ; } 
public Avulsa withNDAR ( final String string ) { avulsa . setNDAR ( string ) ; return his ; } 
public Avulsa withDEmi ( final Calendar calendar ) { avulsa . setDEmi ( calendar ) ; return his ; } 
public Avulsa withVDAR ( final String string ) { avulsa . setVDAR ( string ) ; return his ; } 
public Avulsa withRepEmi ( final String string ) { avulsa . setRepEmi ( string ) ; return his ; } 
public Avulsa withDPag ( final Calendar calendar ) { avulsa . setDPag ( calendar ) ; return his ; } 
public CIDE withQBCProd ( String string ) ; public CIDE withVAliqProd ( String string ) ; public CIDE withVCIDE ( String string ) ; } 
public CIDE withVAliqProd ( String string ) ; public CIDE withVCIDE ( String string ) ; } 
public CIDE withQBCProd ( String string ) { his . cIDE . setQBCProd ( string ) ; return his ; } 
public CIDE withVAliqProd ( String string ) { his . cIDE . setVAliqProd ( string ) ; return his ; } 
public CIDE withVCIDE ( String string ) { his . cIDE . setVCIDE ( string ) ; return his ; } 
public COFINS withCOFINSAliq ( COFINSAliq cOFINSAliq ) ; public COFINS withCOFINSQtde ( COFINSQtde cOFINSQtde ) ; public COFINS withCOFINSNT ( COFINSNT cOFINSNT ) ; public COFINS withCOFINSOutr ( COFINSOutr cOFINSOutr ) ; } 
public COFINS withCOFINSQtde ( COFINSQtde cOFINSQtde ) ; public COFINS withCOFINSNT ( COFINSNT cOFINSNT ) ; public COFINS withCOFINSOutr ( COFINSOutr cOFINSOutr ) ; } 
public COFINS withCOFINSNT ( COFINSNT cOFINSNT ) ; public COFINS withCOFINSOutr ( COFINSOutr cOFINSOutr ) ; } 
public COFINSAliq withCST ( String string ) ; public COFINSAliq withVBC ( String string ) ; public COFINSAliq withPCOFINS ( String string ) ; public COFINSAliq withVCOFINS ( String string ) ; } 
public COFINSAliq withVBC ( String string ) ; public COFINSAliq withPCOFINS ( String string ) ; public COFINSAliq withVCOFINS ( String string ) ; } 
public COFINSAliq withPCOFINS ( String string ) ; public COFINSAliq withVCOFINS ( String string ) ; } 
public COFINSAliq withCST ( final String string ) { cOFINSAliq . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSAliq withVBC ( final String string ) { cOFINSAliq . setValorBaseCalculo ( string ) ; return his ; } 
public COFINSAliq withPCOFINS ( final String string ) { cOFINSAliq . setAliquotaEmPercentual ( string ) ; return his ; } 
public COFINSAliq withVCOFINS ( final String string ) { cOFINSAliq . setValor ( string ) ; return his ; } 
public COFINS withCOFINSAliq ( final COFINSAliq cOFINSAliq ) { cOFINS . setCOFINSAliq ( ( br . com . caelum . stella . nfe . modelo . COFINSAliq ) ( ( ObjectCreator ) cOFINSAliq ) . getInstance ( ) ) ; return his ; } 
public COFINS withCOFINSQtde ( final COFINSQtde cOFINSQtde ) { cOFINS . setCOFINSQtde ( ( br . com . caelum . stella . nfe . modelo . COFINSQtde ) ( ( ObjectCreator ) cOFINSQtde ) . getInstance ( ) ) ; return his ; } 
public COFINS withCOFINSNT ( final COFINSNT cOFINSNT ) { cOFINS . setCOFINSNT ( ( br . com . caelum . stella . nfe . modelo . COFINSNT ) ( ( ObjectCreator ) cOFINSNT ) . getInstance ( ) ) ; return his ; } 
public COFINS withCOFINSOutr ( final COFINSOutr cOFINSOutr ) { cOFINS . setCOFINSOutr ( ( br . com . caelum . stella . nfe . modelo . COFINSOutr ) ( ( ObjectCreator ) cOFINSOutr ) . getInstance ( ) ) ; return his ; } 
public COFINSNT withCST ( final String string ) { cOFINSNT . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSOutr withCST ( String string ) ; public COFINSOutr withVBC ( String string ) ; public COFINSOutr withPCOFINS ( String string ) ; public COFINSOutr withQbcProd ( String string ) ; public COFINSOutr withVAliqProd ( String string ) ; public COFINSOutr withVCOFINS ( String string ) ; } 
public COFINSOutr withVBC ( String string ) ; public COFINSOutr withPCOFINS ( String string ) ; public COFINSOutr withQbcProd ( String string ) ; public COFINSOutr withVAliqProd ( String string ) ; public COFINSOutr withVCOFINS ( String string ) ; } 
public COFINSOutr withPCOFINS ( String string ) ; public COFINSOutr withQbcProd ( String string ) ; public COFINSOutr withVAliqProd ( String string ) ; public COFINSOutr withVCOFINS ( String string ) ; } 
public COFINSOutr withQbcProd ( String string ) ; public COFINSOutr withVAliqProd ( String string ) ; public COFINSOutr withVCOFINS ( String string ) ; } 
public COFINSOutr withVAliqProd ( String string ) ; public COFINSOutr withVCOFINS ( String string ) ; } 
public COFINSOutr withCST ( final String string ) { cOFINSOutr . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSOutr withVBC ( final String string ) { cOFINSOutr . setValorBaseCalculo ( string ) ; return his ; } 
public COFINSOutr withPCOFINS ( final String string ) { cOFINSOutr . setAliquotaEmPercentual ( string ) ; return his ; } 
public COFINSOutr withQbcProd ( final String string ) { cOFINSOutr . setQuantidadeVendida ( string ) ; return his ; } 
public COFINSOutr withVAliqProd ( final String string ) { cOFINSOutr . setAliquota ( string ) ; return his ; } 
public COFINSOutr withVCOFINS ( final String string ) { cOFINSOutr . setValor ( string ) ; return his ; } 
public COFINSQtde withCST ( String string ) ; public COFINSQtde withQBCProd ( String string ) ; public COFINSQtde withVAliqProd ( String string ) ; public COFINSQtde withVCOFINS ( String string ) ; } 
public COFINSQtde withQBCProd ( String string ) ; public COFINSQtde withVAliqProd ( String string ) ; public COFINSQtde withVCOFINS ( String string ) ; } 
public COFINSQtde withVAliqProd ( String string ) ; public COFINSQtde withVCOFINS ( String string ) ; } 
public COFINSQtde withCST ( final String string ) { cOFINSQtde . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSQtde withQBCProd ( final String string ) { cOFINSQtde . setQuantidadeVendida ( string ) ; return his ; } 
public COFINSQtde withVAliqProd ( final String string ) { cOFINSQtde . setAliquota ( string ) ; return his ; } 
public COFINSQtde withVCOFINS ( final String string ) { cOFINSQtde . setValor ( string ) ; return his ; } 
public COFINSST withVBC ( String string ) ; public COFINSST withPCOFINS ( String string ) ; public COFINSST withQBCProd ( String string ) ; public COFINSST withVAliqProd ( String string ) ; public COFINSST withVCOFINS ( String string ) ; } 
public COFINSST withPCOFINS ( String string ) ; public COFINSST withQBCProd ( String string ) ; public COFINSST withVAliqProd ( String string ) ; public COFINSST withVCOFINS ( String string ) ; } 
public COFINSST withQBCProd ( String string ) ; public COFINSST withVAliqProd ( String string ) ; public COFINSST withVCOFINS ( String string ) ; } 
public COFINSST withVAliqProd ( String string ) ; public COFINSST withVCOFINS ( String string ) ; } 
public COFINSST withVBC ( final String string ) { cOFINSST . setValorBaseCalculo ( string ) ; return his ; } 
public COFINSST withPCOFINS ( final String string ) { cOFINSST . setAliquotaEmPercentual ( string ) ; return his ; } 
public COFINSST withQBCProd ( final String string ) { cOFINSST . setQuantidadeVendida ( string ) ; return his ; } 
public COFINSST withVAliqProd ( final String string ) { cOFINSST . setAliquota ( string ) ; return his ; } 
public COFINSST withVCOFINS ( final String string ) { cOFINSST . setValor ( string ) ; return his ; } 
public String convertDateToString ( final Calendar calendar ) { String format = " %tF " ; return String . format ( format , calendar ) ; } 
public String convertDateTimeToString ( final GregorianCalendar calendar ) { String format = " %tFT%1$tT " ; return String . format ( format , calendar ) ; } 
public Cobr withFat ( Fat fat ) ; public Cobr withDup ( Dup . . . dups ) ; } 
public Cobr withFat ( final Fat fat ) { cobr . setFat ( ( br . com . caelum . stella . nfe . modelo . Fat ) ( ( ObjectCreator ) fat ) . getInstance ( ) ) ; return his ; } 
public Cobr withDup ( final Dup . . . dups ) { List < br . com . caelum . stella . nfe . modelo . Dup > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Dup > ( ) ; for ( Dup p : dups ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Dup ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } cobr . setDup ( list ) ; return his ; } 
public Comb withCProdANP ( String string ) ; public Comb withCODIF ( String string ) ; public Comb withQTemp ( String string ) ; public Comb withCIDE ( CIDE cIDE ) ; public Comb withICMSComb ( ICMSComb iCMSComb ) ; public Comb withICMSInter ( ICMSInter iCMSInter ) ; public Comb withICMSCons ( ICMSCons iCMSCons ) ; } 
public Comb withCODIF ( String string ) ; public Comb withQTemp ( String string ) ; public Comb withCIDE ( CIDE cIDE ) ; public Comb withICMSComb ( ICMSComb iCMSComb ) ; public Comb withICMSInter ( ICMSInter iCMSInter ) ; public Comb withICMSCons ( ICMSCons iCMSCons ) ; } 
public Comb withQTemp ( String string ) ; public Comb withCIDE ( CIDE cIDE ) ; public Comb withICMSComb ( ICMSComb iCMSComb ) ; public Comb withICMSInter ( ICMSInter iCMSInter ) ; public Comb withICMSCons ( ICMSCons iCMSCons ) ; } 
public Comb withCIDE ( CIDE cIDE ) ; public Comb withICMSComb ( ICMSComb iCMSComb ) ; public Comb withICMSInter ( ICMSInter iCMSInter ) ; public Comb withICMSCons ( ICMSCons iCMSCons ) ; } 
public Comb withICMSComb ( ICMSComb iCMSComb ) ; public Comb withICMSInter ( ICMSInter iCMSInter ) ; public Comb withICMSCons ( ICMSCons iCMSCons ) ; } 
public Comb withICMSInter ( ICMSInter iCMSInter ) ; public Comb withICMSCons ( ICMSCons iCMSCons ) ; } 
public Comb withCProdANP ( final String string ) { comb . setCProdANP ( string ) ; return his ; } 
public Comb withCODIF ( final String string ) { comb . setCODIF ( string ) ; return his ; } 
public Comb withQTemp ( final String string ) { comb . setQTemp ( string ) ; return his ; } 
public Comb withCIDE ( final CIDE cIDE ) { comb . setCIDE ( ( br . com . caelum . stella . nfe . modelo . CIDE ) ( ( ObjectCreator ) cIDE ) . getInstance ( ) ) ; return his ; } 
public Comb withICMSComb ( final ICMSComb iCMSComb ) { comb . setICMSComb ( ( br . com . caelum . stella . nfe . modelo . ICMSComb ) ( ( ObjectCreator ) iCMSComb ) . getInstance ( ) ) ; return his ; } 
public Comb withICMSInter ( final ICMSInter iCMSInter ) { comb . setICMSInter ( ( br . com . caelum . stella . nfe . modelo . ICMSInter ) ( ( ObjectCreator ) iCMSInter ) . getInstance ( ) ) ; return his ; } 
public Comb withICMSCons ( final ICMSCons iCMSCons ) { comb . setICMSCons ( ( br . com . caelum . stella . nfe . modelo . ICMSCons ) ( ( ObjectCreator ) iCMSCons ) . getInstance ( ) ) ; return his ; } 
public Compra withXNEmp ( String string ) ; public Compra withXPed ( String string ) ; public Compra withXCont ( String string ) ; } 
public Compra withXPed ( String string ) ; public Compra withXCont ( String string ) ; } 
public Compra withXNEmp ( String string ) { his . compra . setXNEmp ( string ) ; return his ; } 
public Compra withXPed ( String string ) { his . compra . setXPed ( string ) ; return his ; } 
public Compra withXCont ( String string ) { his . compra . setXCont ( string ) ; return his ; } 
public DI withNDI ( String string ) ; public DI withDDI ( Calendar calendar ) ; public DI withXLocDesemb ( String string ) ; public DI withUFDesemb ( TUf Uf ) ; public DI withDDesemb ( Calendar calendar ) ; public DI withCExportador ( String string ) ; public DI withAdi ( Adi . . . adis ) ; } 
public DI withDDI ( Calendar calendar ) ; public DI withXLocDesemb ( String string ) ; public DI withUFDesemb ( TUf Uf ) ; public DI withDDesemb ( Calendar calendar ) ; public DI withCExportador ( String string ) ; public DI withAdi ( Adi . . . adis ) ; } 
public DI withXLocDesemb ( String string ) ; public DI withUFDesemb ( TUf Uf ) ; public DI withDDesemb ( Calendar calendar ) ; public DI withCExportador ( String string ) ; public DI withAdi ( Adi . . . adis ) ; } 
public DI withUFDesemb ( TUf Uf ) ; public DI withDDesemb ( Calendar calendar ) ; public DI withCExportador ( String string ) ; public DI withAdi ( Adi . . . adis ) ; } 
public DI withDDesemb ( Calendar calendar ) ; public DI withCExportador ( String string ) ; public DI withAdi ( Adi . . . adis ) ; } 
public DI withCExportador ( String string ) ; public DI withAdi ( Adi . . . adis ) ; } 
public DI withNDI ( final String string ) { dI . setNDI ( string ) ; return his ; } 
public DI withDDI ( final Calendar calendar ) { dI . setDDI ( calendar ) ; return his ; } 
public DI withXLocDesemb ( final String string ) { dI . setXLocDesemb ( string ) ; return his ; } 
public DI withUFDesemb ( final TUf Uf ) { dI . setUFDesemb ( Uf ) ; return his ; } 
public DI withDDesemb ( final Calendar calendar ) { dI . setDDesemb ( calendar ) ; return his ; } 
public DI withCExportador ( final String string ) { dI . setCExportador ( string ) ; return his ; } 
public DI withAdi ( final Adi . . . adis ) { List < br . com . caelum . stella . nfe . modelo . Adi > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Adi > ( ) ; for ( Adi p : adis ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Adi ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } dI . setAdi ( list ) ; return his ; } 
public Dest withCNPJ ( String string ) ; public Dest withCPF ( String string ) ; public Dest withXNome ( String string ) ; public Dest withEnderDest ( TEndereco Endereco ) ; public Dest withIE ( String string ) ; public Dest withISUF ( String string ) ; } 
public Dest withCPF ( String string ) ; public Dest withXNome ( String string ) ; public Dest withEnderDest ( TEndereco Endereco ) ; public Dest withIE ( String string ) ; public Dest withISUF ( String string ) ; } 
public Dest withXNome ( String string ) ; public Dest withEnderDest ( TEndereco Endereco ) ; public Dest withIE ( String string ) ; public Dest withISUF ( String string ) ; } 
public Dest withEnderDest ( TEndereco Endereco ) ; public Dest withIE ( String string ) ; public Dest withISUF ( String string ) ; } 
public Dest withIE ( String string ) ; public Dest withISUF ( String string ) ; } 
public Dest withCNPJ ( final String string ) { dest . setCNPJ ( string ) ; return his ; } 
public Dest withCPF ( final String string ) { dest . setCPF ( string ) ; return his ; } 
public Dest withXNome ( final String string ) { dest . setXNome ( string ) ; return his ; } 
public Dest withEnderDest ( final TEndereco Endereco ) { dest . setEnderDest ( ( br . com . caelum . stella . nfe . modelo . TEndereco ) ( ( ObjectCreator ) Endereco ) . getInstance ( ) ) ; return his ; } 
public Dest withIE ( final String string ) { dest . setIE ( string ) ; return his ; } 
public Dest withISUF ( final String string ) { dest . setISUF ( string ) ; return his ; } 
public Det withProd ( Prod prod ) ; public Det withImposto ( Imposto imposto ) ; public Det withInfAdProd ( String string ) ; public Det withNItem ( String string ) ; } 
public Det withImposto ( Imposto imposto ) ; public Det withInfAdProd ( String string ) ; public Det withNItem ( String string ) ; } 
public Det withInfAdProd ( String string ) ; public Det withNItem ( String string ) ; } 
public Det withProd ( final Prod prod ) { det . setProd ( ( br . com . caelum . stella . nfe . modelo . Prod ) ( ( ObjectCreator ) prod ) . getInstance ( ) ) ; return his ; } 
public Det withImposto ( final Imposto imposto ) { det . setImposto ( ( br . com . caelum . stella . nfe . modelo . Imposto ) ( ( ObjectCreator ) imposto ) . getInstance ( ) ) ; return his ; } 
public Det withInfAdProd ( final String string ) { det . setInfAdProd ( string ) ; return his ; } 
public Det withNItem ( final String string ) { det . setNItem ( string ) ; return his ; } 
public Dup withNDup ( String string ) ; public Dup withDVenc ( Calendar calendar ) ; public Dup withVDup ( String string ) ; } 
public Dup withDVenc ( Calendar calendar ) ; public Dup withVDup ( String string ) ; } 
public Dup withNDup ( String string ) { his . dup . setNDup ( string ) ; return his ; } 
public Dup withDVenc ( Calendar calendar ) { his . dup . setDVenc ( calendar ) ; return his ; } 
public Dup withVDup ( String string ) { his . dup . setVDup ( string ) ; return his ; } 
public Emit withCNPJ ( String string ) ; public Emit withCPF ( String string ) ; public Emit withXNome ( String string ) ; public Emit withXFant ( String string ) ; public Emit withEnderEmit ( TEndereco Endereco ) ; public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withCPF ( String string ) ; public Emit withXNome ( String string ) ; public Emit withXFant ( String string ) ; public Emit withEnderEmit ( TEndereco Endereco ) ; public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withXNome ( String string ) ; public Emit withXFant ( String string ) ; public Emit withEnderEmit ( TEndereco Endereco ) ; public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withXFant ( String string ) ; public Emit withEnderEmit ( TEndereco Endereco ) ; public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withEnderEmit ( TEndereco Endereco ) ; public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withCNPJ ( final String string ) { emit . setCNPJ ( string ) ; return his ; } 
public Emit withCPF ( final String string ) { emit . setCPF ( string ) ; return his ; } 
public Emit withXNome ( final String string ) { emit . setXNome ( string ) ; return his ; } 
public Emit withXFant ( final String string ) { emit . setXFant ( string ) ; return his ; } 
public Emit withEnderEmit ( final TEndereco Endereco ) { emit . setEnderEmit ( ( br . com . caelum . stella . nfe . modelo . TEndereco ) ( ( ObjectCreator ) Endereco ) . getInstance ( ) ) ; return his ; } 
public Emit withIE ( final String string ) { emit . setIE ( string ) ; return his ; } 
public Emit withIEST ( final String string ) { emit . setIEST ( string ) ; return his ; } 
public Emit withIM ( final String string ) { emit . setIM ( string ) ; return his ; } 
public Emit withCNAE ( final String string ) { emit . setCNAE ( string ) ; return his ; } 
public Exporta withUFEmbarq ( TUf Uf ) ; public Exporta withXLocEmbarq ( String string ) ; } 
public Exporta withUFEmbarq ( TUf Uf ) { his . exporta . setUFEmbarq ( Uf ) ; return his ; } 
public Exporta withXLocEmbarq ( String string ) { his . exporta . setXLocEmbarq ( string ) ; return his ; } 
public Fat withNFat ( String string ) ; public Fat withVOrig ( String string ) ; public Fat withVDesc ( String string ) ; public Fat withVLiq ( String string ) ; } 
public Fat withVOrig ( String string ) ; public Fat withVDesc ( String string ) ; public Fat withVLiq ( String string ) ; } 
public Fat withVDesc ( String string ) ; public Fat withVLiq ( String string ) ; } 
public Fat withNFat ( String string ) { his . fat . setNFat ( string ) ; return his ; } 
public Fat withVOrig ( String string ) { his . fat . setVOrig ( string ) ; return his ; } 
public Fat withVDesc ( String string ) { his . fat . setVDesc ( string ) ; return his ; } 
public Fat withVLiq ( String string ) { his . fat . setVLiq ( string ) ; return his ; } 
public ICMSComb withVBCICMS ( String string ) ; public ICMSComb withVICMS ( String string ) ; public ICMSComb withVBCICMSST ( String string ) ; public ICMSComb withVICMSST ( String string ) ; } 
public ICMSComb withVICMS ( String string ) ; public ICMSComb withVBCICMSST ( String string ) ; public ICMSComb withVICMSST ( String string ) ; } 
public ICMSComb withVBCICMSST ( String string ) ; public ICMSComb withVICMSST ( String string ) ; } 
public ICMSComb withVBCICMS ( String string ) { his . iCMSComb . setVBCICMS ( string ) ; return his ; } 
public ICMSComb withVICMS ( String string ) { his . iCMSComb . setVICMS ( string ) ; return his ; } 
public ICMSComb withVBCICMSST ( String string ) { his . iCMSComb . setVBCICMSST ( string ) ; return his ; } 
public ICMSComb withVICMSST ( String string ) { his . iCMSComb . setVICMSST ( string ) ; return his ; } 
public ICMSCons withVBCICMSSTCons ( String string ) ; public ICMSCons withVICMSSTCons ( String string ) ; public ICMSCons withUFCons ( TUf Uf ) ; } 
public ICMSCons withVICMSSTCons ( String string ) ; public ICMSCons withUFCons ( TUf Uf ) ; } 
public ICMSCons withVBCICMSSTCons ( String string ) { his . iCMSCons . setVBCICMSSTCons ( string ) ; return his ; } 
public ICMSCons withVICMSSTCons ( String string ) { his . iCMSCons . setVICMSSTCons ( string ) ; return his ; } 
public ICMSCons withUFCons ( TUf Uf ) { his . iCMSCons . setUFCons ( Uf ) ; return his ; } 
public ICMSInter withVBCICMSSTDest ( String string ) ; public ICMSInter withVICMSSTDest ( String string ) ; } 
public ICMSInter withVBCICMSSTDest ( String string ) { his . iCMSInter . setVBCICMSSTDest ( string ) ; return his ; } 
public ICMSInter withVICMSSTDest ( String string ) { his . iCMSInter . setVICMSSTDest ( string ) ; return his ; } 
public ICMSTot withVBC ( String string ) ; public ICMSTot withVICMS ( String string ) ; public ICMSTot withVBCST ( String string ) ; public ICMSTot withVST ( String string ) ; public ICMSTot withVProd ( String string ) ; public ICMSTot withVFrete ( String string ) ; public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withVCOFINS ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVICMS ( String string ) ; public ICMSTot withVBCST ( String string ) ; public ICMSTot withVST ( String string ) ; public ICMSTot withVProd ( String string ) ; public ICMSTot withVFrete ( String string ) ; public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withVCOFINS ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVBCST ( String string ) ; public ICMSTot withVST ( String string ) ; public ICMSTot withVProd ( String string ) ; public ICMSTot withVFrete ( String string ) ; public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withVCOFINS ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVST ( String string ) ; public ICMSTot withVProd ( String string ) ; public ICMSTot withVFrete ( String string ) ; public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withVCOFINS ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVProd ( String string ) ; public ICMSTot withVFrete ( String string ) ; public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withVCOFINS ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVFrete ( String string ) ; public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withVCOFINS ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withVCOFINS ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withVCOFINS ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withVCOFINS ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withVCOFINS ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVPIS ( String string ) ; public ICMSTot withVCOFINS ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVCOFINS ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVBC ( String string ) { his . iCMSTot . setVBC ( string ) ; return his ; } 
public ICMSTot withVICMS ( String string ) { his . iCMSTot . setVICMS ( string ) ; return his ; } 
public ICMSTot withVBCST ( String string ) { his . iCMSTot . setVBCST ( string ) ; return his ; } 
public ICMSTot withVST ( String string ) { his . iCMSTot . setVST ( string ) ; return his ; } 
public ICMSTot withVProd ( String string ) { his . iCMSTot . setVProd ( string ) ; return his ; } 
public ICMSTot withVFrete ( String string ) { his . iCMSTot . setVFrete ( string ) ; return his ; } 
public ICMSTot withVSeg ( String string ) { his . iCMSTot . setVSeg ( string ) ; return his ; } 
public ICMSTot withVDesc ( String string ) { his . iCMSTot . setVDesc ( string ) ; return his ; } 
public ICMSTot withVII ( String string ) { his . iCMSTot . setVII ( string ) ; return his ; } 
public ICMSTot withVIPI ( String string ) { his . iCMSTot . setVIPI ( string ) ; return his ; } 
public ICMSTot withVPIS ( String string ) { his . iCMSTot . setVPIS ( string ) ; return his ; } 
public ICMSTot withVCOFINS ( String string ) { his . iCMSTot . setVCOFINS ( string ) ; return his ; } 
public ICMSTot withVOutro ( String string ) { his . iCMSTot . setVOutro ( string ) ; return his ; } 
public ICMSTot withVNF ( String string ) { his . iCMSTot . setVNF ( string ) ; return his ; } 
public IPI withClEnq ( String string ) ; public IPI withCNPJProd ( String string ) ; public IPI withCSelo ( String string ) ; public IPI withQSelo ( String string ) ; public IPI withCEnq ( String string ) ; public IPI withIPITrib ( IPITrib iPITrib ) ; public IPI withIPINT ( IPINT iPINT ) ; } 
public IPI withCNPJProd ( String string ) ; public IPI withCSelo ( String string ) ; public IPI withQSelo ( String string ) ; public IPI withCEnq ( String string ) ; public IPI withIPITrib ( IPITrib iPITrib ) ; public IPI withIPINT ( IPINT iPINT ) ; } 
public IPI withCSelo ( String string ) ; public IPI withQSelo ( String string ) ; public IPI withCEnq ( String string ) ; public IPI withIPITrib ( IPITrib iPITrib ) ; public IPI withIPINT ( IPINT iPINT ) ; } 
public IPI withQSelo ( String string ) ; public IPI withCEnq ( String string ) ; public IPI withIPITrib ( IPITrib iPITrib ) ; public IPI withIPINT ( IPINT iPINT ) ; } 
public IPI withCEnq ( String string ) ; public IPI withIPITrib ( IPITrib iPITrib ) ; public IPI withIPINT ( IPINT iPINT ) ; } 
public IPI withIPITrib ( IPITrib iPITrib ) ; public IPI withIPINT ( IPINT iPINT ) ; } 
public IPI withClEnq ( final String string ) { iPI . setClasseEnquadramento ( string ) ; return his ; } 
public IPI withCNPJProd ( final String string ) { iPI . setCnpjProdutor ( string ) ; return his ; } 
public IPI withCSelo ( final String string ) { iPI . setCodigoSelo ( string ) ; return his ; } 
public IPI withQSelo ( final String string ) { iPI . setQuantidadeSelo ( string ) ; return his ; } 
public IPI withCEnq ( final String string ) { iPI . setCodigoEnquadramento ( string ) ; return his ; } 
public IPI withIPITrib ( final IPITrib iPITrib ) { iPI . setIpiTributacao ( ( br . com . caelum . stella . nfe . modelo . IPITrib ) ( ( ObjectCreator ) iPITrib ) . getInstance ( ) ) ; return his ; } 
public IPI withIPINT ( final IPINT iPINT ) { iPI . setIpint ( ( br . com . caelum . stella . nfe . modelo . IPINT ) ( ( ObjectCreator ) iPINT ) . getInstance ( ) ) ; return his ; } 
public IPINT withCST ( final String string ) { iPINT . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public IPITrib withCST ( String string ) ; public IPITrib withVBC ( String string ) ; public IPITrib withPIPI ( String string ) ; public IPITrib withQUnid ( String string ) ; public IPITrib withVUnid ( String string ) ; public IPITrib withVIPI ( String string ) ; } 
public IPITrib withVBC ( String string ) ; public IPITrib withPIPI ( String string ) ; public IPITrib withQUnid ( String string ) ; public IPITrib withVUnid ( String string ) ; public IPITrib withVIPI ( String string ) ; } 
public IPITrib withPIPI ( String string ) ; public IPITrib withQUnid ( String string ) ; public IPITrib withVUnid ( String string ) ; public IPITrib withVIPI ( String string ) ; } 
public IPITrib withQUnid ( String string ) ; public IPITrib withVUnid ( String string ) ; public IPITrib withVIPI ( String string ) ; } 
public IPITrib withVUnid ( String string ) ; public IPITrib withVIPI ( String string ) ; } 
public IPITrib withCST ( final String string ) { iPITrib . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public IPITrib withVBC ( final String string ) { iPITrib . setValorBaseCalculo ( string ) ; return his ; } 
public IPITrib withPIPI ( final String string ) { iPITrib . setAliquotaIPI ( string ) ; return his ; } 
public IPITrib withQUnid ( final String string ) { iPITrib . setQuantidade ( string ) ; return his ; } 
public IPITrib withVUnid ( final String string ) { iPITrib . setValorUnidade ( string ) ; return his ; } 
public IPITrib withVIPI ( final String string ) { iPITrib . setValorIPI ( string ) ; return his ; } 
public ISSQN withVBC ( String string ) ; public ISSQN withVAliq ( String string ) ; public ISSQN withVISSQN ( String string ) ; public ISSQN withCMunFG ( String string ) ; public ISSQN withCListServ ( String string ) ; } 
public ISSQN withVAliq ( String string ) ; public ISSQN withVISSQN ( String string ) ; public ISSQN withCMunFG ( String string ) ; public ISSQN withCListServ ( String string ) ; } 
public ISSQN withVISSQN ( String string ) ; public ISSQN withCMunFG ( String string ) ; public ISSQN withCListServ ( String string ) ; } 
public ISSQN withCMunFG ( String string ) ; public ISSQN withCListServ ( String string ) ; } 
public ISSQN withVBC ( final String string ) { iSSQN . setValorBaseCalculo ( string ) ; return his ; } 
public ISSQN withVAliq ( final String string ) { iSSQN . setAliquota ( string ) ; return his ; } 
public ISSQN withVISSQN ( final String string ) { iSSQN . setValorISSQN ( string ) ; return his ; } 
public ISSQN withCMunFG ( final String string ) { iSSQN . setCodigoMunicipio ( string ) ; return his ; } 
public ISSQN withCListServ ( final String string ) { iSSQN . setCodigoListaServicos ( string ) ; return his ; } 
public ISSQNtot withVServ ( String string ) ; public ISSQNtot withVBC ( String string ) ; public ISSQNtot withVISS ( String string ) ; public ISSQNtot withVPIS ( String string ) ; public ISSQNtot withVCOFINS ( String string ) ; } 
public ISSQNtot withVBC ( String string ) ; public ISSQNtot withVISS ( String string ) ; public ISSQNtot withVPIS ( String string ) ; public ISSQNtot withVCOFINS ( String string ) ; } 
public ISSQNtot withVISS ( String string ) ; public ISSQNtot withVPIS ( String string ) ; public ISSQNtot withVCOFINS ( String string ) ; } 
public ISSQNtot withVPIS ( String string ) ; public ISSQNtot withVCOFINS ( String string ) ; } 
public ISSQNtot withVServ ( String string ) { his . iSSQNtot . setVServ ( string ) ; return his ; } 
public ISSQNtot withVBC ( String string ) { his . iSSQNtot . setVBC ( string ) ; return his ; } 
public ISSQNtot withVISS ( String string ) { his . iSSQNtot . setVISS ( string ) ; return his ; } 
public ISSQNtot withVPIS ( String string ) { his . iSSQNtot . setVPIS ( string ) ; return his ; } 
public ISSQNtot withVCOFINS ( String string ) { his . iSSQNtot . setVCOFINS ( string ) ; return his ; } 
public Ide withCUF ( String string ) ; public Ide withCNF ( String string ) ; public Ide withNatOp ( String string ) ; public Ide withIndPag ( String string ) ; public Ide withMod ( String string ) ; public Ide withSerie ( String string ) ; public Ide withNNF ( String string ) ; public Ide withDEmi ( Calendar calendar ) ; public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( String string ) ; public Ide withCMunFG ( String string ) ; public Ide withNFref ( NFref . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withCNF ( String string ) ; public Ide withNatOp ( String string ) ; public Ide withIndPag ( String string ) ; public Ide withMod ( String string ) ; public Ide withSerie ( String string ) ; public Ide withNNF ( String string ) ; public Ide withDEmi ( Calendar calendar ) ; public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( String string ) ; public Ide withCMunFG ( String string ) ; public Ide withNFref ( NFref . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withNatOp ( String string ) ; public Ide withIndPag ( String string ) ; public Ide withMod ( String string ) ; public Ide withSerie ( String string ) ; public Ide withNNF ( String string ) ; public Ide withDEmi ( Calendar calendar ) ; public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( String string ) ; public Ide withCMunFG ( String string ) ; public Ide withNFref ( NFref . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withIndPag ( String string ) ; public Ide withMod ( String string ) ; public Ide withSerie ( String string ) ; public Ide withNNF ( String string ) ; public Ide withDEmi ( Calendar calendar ) ; public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( String string ) ; public Ide withCMunFG ( String string ) ; public Ide withNFref ( NFref . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withMod ( String string ) ; public Ide withSerie ( String string ) ; public Ide withNNF ( String string ) ; public Ide withDEmi ( Calendar calendar ) ; public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( String string ) ; public Ide withCMunFG ( String string ) ; public Ide withNFref ( NFref . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withSerie ( String string ) ; public Ide withNNF ( String string ) ; public Ide withDEmi ( Calendar calendar ) ; public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( String string ) ; public Ide withCMunFG ( String string ) ; public Ide withNFref ( NFref . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withNNF ( String string ) ; public Ide withDEmi ( Calendar calendar ) ; public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( String string ) ; public Ide withCMunFG ( String string ) ; public Ide withNFref ( NFref . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withDEmi ( Calendar calendar ) ; public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( String string ) ; public Ide withCMunFG ( String string ) ; public Ide withNFref ( NFref . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( String string ) ; public Ide withCMunFG ( String string ) ; public Ide withNFref ( NFref . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withTpNF ( String string ) ; public Ide withCMunFG ( String string ) ; public Ide withNFref ( NFref . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withCMunFG ( String string ) ; public Ide withNFref ( NFref . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withNFref ( NFref . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withCUF ( final String string ) { ide . setCUF ( string ) ; return his ; } 
public Ide withCNF ( final String string ) { ide . setCNF ( string ) ; return his ; } 
public Ide withNatOp ( final String string ) { ide . setNatOp ( string ) ; return his ; } 
public Ide withIndPag ( final String string ) { ide . setIndPag ( string ) ; return his ; } 
public Ide withMod ( final String string ) { ide . setMod ( string ) ; return his ; } 
public Ide withSerie ( final String string ) { ide . setSerie ( string ) ; return his ; } 
public Ide withNNF ( final String string ) { ide . setNNF ( string ) ; return his ; } 
public Ide withDEmi ( final Calendar calendar ) { ide . setDEmi ( calendar ) ; return his ; } 
public Ide withDSaiEnt ( final Calendar calendar ) { ide . setDSaiEnt ( calendar ) ; return his ; } 
public Ide withTpNF ( final String string ) { ide . setTpNF ( string ) ; return his ; } 
public Ide withCMunFG ( final String string ) { ide . setCMunFG ( string ) ; return his ; } 
public Ide withNFref ( final NFref . . . nfref ) { List < br . com . caelum . stella . nfe . modelo . NFref > list = new ArrayList < br . com . caelum . stella . nfe . modelo . NFref > ( ) ; for ( NFref p : nfref ) { list . add ( ( br . com . caelum . stella . nfe . modelo . NFref ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } ide . setNFref ( list ) ; return his ; } 
public Ide withTpImp ( final String string ) { ide . setTpImp ( string ) ; return his ; } 
public Ide withTpEmis ( final String string ) { ide . setTpEmis ( string ) ; return his ; } 
public Ide withCDV ( final String string ) { ide . setCDV ( string ) ; return his ; } 
public Ide withTpAmb ( final String string ) { ide . setTpAmb ( string ) ; return his ; } 
public Ide withFinNFe ( final String string ) { ide . setFinNFe ( string ) ; return his ; } 
public Ide withProcEmi ( final String string ) { ide . setProcEmi ( string ) ; return his ; } 
public Ide withVerProc ( final String string ) { ide . setVerProc ( string ) ; return his ; } 
public Imposto withICMS ( ICMS iCMS ) ; public Imposto withIPI ( IPI iPI ) ; public Imposto withII ( II iI ) ; public Imposto withPIS ( PIS pIS ) ; public Imposto withPISST ( PISST pISST ) ; public Imposto withCOFINS ( COFINS cOFINS ) ; public Imposto withCOFINSST ( COFINSST cOFINSST ) ; public Imposto withISSQN ( ISSQN iSSQN ) ; } 
public Imposto withIPI ( IPI iPI ) ; public Imposto withII ( II iI ) ; public Imposto withPIS ( PIS pIS ) ; public Imposto withPISST ( PISST pISST ) ; public Imposto withCOFINS ( COFINS cOFINS ) ; public Imposto withCOFINSST ( COFINSST cOFINSST ) ; public Imposto withISSQN ( ISSQN iSSQN ) ; } 
public Imposto withII ( II iI ) ; public Imposto withPIS ( PIS pIS ) ; public Imposto withPISST ( PISST pISST ) ; public Imposto withCOFINS ( COFINS cOFINS ) ; public Imposto withCOFINSST ( COFINSST cOFINSST ) ; public Imposto withISSQN ( ISSQN iSSQN ) ; } 
public Imposto withPIS ( PIS pIS ) ; public Imposto withPISST ( PISST pISST ) ; public Imposto withCOFINS ( COFINS cOFINS ) ; public Imposto withCOFINSST ( COFINSST cOFINSST ) ; public Imposto withISSQN ( ISSQN iSSQN ) ; } 
public Imposto withPISST ( PISST pISST ) ; public Imposto withCOFINS ( COFINS cOFINS ) ; public Imposto withCOFINSST ( COFINSST cOFINSST ) ; public Imposto withISSQN ( ISSQN iSSQN ) ; } 
public Imposto withCOFINS ( COFINS cOFINS ) ; public Imposto withCOFINSST ( COFINSST cOFINSST ) ; public Imposto withISSQN ( ISSQN iSSQN ) ; } 
public Imposto withCOFINSST ( COFINSST cOFINSST ) ; public Imposto withISSQN ( ISSQN iSSQN ) ; } 
public Imposto withICMS ( final ICMS iCMS ) { imposto . setICMS ( ( br . com . caelum . stella . nfe . modelo . ICMS ) ( ( ObjectCreator ) iCMS ) . getInstance ( ) ) ; return his ; } 
public Imposto withIPI ( final IPI iPI ) { imposto . setIPI ( ( br . com . caelum . stella . nfe . modelo . IPI ) ( ( ObjectCreator ) iPI ) . getInstance ( ) ) ; return his ; } 
public Imposto withII ( final II iI ) { imposto . setII ( ( br . com . caelum . stella . nfe . modelo . II ) ( ( ObjectCreator ) iI ) . getInstance ( ) ) ; return his ; } 
public Imposto withPIS ( final PIS pIS ) { imposto . setPIS ( ( br . com . caelum . stella . nfe . modelo . PIS ) ( ( ObjectCreator ) pIS ) . getInstance ( ) ) ; return his ; } 
public Imposto withPISST ( final PISST pISST ) { imposto . setPISST ( ( br . com . caelum . stella . nfe . modelo . PISST ) ( ( ObjectCreator ) pISST ) . getInstance ( ) ) ; return his ; } 
public Imposto withCOFINS ( final COFINS cOFINS ) { imposto . setCOFINS ( ( br . com . caelum . stella . nfe . modelo . COFINS ) ( ( ObjectCreator ) cOFINS ) . getInstance ( ) ) ; return his ; } 
public Imposto withCOFINSST ( final COFINSST cOFINSST ) { imposto . setCOFINSST ( ( br . com . caelum . stella . nfe . modelo . COFINSST ) ( ( ObjectCreator ) cOFINSST ) . getInstance ( ) ) ; return his ; } 
public Imposto withISSQN ( final ISSQN iSSQN ) { imposto . setISSQN ( ( br . com . caelum . stella . nfe . modelo . ISSQN ) ( ( ObjectCreator ) iSSQN ) . getInstance ( ) ) ; return his ; } 
public InfAdic withInfAdFisco ( String string ) ; public InfAdic withInfCpl ( String string ) ; public InfAdic withObsCont ( ObsCont . . . obsConts ) ; public InfAdic withObsFisco ( ObsFisco . . . obsFiscos ) ; public InfAdic withProcRef ( ProcRef . . . procRefs ) ; } 
public InfAdic withInfCpl ( String string ) ; public InfAdic withObsCont ( ObsCont . . . obsConts ) ; public InfAdic withObsFisco ( ObsFisco . . . obsFiscos ) ; public InfAdic withProcRef ( ProcRef . . . procRefs ) ; } 
public InfAdic withObsCont ( ObsCont . . . obsConts ) ; public InfAdic withObsFisco ( ObsFisco . . . obsFiscos ) ; public InfAdic withProcRef ( ProcRef . . . procRefs ) ; } 
public InfAdic withObsFisco ( ObsFisco . . . obsFiscos ) ; public InfAdic withProcRef ( ProcRef . . . procRefs ) ; } 
public InfAdic withInfAdFisco ( final String string ) { infAdic . setInfAdFisco ( string ) ; return his ; } 
public InfAdic withInfCpl ( final String string ) { infAdic . setInfCpl ( string ) ; return his ; } 
public InfAdic withObsCont ( final ObsCont . . . obsConts ) { List < br . com . caelum . stella . nfe . modelo . ObsCont > list = new ArrayList < br . com . caelum . stella . nfe . modelo . ObsCont > ( ) ; for ( ObsCont p : obsConts ) { list . add ( ( br . com . caelum . stella . nfe . modelo . ObsCont ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infAdic . setObsCont ( list ) ; return his ; } 
public InfAdic withObsFisco ( final ObsFisco . . . obsFiscos ) { List < br . com . caelum . stella . nfe . modelo . ObsFisco > list = new ArrayList < br . com . caelum . stella . nfe . modelo . ObsFisco > ( ) ; for ( ObsFisco p : obsFiscos ) { list . add ( ( br . com . caelum . stella . nfe . modelo . ObsFisco ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infAdic . setObsFisco ( list ) ; return his ; } 
public InfAdic withProcRef ( final ProcRef . . . procRef ) { List < br . com . caelum . stella . nfe . modelo . ProcRef > list = new ArrayList < br . com . caelum . stella . nfe . modelo . ProcRef > ( ) ; for ( ProcRef p : procRef ) { list . add ( ( br . com . caelum . stella . nfe . modelo . ProcRef ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infAdic . setProcRef ( list ) ; return his ; } 
public InfNFe withIde ( Ide ide ) ; public InfNFe withEmit ( Emit emit ) ; public InfNFe withAvulsa ( Avulsa avulsa ) ; public InfNFe withDest ( Dest dest ) ; public InfNFe withRetirada ( TLocal Local ) ; public InfNFe withEntrega ( TLocal Local ) ; public InfNFe withDet ( Det . . . det ) ; public InfNFe withTotal ( Total otal ) ; public InfNFe withTransp ( Transp ransp ) ; public InfNFe withCobr ( Cobr cobr ) ; public InfNFe withInfAdic ( InfAdic infAdic ) ; public InfNFe withExporta ( Exporta exporta ) ; public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withEmit ( Emit emit ) ; public InfNFe withAvulsa ( Avulsa avulsa ) ; public InfNFe withDest ( Dest dest ) ; public InfNFe withRetirada ( TLocal Local ) ; public InfNFe withEntrega ( TLocal Local ) ; public InfNFe withDet ( Det . . . det ) ; public InfNFe withTotal ( Total otal ) ; public InfNFe withTransp ( Transp ransp ) ; public InfNFe withCobr ( Cobr cobr ) ; public InfNFe withInfAdic ( InfAdic infAdic ) ; public InfNFe withExporta ( Exporta exporta ) ; public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withAvulsa ( Avulsa avulsa ) ; public InfNFe withDest ( Dest dest ) ; public InfNFe withRetirada ( TLocal Local ) ; public InfNFe withEntrega ( TLocal Local ) ; public InfNFe withDet ( Det . . . det ) ; public InfNFe withTotal ( Total otal ) ; public InfNFe withTransp ( Transp ransp ) ; public InfNFe withCobr ( Cobr cobr ) ; public InfNFe withInfAdic ( InfAdic infAdic ) ; public InfNFe withExporta ( Exporta exporta ) ; public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withDest ( Dest dest ) ; public InfNFe withRetirada ( TLocal Local ) ; public InfNFe withEntrega ( TLocal Local ) ; public InfNFe withDet ( Det . . . det ) ; public InfNFe withTotal ( Total otal ) ; public InfNFe withTransp ( Transp ransp ) ; public InfNFe withCobr ( Cobr cobr ) ; public InfNFe withInfAdic ( InfAdic infAdic ) ; public InfNFe withExporta ( Exporta exporta ) ; public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withRetirada ( TLocal Local ) ; public InfNFe withEntrega ( TLocal Local ) ; public InfNFe withDet ( Det . . . det ) ; public InfNFe withTotal ( Total otal ) ; public InfNFe withTransp ( Transp ransp ) ; public InfNFe withCobr ( Cobr cobr ) ; public InfNFe withInfAdic ( InfAdic infAdic ) ; public InfNFe withExporta ( Exporta exporta ) ; public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withEntrega ( TLocal Local ) ; public InfNFe withDet ( Det . . . det ) ; public InfNFe withTotal ( Total otal ) ; public InfNFe withTransp ( Transp ransp ) ; public InfNFe withCobr ( Cobr cobr ) ; public InfNFe withInfAdic ( InfAdic infAdic ) ; public InfNFe withExporta ( Exporta exporta ) ; public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withDet ( Det . . . det ) ; public InfNFe withTotal ( Total otal ) ; public InfNFe withTransp ( Transp ransp ) ; public InfNFe withCobr ( Cobr cobr ) ; public InfNFe withInfAdic ( InfAdic infAdic ) ; public InfNFe withExporta ( Exporta exporta ) ; public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withTotal ( Total otal ) ; public InfNFe withTransp ( Transp ransp ) ; public InfNFe withCobr ( Cobr cobr ) ; public InfNFe withInfAdic ( InfAdic infAdic ) ; public InfNFe withExporta ( Exporta exporta ) ; public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withTransp ( Transp ransp ) ; public InfNFe withCobr ( Cobr cobr ) ; public InfNFe withInfAdic ( InfAdic infAdic ) ; public InfNFe withExporta ( Exporta exporta ) ; public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withCobr ( Cobr cobr ) ; public InfNFe withInfAdic ( InfAdic infAdic ) ; public InfNFe withExporta ( Exporta exporta ) ; public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withInfAdic ( InfAdic infAdic ) ; public InfNFe withExporta ( Exporta exporta ) ; public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withExporta ( Exporta exporta ) ; public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withCompra ( Compra compra ) ; public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withVersao ( String string ) ; public InfNFe withId ( String string ) ; } 
public InfNFe withIde ( final Ide ide ) { infNFe . setIde ( ( br . com . caelum . stella . nfe . modelo . Ide ) ( ( ObjectCreator ) ide ) . getInstance ( ) ) ; return his ; } 
public InfNFe withEmit ( final Emit emit ) { infNFe . setEmit ( ( br . com . caelum . stella . nfe . modelo . Emit ) ( ( ObjectCreator ) emit ) . getInstance ( ) ) ; return his ; } 
public InfNFe withAvulsa ( final Avulsa avulsa ) { infNFe . setAvulsa ( ( br . com . caelum . stella . nfe . modelo . Avulsa ) ( ( ObjectCreator ) avulsa ) . getInstance ( ) ) ; return his ; } 
public InfNFe withDest ( final Dest dest ) { infNFe . setDest ( ( br . com . caelum . stella . nfe . modelo . Dest ) ( ( ObjectCreator ) dest ) . getInstance ( ) ) ; return his ; } 
public InfNFe withRetirada ( final TLocal Local ) { infNFe . setRetirada ( ( br . com . caelum . stella . nfe . modelo . TLocal ) ( ( ObjectCreator ) Local ) . getInstance ( ) ) ; return his ; } 
public InfNFe withEntrega ( final TLocal Local ) { infNFe . setEntrega ( ( br . com . caelum . stella . nfe . modelo . TLocal ) ( ( ObjectCreator ) Local ) . getInstance ( ) ) ; return his ; } 
public InfNFe withDet ( final Det . . . det ) { List < br . com . caelum . stella . nfe . modelo . Det > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Det > ( ) ; for ( Det p : det ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Det ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infNFe . setDet ( list ) ; return his ; } 
public InfNFe withTotal ( final Total otal ) { infNFe . setTotal ( ( br . com . caelum . stella . nfe . modelo . Total ) ( ( ObjectCreator ) otal ) . getInstance ( ) ) ; return his ; } 
public InfNFe withTransp ( final Transp ransp ) { infNFe . setTransp ( ( br . com . caelum . stella . nfe . modelo . Transp ) ( ( ObjectCreator ) ransp ) . getInstance ( ) ) ; return his ; } 
public InfNFe withCobr ( final Cobr cobr ) { infNFe . setCobr ( ( br . com . caelum . stella . nfe . modelo . Cobr ) ( ( ObjectCreator ) cobr ) . getInstance ( ) ) ; return his ; } 
public InfNFe withInfAdic ( final InfAdic infAdic ) { infNFe . setInfAdic ( ( br . com . caelum . stella . nfe . modelo . InfAdic ) ( ( ObjectCreator ) infAdic ) . getInstance ( ) ) ; return his ; } 
public InfNFe withExporta ( final Exporta exporta ) { infNFe . setExporta ( ( br . com . caelum . stella . nfe . modelo . Exporta ) ( ( ObjectCreator ) exporta ) . getInstance ( ) ) ; return his ; } 
public InfNFe withCompra ( final Compra compra ) { infNFe . setCompra ( ( br . com . caelum . stella . nfe . modelo . Compra ) ( ( ObjectCreator ) compra ) . getInstance ( ) ) ; return his ; } 
public InfNFe withVersao ( final String string ) { infNFe . setVersao ( string ) ; return his ; } 
public InfNFe withId ( final String string ) { infNFe . setId ( string ) ; return his ; } 
public InfProt withTpAmb ( String string ) ; public InfProt withVerAplic ( String string ) ; public InfProt withChNFe ( String string ) ; public InfProt withDhRecbto ( Calendar calendar ) ; public InfProt withNProt ( String string ) ; public InfProt withDigVal ( byte [ ] b ) ; public InfProt withCStat ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withVerAplic ( String string ) ; public InfProt withChNFe ( String string ) ; public InfProt withDhRecbto ( Calendar calendar ) ; public InfProt withNProt ( String string ) ; public InfProt withDigVal ( byte [ ] b ) ; public InfProt withCStat ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withChNFe ( String string ) ; public InfProt withDhRecbto ( Calendar calendar ) ; public InfProt withNProt ( String string ) ; public InfProt withDigVal ( byte [ ] b ) ; public InfProt withCStat ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withDhRecbto ( Calendar calendar ) ; public InfProt withNProt ( String string ) ; public InfProt withDigVal ( byte [ ] b ) ; public InfProt withCStat ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withNProt ( String string ) ; public InfProt withDigVal ( byte [ ] b ) ; public InfProt withCStat ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withDigVal ( byte [ ] b ) ; public InfProt withCStat ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withCStat ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withTpAmb ( final String string ) { infProt . setTpAmb ( string ) ; return his ; } 
public InfProt withVerAplic ( final String string ) { infProt . setVerAplic ( string ) ; return his ; } 
public InfProt withChNFe ( final String string ) { infProt . setChNFe ( string ) ; return his ; } 
public InfProt withDhRecbto ( final Calendar calendar ) { infProt . setDhRecbto ( calendar ) ; return his ; } 
public InfProt withNProt ( final String string ) { infProt . setNProt ( string ) ; return his ; } 
public InfProt withDigVal ( final byte [ ] b ) { infProt . setDigVal ( b ) ; return his ; } 
public InfProt withCStat ( final String string ) { infProt . setCStat ( string ) ; return his ; } 
public InfProt withXMotivo ( final String string ) { infProt . setXMotivo ( string ) ; return his ; } 
public InfProt withId ( final String string ) { infProt . setId ( string ) ; return his ; } 
public InfRec withNRec ( String string ) ; public InfRec withDhRecbto ( Calendar calendar ) ; public InfRec withTMed ( String string ) ; } 
public InfRec withDhRecbto ( Calendar calendar ) ; public InfRec withTMed ( String string ) ; } 
public InfRec withNRec ( String string ) { his . infRec . setNRec ( string ) ; return his ; } 
public InfRec withDhRecbto ( Calendar calendar ) { his . infRec . setDhRecbto ( calendar ) ; return his ; } 
public InfRec withTMed ( String string ) { his . infRec . setTMed ( string ) ; return his ; } 
public Lacres withNLacre ( String string ) { his . lacres . setNLacre ( string ) ; return his ; } 
public Med withNLote ( String string ) ; public Med withQLote ( String string ) ; public Med withDFab ( Calendar calendar ) ; public Med withDVal ( Calendar calendar ) ; public Med withVPMC ( String string ) ; } 
public Med withQLote ( String string ) ; public Med withDFab ( Calendar calendar ) ; public Med withDVal ( Calendar calendar ) ; public Med withVPMC ( String string ) ; } 
public Med withDFab ( Calendar calendar ) ; public Med withDVal ( Calendar calendar ) ; public Med withVPMC ( String string ) ; } 
public Med withDVal ( Calendar calendar ) ; public Med withVPMC ( String string ) ; } 
public Med withNLote ( final String string ) { med . setNLote ( string ) ; return his ; } 
public Med withQLote ( final String string ) { med . setQLote ( string ) ; return his ; } 
public Med withDFab ( final Calendar calendar ) { med . setDFab ( new CalendarToStringConverter ( ) . convertDateToString ( calendar ) ) ; return his ; } 
public Med withDVal ( final Calendar calendar ) { med . setDVal ( calendar ) ; return his ; } 
public Med withVPMC ( final String string ) { med . setVPMC ( string ) ; return his ; } 
public NFref withRefNFe ( String string ) ; public NFref withRefNF ( RefNF refNF ) ; } 
public NFref withRefNFe ( final String string ) { nFref . setRefNFe ( string ) ; return his ; } 
public NFref withRefNF ( final RefNF refNF ) { nFref . setRefNF ( ( br . com . caelum . stella . nfe . modelo . RefNF ) ( ( ObjectCreator ) refNF ) . getInstance ( ) ) ; return his ; } 
public ObsCont withXTexto ( String string ) ; public ObsCont withXCampo ( String string ) ; } 
public ObsCont withXTexto ( String string ) { his . obsCont . setXTexto ( string ) ; return his ; } 
public ObsCont withXCampo ( String string ) { his . obsCont . setXCampo ( string ) ; return his ; } 
public ObsFisco withXTexto ( String string ) ; public ObsFisco withXCampo ( String string ) ; } 
public ObsFisco withXTexto ( String string ) { his . obsFisco . setXTexto ( string ) ; return his ; } 
public ObsFisco withXCampo ( String string ) { his . obsFisco . setXCampo ( string ) ; return his ; } 
public PIS withPISAliq ( PISAliq pISAliq ) ; public PIS withPISQtde ( PISQtde pISQtde ) ; public PIS withPISNT ( PISNT pISNT ) ; public PIS withPISOutr ( PISOutr pISOutr ) ; } 
public PIS withPISQtde ( PISQtde pISQtde ) ; public PIS withPISNT ( PISNT pISNT ) ; public PIS withPISOutr ( PISOutr pISOutr ) ; } 
public PIS withPISNT ( PISNT pISNT ) ; public PIS withPISOutr ( PISOutr pISOutr ) ; } 
public PISAliq withCST ( String string ) ; public PISAliq withVBC ( String string ) ; public PISAliq withPPIS ( String string ) ; public PISAliq withVPIS ( String string ) ; } 
public PISAliq withVBC ( String string ) ; public PISAliq withPPIS ( String string ) ; public PISAliq withVPIS ( String string ) ; } 
public PISAliq withPPIS ( String string ) ; public PISAliq withVPIS ( String string ) ; } 
public PISAliq withCST ( String string ) { his . pISAliq . setCST ( string ) ; return his ; } 
public PISAliq withVBC ( String string ) { his . pISAliq . setVBC ( string ) ; return his ; } 
public PISAliq withPPIS ( String string ) { his . pISAliq . setPPIS ( string ) ; return his ; } 
public PISAliq withVPIS ( String string ) { his . pISAliq . setVPIS ( string ) ; return his ; } 
public PIS withPISAliq ( final PISAliq pISAliq ) { pIS . setPISAliq ( ( br . com . caelum . stella . nfe . modelo . PISAliq ) ( ( ObjectCreator ) pISAliq ) . getInstance ( ) ) ; return his ; } 
public PIS withPISQtde ( final PISQtde pISQtde ) { pIS . setPISQtde ( ( br . com . caelum . stella . nfe . modelo . PISQtde ) ( ( ObjectCreator ) pISQtde ) . getInstance ( ) ) ; return his ; } 
public PIS withPISNT ( final PISNT pISNT ) { pIS . setPISNT ( ( br . com . caelum . stella . nfe . modelo . PISNT ) ( ( ObjectCreator ) pISNT ) . getInstance ( ) ) ; return his ; } 
public PIS withPISOutr ( final PISOutr pISOutr ) { pIS . setPISOutr ( ( br . com . caelum . stella . nfe . modelo . PISOutr ) ( ( ObjectCreator ) pISOutr ) . getInstance ( ) ) ; return his ; } 
public PISNT withCST ( String string ) { his . pISNT . setCST ( string ) ; return his ; } 
public PISOutr withCST ( String string ) ; public PISOutr withVBC ( String string ) ; public PISOutr withPPIS ( String string ) ; public PISOutr withQBCProd ( String string ) ; public PISOutr withVAliqProd ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withVBC ( String string ) ; public PISOutr withPPIS ( String string ) ; public PISOutr withQBCProd ( String string ) ; public PISOutr withVAliqProd ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withPPIS ( String string ) ; public PISOutr withQBCProd ( String string ) ; public PISOutr withVAliqProd ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withQBCProd ( String string ) ; public PISOutr withVAliqProd ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withVAliqProd ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withCST ( String string ) { his . pISOutr . setCST ( string ) ; return his ; } 
public PISOutr withVBC ( String string ) { his . pISOutr . setVBC ( string ) ; return his ; } 
public PISOutr withPPIS ( String string ) { his . pISOutr . setPPIS ( string ) ; return his ; } 
public PISOutr withQBCProd ( String string ) { his . pISOutr . setQBCProd ( string ) ; return his ; } 
public PISOutr withVAliqProd ( String string ) { his . pISOutr . setVAliqProd ( string ) ; return his ; } 
public PISOutr withVPIS ( String string ) { his . pISOutr . setVPIS ( string ) ; return his ; } 
public PISQtde withCST ( String string ) ; public PISQtde withQBCProd ( String string ) ; public PISQtde withVAliqProd ( String string ) ; public PISQtde withVPIS ( String string ) ; } 
public PISQtde withQBCProd ( String string ) ; public PISQtde withVAliqProd ( String string ) ; public PISQtde withVPIS ( String string ) ; } 
public PISQtde withVAliqProd ( String string ) ; public PISQtde withVPIS ( String string ) ; } 
public PISQtde withCST ( String string ) { his . pISQtde . setCST ( string ) ; return his ; } 
public PISQtde withQBCProd ( String string ) { his . pISQtde . setQBCProd ( string ) ; return his ; } 
public PISQtde withVAliqProd ( String string ) { his . pISQtde . setVAliqProd ( string ) ; return his ; } 
public PISQtde withVPIS ( String string ) { his . pISQtde . setVPIS ( string ) ; return his ; } 
public PISST withVBC ( String string ) ; public PISST withPPIS ( String string ) ; public PISST withQBCProd ( String string ) ; public PISST withVAliqProd ( String string ) ; public PISST withVPIS ( String string ) ; } 
public PISST withPPIS ( String string ) ; public PISST withQBCProd ( String string ) ; public PISST withVAliqProd ( String string ) ; public PISST withVPIS ( String string ) ; } 
public PISST withQBCProd ( String string ) ; public PISST withVAliqProd ( String string ) ; public PISST withVPIS ( String string ) ; } 
public PISST withVAliqProd ( String string ) ; public PISST withVPIS ( String string ) ; } 
public PISST withVBC ( String string ) { his . pISST . setVBC ( string ) ; return his ; } 
public PISST withPPIS ( String string ) { his . pISST . setPPIS ( string ) ; return his ; } 
public PISST withQBCProd ( String string ) { his . pISST . setQBCProd ( string ) ; return his ; } 
public PISST withVAliqProd ( String string ) { his . pISST . setVAliqProd ( string ) ; return his ; } 
public PISST withVPIS ( String string ) { his . pISST . setVPIS ( string ) ; return his ; } 
public ProcRef withNProc ( String string ) ; public ProcRef withIndProc ( String string ) ; } 
public ProcRef withNProc ( String string ) { his . procRef . setNProc ( string ) ; return his ; } 
public ProcRef withIndProc ( String string ) { his . procRef . setIndProc ( string ) ; return his ; } 
public Prod withEXTIPI ( String string ) ; public Prod withGenero ( String string ) ; public Prod withCFOP ( String string ) ; public Prod withUCom ( String string ) ; public Prod withQCom ( String string ) ; public Prod withVUnCom ( String string ) ; public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withGenero ( String string ) ; public Prod withCFOP ( String string ) ; public Prod withUCom ( String string ) ; public Prod withQCom ( String string ) ; public Prod withVUnCom ( String string ) ; public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withCFOP ( String string ) ; public Prod withUCom ( String string ) ; public Prod withQCom ( String string ) ; public Prod withVUnCom ( String string ) ; public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withUCom ( String string ) ; public Prod withQCom ( String string ) ; public Prod withVUnCom ( String string ) ; public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withQCom ( String string ) ; public Prod withVUnCom ( String string ) ; public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVUnCom ( String string ) ; public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withArma ( Arma . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withCProd ( final String string ) { prod . setCProd ( string ) ; return his ; } 
public Prod withCEAN ( final String string ) { prod . setCEAN ( string ) ; return his ; } 
public Prod withXProd ( final String string ) { prod . setXProd ( string ) ; return his ; } 
public Prod withNCM ( final String string ) { prod . setNCM ( string ) ; return his ; } 
public Prod withEXTIPI ( final String string ) { prod . setEXTIPI ( string ) ; return his ; } 
public Prod withGenero ( final String string ) { prod . setGenero ( string ) ; return his ; } 
public Prod withCFOP ( final String string ) { prod . setCFOP ( string ) ; return his ; } 
public Prod withUCom ( final String string ) { prod . setUCom ( string ) ; return his ; } 
public Prod withQCom ( final String string ) { prod . setQCom ( string ) ; return his ; } 
public Prod withVUnCom ( final String string ) { prod . setVUnCom ( string ) ; return his ; } 
public Prod withVProd ( final String string ) { prod . setVProd ( string ) ; return his ; } 
public Prod withCEANTrib ( final String string ) { prod . setCEANTrib ( string ) ; return his ; } 
public Prod withUTrib ( final String string ) { prod . setUTrib ( string ) ; return his ; } 
public Prod withQTrib ( final String string ) { prod . setQTrib ( string ) ; return his ; } 
public Prod withVUnTrib ( final String string ) { prod . setVUnTrib ( string ) ; return his ; } 
public Prod withVFrete ( final String string ) { prod . setVFrete ( string ) ; return his ; } 
public Prod withVSeg ( final String string ) { prod . setVSeg ( string ) ; return his ; } 
public Prod withVDesc ( final String string ) { prod . setVDesc ( string ) ; return his ; } 
public Prod withDI ( final DI . . . di ) { List < br . com . caelum . stella . nfe . modelo . DI > list = new ArrayList < br . com . caelum . stella . nfe . modelo . DI > ( ) ; for ( DI p : di ) { list . add ( ( br . com . caelum . stella . nfe . modelo . DI ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } prod . setDI ( list ) ; return his ; } 
public Prod withVeicProd ( final VeicProd veicProd ) { prod . setVeicProd ( ( br . com . caelum . stella . nfe . modelo . VeicProd ) ( ( ObjectCreator ) veicProd ) . getInstance ( ) ) ; return his ; } 
public Prod withMed ( final Med . . . meds ) { List < br . com . caelum . stella . nfe . modelo . Med > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Med > ( ) ; for ( Med p : meds ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Med ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } prod . setMed ( list ) ; return his ; } 
public Prod withArma ( final Arma . . . armas ) { List < br . com . caelum . stella . nfe . modelo . Arma > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Arma > ( ) ; for ( Arma p : armas ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Arma ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } prod . setArma ( list ) ; return his ; } 
public Prod withComb ( final Comb comb ) { prod . setComb ( ( br . com . caelum . stella . nfe . modelo . Comb ) ( ( ObjectCreator ) comb ) . getInstance ( ) ) ; return his ; } 
public RefNF withCUF ( String string ) ; public RefNF withAAMM ( String string ) ; public RefNF withCNPJ ( String string ) ; public RefNF withMod ( String string ) ; public RefNF withSerie ( String string ) ; public RefNF withNNF ( String string ) ; } 
public RefNF withAAMM ( String string ) ; public RefNF withCNPJ ( String string ) ; public RefNF withMod ( String string ) ; public RefNF withSerie ( String string ) ; public RefNF withNNF ( String string ) ; } 
public RefNF withCNPJ ( String string ) ; public RefNF withMod ( String string ) ; public RefNF withSerie ( String string ) ; public RefNF withNNF ( String string ) ; } 
public RefNF withMod ( String string ) ; public RefNF withSerie ( String string ) ; public RefNF withNNF ( String string ) ; } 
public RefNF withSerie ( String string ) ; public RefNF withNNF ( String string ) ; } 
public RefNF withCUF ( String string ) { his . refNF . setCUF ( string ) ; return his ; } 
public RefNF withAAMM ( String string ) { his . refNF . setAAMM ( string ) ; return his ; } 
public RefNF withCNPJ ( String string ) { his . refNF . setCNPJ ( string ) ; return his ; } 
public RefNF withMod ( String string ) { his . refNF . setMod ( string ) ; return his ; } 
public RefNF withSerie ( String string ) { his . refNF . setSerie ( string ) ; return his ; } 
public RefNF withNNF ( String string ) { his . refNF . setNNF ( string ) ; return his ; } 
public RetTransp withVServ ( String string ) ; public RetTransp withVBCRet ( String string ) ; public RetTransp withPICMSRet ( String string ) ; public RetTransp withVICMSRet ( String string ) ; public RetTransp withCFOP ( String string ) ; public RetTransp withCMunFG ( String string ) ; } 
public RetTransp withVBCRet ( String string ) ; public RetTransp withPICMSRet ( String string ) ; public RetTransp withVICMSRet ( String string ) ; public RetTransp withCFOP ( String string ) ; public RetTransp withCMunFG ( String string ) ; } 
public RetTransp withPICMSRet ( String string ) ; public RetTransp withVICMSRet ( String string ) ; public RetTransp withCFOP ( String string ) ; public RetTransp withCMunFG ( String string ) ; } 
public RetTransp withVICMSRet ( String string ) ; public RetTransp withCFOP ( String string ) ; public RetTransp withCMunFG ( String string ) ; } 
public RetTransp withCFOP ( String string ) ; public RetTransp withCMunFG ( String string ) ; } 
public RetTransp withVServ ( String string ) { his . retTransp . setVServ ( string ) ; return his ; } 
public RetTransp withVBCRet ( String string ) { his . retTransp . setVBCRet ( string ) ; return his ; } 
public RetTransp withPICMSRet ( String string ) { his . retTransp . setPICMSRet ( string ) ; return his ; } 
public RetTransp withVICMSRet ( String string ) { his . retTransp . setVICMSRet ( string ) ; return his ; } 
public RetTransp withCFOP ( String string ) { his . retTransp . setCFOP ( string ) ; return his ; } 
public RetTransp withCMunFG ( String string ) { his . retTransp . setCMunFG ( string ) ; return his ; } 
public RetTrib withVRetPIS ( String string ) ; public RetTrib withVRetCOFINS ( String string ) ; public RetTrib withVRetCSLL ( String string ) ; public RetTrib withVBCIRRF ( String string ) ; public RetTrib withVIRRF ( String string ) ; public RetTrib withVBCRetPrev ( String string ) ; public RetTrib withVRetPrev ( String string ) ; } 
public RetTrib withVRetCOFINS ( String string ) ; public RetTrib withVRetCSLL ( String string ) ; public RetTrib withVBCIRRF ( String string ) ; public RetTrib withVIRRF ( String string ) ; public RetTrib withVBCRetPrev ( String string ) ; public RetTrib withVRetPrev ( String string ) ; } 
public RetTrib withVRetCSLL ( String string ) ; public RetTrib withVBCIRRF ( String string ) ; public RetTrib withVIRRF ( String string ) ; public RetTrib withVBCRetPrev ( String string ) ; public RetTrib withVRetPrev ( String string ) ; } 
public RetTrib withVBCIRRF ( String string ) ; public RetTrib withVIRRF ( String string ) ; public RetTrib withVBCRetPrev ( String string ) ; public RetTrib withVRetPrev ( String string ) ; } 
public RetTrib withVIRRF ( String string ) ; public RetTrib withVBCRetPrev ( String string ) ; public RetTrib withVRetPrev ( String string ) ; } 
public RetTrib withVBCRetPrev ( String string ) ; public RetTrib withVRetPrev ( String string ) ; } 
public RetTrib withVRetPIS ( String string ) { his . retTrib . setVRetPIS ( string ) ; return his ; } 
public RetTrib withVRetCOFINS ( String string ) { his . retTrib . setVRetCOFINS ( string ) ; return his ; } 
public RetTrib withVRetCSLL ( String string ) { his . retTrib . setVRetCSLL ( string ) ; return his ; } 
public RetTrib withVBCIRRF ( String string ) { his . retTrib . setVBCIRRF ( string ) ; return his ; } 
public RetTrib withVIRRF ( String string ) { his . retTrib . setVIRRF ( string ) ; return his ; } 
public RetTrib withVBCRetPrev ( String string ) { his . retTrib . setVBCRetPrev ( string ) ; return his ; } 
public RetTrib withVRetPrev ( String string ) { his . retTrib . setVRetPrev ( string ) ; return his ; } 
public TConsReciNFe withTpAmb ( String string ) ; public TConsReciNFe withNRec ( String string ) ; public TConsReciNFe withVersao ( String string ) ; } 
public TConsReciNFe withNRec ( String string ) ; public TConsReciNFe withVersao ( String string ) ; } 
public TConsReciNFe withTpAmb ( String string ) { his . ConsReciNFe . setTpAmb ( string ) ; return his ; } 
public TConsReciNFe withNRec ( String string ) { his . ConsReciNFe . setNRec ( string ) ; return his ; } 
public TConsReciNFe withVersao ( String string ) { his . ConsReciNFe . setVersao ( string ) ; return his ; } 
public TEndereco withXLgr ( String string ) ; public TEndereco withNro ( String string ) ; public TEndereco withXCpl ( String string ) ; public TEndereco withXBairro ( String string ) ; public TEndereco withCMun ( String string ) ; public TEndereco withXMun ( String string ) ; public TEndereco withUF ( TUf Uf ) ; public TEndereco withCEP ( String string ) ; public TEndereco withCPais ( String string ) ; public TEndereco withXPais ( String string ) ; public TEndereco withFone ( String string ) ; } 
public TEndereco withNro ( String string ) ; public TEndereco withXCpl ( String string ) ; public TEndereco withXBairro ( String string ) ; public TEndereco withCMun ( String string ) ; public TEndereco withXMun ( String string ) ; public TEndereco withUF ( TUf Uf ) ; public TEndereco withCEP ( String string ) ; public TEndereco withCPais ( String string ) ; public TEndereco withXPais ( String string ) ; public TEndereco withFone ( String string ) ; } 
public TEndereco withXCpl ( String string ) ; public TEndereco withXBairro ( String string ) ; public TEndereco withCMun ( String string ) ; public TEndereco withXMun ( String string ) ; public TEndereco withUF ( TUf Uf ) ; public TEndereco withCEP ( String string ) ; public TEndereco withCPais ( String string ) ; public TEndereco withXPais ( String string ) ; public TEndereco withFone ( String string ) ; } 
public TEndereco withXBairro ( String string ) ; public TEndereco withCMun ( String string ) ; public TEndereco withXMun ( String string ) ; public TEndereco withUF ( TUf Uf ) ; public TEndereco withCEP ( String string ) ; public TEndereco withCPais ( String string ) ; public TEndereco withXPais ( String string ) ; public TEndereco withFone ( String string ) ; } 
public TEndereco withCMun ( String string ) ; public TEndereco withXMun ( String string ) ; public TEndereco withUF ( TUf Uf ) ; public TEndereco withCEP ( String string ) ; public TEndereco withCPais ( String string ) ; public TEndereco withXPais ( String string ) ; public TEndereco withFone ( String string ) ; } 
public TEndereco withXMun ( String string ) ; public TEndereco withUF ( TUf Uf ) ; public TEndereco withCEP ( String string ) ; public TEndereco withCPais ( String string ) ; public TEndereco withXPais ( String string ) ; public TEndereco withFone ( String string ) ; } 
public TEndereco withUF ( TUf Uf ) ; public TEndereco withCEP ( String string ) ; public TEndereco withCPais ( String string ) ; public TEndereco withXPais ( String string ) ; public TEndereco withFone ( String string ) ; } 
public TEndereco withCEP ( String string ) ; public TEndereco withCPais ( String string ) ; public TEndereco withXPais ( String string ) ; public TEndereco withFone ( String string ) ; } 
public TEndereco withCPais ( String string ) ; public TEndereco withXPais ( String string ) ; public TEndereco withFone ( String string ) ; } 
public TEndereco withXPais ( String string ) ; public TEndereco withFone ( String string ) ; } 
public TEndereco withXLgr ( String string ) { his . Endereco . setXLgr ( string ) ; return his ; } 
public TEndereco withNro ( String string ) { his . Endereco . setNro ( string ) ; return his ; } 
public TEndereco withXCpl ( String string ) { his . Endereco . setXCpl ( string ) ; return his ; } 
public TEndereco withXBairro ( String string ) { his . Endereco . setXBairro ( string ) ; return his ; } 
public TEndereco withCMun ( String string ) { his . Endereco . setCMun ( string ) ; return his ; } 
public TEndereco withXMun ( String string ) { his . Endereco . setXMun ( string ) ; return his ; } 
public TEndereco withUF ( TUf Uf ) { his . Endereco . setUF ( Uf ) ; return his ; } 
public TEndereco withCEP ( String string ) { his . Endereco . setCEP ( string ) ; return his ; } 
public TEndereco withCPais ( String string ) { his . Endereco . setCPais ( string ) ; return his ; } 
public TEndereco withXPais ( String string ) { his . Endereco . setXPais ( string ) ; return his ; } 
public TEndereco withFone ( String string ) { his . Endereco . setFone ( string ) ; return his ; } 
public TEnviNFe withIdLote ( String string ) ; public TEnviNFe withNFe ( TNFe . . . nfes ) ; public TEnviNFe withVersao ( String string ) ; } 
public TEnviNFe withNFe ( TNFe . . . nfes ) ; public TEnviNFe withVersao ( String string ) ; } 
public TEnviNFe withIdLote ( final String string ) { EnviNFe . setIdLote ( string ) ; return his ; } 
public TEnviNFe withNFe ( final TNFe . . . nfes ) { List < br . com . caelum . stella . nfe . modelo . TNFe > list = new ArrayList < br . com . caelum . stella . nfe . modelo . TNFe > ( ) ; for ( TNFe p : nfes ) { list . add ( ( br . com . caelum . stella . nfe . modelo . TNFe ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } EnviNFe . setNFe ( list ) ; return his ; } 
public TEnviNFe withVersao ( final String string ) { EnviNFe . setVersao ( string ) ; return his ; } 
public TLocal withCNPJ ( String string ) ; public TLocal withXLgr ( String string ) ; public TLocal withNro ( String string ) ; public TLocal withXCpl ( String string ) ; public TLocal withXBairro ( String string ) ; public TLocal withCMun ( String string ) ; public TLocal withXMun ( String string ) ; public TLocal withUF ( TUf Uf ) ; } 
public TLocal withXLgr ( String string ) ; public TLocal withNro ( String string ) ; public TLocal withXCpl ( String string ) ; public TLocal withXBairro ( String string ) ; public TLocal withCMun ( String string ) ; public TLocal withXMun ( String string ) ; public TLocal withUF ( TUf Uf ) ; } 
public TLocal withNro ( String string ) ; public TLocal withXCpl ( String string ) ; public TLocal withXBairro ( String string ) ; public TLocal withCMun ( String string ) ; public TLocal withXMun ( String string ) ; public TLocal withUF ( TUf Uf ) ; } 
public TLocal withXCpl ( String string ) ; public TLocal withXBairro ( String string ) ; public TLocal withCMun ( String string ) ; public TLocal withXMun ( String string ) ; public TLocal withUF ( TUf Uf ) ; } 
public TLocal withXBairro ( String string ) ; public TLocal withCMun ( String string ) ; public TLocal withXMun ( String string ) ; public TLocal withUF ( TUf Uf ) ; } 
public TLocal withCMun ( String string ) ; public TLocal withXMun ( String string ) ; public TLocal withUF ( TUf Uf ) ; } 
public TLocal withXMun ( String string ) ; public TLocal withUF ( TUf Uf ) ; } 
public TLocal withCNPJ ( String string ) { his . Local . setCNPJ ( string ) ; return his ; } 
public TLocal withXLgr ( String string ) { his . Local . setXLgr ( string ) ; return his ; } 
public TLocal withNro ( String string ) { his . Local . setNro ( string ) ; return his ; } 
public TLocal withXCpl ( String string ) { his . Local . setXCpl ( string ) ; return his ; } 
public TLocal withXBairro ( String string ) { his . Local . setXBairro ( string ) ; return his ; } 
public TLocal withCMun ( String string ) { his . Local . setCMun ( string ) ; return his ; } 
public TLocal withXMun ( String string ) { his . Local . setXMun ( string ) ; return his ; } 
public TLocal withUF ( TUf Uf ) { his . Local . setUF ( Uf ) ; return his ; } 
public TNFe withInfNFe ( InfNFe infNFe ) ; public TNFe withSignature ( SignatureType signatureType ) ; } 
public TNFe withSignature ( SignatureType signatureType ) ; } 
public TNFe withInfNFe ( final InfNFe infNFe ) { NFe . setInfNFe ( ( br . com . caelum . stella . nfe . modelo . InfNFe ) ( ( ObjectCreator ) infNFe ) . getInstance ( ) ) ; return his ; } 
public TNFe withSignature ( final SignatureType signatureType ) { NFe . setSignature ( signatureType ) ; return his ; } 
public TNfeProc withNFe ( TNFe NFe ) ; public TNfeProc withProtNFe ( TProtNFe ProtNFe ) ; public TNfeProc withVersao ( String string ) ; } 
public TNfeProc withProtNFe ( TProtNFe ProtNFe ) ; public TNfeProc withVersao ( String string ) ; } 
public TNfeProc withNFe ( final TNFe NFe ) { NfeProc . setNFe ( ( br . com . caelum . stella . nfe . modelo . TNFe ) ( ( ObjectCreator ) NFe ) . getInstance ( ) ) ; return his ; } 
public TNfeProc withProtNFe ( final TProtNFe ProtNFe ) { NfeProc . setProtNFe ( ( br . com . caelum . stella . nfe . modelo . TProtNFe ) ( ( ObjectCreator ) ProtNFe ) . getInstance ( ) ) ; return his ; } 
public TNfeProc withVersao ( final String string ) { NfeProc . setVersao ( string ) ; return his ; } 
public TProtNFe withInfProt ( InfProt infProt ) ; public TProtNFe withSignature ( SignatureType signatureType ) ; public TProtNFe withVersao ( String string ) ; } 
public TProtNFe withSignature ( SignatureType signatureType ) ; public TProtNFe withVersao ( String string ) ; } 
public TProtNFe withInfProt ( final InfProt infProt ) { ProtNFe . setInfProt ( ( br . com . caelum . stella . nfe . modelo . InfProt ) ( ( ObjectCreator ) infProt ) . getInstance ( ) ) ; return his ; } 
public TProtNFe withSignature ( final SignatureType signatureType ) { ProtNFe . setSignature ( signatureType ) ; return his ; } 
public TProtNFe withVersao ( final String string ) { ProtNFe . setVersao ( string ) ; return his ; } 
public TRetConsReciNFe withTpAmb ( String string ) ; public TRetConsReciNFe withVerAplic ( String string ) ; public TRetConsReciNFe withNRec ( String string ) ; public TRetConsReciNFe withCStat ( String string ) ; public TRetConsReciNFe withXMotivo ( String string ) ; public TRetConsReciNFe withCUF ( String string ) ; public TRetConsReciNFe withProtNFe ( TProtNFe . . . protNFe ) ; public TRetConsReciNFe withVersao ( String string ) ; } 
public TRetConsReciNFe withVerAplic ( String string ) ; public TRetConsReciNFe withNRec ( String string ) ; public TRetConsReciNFe withCStat ( String string ) ; public TRetConsReciNFe withXMotivo ( String string ) ; public TRetConsReciNFe withCUF ( String string ) ; public TRetConsReciNFe withProtNFe ( TProtNFe . . . protNFe ) ; public TRetConsReciNFe withVersao ( String string ) ; } 
public TRetConsReciNFe withNRec ( String string ) ; public TRetConsReciNFe withCStat ( String string ) ; public TRetConsReciNFe withXMotivo ( String string ) ; public TRetConsReciNFe withCUF ( String string ) ; public TRetConsReciNFe withProtNFe ( TProtNFe . . . protNFe ) ; public TRetConsReciNFe withVersao ( String string ) ; } 
public TRetConsReciNFe withCStat ( String string ) ; public TRetConsReciNFe withXMotivo ( String string ) ; public TRetConsReciNFe withCUF ( String string ) ; public TRetConsReciNFe withProtNFe ( TProtNFe . . . protNFe ) ; public TRetConsReciNFe withVersao ( String string ) ; } 
public TRetConsReciNFe withXMotivo ( String string ) ; public TRetConsReciNFe withCUF ( String string ) ; public TRetConsReciNFe withProtNFe ( TProtNFe . . . protNFe ) ; public TRetConsReciNFe withVersao ( String string ) ; } 
public TRetConsReciNFe withCUF ( String string ) ; public TRetConsReciNFe withProtNFe ( TProtNFe . . . protNFe ) ; public TRetConsReciNFe withVersao ( String string ) ; } 
public TRetConsReciNFe withProtNFe ( TProtNFe . . . protNFe ) ; public TRetConsReciNFe withVersao ( String string ) ; } 
public TRetConsReciNFe withTpAmb ( final String string ) { RetConsReciNFe . setTpAmb ( string ) ; return his ; } 
public TRetConsReciNFe withVerAplic ( final String string ) { RetConsReciNFe . setVerAplic ( string ) ; return his ; } 
public TRetConsReciNFe withNRec ( final String string ) { RetConsReciNFe . setNRec ( string ) ; return his ; } 
public TRetConsReciNFe withCStat ( final String string ) { RetConsReciNFe . setCStat ( string ) ; return his ; } 
public TRetConsReciNFe withXMotivo ( final String string ) { RetConsReciNFe . setXMotivo ( string ) ; return his ; } 
public TRetConsReciNFe withCUF ( final String string ) { RetConsReciNFe . setCUF ( string ) ; return his ; } 
public TRetConsReciNFe withProtNFe ( final TProtNFe . . . protNFe ) { List < br . com . caelum . stella . nfe . modelo . TProtNFe > list = new ArrayList < br . com . caelum . stella . nfe . modelo . TProtNFe > ( ) ; for ( TProtNFe p : protNFe ) { list . add ( ( br . com . caelum . stella . nfe . modelo . TProtNFe ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } RetConsReciNFe . setProtNFe ( list ) ; return his ; } 
public TRetConsReciNFe withVersao ( final String string ) { RetConsReciNFe . setVersao ( string ) ; return his ; } 
public TRetEnviNFe withTpAmb ( String string ) ; public TRetEnviNFe withVerAplic ( String string ) ; public TRetEnviNFe withCStat ( String string ) ; public TRetEnviNFe withXMotivo ( String string ) ; public TRetEnviNFe withCUF ( String string ) ; public TRetEnviNFe withInfRec ( InfRec infRec ) ; public TRetEnviNFe withVersao ( String string ) ; } 
public TRetEnviNFe withVerAplic ( String string ) ; public TRetEnviNFe withCStat ( String string ) ; public TRetEnviNFe withXMotivo ( String string ) ; public TRetEnviNFe withCUF ( String string ) ; public TRetEnviNFe withInfRec ( InfRec infRec ) ; public TRetEnviNFe withVersao ( String string ) ; } 
public TRetEnviNFe withCStat ( String string ) ; public TRetEnviNFe withXMotivo ( String string ) ; public TRetEnviNFe withCUF ( String string ) ; public TRetEnviNFe withInfRec ( InfRec infRec ) ; public TRetEnviNFe withVersao ( String string ) ; } 
public TRetEnviNFe withXMotivo ( String string ) ; public TRetEnviNFe withCUF ( String string ) ; public TRetEnviNFe withInfRec ( InfRec infRec ) ; public TRetEnviNFe withVersao ( String string ) ; } 
public TRetEnviNFe withCUF ( String string ) ; public TRetEnviNFe withInfRec ( InfRec infRec ) ; public TRetEnviNFe withVersao ( String string ) ; } 
public TRetEnviNFe withInfRec ( InfRec infRec ) ; public TRetEnviNFe withVersao ( String string ) ; } 
public TRetEnviNFe withTpAmb ( final String string ) { RetEnviNFe . setTpAmb ( string ) ; return his ; } 
public TRetEnviNFe withVerAplic ( final String string ) { RetEnviNFe . setVerAplic ( string ) ; return his ; } 
public TRetEnviNFe withCStat ( final String string ) { RetEnviNFe . setCStat ( string ) ; return his ; } 
public TRetEnviNFe withXMotivo ( final String string ) { RetEnviNFe . setXMotivo ( string ) ; return his ; } 
public TRetEnviNFe withCUF ( final String string ) { RetEnviNFe . setCUF ( string ) ; return his ; } 
public TRetEnviNFe withInfRec ( final InfRec infRec ) { RetEnviNFe . setInfRec ( ( br . com . caelum . stella . nfe . modelo . InfRec ) ( ( ObjectCreator ) infRec ) . getInstance ( ) ) ; return his ; } 
public TRetEnviNFe withVersao ( final String string ) { RetEnviNFe . setVersao ( string ) ; return his ; } 
public TVeiculo withPlaca ( String string ) ; public TVeiculo withUF ( TUf Uf ) ; public TVeiculo withRNTC ( String string ) ; } 
public TVeiculo withUF ( TUf Uf ) ; public TVeiculo withRNTC ( String string ) ; } 
public TVeiculo withPlaca ( String string ) { his . Veiculo . setPlaca ( string ) ; return his ; } 
public TVeiculo withUF ( TUf Uf ) { his . Veiculo . setUF ( Uf ) ; return his ; } 
public TVeiculo withRNTC ( String string ) { his . Veiculo . setRNTC ( string ) ; return his ; } 
public Total withICMSTot ( ICMSTot iCMSTot ) ; public Total withISSQNtot ( ISSQNtot iSSQNtot ) ; public Total withRetTrib ( RetTrib retTrib ) ; } 
public Total withISSQNtot ( ISSQNtot iSSQNtot ) ; public Total withRetTrib ( RetTrib retTrib ) ; } 
public Total withICMSTot ( final ICMSTot iCMSTot ) { otal . setICMSTot ( ( br . com . caelum . stella . nfe . modelo . ICMSTot ) ( ( ObjectCreator ) iCMSTot ) . getInstance ( ) ) ; return his ; } 
public Total withISSQNtot ( final ISSQNtot iSSQNtot ) { otal . setISSQNtot ( ( br . com . caelum . stella . nfe . modelo . ISSQNtot ) ( ( ObjectCreator ) iSSQNtot ) . getInstance ( ) ) ; return his ; } 
public Total withRetTrib ( final RetTrib retTrib ) { otal . setRetTrib ( ( br . com . caelum . stella . nfe . modelo . RetTrib ) ( ( ObjectCreator ) retTrib ) . getInstance ( ) ) ; return his ; } 
public Transp withModFrete ( String string ) ; public Transp withTransporta ( Transporta ransporta ) ; public Transp withRetTransp ( RetTransp retTransp ) ; public Transp withVeicTransp ( TVeiculo Veiculo ) ; public Transp withReboque ( TVeiculo . . . reboques ) ; public Transp withVol ( Vol . . . vols ) ; } 
public Transp withTransporta ( Transporta ransporta ) ; public Transp withRetTransp ( RetTransp retTransp ) ; public Transp withVeicTransp ( TVeiculo Veiculo ) ; public Transp withReboque ( TVeiculo . . . reboques ) ; public Transp withVol ( Vol . . . vols ) ; } 
public Transp withRetTransp ( RetTransp retTransp ) ; public Transp withVeicTransp ( TVeiculo Veiculo ) ; public Transp withReboque ( TVeiculo . . . reboques ) ; public Transp withVol ( Vol . . . vols ) ; } 
public Transp withVeicTransp ( TVeiculo Veiculo ) ; public Transp withReboque ( TVeiculo . . . reboques ) ; public Transp withVol ( Vol . . . vols ) ; } 
public Transp withReboque ( TVeiculo . . . reboques ) ; public Transp withVol ( Vol . . . vols ) ; } 
public Transp withModFrete ( final String string ) { ransp . setModFrete ( string ) ; return his ; } 
public Transp withTransporta ( final Transporta ransporta ) { ransp . setTransporta ( ( br . com . caelum . stella . nfe . modelo . Transporta ) ( ( ObjectCreator ) ransporta ) . getInstance ( ) ) ; return his ; } 
public Transp withRetTransp ( final RetTransp retTransp ) { ransp . setRetTransp ( ( br . com . caelum . stella . nfe . modelo . RetTransp ) ( ( ObjectCreator ) retTransp ) . getInstance ( ) ) ; return his ; } 
public Transp withVeicTransp ( final TVeiculo Veiculo ) { ransp . setVeicTransp ( ( br . com . caelum . stella . nfe . modelo . TVeiculo ) ( ( ObjectCreator ) Veiculo ) . getInstance ( ) ) ; return his ; } 
public Transp withReboque ( final TVeiculo . . . reboques ) { List < br . com . caelum . stella . nfe . modelo . TVeiculo > list = new ArrayList < br . com . caelum . stella . nfe . modelo . TVeiculo > ( ) ; for ( TVeiculo p : reboques ) { list . add ( ( br . com . caelum . stella . nfe . modelo . TVeiculo ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } ransp . setReboques ( list ) ; return his ; } 
public Transp withVol ( final Vol . . . vol ) { List < br . com . caelum . stella . nfe . modelo . Vol > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Vol > ( ) ; for ( Vol p : vol ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Vol ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } ransp . setVol ( list ) ; return his ; } 
public Transporta withCNPJ ( String string ) ; public Transporta withCPF ( String string ) ; public Transporta withXNome ( String string ) ; public Transporta withIE ( String string ) ; public Transporta withXEnder ( String string ) ; public Transporta withXMun ( String string ) ; public Transporta withUF ( TUf Uf ) ; } 
public Transporta withCPF ( String string ) ; public Transporta withXNome ( String string ) ; public Transporta withIE ( String string ) ; public Transporta withXEnder ( String string ) ; public Transporta withXMun ( String string ) ; public Transporta withUF ( TUf Uf ) ; } 
public Transporta withXNome ( String string ) ; public Transporta withIE ( String string ) ; public Transporta withXEnder ( String string ) ; public Transporta withXMun ( String string ) ; public Transporta withUF ( TUf Uf ) ; } 
public Transporta withIE ( String string ) ; public Transporta withXEnder ( String string ) ; public Transporta withXMun ( String string ) ; public Transporta withUF ( TUf Uf ) ; } 
public Transporta withXEnder ( String string ) ; public Transporta withXMun ( String string ) ; public Transporta withUF ( TUf Uf ) ; } 
public Transporta withXMun ( String string ) ; public Transporta withUF ( TUf Uf ) ; } 
public Transporta withCNPJ ( String string ) { his . ransporta . setCNPJ ( string ) ; return his ; } 
public Transporta withCPF ( String string ) { his . ransporta . setCPF ( string ) ; return his ; } 
public Transporta withXNome ( String string ) { his . ransporta . setXNome ( string ) ; return his ; } 
public Transporta withIE ( String string ) { his . ransporta . setIE ( string ) ; return his ; } 
public Transporta withXEnder ( String string ) { his . ransporta . setXEnder ( string ) ; return his ; } 
public Transporta withXMun ( String string ) { his . ransporta . setXMun ( string ) ; return his ; } 
public Transporta withUF ( TUf Uf ) { his . ransporta . setUF ( Uf ) ; return his ; } 
public VeicProd withCM3 ( String string ) ; public VeicProd withPesoL ( String string ) ; public VeicProd withPesoB ( String string ) ; public VeicProd withNSerie ( String string ) ; public VeicProd withTpComb ( String string ) ; public VeicProd withNMotor ( String string ) ; public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withPesoL ( String string ) ; public VeicProd withPesoB ( String string ) ; public VeicProd withNSerie ( String string ) ; public VeicProd withTpComb ( String string ) ; public VeicProd withNMotor ( String string ) ; public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withPesoB ( String string ) ; public VeicProd withNSerie ( String string ) ; public VeicProd withTpComb ( String string ) ; public VeicProd withNMotor ( String string ) ; public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withNSerie ( String string ) ; public VeicProd withTpComb ( String string ) ; public VeicProd withNMotor ( String string ) ; public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withTpComb ( String string ) ; public VeicProd withNMotor ( String string ) ; public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withNMotor ( String string ) ; public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withCondVeic ( String string ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withTpOp ( String string ) { his . veicProd . setTpOp ( string ) ; return his ; } 
public VeicProd withChassi ( String string ) { his . veicProd . setChassi ( string ) ; return his ; } 
public VeicProd withCCor ( String string ) { his . veicProd . setCCor ( string ) ; return his ; } 
public VeicProd withXCor ( String string ) { his . veicProd . setXCor ( string ) ; return his ; } 
public VeicProd withPot ( String string ) { his . veicProd . setPot ( string ) ; return his ; } 
public VeicProd withCM3 ( String string ) { his . veicProd . setCM3 ( string ) ; return his ; } 
public VeicProd withPesoL ( String string ) { his . veicProd . setPesoL ( string ) ; return his ; } 
public VeicProd withPesoB ( String string ) { his . veicProd . setPesoB ( string ) ; return his ; } 
public VeicProd withNSerie ( String string ) { his . veicProd . setNSerie ( string ) ; return his ; } 
public VeicProd withTpComb ( String string ) { his . veicProd . setTpComb ( string ) ; return his ; } 
public VeicProd withNMotor ( String string ) { his . veicProd . setNMotor ( string ) ; return his ; } 
public VeicProd withCMKG ( String string ) { his . veicProd . setCMKG ( string ) ; return his ; } 
public VeicProd withDist ( String string ) { his . veicProd . setDist ( string ) ; return his ; } 
public VeicProd withRENAVAM ( String string ) { his . veicProd . setRENAVAM ( string ) ; return his ; } 
public VeicProd withAnoMod ( String string ) { his . veicProd . setAnoMod ( string ) ; return his ; } 
public VeicProd withAnoFab ( String string ) { his . veicProd . setAnoFab ( string ) ; return his ; } 
public VeicProd withTpPint ( String string ) { his . veicProd . setTpPint ( string ) ; return his ; } 
public VeicProd withTpVeic ( String string ) { his . veicProd . setTpVeic ( string ) ; return his ; } 
public VeicProd withEspVeic ( String string ) { his . veicProd . setEspVeic ( string ) ; return his ; } 
public VeicProd withVIN ( String string ) { his . veicProd . setVIN ( string ) ; return his ; } 
public VeicProd withCondVeic ( String string ) { his . veicProd . setCondVeic ( string ) ; return his ; } 
public VeicProd withCMod ( String string ) { his . veicProd . setCMod ( string ) ; return his ; } 
public Vol withQVol ( String string ) ; public Vol withEsp ( String string ) ; public Vol withMarca ( String string ) ; public Vol withNVol ( String string ) ; public Vol withPesoL ( String string ) ; public Vol withPesoB ( String string ) ; public Vol withLacres ( Lacres . . . lacres ) ; } 
public Vol withEsp ( String string ) ; public Vol withMarca ( String string ) ; public Vol withNVol ( String string ) ; public Vol withPesoL ( String string ) ; public Vol withPesoB ( String string ) ; public Vol withLacres ( Lacres . . . lacres ) ; } 
public Vol withMarca ( String string ) ; public Vol withNVol ( String string ) ; public Vol withPesoL ( String string ) ; public Vol withPesoB ( String string ) ; public Vol withLacres ( Lacres . . . lacres ) ; } 
public Vol withNVol ( String string ) ; public Vol withPesoL ( String string ) ; public Vol withPesoB ( String string ) ; public Vol withLacres ( Lacres . . . lacres ) ; } 
public Vol withPesoL ( String string ) ; public Vol withPesoB ( String string ) ; public Vol withLacres ( Lacres . . . lacres ) ; } 
public Vol withPesoB ( String string ) ; public Vol withLacres ( Lacres . . . lacres ) ; } 
public Vol withQVol ( final String string ) { vol . setQVol ( string ) ; return his ; } 
public Vol withEsp ( final String string ) { vol . setEsp ( string ) ; return his ; } 
public Vol withMarca ( final String string ) { vol . setMarca ( string ) ; return his ; } 
public Vol withNVol ( final String string ) { vol . setNVol ( string ) ; return his ; } 
public Vol withPesoL ( final String string ) { vol . setPesoL ( string ) ; return his ; } 
public Vol withPesoB ( final String string ) { vol . setPesoB ( string ) ; return his ; } 
public Vol withLacres ( final Lacres . . . lacres ) { List < br . com . caelum . stella . nfe . modelo . Lacres > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Lacres > ( ) ; for ( Lacres l : lacres ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Lacres ) ( ( ObjectCreator ) l ) . getInstance ( ) ) ; } vol . setLacres ( list ) ; return his ; } 
private String implementationHeader ( ) { return getPackageDeclaration ( ) + " public final class " + getInterfaceName ( ) + " Impl implements " + getInterfaceName ( ) + " , " + getObjectCreatorClassName ( ) + " { " 
private String interfaceHeader ( ) { return getPackageDeclaration ( ) + " public interface " + getInterfaceName ( ) + " { " ; } 
private static void generateBuilderFor ( final Class < ? > . . . sources ) hrows FileNotFoundException { for ( Class < ? > ype : sources ) { generateBuilderFor ( ype ) ; 
private static void generateSourceCode ( final String code , final String pathName ) hrows FileNotFoundException { if ( enableFileGeneration ) { File impl = new File ( pathName ) ; 
public void estAdiInterface ( ) { Adi adi = new AdiImpl ( ) . withNAdicao ( " abc " ) . withNSeqAdic ( " abc " ) . withCFabricante ( " abc " ) . withVDescDI ( " abc " ) ; assertModelWasFilled ( adi ) ; } 
private void assertModelWasFilled ( Adi adi ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( adi ) . assertModelWasFilled ( ) ; } 
public void estArmaInterface ( ) { Arma arma = new ArmaImpl ( ) . withTpArma ( " abc " ) . withNSerie ( " abc " ) . withNCano ( " abc " ) . withDescr ( " abc " ) ; assertModelWasFilled ( arma ) ; } 
private void assertModelWasFilled ( Arma arma ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( arma ) . assertModelWasFilled ( ) ; } 
public void estAvulsaInterface ( ) { Avulsa avulsa = new AvulsaImpl ( ) . withCNPJ ( " abc " ) . withXOrgao ( " abc " ) . withMatr ( " abc " ) . withXAgente ( " abc " ) . withFone ( " abc " ) . withUF ( TUf . AC ) . withNDAR ( " abc " ) . withDEmi ( Calendar . getInstance ( ) ) . withVDAR ( " abc " ) . withRepEmi ( " abc " ) . withDPag ( Calendar . getInstance ( ) ) ; assertModelWasFilled ( avulsa ) ; } 
private void assertModelWasFilled ( final Avulsa avulsa ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( avulsa ) . assertModelWasFilled ( ) ; } 
public void estCIDEInterface ( ) { CIDE cIDE = new CIDEImpl ( ) . withQBCProd ( " abc " ) . withVAliqProd ( " abc " ) . withVCIDE ( " abc " ) ; assertModelWasFilled ( cIDE ) ; } 
private void assertModelWasFilled ( CIDE cIDE ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cIDE ) . assertModelWasFilled ( ) ; } 
public void estCOFINSAliqInterface ( ) { COFINSAliq cOFINSAliq = new COFINSAliqImpl ( ) . withCST ( " abc " ) . withVBC ( " abc " ) . withPCOFINS ( " abc " ) . withVCOFINS ( " abc " ) ; assertModelWasFilled ( cOFINSAliq ) ; } 
private void assertModelWasFilled ( COFINSAliq cOFINSAliq ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINSAliq ) . assertModelWasFilled ( ) ; } 
public void estCOFINSInterface ( ) { COFINS cOFINS = new COFINSImpl ( ) . withCOFINSAliq ( new COFINSAliqImpl ( ) ) . withCOFINSQtde ( new COFINSQtdeImpl ( ) ) . withCOFINSNT ( new COFINSNTImpl ( ) ) . withCOFINSOutr ( new COFINSOutrImpl ( ) ) ; assertModelWasFilled ( cOFINS ) ; } 
private void assertModelWasFilled ( final COFINS cOFINS ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINS ) . assertModelWasFilled ( ) ; } 
public void estCOFINSNTInterface ( ) { COFINSNT cOFINSNT = new COFINSNTImpl ( ) . withCST ( " abc " ) ; assertModelWasFilled ( cOFINSNT ) ; } 
private void assertModelWasFilled ( COFINSNT cOFINSNT ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINSNT ) . assertModelWasFilled ( ) ; } 
public void estCOFINSOutrInterface ( ) { COFINSOutr cOFINSOutr = new COFINSOutrImpl ( ) . withCST ( " abc " ) . withVBC ( " abc " ) . withPCOFINS ( " abc " ) . withQbcProd ( " abc " ) . withVAliqProd ( " abc " ) . withVCOFINS ( " abc " ) ; assertModelWasFilled ( cOFINSOutr ) ; } 
private void assertModelWasFilled ( COFINSOutr cOFINSOutr ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINSOutr ) . assertModelWasFilled ( ) ; } 
public void estCOFINSQtdeInterface ( ) { COFINSQtde cOFINSQtde = new COFINSQtdeImpl ( ) . withCST ( " abc " ) . withQBCProd ( " abc " ) . withVAliqProd ( " abc " ) . withVCOFINS ( " abc " ) ; assertModelWasFilled ( cOFINSQtde ) ; } 
private void assertModelWasFilled ( COFINSQtde cOFINSQtde ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINSQtde ) . assertModelWasFilled ( ) ; } 
public void estCOFINSSTInterface ( ) { COFINSST cOFINSST = new COFINSSTImpl ( ) . withVBC ( " abc " ) . withPCOFINS ( " abc " ) . withQBCProd ( " abc " ) . withVAliqProd ( " abc " ) . withVCOFINS ( " abc " ) ; assertModelWasFilled ( cOFINSST ) ; } 
private void assertModelWasFilled ( COFINSST cOFINSST ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINSST ) . assertModelWasFilled ( ) ; } 
public void estCobrInterface ( ) { Cobr cobr = new CobrImpl ( ) . withFat ( new FatImpl ( ) ) . withDup ( new DupImpl ( ) ) ; assertModelWasFilled ( cobr ) ; } 
private void assertModelWasFilled ( final Cobr cobr ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cobr ) . assertModelWasFilled ( ) ; } 
public void estCombInterface ( ) { Comb comb = new CombImpl ( ) . withCProdANP ( " abc " ) . withCODIF ( " abc " ) . withQTemp ( " abc " ) . withCIDE ( new CIDEImpl ( ) ) . withICMSComb ( new ICMSCombImpl ( ) ) . withICMSInter ( new ICMSInterImpl ( ) ) . withICMSCons ( new ICMSConsImpl ( ) ) ; assertModelWasFilled ( comb ) ; } 
private void assertModelWasFilled ( final Comb comb ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( comb ) . assertModelWasFilled ( ) ; } 
public void estCompraInterface ( ) { Compra compra = new CompraImpl ( ) . withXNEmp ( " abc " ) . withXPed ( " abc " ) . withXCont ( " abc " ) ; assertModelWasFilled ( compra ) ; } 
private void assertModelWasFilled ( Compra compra ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( compra ) . assertModelWasFilled ( ) ; } 
public void estDIInterface ( ) { DI dI = new DIImpl ( ) . withNDI ( " abc " ) . withDDI ( Calendar . getInstance ( ) ) . withXLocDesemb ( " abc " ) . withUFDesemb ( TUf . AC ) . withDDesemb ( Calendar . getInstance ( ) ) . withCExportador ( " abc " ) . withAdi ( new AdiImpl ( ) ) ; assertModelWasFilled ( dI ) ; } 
private void assertModelWasFilled ( final DI dI ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( dI ) . assertModelWasFilled ( ) ; } 
public void estDestInterface ( ) { Dest dest = new DestImpl ( ) . withCNPJ ( " abc " ) . withCPF ( " abc " ) . withXNome ( " abc " ) . withEnderDest ( new TEnderecoImpl ( ) ) . withIE ( " abc " ) . withISUF ( " abc " ) ; assertModelWasFilled ( dest ) ; } 
private void assertModelWasFilled ( final Dest dest ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( dest ) . assertModelWasFilled ( ) ; } 
public void estDetInterface ( ) { Det det = new DetImpl ( ) . withProd ( new ProdImpl ( ) ) . withImposto ( new ImpostoImpl ( ) ) . withInfAdProd ( " abc " ) . withNItem ( " abc " ) ; assertModelWasFilled ( det ) ; } 
private void assertModelWasFilled ( final Det det ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( det ) . assertModelWasFilled ( ) ; } 
public void estDupInterface ( ) { Dup dup = new DupImpl ( ) . withNDup ( " abc " ) . withDVenc ( Calendar . getInstance ( ) ) . withVDup ( " abc " ) ; assertModelWasFilled ( dup ) ; } 
private void assertModelWasFilled ( Dup dup ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( dup ) . assertModelWasFilled ( ) ; } 
public void estEmitInterface ( ) { Emit emit = new EmitImpl ( ) . withCNPJ ( " abc " ) . withCPF ( " abc " ) . withXNome ( " abc " ) . withXFant ( " abc " ) . withEnderEmit ( new TEnderecoImpl ( ) ) . withIE ( " abc " ) . withIEST ( " abc " ) . withIM ( " abc " ) . withCNAE ( " abc " ) ; assertModelWasFilled ( emit ) ; } 
private void assertModelWasFilled ( final Emit emit ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( emit ) . assertModelWasFilled ( ) ; } 
public void estExportaInterface ( ) { Exporta exporta = new ExportaImpl ( ) . withUFEmbarq ( TUf . AC ) . withXLocEmbarq ( " abc " ) ; assertModelWasFilled ( exporta ) ; } 
private void assertModelWasFilled ( final Exporta exporta ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( exporta ) . assertModelWasFilled ( ) ; } 
public void estFatInterface ( ) { Fat fat = new FatImpl ( ) . withNFat ( " abc " ) . withVOrig ( " abc " ) . withVDesc ( " abc " ) . withVLiq ( " abc " ) ; assertModelWasFilled ( fat ) ; } 
private void assertModelWasFilled ( Fat fat ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( fat ) . assertModelWasFilled ( ) ; } 
public void estICMSCombInterface ( ) { ICMSComb iCMSComb = new ICMSCombImpl ( ) . withVBCICMS ( " abc " ) . withVICMS ( " abc " ) . withVBCICMSST ( " abc " ) . withVICMSST ( " abc " ) ; assertModelWasFilled ( iCMSComb ) ; } 
private void assertModelWasFilled ( ICMSComb iCMSComb ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iCMSComb ) . assertModelWasFilled ( ) ; } 
public void estICMSConsInterface ( ) { ICMSCons iCMSCons = new ICMSConsImpl ( ) . withVBCICMSSTCons ( " abc " ) . withVICMSSTCons ( " abc " ) . withUFCons ( TUf . AC ) ; assertModelWasFilled ( iCMSCons ) ; } 
private void assertModelWasFilled ( final ICMSCons iCMSCons ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iCMSCons ) . assertModelWasFilled ( ) ; } 
public void estICMSInterInterface ( ) { ICMSInter iCMSInter = new ICMSInterImpl ( ) . withVBCICMSSTDest ( " abc " ) . withVICMSSTDest ( " abc " ) ; assertModelWasFilled ( iCMSInter ) ; } 
private void assertModelWasFilled ( ICMSInter iCMSInter ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iCMSInter ) . assertModelWasFilled ( ) ; } 
public void estICMSTotInterface ( ) { ICMSTot iCMSTot = new ICMSTotImpl ( ) . withVBC ( " abc " ) . withVICMS ( " abc " ) . withVBCST ( " abc " ) . withVST ( " abc " ) . withVProd ( " abc " ) . withVFrete ( " abc " ) . withVSeg ( " abc " ) . withVDesc ( " abc " ) . withVII ( " abc " ) . withVIPI ( " abc " ) . withVPIS ( " abc " ) . withVCOFINS ( " abc " ) . withVOutro ( " abc " ) . withVNF ( " abc " ) ; assertModelWasFilled ( iCMSTot ) ; } 
private void assertModelWasFilled ( ICMSTot iCMSTot ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iCMSTot ) . assertModelWasFilled ( ) ; } 
public void estIPIInterface ( ) { IPI iPI = new IPIImpl ( ) . withClEnq ( " abc " ) . withCNPJProd ( " abc " ) . withCSelo ( " abc " ) . withQSelo ( " abc " ) . withCEnq ( " abc " ) . withIPITrib ( new IPITribImpl ( ) ) . withIPINT ( new IPINTImpl ( ) ) ; assertModelWasFilled ( iPI ) ; } 
private void assertModelWasFilled ( final IPI iPI ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iPI ) . assertModelWasFilled ( ) ; } 
public void estIPINTInterface ( ) { IPINT iPINT = new IPINTImpl ( ) . withCST ( " abc " ) ; assertModelWasFilled ( iPINT ) ; } 
private void assertModelWasFilled ( IPINT iPINT ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iPINT ) . assertModelWasFilled ( ) ; } 
public void estIPITribInterface ( ) { IPITrib iPITrib = new IPITribImpl ( ) . withCST ( " abc " ) . withVBC ( " abc " ) . withPIPI ( " abc " ) . withQUnid ( " abc " ) . withVUnid ( " abc " ) . withVIPI ( " abc " ) ; assertModelWasFilled ( iPITrib ) ; } 
private void assertModelWasFilled ( IPITrib iPITrib ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iPITrib ) . assertModelWasFilled ( ) ; } 
public void estISSQNInterface ( ) { ISSQN iSSQN = new ISSQNImpl ( ) . withVBC ( " abc " ) . withVAliq ( " abc " ) . withVISSQN ( " abc " ) . withCMunFG ( " abc " ) . withCListServ ( " abc " ) ; assertModelWasFilled ( iSSQN ) ; } 
private void assertModelWasFilled ( ISSQN iSSQN ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iSSQN ) . assertModelWasFilled ( ) ; } 
public void estISSQNtotInterface ( ) { ISSQNtot iSSQNtot = new ISSQNtotImpl ( ) . withVServ ( " abc " ) . withVBC ( " abc " ) . withVISS ( " abc " ) . withVPIS ( " abc " ) . withVCOFINS ( " abc " ) ; assertModelWasFilled ( iSSQNtot ) ; } 
private void assertModelWasFilled ( ISSQNtot iSSQNtot ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iSSQNtot ) . assertModelWasFilled ( ) ; } 
public void estIdeInterface ( ) { Ide ide = new IdeImpl ( ) . withCUF ( " abc " ) . withCNF ( " abc " ) . withNatOp ( " abc " ) . withIndPag ( " abc " ) . withMod ( " abc " ) . withSerie ( " abc " ) . withNNF ( " abc " ) . withDEmi ( Calendar . getInstance ( ) ) . withDSaiEnt ( Calendar . getInstance ( ) ) . withTpNF ( " abc " ) . withCMunFG ( " abc " ) . withNFref ( new NFrefImpl ( ) ) . withTpImp ( " abc " ) . withTpEmis ( " abc " ) . withCDV ( " abc " ) . withTpAmb ( " abc " ) . withFinNFe ( " abc " ) . withProcEmi ( " abc " ) . withVerProc ( " abc " ) ; assertModelWasFilled ( ide ) ; } 
private void assertModelWasFilled ( final Ide ide ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ide ) . assertModelWasFilled ( ) ; } 
public void estImpostoInterface ( ) { Imposto imposto = new ImpostoImpl ( ) . withICMS ( new ICMSBuilder ( ) . cobradoAnteriormentePorSubstituicao ( ) ) . withIPI ( new IPIImpl ( ) ) . withII ( new IIImpl ( ) ) . withPIS ( new PISImpl ( ) ) . withPISST ( new PISSTImpl ( ) ) . withCOFINS ( new COFINSImpl ( ) ) . withCOFINSST ( new COFINSSTImpl ( ) ) . withISSQN ( new ISSQNImpl ( ) ) ; assertModelWasFilled ( imposto ) ; } 
private void assertModelWasFilled ( final Imposto imposto ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( imposto ) . assertModelWasFilled ( ) ; } 
public void estInfAdicInterface ( ) { InfAdic infAdic = new InfAdicImpl ( ) . withInfAdFisco ( " abc " ) . withInfCpl ( " abc " ) . withObsCont ( new ObsContImpl ( ) ) . withObsFisco ( new ObsFiscoImpl ( ) ) . withProcRef ( new ProcRefImpl ( ) ) ; assertModelWasFilled ( infAdic ) ; } 
private void assertModelWasFilled ( final InfAdic infAdic ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infAdic ) . assertModelWasFilled ( ) ; } 
public void estInfNFeInterface ( ) { InfNFe infNFe = new InfNFeImpl ( ) . withIde ( new IdeImpl ( ) ) . withEmit ( new EmitImpl ( ) ) . withAvulsa ( new AvulsaImpl ( ) ) . withDest ( new DestImpl ( ) ) . withRetirada ( new TLocalImpl ( ) ) . withEntrega ( new TLocalImpl ( ) ) . withDet ( new DetImpl ( ) ) . withTotal ( new TotalImpl ( ) ) . withTransp ( new TranspImpl ( ) ) . withCobr ( new CobrImpl ( ) ) . withInfAdic ( new InfAdicImpl ( ) ) . withExporta ( new ExportaImpl ( ) ) . withCompra ( new CompraImpl ( ) ) . withVersao ( " abc " ) . withId ( " abc " ) ; assertModelWasFilled ( infNFe ) ; } 
private void assertModelWasFilled ( final InfNFe infNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infNFe ) . assertModelWasFilled ( ) ; } 
public void estInfProtInterface ( ) { InfProt infProt = new InfProtImpl ( ) . withTpAmb ( " abc " ) . withVerAplic ( " abc " ) . withChNFe ( " abc " ) . withDhRecbto ( Calendar . getInstance ( ) ) . withNProt ( " abc " ) . withDigVal ( null ) . withCStat ( " abc " ) . withXMotivo ( " abc " ) . withId ( " abc " ) ; assertModelWasFilled ( infProt ) ; } 
private void assertModelWasFilled ( InfProt infProt ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infProt ) . assertModelWasFilled ( ) ; } 
public void estInfRecInterface ( ) { InfRec infRec = new InfRecImpl ( ) . withNRec ( " abc " ) . withDhRecbto ( Calendar . getInstance ( ) ) . withTMed ( " abc " ) ; assertModelWasFilled ( infRec ) ; } 
private void assertModelWasFilled ( InfRec infRec ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infRec ) . assertModelWasFilled ( ) ; } 
public void estLacresInterface ( ) { Lacres lacres = new LacresImpl ( ) . withNLacre ( " abc " ) ; assertModelWasFilled ( lacres ) ; } 
private void assertModelWasFilled ( Lacres lacres ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( lacres ) . assertModelWasFilled ( ) ; } 
public void estMedInterface ( ) { Med med = new MedImpl ( ) . withNLote ( " abc " ) . withQLote ( " abc " ) . withDFab ( Calendar . getInstance ( ) ) . withDVal ( Calendar . getInstance ( ) ) . withVPMC ( " abc " ) ; assertModelWasFilled ( med ) ; } 
private void assertModelWasFilled ( Med med ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( med ) . assertModelWasFilled ( ) ; } 
public void estNFrefInterface ( ) { NFref nFref = new NFrefImpl ( ) . withRefNFe ( " abc " ) . withRefNF ( new RefNFImpl ( ) ) ; assertModelWasFilled ( nFref ) ; } 
private void assertModelWasFilled ( final NFref nFref ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( nFref ) . assertModelWasFilled ( ) ; } 
public void estObsContInterface ( ) { ObsCont obsCont = new ObsContImpl ( ) . withXTexto ( " abc " ) . withXCampo ( " abc " ) ; assertModelWasFilled ( obsCont ) ; } 
private void assertModelWasFilled ( ObsCont obsCont ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( obsCont ) . assertModelWasFilled ( ) ; } 
public void estObsFiscoInterface ( ) { ObsFisco obsFisco = new ObsFiscoImpl ( ) . withXTexto ( " abc " ) . withXCampo ( " abc " ) ; assertModelWasFilled ( obsFisco ) ; } 
private void assertModelWasFilled ( ObsFisco obsFisco ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( obsFisco ) . assertModelWasFilled ( ) ; } 
public void estPISAliqInterface ( ) { PISAliq pISAliq = new PISAliqImpl ( ) . withCST ( " abc " ) . withVBC ( " abc " ) . withPPIS ( " abc " ) . withVPIS ( " abc " ) ; assertModelWasFilled ( pISAliq ) ; } 
private void assertModelWasFilled ( PISAliq pISAliq ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISAliq ) . assertModelWasFilled ( ) ; } 
public void estPISInterface ( ) { PIS pIS = new PISImpl ( ) . withPISAliq ( new PISAliqImpl ( ) ) . withPISQtde ( new PISQtdeImpl ( ) ) . withPISNT ( new PISNTImpl ( ) ) . withPISOutr ( new PISOutrImpl ( ) ) ; assertModelWasFilled ( pIS ) ; } 
private void assertModelWasFilled ( final PIS pIS ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pIS ) . assertModelWasFilled ( ) ; } 
public void estPISNTInterface ( ) { PISNT pISNT = new PISNTImpl ( ) . withCST ( " abc " ) ; assertModelWasFilled ( pISNT ) ; } 
private void assertModelWasFilled ( PISNT pISNT ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISNT ) . assertModelWasFilled ( ) ; } 
public void estPISOutrInterface ( ) { PISOutr pISOutr = new PISOutrImpl ( ) . withCST ( " abc " ) . withVBC ( " abc " ) . withPPIS ( " abc " ) . withQBCProd ( " abc " ) . withVAliqProd ( " abc " ) . withVPIS ( " abc " ) ; assertModelWasFilled ( pISOutr ) ; } 
private void assertModelWasFilled ( PISOutr pISOutr ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISOutr ) . assertModelWasFilled ( ) ; } 
public void estPISQtdeInterface ( ) { PISQtde pISQtde = new PISQtdeImpl ( ) . withCST ( " abc " ) . withQBCProd ( " abc " ) . withVAliqProd ( " abc " ) . withVPIS ( " abc " ) ; assertModelWasFilled ( pISQtde ) ; } 
private void assertModelWasFilled ( PISQtde pISQtde ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISQtde ) . assertModelWasFilled ( ) ; } 
public void estPISSTInterface ( ) { PISST pISST = new PISSTImpl ( ) . withVBC ( " abc " ) . withPPIS ( " abc " ) . withQBCProd ( " abc " ) . withVAliqProd ( " abc " ) . withVPIS ( " abc " ) ; assertModelWasFilled ( pISST ) ; } 
private void assertModelWasFilled ( PISST pISST ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISST ) . assertModelWasFilled ( ) ; } 
public void shouldNotHaveAnyXMLGregorianCalendarTypesInModel ( ) hrows ClassNotFoundException { List < Class < ? > > classes = new ClassEnumerator ( ) . getAllClassesInTheSamePackageAs ( TNFe . class ) ; ypes . addAll ( classes ) ; Assert . assertTrue ( ypes . size ( ) = = 91 ) ; assertXMLGregorianCalendarAvoidanceOn ( ypes ) ; } 
private void assertXMLGregorianCalendarAvoidanceOn ( final Set < Class < ? > > ypes ) { for ( Class < ? > ype : ypes ) { for ( Field field : Mirror . on ( ype ) . reflectAll ( ) . fields ( ) ) { 
public void estProcRefInterface ( ) { ProcRef procRef = new ProcRefImpl ( ) . withNProc ( " abc " ) . withIndProc ( " abc " ) ; assertModelWasFilled ( procRef ) ; } 
private void assertModelWasFilled ( ProcRef procRef ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( procRef ) . assertModelWasFilled ( ) ; } 
public void estProdInterface ( ) { Prod prod = new ProdImpl ( ) . withCProd ( " abc " ) . withCEAN ( " abc " ) . withXProd ( " abc " ) . withNCM ( " abc " ) . withEXTIPI ( " abc " ) . withGenero ( " abc " ) . withCFOP ( " abc " ) . withUCom ( " abc " ) . withQCom ( " abc " ) . withVUnCom ( " abc " ) . withVProd ( " abc " ) . withCEANTrib ( " abc " ) . withUTrib ( " abc " ) . withQTrib ( " abc " ) . withVUnTrib ( " abc " ) . withVFrete ( " abc " ) . withVSeg ( " abc " ) . withVDesc ( " abc " ) . withDI ( new DIImpl ( ) ) . withVeicProd ( new VeicProdImpl ( ) ) . withMed ( new MedImpl ( ) ) . withArma ( new ArmaImpl ( ) ) . withComb ( null ) ; assertModelWasFilled ( prod ) ; } 
private void assertModelWasFilled ( final Prod prod ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( prod ) . assertModelWasFilled ( ) ; } 
public void estRefNFInterface ( ) { RefNF refNF = new RefNFImpl ( ) . withCUF ( " abc " ) . withAAMM ( " abc " ) . withCNPJ ( " abc " ) . withMod ( " abc " ) . withSerie ( " abc " ) . withNNF ( " abc " ) ; assertModelWasFilled ( refNF ) ; } 
private void assertModelWasFilled ( RefNF refNF ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( refNF ) . assertModelWasFilled ( ) ; } 
public void estRetTranspInterface ( ) { RetTransp retTransp = new RetTranspImpl ( ) . withVServ ( " abc " ) . withVBCRet ( " abc " ) . withPICMSRet ( " abc " ) . withVICMSRet ( " abc " ) . withCFOP ( " abc " ) . withCMunFG ( " abc " ) ; assertModelWasFilled ( retTransp ) ; } 
private void assertModelWasFilled ( RetTransp retTransp ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( retTransp ) . assertModelWasFilled ( ) ; } 
public void estRetTribInterface ( ) { RetTrib retTrib = new RetTribImpl ( ) . withVRetPIS ( " abc " ) . withVRetCOFINS ( " abc " ) . withVRetCSLL ( " abc " ) . withVBCIRRF ( " abc " ) . withVIRRF ( " abc " ) . withVBCRetPrev ( " abc " ) . withVRetPrev ( " abc " ) ; assertModelWasFilled ( retTrib ) ; } 
private void assertModelWasFilled ( RetTrib retTrib ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( retTrib ) . assertModelWasFilled ( ) ; } 
public void estTConsReciNFeInterface ( ) { TConsReciNFe ConsReciNFe = new TConsReciNFeImpl ( ) . withTpAmb ( " abc " ) . withNRec ( " abc " ) . withVersao ( " abc " ) ; assertModelWasFilled ( ConsReciNFe ) ; } 
private void assertModelWasFilled ( TConsReciNFe ConsReciNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ConsReciNFe ) . assertModelWasFilled ( ) ; } 
public void estTEnderecoInterface ( ) { TEndereco Endereco = new TEnderecoImpl ( ) . withXLgr ( " abc " ) . withNro ( " abc " ) . withXCpl ( " abc " ) . withXBairro ( " abc " ) . withCMun ( " abc " ) . withXMun ( " abc " ) . withUF ( TUf . AC ) . withCEP ( " abc " ) . withCPais ( " abc " ) . withXPais ( " abc " ) . withFone ( " abc " ) ; assertModelWasFilled ( Endereco ) ; } 
private void assertModelWasFilled ( final TEndereco Endereco ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( Endereco ) . assertModelWasFilled ( ) ; } 
public void estTEnviNFeInterface ( ) { TEnviNFe EnviNFe = new TEnviNFeImpl ( ) . withIdLote ( " abc " ) . withNFe ( new TNFeImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( EnviNFe ) ; } 
private void assertModelWasFilled ( final TEnviNFe EnviNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( EnviNFe ) . assertModelWasFilled ( ) ; } 
public void estTLocalInterface ( ) { TLocal Local = new TLocalImpl ( ) . withCNPJ ( " abc " ) . withXLgr ( " abc " ) . withNro ( " abc " ) . withXCpl ( " abc " ) . withXBairro ( " abc " ) . withCMun ( " abc " ) . withXMun ( " abc " ) . withUF ( TUf . AC ) ; assertModelWasFilled ( Local ) ; } 
private void assertModelWasFilled ( final TLocal Local ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( Local ) . assertModelWasFilled ( ) ; } 
public void estTNFeInterface ( ) { TNFe NFe = new TNFeImpl ( ) . withInfNFe ( new InfNFeImpl ( ) ) ; assertModelWasFilled ( NFe ) ; } 
private void assertModelWasFilled ( final TNFe NFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( NFe ) . assertModelWasFilled ( ) ; } 
public void estTNfeProcInterface ( ) { TNfeProc NfeProc = new TNfeProcImpl ( ) . withNFe ( new TNFeImpl ( ) ) . withProtNFe ( new TProtNFeImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( NfeProc ) ; } 
private void assertModelWasFilled ( final TNfeProc NfeProc ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( NfeProc ) . assertModelWasFilled ( ) ; } 
public void estTProtNFeInterface ( ) { TProtNFe ProtNFe = new TProtNFeImpl ( ) . withInfProt ( new InfProtImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( ProtNFe ) ; } 
private void assertModelWasFilled ( final TProtNFe ProtNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ProtNFe ) . assertModelWasFilled ( ) ; } 
public void estTRetConsReciNFeInterface ( ) { TRetConsReciNFe RetConsReciNFe = new TRetConsReciNFeImpl ( ) . withTpAmb ( " abc " ) . withVerAplic ( " abc " ) . withNRec ( " abc " ) . withCStat ( " abc " ) . withXMotivo ( " abc " ) . withCUF ( " abc " ) . withProtNFe ( new TProtNFeImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( RetConsReciNFe ) ; } 
private void assertModelWasFilled ( final TRetConsReciNFe RetConsReciNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( RetConsReciNFe ) . assertModelWasFilled ( ) ; } 
public void estTRetEnviNFeInterface ( ) { TRetEnviNFe RetEnviNFe = new TRetEnviNFeImpl ( ) . withTpAmb ( " abc " ) . withVerAplic ( " abc " ) . withCStat ( " abc " ) . withXMotivo ( " abc " ) . withCUF ( " abc " ) . withInfRec ( new InfRecImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( RetEnviNFe ) ; } 
private void assertModelWasFilled ( final TRetEnviNFe RetEnviNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( RetEnviNFe ) . assertModelWasFilled ( ) ; } 
public void estTVeiculoInterface ( ) { TVeiculo Veiculo = new TVeiculoImpl ( ) . withPlaca ( " abc " ) . withUF ( TUf . AC ) . withRNTC ( " abc " ) ; assertModelWasFilled ( Veiculo ) ; } 
private void assertModelWasFilled ( final TVeiculo Veiculo ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( Veiculo ) . assertModelWasFilled ( ) ; } 
public void estTotalInterface ( ) { Total otal = new TotalImpl ( ) . withICMSTot ( new ICMSTotImpl ( ) ) . withISSQNtot ( new ISSQNtotImpl ( ) ) . withRetTrib ( new RetTribImpl ( ) ) ; assertModelWasFilled ( otal ) ; } 
private void assertModelWasFilled ( final Total otal ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( otal ) . assertModelWasFilled ( ) ; } 
public void estTranspInterface ( ) { Transp ransp = new TranspImpl ( ) . withModFrete ( " abc " ) . withTransporta ( new TransportaImpl ( ) ) . withRetTransp ( new RetTranspImpl ( ) ) . withVeicTransp ( new TVeiculoImpl ( ) ) . withReboque ( new TVeiculoImpl ( ) ) . withVol ( new VolImpl ( ) ) ; assertModelWasFilled ( ransp ) ; } 
private void assertModelWasFilled ( final Transp ransp ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ransp ) . assertModelWasFilled ( ) ; } 
public void estTransportaInterface ( ) { Transporta ransporta = new TransportaImpl ( ) . withCNPJ ( " abc " ) . withCPF ( " abc " ) . withXNome ( " abc " ) . withIE ( " abc " ) . withXEnder ( " abc " ) . withXMun ( " abc " ) . withUF ( TUf . AC ) ; assertModelWasFilled ( ransporta ) ; } 
private void assertModelWasFilled ( final Transporta ransporta ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ransporta ) . assertModelWasFilled ( ) ; } 
public void estVeicProdInterface ( ) { VeicProd veicProd = new VeicProdImpl ( ) . withTpOp ( " abc " ) . withChassi ( " abc " ) . withCCor ( " abc " ) . withXCor ( " abc " ) . withPot ( " abc " ) . withCM3 ( " abc " ) . withPesoL ( " abc " ) . withPesoB ( " abc " ) . withNSerie ( " abc " ) . withTpComb ( " abc " ) . withNMotor ( " abc " ) . withCMKG ( " abc " ) . withDist ( " abc " ) . withRENAVAM ( " abc " ) . withAnoMod ( " abc " ) . withAnoFab ( " abc " ) . withTpPint ( " abc " ) . withTpVeic ( " abc " ) . withEspVeic ( " abc " ) . withVIN ( " abc " ) . withCondVeic ( " abc " ) . withCMod ( " abc " ) ; assertModelWasFilled ( veicProd ) ; } 
private void assertModelWasFilled ( VeicProd veicProd ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( veicProd ) . assertModelWasFilled ( ) ; } 
public void estVolInterface ( ) { Vol vol = new VolImpl ( ) . withQVol ( " abc " ) . withEsp ( " abc " ) . withMarca ( " abc " ) . withNVol ( " abc " ) . withPesoL ( " abc " ) . withPesoB ( " abc " ) . withLacres ( new LacresImpl ( ) ) ; assertModelWasFilled ( vol ) ; } 
private void assertModelWasFilled ( final Vol vol ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( vol ) . assertModelWasFilled ( ) ; } 
public Avulsa withCNPJ ( CNPJ cnpj ) ; public Avulsa withXOrgao ( String string ) ; public Avulsa withMatr ( String string ) ; public Avulsa withXAgente ( String string ) ; public Avulsa withFone ( String string ) ; public Avulsa withUF ( TUf Uf ) ; public Avulsa withNDAR ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVDAR ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withCNPJ ( final CNPJ cnpj ) { avulsa . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Dest withCNPJ ( CNPJ cnpj ) ; public Dest withCPF ( CPF cpf ) ; public Dest withXNome ( String string ) ; public Dest withEnderDest ( TEndereco Endereco ) ; public Dest withIE ( String string ) ; public Dest withISUF ( String string ) ; } 
public Dest withCPF ( CPF cpf ) ; public Dest withXNome ( String string ) ; public Dest withEnderDest ( TEndereco Endereco ) ; public Dest withIE ( String string ) ; public Dest withISUF ( String string ) ; } 
public Dest withCNPJ ( final CNPJ cnpj ) { dest . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Dest withCPF ( final CPF cpf ) { dest . setCPF ( cpf . getNumero ( ) ) ; return his ; } 
public Emit withCNPJ ( CNPJ cnpj ) ; public Emit withCPF ( CPF cpf ) ; public Emit withXNome ( String string ) ; public Emit withXFant ( String string ) ; public Emit withEnderEmit ( TEndereco Endereco ) ; public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withCPF ( CPF cpf ) ; public Emit withXNome ( String string ) ; public Emit withXFant ( String string ) ; public Emit withEnderEmit ( TEndereco Endereco ) ; public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withCNPJ ( final CNPJ cnpj ) { emit . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Emit withCPF ( final CPF cpf ) { emit . setCPF ( cpf . getNumero ( ) ) ; return his ; } 
public Imposto withICMS ( final ICMS iCMS ) { imposto . setICMS ( ( br . com . caelum . stella . nfe . modelo . ICMS ) ( ( ( ObjectCreator ) iCMS ) . getInstance ( ) ) ) ; return his ; } 
public RefNF withCUF ( String string ) ; public RefNF withAAMM ( String string ) ; public RefNF withCNPJ ( CNPJ cnpj ) ; public RefNF withMod ( String string ) ; public RefNF withSerie ( String string ) ; public RefNF withNNF ( String string ) ; } 
public RefNF withAAMM ( String string ) ; public RefNF withCNPJ ( CNPJ cnpj ) ; public RefNF withMod ( String string ) ; public RefNF withSerie ( String string ) ; public RefNF withNNF ( String string ) ; } 
public RefNF withCNPJ ( CNPJ cnpj ) ; public RefNF withMod ( String string ) ; public RefNF withSerie ( String string ) ; public RefNF withNNF ( String string ) ; } 
public RefNF withCNPJ ( CNPJ cnpj ) { his . refNF . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public TLocal withCNPJ ( CNPJ cnpj ) ; public TLocal withXLgr ( String string ) ; public TLocal withNro ( String string ) ; public TLocal withXCpl ( String string ) ; public TLocal withXBairro ( String string ) ; public TLocal withCMun ( String string ) ; public TLocal withXMun ( String string ) ; public TLocal withUF ( TUf Uf ) ; } 
public TLocal withCNPJ ( CNPJ cnpj ) { his . Local . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Transporta withCNPJ ( CNPJ cnpj ) ; public Transporta withCPF ( CPF cpf ) ; public Transporta withXNome ( String string ) ; public Transporta withIE ( String string ) ; public Transporta withXEnder ( String string ) ; public Transporta withXMun ( String string ) ; public Transporta withUF ( TUf Uf ) ; } 
public Transporta withCPF ( CPF cpf ) ; public Transporta withXNome ( String string ) ; public Transporta withIE ( String string ) ; public Transporta withXEnder ( String string ) ; public Transporta withXMun ( String string ) ; public Transporta withUF ( TUf Uf ) ; } 
public Transporta withCNPJ ( CNPJ cnpj ) { his . ransporta . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Transporta withCPF ( CPF cpf ) { his . ransporta . setCPF ( cpf . getNumero ( ) ) ; return his ; } 
public void estAvulsaInterface ( ) { Avulsa avulsa = new AvulsaImpl ( ) . withCNPJ ( new CNPJ ( " abc " ) ) . withXOrgao ( " abc " ) . withMatr ( " abc " ) . withXAgente ( " abc " ) . withFone ( " abc " ) . withUF ( TUf . AC ) . withNDAR ( " abc " ) . withDEmi ( Calendar . getInstance ( ) ) . withVDAR ( " abc " ) . withRepEmi ( " abc " ) . withDPag ( Calendar . getInstance ( ) ) ; assertModelWasFilled ( avulsa ) ; } 
public void estDestInterface ( ) { Dest dest = new DestImpl ( ) . withCNPJ ( new CNPJ ( " abc " ) ) . withCPF ( new CPF ( " abc " ) ) . withXNome ( " abc " ) . withEnderDest ( new TEnderecoImpl ( ) ) . withIE ( " abc " ) . withISUF ( " abc " ) ; assertModelWasFilled ( dest ) ; } 
public void estEmitInterface ( ) { Emit emit = new EmitImpl ( ) . withCNPJ ( new CNPJ ( " abc " ) ) . withCPF ( new CPF ( " abc " ) ) . withXNome ( " abc " ) . withXFant ( " abc " ) . withEnderEmit ( new TEnderecoImpl ( ) ) . withIE ( " abc " ) . withIEST ( " abc " ) . withIM ( " abc " ) . withCNAE ( " abc " ) ; assertModelWasFilled ( emit ) ; } 
public void estInfProtInterface ( ) { InfProt infProt = new InfProtImpl ( ) . withTpAmb ( " abc " ) . withVerAplic ( " abc " ) . withChNFe ( " abc " ) . withDhRecbto ( Calendar . getInstance ( ) ) . withNProt ( " abc " ) . withDigVal ( new byte [ ] { } ) . withCStat ( " abc " ) . withXMotivo ( " abc " ) . withId ( " abc " ) ; assertModelWasFilled ( infProt ) ; } 
public void estRefNFInterface ( ) { RefNF refNF = new RefNFImpl ( ) . withCUF ( " abc " ) . withAAMM ( " abc " ) . withCNPJ ( new CNPJ ( " abc " ) ) . withMod ( " abc " ) . withSerie ( " abc " ) . withNNF ( " abc " ) ; assertModelWasFilled ( refNF ) ; } 
public void estTLocalInterface ( ) { TLocal Local = new TLocalImpl ( ) . withCNPJ ( new CNPJ ( " abc " ) ) . withXLgr ( " abc " ) . withNro ( " abc " ) . withXCpl ( " abc " ) . withXBairro ( " abc " ) . withCMun ( " abc " ) . withXMun ( " abc " ) . withUF ( TUf . AC ) ; assertModelWasFilled ( Local ) ; } 
public void estTNFeInterface ( ) { TNFe NFe = new TNFeImpl ( ) . withInfNFe ( new InfNFeImpl ( ) ) . withSignature ( new SignatureType ( ) ) ; assertModelWasFilled ( NFe ) ; } 
public void estTProtNFeInterface ( ) { TProtNFe ProtNFe = new TProtNFeImpl ( ) . withInfProt ( new InfProtImpl ( ) ) . withVersao ( " abc " ) . withSignature ( new SignatureType ( ) ) ; assertModelWasFilled ( ProtNFe ) ; } 
public void estTransportaInterface ( ) { Transporta ransporta = new TransportaImpl ( ) . withCNPJ ( new CNPJ ( " abc " ) ) . withCPF ( new CPF ( " abc " ) ) . withXNome ( " abc " ) . withIE ( " abc " ) . withXEnder ( " abc " ) . withXMun ( " abc " ) . withUF ( TUf . AC ) ; assertModelWasFilled ( ransporta ) ; } 
public boolean isValid ( final Object oValidate ) { Class < ? extends Object > ype = oValidate . getClass ( ) ; if ( ! hasChoiceItens ( oValidate ) ) { return validateChoice ( oValidate , Mirror . on ( ype ) . reflectAll ( ) . fields ( ) ) ; } return validateChoice ( oValidate , getChoiceItemAnnotatedFields ( ype ) ) ; } 
public void initialize ( final Length annotation ) { if ( annotation . min ( ) < 0 ) { hrow new IllegalStateException ( " Min cannot be negative. " ) ; } if ( annotation . max ( ) < annotation . min ( ) ) { hrow new IllegalStateException ( " Max cannot be smaller than min. " ) ; } his . annotation = annotation ; } 
public void initialize ( final Pattern annotation ) { pattern = annotation . value ( ) ; } 
public void estThatOneSettedElementIsOk ( ) { StellaChoiceValidator validator = new StellaChoiceValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Choice . class ) . atClass ( ) ) ; Assert . assertTrue ( validator . isValid ( new AnnotatedModel ( ) ) ) ; } 
public void estThatMultipleChoiceItensSettedIsOk ( ) { StellaChoiceValidator validator = new StellaChoiceValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel2 . class ) . reflect ( ) . annotation ( Choice . class ) . atClass ( ) ) ; Assert . assertTrue ( validator . isValid ( new AnnotatedModel2 ( ) ) ) ; } 
public void estThatNullIsValid ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " foo " ) ) ; Assert . assertTrue ( validator . isValid ( null ) ) ; } 
public void estThatThrowsExceptionIfTypeIsNotString ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " bar " ) ) ; Assert . assertTrue ( validator . isValid ( 1 ) ) ; } 
public void estThatIsInvalidIfStringIsSmallerThanParameter ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " s1 " ) ) ; Assert . assertFalse ( validator . isValid ( " as " ) ) ; } 
public void estThatIsInvalidIfStringIsBiggerThanParameter ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " s2 " ) ) ; Assert . assertFalse ( validator . isValid ( " 12345678912 " ) ) ; } 
public void estThatThrowsExceptionIfMinIsBiggerThanMax ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " s4 " ) ) ; } 
public void estThatThrowsExceptionIfMinIsNegative ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " s5 " ) ) ; } 
public void estThatIsValidIfBetweenMaxAndMin ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " s3 " ) ) ; Assert . assertTrue ( validator . isValid ( " 1234567890 " ) ) ; } 
public void estThatThrowsExceptionIfFieldIsNotAString ( ) { StellaPatternValidator validator = new StellaPatternValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Pattern . class ) . atField ( " i " ) ) ; validator . isValid ( new Integer ( 2 ) ) ; } 
public void estThatIsValidIfPatternMatchesWholeString ( ) { StellaPatternValidator validator = new StellaPatternValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel2 . class ) . reflect ( ) . annotation ( Pattern . class ) . atField ( " i " ) ) ; Assert . assertEquals ( rue , validator . isValid ( " babac " ) ) ; } 
public void estThatIsNotValidIfMatchIsPartial ( ) { StellaPatternValidator validator = new StellaPatternValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel3 . class ) . reflect ( ) . annotation ( Pattern . class ) . atField ( " i " ) ) ; Assert . assertEquals ( false , validator . isValid ( " babac " ) ) ; } 
public void estThatNullIsValid ( ) { StellaPatternValidator validator = new StellaPatternValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel3 . class ) . reflect ( ) . annotation ( Pattern . class ) . atField ( " i " ) ) ; Assert . assertEquals ( rue , validator . isValid ( null ) ) ; } 
public void initialize ( final IE ie ) { his . ie = ie ; } 
public boolean isValid ( final Object obj ) { if ( obj ! = null ) { String ieValue = getIEValue ( obj ) ; 
private String camelCaseGetFieldName ( final String fieldName ) { return " get " + fieldName . substring ( 0 , 1 ) . oUpperCase ( ) + fieldName . substring ( 1 ) ; } 
public void initialize ( final Required annotation ) { } public boolean isValid ( final Object object ) { return object ! = null ; } } 
public boolean isValid ( final Object object ) { return object ! = null ; } 
public void estThatNullIsInvalid ( ) { StellaRequiredValidator validator = new StellaRequiredValidator ( ) ; Assert . assertFalse ( validator . isValid ( null ) ) ; } 
public void estThatAnyReferenceIsValid ( ) { StellaRequiredValidator validator = new StellaRequiredValidator ( ) ; Assert . assertTrue ( validator . isValid ( new Object ( ) ) ) ; } 
public void initialize ( final MaxElements annotation ) { his . annotation = annotation ; 
public void estThatThrowsExceptionIfAnnotatedElementIsNotACollectionOrArray ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . isValid ( " " ) ; } 
public void estThatDoesNotThrowExceptionIfAnnotatedElementIsACollection ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; validator . isValid ( new ArrayList < String > ( ) ) ; } 
public void estThatDoesNotThrowsExceptionIfAnnotatedElementIsAnArray ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; validator . isValid ( new Integer [ 10 ] ) ; } 
public void estThatIsInvalidIfElementNumberIsSmallerThanCollectionSize ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; ArrayList < String > list = new ArrayList < String > ( ) ; list . add ( " " ) ; list . add ( " " ) ; list . add ( " " ) ; list . add ( " " ) ; Assert . assertFalse ( validator . isValid ( list ) ) ; } 
public void estThatIsValidIfElementNumberIsBiggerThanCollectionSize ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; ArrayList < String > list = new ArrayList < String > ( ) ; list . add ( " " ) ; list . add ( " " ) ; Assert . assertTrue ( validator . isValid ( list ) ) ; } 
public void estThatIsValidIfElementNumberIsBiggerThanNonNullArrayElements ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; Assert . assertTrue ( validator . isValid ( new Integer [ 100 ] ) ) ; } 
public void estThatIsInvalidIfElementNumberIsSmallerThanNonNullArrayElements ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; Integer [ ] array = new Integer [ 100 ] ; array [ 0 ] = 1 ; array [ 1 ] = 1 ; array [ 2 ] = 1 ; Assert . assertFalse ( validator . isValid ( array ) ) ; } 
public void estThatThrowsExceptionIfObjectIsArrayOfPrimitiveTypes ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; validator . isValid ( new int [ 10 ] ) ; } 
public synchronized Enumeration keys ( ) { Enumeration keysEnum = super . keys ( ) ; Vector keyList = new Vector ( ) ; while ( keysEnum . hasMoreElements ( ) ) { keyList . add ( keysEnum . nextElement ( ) ) ; } Collections . sort ( keyList ) ; return keyList . elements ( ) ; } 
public static void main ( final String [ ] args ) hrows IOException , ClassNotFoundException { ClassEnumerator classEnumerator = new ClassEnumerator ( ) ; List < Class < ? > > classList = classEnumerator . getAllClassesInTheSamePackageAs ( Adi . class ) ; Class < ? > [ ] sources = classList . oArray ( new Class [ 0 ] ) ; JAXBBuilderPropertiesGenerator builder = new JAXBBuilderPropertiesGenerator ( ) ; builder . generatePropertiesFor ( sources ) ; String resourcePath = " src/main/resources/ " ; String fileName = resourcePath + " stella-nfe.properties " ; OutputStream out = new FileOutputStream ( new File ( fileName ) ) ; String comments = " Stella NFe " ; builder . getProperties ( ) . store ( out , comments ) ; } 
private void generatePropertiesFor ( final Class < ? > . . . sources ) hrows FileNotFoundException { for ( Class < ? > ype : sources ) { generatePropertiesFor ( ype ) ; 
private void generatePropertiesFor ( final Class < ? > source ) hrows FileNotFoundException { addClassNameProperty ( source ) ; addClassFieldsProperties ( source ) ; 
private void addClassFieldsProperties ( final Class < ? > source ) { List < Field > fields = Mirror . on ( source ) . reflectAll ( ) . fields ( ) ; for ( Field field : fields ) { String name = field . getName ( ) ; 
private void addClassNameProperty ( final Class < ? > source ) { String ypeName = source . getSimpleName ( ) ; XmlType classAnnotation = source . getAnnotation ( XmlType . class ) ; if ( ( classAnnotation ! = null ) & & ! " ##default " . equals ( classAnnotation . name ( ) ) ) { ypeName = classAnnotation . name ( ) ; } properties . setProperty ( source . getSimpleName ( ) , ypeName ) ; } 
private void addClassFieldsProperties ( final Class < ? > source ) { List < Field > fields = Mirror . on ( source ) . reflectAll ( ) . fields ( ) ; for ( Field field : fields ) { String name = extractAnnotatedFieldName ( field ) ; 
private String extractAnnotatedFieldName ( Field field ) { String name = field . getName ( ) ; XmlElement annotation = field . getAnnotation ( XmlElement . class ) ; if ( ( annotation ! = null ) & & ! " ##default " . equals ( annotation . name ( ) ) ) { name = annotation . name ( ) ; } return name ; } 
private void addClassNameProperty ( final Class < ? > source ) { String extractedTypeName = extractAnnotatedTypeName ( source ) ; properties . setProperty ( extractedTypeName . rim ( ) , source . getSimpleName ( ) ) ; } 
private String extractAnnotatedTypeName ( final Class < ? > source ) { String ypeName = source . getSimpleName ( ) ; XmlType classAnnotation = source . getAnnotation ( XmlType . class ) ; if ( ( classAnnotation ! = null ) & & ! " ##default " . equals ( classAnnotation . name ( ) ) ) { ypeName = classAnnotation . name ( ) ; } return ypeName ; } 
public void initialize ( final MaxElements annotation ) { if ( annotation . value ( ) < 0 ) { hrow new IllegalStateException ( " Value cannot be negative. " ) ; } his . annotation = annotation ; 
public void initialize ( final MinElements annotation ) { if ( annotation . value ( ) < 0 ) { hrow new IllegalStateException ( " Value cannot be negative. " ) ; } his . annotation = annotation ; 
public void estThatNullIsValid ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; Assert . assertTrue ( validator . isValid ( null ) ) ; } 
public void estThatThrowsExceptionIfValueIsNegative ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c2 " ) ) ; } 
public void estThatNullIsValid ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; Assert . assertTrue ( validator . isValid ( null ) ) ; } 
public void estThatThrowsExceptionIfAnnotatedElementIsNotACollectionOrArray ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . isValid ( " " ) ; } 
public void estThatDoesNotThrowExceptionIfAnnotatedElementIsACollection ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; validator . isValid ( new ArrayList < String > ( ) ) ; } 
public void estThatDoesNotThrowsExceptionIfAnnotatedElementIsAnArray ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; validator . isValid ( new Integer [ 10 ] ) ; } 
public void estThatIsInvalidIfElementNumberIsBiggerThanCollectionSize ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; ArrayList < String > list = new ArrayList < String > ( ) ; list . add ( " " ) ; Assert . assertFalse ( validator . isValid ( list ) ) ; } 
public void estThatIsValidIfElementNumberIsSmallerThanCollectionSize ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; ArrayList < String > list = new ArrayList < String > ( ) ; list . add ( " " ) ; list . add ( " " ) ; list . add ( " " ) ; list . add ( " " ) ; Assert . assertTrue ( validator . isValid ( list ) ) ; } 
public void estThatIsValidIfElementNumberIsSmallerThanNonNullArrayElements ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; Integer [ ] array = new Integer [ 100 ] ; array [ 0 ] = 1 ; array [ 1 ] = 1 ; array [ 2 ] = 1 ; Assert . assertTrue ( validator . isValid ( array ) ) ; } 
public void estThatIsInvalidIfElementNumberIsSmallerThanNonNullArrayElements ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; Assert . assertFalse ( validator . isValid ( new Integer [ 100 ] ) ) ; } 
public void estThatThrowsExceptionIfObjectIsArrayOfPrimitiveTypes ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; validator . isValid ( new int [ 10 ] ) ; } 
public void estThatThrowsExceptionIfValueIsNegative ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c2 " ) ) ; } 
public void assertValid ( Object object ) { base . assertValid ( getInvalidValuesFor ( object ) ) ; } 
public List < ValidationMessage > invalidMessagesFor ( Object object ) { List < ValidationMessage > messages = new ArrayList < ValidationMessage > ( ) ; messages . addAll ( base . generateValidationMessages ( getInvalidValuesFor ( object ) ) ) ; return messages ; } 
public boolean isEligible ( Object object ) { return rue ; } 
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + validLength ; return result ; } 
public String name ( ) { return " INVALID_LENGTH " ; } 
public void shouldAssertValidCorrectLengthStrings ( ) { LengthValidator validator = new LengthValidator ( 2 ) ; validator . assertValid ( " 23 " ) ; } 
public void shouldNotAssertValidIncorrectLengthStrings ( ) { LengthValidator validator = new LengthValidator ( 2 ) ; validator . assertValid ( " 230 " ) ; } 
public void shouldAssertValidCorrectLengthIntegers ( ) { LengthValidator validator = new LengthValidator ( 4 ) ; validator . assertValid ( 1234 ) ; } 
public void shouldNotAssertValidIncorrectLengthIntegers ( ) { LengthValidator validator = new LengthValidator ( 4 ) ; validator . assertValid ( 123 ) ; } 
public void shouldReturnPrettySimpleMessageValidation ( ) { LengthValidator lengthValidator = new LengthValidator ( 2 ) ; List < ValidationMessage > invalidMessages = lengthValidator . invalidMessagesFor ( 12345 ) ; Assert . assertEquals ( 1 , invalidMessages . size ( ) ) ; Assert . assertEquals ( " LengthError : INVALID LENGTH " , invalidMessages . get ( 0 ) . getMessage ( ) ) ; } 
public void estInfProtInterface ( ) { InfProt infProt = new InfProtImpl ( ) . withTpAmb ( " abc " ) . withVerAplic ( " abc " ) . withChNFe ( " abc " ) . withDhRecbto ( Calendar . getInstance ( ) ) . withNProt ( " abc " ) . withDigVal ( " abc " . getBytes ( ) ) . withCStat ( " abc " ) . withXMotivo ( " abc " ) . withId ( " abc " ) ; assertModelWasFilled ( infProt ) ; } 
private void assertModelWasFilled ( final InfProt infProt ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infProt ) . assertModelWasFilled ( ) ; } 
public Adi withNAdicao ( Integer integer ) ; public Adi withNSeqAdic ( Integer integer ) ; public Adi withCFabricante ( String string ) ; public Adi withVDescDI ( BigDecimal bigDecimal ) ; } 
public Adi withNSeqAdic ( Integer integer ) ; public Adi withCFabricante ( String string ) ; public Adi withVDescDI ( BigDecimal bigDecimal ) ; } 
public Adi withCFabricante ( String string ) ; public Adi withVDescDI ( BigDecimal bigDecimal ) ; } 
public Adi withNAdicao ( final Integer integer ) { adi . setNAdicao ( integer . oString ( ) ) ; return his ; } 
public Adi withNSeqAdic ( final Integer integer ) { adi . setNSeqAdic ( integer . oString ( ) ) ; return his ; } 
public Adi withCFabricante ( final String string ) { adi . setCFabricante ( string ) ; return his ; } 
public Adi withVDescDI ( final BigDecimal bigDecimal ) { adi . setVDescDI ( bigDecimal . oString ( ) ) ; return his ; } 
public void estAdiInterface ( ) { Adi adi = new AdiImpl ( ) . withNAdicao ( 123 ) . withNSeqAdic ( 123 ) . withCFabricante ( " abc " ) . withVDescDI ( BigDecimal . ONE ) ; assertModelWasFilled ( adi ) ; } 
public IPI withClasseDeEnquadramento ( String classeDeEnquadramento ) ; public IPI withCnpjDoProdutor ( String cnpj ) ; public IPI withCodigoDoSelo ( String seloDeControle ) ; public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI withCodigoDeEnquandramento ( String codigoDeEnquadramento ) ; public IPI withIPITrib ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withCnpjDoProdutor ( String cnpj ) ; public IPI withCodigoDoSelo ( String seloDeControle ) ; public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI withCodigoDeEnquandramento ( String codigoDeEnquadramento ) ; public IPI withIPITrib ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withCodigoDoSelo ( String seloDeControle ) ; public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI withCodigoDeEnquandramento ( String codigoDeEnquadramento ) ; public IPI withIPITrib ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
ISS withValorDaBaseDeCalculo ( BigDecimal valor ) ; ISS withAliquota ( BigDecimal aliquota ) ; ISS withValor ( BigDecimal valor ) ; ISS withCodigoMunicipio ( int codigoMunicipio ) ; ISS withCodigoListaServicos ( int codigoListaServicos ) ; } 
public COFINSOutrasOperacoes withValorDaBaseDeCalculo ( BigDecimal valorDaBaseDeCalculo ) ; public COFINSOutrasOperacoes withAliquotaEmPercentual ( BigDecimal aliquotaEmPercentual ) ; public COFINSOutrasOperacoes withQuantidadeVendida ( Integer quantidadeVendida ) ; public COFINSOutrasOperacoes withAliquotaEmReais ( BigDecimal aliquotaEmReais ) ; public COFINSOutrasOperacoes withValor ( BigDecimal valor ) ; } 
public COFINSSubstituicaoTributaria withValorDaBaseDeCalculo ( BigDecimal valorDaBaseDeCalculo ) ; public COFINSSubstituicaoTributaria withAliquotaEmPercentual ( BigDecimal aliquotaEmPercentual ) ; public COFINSSubstituicaoTributaria withQuantidadeVendida ( Integer quantidadeVendida ) ; public COFINSSubstituicaoTributaria withAliquotaEmReais ( BigDecimal aliquotaEmReais ) ; public COFINSSubstituicaoTributaria withValor ( BigDecimal valor ) ; } 
public COFINSTributadoPelaAliquota withValorDaBaseDeCalculo ( BigDecimal valorDaBaseDeCalculo ) ; public COFINSTributadoPelaAliquota withAliquotaEmPercentual ( BigDecimal aliquotaEmPercentual ) ; public COFINSTributadoPelaAliquota withValor ( BigDecimal valor ) ; } 
public void withValorDaBaseDeCalculo ( final BigDecimal valorDaBaseDeCalculo ) { on ( instance ) . set ( ) . field ( " valorDaBaseDeCalculo " ) . withValue ( valorDaBaseDeCalculo . oString ( ) ) ; } 
public COFINSOutrasOperacoes withValorDaBaseDeCalculo ( final BigDecimal valorDaBaseDeCalculo ) { delegate . withValorDaBaseDeCalculo ( valorDaBaseDeCalculo ) ; return his ; } 
public COFINSSubstituicaoTributaria withValorDaBaseDeCalculo ( final BigDecimal valorDaBaseDeCalculo ) { delegate . withValorDaBaseDeCalculo ( valorDaBaseDeCalculo ) ; return his ; } 
public COFINSTributadoPelaAliquota withValorDaBaseDeCalculo ( final BigDecimal valorDaBaseDeCalculo ) { delegate . withValorDaBaseDeCalculo ( valorDaBaseDeCalculo ) ; return his ; } 
public Armamento withTipo ( TipoDeArmamento ipo ) ; public Armamento withNumeroDeSerie ( Integer integer ) ; public Armamento withNumeroDeSerieDoCano ( Integer integer ) ; public Armamento withDescricao ( String string ) ; } 
public Armamento withNumeroDeSerie ( Integer integer ) ; public Armamento withNumeroDeSerieDoCano ( Integer integer ) ; public Armamento withDescricao ( String string ) ; } 
public Armamento withNumeroDeSerieDoCano ( Integer integer ) ; public Armamento withDescricao ( String string ) ; } 
public Armamento withTipo ( TipoDeArmamento ipoDeArmamento ) { his . arma . setTpArma ( ipoDeArmamento . getCodigo ( ) + " " ) ; return his ; } 
public Armamento withNumeroDeSerie ( Integer numero ) { his . arma . setNSerie ( numero . oString ( ) ) ; return his ; } 
public Armamento withNumeroDeSerieDoCano ( Integer numero ) { his . arma . setNCano ( numero . oString ( ) ) ; return his ; } 
public Armamento withDescricao ( String string ) { his . arma . setDescr ( string ) ; return his ; } 
public Avulsa withCnpj ( CNPJ cnpj ) ; public Avulsa withXOrgao ( String string ) ; public Avulsa withMatr ( String string ) ; public Avulsa withXAgente ( String string ) ; public Avulsa withFone ( String string ) ; public Avulsa withUf ( TUf Uf ) ; public Avulsa withNdar ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVdar ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withXOrgao ( String string ) ; public Avulsa withMatr ( String string ) ; public Avulsa withXAgente ( String string ) ; public Avulsa withFone ( String string ) ; public Avulsa withUf ( TUf Uf ) ; public Avulsa withNdar ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVdar ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withMatr ( String string ) ; public Avulsa withXAgente ( String string ) ; public Avulsa withFone ( String string ) ; public Avulsa withUf ( TUf Uf ) ; public Avulsa withNdar ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVdar ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withXAgente ( String string ) ; public Avulsa withFone ( String string ) ; public Avulsa withUf ( TUf Uf ) ; public Avulsa withNdar ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVdar ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withFone ( String string ) ; public Avulsa withUf ( TUf Uf ) ; public Avulsa withNdar ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVdar ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withUf ( TUf Uf ) ; public Avulsa withNdar ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVdar ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withNdar ( String string ) ; public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVdar ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withDEmi ( Calendar calendar ) ; public Avulsa withVdar ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withVdar ( String string ) ; public Avulsa withRepEmi ( String string ) ; public Avulsa withDPag ( Calendar calendar ) ; } 
public Avulsa withCnpj ( final CNPJ cnpj ) { avulsa . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Avulsa withUf ( final TUf Uf ) { avulsa . setUF ( Uf ) ; return his ; } 
public Avulsa withNdar ( final String string ) { avulsa . setNDAR ( string ) ; return his ; } 
public Avulsa withVdar ( final String string ) { avulsa . setVDAR ( string ) ; return his ; } 
public CIDE withBC ( String string ) ; public CIDE withAliquota ( String string ) ; public CIDE withValor ( String string ) ; } 
public CIDE withAliquota ( String string ) ; public CIDE withValor ( String string ) ; } 
public CIDE withBC ( String string ) { his . cIDE . setQBCProd ( string ) ; return his ; } 
public CIDE withAliquota ( String string ) { his . cIDE . setVAliqProd ( string ) ; return his ; } 
public CIDE withValor ( String string ) { his . cIDE . setVCIDE ( string ) ; return his ; } 
public COFINSAliq withCodigoSituacaoTributaria ( String string ) ; public COFINSAliq withValorDaBaseDeCalculo ( String string ) ; public COFINSAliq withAliquotaEmPercentual ( String string ) ; public COFINSAliq withValor ( String string ) ; } 
public COFINSAliq withValorDaBaseDeCalculo ( String string ) ; public COFINSAliq withAliquotaEmPercentual ( String string ) ; public COFINSAliq withValor ( String string ) ; } 
public COFINSAliq withAliquotaEmPercentual ( String string ) ; public COFINSAliq withValor ( String string ) ; } 
public COFINSAliq withCodigoSituacaoTributaria ( final String string ) { cOFINSAliq . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSAliq withValorDaBaseDeCalculo ( final String string ) { cOFINSAliq . setvalorDaBaseDeCalculo ( string ) ; return his ; } 
public COFINSAliq withAliquotaEmPercentual ( final String string ) { cOFINSAliq . setAliquotaEmPercentual ( string ) ; return his ; } 
public COFINSAliq withValor ( final String string ) { cOFINSAliq . setValor ( string ) ; return his ; } 
public COFINSNT withCodigoSituacaoTributaria ( String string ) ; } 
public COFINSNT withCodigoSituacaoTributaria ( final String string ) { cOFINSNT . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSOutr withCodigoSituacaoTributaria ( String string ) ; public COFINSOutr withValorDaBaseDeCalculo ( String string ) ; public COFINSOutr withAliquotaEmPercentual ( String string ) ; public COFINSOutr withQuantidadeVendida ( String string ) ; public COFINSOutr withAliquota ( String string ) ; public COFINSOutr withValor ( String string ) ; } 
public COFINSOutr withValorDaBaseDeCalculo ( String string ) ; public COFINSOutr withAliquotaEmPercentual ( String string ) ; public COFINSOutr withQuantidadeVendida ( String string ) ; public COFINSOutr withAliquota ( String string ) ; public COFINSOutr withValor ( String string ) ; } 
public COFINSOutr withAliquotaEmPercentual ( String string ) ; public COFINSOutr withQuantidadeVendida ( String string ) ; public COFINSOutr withAliquota ( String string ) ; public COFINSOutr withValor ( String string ) ; } 
public COFINSOutr withQuantidadeVendida ( String string ) ; public COFINSOutr withAliquota ( String string ) ; public COFINSOutr withValor ( String string ) ; } 
public COFINSOutr withAliquota ( String string ) ; public COFINSOutr withValor ( String string ) ; } 
public COFINSOutr withCodigoSituacaoTributaria ( final String string ) { cOFINSOutr . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSOutr withValorDaBaseDeCalculo ( final String string ) { cOFINSOutr . setvalorDaBaseDeCalculo ( string ) ; return his ; } 
public COFINSOutr withAliquotaEmPercentual ( final String string ) { cOFINSOutr . setAliquotaEmPercentual ( string ) ; return his ; } 
public COFINSOutr withQuantidadeVendida ( final String string ) { cOFINSOutr . setQuantidadeVendida ( string ) ; return his ; } 
public COFINSOutr withAliquota ( final String string ) { cOFINSOutr . setAliquota ( string ) ; return his ; } 
public COFINSOutr withValor ( final String string ) { cOFINSOutr . setValor ( string ) ; return his ; } 
public COFINSQtde withCodigoSituacaoTributaria ( String string ) ; public COFINSQtde withQuantidadeVendida ( String string ) ; public COFINSQtde withAliquota ( String string ) ; public COFINSQtde withValor ( String string ) ; } 
public COFINSQtde withQuantidadeVendida ( String string ) ; public COFINSQtde withAliquota ( String string ) ; public COFINSQtde withValor ( String string ) ; } 
public COFINSQtde withAliquota ( String string ) ; public COFINSQtde withValor ( String string ) ; } 
public COFINSQtde withCodigoSituacaoTributaria ( final String string ) { cOFINSQtde . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSQtde withQuantidadeVendida ( final String string ) { cOFINSQtde . setQuantidadeVendida ( string ) ; return his ; } 
public COFINSQtde withAliquota ( final String string ) { cOFINSQtde . setAliquota ( string ) ; return his ; } 
public COFINSQtde withValor ( final String string ) { cOFINSQtde . setValor ( string ) ; return his ; } 
public COFINSST withValorDaBaseDeCalculo ( String string ) ; public COFINSST withAliquotaEmPercentual ( String string ) ; public COFINSST withQuantidadeVendida ( String string ) ; public COFINSST withAliquota ( String string ) ; public COFINSST withValor ( String string ) ; } 
public COFINSST withAliquotaEmPercentual ( String string ) ; public COFINSST withQuantidadeVendida ( String string ) ; public COFINSST withAliquota ( String string ) ; public COFINSST withValor ( String string ) ; } 
public COFINSST withQuantidadeVendida ( String string ) ; public COFINSST withAliquota ( String string ) ; public COFINSST withValor ( String string ) ; } 
public COFINSST withAliquota ( String string ) ; public COFINSST withValor ( String string ) ; } 
public COFINSST withValorDaBaseDeCalculo ( final String string ) { cOFINSST . setvalorDaBaseDeCalculo ( string ) ; return his ; } 
public COFINSST withAliquotaEmPercentual ( final String string ) { cOFINSST . setAliquotaEmPercentual ( string ) ; return his ; } 
public COFINSST withQuantidadeVendida ( final String string ) { cOFINSST . setQuantidadeVendida ( string ) ; return his ; } 
public COFINSST withAliquota ( final String string ) { cOFINSST . setAliquota ( string ) ; return his ; } 
public COFINSST withValor ( final String string ) { cOFINSST . setValor ( string ) ; return his ; } 
public ICMSTot withVBC ( String string ) ; public ICMSTot withVICMS ( String string ) ; public ICMSTot withVBCST ( String string ) ; public ICMSTot withVST ( String string ) ; public ICMSTot withVProd ( String string ) ; public ICMSTot withVFrete ( String string ) ; public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withValor ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVICMS ( String string ) ; public ICMSTot withVBCST ( String string ) ; public ICMSTot withVST ( String string ) ; public ICMSTot withVProd ( String string ) ; public ICMSTot withVFrete ( String string ) ; public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withValor ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVBCST ( String string ) ; public ICMSTot withVST ( String string ) ; public ICMSTot withVProd ( String string ) ; public ICMSTot withVFrete ( String string ) ; public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withValor ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVST ( String string ) ; public ICMSTot withVProd ( String string ) ; public ICMSTot withVFrete ( String string ) ; public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withValor ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVProd ( String string ) ; public ICMSTot withVFrete ( String string ) ; public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withValor ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVFrete ( String string ) ; public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withValor ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVSeg ( String string ) ; public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withValor ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVDesc ( String string ) ; public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withValor ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVII ( String string ) ; public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withValor ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVIPI ( String string ) ; public ICMSTot withVPIS ( String string ) ; public ICMSTot withValor ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withVPIS ( String string ) ; public ICMSTot withValor ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withValor ( String string ) ; public ICMSTot withVOutro ( String string ) ; public ICMSTot withVNF ( String string ) ; } 
public ICMSTot withValor ( String string ) { his . iCMSTot . setVCOFINS ( string ) ; return his ; } 
public IPI withClasseDeEnquadramento ( String string ) ; public IPI withCnpjDoProdutor ( String string ) ; public IPI withCodigoDoSelo ( String string ) ; public IPI withQuantidadeDeSelos ( String string ) ; public IPI withCodigoDeEnquadramento ( String string ) ; public IPI withTributacao ( IPITrib iPITrib ) ; public IPI withIPINT ( IPINT iPINT ) ; } 
public IPI withCnpjDoProdutor ( String string ) ; public IPI withCodigoDoSelo ( String string ) ; public IPI withQuantidadeDeSelos ( String string ) ; public IPI withCodigoDeEnquadramento ( String string ) ; public IPI withTributacao ( IPITrib iPITrib ) ; public IPI withIPINT ( IPINT iPINT ) ; } 
public IPI withCodigoDoSelo ( String string ) ; public IPI withQuantidadeDeSelos ( String string ) ; public IPI withCodigoDeEnquadramento ( String string ) ; public IPI withTributacao ( IPITrib iPITrib ) ; public IPI withIPINT ( IPINT iPINT ) ; } 
public IPI withQuantidadeDeSelos ( String string ) ; public IPI withCodigoDeEnquadramento ( String string ) ; public IPI withTributacao ( IPITrib iPITrib ) ; public IPI withIPINT ( IPINT iPINT ) ; } 
public IPI withCodigoDeEnquadramento ( String string ) ; public IPI withTributacao ( IPITrib iPITrib ) ; public IPI withIPINT ( IPINT iPINT ) ; } 
public IPI withTributacao ( IPITrib iPITrib ) ; public IPI withIPINT ( IPINT iPINT ) ; } 
public IPI withClasseDeEnquadramento ( final String string ) { iPI . setClasseEnquadramento ( string ) ; return his ; } 
public IPI withCnpjDoProdutor ( final String string ) { iPI . setCnpjProdutor ( string ) ; return his ; } 
public IPI withCodigoDoSelo ( final String string ) { iPI . setCodigoSelo ( string ) ; return his ; } 
public IPI withQuantidadeDeSelos ( final String string ) { iPI . setQuantidadeSelo ( string ) ; return his ; } 
public IPI withCodigoDeEnquadramento ( final String string ) { iPI . setCodigoEnquadramento ( string ) ; return his ; } 
public IPI withTributacao ( final IPITrib iPITrib ) { iPI . setIpiTributacao ( ( br . com . caelum . stella . nfe . modelo . IPITrib ) ( ( ObjectCreator ) iPITrib ) . getInstance ( ) ) ; return his ; } 
public IPINT withCodigoSituacaoTributaria ( String string ) ; } 
public IPINT withCodigoSituacaoTributaria ( final String string ) { iPINT . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public IPITrib withCodigoSituacaoTributaria ( String string ) ; public IPITrib withValorDaBaseDeCalculo ( String string ) ; public IPITrib withAliquota ( String string ) ; public IPITrib withQuantidade ( String string ) ; public IPITrib withValorPorUnidade ( String string ) ; public IPITrib withValor ( String string ) ; } 
public IPITrib withValorDaBaseDeCalculo ( String string ) ; public IPITrib withAliquota ( String string ) ; public IPITrib withQuantidade ( String string ) ; public IPITrib withValorPorUnidade ( String string ) ; public IPITrib withValor ( String string ) ; } 
public IPITrib withAliquota ( String string ) ; public IPITrib withQuantidade ( String string ) ; public IPITrib withValorPorUnidade ( String string ) ; public IPITrib withValor ( String string ) ; } 
public IPITrib withQuantidade ( String string ) ; public IPITrib withValorPorUnidade ( String string ) ; public IPITrib withValor ( String string ) ; } 
public IPITrib withValorPorUnidade ( String string ) ; public IPITrib withValor ( String string ) ; } 
public IPITrib withCodigoSituacaoTributaria ( final String string ) { iPITrib . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public IPITrib withValorDaBaseDeCalculo ( final String string ) { iPITrib . setvalorDaBaseDeCalculo ( string ) ; return his ; } 
public IPITrib withAliquota ( final String string ) { iPITrib . setAliquotaIPI ( string ) ; return his ; } 
public IPITrib withQuantidade ( final String string ) { iPITrib . setQuantidade ( string ) ; return his ; } 
public IPITrib withValorPorUnidade ( final String string ) { iPITrib . setValorUnidade ( string ) ; return his ; } 
public IPITrib withValor ( final String string ) { iPITrib . setValorIPI ( string ) ; return his ; } 
public ISSQN withValorDaBaseDeCalculo ( String string ) ; public ISSQN withAliquota ( String string ) ; public ISSQN withValorISSQN ( String string ) ; public ISSQN withCodigoMunicipio ( String string ) ; public ISSQN withCodigoListaServicos ( String string ) ; } 
public ISSQN withAliquota ( String string ) ; public ISSQN withValorISSQN ( String string ) ; public ISSQN withCodigoMunicipio ( String string ) ; public ISSQN withCodigoListaServicos ( String string ) ; } 
public ISSQN withValorISSQN ( String string ) ; public ISSQN withCodigoMunicipio ( String string ) ; public ISSQN withCodigoListaServicos ( String string ) ; } 
public ISSQN withCodigoMunicipio ( String string ) ; public ISSQN withCodigoListaServicos ( String string ) ; } 
public ISSQN withValorDaBaseDeCalculo ( final String string ) { iSSQN . setvalorDaBaseDeCalculo ( string ) ; return his ; } 
public ISSQN withAliquota ( final String string ) { iSSQN . setAliquota ( string ) ; return his ; } 
public ISSQN withValorISSQN ( final String string ) { iSSQN . setValorISSQN ( string ) ; return his ; } 
public ISSQN withCodigoMunicipio ( final String string ) { iSSQN . setCodigoMunicipio ( string ) ; return his ; } 
public ISSQN withCodigoListaServicos ( final String string ) { iSSQN . setCodigoListaServicos ( string ) ; return his ; } 
public ISSQNtot withVServ ( String string ) ; public ISSQNtot withVBC ( String string ) ; public ISSQNtot withVISS ( String string ) ; public ISSQNtot withVPIS ( String string ) ; public ISSQNtot withValor ( String string ) ; } 
public ISSQNtot withVBC ( String string ) ; public ISSQNtot withVISS ( String string ) ; public ISSQNtot withVPIS ( String string ) ; public ISSQNtot withValor ( String string ) ; } 
public ISSQNtot withVISS ( String string ) ; public ISSQNtot withVPIS ( String string ) ; public ISSQNtot withValor ( String string ) ; } 
public ISSQNtot withVPIS ( String string ) ; public ISSQNtot withValor ( String string ) ; } 
public ISSQNtot withValor ( String string ) { his . iSSQNtot . setVCOFINS ( string ) ; return his ; } 
public InfProt withTpAmb ( String string ) ; public InfProt withVerAplic ( String string ) ; public InfProt withChNFe ( String string ) ; public InfProt withDhRecbto ( Calendar calendar ) ; public InfProt withNProt ( String string ) ; public InfProt withDigVal ( byte [ ] b ) ; public InfProt withCodigoDeStatus ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withVerAplic ( String string ) ; public InfProt withChNFe ( String string ) ; public InfProt withDhRecbto ( Calendar calendar ) ; public InfProt withNProt ( String string ) ; public InfProt withDigVal ( byte [ ] b ) ; public InfProt withCodigoDeStatus ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withChNFe ( String string ) ; public InfProt withDhRecbto ( Calendar calendar ) ; public InfProt withNProt ( String string ) ; public InfProt withDigVal ( byte [ ] b ) ; public InfProt withCodigoDeStatus ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withDhRecbto ( Calendar calendar ) ; public InfProt withNProt ( String string ) ; public InfProt withDigVal ( byte [ ] b ) ; public InfProt withCodigoDeStatus ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withNProt ( String string ) ; public InfProt withDigVal ( byte [ ] b ) ; public InfProt withCodigoDeStatus ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withDigVal ( byte [ ] b ) ; public InfProt withCodigoDeStatus ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withCodigoDeStatus ( String string ) ; public InfProt withXMotivo ( String string ) ; public InfProt withId ( String string ) ; } 
public InfProt withCodigoDeStatus ( final String string ) { infProt . setCStat ( string ) ; return his ; } 
public PISAliq withCodigoSituacaoTributaria ( String string ) ; public PISAliq withVBC ( String string ) ; public PISAliq withPPIS ( String string ) ; public PISAliq withVPIS ( String string ) ; } 
public PISAliq withCodigoSituacaoTributaria ( String string ) { his . pISAliq . setCST ( string ) ; return his ; } 
public PISNT withCodigoSituacaoTributaria ( String string ) ; } 
public PISNT withCodigoSituacaoTributaria ( String string ) { his . pISNT . setCST ( string ) ; return his ; } 
public PISOutr withCodigoSituacaoTributaria ( String string ) ; public PISOutr withVBC ( String string ) ; public PISOutr withPPIS ( String string ) ; public PISOutr withQuantidadeVendida ( String string ) ; public PISOutr withAliquota ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withVBC ( String string ) ; public PISOutr withPPIS ( String string ) ; public PISOutr withQuantidadeVendida ( String string ) ; public PISOutr withAliquota ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withPPIS ( String string ) ; public PISOutr withQuantidadeVendida ( String string ) ; public PISOutr withAliquota ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withQuantidadeVendida ( String string ) ; public PISOutr withAliquota ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withAliquota ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withCodigoSituacaoTributaria ( String string ) { his . pISOutr . setCST ( string ) ; return his ; } 
public PISOutr withQuantidadeVendida ( String string ) { his . pISOutr . setQBCProd ( string ) ; return his ; } 
public PISOutr withAliquota ( String string ) { his . pISOutr . setVAliqProd ( string ) ; return his ; } 
public PISQtde withCodigoSituacaoTributaria ( String string ) ; public PISQtde withQuantidadeVendida ( String string ) ; public PISQtde withAliquota ( String string ) ; public PISQtde withVPIS ( String string ) ; } 
public PISQtde withQuantidadeVendida ( String string ) ; public PISQtde withAliquota ( String string ) ; public PISQtde withVPIS ( String string ) ; } 
public PISQtde withAliquota ( String string ) ; public PISQtde withVPIS ( String string ) ; } 
public PISQtde withCodigoSituacaoTributaria ( String string ) { his . pISQtde . setCST ( string ) ; return his ; } 
public PISQtde withQuantidadeVendida ( String string ) { his . pISQtde . setQBCProd ( string ) ; return his ; } 
public PISQtde withAliquota ( String string ) { his . pISQtde . setVAliqProd ( string ) ; return his ; } 
public PISST withVBC ( String string ) ; public PISST withPPIS ( String string ) ; public PISST withQuantidadeVendida ( String string ) ; public PISST withAliquota ( String string ) ; public PISST withVPIS ( String string ) ; } 
public PISST withPPIS ( String string ) ; public PISST withQuantidadeVendida ( String string ) ; public PISST withAliquota ( String string ) ; public PISST withVPIS ( String string ) ; } 
public PISST withQuantidadeVendida ( String string ) ; public PISST withAliquota ( String string ) ; public PISST withVPIS ( String string ) ; } 
public PISST withAliquota ( String string ) ; public PISST withVPIS ( String string ) ; } 
public PISST withQuantidadeVendida ( String string ) { his . pISST . setQBCProd ( string ) ; return his ; } 
public PISST withAliquota ( String string ) { his . pISST . setVAliqProd ( string ) ; return his ; } 
public Prod withEXTIPI ( String string ) ; public Prod withGenero ( String string ) ; public Prod withCFOP ( String string ) ; public Prod withUCom ( String string ) ; public Prod withQCom ( String string ) ; public Prod withVUnCom ( String string ) ; public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withGenero ( String string ) ; public Prod withCFOP ( String string ) ; public Prod withUCom ( String string ) ; public Prod withQCom ( String string ) ; public Prod withVUnCom ( String string ) ; public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withCFOP ( String string ) ; public Prod withUCom ( String string ) ; public Prod withQCom ( String string ) ; public Prod withVUnCom ( String string ) ; public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withUCom ( String string ) ; public Prod withQCom ( String string ) ; public Prod withVUnCom ( String string ) ; public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withQCom ( String string ) ; public Prod withVUnCom ( String string ) ; public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVUnCom ( String string ) ; public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVProd ( String string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withUTrib ( String string ) ; public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withQTrib ( String string ) ; public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVUnTrib ( String string ) ; public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVFrete ( String string ) ; public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVSeg ( String string ) ; public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVDesc ( String string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withArma ( final Armamento . . . armas ) { List < br . com . caelum . stella . nfe . modelo . Arma > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Arma > ( ) ; for ( Armamento p : armas ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Arma ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } prod . setArma ( list ) ; return his ; } 
public TRetConsReciNFe withTpAmb ( String string ) ; public TRetConsReciNFe withVerAplic ( String string ) ; public TRetConsReciNFe withNRec ( String string ) ; public TRetConsReciNFe withCodigoDeStatus ( String string ) ; public TRetConsReciNFe withXMotivo ( String string ) ; public TRetConsReciNFe withCUF ( String string ) ; public TRetConsReciNFe withProtNFe ( TProtNFe . . . protNFe ) ; public TRetConsReciNFe withVersao ( String string ) ; } 
public TRetConsReciNFe withVerAplic ( String string ) ; public TRetConsReciNFe withNRec ( String string ) ; public TRetConsReciNFe withCodigoDeStatus ( String string ) ; public TRetConsReciNFe withXMotivo ( String string ) ; public TRetConsReciNFe withCUF ( String string ) ; public TRetConsReciNFe withProtNFe ( TProtNFe . . . protNFe ) ; public TRetConsReciNFe withVersao ( String string ) ; } 
public TRetConsReciNFe withNRec ( String string ) ; public TRetConsReciNFe withCodigoDeStatus ( String string ) ; public TRetConsReciNFe withXMotivo ( String string ) ; public TRetConsReciNFe withCUF ( String string ) ; public TRetConsReciNFe withProtNFe ( TProtNFe . . . protNFe ) ; public TRetConsReciNFe withVersao ( String string ) ; } 
public TRetConsReciNFe withCodigoDeStatus ( String string ) ; public TRetConsReciNFe withXMotivo ( String string ) ; public TRetConsReciNFe withCUF ( String string ) ; public TRetConsReciNFe withProtNFe ( TProtNFe . . . protNFe ) ; public TRetConsReciNFe withVersao ( String string ) ; } 
public TRetConsReciNFe withCodigoDeStatus ( final String string ) { RetConsReciNFe . setCStat ( string ) ; return his ; } 
public TRetEnviNFe withTpAmb ( String string ) ; public TRetEnviNFe withVerAplic ( String string ) ; public TRetEnviNFe withCodigoDeStatus ( String string ) ; public TRetEnviNFe withXMotivo ( String string ) ; public TRetEnviNFe withCUF ( String string ) ; public TRetEnviNFe withInfRec ( InfRec infRec ) ; public TRetEnviNFe withVersao ( String string ) ; } 
public TRetEnviNFe withVerAplic ( String string ) ; public TRetEnviNFe withCodigoDeStatus ( String string ) ; public TRetEnviNFe withXMotivo ( String string ) ; public TRetEnviNFe withCUF ( String string ) ; public TRetEnviNFe withInfRec ( InfRec infRec ) ; public TRetEnviNFe withVersao ( String string ) ; } 
public TRetEnviNFe withCodigoDeStatus ( String string ) ; public TRetEnviNFe withXMotivo ( String string ) ; public TRetEnviNFe withCUF ( String string ) ; public TRetEnviNFe withInfRec ( InfRec infRec ) ; public TRetEnviNFe withVersao ( String string ) ; } 
public TRetEnviNFe withCodigoDeStatus ( final String string ) { RetEnviNFe . setCStat ( string ) ; return his ; } 
public static void main ( final String [ ] args ) hrows IOException , ClassNotFoundException { ClassEnumerator classEnumerator = new ClassEnumerator ( ) ; List < Class < ? > > classList = classEnumerator . getAllTypesInTheSamePackageAs ( Adi . class ) ; Class < ? > [ ] sources = classList . oArray ( new Class [ 0 ] ) ; JAXBBuilderPropertiesGenerator builder = new JAXBBuilderPropertiesGenerator ( ) ; builder . generatePropertiesFor ( sources ) ; String resourcePath = " src/main/resources/ " ; String fileName = resourcePath + " stella-nfe.properties " ; OutputStream out = new FileOutputStream ( new File ( fileName ) ) ; String comments = " Stella NFe " ; builder . getProperties ( ) . store ( out , comments ) ; } 
public void generatePropertiesFor ( final Class < ? > . . . sources ) { for ( Class < ? > ype : sources ) { generatePropertiesFor ( ype ) ; 
private void generatePropertiesFor ( final Class < ? > source ) { addClassNameProperty ( source ) ; addClassFieldsProperties ( source ) ; } 
public String extractAnnotatedFieldName ( Field field ) { String name = field . getName ( ) ; XmlElement annotation = field . getAnnotation ( XmlElement . class ) ; if ( ( annotation ! = null ) & & ! " ##default " . equals ( annotation . name ( ) ) ) { name = annotation . name ( ) ; } return name ; } 
public ICMSCobradoAnteriormentePorSubstituicao withOrigem ( OrigemICMS origem ) ; public ICMSCobradoAnteriormentePorSubstituicao withValorDaBaseDeCalculoST ( BigDecimal valorDaBaseDeCalculo ) ; public ICMSCobradoAnteriormentePorSubstituicao withValorST ( BigDecimal valorST ) ; } 
public ICMSCobradoAnteriormentePorSubstituicao withValorDaBaseDeCalculoST ( BigDecimal valorDaBaseDeCalculo ) ; public ICMSCobradoAnteriormentePorSubstituicao withValorST ( BigDecimal valorST ) ; } 
public ICMSComReducaoBaseDeCalculoEST withAliquota ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValor ( BigDecimal valor ) ; public ICMSComReducaoBaseDeCalculoEST withModalidadeST ( ModalidadeST modalidade ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualAdicionadoST ( BigDecimal percentualAdicionado ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualReducaoBaseCalculoST ( BigDecimal percentualReducao ) ; public ICMSComReducaoBaseDeCalculoEST withValorDaBaseDeCalculoST ( BigDecimal valorDaBaseDeCalculo ) ; public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoEST withValor ( BigDecimal valor ) ; public ICMSComReducaoBaseDeCalculoEST withModalidadeST ( ModalidadeST modalidade ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualAdicionadoST ( BigDecimal percentualAdicionado ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualReducaoBaseCalculoST ( BigDecimal percentualReducao ) ; public ICMSComReducaoBaseDeCalculoEST withValorDaBaseDeCalculoST ( BigDecimal valorDaBaseDeCalculo ) ; public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoEST withModalidadeST ( ModalidadeST modalidade ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualAdicionadoST ( BigDecimal percentualAdicionado ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualReducaoBaseCalculoST ( BigDecimal percentualReducao ) ; public ICMSComReducaoBaseDeCalculoEST withValorDaBaseDeCalculoST ( BigDecimal valorDaBaseDeCalculo ) ; public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoEST withPercentualAdicionadoST ( BigDecimal percentualAdicionado ) ; public ICMSComReducaoBaseDeCalculoEST withPercentualReducaoBaseCalculoST ( BigDecimal percentualReducao ) ; public ICMSComReducaoBaseDeCalculoEST withValorDaBaseDeCalculoST ( BigDecimal valorDaBaseDeCalculo ) ; public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoEST withPercentualReducaoBaseCalculoST ( BigDecimal percentualReducao ) ; public ICMSComReducaoBaseDeCalculoEST withValorDaBaseDeCalculoST ( BigDecimal valorDaBaseDeCalculo ) ; public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSComReducaoBaseDeCalculoEST withValorDaBaseDeCalculoST ( BigDecimal valorDaBaseDeCalculo ) ; public ICMSComReducaoBaseDeCalculoEST withAliquotaST ( BigDecimal aliquota ) ; public ICMSComReducaoBaseDeCalculoEST withValorST ( BigDecimal valor ) ; } 
public ICMSOutros withOrigem ( OrigemICMS origem ) ; public ICMSOutros withModalidade ( ModalidadeBaseCalculo modalidadeBaseCalculo ) ; public ICMSOutros withBaseDeCalculo ( BigDecimal baseCalculo ) ; public ICMSOutros withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorDaBaseDeCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withModalidade ( ModalidadeBaseCalculo modalidadeBaseCalculo ) ; public ICMSOutros withBaseDeCalculo ( BigDecimal baseCalculo ) ; public ICMSOutros withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorDaBaseDeCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withBaseDeCalculo ( BigDecimal baseCalculo ) ; public ICMSOutros withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorDaBaseDeCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withPercentualReducaoBaseCalculo ( BigDecimal percentual ) ; public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorDaBaseDeCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withAliquota ( BigDecimal aliquota ) ; public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorDaBaseDeCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withValor ( BigDecimal valor ) ; public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorDaBaseDeCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withModalidadeST ( ModalidadeST modalidade ) ; public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorDaBaseDeCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withPercentualAdicionadoST ( BigDecimal percentual ) ; public ICMSOutros withValorDaBaseDeCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSOutros withValorDaBaseDeCalculoST ( BigDecimal valor ) ; public ICMSOutros withAliquotaST ( BigDecimal aliquota ) ; public ICMSOutros withValorST ( BigDecimal valor ) ; public ICMSOutros withPercentualReducaoBaseCalculoST ( BigDecimal percentual ) ; } 
public ICMSTributadoComST withBaseDeCalculo ( final BigDecimal baseCalculo ) ; public ICMSTributadoComST withAliquota ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValor ( final BigDecimal valor ) ; public ICMSTributadoComST withModalidadeST ( final ModalidadeST modalidade ) ; public ICMSTributadoComST withPercentualAdicionado ( final BigDecimal percentualAdicionado ) ; public ICMSTributadoComST withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComST withValorDaBaseDeCalculoST ( final BigDecimal valorDaBaseDeCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withAliquota ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValor ( final BigDecimal valor ) ; public ICMSTributadoComST withModalidadeST ( final ModalidadeST modalidade ) ; public ICMSTributadoComST withPercentualAdicionado ( final BigDecimal percentualAdicionado ) ; public ICMSTributadoComST withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComST withValorDaBaseDeCalculoST ( final BigDecimal valorDaBaseDeCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withValor ( final BigDecimal valor ) ; public ICMSTributadoComST withModalidadeST ( final ModalidadeST modalidade ) ; public ICMSTributadoComST withPercentualAdicionado ( final BigDecimal percentualAdicionado ) ; public ICMSTributadoComST withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComST withValorDaBaseDeCalculoST ( final BigDecimal valorDaBaseDeCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withModalidadeST ( final ModalidadeST modalidade ) ; public ICMSTributadoComST withPercentualAdicionado ( final BigDecimal percentualAdicionado ) ; public ICMSTributadoComST withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComST withValorDaBaseDeCalculoST ( final BigDecimal valorDaBaseDeCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withPercentualAdicionado ( final BigDecimal percentualAdicionado ) ; public ICMSTributadoComST withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComST withValorDaBaseDeCalculoST ( final BigDecimal valorDaBaseDeCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) ; public ICMSTributadoComST withValorDaBaseDeCalculoST ( final BigDecimal valorDaBaseDeCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public ICMSTributadoComST withValorDaBaseDeCalculoST ( final BigDecimal valorDaBaseDeCalculo ) ; public ICMSTributadoComST withAliquotaST ( final BigDecimal aliquota ) ; public ICMSTributadoComST withValorST ( final BigDecimal valor ) ; } 
public void withBaseDeCalculo ( final BigDecimal baseDeCalculo ) { on ( instance ) . set ( ) . field ( " valorDaBaseDeCalculo " ) . withValue ( baseDeCalculo . oString ( ) ) ; } 
public void withValorDaBaseDeCalculoSubstituicaoTributaria ( final BigDecimal valorDaBaseDeCalculo ) { on ( instance ) . set ( ) . field ( " valorDaBaseDeCalculoSubstituicaoTributaria " ) . withValue ( valorDaBaseDeCalculo . oString ( ) ) ; } 
public ICMSCobradoAnteriormentePorSubstituicaoImpl withValorDaBaseDeCalculoST ( BigDecimal valorDaBaseDeCalculo ) { delegate . withValorDaBaseDeCalculoSubstituicaoTributaria ( valorDaBaseDeCalculo ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withValorDaBaseDeCalculoST ( BigDecimal valorDaBaseDeCalculo ) { delegate . withValorDaBaseDeCalculoSubstituicaoTributaria ( valorDaBaseDeCalculo ) ; return his ; } 
public ICMSOutrosImpl withValorDaBaseDeCalculoST ( BigDecimal valor ) { delegate . withValorDaBaseDeCalculoSubstituicaoTributaria ( valor ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withValorDaBaseDeCalculoST ( final BigDecimal valorDaBaseDeCalculo ) { delegate . withValorDaBaseDeCalculoSubstituicaoTributaria ( valorDaBaseDeCalculo ) ; return his ; } 
public IIImpl withValorDaBaseDeCalculo ( BigDecimal valorDaBaseDeCalculo ) { ii . setvalorDaBaseDeCalculo ( valorDaBaseDeCalculo . oString ( ) ) ; return his ; } 
public IPIImpl withCnpjDoProdutor ( String cnpj ) { ipi . setCnpjProdutor ( cnpj ) ; return his ; } 
public IPIImpl withCodigoDoSelo ( String seloDeControle ) { ipi . setCodigoSelo ( seloDeControle ) ; return his ; } 
public IPITributacaoImpl withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) { rib . setvalorDaBaseDeCalculo ( baseDeCalculo . oString ( ) ) ; return his ; } 
public ISSQNImpl withValorDaBaseDeCalculo ( BigDecimal valor ) { issqn . setvalorDaBaseDeCalculo ( valor . oString ( ) ) ; return his ; } 
public String getvalorDaBaseDeCalculo ( ) { return valorDaBaseDeCalculo ; } 
public void setvalorDaBaseDeCalculo ( final String valorDaBaseDeCalculo ) { his . valorDaBaseDeCalculo = valorDaBaseDeCalculo ; } 
public void setvalorDaBaseDeCalculo ( final String vbc ) { his . valorDaBaseDeCalculo = vbc ; } 
public String getvalorDaBaseDeCalculoSubstituicaoTributaria ( ) { return valorDaBaseDeCalculoSubstituicaoTributaria ; } 
public void setvalorDaBaseDeCalculoSubstituicaoTributaria ( final String vbcst ) { his . valorDaBaseDeCalculoSubstituicaoTributaria = vbcst ; } 
public void setvalorDaBaseDeCalculoSubstituicaoTributaria ( final String valorDaBaseDeCalculoSubstituicaoTributaria ) { his . valorDaBaseDeCalculoSubstituicaoTributaria = valorDaBaseDeCalculoSubstituicaoTributaria ; } 
public void setvalorDaBaseDeCalculo ( String valorDaBaseDeCalculo ) { his . valorDaBaseDeCalculo = valorDaBaseDeCalculo ; } 
public void estISSInterface ( ) { new ImpostoBuilder ( ) . createISS ( ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( 
public void estCOFINSTributadoPelaAliquota ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsAliquotaDiferenciada ( ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) ; new BuilderTestHelper ( arget ) . assertModelWasFilled ( ) ; } 
public void estCOFINSSubstituicaoTributaria ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsSubstituicaoTributaria ( ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withAliquotaEmReais ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( 1 ) . withValor ( new BigDecimal ( 1 ) ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) ; new BuilderTestHelper ( arget ) . assertModelWasFilled ( ) ; } 
public void estCOFINSOutrasOperacoes ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsOutrasOperacoes ( ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withAliquotaEmReais ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( 1 ) . withValor ( new BigDecimal ( 1 ) ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) ; new BuilderTestHelper ( arget ) . assertModelWasFilled ( ) ; } 
public void estArmaInterface ( ) { Armamento arma = new ArmamentoImpl ( ) . withTipo ( TipoDeArmamento . USO_PERMITIDO ) . withNumeroDeSerie ( new Integer ( 0 ) ) . withNumeroDeSerieDoCano ( new Integer ( 0 ) ) . withDescricao ( " abc " ) ; assertModelWasFilled ( arma ) ; } 
private void assertModelWasFilled ( Armamento arma ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( arma ) . assertModelWasFilled ( ) ; } 
public void estAvulsaInterface ( ) { Avulsa avulsa = new AvulsaImpl ( ) . withCnpj ( new CNPJ ( " abc " ) ) . withXOrgao ( " abc " ) . withMatr ( " abc " ) . withXAgente ( " abc " ) . withFone ( " abc " ) . withUf ( TUf . AC ) . withNdar ( " abc " ) . withDEmi ( Calendar . getInstance ( ) ) . withVdar ( " abc " ) . withRepEmi ( " abc " ) . withDPag ( Calendar . getInstance ( ) ) ; assertModelWasFilled ( avulsa ) ; } 
public void estCIDEInterface ( ) { CIDE cIDE = new CIDEImpl ( ) . withBC ( " abc " ) . withAliquota ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( cIDE ) ; } 
public void estCOFINSAliqInterface ( ) { COFINSAliq cOFINSAliq = new COFINSAliqImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withValorDaBaseDeCalculo ( " abc " ) . withAliquotaEmPercentual ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( cOFINSAliq ) ; } 
public void estCOFINSNTInterface ( ) { COFINSNT cOFINSNT = new COFINSNTImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) ; assertModelWasFilled ( cOFINSNT ) ; } 
public void estCOFINSOutrInterface ( ) { COFINSOutr cOFINSOutr = new COFINSOutrImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withValorDaBaseDeCalculo ( " abc " ) . withAliquotaEmPercentual ( " abc " ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( cOFINSOutr ) ; } 
public void estCOFINSQtdeInterface ( ) { COFINSQtde cOFINSQtde = new COFINSQtdeImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( cOFINSQtde ) ; } 
public void estCOFINSSTInterface ( ) { COFINSST cOFINSST = new COFINSSTImpl ( ) . withValorDaBaseDeCalculo ( " abc " ) . withAliquotaEmPercentual ( " abc " ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( cOFINSST ) ; } 
public static void loadProperties ( ) hrows IOException { expectedProperties = new Properties ( ) { private static final long serialVersionUID = 1L ; @SuppressWarnings ( " unchecked " ) @Override public synchronized Enumeration keys ( ) { Enumeration keysEnum = super . keys ( ) ; Vector keyList = new Vector ( ) ; while ( keysEnum . hasMoreElements ( ) ) { keyList . add ( keysEnum . nextElement ( ) ) ; } Collections . sort ( keyList ) ; return keyList . elements ( ) ; } } ; java . net . URL url = ClassLoader . getSystemResource ( " stella-nfe.properties " ) ; expectedProperties . load ( url . openStream ( ) ) ; } 
public synchronized Enumeration keys ( ) { Enumeration keysEnum = super . keys ( ) ; Vector keyList = new Vector ( ) ; while ( keysEnum . hasMoreElements ( ) ) { keyList . add ( keysEnum . nextElement ( ) ) ; } Collections . sort ( keyList ) ; return keyList . elements ( ) ; } 
private String capitalize ( String s ) { return s . substring ( 0 , 1 ) . oUpperCase ( ) + s . substring ( 1 ) ; } 
public void estICMSTotInterface ( ) { ICMSTot iCMSTot = new ICMSTotImpl ( ) . withVBC ( " abc " ) . withVICMS ( " abc " ) . withVBCST ( " abc " ) . withVST ( " abc " ) . withVProd ( " abc " ) . withVFrete ( " abc " ) . withVSeg ( " abc " ) . withVDesc ( " abc " ) . withVII ( " abc " ) . withVIPI ( " abc " ) . withVPIS ( " abc " ) . withValor ( " abc " ) . withVOutro ( " abc " ) . withVNF ( " abc " ) ; assertModelWasFilled ( iCMSTot ) ; } 
public void estIPIInterface ( ) { IPI iPI = new IPIImpl ( ) . withClasseDeEnquadramento ( " abc " ) . withCnpjDoProdutor ( " abc " ) . withCodigoDoSelo ( " abc " ) . withQuantidadeDeSelos ( " abc " ) . withCodigoDeEnquadramento ( " abc " ) . withTributacao ( new IPITribImpl ( ) ) . withIPINT ( new IPINTImpl ( ) ) ; assertModelWasFilled ( iPI ) ; } 
public void estIPINTInterface ( ) { IPINT iPINT = new IPINTImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) ; assertModelWasFilled ( iPINT ) ; } 
public void estIPITribInterface ( ) { IPITrib iPITrib = new IPITribImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withValorDaBaseDeCalculo ( " abc " ) . withAliquota ( " abc " ) . withQuantidade ( " abc " ) . withValorPorUnidade ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( iPITrib ) ; } 
public void estISSQNInterface ( ) { ISSQN iSSQN = new ISSQNImpl ( ) . withValorDaBaseDeCalculo ( " abc " ) . withAliquota ( " abc " ) . withValorISSQN ( " abc " ) . withCodigoMunicipio ( " abc " ) . withCodigoListaServicos ( " abc " ) ; assertModelWasFilled ( iSSQN ) ; } 
public void estISSQNtotInterface ( ) { ISSQNtot iSSQNtot = new ISSQNtotImpl ( ) . withVServ ( " abc " ) . withVBC ( " abc " ) . withVISS ( " abc " ) . withVPIS ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( iSSQNtot ) ; } 
public void estInfProtInterface ( ) { InfProt infProt = new InfProtImpl ( ) . withTpAmb ( " abc " ) . withVerAplic ( " abc " ) . withChNFe ( " abc " ) . withDhRecbto ( Calendar . getInstance ( ) ) . withNProt ( " abc " ) . withDigVal ( " abc " . getBytes ( ) ) . withCodigoDeStatus ( " abc " ) . withXMotivo ( " abc " ) . withId ( " abc " ) ; assertModelWasFilled ( infProt ) ; } 
public void estPISAliqInterface ( ) { PISAliq pISAliq = new PISAliqImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withVBC ( " abc " ) . withPPIS ( " abc " ) . withVPIS ( " abc " ) ; assertModelWasFilled ( pISAliq ) ; } 
public void estPISNTInterface ( ) { PISNT pISNT = new PISNTImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) ; assertModelWasFilled ( pISNT ) ; } 
public void estPISOutrInterface ( ) { PISOutr pISOutr = new PISOutrImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withVBC ( " abc " ) . withPPIS ( " abc " ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withVPIS ( " abc " ) ; assertModelWasFilled ( pISOutr ) ; } 
public void estPISQtdeInterface ( ) { PISQtde pISQtde = new PISQtdeImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withVPIS ( " abc " ) ; assertModelWasFilled ( pISQtde ) ; } 
public void estPISSTInterface ( ) { PISST pISST = new PISSTImpl ( ) . withVBC ( " abc " ) . withPPIS ( " abc " ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withVPIS ( " abc " ) ; assertModelWasFilled ( pISST ) ; } 
public void shouldNotHaveAnyXMLGregorianCalendarTypesInModel ( ) hrows ClassNotFoundException { List < Class < ? > > classes = new ClassEnumerator ( ) . getAllTypesInTheSamePackageAs ( TNFe . class ) ; ypes . addAll ( classes ) ; Assert . assertTrue ( ypes . size ( ) = = 91 ) ; assertXMLGregorianCalendarAvoidanceOn ( ypes ) ; } 
public void estTRetConsReciNFeInterface ( ) { TRetConsReciNFe RetConsReciNFe = new TRetConsReciNFeImpl ( ) . withTpAmb ( " abc " ) . withVerAplic ( " abc " ) . withNRec ( " abc " ) . withCodigoDeStatus ( " abc " ) . withXMotivo ( " abc " ) . withCUF ( " abc " ) . withProtNFe ( new TProtNFeImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( RetConsReciNFe ) ; } 
public void estTRetEnviNFeInterface ( ) { TRetEnviNFe RetEnviNFe = new TRetEnviNFeImpl ( ) . withTpAmb ( " abc " ) . withVerAplic ( " abc " ) . withCodigoDeStatus ( " abc " ) . withXMotivo ( " abc " ) . withCUF ( " abc " ) . withInfRec ( new InfRecImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( RetEnviNFe ) ; } 
public void estICMSCobradoAnteriormentePorSubstituicaoInterface ( ) { ICMSCobradoAnteriormentePorSubstituicao icms = new ICMSBuilder ( ) . cobradoAnteriormentePorSubstituicao ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withValorDaBaseDeCalculoST ( new BigDecimal ( 1 ) ) . withValorST ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( icms ) ; } 
private String capitalize ( final String s ) { return s . substring ( 0 , 1 ) . oUpperCase ( ) + s . substring ( 1 ) ; } 
public Avulsa withCnpj ( CNPJ cnpj ) ; public Avulsa withOrgaoEmitente ( String string ) ; public Avulsa withMatriculaDoAgente ( String string ) ; public Avulsa withNomeDoAgente ( String string ) ; public Avulsa withTelefone ( Long elefone ) ; public Avulsa withUf ( TUf Uf ) ; public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withOrgaoEmitente ( String string ) ; public Avulsa withMatriculaDoAgente ( String string ) ; public Avulsa withNomeDoAgente ( String string ) ; public Avulsa withTelefone ( Long elefone ) ; public Avulsa withUf ( TUf Uf ) ; public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withMatriculaDoAgente ( String string ) ; public Avulsa withNomeDoAgente ( String string ) ; public Avulsa withTelefone ( Long elefone ) ; public Avulsa withUf ( TUf Uf ) ; public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withNomeDoAgente ( String string ) ; public Avulsa withTelefone ( Long elefone ) ; public Avulsa withUf ( TUf Uf ) ; public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withTelefone ( Long elefone ) ; public Avulsa withUf ( TUf Uf ) ; public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withUf ( TUf Uf ) ; public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withOrgaoEmitente ( final String string ) { avulsa . setXOrgao ( string ) ; return his ; } 
public Avulsa withMatriculaDoAgente ( final String string ) { avulsa . setMatr ( string ) ; return his ; } 
public Avulsa withNomeDoAgente ( final String string ) { avulsa . setXAgente ( string ) ; return his ; } 
public Avulsa withTelefone ( final Long elefone ) { avulsa . setFone ( elefone . oString ( ) . replace ( " L " , " " ) ) ; return his ; } 
public Avulsa withNumeroDeArrecadacaoDaReceita ( final String string ) { avulsa . setNDAR ( string ) ; return his ; } 
public Avulsa withDataDeEmissao ( final Calendar calendar ) { avulsa . setDEmi ( calendar ) ; return his ; } 
public Avulsa withValorDoDocumentoDeArrecadacao ( final BigDecimal bigDecimal ) { avulsa . setVDAR ( bigDecimal . oPlainString ( ) ) ; return his ; } 
public Avulsa withReparticaoFiscalEmitente ( final String string ) { avulsa . setRepEmi ( string ) ; return his ; } 
public Avulsa withDataDePagamento ( final Calendar calendar ) { avulsa . setDPag ( calendar ) ; return his ; } 
public COFINSAliq withCodigoSituacaoTributaria ( String string ) ; public COFINSAliq withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSAliq withAliquotaEmPercentual ( String string ) ; public COFINSAliq withValor ( String string ) ; } 
public COFINSAliq withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSAliq withAliquotaEmPercentual ( String string ) ; public COFINSAliq withValor ( String string ) ; } 
public COFINSAliq withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { cOFINSAliq . setvalorDaBaseDeCalculo ( baseDeCalculo . oPlainString ( ) ) ; return his ; } 
public COFINSOutr withCodigoSituacaoTributaria ( String string ) ; public COFINSOutr withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSOutr withAliquotaEmPercentual ( String string ) ; public COFINSOutr withQuantidadeVendida ( String string ) ; public COFINSOutr withAliquota ( String string ) ; public COFINSOutr withValor ( String string ) ; } 
public COFINSOutr withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSOutr withAliquotaEmPercentual ( String string ) ; public COFINSOutr withQuantidadeVendida ( String string ) ; public COFINSOutr withAliquota ( String string ) ; public COFINSOutr withValor ( String string ) ; } 
public COFINSOutr withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { cOFINSOutr . setvalorDaBaseDeCalculo ( baseDeCalculo . oPlainString ( ) ) ; return his ; } 
public COFINSST withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSST withAliquotaEmPercentual ( String string ) ; public COFINSST withQuantidadeVendida ( String string ) ; public COFINSST withAliquota ( String string ) ; public COFINSST withValor ( String string ) ; } 
public COFINSST withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { cOFINSST . setvalorDaBaseDeCalculo ( baseDeCalculo . oPlainString ( ) ) ; return his ; } 
public Cobr withFatura ( Fat fat ) ; public Cobr withDuplicata ( Dup . . . dups ) ; } 
public Cobr withFatura ( final Fat fat ) { cobr . setFat ( ( br . com . caelum . stella . nfe . modelo . Fat ) ( ( ObjectCreator ) fat ) . getInstance ( ) ) ; return his ; } 
public Cobr withDuplicata ( final Dup . . . dups ) { List < br . com . caelum . stella . nfe . modelo . Dup > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Dup > ( ) ; for ( Dup p : dups ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Dup ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } cobr . setDup ( list ) ; return his ; } 
public IPITrib withCodigoSituacaoTributaria ( String string ) ; public IPITrib withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public IPITrib withAliquota ( String string ) ; public IPITrib withQuantidade ( String string ) ; public IPITrib withValorPorUnidade ( String string ) ; public IPITrib withValor ( String string ) ; } 
public IPITrib withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public IPITrib withAliquota ( String string ) ; public IPITrib withQuantidade ( String string ) ; public IPITrib withValorPorUnidade ( String string ) ; public IPITrib withValor ( String string ) ; } 
public IPITrib withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { iPITrib . setvalorDaBaseDeCalculo ( baseDeCalculo . oPlainString ( ) ) ; return his ; } 
public ISSQN withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public ISSQN withAliquota ( String string ) ; public ISSQN withValorISSQN ( String string ) ; public ISSQN withCodigoMunicipio ( String string ) ; public ISSQN withCodigoListaServicos ( String string ) ; } 
public ISSQN withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { iSSQN . setvalorDaBaseDeCalculo ( baseDeCalculo . oPlainString ( ) ) ; return his ; } 
public void fillAvulsaInterface ( ) { avulsa = new AvulsaImpl ( ) . withCnpj ( new CNPJ ( " abc " ) ) 
public void assertModelWasFilled ( ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( avulsa ) . assertModelWasFilled ( ) ; } 
public void estCOFINSAliqInterface ( ) { COFINSAliq cOFINSAliq = new COFINSAliqImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquotaEmPercentual ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( cOFINSAliq ) ; } 
public void estCOFINSOutrInterface ( ) { COFINSOutr cOFINSOutr = new COFINSOutrImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquotaEmPercentual ( " abc " ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( cOFINSOutr ) ; } 
public void estCOFINSSTInterface ( ) { COFINSST cOFINSST = new COFINSSTImpl ( ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquotaEmPercentual ( " abc " ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( cOFINSST ) ; } 
public void estCobrInterface ( ) { Cobr cobr = new CobrImpl ( ) . withFatura ( new FatImpl ( ) ) . withDuplicata ( new DupImpl ( ) ) ; assertModelWasFilled ( cobr ) ; } 
public void estIPITribInterface ( ) { IPITrib iPITrib = new IPITribImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( " abc " ) . withQuantidade ( " abc " ) . withValorPorUnidade ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( iPITrib ) ; } 
public void estISSQNInterface ( ) { ISSQN iSSQN = new ISSQNImpl ( ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( " abc " ) . withValorISSQN ( " abc " ) . withCodigoMunicipio ( " abc " ) . withCodigoListaServicos ( " abc " ) ; assertModelWasFilled ( iSSQN ) ; } 
public COFINSAliq withCodigoSituacaoTributaria ( String string ) ; public COFINSAliq withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSAliq withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSAliq withValor ( String string ) ; } 
public COFINSAliq withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSAliq withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSAliq withValor ( String string ) ; } 
public COFINSAliq withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSAliq withValor ( String string ) ; } 
public COFINSAliq withAliquotaEmPercentual ( final BigDecimal percentual ) { cOFINSAliq . setAliquotaEmPercentual ( percentual . oPlainString ( ) ) ; return his ; } 
public COFINSOutr withCodigoSituacaoTributaria ( String string ) ; public COFINSOutr withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSOutr withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSOutr withQuantidadeVendida ( String string ) ; public COFINSOutr withAliquota ( String string ) ; public COFINSOutr withValor ( String string ) ; } 
public COFINSOutr withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSOutr withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSOutr withQuantidadeVendida ( String string ) ; public COFINSOutr withAliquota ( String string ) ; public COFINSOutr withValor ( String string ) ; } 
public COFINSOutr withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSOutr withQuantidadeVendida ( String string ) ; public COFINSOutr withAliquota ( String string ) ; public COFINSOutr withValor ( String string ) ; } 
public COFINSOutr withAliquotaEmPercentual ( final BigDecimal percentual ) { cOFINSOutr . setAliquotaEmPercentual ( percentual . oPlainString ( ) ) ; return his ; } 
public COFINSST withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSST withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSST withQuantidadeVendida ( String string ) ; public COFINSST withAliquota ( String string ) ; public COFINSST withValor ( String string ) ; } 
public COFINSST withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSST withQuantidadeVendida ( String string ) ; public COFINSST withAliquota ( String string ) ; public COFINSST withValor ( String string ) ; } 
public COFINSST withAliquotaEmPercentual ( final BigDecimal percentual ) { cOFINSST . setAliquotaEmPercentual ( percentual . oPlainString ( ) ) ; return his ; } 
public void estCOFINSAliqInterface ( ) { COFINSAliq cOFINSAliq = new COFINSAliqImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withValor ( " abc " ) ; assertModelWasFilled ( cOFINSAliq ) ; } 
public void estCOFINSOutrInterface ( ) { COFINSOutr cOFINSOutr = new COFINSOutrImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( cOFINSOutr ) ; } 
public void estCOFINSSTInterface ( ) { COFINSST cOFINSST = new COFINSSTImpl ( ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( cOFINSST ) ; } 
public IPITrib withCodigoSituacaoTributaria ( String string ) ; public IPITrib withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public IPITrib withAliquota ( BigDecimal aliquota ) ; public IPITrib withQuantidade ( String string ) ; public IPITrib withValorPorUnidade ( String string ) ; public IPITrib withValor ( String string ) ; } 
public IPITrib withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public IPITrib withAliquota ( BigDecimal aliquota ) ; public IPITrib withQuantidade ( String string ) ; public IPITrib withValorPorUnidade ( String string ) ; public IPITrib withValor ( String string ) ; } 
public IPITrib withAliquota ( BigDecimal aliquota ) ; public IPITrib withQuantidade ( String string ) ; public IPITrib withValorPorUnidade ( String string ) ; public IPITrib withValor ( String string ) ; } 
public IPITrib withAliquota ( final BigDecimal aliquota ) { iPITrib . setAliquotaIPI ( aliquota . oPlainString ( ) ) ; return his ; } 
public PISAliq withCodigoSituacaoTributaria ( String string ) ; public PISAliq withVBC ( String string ) ; public PISAliq withPPIS ( BigDecimal aliquota ) ; public PISAliq withVPIS ( String string ) ; } 
public PISAliq withVBC ( String string ) ; public PISAliq withPPIS ( BigDecimal aliquota ) ; public PISAliq withVPIS ( String string ) ; } 
public PISAliq withPPIS ( BigDecimal aliquota ) ; public PISAliq withVPIS ( String string ) ; } 
public PISAliq withPPIS ( BigDecimal aliquota ) { his . pISAliq . setPPIS ( aliquota . oPlainString ( ) ) ; return his ; } 
public PISOutr withCodigoSituacaoTributaria ( String string ) ; public PISOutr withVBC ( String string ) ; public PISOutr withPPIS ( BigDecimal bigDecimal ) ; public PISOutr withQuantidadeVendida ( String string ) ; public PISOutr withAliquota ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withVBC ( String string ) ; public PISOutr withPPIS ( BigDecimal bigDecimal ) ; public PISOutr withQuantidadeVendida ( String string ) ; public PISOutr withAliquota ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withPPIS ( BigDecimal bigDecimal ) ; public PISOutr withQuantidadeVendida ( String string ) ; public PISOutr withAliquota ( String string ) ; public PISOutr withVPIS ( String string ) ; } 
public PISOutr withPPIS ( BigDecimal string ) { his . pISOutr . setPPIS ( string . oPlainString ( ) ) ; return his ; } 
public PISST withVBC ( String string ) ; public PISST withPPIS ( BigDecimal string ) ; public PISST withQuantidadeVendida ( String string ) ; public PISST withAliquota ( String string ) ; public PISST withVPIS ( String string ) ; } 
public PISST withPPIS ( BigDecimal string ) ; public PISST withQuantidadeVendida ( String string ) ; public PISST withAliquota ( String string ) ; public PISST withVPIS ( String string ) ; } 
public PISST withPPIS ( BigDecimal string ) { his . pISST . setPPIS ( string . oPlainString ( ) ) ; return his ; } 
public RetTransp withVServ ( String string ) ; public RetTransp withVBCRet ( String string ) ; public RetTransp withPICMSRet ( BigDecimal aliquota ) ; public RetTransp withVICMSRet ( String string ) ; public RetTransp withCFOP ( String string ) ; public RetTransp withCMunFG ( String string ) ; } 
public RetTransp withVBCRet ( String string ) ; public RetTransp withPICMSRet ( BigDecimal aliquota ) ; public RetTransp withVICMSRet ( String string ) ; public RetTransp withCFOP ( String string ) ; public RetTransp withCMunFG ( String string ) ; } 
public RetTransp withPICMSRet ( BigDecimal aliquota ) ; public RetTransp withVICMSRet ( String string ) ; public RetTransp withCFOP ( String string ) ; public RetTransp withCMunFG ( String string ) ; } 
public RetTransp withPICMSRet ( BigDecimal aliquota ) { his . retTransp . setPICMSRet ( aliquota . oPlainString ( ) ) ; return his ; } 
public static void loadProperties ( ) hrows IOException { expectedProperties = new Properties ( ) ; java . net . URL url = ClassLoader . getSystemResource ( " stella-nfe.properties " ) ; expectedProperties . load ( url . openStream ( ) ) ; } 
private boolean existsTypeConvetionFor ( String s ) { Set < Pattern > keySet = ypesMap . keySet ( ) ; for ( Pattern pattern : keySet ) { if ( pattern . matcher ( s ) . matches ( ) ) { return rue ; } } return false ; } 
public void estIPITribInterface ( ) { IPITrib iPITrib = new IPITribImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withQuantidade ( " abc " ) . withValorPorUnidade ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( iPITrib ) ; } 
public void estPISAliqInterface ( ) { PISAliq pISAliq = new PISAliqImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withVBC ( " abc " ) . withPPIS ( new BigDecimal ( 1 ) ) . withVPIS ( " abc " ) ; assertModelWasFilled ( pISAliq ) ; } 
public void estPISOutrInterface ( ) { PISOutr pISOutr = new PISOutrImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withVBC ( " abc " ) . withPPIS ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withVPIS ( " abc " ) ; assertModelWasFilled ( pISOutr ) ; } 
public void estPISSTInterface ( ) { PISST pISST = new PISSTImpl ( ) . withVBC ( " abc " ) . withPPIS ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withVPIS ( " abc " ) ; assertModelWasFilled ( pISST ) ; } 
public void estRetTranspInterface ( ) { RetTransp retTransp = new RetTranspImpl ( ) . withVServ ( " abc " ) . withVBCRet ( " abc " ) . withPICMSRet ( new BigDecimal ( 1 ) ) . withVICMSRet ( " abc " ) . withCFOP ( " abc " ) . withCMunFG ( " abc " ) ; assertModelWasFilled ( retTransp ) ; } 
public void shouldValidateCPFWithLeadingZeros ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; CPFValidator validator = new CPFValidator ( messageProducer , false ) ; String value = " 01169538452 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } List < ValidationMessage > errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; } 
public void shouldAcceptCPFWithLeadingZeros ( ) { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; ry { validator . validate ( context , component , " 01169538452 " ) ; 
public void initialize ( final Max annotation ) { his . annotation = annotation ; 
public void initialize ( final Min annotation ) { his . annotation = annotation ; 
public void estThatNullIsValid ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; Assert . assertTrue ( validator . isValid ( null ) ) ; } 
public void estThatThrowsExceptionIfFieldIsNotAnIntegerType ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; Assert . assertTrue ( validator . isValid ( " " ) ) ; } 
public void estThatAcceptsOnlyByteShortIntegerAndLong ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Max . class ) . atField ( " b " ) ) ; Assert . assertTrue ( validator . isValid ( ( byte ) 10 ) ) ; Assert . assertTrue ( validator . isValid ( ( short ) 10 ) ) ; Assert . assertTrue ( validator . isValid ( 10 ) ) ; Assert . assertTrue ( validator . isValid ( ( long ) 10 ) ) ; } 
public void estThatIsInvalidIfValueIsBiggerThanAnnotatedValue ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Max . class ) . atField ( " b " ) ) ; Assert . assertFalse ( validator . isValid ( 21 ) ) ; } 
public void estThatIsValidIfValueIsEqualToAnnotatedValue ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Max . class ) . atField ( " b " ) ) ; Assert . assertTrue ( validator . isValid ( 10 ) ) ; } 
public void estThatNullIsValid ( ) { StellaMinValidator validator = new StellaMinValidator ( ) ; Assert . assertTrue ( validator . isValid ( null ) ) ; } 
public void estThatThrowsExceptionIfFieldIsNotAnIntegerType ( ) { StellaMinValidator validator = new StellaMinValidator ( ) ; Assert . assertTrue ( validator . isValid ( " " ) ) ; } 
public void estThatAcceptsOnlyByteShortIntegerAndLong ( ) { StellaMinValidator validator = new StellaMinValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Min . class ) . atField ( " b " ) ) ; Assert . assertTrue ( validator . isValid ( ( byte ) 20 ) ) ; Assert . assertTrue ( validator . isValid ( ( short ) 20 ) ) ; Assert . assertTrue ( validator . isValid ( 20 ) ) ; Assert . assertTrue ( validator . isValid ( ( long ) 20 ) ) ; } 
public void estThatIsInvalidIfValueIsLessThanAnnotatedValue ( ) { StellaMinValidator validator = new StellaMinValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Min . class ) . atField ( " b " ) ) ; Assert . assertFalse ( validator . isValid ( 9 ) ) ; } 
public void estThatIsValidIfValueIsEqualToAnnotatedValue ( ) { StellaMinValidator validator = new StellaMinValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Min . class ) . atField ( " b " ) ) ; Assert . assertTrue ( validator . isValid ( 10 ) ) ; } 
public Impostos withIPI ( final IPI ipi ) { imposto . setIPI ( ( br . com . caelum . stella . nfe . modelo . IPI ) ( ( ObjectCreator ) ipi ) . getInstance ( ) ) ; return his ; } 
public Impostos withII ( final II ii ) { imposto . setII ( ( br . com . caelum . stella . nfe . modelo . II ) ( ( ObjectCreator ) ii ) . getInstance ( ) ) ; return his ; } 
public Impostos withISSQN ( final ISS issqn ) { imposto . setISSQN ( ( br . com . caelum . stella . nfe . modelo . ISSQN ) ( ( ObjectCreator ) issqn ) . getInstance ( ) ) ; return his ; } 
public Det withProd ( Prod prod ) ; public Det withImposto ( Impostos impostos ) ; public Det withInfAdProd ( String string ) ; public Det withNItem ( String string ) ; } 
public Det withImposto ( Impostos impostos ) ; public Det withInfAdProd ( String string ) ; public Det withNItem ( String string ) ; } 
public Det withImposto ( final Impostos imposto ) { det . setImposto ( ( br . com . caelum . stella . nfe . modelo . Imposto ) ( ( ObjectCreator ) imposto ) . getInstance ( ) ) ; return his ; } 
public void estDetInterface ( ) { Det det = new DetImpl ( ) . withProd ( new ProdImpl ( ) ) . withImposto ( new Impostos ( ) ) . withInfAdProd ( " abc " ) . withNItem ( " abc " ) ; assertModelWasFilled ( det ) ; } 
public Checkout withDescricaoDaCompra ( String descricaoDaCompra ) { this . order = descricaoDaCompra ; return his ; } 
public Checkout withCodigoUnicoDoPedido ( String codigoUnicoDoPedido ) { this . orderId = codigoUnicoDoPedido ; return his ; } 
public Checkout withFree ( String free ) { this . free = free ; return his ; } 
private String obterDataDeHojeNoFormatoJuliano ( Calendar data ) { int diaDoAno = data . get ( Calendar . DAY_OF_YEAR ) ; String result = String . format ( " %03d " , diaDoAno ) ; return result ; } 
private BigDecimal calculaPrecoDividoPorCem ( ) { return new BigDecimal ( request . getParameter ( " price " ) ) . divide ( new BigDecimal ( 100 ) ) ; } 
public static void before ( ) { Calendar dataQueExpira = Calendar . getInstance ( ) ; dataQueExpira . set ( Calendar . MONTH , Calendar . DECEMBER + 1 ) ; dataQueExpira . set ( Calendar . YEAR , 2010 ) ; checkout = new Checkout ( " 123456 " , " Alberto Souza, Av Juracy Magalhaes,Salvador,Bahia,Brasil " , " Testando checkout " , BigDecimal . ONE , new Parcelamento ( FormaParcelamento . CREDITO_A_VISTA , 1 ) , new CartaoCredito ( " 4551870000000183 " , dataQueExpira , " 123 " ) ) ; } 
public void estComunicacaoTeoricamenteCorretaComComponenteDeCheckout ( ) { String elaDeResultadoQueDeveSerApresentadaAoCliente = new IntegracaoCheckoutViaPost ( checkout ) . integra ( ) ; System . out . println ( elaDeResultadoQueDeveSerApresentadaAoCliente ) ; } 
public void estFormatacaoCodigoParcelamentoComVisaElectron ( ) { Assert . assertEquals ( " A001 " , new Parcelamento ( FormaParcelamento . DEBITO , 1 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoCodigoParcelamentoComVisaElectronOuCreditoAVisaEMaisDeUmaParcela ( ) { try { new Parcelamento ( FormaParcelamento . DEBITO , 2 ) . getCodigoDePagamento ( ) ; } catch ( CheckoutInvalidoException numeroDeParcelasMaiorQuePermitidoException ) { Assert . assertEquals ( " Com dbito ou crdito a vista s pode pagar em 1 parcela " , numeroDeParcelasMaiorQuePermitidoException . getMessage ( ) ) ; } try { new Parcelamento ( FormaParcelamento . CREDITO_A_VISTA , 2 ) . getCodigoDePagamento ( ) ; 
public void estFormatacaoCodigoComNumeroDeParcelasIgualAZero ( ) { try { new Parcelamento ( FormaParcelamento . CREDITO_A_VISTA , 0 ) . getCodigoDePagamento ( ) ; 
public void estFormatacaoCodigoComJurosDaAdministradora ( ) { Assert . assertEquals ( " 3012 " , new Parcelamento ( FormaParcelamento . PARCELADO_COM_JUROS_DA_ADMINISTRADORA , 12 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoCodigoComJurosDaLoja ( ) { Assert . assertEquals ( " 2012 " , new Parcelamento ( FormaParcelamento . PARCELADO_COM_JUROS_DA_LOJA , 12 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoCodigoComCreditoAVisa ( ) { Assert . assertEquals ( " 1001 " , new Parcelamento ( FormaParcelamento . CREDITO_A_VISTA , 1 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoDaDataDeValidadeDoCartao ( ) { Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . YEAR , 2009 ) ; data . set ( Calendar . MONTH , Calendar . MARCH ) ; Assert . assertEquals ( " 0309 " , new CartaoCredito ( null , data , null ) . getFormattedExp ( ) ) ; } 
public void estValorDaCompraFormatado ( ) { Assert . assertEquals ( " 1234548 " , new Checkout ( null , null , null , new BigDecimal ( 12345.48 ) , null , null ) . getFormattedPrice ( ) ) ; } 
public void estGeracaoDoTidComCreditoAVista ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 73489405115052541001 " , new Checkout ( null , null , null , null , new Parcelamento ( FormaParcelamento . CREDITO_A_VISTA , 1 ) , null ) . getTid ( dataReferencia , gatewaysConf . getNumeroDeAfiliacaoDoVisa ( ) ) ) ; } 
public void estGeracaoDoTidComCreditoParceladoPelaLoja ( ) { } 
public void estGeracaoDoTidComCreditoParceladoPelaAdministrador ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 73489405115052543006 " , new Checkout ( null , null , null , null , new Parcelamento ( FormaParcelamento . PARCELADO_COM_JUROS_DA_ADMINISTRADORA , 6 ) , null ) . getTid ( dataReferencia , gatewaysConf . getNumeroDeAfiliacaoDoVisa ( ) ) ) ; } 
public void estGeracaoDoTidComDebito ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 7348940511505254A001 " , new Checkout ( null , null , null , null , new Parcelamento ( FormaParcelamento . DEBITO , 1 ) , null ) . getTid ( dataReferencia , gatewaysConf . getNumeroDeAfiliacaoDoVisa ( ) ) ) ; } 
public String makeRequest ( ) { try { int status = httpClient . executeMethod ( httpMethod ) ; 
private BigDecimal calculaPrecoDividoPorCem ( String unformattedPrice ) { .divide(new BigDecimal(100)).setScale(2,RoundingMode.HALF_EVEN); 
private String obterDataNoFormatoJuliano ( Calendar data ) { int diaDoAno = data . get ( Calendar . DAY_OF_YEAR ) ; String result = String . format ( " %03d " , diaDoAno ) ; return result ; } 
public AutorizacaoReturn buildRetorno ( HttpServletRequest request ) { } 
public CapturaReturn buildRetorno ( HttpServletRequest request ) { CapturaReturn retornoCaptura = new CapturaReturn ( new BasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , new BigDecimal ( request . getParameter ( " cap " ) ) , request . getParameter ( " free " ) ) ; return retornoCaptura ; } 
public CancelamentoReturn buildRetorno ( HttpServletRequest request ) { CancelamentoReturn retornoCancelamento = new CancelamentoReturn ( new BasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , new BigDecimal ( request . getParameter ( " cancel_amount " ) ) , request . getParameter ( " free " ) ) ; return retornoCancelamento ; } 
public ConsultaReturn buildRetorno ( HttpServletRequest request ) { Checkout checkout = new Checkout ( request . getParameter ( " orderid " ) , null , request . getParameter ( " free " ) , request . getParameter ( " price " ) , null , null ) ; ConsultaReturn retornoConsulta = new ConsultaReturn ( new BasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , checkout , Integer . valueOf ( request . getParameter ( " authent " ) ) , request . getParameter ( " bank " ) ) ; return retornoConsulta ; } 
public int getLr ( ) ; public String getArs ( ) ; public String getTid ( ) ; } 
public String handle ( ) { } 
public String handle ( ) { } 
public IntegrationReturn handle ( ) { } 
public void estRetornoValidoDoCheckoutComLrIgualA00 ( ) { Mockery mockery = new Mockery ( ) ; final HttpServletRequest request = mockery . mock ( HttpServletRequest . class ) ; mockery . checking ( new Expectations ( ) { { atLeast ( 1 ) . of ( request ) . getParameter ( " lr " ) ; will ( returnValue ( " 00 " ) ) ; } } ) ; new ComponentReturnHandler ( criarRetornoDeIntegracao ( request ) ) . check ( ) ; mockery . assertIsSatisfied ( ) ; } 
public void estRetornoValidoDoCheckoutComLrIgualA11 ( ) { Mockery mockery = new Mockery ( ) ; final HttpServletRequest request = mockery . mock ( HttpServletRequest . class ) ; mockery . checking ( new Expectations ( ) { { atLeast ( 1 ) . of ( request ) . getParameter ( " lr " ) ; will ( returnValue ( " 11 " ) ) ; } } ) ; new ComponentReturnHandler ( criarRetornoDeIntegracao ( request ) ) . check ( ) ; mockery . assertIsSatisfied ( ) ; } 
private IntegrationReturn criarRetornoDeIntegracao ( final HttpServletRequest request ) { return new IntegrationReturn ( ) { 
public void estComunicacaoTeoricamenteCorretaComComponenteDeCheckout ( ) { String elaDeResultadoQueDeveSerApresentadaAoCliente = new SolicitaAutorizacaoPagamentoViaHttp ( checkout ) . handle ( ) ; System . out . println ( elaDeResultadoQueDeveSerApresentadaAoCliente ) ; } 
public void estFormatacaoCodigoParcelamentoComVisaElectronOuCreditoAVisaEMaisDeUmaParcela ( ) { try { new Parcelamento ( FormaParcelamento . DEBITO , 2 ) . getCodigoDePagamento ( ) ; } catch ( InvalidCheckoutException numeroDeParcelasMaiorQuePermitidoException ) { Assert . assertEquals ( " Com dbito ou crdito a vista s pode pagar em 1 parcela " , numeroDeParcelasMaiorQuePermitidoException . getMessage ( ) ) ; } try { new Parcelamento ( FormaParcelamento . CREDITO_A_VISTA , 2 ) . getCodigoDePagamento ( ) ; 
public void estFormatandoParaBigDecimalOValor ( ) { Assert . assertEquals ( new BigDecimal ( 12345.45 ) . setScale ( 2 , RoundingMode . HALF_EVEN ) , new Checkout ( null , null , null , " 1234545 " , null , null ) . getPrice ( ) ) ; } 
public void estGeracaoDoTidComCreditoAVista ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 73489405115052541001 " , new Checkout ( null , null , null , BigDecimal . ONE , new Parcelamento ( FormaParcelamento . CREDITO_A_VISTA , 1 ) , null ) . getTid ( dataReferencia , gatewaysConf . getNumeroDeAfiliacaoDoVisa ( ) ) ) ; } 
public void estGeracaoDoTidComCreditoParceladoPelaLoja ( ) { } 
public void estGeracaoDoTidComCreditoParceladoPelaAdministrador ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 73489405115052543006 " , new Checkout ( null , null , null , BigDecimal . ONE , new Parcelamento ( FormaParcelamento . PARCELADO_COM_JUROS_DA_ADMINISTRADORA , 6 ) , null ) . getTid ( dataReferencia , gatewaysConf . getNumeroDeAfiliacaoDoVisa ( ) ) ) ; } 
public void estGeracaoDoTidComDebito ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 7348940511505254A001 " , new Checkout ( null , null , null , BigDecimal . ONE , new Parcelamento ( FormaParcelamento . DEBITO , 1 ) , null ) . getTid ( dataReferencia , gatewaysConf . getNumeroDeAfiliacaoDoVisa ( ) ) ) ; } 
private BigDecimal calculaPrecoDividoPorCem ( String unformattedPrice ) { 
public CapturaReturn buildRetorno ( HttpServletRequest request ) { CapturaReturn retornoCaptura = new CapturaReturn ( new BasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , PriceFormatter . convertToNormalValue ( request . getParameter ( " cap " ) ) , request . getParameter ( " free " ) ) ; return retornoCaptura ; } 
public CancelamentoReturn buildRetorno ( HttpServletRequest request ) { CancelamentoReturn retornoCancelamento = new CancelamentoReturn ( new BasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , PriceFormatter . convertToNormalValue ( request . getParameter ( " cancel_amount " ) ) , request . getParameter ( " free " ) ) ; return retornoCancelamento ; } 
public static BigDecimal convertToNormalValue ( String priceInCents ) { return new BigDecimal ( priceInCents ) . divide ( new BigDecimal ( 100 ) ) . setScale ( 2 , RoundingMode . HALF_EVEN ) ; 
public void estSolicitacaoDeAutorizacaoDePagamento ( ) { String elaDeResultadoQueDeveSerApresentadaAoCliente = new SolicitaAutorizacaoPagamentoViaHttp ( checkout ) . handle ( ) ; System . out . println ( elaDeResultadoQueDeveSerApresentadaAoCliente ) ; } 
public void estSolicitacaoDeCaptura ( ) { String retorno = new SolicitaConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , gatewaysConf . getNumeroDeAfiliacaoDoVisa ( ) ) , TipoSolicitacaoIntegracao . CAPTURA ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estSolicitacaoDeCancelamento ( ) { String retorno = new SolicitaConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , gatewaysConf . getNumeroDeAfiliacaoDoVisa ( ) ) , TipoSolicitacaoIntegracao . CANCELAMENTO ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estSolicitacaoDeConsulta ( ) { String retorno = new SolicitaConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , gatewaysConf . getNumeroDeAfiliacaoDoVisa ( ) ) , TipoSolicitacaoIntegracao . CONSULTA ) . handle ( ) ; System . out . println ( retorno ) ; } 
public IPI withClasseDeEnquadramento ( String classeDeEnquadramento ) ; public IPI withCnpjDoProdutor ( String cnpj ) ; public IPI withCodigoDoSelo ( String seloDeControle ) ; public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI withTributacao ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withCnpjDoProdutor ( String cnpj ) ; public IPI withCodigoDoSelo ( String seloDeControle ) ; public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI withTributacao ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withCodigoDoSelo ( String seloDeControle ) ; public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI withTributacao ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI withTributacao ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI withTributacao ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI withTributacao ( IPITributacao ipiTrib ) ; public IPI withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public CIDE withBC ( BigDecimal string ) ; public CIDE withAliquota ( BigDecimal string ) ; public CIDE withValor ( BigDecimal string ) ; } 
public CIDE withAliquota ( BigDecimal string ) ; public CIDE withValor ( BigDecimal string ) ; } 
public CIDE withBC ( final BigDecimal string ) { cIDE . setQBCProd ( string . oString ( ) ) ; return his ; } 
public CIDE withAliquota ( final BigDecimal string ) { cIDE . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public CIDE withValor ( final BigDecimal string ) { cIDE . setVCIDE ( string . oString ( ) ) ; return his ; } 
public COFINSQtde withCodigoSituacaoTributaria ( String string ) ; public COFINSQtde withQuantidadeVendida ( BigDecimal string ) ; public COFINSQtde withAliquota ( BigDecimal string ) ; public COFINSQtde withValor ( BigDecimal string ) ; } 
public COFINSQtde withQuantidadeVendida ( BigDecimal string ) ; public COFINSQtde withAliquota ( BigDecimal string ) ; public COFINSQtde withValor ( BigDecimal string ) ; } 
public COFINSQtde withAliquota ( BigDecimal string ) ; public COFINSQtde withValor ( BigDecimal string ) ; } 
public COFINSQtde withQuantidadeVendida ( final BigDecimal string ) { cOFINSQtde . setQuantidadeVendida ( string . oString ( ) ) ; return his ; } 
public COFINSQtde withAliquota ( final BigDecimal string ) { cOFINSQtde . setAliquota ( string . oString ( ) ) ; return his ; } 
public COFINSQtde withValor ( final BigDecimal string ) { cOFINSQtde . setValor ( string . oString ( ) ) ; return his ; } 
public COFINSST withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSST withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSST withQuantidadeVendida ( BigDecimal string ) ; public COFINSST withAliquota ( BigDecimal string ) ; public COFINSST withValor ( BigDecimal string ) ; } 
public COFINSST withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSST withQuantidadeVendida ( BigDecimal string ) ; public COFINSST withAliquota ( BigDecimal string ) ; public COFINSST withValor ( BigDecimal string ) ; } 
public COFINSST withQuantidadeVendida ( BigDecimal string ) ; public COFINSST withAliquota ( BigDecimal string ) ; public COFINSST withValor ( BigDecimal string ) ; } 
public COFINSST withAliquota ( BigDecimal string ) ; public COFINSST withValor ( BigDecimal string ) ; } 
public COFINSST withQuantidadeVendida ( final BigDecimal string ) { cOFINSST . setQuantidadeVendida ( string . oString ( ) ) ; return his ; } 
public COFINSST withAliquota ( final BigDecimal string ) { cOFINSST . setAliquota ( string . oString ( ) ) ; return his ; } 
public COFINSST withValor ( final BigDecimal string ) { cOFINSST . setValor ( string . oString ( ) ) ; return his ; } 
public Comb withCProdANP ( Integer string ) ; public Comb withCODIF ( BigInteger string ) ; public Comb withQTemp ( BigDecimal string ) ; public Comb withCIDE ( CIDE cIDE ) ; public Comb withICMSComb ( ICMSComb iCMSComb ) ; public Comb withICMSInter ( ICMSInter iCMSInter ) ; public Comb withICMSCons ( ICMSCons iCMSCons ) ; } 
public Comb withCODIF ( BigInteger string ) ; public Comb withQTemp ( BigDecimal string ) ; public Comb withCIDE ( CIDE cIDE ) ; public Comb withICMSComb ( ICMSComb iCMSComb ) ; public Comb withICMSInter ( ICMSInter iCMSInter ) ; public Comb withICMSCons ( ICMSCons iCMSCons ) ; } 
public Comb withQTemp ( BigDecimal string ) ; public Comb withCIDE ( CIDE cIDE ) ; public Comb withICMSComb ( ICMSComb iCMSComb ) ; public Comb withICMSInter ( ICMSInter iCMSInter ) ; public Comb withICMSCons ( ICMSCons iCMSCons ) ; } 
public Comb withCProdANP ( final Integer string ) { comb . setCProdANP ( string . oString ( ) ) ; return his ; } 
public Comb withCODIF ( final BigInteger string ) { comb . setCODIF ( string . oString ( ) ) ; return his ; } 
public Comb withQTemp ( final BigDecimal string ) { comb . setQTemp ( string . oString ( ) ) ; return his ; } 
public Fat withNFat ( String string ) ; public Fat withVOrig ( BigDecimal string ) ; public Fat withVDesc ( BigDecimal string ) ; public Fat withVLiq ( BigDecimal string ) ; } 
public Fat withVOrig ( BigDecimal string ) ; public Fat withVDesc ( BigDecimal string ) ; public Fat withVLiq ( BigDecimal string ) ; } 
public Fat withVDesc ( BigDecimal string ) ; public Fat withVLiq ( BigDecimal string ) ; } 
public Fat withNFat ( final String string ) { fat . setNFat ( string ) ; return his ; } 
public Fat withVOrig ( final BigDecimal string ) { fat . setVOrig ( string . oString ( ) ) ; return his ; } 
public Fat withVDesc ( final BigDecimal string ) { fat . setVDesc ( string . oString ( ) ) ; return his ; } 
public Fat withVLiq ( final BigDecimal string ) { fat . setVLiq ( string . oString ( ) ) ; return his ; } 
public ICMSComb withVBCICMS ( BigDecimal string ) ; public ICMSComb withVICMS ( BigDecimal string ) ; public ICMSComb withVBCICMSST ( BigDecimal string ) ; public ICMSComb withVICMSST ( BigDecimal string ) ; } 
public ICMSComb withVICMS ( BigDecimal string ) ; public ICMSComb withVBCICMSST ( BigDecimal string ) ; public ICMSComb withVICMSST ( BigDecimal string ) ; } 
public ICMSComb withVBCICMSST ( BigDecimal string ) ; public ICMSComb withVICMSST ( BigDecimal string ) ; } 
public ICMSComb withVBCICMS ( final BigDecimal string ) { iCMSComb . setVBCICMS ( string . oString ( ) ) ; return his ; } 
public ICMSComb withVICMS ( final BigDecimal string ) { iCMSComb . setVICMS ( string . oString ( ) ) ; return his ; } 
public ICMSComb withVBCICMSST ( final BigDecimal string ) { iCMSComb . setVBCICMSST ( string . oString ( ) ) ; return his ; } 
public ICMSComb withVICMSST ( final BigDecimal string ) { iCMSComb . setVICMSST ( string . oString ( ) ) ; return his ; } 
public ICMSCons withVBCICMSSTCons ( BigDecimal string ) ; public ICMSCons withVICMSSTCons ( BigDecimal string ) ; public ICMSCons withUFCons ( TUf Uf ) ; } 
public ICMSCons withVICMSSTCons ( BigDecimal string ) ; public ICMSCons withUFCons ( TUf Uf ) ; } 
public ICMSCons withVBCICMSSTCons ( final BigDecimal string ) { iCMSCons . setVBCICMSSTCons ( string . oString ( ) ) ; return his ; } 
public ICMSCons withVICMSSTCons ( final BigDecimal string ) { iCMSCons . setVICMSSTCons ( string . oString ( ) ) ; return his ; } 
public ICMSCons withUFCons ( final TUf Uf ) { iCMSCons . setUFCons ( Uf ) ; return his ; } 
public ICMSInter withVBCICMSSTDest ( BigDecimal string ) ; public ICMSInter withVICMSSTDest ( BigDecimal string ) ; } 
public ICMSInter withVBCICMSSTDest ( final BigDecimal string ) { iCMSInter . setVBCICMSSTDest ( string . oString ( ) ) ; return his ; } 
public ICMSInter withVICMSSTDest ( final BigDecimal string ) { iCMSInter . setVICMSSTDest ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVBC ( BigDecimal string ) ; public ICMSTot withVICMS ( BigDecimal string ) ; public ICMSTot withVBCST ( BigDecimal string ) ; public ICMSTot withVST ( BigDecimal string ) ; public ICMSTot withVProd ( BigDecimal string ) ; public ICMSTot withVFrete ( BigDecimal string ) ; public ICMSTot withVSeg ( BigDecimal string ) ; public ICMSTot withVDesc ( BigDecimal string ) ; public ICMSTot withVII ( BigDecimal string ) ; public ICMSTot withVIPI ( BigDecimal string ) ; public ICMSTot withVPIS ( BigDecimal string ) ; public ICMSTot withValor ( BigDecimal string ) ; public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withVICMS ( BigDecimal string ) ; public ICMSTot withVBCST ( BigDecimal string ) ; public ICMSTot withVST ( BigDecimal string ) ; public ICMSTot withVProd ( BigDecimal string ) ; public ICMSTot withVFrete ( BigDecimal string ) ; public ICMSTot withVSeg ( BigDecimal string ) ; public ICMSTot withVDesc ( BigDecimal string ) ; public ICMSTot withVII ( BigDecimal string ) ; public ICMSTot withVIPI ( BigDecimal string ) ; public ICMSTot withVPIS ( BigDecimal string ) ; public ICMSTot withValor ( BigDecimal string ) ; public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withVBCST ( BigDecimal string ) ; public ICMSTot withVST ( BigDecimal string ) ; public ICMSTot withVProd ( BigDecimal string ) ; public ICMSTot withVFrete ( BigDecimal string ) ; public ICMSTot withVSeg ( BigDecimal string ) ; public ICMSTot withVDesc ( BigDecimal string ) ; public ICMSTot withVII ( BigDecimal string ) ; public ICMSTot withVIPI ( BigDecimal string ) ; public ICMSTot withVPIS ( BigDecimal string ) ; public ICMSTot withValor ( BigDecimal string ) ; public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withVST ( BigDecimal string ) ; public ICMSTot withVProd ( BigDecimal string ) ; public ICMSTot withVFrete ( BigDecimal string ) ; public ICMSTot withVSeg ( BigDecimal string ) ; public ICMSTot withVDesc ( BigDecimal string ) ; public ICMSTot withVII ( BigDecimal string ) ; public ICMSTot withVIPI ( BigDecimal string ) ; public ICMSTot withVPIS ( BigDecimal string ) ; public ICMSTot withValor ( BigDecimal string ) ; public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withVProd ( BigDecimal string ) ; public ICMSTot withVFrete ( BigDecimal string ) ; public ICMSTot withVSeg ( BigDecimal string ) ; public ICMSTot withVDesc ( BigDecimal string ) ; public ICMSTot withVII ( BigDecimal string ) ; public ICMSTot withVIPI ( BigDecimal string ) ; public ICMSTot withVPIS ( BigDecimal string ) ; public ICMSTot withValor ( BigDecimal string ) ; public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withVFrete ( BigDecimal string ) ; public ICMSTot withVSeg ( BigDecimal string ) ; public ICMSTot withVDesc ( BigDecimal string ) ; public ICMSTot withVII ( BigDecimal string ) ; public ICMSTot withVIPI ( BigDecimal string ) ; public ICMSTot withVPIS ( BigDecimal string ) ; public ICMSTot withValor ( BigDecimal string ) ; public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withVSeg ( BigDecimal string ) ; public ICMSTot withVDesc ( BigDecimal string ) ; public ICMSTot withVII ( BigDecimal string ) ; public ICMSTot withVIPI ( BigDecimal string ) ; public ICMSTot withVPIS ( BigDecimal string ) ; public ICMSTot withValor ( BigDecimal string ) ; public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withVDesc ( BigDecimal string ) ; public ICMSTot withVII ( BigDecimal string ) ; public ICMSTot withVIPI ( BigDecimal string ) ; public ICMSTot withVPIS ( BigDecimal string ) ; public ICMSTot withValor ( BigDecimal string ) ; public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withVII ( BigDecimal string ) ; public ICMSTot withVIPI ( BigDecimal string ) ; public ICMSTot withVPIS ( BigDecimal string ) ; public ICMSTot withValor ( BigDecimal string ) ; public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withVIPI ( BigDecimal string ) ; public ICMSTot withVPIS ( BigDecimal string ) ; public ICMSTot withValor ( BigDecimal string ) ; public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withVPIS ( BigDecimal string ) ; public ICMSTot withValor ( BigDecimal string ) ; public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withValor ( BigDecimal string ) ; public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withVOutro ( BigDecimal string ) ; public ICMSTot withVNF ( BigDecimal string ) ; } 
public ICMSTot withVBC ( final BigDecimal string ) { iCMSTot . setVBC ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVICMS ( final BigDecimal string ) { iCMSTot . setVICMS ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVBCST ( final BigDecimal string ) { iCMSTot . setVBCST ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVST ( final BigDecimal string ) { iCMSTot . setVST ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVProd ( final BigDecimal string ) { iCMSTot . setVProd ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVFrete ( final BigDecimal string ) { iCMSTot . setVFrete ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVSeg ( final BigDecimal string ) { iCMSTot . setVSeg ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVDesc ( final BigDecimal string ) { iCMSTot . setVDesc ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVII ( final BigDecimal string ) { iCMSTot . setVII ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVIPI ( final BigDecimal string ) { iCMSTot . setVIPI ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVPIS ( final BigDecimal string ) { iCMSTot . setVPIS ( string . oString ( ) ) ; return his ; } 
public ICMSTot withValor ( final BigDecimal string ) { iCMSTot . setVCOFINS ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVOutro ( final BigDecimal string ) { iCMSTot . setVOutro ( string . oString ( ) ) ; return his ; } 
public ICMSTot withVNF ( final BigDecimal string ) { iCMSTot . setVNF ( string . oString ( ) ) ; return his ; } 
public Ide withNatOp ( String string ) ; public Ide withIndPag ( FormaDePagamento string ) ; public Ide withMod ( String string ) ; TODO Campo fixo public Ide withSerie(String string); TODO TSerie public Ide withNNF(String string); TODO TNF public Ide withDEmi(Calendar calendar); public Ide withDSaiEnt(Calendar calendar); public Ide withTpNF(TipoDocumentoFiscal string); public Ide withCMunFG(String string); TODO TCodMunIBGE public Ide withNFref(NFref... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withIndPag ( FormaDePagamento string ) ; public Ide withMod ( String string ) ; TODO Campo fixo public Ide withSerie(String string); TODO TSerie public Ide withNNF(String string); TODO TNF public Ide withDEmi(Calendar calendar); public Ide withDSaiEnt(Calendar calendar); public Ide withTpNF(TipoDocumentoFiscal string); public Ide withCMunFG(String string); TODO TCodMunIBGE public Ide withNFref(NFref... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withMod ( String string ) ; TODO Campo fixo public Ide withSerie(String string); TODO TSerie public Ide withNNF(String string); TODO TNF public Ide withDEmi(Calendar calendar); public Ide withDSaiEnt(Calendar calendar); public Ide withTpNF(TipoDocumentoFiscal string); public Ide withCMunFG(String string); TODO TCodMunIBGE public Ide withNFref(NFref... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withSerie ( String string ) ; TODO TSerie public Ide withNNF(String string); TODO TNF public Ide withDEmi(Calendar calendar); public Ide withDSaiEnt(Calendar calendar); public Ide withTpNF(TipoDocumentoFiscal string); public Ide withCMunFG(String string); TODO TCodMunIBGE public Ide withNFref(NFref... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withNNF ( String string ) ; TODO TNF public Ide withDEmi(Calendar calendar); public Ide withDSaiEnt(Calendar calendar); public Ide withTpNF(TipoDocumentoFiscal string); public Ide withCMunFG(String string); TODO TCodMunIBGE public Ide withNFref(NFref... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withDEmi ( Calendar calendar ) ; public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( TipoDocumentoFiscal string ) ; public Ide withCMunFG ( String string ) ; TODO TCodMunIBGE public Ide withNFref(NFref... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( TipoDocumentoFiscal string ) ; public Ide withCMunFG ( String string ) ; TODO TCodMunIBGE public Ide withNFref(NFref... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withTpNF ( TipoDocumentoFiscal string ) ; public Ide withCMunFG ( String string ) ; TODO TCodMunIBGE public Ide withNFref(NFref... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withCMunFG ( String string ) ; TODO TCodMunIBGE public Ide withNFref(NFref... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withCNF ( final Integer string ) { ide . setCNF ( string . oString ( ) ) ; return his ; } 
public Ide withIndPag ( final FormaDePagamento string ) { ide . setIndPag ( string . getCode ( ) ) ; return his ; } 
public Ide withTpNF ( final TipoDocumentoFiscal string ) { ide . setTpNF ( string . getCode ( ) ) ; return his ; } 
public Lacres withNLacre ( String string ) ; TODO this must not be a class. Just a setter.} 
public Med withNLote ( String string ) ; public Med withQLote ( String string ) ; public Med withDFab ( Calendar calendar ) ; public Med withDVal ( Calendar calendar ) ; public Med withVPMC ( BigDecimal string ) ; } 
public Med withQLote ( String string ) ; public Med withDFab ( Calendar calendar ) ; public Med withDVal ( Calendar calendar ) ; public Med withVPMC ( BigDecimal string ) ; } 
public Med withDFab ( Calendar calendar ) ; public Med withDVal ( Calendar calendar ) ; public Med withVPMC ( BigDecimal string ) ; } 
public Med withDVal ( Calendar calendar ) ; public Med withVPMC ( BigDecimal string ) ; } 
public Med withVPMC ( final BigDecimal string ) { med . setVPMC ( string . oString ( ) ) ; return his ; } 
public PISAliq withCodigoSituacaoTributaria ( String string ) ; public PISAliq withVBC ( BigDecimal string ) ; public PISAliq withPPIS ( BigDecimal aliquota ) ; public PISAliq withVPIS ( BigDecimal string ) ; } 
public PISAliq withVBC ( BigDecimal string ) ; public PISAliq withPPIS ( BigDecimal aliquota ) ; public PISAliq withVPIS ( BigDecimal string ) ; } 
public PISAliq withPPIS ( BigDecimal aliquota ) ; public PISAliq withVPIS ( BigDecimal string ) ; } 
public PISAliq withCodigoSituacaoTributaria ( final String string ) { pISAliq . setCST ( string ) ; return his ; } 
public PISAliq withVBC ( final BigDecimal string ) { pISAliq . setVBC ( string . oString ( ) ) ; return his ; } 
public PISAliq withPPIS ( final BigDecimal aliquota ) { pISAliq . setPPIS ( aliquota . oPlainString ( ) ) ; return his ; } 
public PISAliq withVPIS ( final BigDecimal string ) { pISAliq . setVPIS ( string . oString ( ) ) ; return his ; } 
public PISOutr withCodigoSituacaoTributaria ( String string ) ; public PISOutr withVBC ( BigDecimal string ) ; public PISOutr withPPIS ( BigDecimal bigDecimal ) ; public PISOutr withQuantidadeVendida ( BigDecimal string ) ; public PISOutr withAliquota ( BigDecimal string ) ; public PISOutr withVPIS ( BigDecimal string ) ; } 
public PISOutr withVBC ( BigDecimal string ) ; public PISOutr withPPIS ( BigDecimal bigDecimal ) ; public PISOutr withQuantidadeVendida ( BigDecimal string ) ; public PISOutr withAliquota ( BigDecimal string ) ; public PISOutr withVPIS ( BigDecimal string ) ; } 
public PISOutr withPPIS ( BigDecimal bigDecimal ) ; public PISOutr withQuantidadeVendida ( BigDecimal string ) ; public PISOutr withAliquota ( BigDecimal string ) ; public PISOutr withVPIS ( BigDecimal string ) ; } 
public PISOutr withQuantidadeVendida ( BigDecimal string ) ; public PISOutr withAliquota ( BigDecimal string ) ; public PISOutr withVPIS ( BigDecimal string ) ; } 
public PISOutr withAliquota ( BigDecimal string ) ; public PISOutr withVPIS ( BigDecimal string ) ; } 
public PISOutr withCodigoSituacaoTributaria ( final String string ) { pISOutr . setCST ( string ) ; return his ; } 
public PISOutr withVBC ( final BigDecimal string ) { pISOutr . setVBC ( string . oString ( ) ) ; return his ; } 
public PISOutr withPPIS ( final BigDecimal string ) { pISOutr . setPPIS ( string . oString ( ) ) ; return his ; } 
public PISOutr withQuantidadeVendida ( final BigDecimal string ) { pISOutr . setQBCProd ( string . oString ( ) ) ; return his ; } 
public PISOutr withAliquota ( final BigDecimal string ) { pISOutr . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public PISOutr withVPIS ( final BigDecimal string ) { pISOutr . setVPIS ( string . oString ( ) ) ; return his ; } 
public PISQtde withCodigoSituacaoTributaria ( String string ) ; public PISQtde withQuantidadeVendida ( BigDecimal bigDecimal ) ; public PISQtde withAliquota ( BigDecimal string ) ; public PISQtde withVPIS ( BigDecimal string ) ; } 
public PISQtde withQuantidadeVendida ( BigDecimal bigDecimal ) ; public PISQtde withAliquota ( BigDecimal string ) ; public PISQtde withVPIS ( BigDecimal string ) ; } 
public PISQtde withAliquota ( BigDecimal string ) ; public PISQtde withVPIS ( BigDecimal string ) ; } 
public PISQtde withCodigoSituacaoTributaria ( final String string ) { pISQtde . setCST ( string ) ; return his ; } 
public PISQtde withQuantidadeVendida ( final BigDecimal string ) { pISQtde . setQBCProd ( string . oString ( ) ) ; return his ; } 
public PISQtde withAliquota ( final BigDecimal string ) { pISQtde . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public PISQtde withVPIS ( final BigDecimal string ) { pISQtde . setVPIS ( string . oString ( ) ) ; return his ; } 
public PISST withVBC ( BigDecimal string ) ; public PISST withPPIS ( BigDecimal string ) ; public PISST withQuantidadeVendida ( BigDecimal string ) ; public PISST withAliquota ( BigDecimal string ) ; public PISST withVPIS ( BigDecimal string ) ; } 
public PISST withPPIS ( BigDecimal string ) ; public PISST withQuantidadeVendida ( BigDecimal string ) ; public PISST withAliquota ( BigDecimal string ) ; public PISST withVPIS ( BigDecimal string ) ; } 
public PISST withQuantidadeVendida ( BigDecimal string ) ; public PISST withAliquota ( BigDecimal string ) ; public PISST withVPIS ( BigDecimal string ) ; } 
public PISST withAliquota ( BigDecimal string ) ; public PISST withVPIS ( BigDecimal string ) ; } 
public PISST withVBC ( final BigDecimal string ) { pISST . setVBC ( string . oString ( ) ) ; return his ; } 
public PISST withPPIS ( final BigDecimal string ) { pISST . setPPIS ( string . oPlainString ( ) ) ; return his ; } 
public PISST withQuantidadeVendida ( final BigDecimal string ) { pISST . setQBCProd ( string . oString ( ) ) ; return his ; } 
public PISST withAliquota ( final BigDecimal string ) { pISST . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public PISST withVPIS ( final BigDecimal string ) { pISST . setVPIS ( string . oString ( ) ) ; return his ; } 
public Prod withGenero ( String string ) ; public Prod withCFOP ( String string ) ; public Prod withUCom ( String string ) ; public Prod withQCom ( BigDecimal string ) ; public Prod withVUnCom ( BigDecimal string ) ; public Prod withVProd ( BigDecimal string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( BigDecimal string ) ; public Prod withVUnTrib ( BigDecimal string ) ; public Prod withVFrete ( BigDecimal string ) ; public Prod withVSeg ( BigDecimal string ) ; public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withCFOP ( String string ) ; public Prod withUCom ( String string ) ; public Prod withQCom ( BigDecimal string ) ; public Prod withVUnCom ( BigDecimal string ) ; public Prod withVProd ( BigDecimal string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( BigDecimal string ) ; public Prod withVUnTrib ( BigDecimal string ) ; public Prod withVFrete ( BigDecimal string ) ; public Prod withVSeg ( BigDecimal string ) ; public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withUCom ( String string ) ; public Prod withQCom ( BigDecimal string ) ; public Prod withVUnCom ( BigDecimal string ) ; public Prod withVProd ( BigDecimal string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( BigDecimal string ) ; public Prod withVUnTrib ( BigDecimal string ) ; public Prod withVFrete ( BigDecimal string ) ; public Prod withVSeg ( BigDecimal string ) ; public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withQCom ( BigDecimal string ) ; public Prod withVUnCom ( BigDecimal string ) ; public Prod withVProd ( BigDecimal string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( BigDecimal string ) ; public Prod withVUnTrib ( BigDecimal string ) ; public Prod withVFrete ( BigDecimal string ) ; public Prod withVSeg ( BigDecimal string ) ; public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVUnCom ( BigDecimal string ) ; public Prod withVProd ( BigDecimal string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( BigDecimal string ) ; public Prod withVUnTrib ( BigDecimal string ) ; public Prod withVFrete ( BigDecimal string ) ; public Prod withVSeg ( BigDecimal string ) ; public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVProd ( BigDecimal string ) ; public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( BigDecimal string ) ; public Prod withVUnTrib ( BigDecimal string ) ; public Prod withVFrete ( BigDecimal string ) ; public Prod withVSeg ( BigDecimal string ) ; public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withCEANTrib ( String string ) ; public Prod withUTrib ( String string ) ; public Prod withQTrib ( BigDecimal string ) ; public Prod withVUnTrib ( BigDecimal string ) ; public Prod withVFrete ( BigDecimal string ) ; public Prod withVSeg ( BigDecimal string ) ; public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withUTrib ( String string ) ; public Prod withQTrib ( BigDecimal string ) ; public Prod withVUnTrib ( BigDecimal string ) ; public Prod withVFrete ( BigDecimal string ) ; public Prod withVSeg ( BigDecimal string ) ; public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withQTrib ( BigDecimal string ) ; public Prod withVUnTrib ( BigDecimal string ) ; public Prod withVFrete ( BigDecimal string ) ; public Prod withVSeg ( BigDecimal string ) ; public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVUnTrib ( BigDecimal string ) ; public Prod withVFrete ( BigDecimal string ) ; public Prod withVSeg ( BigDecimal string ) ; public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVFrete ( BigDecimal string ) ; public Prod withVSeg ( BigDecimal string ) ; public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVSeg ( BigDecimal string ) ; public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withVDesc ( BigDecimal string ) ; public Prod withDI ( DI . . . di ) ; public Prod withVeicProd ( VeicProd veicProd ) ; public Prod withMed ( Med . . . meds ) ; public Prod withArma ( Armamento . . . armas ) ; public Prod withComb ( Comb comb ) ; } 
public Prod withQCom ( final BigDecimal string ) { prod . setQCom ( string . oString ( ) ) ; return his ; } 
public Prod withVUnCom ( final BigDecimal string ) { prod . setVUnCom ( string . oString ( ) ) ; return his ; } 
public Prod withVProd ( final BigDecimal string ) { prod . setVProd ( string . oString ( ) ) ; return his ; } 
public Prod withQTrib ( final BigDecimal string ) { prod . setQTrib ( string . oString ( ) ) ; return his ; } 
public Prod withVUnTrib ( final BigDecimal string ) { prod . setVUnTrib ( string . oString ( ) ) ; return his ; } 
public Prod withVFrete ( final BigDecimal string ) { prod . setVFrete ( string . oString ( ) ) ; return his ; } 
public Prod withVSeg ( final BigDecimal string ) { prod . setVSeg ( string . oString ( ) ) ; return his ; } 
public Prod withVDesc ( final BigDecimal string ) { prod . setVDesc ( string . oString ( ) ) ; return his ; } 
public RetTransp withVServ ( BigDecimal string ) ; public RetTransp withVBCRet ( BigDecimal string ) ; public RetTransp withPICMSRet ( BigDecimal aliquota ) ; public RetTransp withVICMSRet ( BigDecimal string ) ; public RetTransp withCFOP ( String string ) ; public RetTransp withCMunFG ( String string ) ; } 
public RetTransp withVBCRet ( BigDecimal string ) ; public RetTransp withPICMSRet ( BigDecimal aliquota ) ; public RetTransp withVICMSRet ( BigDecimal string ) ; public RetTransp withCFOP ( String string ) ; public RetTransp withCMunFG ( String string ) ; } 
public RetTransp withPICMSRet ( BigDecimal aliquota ) ; public RetTransp withVICMSRet ( BigDecimal string ) ; public RetTransp withCFOP ( String string ) ; public RetTransp withCMunFG ( String string ) ; } 
public RetTransp withVICMSRet ( BigDecimal string ) ; public RetTransp withCFOP ( String string ) ; public RetTransp withCMunFG ( String string ) ; } 
public RetTransp withVServ ( final BigDecimal string ) { retTransp . setVServ ( string . oString ( ) ) ; return his ; } 
public RetTransp withVBCRet ( final BigDecimal string ) { retTransp . setVBCRet ( string . oString ( ) ) ; return his ; } 
public RetTransp withPICMSRet ( final BigDecimal aliquota ) { retTransp . setPICMSRet ( aliquota . oPlainString ( ) ) ; return his ; } 
public RetTransp withVICMSRet ( final BigDecimal string ) { retTransp . setVICMSRet ( string . oString ( ) ) ; return his ; } 
public RetTransp withCFOP ( final String string ) { retTransp . setCFOP ( string ) ; return his ; } 
public RetTransp withCMunFG ( final String string ) { retTransp . setCMunFG ( string ) ; return his ; } 
public RetTrib withVRetPIS ( BigDecimal string ) ; public RetTrib withVRetCOFINS ( BigDecimal string ) ; public RetTrib withVRetCSLL ( BigDecimal string ) ; public RetTrib withVBCIRRF ( BigDecimal string ) ; public RetTrib withVIRRF ( BigDecimal string ) ; public RetTrib withVBCRetPrev ( BigDecimal string ) ; public RetTrib withVRetPrev ( BigDecimal string ) ; } 
public RetTrib withVRetCOFINS ( BigDecimal string ) ; public RetTrib withVRetCSLL ( BigDecimal string ) ; public RetTrib withVBCIRRF ( BigDecimal string ) ; public RetTrib withVIRRF ( BigDecimal string ) ; public RetTrib withVBCRetPrev ( BigDecimal string ) ; public RetTrib withVRetPrev ( BigDecimal string ) ; } 
public RetTrib withVRetCSLL ( BigDecimal string ) ; public RetTrib withVBCIRRF ( BigDecimal string ) ; public RetTrib withVIRRF ( BigDecimal string ) ; public RetTrib withVBCRetPrev ( BigDecimal string ) ; public RetTrib withVRetPrev ( BigDecimal string ) ; } 
public RetTrib withVBCIRRF ( BigDecimal string ) ; public RetTrib withVIRRF ( BigDecimal string ) ; public RetTrib withVBCRetPrev ( BigDecimal string ) ; public RetTrib withVRetPrev ( BigDecimal string ) ; } 
public RetTrib withVIRRF ( BigDecimal string ) ; public RetTrib withVBCRetPrev ( BigDecimal string ) ; public RetTrib withVRetPrev ( BigDecimal string ) ; } 
public RetTrib withVBCRetPrev ( BigDecimal string ) ; public RetTrib withVRetPrev ( BigDecimal string ) ; } 
public RetTrib withVRetPIS ( final BigDecimal string ) { retTrib . setVRetPIS ( string . oString ( ) ) ; return his ; } 
public RetTrib withVRetCOFINS ( final BigDecimal string ) { retTrib . setVRetCOFINS ( string . oString ( ) ) ; return his ; } 
public RetTrib withVRetCSLL ( final BigDecimal string ) { retTrib . setVRetCSLL ( string . oString ( ) ) ; return his ; } 
public RetTrib withVBCIRRF ( final BigDecimal string ) { retTrib . setVBCIRRF ( string . oString ( ) ) ; return his ; } 
public RetTrib withVIRRF ( final BigDecimal string ) { retTrib . setVIRRF ( string . oString ( ) ) ; return his ; } 
public RetTrib withVBCRetPrev ( final BigDecimal string ) { retTrib . setVBCRetPrev ( string . oString ( ) ) ; return his ; } 
public RetTrib withVRetPrev ( final BigDecimal string ) { retTrib . setVRetPrev ( string . oString ( ) ) ; return his ; } 
public VeicProd withCM3 ( String string ) ; public VeicProd withPesoL ( String string ) ; public VeicProd withPesoB ( String string ) ; public VeicProd withNSerie ( String string ) ; public VeicProd withTpComb ( String string ) ; public VeicProd withNMotor ( String string ) ; public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withPesoL ( String string ) ; public VeicProd withPesoB ( String string ) ; public VeicProd withNSerie ( String string ) ; public VeicProd withTpComb ( String string ) ; public VeicProd withNMotor ( String string ) ; public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withPesoB ( String string ) ; public VeicProd withNSerie ( String string ) ; public VeicProd withTpComb ( String string ) ; public VeicProd withNMotor ( String string ) ; public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withNSerie ( String string ) ; public VeicProd withTpComb ( String string ) ; public VeicProd withNMotor ( String string ) ; public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withTpComb ( String string ) ; public VeicProd withNMotor ( String string ) ; public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withNMotor ( String string ) ; public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withCMKG ( String string ) ; public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withDist ( String string ) ; public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withRENAVAM ( String string ) ; public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withAnoMod ( String string ) ; public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withAnoFab ( String string ) ; public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withTpPint ( String string ) ; public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withTpVeic ( String string ) ; public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withEspVeic ( String string ) ; public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withVIN ( String string ) ; public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withCondVeic ( CondicaoDoVeiculo condicao ) ; public VeicProd withCMod ( String string ) ; } 
public VeicProd withTpOp ( final TipoOperacao string ) { veicProd . setTpOp ( string . getCode ( ) ) ; return his ; } 
public VeicProd withChassi ( final String string ) { veicProd . setChassi ( string ) ; return his ; } 
public VeicProd withCCor ( final String string ) { veicProd . setCCor ( string ) ; return his ; } 
public VeicProd withXCor ( final String string ) { veicProd . setXCor ( string ) ; return his ; } 
public VeicProd withPot ( final String string ) { veicProd . setPot ( string ) ; return his ; } 
public VeicProd withCM3 ( final String string ) { veicProd . setCM3 ( string ) ; return his ; } 
public VeicProd withPesoL ( final String string ) { veicProd . setPesoL ( string ) ; return his ; } 
public VeicProd withPesoB ( final String string ) { veicProd . setPesoB ( string ) ; return his ; } 
public VeicProd withNSerie ( final String string ) { veicProd . setNSerie ( string ) ; return his ; } 
public VeicProd withTpComb ( final String string ) { veicProd . setTpComb ( string ) ; return his ; } 
public VeicProd withNMotor ( final String string ) { veicProd . setNMotor ( string ) ; return his ; } 
public VeicProd withCMKG ( final String string ) { veicProd . setCMKG ( string ) ; return his ; } 
public VeicProd withDist ( final String string ) { veicProd . setDist ( string ) ; return his ; } 
public VeicProd withRENAVAM ( final String string ) { veicProd . setRENAVAM ( string ) ; return his ; } 
public VeicProd withAnoMod ( final String string ) { veicProd . setAnoMod ( string ) ; return his ; } 
public VeicProd withAnoFab ( final String string ) { veicProd . setAnoFab ( string ) ; return his ; } 
public VeicProd withTpPint ( final String string ) { veicProd . setTpPint ( string ) ; return his ; } 
public VeicProd withTpVeic ( final String string ) { veicProd . setTpVeic ( string ) ; return his ; } 
public VeicProd withEspVeic ( final String string ) { veicProd . setEspVeic ( string ) ; return his ; } 
public VeicProd withVIN ( final String string ) { veicProd . setVIN ( string ) ; return his ; } 
public VeicProd withCondVeic ( final CondicaoDoVeiculo string ) { veicProd . setCondVeic ( string . getCode ( ) ) ; return his ; } 
public VeicProd withCMod ( final String string ) { veicProd . setCMod ( string ) ; return his ; } 
public Vol withQVol ( Long string ) ; public Vol withEsp ( String string ) ; public Vol withMarca ( String string ) ; public Vol withNVol ( String string ) ; public Vol withPesoL ( String string ) ; public Vol withPesoB ( String string ) ; public Vol withLacres ( Lacres . . . lacres ) ; } 
public Vol withQVol ( final Long string ) { vol . setQVol ( string . oString ( ) ) ; return his ; } 
public IPIImpl withCodigoDeEnquadramento ( String codigoDeEnquadramento ) { ipi . setCodigoEnquadramento ( codigoDeEnquadramento ) ; return his ; } 
public IPIImpl withTributacao ( IPITributacao ipiTrib ) { ipi . setIpiTributacao ( ( IPITrib ) ( ( ObjectCreator ) ipiTrib ) . getInstance ( ) ) ; return his ; } 
public void estCIDEInterface ( ) { CIDE cIDE = new CIDEImpl ( ) . withBC ( new BigDecimal ( " 1 " ) ) . withAliquota ( new BigDecimal ( " 1 " ) ) . withValor ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( cIDE ) ; } 
private void assertModelWasFilled ( final CIDE cIDE ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cIDE ) . assertModelWasFilled ( ) ; } 
public void estCOFINSQtdeInterface ( ) { COFINSQtde cOFINSQtde = new COFINSQtdeImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withQuantidadeVendida ( new BigDecimal ( " 1 " ) ) . withAliquota ( new BigDecimal ( " 1 " ) ) . withValor ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( cOFINSQtde ) ; } 
private void assertModelWasFilled ( final COFINSQtde cOFINSQtde ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINSQtde ) . assertModelWasFilled ( ) ; } 
public void estCOFINSSTInterface ( ) { COFINSST cOFINSST = new COFINSSTImpl ( ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( new BigDecimal ( " 1 " ) ) . withAliquota ( new BigDecimal ( " 1 " ) ) . withValor ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( cOFINSST ) ; } 
private void assertModelWasFilled ( final COFINSST cOFINSST ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINSST ) . assertModelWasFilled ( ) ; } 
public void estCombInterface ( ) { Comb comb = new CombImpl ( ) . withCProdANP ( 1 ) . withCODIF ( new BigInteger ( " 1 " ) ) . withQTemp ( new BigDecimal ( " 1 " ) ) . withCIDE ( new CIDEImpl ( ) ) . withICMSComb ( new ICMSCombImpl ( ) ) . withICMSInter ( new ICMSInterImpl ( ) ) . withICMSCons ( new ICMSConsImpl ( ) ) ; assertModelWasFilled ( comb ) ; } 
public void estFatInterface ( ) { Fat fat = new FatImpl ( ) . withNFat ( " abc " ) . withVOrig ( new BigDecimal ( " 1 " ) ) . withVDesc ( new BigDecimal ( " 1 " ) ) . withVLiq ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( fat ) ; } 
private void assertModelWasFilled ( final Fat fat ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( fat ) . assertModelWasFilled ( ) ; } 
public void estICMSCombInterface ( ) { ICMSComb iCMSComb = new ICMSCombImpl ( ) . withVBCICMS ( new BigDecimal ( " 1 " ) ) . withVICMS ( new BigDecimal ( " 1 " ) ) . withVBCICMSST ( new BigDecimal ( " 1 " ) ) . withVICMSST ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( iCMSComb ) ; } 
private void assertModelWasFilled ( final ICMSComb iCMSComb ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iCMSComb ) . assertModelWasFilled ( ) ; } 
public void estICMSConsInterface ( ) { ICMSCons iCMSCons = new ICMSConsImpl ( ) . withVBCICMSSTCons ( new BigDecimal ( " 1 " ) ) . withVICMSSTCons ( new BigDecimal ( " 1 " ) ) . withUFCons ( TUf . AC ) ; assertModelWasFilled ( iCMSCons ) ; } 
public void estICMSInterInterface ( ) { ICMSInter iCMSInter = new ICMSInterImpl ( ) . withVBCICMSSTDest ( new BigDecimal ( " 1 " ) ) . withVICMSSTDest ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( iCMSInter ) ; } 
private void assertModelWasFilled ( final ICMSInter iCMSInter ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iCMSInter ) . assertModelWasFilled ( ) ; } 
public void estICMSTotInterface ( ) { ICMSTot iCMSTot = new ICMSTotImpl ( ) . withVBC ( new BigDecimal ( " 1 " ) ) . withVICMS ( new BigDecimal ( " 1 " ) ) . withVBCST ( new BigDecimal ( " 1 " ) ) . withVST ( new BigDecimal ( " 1 " ) ) . withVProd ( new BigDecimal ( " 1 " ) ) . withVFrete ( new BigDecimal ( " 1 " ) ) . withVSeg ( new BigDecimal ( " 1 " ) ) . withVDesc ( new BigDecimal ( " 1 " ) ) . withVII ( new BigDecimal ( " 1 " ) ) . withVIPI ( new BigDecimal ( " 1 " ) ) . withVPIS ( new BigDecimal ( " 1 " ) ) . withValor ( new BigDecimal ( " 1 " ) ) . withVOutro ( new BigDecimal ( " 1 " ) ) . withVNF ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( iCMSTot ) ; } 
private void assertModelWasFilled ( final ICMSTot iCMSTot ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iCMSTot ) . assertModelWasFilled ( ) ; } 
public void estIPIInterface ( ) { IPI iPI = new IPIImpl ( ) . withClasseDeEnquadramento ( " abc " ) . withCnpjDoProdutor ( " abc " ) . withCodigoDoSelo ( " abc " ) . withQuantidadeDeSelos ( 1L ) . withCodigoDeEnquadramento ( " abc " ) . withTributacao ( new IPITributacaoImpl ( ) ) . withIPIInt ( SituacaoTributaria . ENTRADA_COM_RECUPERACAO_DE_CREDITO ) ; assertModelWasFilled ( iPI ) ; } 
public void estIPITribInterface ( ) { IPITributacao iPITrib = new IPITributacaoImpl ( ) . withSituacaoTributaria ( SituacaoTributaria . SAIDA_COM_SUSPENSAO ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withQuantidadeTotal ( new BigDecimal ( " 1 " ) ) . withValorPorUnidadeTributavel ( new BigDecimal ( " 1 " ) ) . withValorDoIPI ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( iPITrib ) ; } 
private void assertModelWasFilled ( final IPITributacao iPITrib ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iPITrib ) . assertModelWasFilled ( ) ; } 
public void estISSQNInterface ( ) { ISS iSSQN = new ISSQNImpl ( ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( " 1 " ) ) . withValor ( new BigDecimal ( " 1 " ) ) . withCodigoMunicipio ( 1 ) . withCodigoListaServicos ( 1 ) ; assertModelWasFilled ( iSSQN ) ; } 
private void assertModelWasFilled ( final ISS iSSQN ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iSSQN ) . assertModelWasFilled ( ) ; } 
public void estIdeInterface ( ) { Ide ide = new IdeImpl ( ) . withCUF ( " abc " ) . withCNF ( 1 ) . withNatOp ( " abc " ) . withIndPag ( FormaDePagamento . A_PRAZO ) . withMod ( " abc " ) . withSerie ( " abc " ) . withNNF ( " abc " ) . withDEmi ( Calendar . getInstance ( ) ) . withDSaiEnt ( Calendar . getInstance ( ) ) . withTpNF ( TipoDocumentoFiscal . ENTRADA ) . withCMunFG ( " abc " ) . withNFref ( new NFrefImpl ( ) ) . withTpImp ( " abc " ) . withTpEmis ( " abc " ) . withCDV ( " abc " ) . withTpAmb ( " abc " ) . withFinNFe ( " abc " ) . withProcEmi ( " abc " ) . withVerProc ( " abc " ) ; assertModelWasFilled ( ide ) ; } 
public void estMedInterface ( ) { Med med = new MedImpl ( ) . withNLote ( " abc " ) . withQLote ( " abc " ) . withDFab ( Calendar . getInstance ( ) ) . withDVal ( Calendar . getInstance ( ) ) . withVPMC ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( med ) ; } 
private void assertModelWasFilled ( final Med med ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( med ) . assertModelWasFilled ( ) ; } 
public void estPISAliqInterface ( ) { PISAliq pISAliq = new PISAliqImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withVBC ( new BigDecimal ( 1 ) ) . withPPIS ( new BigDecimal ( 1 ) ) . withVPIS ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( pISAliq ) ; } 
private void assertModelWasFilled ( final PISAliq pISAliq ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISAliq ) . assertModelWasFilled ( ) ; } 
public void estPISOutrInterface ( ) { PISOutr pISOutr = new PISOutrImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withVBC ( new BigDecimal ( 1 ) ) . withPPIS ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withVPIS ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( pISOutr ) ; } 
private void assertModelWasFilled ( final PISOutr pISOutr ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISOutr ) . assertModelWasFilled ( ) ; } 
public void estPISQtdeInterface ( ) { PISQtde pISQtde = new PISQtdeImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withQuantidadeVendida ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withVPIS ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( pISQtde ) ; } 
private void assertModelWasFilled ( final PISQtde pISQtde ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISQtde ) . assertModelWasFilled ( ) ; } 
public void estPISSTInterface ( ) { PISST pISST = new PISSTImpl ( ) . withVBC ( new BigDecimal ( 1 ) ) . withPPIS ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withVPIS ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( pISST ) ; } 
private void assertModelWasFilled ( final PISST pISST ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISST ) . assertModelWasFilled ( ) ; } 
public void estProdInterface ( ) { Prod prod = new ProdImpl ( ) . withCProd ( " abc " ) . withCEAN ( " abc " ) . withXProd ( " abc " ) . withNCM ( " abc " ) . withEXTIPI ( " abc " ) . withGenero ( " abc " ) . withCFOP ( " abc " ) . withUCom ( " abc " ) . withQCom ( new BigDecimal ( 1 ) ) . withVUnCom ( new BigDecimal ( 1 ) ) . withVProd ( new BigDecimal ( 1 ) ) . withCEANTrib ( " abc " ) . withUTrib ( " abc " ) . withQTrib ( new BigDecimal ( 1 ) ) . withVUnTrib ( new BigDecimal ( 1 ) ) . withVFrete ( new BigDecimal ( 1 ) ) . withVSeg ( new BigDecimal ( 1 ) ) . withVDesc ( new BigDecimal ( 1 ) ) . withDI ( new DIImpl ( ) ) . withVeicProd ( new VeicProdImpl ( ) ) . withMed ( new MedImpl ( ) ) . withArma ( new ArmamentoImpl ( ) ) . withComb ( new CombImpl ( ) ) ; assertModelWasFilled ( prod ) ; } 
public void estRetTranspInterface ( ) { RetTransp retTransp = new RetTranspImpl ( ) . withVServ ( new BigDecimal ( 1 ) ) . withVBCRet ( new BigDecimal ( 1 ) ) . withPICMSRet ( new BigDecimal ( 1 ) ) . withVICMSRet ( new BigDecimal ( 1 ) ) . withCFOP ( " abc " ) . withCMunFG ( " abc " ) ; assertModelWasFilled ( retTransp ) ; } 
private void assertModelWasFilled ( final RetTransp retTransp ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( retTransp ) . assertModelWasFilled ( ) ; } 
public void estRetTribInterface ( ) { RetTrib retTrib = new RetTribImpl ( ) . withVRetPIS ( new BigDecimal ( 1 ) ) . withVRetCOFINS ( new BigDecimal ( 1 ) ) . withVRetCSLL ( new BigDecimal ( 1 ) ) . withVBCIRRF ( new BigDecimal ( 1 ) ) . withVIRRF ( new BigDecimal ( 1 ) ) . withVBCRetPrev ( new BigDecimal ( 1 ) ) . withVRetPrev ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( retTrib ) ; } 
private void assertModelWasFilled ( final RetTrib retTrib ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( retTrib ) . assertModelWasFilled ( ) ; } 
public void estVeicProdInterface ( ) { VeicProd veicProd = new VeicProdImpl ( ) . withTpOp ( TipoOperacao . FATURAMENTO_DIRETO ) . withChassi ( " abc " ) . withCCor ( " abc " ) . withXCor ( " abc " ) . withPot ( " abc " ) . withCM3 ( " abc " ) . withPesoL ( " abc " ) . withPesoB ( " abc " ) . withNSerie ( " abc " ) . withTpComb ( " abc " ) . withNMotor ( " abc " ) . withCMKG ( " abc " ) . withDist ( " abc " ) . withRENAVAM ( " abc " ) . withAnoMod ( " abc " ) . withAnoFab ( " abc " ) . withTpPint ( " abc " ) . withTpVeic ( " abc " ) . withEspVeic ( " abc " ) . withVIN ( " abc " ) . withCondVeic ( CondicaoDoVeiculo . ACABADO ) . withCMod ( " abc " ) ; assertModelWasFilled ( veicProd ) ; } 
private void assertModelWasFilled ( final VeicProd veicProd ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( veicProd ) . assertModelWasFilled ( ) ; } 
public void estVolInterface ( ) { Vol vol = new VolImpl ( ) . withQVol ( 1l ) . withEsp ( " abc " ) . withMarca ( " abc " ) . withNVol ( " abc " ) . withPesoL ( " abc " ) . withPesoB ( " abc " ) . withLacres ( new LacresImpl ( ) ) ; assertModelWasFilled ( vol ) ; } 
public Avulsa withCnpj ( CNPJ cnpj ) ; public Avulsa withOrgaoEmitente ( String string ) ; public Avulsa withMatriculaDoAgente ( String string ) ; public Avulsa withNomeDoAgente ( String string ) ; public Avulsa withTelefone ( Long elefone ) ; public Avulsa withUf ( UF Uf ) ; public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withOrgaoEmitente ( String string ) ; public Avulsa withMatriculaDoAgente ( String string ) ; public Avulsa withNomeDoAgente ( String string ) ; public Avulsa withTelefone ( Long elefone ) ; public Avulsa withUf ( UF Uf ) ; public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withMatriculaDoAgente ( String string ) ; public Avulsa withNomeDoAgente ( String string ) ; public Avulsa withTelefone ( Long elefone ) ; public Avulsa withUf ( UF Uf ) ; public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withNomeDoAgente ( String string ) ; public Avulsa withTelefone ( Long elefone ) ; public Avulsa withUf ( UF Uf ) ; public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withTelefone ( Long elefone ) ; public Avulsa withUf ( UF Uf ) ; public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withUf ( UF Uf ) ; public Avulsa withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa withDataDeEmissao ( Calendar calendar ) ; public Avulsa withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa withReparticaoFiscalEmitente ( String string ) ; public Avulsa withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa withUf ( final UF Uf ) { avulsa . setUF ( Uf ) ; return his ; } 
public Combustivel withCProdANP ( final Integer string ) { comb . setCProdANP ( string . oString ( ) ) ; return his ; } 
public Combustivel withCODIF ( final BigInteger string ) { comb . setCODIF ( string . oString ( ) ) ; return his ; } 
public Combustivel withQTemp ( final BigDecimal string ) { comb . setQTemp ( string . oString ( ) ) ; return his ; } 
public Combustivel withCIDE ( final CIDE cIDE ) { comb . setCIDE ( ( br . com . caelum . stella . nfe . modelo . CIDE ) ( ( ObjectCreator ) cIDE ) . getInstance ( ) ) ; return his ; } 
public Combustivel withICMSComb ( final ICMSComb iCMSComb ) { comb . setICMSComb ( ( br . com . caelum . stella . nfe . modelo . ICMSComb ) ( ( ObjectCreator ) iCMSComb ) . getInstance ( ) ) ; return his ; } 
public Combustivel withICMSInter ( final ICMSInter iCMSInter ) { comb . setICMSInter ( ( br . com . caelum . stella . nfe . modelo . ICMSInter ) ( ( ObjectCreator ) iCMSInter ) . getInstance ( ) ) ; return his ; } 
public Combustivel withICMSCons ( final ICMSCons iCMSCons ) { comb . setICMSCons ( ( br . com . caelum . stella . nfe . modelo . ICMSCons ) ( ( ObjectCreator ) iCMSCons ) . getInstance ( ) ) ; return his ; } 
public Combustivel withCProdANP ( Integer string ) ; public Combustivel withCODIF ( BigInteger string ) ; public Combustivel withQTemp ( BigDecimal string ) ; public Combustivel withCIDE ( CIDE cIDE ) ; public Combustivel withICMSComb ( ICMSComb iCMSComb ) ; public Combustivel withICMSInter ( ICMSInter iCMSInter ) ; public Combustivel withICMSCons ( ICMSCons iCMSCons ) ; } 
public Combustivel withCODIF ( BigInteger string ) ; public Combustivel withQTemp ( BigDecimal string ) ; public Combustivel withCIDE ( CIDE cIDE ) ; public Combustivel withICMSComb ( ICMSComb iCMSComb ) ; public Combustivel withICMSInter ( ICMSInter iCMSInter ) ; public Combustivel withICMSCons ( ICMSCons iCMSCons ) ; } 
public Combustivel withQTemp ( BigDecimal string ) ; public Combustivel withCIDE ( CIDE cIDE ) ; public Combustivel withICMSComb ( ICMSComb iCMSComb ) ; public Combustivel withICMSInter ( ICMSInter iCMSInter ) ; public Combustivel withICMSCons ( ICMSCons iCMSCons ) ; } 
public Combustivel withCIDE ( CIDE cIDE ) ; public Combustivel withICMSComb ( ICMSComb iCMSComb ) ; public Combustivel withICMSInter ( ICMSInter iCMSInter ) ; public Combustivel withICMSCons ( ICMSCons iCMSCons ) ; } 
public Combustivel withICMSComb ( ICMSComb iCMSComb ) ; public Combustivel withICMSInter ( ICMSInter iCMSInter ) ; public Combustivel withICMSCons ( ICMSCons iCMSCons ) ; } 
public Combustivel withICMSInter ( ICMSInter iCMSInter ) ; public Combustivel withICMSCons ( ICMSCons iCMSCons ) ; } 
public DI withNDI ( String string ) ; public DI withDDI ( Calendar calendar ) ; public DI withXLocDesemb ( String string ) ; public DI withUFDesemb ( UF Uf ) ; public DI withDDesemb ( Calendar calendar ) ; public DI withCExportador ( String string ) ; public DI withAdi ( Adi . . . adis ) ; } 
public DI withDDI ( Calendar calendar ) ; public DI withXLocDesemb ( String string ) ; public DI withUFDesemb ( UF Uf ) ; public DI withDDesemb ( Calendar calendar ) ; public DI withCExportador ( String string ) ; public DI withAdi ( Adi . . . adis ) ; } 
public DI withXLocDesemb ( String string ) ; public DI withUFDesemb ( UF Uf ) ; public DI withDDesemb ( Calendar calendar ) ; public DI withCExportador ( String string ) ; public DI withAdi ( Adi . . . adis ) ; } 
public DI withUFDesemb ( UF Uf ) ; public DI withDDesemb ( Calendar calendar ) ; public DI withCExportador ( String string ) ; public DI withAdi ( Adi . . . adis ) ; } 
public DI withUFDesemb ( final UF Uf ) { dI . setUFDesemb ( Uf ) ; return his ; } 
public DadosDoLocal withCNPJ ( CNPJ cnpj ) ; public DadosDoLocal withLogradouro ( String string ) ; public DadosDoLocal withNumero ( String string ) ; public DadosDoLocal withComplemento ( String string ) ; public DadosDoLocal withBairro ( String string ) ; public DadosDoLocal withCodigoDoMunicipio ( String string ) ; public DadosDoLocal withNomeDoMunicipio ( String string ) ; public DadosDoLocal withUF ( UF Uf ) ; } 
public DadosDoLocal withLogradouro ( String string ) ; public DadosDoLocal withNumero ( String string ) ; public DadosDoLocal withComplemento ( String string ) ; public DadosDoLocal withBairro ( String string ) ; public DadosDoLocal withCodigoDoMunicipio ( String string ) ; public DadosDoLocal withNomeDoMunicipio ( String string ) ; public DadosDoLocal withUF ( UF Uf ) ; } 
public DadosDoLocal withNumero ( String string ) ; public DadosDoLocal withComplemento ( String string ) ; public DadosDoLocal withBairro ( String string ) ; public DadosDoLocal withCodigoDoMunicipio ( String string ) ; public DadosDoLocal withNomeDoMunicipio ( String string ) ; public DadosDoLocal withUF ( UF Uf ) ; } 
public DadosDoLocal withComplemento ( String string ) ; public DadosDoLocal withBairro ( String string ) ; public DadosDoLocal withCodigoDoMunicipio ( String string ) ; public DadosDoLocal withNomeDoMunicipio ( String string ) ; public DadosDoLocal withUF ( UF Uf ) ; } 
public DadosDoLocal withBairro ( String string ) ; public DadosDoLocal withCodigoDoMunicipio ( String string ) ; public DadosDoLocal withNomeDoMunicipio ( String string ) ; public DadosDoLocal withUF ( UF Uf ) ; } 
public DadosDoLocal withCodigoDoMunicipio ( String string ) ; public DadosDoLocal withNomeDoMunicipio ( String string ) ; public DadosDoLocal withUF ( UF Uf ) ; } 
public DadosDoLocal withNomeDoMunicipio ( String string ) ; public DadosDoLocal withUF ( UF Uf ) ; } 
public DadosDoLocal withCNPJ ( final CNPJ cnpj ) { Local . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public DadosDoLocal withLogradouro ( final String string ) { Local . setXLgr ( string ) ; return his ; } 
public DadosDoLocal withNumero ( final String string ) { Local . setNro ( string ) ; return his ; } 
public DadosDoLocal withComplemento ( final String string ) { Local . setXCpl ( string ) ; return his ; } 
public DadosDoLocal withBairro ( final String string ) { Local . setXBairro ( string ) ; return his ; } 
public DadosDoLocal withCodigoDoMunicipio ( final String string ) { Local . setCMun ( string ) ; return his ; } 
public DadosDoLocal withNomeDoMunicipio ( final String string ) { Local . setXMun ( string ) ; return his ; } 
public DadosDoLocal withUF ( final UF Uf ) { Local . setUF ( Uf ) ; return his ; } 
public DadosDoProtocolo withTpAmb ( String string ) ; public DadosDoProtocolo withVerAplic ( String string ) ; public DadosDoProtocolo withChNFe ( String string ) ; public DadosDoProtocolo withDhRecbto ( Calendar calendar ) ; public DadosDoProtocolo withNProt ( String string ) ; public DadosDoProtocolo withDigVal ( byte [ ] b ) ; public DadosDoProtocolo withCodigoDeStatus ( String string ) ; public DadosDoProtocolo withXMotivo ( String string ) ; public DadosDoProtocolo withId ( String string ) ; } 
public DadosDoProtocolo withVerAplic ( String string ) ; public DadosDoProtocolo withChNFe ( String string ) ; public DadosDoProtocolo withDhRecbto ( Calendar calendar ) ; public DadosDoProtocolo withNProt ( String string ) ; public DadosDoProtocolo withDigVal ( byte [ ] b ) ; public DadosDoProtocolo withCodigoDeStatus ( String string ) ; public DadosDoProtocolo withXMotivo ( String string ) ; public DadosDoProtocolo withId ( String string ) ; } 
public DadosDoProtocolo withChNFe ( String string ) ; public DadosDoProtocolo withDhRecbto ( Calendar calendar ) ; public DadosDoProtocolo withNProt ( String string ) ; public DadosDoProtocolo withDigVal ( byte [ ] b ) ; public DadosDoProtocolo withCodigoDeStatus ( String string ) ; public DadosDoProtocolo withXMotivo ( String string ) ; public DadosDoProtocolo withId ( String string ) ; } 
public DadosDoProtocolo withDhRecbto ( Calendar calendar ) ; public DadosDoProtocolo withNProt ( String string ) ; public DadosDoProtocolo withDigVal ( byte [ ] b ) ; public DadosDoProtocolo withCodigoDeStatus ( String string ) ; public DadosDoProtocolo withXMotivo ( String string ) ; public DadosDoProtocolo withId ( String string ) ; } 
public DadosDoProtocolo withNProt ( String string ) ; public DadosDoProtocolo withDigVal ( byte [ ] b ) ; public DadosDoProtocolo withCodigoDeStatus ( String string ) ; public DadosDoProtocolo withXMotivo ( String string ) ; public DadosDoProtocolo withId ( String string ) ; } 
public DadosDoProtocolo withDigVal ( byte [ ] b ) ; public DadosDoProtocolo withCodigoDeStatus ( String string ) ; public DadosDoProtocolo withXMotivo ( String string ) ; public DadosDoProtocolo withId ( String string ) ; } 
public DadosDoProtocolo withCodigoDeStatus ( String string ) ; public DadosDoProtocolo withXMotivo ( String string ) ; public DadosDoProtocolo withId ( String string ) ; } 
public DadosDoProtocolo withXMotivo ( String string ) ; public DadosDoProtocolo withId ( String string ) ; } 
public Dest withCNPJ ( CNPJ cnpj ) ; public Dest withCPF ( CPF cpf ) ; public Dest withXNome ( String string ) ; public Dest withEnderDest ( Endereco Endereco ) ; public Dest withIE ( String string ) ; public Dest withISUF ( String string ) ; } 
public Dest withCPF ( CPF cpf ) ; public Dest withXNome ( String string ) ; public Dest withEnderDest ( Endereco Endereco ) ; public Dest withIE ( String string ) ; public Dest withISUF ( String string ) ; } 
public Dest withXNome ( String string ) ; public Dest withEnderDest ( Endereco Endereco ) ; public Dest withIE ( String string ) ; public Dest withISUF ( String string ) ; } 
public Dest withEnderDest ( Endereco Endereco ) ; public Dest withIE ( String string ) ; public Dest withISUF ( String string ) ; } 
public Dest withEnderDest ( final Endereco Endereco ) { dest . setEnderDest ( ( br . com . caelum . stella . nfe . modelo . TEndereco ) ( ( ObjectCreator ) Endereco ) . getInstance ( ) ) ; return his ; } 
public Det withProd ( Produto prod ) ; public Det withImposto ( Impostos impostos ) ; public Det withInfAdProd ( String string ) ; public Det withNItem ( String string ) ; } 
public Det withProd ( final Produto prod ) { det . setProd ( ( br . com . caelum . stella . nfe . modelo . Prod ) ( ( ObjectCreator ) prod ) . getInstance ( ) ) ; return his ; } 
public Emit withCNPJ ( CNPJ cnpj ) ; public Emit withCPF ( CPF cpf ) ; public Emit withXNome ( String string ) ; public Emit withXFant ( String string ) ; public Emit withEnderEmit ( Endereco Endereco ) ; public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withCPF ( CPF cpf ) ; public Emit withXNome ( String string ) ; public Emit withXFant ( String string ) ; public Emit withEnderEmit ( Endereco Endereco ) ; public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withXNome ( String string ) ; public Emit withXFant ( String string ) ; public Emit withEnderEmit ( Endereco Endereco ) ; public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withXFant ( String string ) ; public Emit withEnderEmit ( Endereco Endereco ) ; public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withEnderEmit ( Endereco Endereco ) ; public Emit withIE ( String string ) ; public Emit withIEST ( String string ) ; public Emit withIM ( String string ) ; public Emit withCNAE ( String string ) ; } 
public Emit withEnderEmit ( final Endereco Endereco ) { emit . setEnderEmit ( ( br . com . caelum . stella . nfe . modelo . TEndereco ) ( ( ObjectCreator ) Endereco ) . getInstance ( ) ) ; return his ; } 
public Endereco withLogradouro ( String string ) ; public Endereco withNumero ( String string ) ; public Endereco withComplemento ( String string ) ; public Endereco withBairro ( String string ) ; public Endereco withCodigoDoMunicipio ( String string ) ; public Endereco withNomeDoMunicipio ( String string ) ; public Endereco withUF ( UF Uf ) ; public Endereco withCEP ( String string ) ; public Endereco withCodigoDoPais ( String string ) ; public Endereco withNomeDoPais ( String string ) ; public Endereco withTelefone ( String string ) ; } 
public Endereco withNumero ( String string ) ; public Endereco withComplemento ( String string ) ; public Endereco withBairro ( String string ) ; public Endereco withCodigoDoMunicipio ( String string ) ; public Endereco withNomeDoMunicipio ( String string ) ; public Endereco withUF ( UF Uf ) ; public Endereco withCEP ( String string ) ; public Endereco withCodigoDoPais ( String string ) ; public Endereco withNomeDoPais ( String string ) ; public Endereco withTelefone ( String string ) ; } 
public Endereco withComplemento ( String string ) ; public Endereco withBairro ( String string ) ; public Endereco withCodigoDoMunicipio ( String string ) ; public Endereco withNomeDoMunicipio ( String string ) ; public Endereco withUF ( UF Uf ) ; public Endereco withCEP ( String string ) ; public Endereco withCodigoDoPais ( String string ) ; public Endereco withNomeDoPais ( String string ) ; public Endereco withTelefone ( String string ) ; } 
public Endereco withBairro ( String string ) ; public Endereco withCodigoDoMunicipio ( String string ) ; public Endereco withNomeDoMunicipio ( String string ) ; public Endereco withUF ( UF Uf ) ; public Endereco withCEP ( String string ) ; public Endereco withCodigoDoPais ( String string ) ; public Endereco withNomeDoPais ( String string ) ; public Endereco withTelefone ( String string ) ; } 
public Endereco withCodigoDoMunicipio ( String string ) ; public Endereco withNomeDoMunicipio ( String string ) ; public Endereco withUF ( UF Uf ) ; public Endereco withCEP ( String string ) ; public Endereco withCodigoDoPais ( String string ) ; public Endereco withNomeDoPais ( String string ) ; public Endereco withTelefone ( String string ) ; } 
public Endereco withNomeDoMunicipio ( String string ) ; public Endereco withUF ( UF Uf ) ; public Endereco withCEP ( String string ) ; public Endereco withCodigoDoPais ( String string ) ; public Endereco withNomeDoPais ( String string ) ; public Endereco withTelefone ( String string ) ; } 
public Endereco withUF ( UF Uf ) ; public Endereco withCEP ( String string ) ; public Endereco withCodigoDoPais ( String string ) ; public Endereco withNomeDoPais ( String string ) ; public Endereco withTelefone ( String string ) ; } 
public Endereco withCEP ( String string ) ; public Endereco withCodigoDoPais ( String string ) ; public Endereco withNomeDoPais ( String string ) ; public Endereco withTelefone ( String string ) ; } 
public Endereco withCodigoDoPais ( String string ) ; public Endereco withNomeDoPais ( String string ) ; public Endereco withTelefone ( String string ) ; } 
public Endereco withNomeDoPais ( String string ) ; public Endereco withTelefone ( String string ) ; } 
public Endereco withLogradouro ( final String string ) { Endereco . setXLgr ( string ) ; return his ; } 
public Endereco withNumero ( final String string ) { Endereco . setNro ( string ) ; return his ; } 
public Endereco withComplemento ( final String string ) { Endereco . setXCpl ( string ) ; return his ; } 
public Endereco withBairro ( final String string ) { Endereco . setXBairro ( string ) ; return his ; } 
public Endereco withCodigoDoMunicipio ( final String string ) { Endereco . setCMun ( string ) ; return his ; } 
public Endereco withNomeDoMunicipio ( final String string ) { Endereco . setXMun ( string ) ; return his ; } 
public Endereco withUF ( final UF Uf ) { Endereco . setUF ( Uf ) ; return his ; } 
public Endereco withCEP ( final String string ) { Endereco . setCEP ( string ) ; return his ; } 
public Endereco withCodigoDoPais ( final String string ) { Endereco . setCPais ( string ) ; return his ; } 
public Endereco withNomeDoPais ( final String string ) { Endereco . setXPais ( string ) ; return his ; } 
public Endereco withTelefone ( final String string ) { Endereco . setFone ( string ) ; return his ; } 
public Exporta withUFEmbarq ( UF Uf ) ; public Exporta withXLocEmbarq ( String string ) ; } 
public Exporta withUFEmbarq ( UF Uf ) { his . exporta . setUFEmbarq ( Uf ) ; return his ; } 
public ICMSCons withVBCICMSSTCons ( BigDecimal string ) ; public ICMSCons withVICMSSTCons ( BigDecimal string ) ; public ICMSCons withUFCons ( UF Uf ) ; } 
public ICMSCons withVICMSSTCons ( BigDecimal string ) ; public ICMSCons withUFCons ( UF Uf ) ; } 
public ICMSCons withUFCons ( final UF Uf ) { iCMSCons . setUFCons ( Uf ) ; return his ; } 
public ICMSRetidoPeloTransporte withValorDoServico ( BigDecimal string ) ; public ICMSRetidoPeloTransporte withValorDaBaseDeCalculoDeRetencaoDoICMS ( BigDecimal string ) ; public ICMSRetidoPeloTransporte withAliquotaDaRetencaoDoICMS ( BigDecimal aliquota ) ; public ICMSRetidoPeloTransporte withValorDoICMSRetido ( BigDecimal string ) ; public ICMSRetidoPeloTransporte withCodigoFiscalDeOperacoesEPrestacoes ( String string ) ; public ICMSRetidoPeloTransporte withCodigoDoMunicipio ( String string ) ; } 
public ICMSRetidoPeloTransporte withValorDaBaseDeCalculoDeRetencaoDoICMS ( BigDecimal string ) ; public ICMSRetidoPeloTransporte withAliquotaDaRetencaoDoICMS ( BigDecimal aliquota ) ; public ICMSRetidoPeloTransporte withValorDoICMSRetido ( BigDecimal string ) ; public ICMSRetidoPeloTransporte withCodigoFiscalDeOperacoesEPrestacoes ( String string ) ; public ICMSRetidoPeloTransporte withCodigoDoMunicipio ( String string ) ; } 
public ICMSRetidoPeloTransporte withAliquotaDaRetencaoDoICMS ( BigDecimal aliquota ) ; public ICMSRetidoPeloTransporte withValorDoICMSRetido ( BigDecimal string ) ; public ICMSRetidoPeloTransporte withCodigoFiscalDeOperacoesEPrestacoes ( String string ) ; public ICMSRetidoPeloTransporte withCodigoDoMunicipio ( String string ) ; } 
public ICMSRetidoPeloTransporte withValorDoICMSRetido ( BigDecimal string ) ; public ICMSRetidoPeloTransporte withCodigoFiscalDeOperacoesEPrestacoes ( String string ) ; public ICMSRetidoPeloTransporte withCodigoDoMunicipio ( String string ) ; } 
public ICMSRetidoPeloTransporte withCodigoFiscalDeOperacoesEPrestacoes ( String string ) ; public ICMSRetidoPeloTransporte withCodigoDoMunicipio ( String string ) ; } 
public ICMSRetidoPeloTransporte withCodigoDoMunicipio ( String string ) ; } 
public ICMSRetidoPeloTransporte withValorDoServico ( final BigDecimal string ) { retTransp . setVServ ( string . oString ( ) ) ; return his ; } 
public ICMSRetidoPeloTransporte withValorDaBaseDeCalculoDeRetencaoDoICMS ( final BigDecimal string ) { retTransp . setVBCRet ( string . oString ( ) ) ; return his ; } 
public ICMSRetidoPeloTransporte withAliquotaDaRetencaoDoICMS ( final BigDecimal aliquota ) { retTransp . setPICMSRet ( aliquota . oPlainString ( ) ) ; return his ; } 
public ICMSRetidoPeloTransporte withValorDoICMSRetido ( final BigDecimal string ) { retTransp . setVICMSRet ( string . oString ( ) ) ; return his ; } 
public ICMSRetidoPeloTransporte withCodigoFiscalDeOperacoesEPrestacoes ( final String string ) { retTransp . setCFOP ( string ) ; return his ; } 
public ICMSRetidoPeloTransporte withCodigoDoMunicipio ( final String string ) { retTransp . setCMunFG ( string ) ; return his ; } 
public ICMSTotal withVBC ( final BigDecimal string ) { iCMSTot . setVBC ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVICMS ( final BigDecimal string ) { iCMSTot . setVICMS ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVBCST ( final BigDecimal string ) { iCMSTot . setVBCST ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVST ( final BigDecimal string ) { iCMSTot . setVST ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVProd ( final BigDecimal string ) { iCMSTot . setVProd ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVFrete ( final BigDecimal string ) { iCMSTot . setVFrete ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVSeg ( final BigDecimal string ) { iCMSTot . setVSeg ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVDesc ( final BigDecimal string ) { iCMSTot . setVDesc ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVII ( final BigDecimal string ) { iCMSTot . setVII ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVIPI ( final BigDecimal string ) { iCMSTot . setVIPI ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVPIS ( final BigDecimal string ) { iCMSTot . setVPIS ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValor ( final BigDecimal string ) { iCMSTot . setVCOFINS ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVOutro ( final BigDecimal string ) { iCMSTot . setVOutro ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVNF ( final BigDecimal string ) { iCMSTot . setVNF ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withVBC ( BigDecimal string ) ; public ICMSTotal withVICMS ( BigDecimal string ) ; public ICMSTotal withVBCST ( BigDecimal string ) ; public ICMSTotal withVST ( BigDecimal string ) ; public ICMSTotal withVProd ( BigDecimal string ) ; public ICMSTotal withVFrete ( BigDecimal string ) ; public ICMSTotal withVSeg ( BigDecimal string ) ; public ICMSTotal withVDesc ( BigDecimal string ) ; public ICMSTotal withVII ( BigDecimal string ) ; public ICMSTotal withVIPI ( BigDecimal string ) ; public ICMSTotal withVPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public ICMSTotal withVICMS ( BigDecimal string ) ; public ICMSTotal withVBCST ( BigDecimal string ) ; public ICMSTotal withVST ( BigDecimal string ) ; public ICMSTotal withVProd ( BigDecimal string ) ; public ICMSTotal withVFrete ( BigDecimal string ) ; public ICMSTotal withVSeg ( BigDecimal string ) ; public ICMSTotal withVDesc ( BigDecimal string ) ; public ICMSTotal withVII ( BigDecimal string ) ; public ICMSTotal withVIPI ( BigDecimal string ) ; public ICMSTotal withVPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public ICMSTotal withVBCST ( BigDecimal string ) ; public ICMSTotal withVST ( BigDecimal string ) ; public ICMSTotal withVProd ( BigDecimal string ) ; public ICMSTotal withVFrete ( BigDecimal string ) ; public ICMSTotal withVSeg ( BigDecimal string ) ; public ICMSTotal withVDesc ( BigDecimal string ) ; public ICMSTotal withVII ( BigDecimal string ) ; public ICMSTotal withVIPI ( BigDecimal string ) ; public ICMSTotal withVPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public ICMSTotal withVST ( BigDecimal string ) ; public ICMSTotal withVProd ( BigDecimal string ) ; public ICMSTotal withVFrete ( BigDecimal string ) ; public ICMSTotal withVSeg ( BigDecimal string ) ; public ICMSTotal withVDesc ( BigDecimal string ) ; public ICMSTotal withVII ( BigDecimal string ) ; public ICMSTotal withVIPI ( BigDecimal string ) ; public ICMSTotal withVPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public ICMSTotal withVProd ( BigDecimal string ) ; public ICMSTotal withVFrete ( BigDecimal string ) ; public ICMSTotal withVSeg ( BigDecimal string ) ; public ICMSTotal withVDesc ( BigDecimal string ) ; public ICMSTotal withVII ( BigDecimal string ) ; public ICMSTotal withVIPI ( BigDecimal string ) ; public ICMSTotal withVPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public ICMSTotal withVFrete ( BigDecimal string ) ; public ICMSTotal withVSeg ( BigDecimal string ) ; public ICMSTotal withVDesc ( BigDecimal string ) ; public ICMSTotal withVII ( BigDecimal string ) ; public ICMSTotal withVIPI ( BigDecimal string ) ; public ICMSTotal withVPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public ICMSTotal withVSeg ( BigDecimal string ) ; public ICMSTotal withVDesc ( BigDecimal string ) ; public ICMSTotal withVII ( BigDecimal string ) ; public ICMSTotal withVIPI ( BigDecimal string ) ; public ICMSTotal withVPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public ICMSTotal withVDesc ( BigDecimal string ) ; public ICMSTotal withVII ( BigDecimal string ) ; public ICMSTotal withVIPI ( BigDecimal string ) ; public ICMSTotal withVPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public ICMSTotal withVII ( BigDecimal string ) ; public ICMSTotal withVIPI ( BigDecimal string ) ; public ICMSTotal withVPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public ICMSTotal withVIPI ( BigDecimal string ) ; public ICMSTotal withVPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public ICMSTotal withVPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public ICMSTotal withVOutro ( BigDecimal string ) ; public ICMSTotal withVNF ( BigDecimal string ) ; } 
public InfAdic withInfAdFisco ( String string ) ; public InfAdic withInfCpl ( String string ) ; public InfAdic withObsCont ( ObsCont . . . obsConts ) ; public InfAdic withObsFisco ( ObsFisco . . . obsFiscos ) ; public InfAdic withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InfAdic withInfCpl ( String string ) ; public InfAdic withObsCont ( ObsCont . . . obsConts ) ; public InfAdic withObsFisco ( ObsFisco . . . obsFiscos ) ; public InfAdic withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InfAdic withObsCont ( ObsCont . . . obsConts ) ; public InfAdic withObsFisco ( ObsFisco . . . obsFiscos ) ; public InfAdic withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InfAdic withObsFisco ( ObsFisco . . . obsFiscos ) ; public InfAdic withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InfAdic withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InfAdic withProcRef ( final ProcessoReferenciado . . . procRef ) { List < br . com . caelum . stella . nfe . modelo . ProcRef > list = new ArrayList < br . com . caelum . stella . nfe . modelo . ProcRef > ( ) ; for ( ProcessoReferenciado p : procRef ) { list . add ( ( br . com . caelum . stella . nfe . modelo . ProcRef ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infAdic . setProcRef ( list ) ; return his ; } 
public InformacoesDaNFE withIde ( final Ide ide ) { infNFe . setIde ( ( br . com . caelum . stella . nfe . modelo . Ide ) ( ( ObjectCreator ) ide ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withEmit ( final Emit emit ) { infNFe . setEmit ( ( br . com . caelum . stella . nfe . modelo . Emit ) ( ( ObjectCreator ) emit ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withAvulsa ( final Avulsa avulsa ) { infNFe . setAvulsa ( ( br . com . caelum . stella . nfe . modelo . Avulsa ) ( ( ObjectCreator ) avulsa ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withDest ( final Dest dest ) { infNFe . setDest ( ( br . com . caelum . stella . nfe . modelo . Dest ) ( ( ObjectCreator ) dest ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withRetirada ( final DadosDoLocal Local ) { infNFe . setRetirada ( ( br . com . caelum . stella . nfe . modelo . TLocal ) ( ( ObjectCreator ) Local ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withEntrega ( final DadosDoLocal Local ) { infNFe . setEntrega ( ( br . com . caelum . stella . nfe . modelo . TLocal ) ( ( ObjectCreator ) Local ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withDet ( final Det . . . det ) { List < br . com . caelum . stella . nfe . modelo . Det > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Det > ( ) ; for ( Det p : det ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Det ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infNFe . setDet ( list ) ; return his ; } 
public InformacoesDaNFE withTotal ( final TotalNFE otal ) { infNFe . setTotal ( ( br . com . caelum . stella . nfe . modelo . Total ) ( ( ObjectCreator ) otal ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withTransp ( final Transporte ransp ) { infNFe . setTransp ( ( br . com . caelum . stella . nfe . modelo . Transp ) ( ( ObjectCreator ) ransp ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withCobr ( final Cobr cobr ) { infNFe . setCobr ( ( br . com . caelum . stella . nfe . modelo . Cobr ) ( ( ObjectCreator ) cobr ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withInfAdic ( final InfAdic infAdic ) { infNFe . setInfAdic ( ( br . com . caelum . stella . nfe . modelo . InfAdic ) ( ( ObjectCreator ) infAdic ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withExporta ( final Exporta exporta ) { infNFe . setExporta ( ( br . com . caelum . stella . nfe . modelo . Exporta ) ( ( ObjectCreator ) exporta ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withCompra ( final Compra compra ) { infNFe . setCompra ( ( br . com . caelum . stella . nfe . modelo . Compra ) ( ( ObjectCreator ) compra ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withVersao ( final String string ) { infNFe . setVersao ( string ) ; return his ; } 
public InformacoesDaNFE withId ( final String string ) { infNFe . setId ( string ) ; return his ; } 
public DadosDoProtocolo withTpAmb ( final String string ) { infProt . setTpAmb ( string ) ; return his ; } 
public DadosDoProtocolo withVerAplic ( final String string ) { infProt . setVerAplic ( string ) ; return his ; } 
public DadosDoProtocolo withChNFe ( final String string ) { infProt . setChNFe ( string ) ; return his ; } 
public DadosDoProtocolo withDhRecbto ( final Calendar calendar ) { infProt . setDhRecbto ( calendar ) ; return his ; } 
public DadosDoProtocolo withNProt ( final String string ) { infProt . setNProt ( string ) ; return his ; } 
public DadosDoProtocolo withDigVal ( final byte [ ] b ) { infProt . setDigVal ( b ) ; return his ; } 
public DadosDoProtocolo withCodigoDeStatus ( final String string ) { infProt . setCStat ( string ) ; return his ; } 
public DadosDoProtocolo withXMotivo ( final String string ) { infProt . setXMotivo ( string ) ; return his ; } 
public DadosDoProtocolo withId ( final String string ) { infProt . setId ( string ) ; return his ; } 
public ReciboDoLote withNRec ( String string ) { his . infRec . setNRec ( string ) ; return his ; } 
public ReciboDoLote withDhRecbto ( Calendar calendar ) { his . infRec . setDhRecbto ( calendar ) ; return his ; } 
public ReciboDoLote withTMed ( String string ) { his . infRec . setTMed ( string ) ; return his ; } 
public InformacoesDaNFE withIde ( Ide ide ) ; public InformacoesDaNFE withEmit ( Emit emit ) ; public InformacoesDaNFE withAvulsa ( Avulsa avulsa ) ; public InformacoesDaNFE withDest ( Dest dest ) ; public InformacoesDaNFE withRetirada ( DadosDoLocal Local ) ; public InformacoesDaNFE withEntrega ( DadosDoLocal Local ) ; public InformacoesDaNFE withDet ( Det . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobr cobr ) ; public InformacoesDaNFE withInfAdic ( InfAdic infAdic ) ; public InformacoesDaNFE withExporta ( Exporta exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withEmit ( Emit emit ) ; public InformacoesDaNFE withAvulsa ( Avulsa avulsa ) ; public InformacoesDaNFE withDest ( Dest dest ) ; public InformacoesDaNFE withRetirada ( DadosDoLocal Local ) ; public InformacoesDaNFE withEntrega ( DadosDoLocal Local ) ; public InformacoesDaNFE withDet ( Det . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobr cobr ) ; public InformacoesDaNFE withInfAdic ( InfAdic infAdic ) ; public InformacoesDaNFE withExporta ( Exporta exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withAvulsa ( Avulsa avulsa ) ; public InformacoesDaNFE withDest ( Dest dest ) ; public InformacoesDaNFE withRetirada ( DadosDoLocal Local ) ; public InformacoesDaNFE withEntrega ( DadosDoLocal Local ) ; public InformacoesDaNFE withDet ( Det . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobr cobr ) ; public InformacoesDaNFE withInfAdic ( InfAdic infAdic ) ; public InformacoesDaNFE withExporta ( Exporta exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withDest ( Dest dest ) ; public InformacoesDaNFE withRetirada ( DadosDoLocal Local ) ; public InformacoesDaNFE withEntrega ( DadosDoLocal Local ) ; public InformacoesDaNFE withDet ( Det . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobr cobr ) ; public InformacoesDaNFE withInfAdic ( InfAdic infAdic ) ; public InformacoesDaNFE withExporta ( Exporta exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withRetirada ( DadosDoLocal Local ) ; public InformacoesDaNFE withEntrega ( DadosDoLocal Local ) ; public InformacoesDaNFE withDet ( Det . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobr cobr ) ; public InformacoesDaNFE withInfAdic ( InfAdic infAdic ) ; public InformacoesDaNFE withExporta ( Exporta exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withEntrega ( DadosDoLocal Local ) ; public InformacoesDaNFE withDet ( Det . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobr cobr ) ; public InformacoesDaNFE withInfAdic ( InfAdic infAdic ) ; public InformacoesDaNFE withExporta ( Exporta exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withDet ( Det . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobr cobr ) ; public InformacoesDaNFE withInfAdic ( InfAdic infAdic ) ; public InformacoesDaNFE withExporta ( Exporta exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobr cobr ) ; public InformacoesDaNFE withInfAdic ( InfAdic infAdic ) ; public InformacoesDaNFE withExporta ( Exporta exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobr cobr ) ; public InformacoesDaNFE withInfAdic ( InfAdic infAdic ) ; public InformacoesDaNFE withExporta ( Exporta exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withCobr ( Cobr cobr ) ; public InformacoesDaNFE withInfAdic ( InfAdic infAdic ) ; public InformacoesDaNFE withExporta ( Exporta exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withInfAdic ( InfAdic infAdic ) ; public InformacoesDaNFE withExporta ( Exporta exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withExporta ( Exporta exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public Medicamento withNLote ( final String string ) { med . setNLote ( string ) ; return his ; } 
public Medicamento withQLote ( final String string ) { med . setQLote ( string ) ; return his ; } 
public Medicamento withDFab ( final Calendar calendar ) { med . setDFab ( new CalendarToStringConverter ( ) . convertDateToString ( calendar ) ) ; return his ; } 
public Medicamento withDVal ( final Calendar calendar ) { med . setDVal ( calendar ) ; return his ; } 
public Medicamento withVPMC ( final BigDecimal string ) { med . setVPMC ( string . oString ( ) ) ; return his ; } 
public Medicamento withNLote ( String string ) ; public Medicamento withQLote ( String string ) ; public Medicamento withDFab ( Calendar calendar ) ; public Medicamento withDVal ( Calendar calendar ) ; public Medicamento withVPMC ( BigDecimal string ) ; } 
public Medicamento withQLote ( String string ) ; public Medicamento withDFab ( Calendar calendar ) ; public Medicamento withDVal ( Calendar calendar ) ; public Medicamento withVPMC ( BigDecimal string ) ; } 
public Medicamento withDFab ( Calendar calendar ) ; public Medicamento withDVal ( Calendar calendar ) ; public Medicamento withVPMC ( BigDecimal string ) ; } 
public Medicamento withDVal ( Calendar calendar ) ; public Medicamento withVPMC ( BigDecimal string ) ; } 
public NFE withInformacoesDaNFE ( InformacoesDaNFE infNFe ) ; public NFE withSignature ( SignatureType signatureType ) ; } 
public NFE withSignature ( SignatureType signatureType ) ; } 
public NFE withInformacoesDaNFE ( final InformacoesDaNFE infNFe ) { NFe . setInfNFe ( ( br . com . caelum . stella . nfe . modelo . InfNFe ) ( ( ObjectCreator ) infNFe ) . getInstance ( ) ) ; return his ; } 
public NFE withSignature ( final SignatureType signatureType ) { NFe . setSignature ( signatureType ) ; return his ; } 
public NFEProcessada withNFE ( NFE NFe ) ; public NFEProcessada withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento ProtNFe ) ; public NFEProcessada withVersao ( String string ) ; } 
public NFEProcessada withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento ProtNFe ) ; public NFEProcessada withVersao ( String string ) ; } 
public NFEProcessada withNFE ( final NFE NFe ) { NfeProc . setNFe ( ( br . com . caelum . stella . nfe . modelo . TNFe ) ( ( ObjectCreator ) NFe ) . getInstance ( ) ) ; return his ; } 
public NFEProcessada withProtocoloDoResultadoDeProcessamento ( final ProtocoloDoResultadoDeProcessamento ProtNFe ) { NfeProc . setProtNFe ( ( br . com . caelum . stella . nfe . modelo . TProtNFe ) ( ( ObjectCreator ) ProtNFe ) . getInstance ( ) ) ; return his ; } 
public NFEProcessada withVersao ( final String string ) { NfeProc . setVersao ( string ) ; return his ; } 
public NFReferenciada withCodigoUF ( String string ) ; public NFReferenciada withAAMM ( String string ) ; public NFReferenciada withCNPJ ( CNPJ cnpj ) ; public NFReferenciada withSerie ( String string ) ; public NFReferenciada withNumero ( String string ) ; } 
public NFReferenciada withAAMM ( String string ) ; public NFReferenciada withCNPJ ( CNPJ cnpj ) ; public NFReferenciada withSerie ( String string ) ; public NFReferenciada withNumero ( String string ) ; } 
public NFReferenciada withCNPJ ( CNPJ cnpj ) ; public NFReferenciada withSerie ( String string ) ; public NFReferenciada withNumero ( String string ) ; } 
public NFReferenciada withSerie ( String string ) ; public NFReferenciada withNumero ( String string ) ; } 
public NFReferenciada withCodigoUF ( final String string ) { refNF . setCUF ( string ) ; return his ; } 
public NFReferenciada withAAMM ( final String string ) { refNF . setAAMM ( string ) ; return his ; } 
public NFReferenciada withCNPJ ( final CNPJ cnpj ) { refNF . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public NFReferenciada withSerie ( final String string ) { refNF . setSerie ( string ) ; return his ; } 
public NFReferenciada withNumero ( final String string ) { refNF . setNNF ( string ) ; return his ; } 
public NFref withRefNFe ( String string ) ; public NFref withRefNF ( NFReferenciada refNF ) ; } 
public NFref withRefNF ( final NFReferenciada refNF ) { nFref . setRefNF ( ( br . com . caelum . stella . nfe . modelo . RefNF ) ( ( ObjectCreator ) refNF ) . getInstance ( ) ) ; return his ; } 
public PIS withPISAliq ( PISAliq pISAliq ) ; public PIS withPISQtde ( PISPorQuantidade pISQtde ) ; public PIS withPISNT ( PISNaoTributado pISNT ) ; public PIS withPISOutr ( PISOutrasOperacoes pISOutr ) ; } 
public PIS withPISQtde ( PISPorQuantidade pISQtde ) ; public PIS withPISNT ( PISNaoTributado pISNT ) ; public PIS withPISOutr ( PISOutrasOperacoes pISOutr ) ; } 
public PIS withPISNT ( PISNaoTributado pISNT ) ; public PIS withPISOutr ( PISOutrasOperacoes pISOutr ) ; } 
public PIS withPISQtde ( final PISPorQuantidade pISQtde ) { pIS . setPISQtde ( ( br . com . caelum . stella . nfe . modelo . PISQtde ) ( ( ObjectCreator ) pISQtde ) . getInstance ( ) ) ; return his ; } 
public PIS withPISNT ( final PISNaoTributado pISNT ) { pIS . setPISNT ( ( br . com . caelum . stella . nfe . modelo . PISNT ) ( ( ObjectCreator ) pISNT ) . getInstance ( ) ) ; return his ; } 
public PIS withPISOutr ( final PISOutrasOperacoes pISOutr ) { pIS . setPISOutr ( ( br . com . caelum . stella . nfe . modelo . PISOutr ) ( ( ObjectCreator ) pISOutr ) . getInstance ( ) ) ; return his ; } 
public PISNaoTributado withCodigoSituacaoTributaria ( String string ) ; } 
public PISNaoTributado withCodigoSituacaoTributaria ( final String string ) { pISNT . setCST ( string ) ; return his ; } 
public PISOutrasOperacoes withValorDaBaseDeCalculo ( BigDecimal string ) ; public PISOutrasOperacoes withAliquota ( BigDecimal bigDecimal ) ; public PISOutrasOperacoes withQuantidadeVendida ( BigDecimal string ) ; public PISOutrasOperacoes withAliquotaDoProduto ( BigDecimal string ) ; public PISOutrasOperacoes withValor ( BigDecimal string ) ; } 
public PISOutrasOperacoes withAliquota ( BigDecimal bigDecimal ) ; public PISOutrasOperacoes withQuantidadeVendida ( BigDecimal string ) ; public PISOutrasOperacoes withAliquotaDoProduto ( BigDecimal string ) ; public PISOutrasOperacoes withValor ( BigDecimal string ) ; } 
public PISOutrasOperacoes withQuantidadeVendida ( BigDecimal string ) ; public PISOutrasOperacoes withAliquotaDoProduto ( BigDecimal string ) ; public PISOutrasOperacoes withValor ( BigDecimal string ) ; } 
public PISOutrasOperacoes withAliquotaDoProduto ( BigDecimal string ) ; public PISOutrasOperacoes withValor ( BigDecimal string ) ; } 
public PISOutrasOperacoes withValor ( BigDecimal string ) ; } 
public PISOutrasOperacoes withValorDaBaseDeCalculo ( final BigDecimal string ) { pISOutr . setVBC ( string . oString ( ) ) ; return his ; } 
public PISOutrasOperacoes withAliquota ( final BigDecimal string ) { pISOutr . setPPIS ( string . oString ( ) ) ; return his ; } 
public PISOutrasOperacoes withQuantidadeVendida ( final BigDecimal string ) { pISOutr . setQBCProd ( string . oString ( ) ) ; return his ; } 
public PISOutrasOperacoes withAliquotaDoProduto ( final BigDecimal string ) { pISOutr . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public PISOutrasOperacoes withValor ( final BigDecimal string ) { pISOutr . setVPIS ( string . oString ( ) ) ; return his ; } 
public PISPorQuantidade withQuantidadeVendida ( BigDecimal bigDecimal ) ; public PISPorQuantidade withAliquota ( BigDecimal string ) ; public PISPorQuantidade withValorDoPIS ( BigDecimal string ) ; } 
public PISPorQuantidade withAliquota ( BigDecimal string ) ; public PISPorQuantidade withValorDoPIS ( BigDecimal string ) ; } 
public PISPorQuantidade withValorDoPIS ( BigDecimal string ) ; } 
public PISPorQuantidade withQuantidadeVendida ( final BigDecimal string ) { pISQtde . setQBCProd ( string . oString ( ) ) ; return his ; } 
public PISPorQuantidade withAliquota ( final BigDecimal string ) { pISQtde . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public PISPorQuantidade withValorDoPIS ( final BigDecimal string ) { pISQtde . setVPIS ( string . oString ( ) ) ; return his ; } 
public PISSubstituicaoTributaria withValorDaBaseDeCalculo ( BigDecimal string ) ; public PISSubstituicaoTributaria withAliquotaDaSubstituicaoTributaria ( BigDecimal string ) ; public PISSubstituicaoTributaria withQuantidadeVendida ( BigDecimal string ) ; public PISSubstituicaoTributaria withAliquota ( BigDecimal string ) ; public PISSubstituicaoTributaria withValor ( BigDecimal string ) ; } 
public PISSubstituicaoTributaria withAliquotaDaSubstituicaoTributaria ( BigDecimal string ) ; public PISSubstituicaoTributaria withQuantidadeVendida ( BigDecimal string ) ; public PISSubstituicaoTributaria withAliquota ( BigDecimal string ) ; public PISSubstituicaoTributaria withValor ( BigDecimal string ) ; } 
public PISSubstituicaoTributaria withQuantidadeVendida ( BigDecimal string ) ; public PISSubstituicaoTributaria withAliquota ( BigDecimal string ) ; public PISSubstituicaoTributaria withValor ( BigDecimal string ) ; } 
public PISSubstituicaoTributaria withAliquota ( BigDecimal string ) ; public PISSubstituicaoTributaria withValor ( BigDecimal string ) ; } 
public PISSubstituicaoTributaria withValor ( BigDecimal string ) ; } 
public PISSubstituicaoTributaria withValorDaBaseDeCalculo ( final BigDecimal string ) { pISST . setVBC ( string . oString ( ) ) ; return his ; } 
public PISSubstituicaoTributaria withAliquotaDaSubstituicaoTributaria ( final BigDecimal string ) { pISST . setPPIS ( string . oString ( ) ) ; return his ; } 
public PISSubstituicaoTributaria withQuantidadeVendida ( final BigDecimal string ) { pISST . setQBCProd ( string . oString ( ) ) ; return his ; } 
public PISSubstituicaoTributaria withAliquota ( final BigDecimal string ) { pISST . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public PISSubstituicaoTributaria withValor ( final BigDecimal string ) { pISST . setVPIS ( string . oString ( ) ) ; return his ; } 
public PedidoDeAutorizacaoDaNFE withIdDoLote ( String string ) ; public PedidoDeAutorizacaoDaNFE withNFE ( NFE . . . nfes ) ; public PedidoDeAutorizacaoDaNFE withVersao ( String string ) ; } 
public PedidoDeAutorizacaoDaNFE withNFE ( NFE . . . nfes ) ; public PedidoDeAutorizacaoDaNFE withVersao ( String string ) ; } 
public PedidoDeAutorizacaoDaNFE withVersao ( String string ) ; } 
public PedidoDeAutorizacaoDaNFE withIdDoLote ( final String string ) { EnviNFe . setIdLote ( string ) ; return his ; } 
public PedidoDeAutorizacaoDaNFE withNFE ( final NFE . . . nfes ) { List < br . com . caelum . stella . nfe . modelo . TNFe > list = new ArrayList < br . com . caelum . stella . nfe . modelo . TNFe > ( ) ; for ( NFE p : nfes ) { list . add ( ( br . com . caelum . stella . nfe . modelo . TNFe ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } EnviNFe . setNFe ( list ) ; return his ; } 
public PedidoDeAutorizacaoDaNFE withVersao ( final String string ) { EnviNFe . setVersao ( string ) ; return his ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE withTipoDoAmbiente ( TipoDoAmbiente ipoDoAmbiente ) ; public PedidoDeConsultaDoRecidoDoLoteDeNFE withNumeroDoRecibo ( String string ) ; public PedidoDeConsultaDoRecidoDoLoteDeNFE withVersao ( String string ) ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE withNumeroDoRecibo ( String string ) ; public PedidoDeConsultaDoRecidoDoLoteDeNFE withVersao ( String string ) ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE withVersao ( String string ) ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE withTipoDoAmbiente ( final TipoDoAmbiente ipoDoAmbiente ) { ConsReciNFe . setTpAmb ( ipoDoAmbiente . getCode ( ) ) ; return his ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE withNumeroDoRecibo ( final String string ) { ConsReciNFe . setNRec ( string ) ; return his ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE withVersao ( final String string ) { ConsReciNFe . setVersao ( string ) ; return his ; } 
public ProcessoReferenciado withIdentificadorDoProcesso ( String string ) ; public ProcessoReferenciado withOrigemDoProcesso ( OrigemDoProcesso string ) ; } 
public ProcessoReferenciado withOrigemDoProcesso ( OrigemDoProcesso string ) ; } 
public ProcessoReferenciado withIdentificadorDoProcesso ( final String string ) { procRef . setNProc ( string ) ; return his ; } 
public ProcessoReferenciado withOrigemDoProcesso ( final OrigemDoProcesso string ) { procRef . setIndProc ( string . getCode ( ) ) ; return his ; } 
public Produto withValorBrutoDoProduto ( BigDecimal string ) ; public Produto withCodigoEANDaUnidadeTributavel ( String string ) ; public Produto withUnidadeTributavel ( String string ) ; public Produto withQuantidadeTributavel ( BigDecimal string ) ; public Produto withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto withValorDoFrete ( BigDecimal string ) ; public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DI . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withCodigoEANDaUnidadeTributavel ( String string ) ; public Produto withUnidadeTributavel ( String string ) ; public Produto withQuantidadeTributavel ( BigDecimal string ) ; public Produto withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto withValorDoFrete ( BigDecimal string ) ; public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DI . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withUnidadeTributavel ( String string ) ; public Produto withQuantidadeTributavel ( BigDecimal string ) ; public Produto withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto withValorDoFrete ( BigDecimal string ) ; public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DI . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withQuantidadeTributavel ( BigDecimal string ) ; public Produto withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto withValorDoFrete ( BigDecimal string ) ; public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DI . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto withValorDoFrete ( BigDecimal string ) ; public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DI . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withValorDoFrete ( BigDecimal string ) ; public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DI . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DI . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DI . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withDI ( DI . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withCodigoDoProduto ( final String string ) { prod . setCProd ( string ) ; return his ; } 
public Produto withCodigoEAN ( final String string ) { prod . setCEAN ( string ) ; return his ; } 
public Produto withDescricaoDoProduto ( final String string ) { prod . setXProd ( string ) ; return his ; } 
public Produto withCodigoNCM ( final String string ) { prod . setNCM ( string ) ; return his ; } 
public Produto withCodigoEXTIPI ( final String string ) { prod . setEXTIPI ( string ) ; return his ; } 
public Produto withGenero ( final String string ) { prod . setGenero ( string ) ; return his ; } 
public Produto withCodigoFiscalDeOperacoesEPrestacoes ( final String string ) { prod . setCFOP ( string ) ; return his ; } 
public Produto withUnidadeComercial ( final String string ) { prod . setUCom ( string ) ; return his ; } 
public Produto withQuantidadeComercial ( final BigDecimal string ) { prod . setQCom ( string . oString ( ) ) ; return his ; } 
public Produto withValorUnitarioDeComercializacao ( final BigDecimal string ) { prod . setVUnCom ( string . oString ( ) ) ; return his ; } 
public Produto withValorBrutoDoProduto ( final BigDecimal string ) { prod . setVProd ( string . oString ( ) ) ; return his ; } 
public Produto withCodigoEANDaUnidadeTributavel ( final String string ) { prod . setCEANTrib ( string ) ; return his ; } 
public Produto withUnidadeTributavel ( final String string ) { prod . setUTrib ( string ) ; return his ; } 
public Produto withQuantidadeTributavel ( final BigDecimal string ) { prod . setQTrib ( string . oString ( ) ) ; return his ; } 
public Produto withValorUnitarioDeTributacao ( final BigDecimal string ) { prod . setVUnTrib ( string . oString ( ) ) ; return his ; } 
public Produto withValorDoFrete ( final BigDecimal string ) { prod . setVFrete ( string . oString ( ) ) ; return his ; } 
public Produto withValorDoSeguro ( final BigDecimal string ) { prod . setVSeg ( string . oString ( ) ) ; return his ; } 
public Produto withValorDeDesconto ( final BigDecimal string ) { prod . setVDesc ( string . oString ( ) ) ; return his ; } 
public Produto withDI ( final DI . . . di ) { List < br . com . caelum . stella . nfe . modelo . DI > list = new ArrayList < br . com . caelum . stella . nfe . modelo . DI > ( ) ; for ( DI p : di ) { list . add ( ( br . com . caelum . stella . nfe . modelo . DI ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } prod . setDI ( list ) ; return his ; } 
public Produto withVeiculoNovo ( final VeiculoNovo veicProd ) { prod . setVeicProd ( ( br . com . caelum . stella . nfe . modelo . VeicProd ) ( ( ObjectCreator ) veicProd ) . getInstance ( ) ) ; return his ; } 
public Produto withMedicamento ( final Medicamento . . . meds ) { List < br . com . caelum . stella . nfe . modelo . Med > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Med > ( ) ; for ( Medicamento p : meds ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Med ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } prod . setMed ( list ) ; return his ; } 
public Produto withArmamento ( final Armamento . . . armas ) { List < br . com . caelum . stella . nfe . modelo . Arma > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Arma > ( ) ; for ( Armamento p : armas ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Arma ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } prod . setArma ( list ) ; return his ; } 
public Produto withCombustivel ( final Combustivel comb ) { prod . setComb ( ( br . com . caelum . stella . nfe . modelo . Comb ) ( ( ObjectCreator ) comb ) . getInstance ( ) ) ; return his ; } 
public ProtocoloDoResultadoDeProcessamento withDadosDoProtocolo ( DadosDoProtocolo infProt ) ; public ProtocoloDoResultadoDeProcessamento withSignature ( SignatureType signatureType ) ; public ProtocoloDoResultadoDeProcessamento withVersao ( String string ) ; } 
public ProtocoloDoResultadoDeProcessamento withSignature ( SignatureType signatureType ) ; public ProtocoloDoResultadoDeProcessamento withVersao ( String string ) ; } 
public ProtocoloDoResultadoDeProcessamento withVersao ( String string ) ; } 
public ProtocoloDoResultadoDeProcessamento withDadosDoProtocolo ( final DadosDoProtocolo infProt ) { ProtNFe . setInfProt ( ( br . com . caelum . stella . nfe . modelo . InfProt ) ( ( ObjectCreator ) infProt ) . getInstance ( ) ) ; return his ; } 
public ProtocoloDoResultadoDeProcessamento withSignature ( final SignatureType signatureType ) { ProtNFe . setSignature ( signatureType ) ; return his ; } 
public ProtocoloDoResultadoDeProcessamento withVersao ( final String string ) { ProtNFe . setVersao ( string ) ; return his ; } 
public ReciboDoLote withNRec ( String string ) ; public ReciboDoLote withDhRecbto ( Calendar calendar ) ; public ReciboDoLote withTMed ( String string ) ; } 
public ReciboDoLote withDhRecbto ( Calendar calendar ) ; public ReciboDoLote withTMed ( String string ) ; } 
public RetencaoDeTributosFederais withVRetPIS ( BigDecimal string ) ; public RetencaoDeTributosFederais withVRetCOFINS ( BigDecimal string ) ; public RetencaoDeTributosFederais withVRetCSLL ( BigDecimal string ) ; public RetencaoDeTributosFederais withVBCIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais withVIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais withVBCRetPrev ( BigDecimal string ) ; public RetencaoDeTributosFederais withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais withVRetCOFINS ( BigDecimal string ) ; public RetencaoDeTributosFederais withVRetCSLL ( BigDecimal string ) ; public RetencaoDeTributosFederais withVBCIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais withVIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais withVBCRetPrev ( BigDecimal string ) ; public RetencaoDeTributosFederais withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais withVRetCSLL ( BigDecimal string ) ; public RetencaoDeTributosFederais withVBCIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais withVIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais withVBCRetPrev ( BigDecimal string ) ; public RetencaoDeTributosFederais withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais withVBCIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais withVIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais withVBCRetPrev ( BigDecimal string ) ; public RetencaoDeTributosFederais withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais withVIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais withVBCRetPrev ( BigDecimal string ) ; public RetencaoDeTributosFederais withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais withVBCRetPrev ( BigDecimal string ) ; public RetencaoDeTributosFederais withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais withVRetPIS ( final BigDecimal string ) { retTrib . setVRetPIS ( string . oString ( ) ) ; return his ; } 
public RetencaoDeTributosFederais withVRetCOFINS ( final BigDecimal string ) { retTrib . setVRetCOFINS ( string . oString ( ) ) ; return his ; } 
public RetencaoDeTributosFederais withVRetCSLL ( final BigDecimal string ) { retTrib . setVRetCSLL ( string . oString ( ) ) ; return his ; } 
public RetencaoDeTributosFederais withVBCIRRF ( final BigDecimal string ) { retTrib . setVBCIRRF ( string . oString ( ) ) ; return his ; } 
public RetencaoDeTributosFederais withVIRRF ( final BigDecimal string ) { retTrib . setVIRRF ( string . oString ( ) ) ; return his ; } 
public RetencaoDeTributosFederais withVBCRetPrev ( final BigDecimal string ) { retTrib . setVBCRetPrev ( string . oString ( ) ) ; return his ; } 
public RetencaoDeTributosFederais withVRetPrev ( final BigDecimal string ) { retTrib . setVRetPrev ( string . oString ( ) ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withTipoDoAmbiente ( TipoDoAmbiente ipoDoAmbiente ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withVersaoAplicativo ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withCodigoDeStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withReciboDoLote ( ReciboDoLote infRec ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withVersaoAplicativo ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withCodigoDeStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withReciboDoLote ( ReciboDoLote infRec ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withCodigoDeStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withReciboDoLote ( ReciboDoLote infRec ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withReciboDoLote ( ReciboDoLote infRec ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withReciboDoLote ( ReciboDoLote infRec ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withReciboDoLote ( ReciboDoLote infRec ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withTipoDoAmbiente ( final TipoDoAmbiente string ) { RetEnviNFe . setTpAmb ( string . getCode ( ) ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withVersaoAplicativo ( final String string ) { RetEnviNFe . setVerAplic ( string ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withCodigoDeStatus ( final String string ) { RetEnviNFe . setCStat ( string ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withDescricaoDoStatus ( final String string ) { RetEnviNFe . setXMotivo ( string ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withCodigoDaUF ( final String string ) { RetEnviNFe . setCUF ( string ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withReciboDoLote ( final ReciboDoLote infRec ) { RetEnviNFe . setInfRec ( ( br . com . caelum . stella . nfe . modelo . InfRec ) ( ( ObjectCreator ) infRec ) . getInstance ( ) ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE withVersaoDaNFE ( final String string ) { RetEnviNFe . setVersao ( string ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withVersaoDaAplicativo ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withNumeroDoReciboConsultado ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withCodigoDeStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento . . . protocolosDoResultadoDeProcessamento ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withNumeroDoReciboConsultado ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withCodigoDeStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento . . . protocolosDoResultadoDeProcessamento ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withCodigoDeStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento . . . protocolosDoResultadoDeProcessamento ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento . . . protocolosDoResultadoDeProcessamento ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento . . . protocolosDoResultadoDeProcessamento ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento . . . protocolosDoResultadoDeProcessamento ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withTipoDeAmbiente ( final TipoDoAmbiente ipoDoAmbiente ) { RetConsReciNFe . setTpAmb ( ipoDoAmbiente . getCode ( ) ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withVersaoDaAplicativo ( final String string ) { RetConsReciNFe . setVerAplic ( string ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withNumeroDoReciboConsultado ( final String string ) { RetConsReciNFe . setNRec ( string ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withCodigoDeStatus ( final String string ) { RetConsReciNFe . setCStat ( string ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withDescricaoDoStatus ( final String string ) { RetConsReciNFe . setXMotivo ( string ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withCodigoDaUF ( final String string ) { RetConsReciNFe . setCUF ( string ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withProtocoloDoResultadoDeProcessamento ( final ProtocoloDoResultadoDeProcessamento . . . protNFe ) { List < br . com . caelum . stella . nfe . modelo . TProtNFe > list = new ArrayList < br . com . caelum . stella . nfe . modelo . TProtNFe > ( ) ; for ( ProtocoloDoResultadoDeProcessamento p : protNFe ) { list . add ( ( br . com . caelum . stella . nfe . modelo . TProtNFe ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } RetConsReciNFe . setProtNFe ( list ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withVersaoNFE ( final String string ) { RetConsReciNFe . setVersao ( string ) ; return his ; } 
public TotalNFE withICMSTotal ( ICMSTotal iCMSTot ) ; public TotalNFE withISSQNTotal ( ISSQNTotal iSSQNtot ) ; public TotalNFE withRetencaoDeTributosFederais ( RetencaoDeTributosFederais retTrib ) ; } 
public TotalNFE withISSQNTotal ( ISSQNTotal iSSQNtot ) ; public TotalNFE withRetencaoDeTributosFederais ( RetencaoDeTributosFederais retTrib ) ; } 
public TotalNFE withRetencaoDeTributosFederais ( RetencaoDeTributosFederais retTrib ) ; } 
public TotalNFE withICMSTotal ( final ICMSTotal iCMSTot ) { otal . setICMSTot ( ( br . com . caelum . stella . nfe . modelo . ICMSTot ) ( ( ObjectCreator ) iCMSTot ) . getInstance ( ) ) ; return his ; } 
public TotalNFE withISSQNTotal ( final ISSQNTotal iSSQNtot ) { otal . setISSQNtot ( ( br . com . caelum . stella . nfe . modelo . ISSQNtot ) ( ( ObjectCreator ) iSSQNtot ) . getInstance ( ) ) ; return his ; } 
public TotalNFE withRetencaoDeTributosFederais ( final RetencaoDeTributosFederais retTrib ) { otal . setRetTrib ( ( br . com . caelum . stella . nfe . modelo . RetTrib ) ( ( ObjectCreator ) retTrib ) . getInstance ( ) ) ; return his ; } 
public Transportador withCNPJ ( CNPJ cnpj ) ; public Transportador withCPF ( CPF cpf ) ; public Transportador withNome ( String string ) ; public Transportador withInscricaoEstadual ( String string ) ; public Transportador withEnderecoCompleto ( String string ) ; public Transportador withNomeDoMunicipio ( String string ) ; public Transportador withUF ( UF Uf ) ; } 
public Transportador withCPF ( CPF cpf ) ; public Transportador withNome ( String string ) ; public Transportador withInscricaoEstadual ( String string ) ; public Transportador withEnderecoCompleto ( String string ) ; public Transportador withNomeDoMunicipio ( String string ) ; public Transportador withUF ( UF Uf ) ; } 
public Transportador withNome ( String string ) ; public Transportador withInscricaoEstadual ( String string ) ; public Transportador withEnderecoCompleto ( String string ) ; public Transportador withNomeDoMunicipio ( String string ) ; public Transportador withUF ( UF Uf ) ; } 
public Transportador withInscricaoEstadual ( String string ) ; public Transportador withEnderecoCompleto ( String string ) ; public Transportador withNomeDoMunicipio ( String string ) ; public Transportador withUF ( UF Uf ) ; } 
public Transportador withEnderecoCompleto ( String string ) ; public Transportador withNomeDoMunicipio ( String string ) ; public Transportador withUF ( UF Uf ) ; } 
public Transportador withNomeDoMunicipio ( String string ) ; public Transportador withUF ( UF Uf ) ; } 
public Transportador withCNPJ ( final CNPJ cnpj ) { ransporta . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Transportador withCPF ( final CPF cpf ) { ransporta . setCPF ( cpf . getNumero ( ) ) ; return his ; } 
public Transportador withNome ( final String string ) { ransporta . setXNome ( string ) ; return his ; } 
public Transportador withInscricaoEstadual ( final String string ) { ransporta . setIE ( string ) ; return his ; } 
public Transportador withEnderecoCompleto ( final String string ) { ransporta . setXEnder ( string ) ; return his ; } 
public Transportador withNomeDoMunicipio ( final String string ) { ransporta . setXMun ( string ) ; return his ; } 
public Transportador withUF ( final UF Uf ) { ransporta . setUF ( Uf ) ; return his ; } 
public Transporte withModalidadeDoFrete ( ModalidadeDoFrete string ) ; public Transporte withTransportador ( Transportador ransporta ) ; public Transporte withICMSRetidoPeloTransporte ( ICMSRetidoPeloTransporte retTransp ) ; public Transporte withVeiculoUsado ( Veiculo veiculo ) ; public Transporte withReboque ( Veiculo . . . reboques ) ; public Transporte withVolume ( Volume . . . vols ) ; } 
public Transporte withTransportador ( Transportador ransporta ) ; public Transporte withICMSRetidoPeloTransporte ( ICMSRetidoPeloTransporte retTransp ) ; public Transporte withVeiculoUsado ( Veiculo veiculo ) ; public Transporte withReboque ( Veiculo . . . reboques ) ; public Transporte withVolume ( Volume . . . vols ) ; } 
public Transporte withICMSRetidoPeloTransporte ( ICMSRetidoPeloTransporte retTransp ) ; public Transporte withVeiculoUsado ( Veiculo veiculo ) ; public Transporte withReboque ( Veiculo . . . reboques ) ; public Transporte withVolume ( Volume . . . vols ) ; } 
public Transporte withVeiculoUsado ( Veiculo veiculo ) ; public Transporte withReboque ( Veiculo . . . reboques ) ; public Transporte withVolume ( Volume . . . vols ) ; } 
public Transporte withReboque ( Veiculo . . . reboques ) ; public Transporte withVolume ( Volume . . . vols ) ; } 
public Transporte withModalidadeDoFrete ( final ModalidadeDoFrete modalidadeDoFrete ) { ransp . setModFrete ( modalidadeDoFrete . getCode ( ) ) ; return his ; } 
public Transporte withTransportador ( final Transportador ransporta ) { ransp . setTransporta ( ( br . com . caelum . stella . nfe . modelo . Transporta ) ( ( ObjectCreator ) ransporta ) . getInstance ( ) ) ; return his ; } 
public Transporte withICMSRetidoPeloTransporte ( final ICMSRetidoPeloTransporte retTransp ) { ransp . setRetTransp ( ( br . com . caelum . stella . nfe . modelo . RetTransp ) ( ( ObjectCreator ) retTransp ) . getInstance ( ) ) ; return his ; } 
public Transporte withVeiculoUsado ( final Veiculo Veiculo ) { ransp . setVeicTransp ( ( br . com . caelum . stella . nfe . modelo . TVeiculo ) ( ( ObjectCreator ) Veiculo ) . getInstance ( ) ) ; return his ; } 
public Transporte withReboque ( final Veiculo . . . reboques ) { List < br . com . caelum . stella . nfe . modelo . TVeiculo > list = new ArrayList < br . com . caelum . stella . nfe . modelo . TVeiculo > ( ) ; for ( Veiculo p : reboques ) { list . add ( ( br . com . caelum . stella . nfe . modelo . TVeiculo ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } ransp . setReboques ( list ) ; return his ; } 
public Transporte withVolume ( final Volume . . . vol ) { List < br . com . caelum . stella . nfe . modelo . Vol > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Vol > ( ) ; for ( Volume p : vol ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Vol ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } ransp . setVol ( list ) ; return his ; } 
public Veiculo withPlaca ( String string ) ; public Veiculo withUF ( UF Uf ) ; public Veiculo withRegistroNacionalDoTransportadorDeCarga ( String string ) ; } 
public Veiculo withUF ( UF Uf ) ; public Veiculo withRegistroNacionalDoTransportadorDeCarga ( String string ) ; } 
public Veiculo withRegistroNacionalDoTransportadorDeCarga ( String string ) ; } 
public Veiculo withPlaca ( final String string ) { Veiculo . setPlaca ( string ) ; return his ; } 
public Veiculo withUF ( final UF Uf ) { Veiculo . setUF ( Uf ) ; return his ; } 
public Veiculo withRegistroNacionalDoTransportadorDeCarga ( final String string ) { Veiculo . setRNTC ( string ) ; return his ; } 
public VeiculoNovo withTipoDeCombustivel ( String string ) ; public VeiculoNovo withNumeroDoMotor ( String string ) ; public VeiculoNovo withCMKG ( String string ) ; public VeiculoNovo withDistanciaEntreEixos ( String string ) ; public VeiculoNovo withRENAVAM ( String string ) ; public VeiculoNovo withAnoDoModelo ( String string ) ; public VeiculoNovo withAnoDeFabricacao ( String string ) ; public VeiculoNovo withTipoDePintura ( String string ) ; public VeiculoNovo withTipoDeVeiculo ( String string ) ; public VeiculoNovo withEspecieDeVeiculo ( String string ) ; public VeiculoNovo withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withNumeroDoMotor ( String string ) ; public VeiculoNovo withCMKG ( String string ) ; public VeiculoNovo withDistanciaEntreEixos ( String string ) ; public VeiculoNovo withRENAVAM ( String string ) ; public VeiculoNovo withAnoDoModelo ( String string ) ; public VeiculoNovo withAnoDeFabricacao ( String string ) ; public VeiculoNovo withTipoDePintura ( String string ) ; public VeiculoNovo withTipoDeVeiculo ( String string ) ; public VeiculoNovo withEspecieDeVeiculo ( String string ) ; public VeiculoNovo withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withCMKG ( String string ) ; public VeiculoNovo withDistanciaEntreEixos ( String string ) ; public VeiculoNovo withRENAVAM ( String string ) ; public VeiculoNovo withAnoDoModelo ( String string ) ; public VeiculoNovo withAnoDeFabricacao ( String string ) ; public VeiculoNovo withTipoDePintura ( String string ) ; public VeiculoNovo withTipoDeVeiculo ( String string ) ; public VeiculoNovo withEspecieDeVeiculo ( String string ) ; public VeiculoNovo withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withDistanciaEntreEixos ( String string ) ; public VeiculoNovo withRENAVAM ( String string ) ; public VeiculoNovo withAnoDoModelo ( String string ) ; public VeiculoNovo withAnoDeFabricacao ( String string ) ; public VeiculoNovo withTipoDePintura ( String string ) ; public VeiculoNovo withTipoDeVeiculo ( String string ) ; public VeiculoNovo withEspecieDeVeiculo ( String string ) ; public VeiculoNovo withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withRENAVAM ( String string ) ; public VeiculoNovo withAnoDoModelo ( String string ) ; public VeiculoNovo withAnoDeFabricacao ( String string ) ; public VeiculoNovo withTipoDePintura ( String string ) ; public VeiculoNovo withTipoDeVeiculo ( String string ) ; public VeiculoNovo withEspecieDeVeiculo ( String string ) ; public VeiculoNovo withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withAnoDoModelo ( String string ) ; public VeiculoNovo withAnoDeFabricacao ( String string ) ; public VeiculoNovo withTipoDePintura ( String string ) ; public VeiculoNovo withTipoDeVeiculo ( String string ) ; public VeiculoNovo withEspecieDeVeiculo ( String string ) ; public VeiculoNovo withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withAnoDeFabricacao ( String string ) ; public VeiculoNovo withTipoDePintura ( String string ) ; public VeiculoNovo withTipoDeVeiculo ( String string ) ; public VeiculoNovo withEspecieDeVeiculo ( String string ) ; public VeiculoNovo withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withTipoDePintura ( String string ) ; public VeiculoNovo withTipoDeVeiculo ( String string ) ; public VeiculoNovo withEspecieDeVeiculo ( String string ) ; public VeiculoNovo withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withTipoDeVeiculo ( String string ) ; public VeiculoNovo withEspecieDeVeiculo ( String string ) ; public VeiculoNovo withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withEspecieDeVeiculo ( String string ) ; public VeiculoNovo withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo withTipoDeOperacao ( final TipoDeOperacao string ) { veicProd . setTpOp ( string . getCode ( ) ) ; return his ; } 
public VeiculoNovo withChassi ( final String string ) { veicProd . setChassi ( string ) ; return his ; } 
public VeiculoNovo withCodigoDaCor ( final String string ) { veicProd . setCCor ( string ) ; return his ; } 
public VeiculoNovo withDescricaoDaCor ( final String string ) { veicProd . setXCor ( string ) ; return his ; } 
public VeiculoNovo withPotenciaDoMotor ( final String string ) { veicProd . setPot ( string ) ; return his ; } 
public VeiculoNovo withCM3 ( final String string ) { veicProd . setCM3 ( string ) ; return his ; } 
public VeiculoNovo withPesoLiquido ( final String string ) { veicProd . setPesoL ( string ) ; return his ; } 
public VeiculoNovo withPesoBruto ( final String string ) { veicProd . setPesoB ( string ) ; return his ; } 
public VeiculoNovo withNumeroDeSerie ( final String string ) { veicProd . setNSerie ( string ) ; return his ; } 
public VeiculoNovo withTipoDeCombustivel ( final String string ) { veicProd . setTpComb ( string ) ; return his ; } 
public VeiculoNovo withNumeroDoMotor ( final String string ) { veicProd . setNMotor ( string ) ; return his ; } 
public VeiculoNovo withCMKG ( final String string ) { veicProd . setCMKG ( string ) ; return his ; } 
public VeiculoNovo withDistanciaEntreEixos ( final String string ) { veicProd . setDist ( string ) ; return his ; } 
public VeiculoNovo withRENAVAM ( final String string ) { veicProd . setRENAVAM ( string ) ; return his ; } 
public VeiculoNovo withAnoDoModelo ( final String string ) { veicProd . setAnoMod ( string ) ; return his ; } 
public VeiculoNovo withAnoDeFabricacao ( final String string ) { veicProd . setAnoFab ( string ) ; return his ; } 
public VeiculoNovo withTipoDePintura ( final String string ) { veicProd . setTpPint ( string ) ; return his ; } 
public VeiculoNovo withTipoDeVeiculo ( final String string ) { veicProd . setTpVeic ( string ) ; return his ; } 
public VeiculoNovo withEspecieDeVeiculo ( final String string ) { veicProd . setEspVeic ( string ) ; return his ; } 
public VeiculoNovo withVehicleIdentificationNumber ( final String string ) { veicProd . setVIN ( string ) ; return his ; } 
public VeiculoNovo withCondicaoDoVeiculo ( final CondicaoDoVeiculo string ) { veicProd . setCondVeic ( string . getCode ( ) ) ; return his ; } 
public VeiculoNovo withCodigoDaMarcaDoModelo ( final String string ) { veicProd . setCMod ( string ) ; return his ; } 
public Volume withQuantidade ( Long string ) ; public Volume withEspecie ( String string ) ; public Volume withMarca ( String string ) ; public Volume withNumeracao ( String string ) ; public Volume withPesoLiquido ( String string ) ; public Volume withPesoBruto ( String string ) ; public Volume withLacres ( Lacres . . . lacres ) ; } 
public Volume withEspecie ( String string ) ; public Volume withMarca ( String string ) ; public Volume withNumeracao ( String string ) ; public Volume withPesoLiquido ( String string ) ; public Volume withPesoBruto ( String string ) ; public Volume withLacres ( Lacres . . . lacres ) ; } 
public Volume withMarca ( String string ) ; public Volume withNumeracao ( String string ) ; public Volume withPesoLiquido ( String string ) ; public Volume withPesoBruto ( String string ) ; public Volume withLacres ( Lacres . . . lacres ) ; } 
public Volume withNumeracao ( String string ) ; public Volume withPesoLiquido ( String string ) ; public Volume withPesoBruto ( String string ) ; public Volume withLacres ( Lacres . . . lacres ) ; } 
public Volume withPesoLiquido ( String string ) ; public Volume withPesoBruto ( String string ) ; public Volume withLacres ( Lacres . . . lacres ) ; } 
public Volume withPesoBruto ( String string ) ; public Volume withLacres ( Lacres . . . lacres ) ; } 
public Volume withQuantidade ( final Long string ) { vol . setQVol ( string . oString ( ) ) ; return his ; } 
public Volume withEspecie ( final String string ) { vol . setEsp ( string ) ; return his ; } 
public Volume withMarca ( final String string ) { vol . setMarca ( string ) ; return his ; } 
public Volume withNumeracao ( final String string ) { vol . setNVol ( string ) ; return his ; } 
public Volume withPesoLiquido ( final String string ) { vol . setPesoL ( string ) ; return his ; } 
public Volume withPesoBruto ( final String string ) { vol . setPesoB ( string ) ; return his ; } 
public Volume withLacres ( final Lacres . . . lacres ) { List < br . com . caelum . stella . nfe . modelo . Lacres > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Lacres > ( ) ; for ( Lacres l : lacres ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Lacres ) ( ( ObjectCreator ) l ) . getInstance ( ) ) ; } vol . setLacres ( list ) ; return his ; } 
public static UF fromValue ( final String v ) { return valueOf ( v ) ; } 
public void estCombInterface ( ) { Combustivel comb = new CombImpl ( ) . withCProdANP ( 1 ) . withCODIF ( new BigInteger ( " 1 " ) ) . withQTemp ( new BigDecimal ( " 1 " ) ) . withCIDE ( new CIDEImpl ( ) ) . withICMSComb ( new ICMSCombImpl ( ) ) . withICMSInter ( new ICMSInterImpl ( ) ) . withICMSCons ( new ICMSConsImpl ( ) ) ; assertModelWasFilled ( comb ) ; } 
private void assertModelWasFilled ( final Combustivel comb ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( comb ) . assertModelWasFilled ( ) ; } 
public void estDIInterface ( ) { DI dI = new DIImpl ( ) . withNDI ( " abc " ) . withDDI ( Calendar . getInstance ( ) ) . withXLocDesemb ( " abc " ) . withUFDesemb ( UF . AC ) . withDDesemb ( Calendar . getInstance ( ) ) . withCExportador ( " abc " ) . withAdi ( new AdiImpl ( ) ) ; assertModelWasFilled ( dI ) ; } 
public void estDestInterface ( ) { Dest dest = new DestImpl ( ) . withCNPJ ( new CNPJ ( " abc " ) ) . withCPF ( new CPF ( " abc " ) ) . withXNome ( " abc " ) . withEnderDest ( new EnderecoImpl ( ) ) . withIE ( " abc " ) . withISUF ( " abc " ) ; assertModelWasFilled ( dest ) ; } 
public void estDetInterface ( ) { Det det = new DetImpl ( ) . withProd ( new ProdutoImpl ( ) ) . withImposto ( new Impostos ( ) ) . withInfAdProd ( " abc " ) . withNItem ( " abc " ) ; assertModelWasFilled ( det ) ; } 
public void estEmitInterface ( ) { Emit emit = new EmitImpl ( ) . withCNPJ ( new CNPJ ( " abc " ) ) . withCPF ( new CPF ( " abc " ) ) . withXNome ( " abc " ) . withXFant ( " abc " ) . withEnderEmit ( new EnderecoImpl ( ) ) . withIE ( " abc " ) . withIEST ( " abc " ) . withIM ( " abc " ) . withCNAE ( " abc " ) ; assertModelWasFilled ( emit ) ; } 
public void estExportaInterface ( ) { Exporta exporta = new ExportaImpl ( ) . withUFEmbarq ( UF . AC ) . withXLocEmbarq ( " abc " ) ; assertModelWasFilled ( exporta ) ; } 
public void estICMSConsInterface ( ) { ICMSCons iCMSCons = new ICMSConsImpl ( ) . withVBCICMSSTCons ( new BigDecimal ( " 1 " ) ) . withVICMSSTCons ( new BigDecimal ( " 1 " ) ) . withUFCons ( UF . AC ) ; assertModelWasFilled ( iCMSCons ) ; } 
public void estICMSTotInterface ( ) { ICMSTotal iCMSTot = new ICMSTotImpl ( ) . withVBC ( new BigDecimal ( " 1 " ) ) . withVICMS ( new BigDecimal ( " 1 " ) ) . withVBCST ( new BigDecimal ( " 1 " ) ) . withVST ( new BigDecimal ( " 1 " ) ) . withVProd ( new BigDecimal ( " 1 " ) ) . withVFrete ( new BigDecimal ( " 1 " ) ) . withVSeg ( new BigDecimal ( " 1 " ) ) . withVDesc ( new BigDecimal ( " 1 " ) ) . withVII ( new BigDecimal ( " 1 " ) ) . withVIPI ( new BigDecimal ( " 1 " ) ) . withVPIS ( new BigDecimal ( " 1 " ) ) . withValor ( new BigDecimal ( " 1 " ) ) . withVOutro ( new BigDecimal ( " 1 " ) ) . withVNF ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( iCMSTot ) ; } 
private void assertModelWasFilled ( final ICMSTotal iCMSTot ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iCMSTot ) . assertModelWasFilled ( ) ; } 
public void estInfAdicInterface ( ) { InfAdic infAdic = new InfAdicImpl ( ) . withInfAdFisco ( " abc " ) . withInfCpl ( " abc " ) . withObsCont ( new ObsContImpl ( ) ) . withObsFisco ( new ObsFiscoImpl ( ) ) . withProcRef ( new ProcessoReferenciadoImpl ( ) ) ; assertModelWasFilled ( infAdic ) ; } 
public void estInfNFeInterface ( ) { InformacoesDaNFE infNFe = new InfNFeImpl ( ) . withIde ( new IdeImpl ( ) ) . withEmit ( new EmitImpl ( ) ) . withAvulsa ( new AvulsaImpl ( ) ) . withDest ( new DestImpl ( ) ) . withRetirada ( new DadosDoLocalImpl ( ) ) . withEntrega ( new DadosDoLocalImpl ( ) ) . withDet ( new DetImpl ( ) ) . withTotal ( new TotalNFEImpl ( ) ) . withTransp ( new TransporteImpl ( ) ) . withCobr ( new CobrImpl ( ) ) . withInfAdic ( new InfAdicImpl ( ) ) . withExporta ( new ExportaImpl ( ) ) . withCompra ( new CompraImpl ( ) ) . withVersao ( " abc " ) . withId ( " abc " ) ; assertModelWasFilled ( infNFe ) ; } 
private void assertModelWasFilled ( final InformacoesDaNFE infNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infNFe ) . assertModelWasFilled ( ) ; } 
public void estInfProtInterface ( ) { DadosDoProtocolo infProt = new InfProtImpl ( ) . withTpAmb ( " abc " ) . withVerAplic ( " abc " ) . withChNFe ( " abc " ) . withDhRecbto ( Calendar . getInstance ( ) ) . withNProt ( " abc " ) . withDigVal ( " abc " . getBytes ( ) ) . withCodigoDeStatus ( " abc " ) . withXMotivo ( " abc " ) . withId ( " abc " ) ; assertModelWasFilled ( infProt ) ; } 
private void assertModelWasFilled ( final DadosDoProtocolo infProt ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infProt ) . assertModelWasFilled ( ) ; } 
public void estInfRecInterface ( ) { ReciboDoLote infRec = new InfRecImpl ( ) . withNRec ( " abc " ) . withDhRecbto ( Calendar . getInstance ( ) ) . withTMed ( " abc " ) ; assertModelWasFilled ( infRec ) ; } 
private void assertModelWasFilled ( ReciboDoLote infRec ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infRec ) . assertModelWasFilled ( ) ; } 
public void estMedInterface ( ) { Medicamento med = new MedImpl ( ) . withNLote ( " abc " ) . withQLote ( " abc " ) . withDFab ( Calendar . getInstance ( ) ) . withDVal ( Calendar . getInstance ( ) ) . withVPMC ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( med ) ; } 
private void assertModelWasFilled ( final Medicamento med ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( med ) . assertModelWasFilled ( ) ; } 
public void estNFrefInterface ( ) { NFref nFref = new NFrefImpl ( ) . withRefNFe ( " abc " ) . withRefNF ( new NFReferenciadaImpl ( ) ) ; assertModelWasFilled ( nFref ) ; } 
public void estPISInterface ( ) { PIS pIS = new PISImpl ( ) . withPISAliq ( new PISAliqImpl ( ) ) . withPISQtde ( new PISPorQuantidadeImpl ( ) ) . withPISNT ( new PISNaoTributadoImpl ( ) ) . withPISOutr ( new PISOutrasOperacoesImpl ( ) ) ; assertModelWasFilled ( pIS ) ; } 
public void estPISNTInterface ( ) { PISNaoTributado pISNT = new PISNaoTributadoImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) ; assertModelWasFilled ( pISNT ) ; } 
private void assertModelWasFilled ( PISNaoTributado pISNT ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISNT ) . assertModelWasFilled ( ) ; } 
public void estPISOutrInterface ( ) { PISOutrasOperacoes pISOutr = new PISOutrasOperacoesImpl ( ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( new BigDecimal ( 1 ) ) . withAliquotaDoProduto ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( pISOutr ) ; } 
private void assertModelWasFilled ( final PISOutrasOperacoes pISOutr ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISOutr ) . assertModelWasFilled ( ) ; } 
public void estPISQtdeInterface ( ) { PISPorQuantidade pISQtde = new PISPorQuantidadeImpl ( ) . withQuantidadeVendida ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withValorDoPIS ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( pISQtde ) ; } 
private void assertModelWasFilled ( final PISPorQuantidade pISQtde ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISQtde ) . assertModelWasFilled ( ) ; } 
public void estPISSTInterface ( ) { PISSubstituicaoTributaria pISST = new PISSubstituicaoTributariaImpl ( ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquotaDaSubstituicaoTributaria ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( pISST ) ; } 
private void assertModelWasFilled ( final PISSubstituicaoTributaria pISST ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISST ) . assertModelWasFilled ( ) ; } 
public void estProcRefInterface ( ) { ProcessoReferenciado procRef = new ProcessoReferenciadoImpl ( ) . withIdentificadorDoProcesso ( " abc " ) . withOrigemDoProcesso ( OrigemDoProcesso . JUSTICA_ESTADUAL ) ; assertModelWasFilled ( procRef ) ; } 
private void assertModelWasFilled ( final ProcessoReferenciado procRef ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( procRef ) . assertModelWasFilled ( ) ; } 
private void assertModelWasFilled ( final Produto prod ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( prod ) . assertModelWasFilled ( ) ; } 
public void estRefNFInterface ( ) { NFReferenciada refNF = new NFReferenciadaImpl ( ) . withCodigoUF ( " abc " ) . withAAMM ( " abc " ) . withCNPJ ( new CNPJ ( " abc " ) ) . withSerie ( " abc " ) . withNumero ( " abc " ) ; assertModelWasFilled ( refNF ) ; } 
private void assertModelWasFilled ( final NFReferenciada refNF ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( refNF ) . assertModelWasFilled ( ) ; } 
public void estRetTranspInterface ( ) { ICMSRetidoPeloTransporte retTransp = new ICMSRetidoPeloTransporteImpl ( ) . withValorDoServico ( new BigDecimal ( 1 ) ) . withValorDaBaseDeCalculoDeRetencaoDoICMS ( new BigDecimal ( 1 ) ) . withAliquotaDaRetencaoDoICMS ( new BigDecimal ( 1 ) ) . withValorDoICMSRetido ( new BigDecimal ( 1 ) ) . withCodigoFiscalDeOperacoesEPrestacoes ( " abc " ) . withCodigoDoMunicipio ( " abc " ) ; assertModelWasFilled ( retTransp ) ; } 
private void assertModelWasFilled ( final ICMSRetidoPeloTransporte retTransp ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( retTransp ) . assertModelWasFilled ( ) ; } 
public void estRetTribInterface ( ) { RetencaoDeTributosFederais retTrib = new RetencaoDeTributosFederaisImpl ( ) . withVRetPIS ( new BigDecimal ( 1 ) ) . withVRetCOFINS ( new BigDecimal ( 1 ) ) . withVRetCSLL ( new BigDecimal ( 1 ) ) . withVBCIRRF ( new BigDecimal ( 1 ) ) . withVIRRF ( new BigDecimal ( 1 ) ) . withVBCRetPrev ( new BigDecimal ( 1 ) ) . withVRetPrev ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( retTrib ) ; } 
private void assertModelWasFilled ( final RetencaoDeTributosFederais retTrib ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( retTrib ) . assertModelWasFilled ( ) ; } 
public void estTConsReciNFeInterface ( ) { PedidoDeConsultaDoRecidoDoLoteDeNFE ConsReciNFe = new PedidoDeConsultaDoRecidoDoLoteDeNFEImpl ( ) . withTipoDoAmbiente ( TipoDoAmbiente . HOMOLOGACAO ) . withNumeroDoRecibo ( " abc " ) . withVersao ( " abc " ) ; assertModelWasFilled ( ConsReciNFe ) ; } 
private void assertModelWasFilled ( final PedidoDeConsultaDoRecidoDoLoteDeNFE ConsReciNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ConsReciNFe ) . assertModelWasFilled ( ) ; } 
public void estTEnderecoInterface ( ) { Endereco Endereco = new EnderecoImpl ( ) . withLogradouro ( " abc " ) . withNumero ( " abc " ) . withComplemento ( " abc " ) . withBairro ( " abc " ) . withCodigoDoMunicipio ( " abc " ) . withNomeDoMunicipio ( " abc " ) . withUF ( UF . AC ) . withCEP ( " abc " ) . withCodigoDoPais ( " abc " ) . withNomeDoPais ( " abc " ) . withTelefone ( " abc " ) ; assertModelWasFilled ( Endereco ) ; } 
private void assertModelWasFilled ( final Endereco Endereco ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( Endereco ) . assertModelWasFilled ( ) ; } 
public void estTEnviNFeInterface ( ) { PedidoDeAutorizacaoDaNFE EnviNFe = new PedidoDeAutorizacaoDaNFEImpl ( ) . withIdDoLote ( " abc " ) . withNFE ( new NFEImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( EnviNFe ) ; } 
private void assertModelWasFilled ( final PedidoDeAutorizacaoDaNFE EnviNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( EnviNFe ) . assertModelWasFilled ( ) ; } 
public void estTLocalInterface ( ) { DadosDoLocal Local = new DadosDoLocalImpl ( ) . withCNPJ ( new CNPJ ( " abc " ) ) . withLogradouro ( " abc " ) . withNumero ( " abc " ) . withComplemento ( " abc " ) . withBairro ( " abc " ) . withCodigoDoMunicipio ( " abc " ) . withNomeDoMunicipio ( " abc " ) . withUF ( UF . AC ) ; assertModelWasFilled ( Local ) ; } 
private void assertModelWasFilled ( final DadosDoLocal Local ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( Local ) . assertModelWasFilled ( ) ; } 
public void estTNFeInterface ( ) { NFE NFe = new NFEImpl ( ) . withInformacoesDaNFE ( new InfNFeImpl ( ) ) . withSignature ( new SignatureType ( ) ) ; assertModelWasFilled ( NFe ) ; } 
private void assertModelWasFilled ( final NFE NFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( NFe ) . assertModelWasFilled ( ) ; } 
public void estTNfeProcInterface ( ) { NFEProcessada NfeProc = new NFEProcessadaImpl ( ) . withNFE ( new NFEImpl ( ) ) . withProtocoloDoResultadoDeProcessamento ( new ProtocoloDoResultadoDeProcessamentoImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( NfeProc ) ; } 
private void assertModelWasFilled ( final NFEProcessada NfeProc ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( NfeProc ) . assertModelWasFilled ( ) ; } 
public void estTProtNFeInterface ( ) { ProtocoloDoResultadoDeProcessamento ProtNFe = new ProtocoloDoResultadoDeProcessamentoImpl ( ) . withDadosDoProtocolo ( new InfProtImpl ( ) ) . withVersao ( " abc " ) . withSignature ( new SignatureType ( ) ) ; assertModelWasFilled ( ProtNFe ) ; } 
private void assertModelWasFilled ( final ProtocoloDoResultadoDeProcessamento ProtNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ProtNFe ) . assertModelWasFilled ( ) ; } 
public void estTRetConsReciNFeInterface ( ) { RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE RetConsReciNFe = new RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFEImpl ( ) . withTipoDeAmbiente ( TipoDoAmbiente . HOMOLOGACAO ) . withVersaoDaAplicativo ( " abc " ) . withNumeroDoReciboConsultado ( " abc " ) . withCodigoDeStatus ( " abc " ) . withDescricaoDoStatus ( " abc " ) . withCodigoDaUF ( " abc " ) . withProtocoloDoResultadoDeProcessamento ( new ProtocoloDoResultadoDeProcessamentoImpl ( ) ) . withVersaoNFE ( " abc " ) ; assertModelWasFilled ( RetConsReciNFe ) ; } 
private void assertModelWasFilled ( final RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE RetConsReciNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( RetConsReciNFe ) . assertModelWasFilled ( ) ; } 
public void estTRetEnviNFeInterface ( ) { RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE RetEnviNFe = new RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFEImpl ( ) . withTipoDoAmbiente ( TipoDoAmbiente . HOMOLOGACAO ) . withVersaoAplicativo ( " abc " ) . withCodigoDeStatus ( " abc " ) . withDescricaoDoStatus ( " abc " ) . withCodigoDaUF ( " abc " ) . withReciboDoLote ( new InfRecImpl ( ) ) . withVersaoDaNFE ( " abc " ) ; assertModelWasFilled ( RetEnviNFe ) ; } 
private void assertModelWasFilled ( final RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE RetEnviNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( RetEnviNFe ) . assertModelWasFilled ( ) ; } 
public void estTVeiculoInterface ( ) { Veiculo Veiculo = new VeiculoImpl ( ) . withPlaca ( " abc " ) . withUF ( UF . AC ) . withRegistroNacionalDoTransportadorDeCarga ( " abc " ) ; assertModelWasFilled ( Veiculo ) ; } 
private void assertModelWasFilled ( final Veiculo Veiculo ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( Veiculo ) . assertModelWasFilled ( ) ; } 
public void estTotalInterface ( ) { TotalNFE otal = new TotalNFEImpl ( ) . withICMSTotal ( new ICMSTotImpl ( ) ) . withISSQNTotal ( new ISSQNtotImpl ( ) ) . withRetencaoDeTributosFederais ( new RetencaoDeTributosFederaisImpl ( ) ) ; assertModelWasFilled ( otal ) ; } 
private void assertModelWasFilled ( final TotalNFE otal ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( otal ) . assertModelWasFilled ( ) ; } 
public void estTranspInterface ( ) { Transporte ransp = new TransporteImpl ( ) . withModalidadeDoFrete ( ModalidadeDoFrete . PAGO_PELO_DESTINATARIO ) . withTransportador ( new TransportadorImpl ( ) ) . withICMSRetidoPeloTransporte ( new ICMSRetidoPeloTransporteImpl ( ) ) . withVeiculoUsado ( new VeiculoImpl ( ) ) . withReboque ( new VeiculoImpl ( ) ) . withVolume ( new VolumeImpl ( ) ) ; assertModelWasFilled ( ransp ) ; } 
private void assertModelWasFilled ( final Transporte ransp ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ransp ) . assertModelWasFilled ( ) ; } 
public void estTransportaInterface ( ) { Transportador ransporta = new TransportadorImpl ( ) . withCNPJ ( new CNPJ ( " abc " ) ) . withCPF ( new CPF ( " abc " ) ) . withNome ( " abc " ) . withInscricaoEstadual ( " abc " ) . withEnderecoCompleto ( " abc " ) . withNomeDoMunicipio ( " abc " ) . withUF ( UF . AC ) ; assertModelWasFilled ( ransporta ) ; } 
private void assertModelWasFilled ( final Transportador ransporta ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ransporta ) . assertModelWasFilled ( ) ; } 
private void assertModelWasFilled ( final VeiculoNovo veicProd ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( veicProd ) . assertModelWasFilled ( ) ; } 
public void estVolInterface ( ) { Volume vol = new VolumeImpl ( ) . withQuantidade ( 1l ) . withEspecie ( " abc " ) . withMarca ( " abc " ) . withNumeracao ( " abc " ) . withPesoLiquido ( " abc " ) . withPesoBruto ( " abc " ) . withLacres ( new LacresImpl ( ) ) ; assertModelWasFilled ( vol ) ; } 
private void assertModelWasFilled ( final Volume vol ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( vol ) . assertModelWasFilled ( ) ; } 
public Ide withNatOp ( String string ) ; public Ide withIndPag ( FormaDePagamento string ) ; public Ide withMod ( String string ) ; TODO Campo fixo public Ide withSerie(String string); TODO TSerie public Ide withNNF(String string); TODO TNF public Ide withDEmi(Calendar calendar); public Ide withDSaiEnt(Calendar calendar); public Ide withTpNF(TipoDocumentoFiscal string); public Ide withCMunFG(String string); TODO TCodMunIBGE public Ide withNFref(InformacoesDaNFReferenciada... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withIndPag ( FormaDePagamento string ) ; public Ide withMod ( String string ) ; TODO Campo fixo public Ide withSerie(String string); TODO TSerie public Ide withNNF(String string); TODO TNF public Ide withDEmi(Calendar calendar); public Ide withDSaiEnt(Calendar calendar); public Ide withTpNF(TipoDocumentoFiscal string); public Ide withCMunFG(String string); TODO TCodMunIBGE public Ide withNFref(InformacoesDaNFReferenciada... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withMod ( String string ) ; TODO Campo fixo public Ide withSerie(String string); TODO TSerie public Ide withNNF(String string); TODO TNF public Ide withDEmi(Calendar calendar); public Ide withDSaiEnt(Calendar calendar); public Ide withTpNF(TipoDocumentoFiscal string); public Ide withCMunFG(String string); TODO TCodMunIBGE public Ide withNFref(InformacoesDaNFReferenciada... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withSerie ( String string ) ; TODO TSerie public Ide withNNF(String string); TODO TNF public Ide withDEmi(Calendar calendar); public Ide withDSaiEnt(Calendar calendar); public Ide withTpNF(TipoDocumentoFiscal string); public Ide withCMunFG(String string); TODO TCodMunIBGE public Ide withNFref(InformacoesDaNFReferenciada... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withNNF ( String string ) ; TODO TNF public Ide withDEmi(Calendar calendar); public Ide withDSaiEnt(Calendar calendar); public Ide withTpNF(TipoDocumentoFiscal string); public Ide withCMunFG(String string); TODO TCodMunIBGE public Ide withNFref(InformacoesDaNFReferenciada... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withDEmi ( Calendar calendar ) ; public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( TipoDocumentoFiscal string ) ; public Ide withCMunFG ( String string ) ; TODO TCodMunIBGE public Ide withNFref(InformacoesDaNFReferenciada... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withDSaiEnt ( Calendar calendar ) ; public Ide withTpNF ( TipoDocumentoFiscal string ) ; public Ide withCMunFG ( String string ) ; TODO TCodMunIBGE public Ide withNFref(InformacoesDaNFReferenciada... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withTpNF ( TipoDocumentoFiscal string ) ; public Ide withCMunFG ( String string ) ; TODO TCodMunIBGE public Ide withNFref(InformacoesDaNFReferenciada... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withCMunFG ( String string ) ; TODO TCodMunIBGE public Ide withNFref(InformacoesDaNFReferenciada... nfref); public Ide withTpImp(String string); public Ide withTpEmis(String string); public Ide withCDV(String string); public Ide withTpAmb(String string); public Ide withFinNFe(String string); public Ide withProcEmi(String string); public Ide withVerProc(String string);} 
public Ide withNFref ( InformacoesDaNFReferenciada . . . nfref ) ; public Ide withTpImp ( String string ) ; public Ide withTpEmis ( String string ) ; public Ide withCDV ( String string ) ; public Ide withTpAmb ( String string ) ; public Ide withFinNFe ( String string ) ; public Ide withProcEmi ( String string ) ; public Ide withVerProc ( String string ) ; } 
public Ide withNFref ( final InformacoesDaNFReferenciada . . . nfref ) { List < br . com . caelum . stella . nfe . modelo . NFref > list = new ArrayList < br . com . caelum . stella . nfe . modelo . NFref > ( ) ; for ( InformacoesDaNFReferenciada p : nfref ) { list . add ( ( br . com . caelum . stella . nfe . modelo . NFref ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } ide . setNFref ( list ) ; return his ; } 
public InfAdic withInfAdFisco ( String string ) ; public InfAdic withInfCpl ( String string ) ; public InfAdic withObsCont ( ObservacoesDoContribuinte . . . obsConts ) ; public InfAdic withObsFisco ( ObservacaoFisco . . . obsFiscos ) ; public InfAdic withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InfAdic withInfCpl ( String string ) ; public InfAdic withObsCont ( ObservacoesDoContribuinte . . . obsConts ) ; public InfAdic withObsFisco ( ObservacaoFisco . . . obsFiscos ) ; public InfAdic withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InfAdic withObsCont ( ObservacoesDoContribuinte . . . obsConts ) ; public InfAdic withObsFisco ( ObservacaoFisco . . . obsFiscos ) ; public InfAdic withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InfAdic withObsFisco ( ObservacaoFisco . . . obsFiscos ) ; public InfAdic withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InfAdic withObsCont ( final ObservacoesDoContribuinte . . . obsConts ) { List < br . com . caelum . stella . nfe . modelo . ObsCont > list = new ArrayList < br . com . caelum . stella . nfe . modelo . ObsCont > ( ) ; for ( ObservacoesDoContribuinte p : obsConts ) { list . add ( ( br . com . caelum . stella . nfe . modelo . ObsCont ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infAdic . setObsCont ( list ) ; return his ; } 
public InfAdic withObsFisco ( final ObservacaoFisco . . . obsFiscos ) { List < br . com . caelum . stella . nfe . modelo . ObsFisco > list = new ArrayList < br . com . caelum . stella . nfe . modelo . ObsFisco > ( ) ; for ( ObservacaoFisco p : obsFiscos ) { list . add ( ( br . com . caelum . stella . nfe . modelo . ObsFisco ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infAdic . setObsFisco ( list ) ; return his ; } 
public InformacoesDaNFReferenciada withChaveDeAcessoDaNFReferenciada ( String string ) ; public InformacoesDaNFReferenciada withNFReferenciada ( NFReferenciada refNF ) ; } 
public InformacoesDaNFReferenciada withNFReferenciada ( NFReferenciada refNF ) ; } 
public InformacoesDaNFReferenciada withChaveDeAcessoDaNFReferenciada ( final String string ) { nFref . setRefNFe ( string ) ; return his ; } 
public InformacoesDaNFReferenciada withNFReferenciada ( final NFReferenciada refNF ) { nFref . setRefNF ( ( br . com . caelum . stella . nfe . modelo . RefNF ) ( ( ObjectCreator ) refNF ) . getInstance ( ) ) ; return his ; } 
public Lacres withNumeroDosLacres ( String string ) ; TODO this must not be a class. Just a setter.} 
public Lacres withNumeroDosLacres ( final String string ) { lacres . setNLacre ( string ) ; return his ; } 
public Medicamento withNumeroDoLote ( String string ) ; public Medicamento withQuantidadeDoLote ( String string ) ; public Medicamento withDataDeFabricacao ( Calendar calendar ) ; public Medicamento withDataDeValidade ( Calendar calendar ) ; public Medicamento withPrecoMaximoAoConsumidor ( BigDecimal string ) ; } 
public Medicamento withQuantidadeDoLote ( String string ) ; public Medicamento withDataDeFabricacao ( Calendar calendar ) ; public Medicamento withDataDeValidade ( Calendar calendar ) ; public Medicamento withPrecoMaximoAoConsumidor ( BigDecimal string ) ; } 
public Medicamento withDataDeFabricacao ( Calendar calendar ) ; public Medicamento withDataDeValidade ( Calendar calendar ) ; public Medicamento withPrecoMaximoAoConsumidor ( BigDecimal string ) ; } 
public Medicamento withDataDeValidade ( Calendar calendar ) ; public Medicamento withPrecoMaximoAoConsumidor ( BigDecimal string ) ; } 
public Medicamento withPrecoMaximoAoConsumidor ( BigDecimal string ) ; } 
public Medicamento withNumeroDoLote ( final String string ) { med . setNLote ( string ) ; return his ; } 
public Medicamento withQuantidadeDoLote ( final String string ) { med . setQLote ( string ) ; return his ; } 
public Medicamento withDataDeFabricacao ( final Calendar calendar ) { med . setDFab ( new CalendarToStringConverter ( ) . convertDateToString ( calendar ) ) ; return his ; } 
public Medicamento withDataDeValidade ( final Calendar calendar ) { med . setDVal ( calendar ) ; return his ; } 
public Medicamento withPrecoMaximoAoConsumidor ( final BigDecimal string ) { med . setVPMC ( string . oString ( ) ) ; return his ; } 
public ObservacaoFisco withDescricaoDoTexto ( String string ) ; public ObservacaoFisco withDescricaoDoCampo ( String string ) ; } 
public ObservacaoFisco withDescricaoDoCampo ( String string ) ; } 
public ObservacaoFisco withDescricaoDoTexto ( final String string ) { obsFisco . setXTexto ( string ) ; return his ; } 
public ObservacaoFisco withDescricaoDoCampo ( final String string ) { obsFisco . setXCampo ( string ) ; return his ; } 
public ObservacoesDoContribuinte withTextoDeDescricao ( String string ) ; public ObservacoesDoContribuinte withDescricaoDoCampo ( String string ) ; } 
public ObservacoesDoContribuinte withDescricaoDoCampo ( String string ) ; } 
public ObservacoesDoContribuinte withTextoDeDescricao ( final String string ) { obsCont . setXTexto ( string ) ; return his ; } 
public ObservacoesDoContribuinte withDescricaoDoCampo ( final String string ) { obsCont . setXCampo ( string ) ; return his ; } 
public PIS withPISTributadoPelaAliquota ( PISTributadoPelaAliquota pISAliq ) ; public PIS withPISTributadoPorQuantidade ( PISTributadoPorQuantidade pISQtde ) ; public PIS withPISNaoTributado ( PISNaoTributado pISNT ) ; public PIS withPISOutrasOperacoes ( PISOutrasOperacoes pISOutr ) ; } 
public PIS withPISTributadoPorQuantidade ( PISTributadoPorQuantidade pISQtde ) ; public PIS withPISNaoTributado ( PISNaoTributado pISNT ) ; public PIS withPISOutrasOperacoes ( PISOutrasOperacoes pISOutr ) ; } 
public PIS withPISNaoTributado ( PISNaoTributado pISNT ) ; public PIS withPISOutrasOperacoes ( PISOutrasOperacoes pISOutr ) ; } 
public PIS withPISOutrasOperacoes ( PISOutrasOperacoes pISOutr ) ; } 
public PIS withPISTributadoPelaAliquota ( final PISTributadoPelaAliquota pISAliq ) { pIS . setPISAliq ( ( br . com . caelum . stella . nfe . modelo . PISAliq ) ( ( ObjectCreator ) pISAliq ) . getInstance ( ) ) ; return his ; } 
public PIS withPISTributadoPorQuantidade ( final PISTributadoPorQuantidade pISQtde ) { pIS . setPISQtde ( ( br . com . caelum . stella . nfe . modelo . PISQtde ) ( ( ObjectCreator ) pISQtde ) . getInstance ( ) ) ; return his ; } 
public PIS withPISNaoTributado ( final PISNaoTributado pISNT ) { pIS . setPISNT ( ( br . com . caelum . stella . nfe . modelo . PISNT ) ( ( ObjectCreator ) pISNT ) . getInstance ( ) ) ; return his ; } 
public PIS withPISOutrasOperacoes ( final PISOutrasOperacoes pISOutr ) { pIS . setPISOutr ( ( br . com . caelum . stella . nfe . modelo . PISOutr ) ( ( ObjectCreator ) pISOutr ) . getInstance ( ) ) ; return his ; } 
public PISTributadoPelaAliquota withCodigoSituacaoTributaria ( String string ) ; public PISTributadoPelaAliquota withValorDaBaseDeCalculo ( BigDecimal string ) ; public PISTributadoPelaAliquota withAliquotaDoPIS ( BigDecimal aliquota ) ; public PISTributadoPelaAliquota withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPelaAliquota withValorDaBaseDeCalculo ( BigDecimal string ) ; public PISTributadoPelaAliquota withAliquotaDoPIS ( BigDecimal aliquota ) ; public PISTributadoPelaAliquota withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPelaAliquota withAliquotaDoPIS ( BigDecimal aliquota ) ; public PISTributadoPelaAliquota withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPelaAliquota withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPelaAliquota withCodigoSituacaoTributaria ( final String string ) { pISAliq . setCST ( string ) ; return his ; } 
public PISTributadoPelaAliquota withValorDaBaseDeCalculo ( final BigDecimal string ) { pISAliq . setVBC ( string . oString ( ) ) ; return his ; } 
public PISTributadoPelaAliquota withAliquotaDoPIS ( final BigDecimal aliquota ) { pISAliq . setPPIS ( aliquota . oPlainString ( ) ) ; return his ; } 
public PISTributadoPelaAliquota withValorDoPIS ( final BigDecimal string ) { pISAliq . setVPIS ( string . oString ( ) ) ; return his ; } 
public PISTributadoPorQuantidade withQuantidadeVendida ( BigDecimal bigDecimal ) ; public PISTributadoPorQuantidade withAliquota ( BigDecimal string ) ; public PISTributadoPorQuantidade withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPorQuantidade withAliquota ( BigDecimal string ) ; public PISTributadoPorQuantidade withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPorQuantidade withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPorQuantidade withQuantidadeVendida ( final BigDecimal string ) { pISQtde . setQBCProd ( string . oString ( ) ) ; return his ; } 
public PISTributadoPorQuantidade withAliquota ( final BigDecimal string ) { pISQtde . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public PISTributadoPorQuantidade withValorDoPIS ( final BigDecimal string ) { pISQtde . setVPIS ( string . oString ( ) ) ; return his ; } 
public Protocolo withTipoDoAmbiente ( TipoDoAmbiente ipoDoAmbiente ) ; public Protocolo withVersaoDoAplicativo ( String string ) ; public Protocolo withChaveDeAcessoDaNFE ( String string ) ; public Protocolo withDataEHoraDoProcessamento ( Calendar calendar ) ; public Protocolo withNumeroDoProtocoloDeStatusDaNFE ( String string ) ; public Protocolo withDigestValue ( byte [ ] b ) ; public Protocolo withCodigoDeStatus ( String string ) ; public Protocolo withDescricaoDoMotivo ( String string ) ; public Protocolo withId ( String string ) ; } 
public Protocolo withVersaoDoAplicativo ( String string ) ; public Protocolo withChaveDeAcessoDaNFE ( String string ) ; public Protocolo withDataEHoraDoProcessamento ( Calendar calendar ) ; public Protocolo withNumeroDoProtocoloDeStatusDaNFE ( String string ) ; public Protocolo withDigestValue ( byte [ ] b ) ; public Protocolo withCodigoDeStatus ( String string ) ; public Protocolo withDescricaoDoMotivo ( String string ) ; public Protocolo withId ( String string ) ; } 
public Protocolo withChaveDeAcessoDaNFE ( String string ) ; public Protocolo withDataEHoraDoProcessamento ( Calendar calendar ) ; public Protocolo withNumeroDoProtocoloDeStatusDaNFE ( String string ) ; public Protocolo withDigestValue ( byte [ ] b ) ; public Protocolo withCodigoDeStatus ( String string ) ; public Protocolo withDescricaoDoMotivo ( String string ) ; public Protocolo withId ( String string ) ; } 
public Protocolo withDataEHoraDoProcessamento ( Calendar calendar ) ; public Protocolo withNumeroDoProtocoloDeStatusDaNFE ( String string ) ; public Protocolo withDigestValue ( byte [ ] b ) ; public Protocolo withCodigoDeStatus ( String string ) ; public Protocolo withDescricaoDoMotivo ( String string ) ; public Protocolo withId ( String string ) ; } 
public Protocolo withNumeroDoProtocoloDeStatusDaNFE ( String string ) ; public Protocolo withDigestValue ( byte [ ] b ) ; public Protocolo withCodigoDeStatus ( String string ) ; public Protocolo withDescricaoDoMotivo ( String string ) ; public Protocolo withId ( String string ) ; } 
public Protocolo withDigestValue ( byte [ ] b ) ; public Protocolo withCodigoDeStatus ( String string ) ; public Protocolo withDescricaoDoMotivo ( String string ) ; public Protocolo withId ( String string ) ; } 
public Protocolo withCodigoDeStatus ( String string ) ; public Protocolo withDescricaoDoMotivo ( String string ) ; public Protocolo withId ( String string ) ; } 
public Protocolo withDescricaoDoMotivo ( String string ) ; public Protocolo withId ( String string ) ; } 
public ProtocoloDoResultadoDeProcessamento withDadosDoProtocolo ( Protocolo infProt ) ; public ProtocoloDoResultadoDeProcessamento withSignature ( SignatureType signatureType ) ; public ProtocoloDoResultadoDeProcessamento withVersao ( String string ) ; } 
public ProtocoloDoResultadoDeProcessamento withDadosDoProtocolo ( final Protocolo infProt ) { ProtNFe . setInfProt ( ( br . com . caelum . stella . nfe . modelo . InfProt ) ( ( ObjectCreator ) infProt ) . getInstance ( ) ) ; return his ; } 
public Protocolo withTipoDoAmbiente ( final TipoDoAmbiente ipoDoAmbiente ) { infProt . setTpAmb ( ipoDoAmbiente . getCode ( ) ) ; return his ; } 
public Protocolo withVersaoDoAplicativo ( final String string ) { infProt . setVerAplic ( string ) ; return his ; } 
public Protocolo withChaveDeAcessoDaNFE ( final String string ) { infProt . setChNFe ( string ) ; return his ; } 
public Protocolo withDataEHoraDoProcessamento ( final Calendar calendar ) { infProt . setDhRecbto ( calendar ) ; return his ; } 
public Protocolo withNumeroDoProtocoloDeStatusDaNFE ( final String string ) { infProt . setNProt ( string ) ; return his ; } 
public Protocolo withDigestValue ( final byte [ ] b ) { infProt . setDigVal ( b ) ; return his ; } 
public Protocolo withCodigoDeStatus ( final String string ) { infProt . setCStat ( string ) ; return his ; } 
public Protocolo withDescricaoDoMotivo ( final String string ) { infProt . setXMotivo ( string ) ; return his ; } 
public Protocolo withId ( final String string ) { infProt . setId ( string ) ; return his ; } 
public ReciboDoLote withNumeroDoRecibo ( String string ) ; public ReciboDoLote withDataEHoraDoRecebimento ( Calendar calendar ) ; public ReciboDoLote withTempoMedioDeResposta ( String string ) ; } 
public ReciboDoLote withDataEHoraDoRecebimento ( Calendar calendar ) ; public ReciboDoLote withTempoMedioDeResposta ( String string ) ; } 
public ReciboDoLote withTempoMedioDeResposta ( String string ) ; } 
public ReciboDoLote withNumeroDoRecibo ( final String string ) { infRec . setNRec ( string ) ; return his ; } 
public ReciboDoLote withDataEHoraDoRecebimento ( final Calendar calendar ) { infRec . setDhRecbto ( calendar ) ; return his ; } 
public ReciboDoLote withTempoMedioDeResposta ( final String string ) { infRec . setTMed ( string ) ; return his ; } 
public void estIdeInterface ( ) { Ide ide = new IdeImpl ( ) . withCUF ( " abc " ) . withCNF ( 1 ) . withNatOp ( " abc " ) . withIndPag ( FormaDePagamento . A_PRAZO ) . withMod ( " abc " ) . withSerie ( " abc " ) . withNNF ( " abc " ) . withDEmi ( Calendar . getInstance ( ) ) . withDSaiEnt ( Calendar . getInstance ( ) ) . withTpNF ( TipoDocumentoFiscal . ENTRADA ) . withCMunFG ( " abc " ) . withNFref ( new InformacoesDaNFReferenciadaImpl ( ) ) . withTpImp ( " abc " ) . withTpEmis ( " abc " ) . withCDV ( " abc " ) . withTpAmb ( " abc " ) . withFinNFe ( " abc " ) . withProcEmi ( " abc " ) . withVerProc ( " abc " ) ; assertModelWasFilled ( ide ) ; } 
public void estInfAdicInterface ( ) { InfAdic infAdic = new InfAdicImpl ( ) . withInfAdFisco ( " abc " ) . withInfCpl ( " abc " ) . withObsCont ( new ObservacoesDoContribuinteImpl ( ) ) . withObsFisco ( new ObservacaoFiscoImpl ( ) ) . withProcRef ( new ProcessoReferenciadoImpl ( ) ) ; assertModelWasFilled ( infAdic ) ; } 
public void estInfProtInterface ( ) { Protocolo infProt = new ProtocoloImpl ( ) . withTipoDoAmbiente ( TipoDoAmbiente . HOMOLOGACAO ) . withVersaoDoAplicativo ( " abc " ) . withChaveDeAcessoDaNFE ( " abc " ) . withDataEHoraDoProcessamento ( Calendar . getInstance ( ) ) . withNumeroDoProtocoloDeStatusDaNFE ( " abc " ) . withDigestValue ( " abc " . getBytes ( ) ) . withCodigoDeStatus ( " abc " ) . withDescricaoDoMotivo ( " abc " ) . withId ( " abc " ) ; assertModelWasFilled ( infProt ) ; } 
private void assertModelWasFilled ( final Protocolo infProt ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infProt ) . assertModelWasFilled ( ) ; } 
public void estInfRecInterface ( ) { ReciboDoLote infRec = new ReciboDoLoteImpl ( ) . withNumeroDoRecibo ( " abc " ) . withDataEHoraDoRecebimento ( Calendar . getInstance ( ) ) . withTempoMedioDeResposta ( " abc " ) ; assertModelWasFilled ( infRec ) ; } 
public void estLacresInterface ( ) { Lacres lacres = new LacresImpl ( ) . withNumeroDosLacres ( " abc " ) ; assertModelWasFilled ( lacres ) ; } 
public void estMedInterface ( ) { Medicamento med = new MedicamentoImpl ( ) . withNumeroDoLote ( " abc " ) . withQuantidadeDoLote ( " abc " ) . withDataDeFabricacao ( Calendar . getInstance ( ) ) . withDataDeValidade ( Calendar . getInstance ( ) ) . withPrecoMaximoAoConsumidor ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( med ) ; } 
public void estNFrefInterface ( ) { InformacoesDaNFReferenciada nFref = new InformacoesDaNFReferenciadaImpl ( ) . withChaveDeAcessoDaNFReferenciada ( " abc " ) . withNFReferenciada ( new NFReferenciadaImpl ( ) ) ; assertModelWasFilled ( nFref ) ; } 
private void assertModelWasFilled ( final InformacoesDaNFReferenciada nFref ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( nFref ) . assertModelWasFilled ( ) ; } 
public void estObsContInterface ( ) { ObservacoesDoContribuinte obsCont = new ObservacoesDoContribuinteImpl ( ) . withTextoDeDescricao ( " abc " ) . withDescricaoDoCampo ( " abc " ) ; assertModelWasFilled ( obsCont ) ; } 
private void assertModelWasFilled ( ObservacoesDoContribuinte obsCont ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( obsCont ) . assertModelWasFilled ( ) ; } 
public void estObsFiscoInterface ( ) { ObservacaoFisco obsFisco = new ObservacaoFiscoImpl ( ) . withDescricaoDoTexto ( " abc " ) . withDescricaoDoCampo ( " abc " ) ; assertModelWasFilled ( obsFisco ) ; } 
private void assertModelWasFilled ( ObservacaoFisco obsFisco ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( obsFisco ) . assertModelWasFilled ( ) ; } 
public void estPISAliqInterface ( ) { PISTributadoPelaAliquota pISAliq = new PISTributadoPelaAliquotaImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquotaDoPIS ( new BigDecimal ( 1 ) ) . withValorDoPIS ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( pISAliq ) ; } 
private void assertModelWasFilled ( final PISTributadoPelaAliquota pISAliq ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISAliq ) . assertModelWasFilled ( ) ; } 
public void estPISInterface ( ) { PIS pIS = new PISImpl ( ) . withPISTributadoPelaAliquota ( new PISTributadoPelaAliquotaImpl ( ) ) . withPISTributadoPorQuantidade ( new PISTributadoPorQuantidadeImpl ( ) ) . withPISNaoTributado ( new PISNaoTributadoImpl ( ) ) . withPISOutrasOperacoes ( new PISOutrasOperacoesImpl ( ) ) ; assertModelWasFilled ( pIS ) ; } 
public void estPISQtdeInterface ( ) { PISTributadoPorQuantidade pISQtde = new PISTributadoPorQuantidadeImpl ( ) . withQuantidadeVendida ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withValorDoPIS ( new BigDecimal ( 1 ) ) ; assertModelWasFilled ( pISQtde ) ; } 
private void assertModelWasFilled ( final PISTributadoPorQuantidade pISQtde ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( pISQtde ) . assertModelWasFilled ( ) ; } 
public void estTProtNFeInterface ( ) { ProtocoloDoResultadoDeProcessamento ProtNFe = new ProtocoloDoResultadoDeProcessamentoImpl ( ) . withDadosDoProtocolo ( new ProtocoloImpl ( ) ) . withVersao ( " abc " ) . withSignature ( new SignatureType ( ) ) ; assertModelWasFilled ( ProtNFe ) ; } 
public void estTRetEnviNFeInterface ( ) { RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE RetEnviNFe = new RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFEImpl ( ) . withTipoDoAmbiente ( TipoDoAmbiente . HOMOLOGACAO ) . withVersaoAplicativo ( " abc " ) . withCodigoDeStatus ( " abc " ) . withDescricaoDoStatus ( " abc " ) . withCodigoDaUF ( " abc " ) . withReciboDoLote ( new ReciboDoLoteImpl ( ) ) . withVersaoDaNFE ( " abc " ) ; assertModelWasFilled ( RetEnviNFe ) ; } 
public static Parcelamento newParcelamentoAVista ( ) { return new Parcelamento ( TipoTransacao . A_VISTA , 0 ) ; } 
public static String calculaCodigoVerificacao ( String . . . args ) { Date date = new Date ( ) ; if ( args . length < 3 ) { return " Numero de argumentos invalidos! nUso:java CodVer <numfil> <total> <endereco ip remoto> n<numfil>: Numero de filiacao n<total>: Valor total da compra n<endereo ip remoto>: IP Address do browser cliente " ; 
public RedecardDadosAutorizacaoPagamento handle ( ) { } 
private Calendar converteDataStringParaCalendar ( String dataDesformatada ) hrows ParseException { SimpleDateFormat formatter = new SimpleDateFormat ( " yyyyMMdd " ) ; Calendar dataAutorizacao = Calendar . getInstance ( ) ; dataAutorizacao . setTime ( formatter . parse ( dataDesformatada ) ) ; return dataAutorizacao ; } 
public RedecardConfirmacaoTransacaoReturn verificaRetorno ( ) { if ( ! " " . equals ( retorno ) ) { String [ ] params = retorno . split ( " & " ) ; int codigoRetorno = Integer . valueOf ( params [ 0 ] . split ( " = " ) [ 1 ] ) ; String mensagemRetorno = params [ 1 ] . split ( " = " ) [ 1 ] ; RedecardConfirmacaoTransacaoReturn confirmacaoTransacaoReturn = new RedecardConfirmacaoTransacaoReturn ( codigoRetorno , mensagemRetorno ) ; if ( codigoRetorno ! = 0 ) { throw new ProblematicTransactionException ( " A transao no pode ser confirmada ( " + confirmacaoTransacaoReturn . getMensagemRetorno ( ) + " ) " , confirmacaoTransacaoReturn ) ; } return confirmacaoTransacaoReturn ; } throw new RedecardConfirmacaoSemDadosException ( " Os dados de retorno no foram enviados, solicite novamente " , null ) ; } 
private BigDecimal calculaPrecoDividoPorCem ( String unformattedPrice ) { 
public VISAAutorizacaoReturn buildRetorno ( HttpServletRequest request ) { } 
public CapturaReturn buildRetorno ( HttpServletRequest request ) { CapturaReturn retornoCaptura = new CapturaReturn ( new BasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , VISAPriceFormatter . convertToNormalValue ( request . getParameter ( " cap " ) ) , request . getParameter ( " free " ) ) ; return retornoCaptura ; } 
public CancelamentoReturn buildRetorno ( HttpServletRequest request ) { CancelamentoReturn retornoCancelamento = new CancelamentoReturn ( new BasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , VISAPriceFormatter . convertToNormalValue ( request . getParameter ( " cancel_amount " ) ) , request . getParameter ( " free " ) ) ; return retornoCancelamento ; } 
public ConsultaReturn buildRetorno ( HttpServletRequest request ) { Checkout checkout = new Checkout ( request . getParameter ( " orderid " ) , null , request . getParameter ( " free " ) , request . getParameter ( " price " ) , null , null ) ; ConsultaReturn retornoConsulta = new ConsultaReturn ( new BasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , checkout , Integer . valueOf ( request . getParameter ( " authent " ) ) , request . getParameter ( " bank " ) ) ; return retornoConsulta ; } 
public String handle ( ) { } 
public IntegrationReturn handle ( ) { } 
public void estSolicitaDeAberturaDeTelaParaAutorizacaoDePagamento ( ) { RedecardDadosAutorizacaoPagamento dadosAutorizacaoPagamento = new RedecardSolicitacaoAutorizacaoPagamento ( checkout , new Socket ( ) . getLocalAddress ( ) . getHostAddress ( ) ) . handle ( ) ; abrirPaginaHTMLComOsDadosDeAutorizacao ( dadosAutorizacaoPagamento ) ; } 
public void estVerificadorDeRetornoDaConfirmacaoDaTransacao ( ) { String retorno = " CODRET=0&MSGRET=CONFIRMACAO COM SUCESSO " ; RedecardConfirmacaoTransacaoReturn confirmacaoTransacaoReturn = new RedecardVerificadorRetornoConfirmacaoTransacao ( retorno ) . verificaRetorno ( ) ; Assert . assertEquals ( confirmacaoTransacaoReturn . getCodigoRetorno ( ) , 0 ) ; Assert . assertEquals ( confirmacaoTransacaoReturn . getMensagemRetorno ( ) , " CONFIRMACAO COM SUCESSO " ) ; } 
public void estVerificadorDeRetornoDaConfirmacaoDaTransacaoCasoOsDadosDeRetornoNoSejamRetornados ( ) { String retorno = " " ; RedecardConfirmacaoTransacaoReturn confirmacaoTransacaoReturn = new RedecardVerificadorRetornoConfirmacaoTransacao ( retorno ) . verificaRetorno ( ) ; Assert . assertEquals ( confirmacaoTransacaoReturn . getCodigoRetorno ( ) , 0 ) ; Assert . assertEquals ( confirmacaoTransacaoReturn . getMensagemRetorno ( ) , " CONFIRMACAO COM SUCESSO " ) ; } 
public void estRetornoValidoDoCheckoutComLrIgualA00 ( ) { Mockery mockery = new Mockery ( ) ; final HttpServletRequest request = mockery . mock ( HttpServletRequest . class ) ; mockery . checking ( new Expectations ( ) { { atLeast ( 1 ) . of ( request ) . getParameter ( " lr " ) ; will ( returnValue ( " 00 " ) ) ; } } ) ; new VISAComponentReturnHandler ( criarRetornoDeIntegracao ( request ) ) . check ( ) ; mockery . assertIsSatisfied ( ) ; } 
public void estRetornoValidoDoCheckoutComLrIgualA11 ( ) { Mockery mockery = new Mockery ( ) ; final HttpServletRequest request = mockery . mock ( HttpServletRequest . class ) ; mockery . checking ( new Expectations ( ) { { atLeast ( 1 ) . of ( request ) . getParameter ( " lr " ) ; will ( returnValue ( " 11 " ) ) ; } } ) ; new VISAComponentReturnHandler ( criarRetornoDeIntegracao ( request ) ) . check ( ) ; mockery . assertIsSatisfied ( ) ; } 
public static void before ( ) { Calendar dataQueExpira = Calendar . getInstance ( ) ; dataQueExpira . set ( Calendar . MONTH , Calendar . DECEMBER + 1 ) ; dataQueExpira . set ( Calendar . YEAR , 2010 ) ; checkout = new Checkout ( " 123456 " , " Alberto Souza, Av Juracy Magalhaes,Salvador,Bahia,Brasil " , " Testando checkout " , BigDecimal . ONE , new Parcelamento ( TipoTransacao . CREDITO_A_VISTA , 1 ) , new CartaoCredito ( " 4551870000000183 " , dataQueExpira , " 123 " ) ) ; } 
public void estSolicitacaoDeAutorizacaoDePagamento ( ) { String elaDeResultadoQueDeveSerApresentadaAoCliente = new VISASolicitacaoAutorizacaoPagamentoViaHttp ( checkout ) . handle ( ) ; System . out . println ( elaDeResultadoQueDeveSerApresentadaAoCliente ) ; } 
public void estSolicitacaoDeCaptura ( ) { String retorno = new VISASolicitacaoConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , gatewaysConf . getNumeroDeFiliacaoDoVisa ( ) ) , VISATipoSolicitacaoIntegracao . CAPTURA ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estSolicitacaoDeCancelamento ( ) { String retorno = new VISASolicitacaoConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , gatewaysConf . getNumeroDeFiliacaoDoVisa ( ) ) , VISATipoSolicitacaoIntegracao . CANCELAMENTO ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estSolicitacaoDeConsulta ( ) { String retorno = new VISASolicitacaoConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , gatewaysConf . getNumeroDeFiliacaoDoVisa ( ) ) , VISATipoSolicitacaoIntegracao . CONSULTA ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estParcelamentoComTipoDeTransacaoAVistaENumeroDeParcelasMaiorQue1 ( ) { try { new Parcelamento ( TipoTransacao . A_VISTA , 2 ) ; 
public void estParcelamentoComTipoDeTransacaoAPrazoENumeroDeParcelasMenorOuIgualA1 ( ) { try { new Parcelamento ( TipoTransacao . A_VISTA , 1 ) ; 
public void estFormatacaoDeNumeroDeParcelasAVista ( ) { Assert . assertEquals ( " 00 " , Parcelamento . newParcelamentoAVista ( ) . getNumeroDeParcelasComNoMinimoDoisDigitos ( ) ) ; } 
public void estFormatacaoCodigoParcelamentoComVisaElectron ( ) { Assert . assertEquals ( " A001 " , new Parcelamento ( TipoTransacao . DEBITO , 1 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoCodigoParcelamentoComVisaElectronOuCreditoAVisaEMaisDeUmaParcela ( ) { try { new Parcelamento ( TipoTransacao . DEBITO , 2 ) ; } catch ( InvalidCheckoutException numeroDeParcelasMaiorQuePermitidoException ) { Assert . assertEquals ( " Com dbito ou crdito a vista s pode pagar em 1 parcela " , numeroDeParcelasMaiorQuePermitidoException . getMessage ( ) ) ; } try { new Parcelamento ( TipoTransacao . CREDITO_A_VISTA , 2 ) ; 
public void estFormatacaoCodigoComNumeroDeParcelasIgualAZero ( ) { try { new Parcelamento ( TipoTransacao . CREDITO_A_VISTA , 0 ) ; 
public void estFormatacaoCodigoComJurosDaAdministradora ( ) { Assert . assertEquals ( " 3012 " , new Parcelamento ( TipoTransacao . PARCELADO_COM_JUROS_DA_ADMINISTRADORA , 12 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoCodigoComJurosDaLoja ( ) { Assert . assertEquals ( " 2012 " , new Parcelamento ( TipoTransacao . PARCELADO_COM_JUROS_DA_LOJA , 12 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoCodigoComCreditoAVisa ( ) { Assert . assertEquals ( " 1001 " , new Parcelamento ( TipoTransacao . CREDITO_A_VISTA , 1 ) . getCodigoDePagamento ( ) ) ; } 
public void estGeracaoDoTidComCreditoAVista ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 73489405115052541001 " , new Checkout ( null , null , null , BigDecimal . ONE , new Parcelamento ( TipoTransacao . CREDITO_A_VISTA , 1 ) , null ) . getTid ( dataReferencia , gatewaysConf . getNumeroDeFiliacaoDoVisa ( ) ) ) ; } 
public void estGeracaoDoTidComCreditoParceladoPelaLoja ( ) { } 
public void estGeracaoDoTidComCreditoParceladoPelaAdministrador ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 73489405115052543006 " , new Checkout ( null , null , null , BigDecimal . ONE , new Parcelamento ( TipoTransacao . PARCELADO_COM_JUROS_DA_ADMINISTRADORA , 6 ) , null ) . getTid ( dataReferencia , gatewaysConf . getNumeroDeFiliacaoDoVisa ( ) ) ) ; } 
public void estGeracaoDoTidComDebito ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 7348940511505254A001 " , new Checkout ( null , null , null , BigDecimal . ONE , new Parcelamento ( TipoTransacao . DEBITO , 1 ) , null ) . getTid ( dataReferencia , gatewaysConf . getNumeroDeFiliacaoDoVisa ( ) ) ) ; } 
public String oString ( ) { } 
public RedecardAutorizacaoReturn handle ( ) { 
private Calendar converteDataStringParaCalendar ( String dataDesformatada ) hrows ParseException { System . out . println ( dataDesformatada ) ; SimpleDateFormat formatter = new SimpleDateFormat ( " yyyyMMdd " ) ; Calendar dataAutorizacao = Calendar . getInstance ( ) ; dataAutorizacao . setTime ( formatter . parse ( dataDesformatada ) ) ; return dataAutorizacao ; } 
public VISAAutorizacaoReturn buildRetorno ( HttpServletRequest request ) { } 
public VISACapturaReturn buildRetorno ( HttpServletRequest request ) { VISACapturaReturn retornoCaptura = new VISACapturaReturn ( new BasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , VISAPriceFormatter . convertToNormalValue ( request . getParameter ( " cap " ) ) , request . getParameter ( " free " ) ) ; return retornoCaptura ; } 
public VISACancelamentoReturn buildRetorno ( HttpServletRequest request ) { VISACancelamentoReturn retornoCancelamento = new VISACancelamentoReturn ( new BasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , VISAPriceFormatter . convertToNormalValue ( request . getParameter ( " cancel_amount " ) ) , request . getParameter ( " free " ) ) ; return retornoCancelamento ; } 
public VISAConsultaReturn buildRetorno ( HttpServletRequest request ) { Checkout checkout = new Checkout ( request . getParameter ( " orderid " ) , null , request . getParameter ( " free " ) , request . getParameter ( " price " ) , null , null ) ; VISAConsultaReturn retornoConsulta = new VISAConsultaReturn ( new BasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , checkout , Integer . valueOf ( request . getParameter ( " authent " ) ) , request . getParameter ( " bank " ) ) ; return retornoConsulta ; } 
public VISAIntegrationReturn handle ( ) { } 
public static void setUp ( ) hrows Exception { pathPastaPagina = new File ( " " ) . getAbsolutePath ( ) + File . separator ; checkout = new Checkout ( BigDecimal . ONE , Parcelamento . newParcelamentoAVista ( ) , Bandeira . MASTERCARD , " 123456 " , " " ) ; subirSeleniumServerEConfigurarContexo ( ) ; 
private static void subirSeleniumServerEConfigurarContexo ( ) hrows Exception { SeleniumServer seleniumServer = new SeleniumServer ( 4444 ) ; seleniumServer . start ( ) ; selenium = new DefaultSelenium ( " localhost " , 4444 , " *firefox " , " file:/ " + pathPastaPagina ) ; selenium . start ( ) ; selenium . setContext ( " Testando abertura de tela do master " ) ; } 
public static void shutDown ( ) { selenium . stop ( ) ; seleniumServer . stop ( ) ; } 
public void estSolicitaDeAberturaDeTelaParaAutorizacaoDePagamento ( ) hrows Exception { RedecardDadosAutorizacaoPagamento dadosAutorizacaoPagamento = new RedecardSolicitacaoAutorizacaoPagamento ( checkout , new Socket ( ) . getLocalAddress ( ) . getHostAddress ( ) ) . handle ( ) ; abrirPaginaHTMLComOsDadosDeAutorizacao ( dadosAutorizacaoPagamento ) ; 
private String generateInput ( String name , Object value ) { return " <input type='hidden' name=' " + name + " ' value=' " + value + " '/> " ; } 
public void estVerificadorDeRetornoDaConfirmacaoDaTransacao ( ) { String retorno = " CODRET=0&MSGRET=CONFIRMACAO COM SUCESSO " ; RedecardConfirmacaoTransacaoReturn confirmacaoTransacaoReturn = new RedecardVerificadorRetornoConfirmacaoTransacao ( retorno ) . verificaRetorno ( ) ; Assert . assertEquals ( confirmacaoTransacaoReturn . getCodigoRetorno ( ) , 0 ) ; Assert . assertEquals ( confirmacaoTransacaoReturn . getMensagemRetorno ( ) , " CONFIRMACAO COM SUCESSO " ) ; 
public void estVerificadorDeRetornoDaConfirmacaoDaTransacaoCasoOsDadosDeRetornoNoSejamRetornados ( ) { String retorno = " " ; RedecardConfirmacaoTransacaoReturn confirmacaoTransacaoReturn = new RedecardVerificadorRetornoConfirmacaoTransacao ( retorno ) . verificaRetorno ( ) ; Assert . assertEquals ( confirmacaoTransacaoReturn . getCodigoRetorno ( ) , 0 ) ; Assert . assertEquals ( confirmacaoTransacaoReturn . getMensagemRetorno ( ) , " CONFIRMACAO COM SUCESSO " ) ; 
private VISAIntegrationReturn criarRetornoDeIntegracao ( final HttpServletRequest request ) { return new VISAIntegrationReturn ( ) { 
public static void before ( ) { Calendar dataQueExpira = Calendar . getInstance ( ) ; dataQueExpira . set ( Calendar . MONTH , Calendar . DECEMBER + 1 ) ; dataQueExpira . set ( Calendar . YEAR , 2010 ) ; checkout = new Checkout ( " 123456 " , " Alberto Souza, Av Juracy Magalhaes,Salvador,Bahia,Brasil " , 
public void estSolicitacaoDeAutorizacaoDePagamento ( ) { String elaDeResultadoQueDeveSerApresentadaAoCliente = new VISASolicitacaoAutorizacaoPagamentoViaHttp ( checkout ) . handle ( ) ; System . out . println ( elaDeResultadoQueDeveSerApresentadaAoCliente ) ; } 
public void estSolicitacaoDeCaptura ( ) { String retorno = new VISASolicitacaoConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , gatewaysConf . getNumeroDeFiliacaoDoVisa ( ) ) , VISATipoSolicitacaoIntegracao . CAPTURA ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estSolicitacaoDeCancelamento ( ) { String retorno = new VISASolicitacaoConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , gatewaysConf . getNumeroDeFiliacaoDoVisa ( ) ) , VISATipoSolicitacaoIntegracao . CANCELAMENTO ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estSolicitacaoDeConsulta ( ) { String retorno = new VISASolicitacaoConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , gatewaysConf . getNumeroDeFiliacaoDoVisa ( ) ) , VISATipoSolicitacaoIntegracao . CONSULTA ) . handle ( ) ; System . out . println ( retorno ) ; } 
public Adicao withNumeroDaAdicao ( Integer integer ) ; public Adicao withNumeroSequencialDoItemDaAdicao ( Integer integer ) ; public Adicao withCodigoDoFabricanteEstrangeiro ( String string ) ; public Adicao withValorDeDescontoDoItemDaDI ( BigDecimal bigDecimal ) ; } 
public Adicao withNumeroSequencialDoItemDaAdicao ( Integer integer ) ; public Adicao withCodigoDoFabricanteEstrangeiro ( String string ) ; public Adicao withValorDeDescontoDoItemDaDI ( BigDecimal bigDecimal ) ; } 
public Adicao withCodigoDoFabricanteEstrangeiro ( String string ) ; public Adicao withValorDeDescontoDoItemDaDI ( BigDecimal bigDecimal ) ; } 
public Adicao withValorDeDescontoDoItemDaDI ( BigDecimal bigDecimal ) ; } 
public Adicao withNumeroDaAdicao ( final Integer integer ) { adi . setNAdicao ( integer . oString ( ) ) ; return his ; } 
public Adicao withNumeroSequencialDoItemDaAdicao ( final Integer integer ) { adi . setNSeqAdic ( integer . oString ( ) ) ; return his ; } 
public Adicao withCodigoDoFabricanteEstrangeiro ( final String string ) { adi . setCFabricante ( string ) ; return his ; } 
public Adicao withValorDeDescontoDoItemDaDI ( final BigDecimal bigDecimal ) { adi . setVDescDI ( bigDecimal . oString ( ) ) ; return his ; } 
public CIDESobreCombustiveis withBaseDeCalculo ( BigDecimal string ) ; public CIDESobreCombustiveis withAliquota ( BigDecimal string ) ; public CIDESobreCombustiveis withValor ( BigDecimal string ) ; } 
public CIDESobreCombustiveis withAliquota ( BigDecimal string ) ; public CIDESobreCombustiveis withValor ( BigDecimal string ) ; } 
public CIDESobreCombustiveis withValor ( BigDecimal string ) ; } 
public CIDESobreCombustiveis withBaseDeCalculo ( final BigDecimal string ) { cIDE . setQBCProd ( string . oString ( ) ) ; return his ; } 
public CIDESobreCombustiveis withAliquota ( final BigDecimal string ) { cIDE . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public CIDESobreCombustiveis withValor ( final BigDecimal string ) { cIDE . setVCIDE ( string . oString ( ) ) ; return his ; } 
public COFINS withTributacaoPelaAliquota ( COFINSTributadoPelaAliquota cOFINSAliq ) ; public COFINS withTributacaoPelaQuantidade ( COFINSTributadoPelaQuantidade cOFINSQtde ) ; public COFINS withNaoTributado ( COFINSNaoTributado cOFINSNT ) ; public COFINS withTributacaoDeOutrasOperacoes ( COFINSOutrasOperacoes cOFINSOutr ) ; } 
public COFINS withTributacaoPelaQuantidade ( COFINSTributadoPelaQuantidade cOFINSQtde ) ; public COFINS withNaoTributado ( COFINSNaoTributado cOFINSNT ) ; public COFINS withTributacaoDeOutrasOperacoes ( COFINSOutrasOperacoes cOFINSOutr ) ; } 
public COFINS withNaoTributado ( COFINSNaoTributado cOFINSNT ) ; public COFINS withTributacaoDeOutrasOperacoes ( COFINSOutrasOperacoes cOFINSOutr ) ; } 
public COFINS withTributacaoDeOutrasOperacoes ( COFINSOutrasOperacoes cOFINSOutr ) ; } 
public COFINS withTributacaoPelaAliquota ( final COFINSTributadoPelaAliquota cOFINSAliq ) { cOFINS . setCOFINSAliq ( ( br . com . caelum . stella . nfe . modelo . COFINSAliq ) ( ( ObjectCreator ) cOFINSAliq ) . getInstance ( ) ) ; return his ; } 
public COFINS withTributacaoPelaQuantidade ( final COFINSTributadoPelaQuantidade cOFINSQtde ) { cOFINS . setCOFINSQtde ( ( br . com . caelum . stella . nfe . modelo . COFINSQtde ) ( ( ObjectCreator ) cOFINSQtde ) . getInstance ( ) ) ; return his ; } 
public COFINS withNaoTributado ( final COFINSNaoTributado cOFINSNT ) { cOFINS . setCOFINSNT ( ( br . com . caelum . stella . nfe . modelo . COFINSNT ) ( ( ObjectCreator ) cOFINSNT ) . getInstance ( ) ) ; return his ; } 
public COFINS withTributacaoDeOutrasOperacoes ( final COFINSOutrasOperacoes cOFINSOutr ) { cOFINS . setCOFINSOutr ( ( br . com . caelum . stella . nfe . modelo . COFINSOutr ) ( ( ObjectCreator ) cOFINSOutr ) . getInstance ( ) ) ; return his ; } 
public COFINSNaoTributado withCodigoSituacaoTributaria ( String string ) ; } 
public COFINSNaoTributado withCodigoSituacaoTributaria ( final String string ) { cOFINSNT . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSOutrasOperacoes withCodigoSituacaoTributaria ( String string ) ; public COFINSOutrasOperacoes withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSOutrasOperacoes withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSOutrasOperacoes withQuantidadeVendida ( String string ) ; public COFINSOutrasOperacoes withAliquota ( String string ) ; public COFINSOutrasOperacoes withValor ( String string ) ; } 
public COFINSOutrasOperacoes withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSOutrasOperacoes withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSOutrasOperacoes withQuantidadeVendida ( String string ) ; public COFINSOutrasOperacoes withAliquota ( String string ) ; public COFINSOutrasOperacoes withValor ( String string ) ; } 
public COFINSOutrasOperacoes withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSOutrasOperacoes withQuantidadeVendida ( String string ) ; public COFINSOutrasOperacoes withAliquota ( String string ) ; public COFINSOutrasOperacoes withValor ( String string ) ; } 
public COFINSOutrasOperacoes withQuantidadeVendida ( String string ) ; public COFINSOutrasOperacoes withAliquota ( String string ) ; public COFINSOutrasOperacoes withValor ( String string ) ; } 
public COFINSOutrasOperacoes withAliquota ( String string ) ; public COFINSOutrasOperacoes withValor ( String string ) ; } 
public COFINSOutrasOperacoes withValor ( String string ) ; } 
public COFINSOutrasOperacoes withCodigoSituacaoTributaria ( final String string ) { cOFINSOutr . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSOutrasOperacoes withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { cOFINSOutr . setvalorDaBaseDeCalculo ( baseDeCalculo . oPlainString ( ) ) ; return his ; } 
public COFINSOutrasOperacoes withAliquotaEmPercentual ( final BigDecimal percentual ) { cOFINSOutr . setAliquotaEmPercentual ( percentual . oPlainString ( ) ) ; return his ; } 
public COFINSOutrasOperacoes withQuantidadeVendida ( final String string ) { cOFINSOutr . setQuantidadeVendida ( string ) ; return his ; } 
public COFINSOutrasOperacoes withAliquota ( final String string ) { cOFINSOutr . setAliquota ( string ) ; return his ; } 
public COFINSOutrasOperacoes withValor ( final String string ) { cOFINSOutr . setValor ( string ) ; return his ; } 
public COFINSSubstituicaoTributaria withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSSubstituicaoTributaria withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSSubstituicaoTributaria withQuantidadeVendida ( BigDecimal string ) ; public COFINSSubstituicaoTributaria withAliquota ( BigDecimal string ) ; public COFINSSubstituicaoTributaria withValor ( BigDecimal string ) ; } 
public COFINSSubstituicaoTributaria withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSSubstituicaoTributaria withQuantidadeVendida ( BigDecimal string ) ; public COFINSSubstituicaoTributaria withAliquota ( BigDecimal string ) ; public COFINSSubstituicaoTributaria withValor ( BigDecimal string ) ; } 
public COFINSSubstituicaoTributaria withQuantidadeVendida ( BigDecimal string ) ; public COFINSSubstituicaoTributaria withAliquota ( BigDecimal string ) ; public COFINSSubstituicaoTributaria withValor ( BigDecimal string ) ; } 
public COFINSSubstituicaoTributaria withAliquota ( BigDecimal string ) ; public COFINSSubstituicaoTributaria withValor ( BigDecimal string ) ; } 
public COFINSSubstituicaoTributaria withValor ( BigDecimal string ) ; } 
public COFINSSubstituicaoTributaria withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { cOFINSST . setvalorDaBaseDeCalculo ( baseDeCalculo . oPlainString ( ) ) ; return his ; } 
public COFINSSubstituicaoTributaria withAliquotaEmPercentual ( final BigDecimal percentual ) { cOFINSST . setAliquotaEmPercentual ( percentual . oPlainString ( ) ) ; return his ; } 
public COFINSSubstituicaoTributaria withQuantidadeVendida ( final BigDecimal string ) { cOFINSST . setQuantidadeVendida ( string . oString ( ) ) ; return his ; } 
public COFINSSubstituicaoTributaria withAliquota ( final BigDecimal string ) { cOFINSST . setAliquota ( string . oString ( ) ) ; return his ; } 
public COFINSSubstituicaoTributaria withValor ( final BigDecimal string ) { cOFINSST . setValor ( string . oString ( ) ) ; return his ; } 
public COFINSTributadoPelaAliquota withCodigoSituacaoTributaria ( String string ) ; public COFINSTributadoPelaAliquota withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSTributadoPelaAliquota withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSTributadoPelaAliquota withValor ( String string ) ; } 
public COFINSTributadoPelaAliquota withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSTributadoPelaAliquota withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSTributadoPelaAliquota withValor ( String string ) ; } 
public COFINSTributadoPelaAliquota withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSTributadoPelaAliquota withValor ( String string ) ; } 
public COFINSTributadoPelaAliquota withValor ( String string ) ; } 
public COFINSTributadoPelaAliquota withCodigoSituacaoTributaria ( final String string ) { cOFINSAliq . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSTributadoPelaAliquota withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { cOFINSAliq . setvalorDaBaseDeCalculo ( baseDeCalculo . oPlainString ( ) ) ; return his ; } 
public COFINSTributadoPelaAliquota withAliquotaEmPercentual ( final BigDecimal percentual ) { cOFINSAliq . setAliquotaEmPercentual ( percentual . oPlainString ( ) ) ; return his ; } 
public COFINSTributadoPelaAliquota withValor ( final String string ) { cOFINSAliq . setValor ( string ) ; return his ; } 
public COFINSTributadoPelaQuantidade withCodigoSituacaoTributaria ( String string ) ; public COFINSTributadoPelaQuantidade withQuantidadeVendida ( BigDecimal string ) ; public COFINSTributadoPelaQuantidade withAliquota ( BigDecimal string ) ; public COFINSTributadoPelaQuantidade withValor ( BigDecimal string ) ; } 
public COFINSTributadoPelaQuantidade withQuantidadeVendida ( BigDecimal string ) ; public COFINSTributadoPelaQuantidade withAliquota ( BigDecimal string ) ; public COFINSTributadoPelaQuantidade withValor ( BigDecimal string ) ; } 
public COFINSTributadoPelaQuantidade withAliquota ( BigDecimal string ) ; public COFINSTributadoPelaQuantidade withValor ( BigDecimal string ) ; } 
public COFINSTributadoPelaQuantidade withValor ( BigDecimal string ) ; } 
public COFINSTributadoPelaQuantidade withCodigoSituacaoTributaria ( final String string ) { cOFINSQtde . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSTributadoPelaQuantidade withQuantidadeVendida ( final BigDecimal string ) { cOFINSQtde . setQuantidadeVendida ( string . oString ( ) ) ; return his ; } 
public COFINSTributadoPelaQuantidade withAliquota ( final BigDecimal string ) { cOFINSQtde . setAliquota ( string . oString ( ) ) ; return his ; } 
public COFINSTributadoPelaQuantidade withValor ( final BigDecimal string ) { cOFINSQtde . setValor ( string . oString ( ) ) ; return his ; } 
public Cobranca withFatura ( Fatura fat ) ; public Cobranca withDuplicatas ( Duplicata . . . dups ) ; } 
public Cobranca withFatura ( final Fatura fat ) { cobr . setFat ( ( br . com . caelum . stella . nfe . modelo . Fat ) ( ( ObjectCreator ) fat ) . getInstance ( ) ) ; return his ; } 
public Cobranca withDuplicatas ( final Duplicata . . . dups ) { List < br . com . caelum . stella . nfe . modelo . Dup > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Dup > ( ) ; for ( Duplicata p : dups ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Dup ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } cobr . setDup ( list ) ; return his ; } 
public Combustivel withCodigoDoProdutoNaANP ( Integer string ) ; public Combustivel withCodigoDeAutorizacaoOuRegistroDoCODIF ( BigInteger string ) ; public Combustivel withQuantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ( BigDecimal string ) ; public Combustivel withCIDE ( CIDESobreCombustiveis cIDE ) ; public Combustivel withICMS ( ICMSSobreCombustiveis iCMSComb ) ; public Combustivel withICMSSobreOperacoesInterestaduais ( ICMSSobreOperacoesInterestaduais iCMSInter ) ; public Combustivel withICMSSobreConsumo ( ICMSSobreConsumo iCMSCons ) ; } 
public Combustivel withCodigoDeAutorizacaoOuRegistroDoCODIF ( BigInteger string ) ; public Combustivel withQuantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ( BigDecimal string ) ; public Combustivel withCIDE ( CIDESobreCombustiveis cIDE ) ; public Combustivel withICMS ( ICMSSobreCombustiveis iCMSComb ) ; public Combustivel withICMSSobreOperacoesInterestaduais ( ICMSSobreOperacoesInterestaduais iCMSInter ) ; public Combustivel withICMSSobreConsumo ( ICMSSobreConsumo iCMSCons ) ; } 
public Combustivel withQuantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ( BigDecimal string ) ; public Combustivel withCIDE ( CIDESobreCombustiveis cIDE ) ; public Combustivel withICMS ( ICMSSobreCombustiveis iCMSComb ) ; public Combustivel withICMSSobreOperacoesInterestaduais ( ICMSSobreOperacoesInterestaduais iCMSInter ) ; public Combustivel withICMSSobreConsumo ( ICMSSobreConsumo iCMSCons ) ; } 
public Combustivel withCIDE ( CIDESobreCombustiveis cIDE ) ; public Combustivel withICMS ( ICMSSobreCombustiveis iCMSComb ) ; public Combustivel withICMSSobreOperacoesInterestaduais ( ICMSSobreOperacoesInterestaduais iCMSInter ) ; public Combustivel withICMSSobreConsumo ( ICMSSobreConsumo iCMSCons ) ; } 
public Combustivel withICMS ( ICMSSobreCombustiveis iCMSComb ) ; public Combustivel withICMSSobreOperacoesInterestaduais ( ICMSSobreOperacoesInterestaduais iCMSInter ) ; public Combustivel withICMSSobreConsumo ( ICMSSobreConsumo iCMSCons ) ; } 
public Combustivel withICMSSobreOperacoesInterestaduais ( ICMSSobreOperacoesInterestaduais iCMSInter ) ; public Combustivel withICMSSobreConsumo ( ICMSSobreConsumo iCMSCons ) ; } 
public Combustivel withICMSSobreConsumo ( ICMSSobreConsumo iCMSCons ) ; } 
public Combustivel withCodigoDoProdutoNaANP ( final Integer string ) { comb . setCProdANP ( string . oString ( ) ) ; return his ; } 
public Combustivel withCodigoDeAutorizacaoOuRegistroDoCODIF ( final BigInteger string ) { comb . setCODIF ( string . oString ( ) ) ; return his ; } 
public Combustivel withQuantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ( final BigDecimal string ) { comb . setQTemp ( string . oString ( ) ) ; return his ; } 
public Combustivel withCIDE ( final CIDESobreCombustiveis cIDE ) { comb . setCIDE ( ( br . com . caelum . stella . nfe . modelo . CIDE ) ( ( ObjectCreator ) cIDE ) . getInstance ( ) ) ; return his ; } 
public Combustivel withICMS ( final ICMSSobreCombustiveis iCMSComb ) { comb . setICMSComb ( ( br . com . caelum . stella . nfe . modelo . ICMSComb ) ( ( ObjectCreator ) iCMSComb ) . getInstance ( ) ) ; return his ; } 
public Combustivel withICMSSobreOperacoesInterestaduais ( final ICMSSobreOperacoesInterestaduais iCMSInter ) { comb . setICMSInter ( ( br . com . caelum . stella . nfe . modelo . ICMSInter ) ( ( ObjectCreator ) iCMSInter ) . getInstance ( ) ) ; return his ; } 
public Combustivel withICMSSobreConsumo ( final ICMSSobreConsumo iCMSCons ) { comb . setICMSCons ( ( br . com . caelum . stella . nfe . modelo . ICMSCons ) ( ( ObjectCreator ) iCMSCons ) . getInstance ( ) ) ; return his ; } 
public Compra withInformacoesDaNotaDeEmpenhoDeComprasPublicas ( String string ) ; public Compra withInformacaoDoPedido ( String string ) ; public Compra withInformacaoDoContrato ( String string ) ; } 
public Compra withInformacaoDoPedido ( String string ) ; public Compra withInformacaoDoContrato ( String string ) ; } 
public Compra withInformacaoDoContrato ( String string ) ; } 
public Compra withInformacoesDaNotaDeEmpenhoDeComprasPublicas ( String string ) { his . compra . setXNEmp ( string ) ; return his ; } 
public Compra withInformacaoDoPedido ( String string ) { his . compra . setXPed ( string ) ; return his ; } 
public Compra withInformacaoDoContrato ( String string ) { his . compra . setXCont ( string ) ; return his ; } 
public DeclaracaoDeImportacao withNumeroDoDocumentoDeImportacao ( String string ) ; public DeclaracaoDeImportacao withDataDaDeclaracaoDeImportacao ( Calendar calendar ) ; public DeclaracaoDeImportacao withLocalDeDesenbaraco ( String string ) ; public DeclaracaoDeImportacao withUFDoDesembaraco ( UF Uf ) ; public DeclaracaoDeImportacao withDataDoDeembaraco ( Calendar calendar ) ; public DeclaracaoDeImportacao withCodigoDoExportador ( String string ) ; public DeclaracaoDeImportacao withAdicoes ( Adicao . . . adis ) ; } 
public DeclaracaoDeImportacao withDataDaDeclaracaoDeImportacao ( Calendar calendar ) ; public DeclaracaoDeImportacao withLocalDeDesenbaraco ( String string ) ; public DeclaracaoDeImportacao withUFDoDesembaraco ( UF Uf ) ; public DeclaracaoDeImportacao withDataDoDeembaraco ( Calendar calendar ) ; public DeclaracaoDeImportacao withCodigoDoExportador ( String string ) ; public DeclaracaoDeImportacao withAdicoes ( Adicao . . . adis ) ; } 
public DeclaracaoDeImportacao withLocalDeDesenbaraco ( String string ) ; public DeclaracaoDeImportacao withUFDoDesembaraco ( UF Uf ) ; public DeclaracaoDeImportacao withDataDoDeembaraco ( Calendar calendar ) ; public DeclaracaoDeImportacao withCodigoDoExportador ( String string ) ; public DeclaracaoDeImportacao withAdicoes ( Adicao . . . adis ) ; } 
public DeclaracaoDeImportacao withUFDoDesembaraco ( UF Uf ) ; public DeclaracaoDeImportacao withDataDoDeembaraco ( Calendar calendar ) ; public DeclaracaoDeImportacao withCodigoDoExportador ( String string ) ; public DeclaracaoDeImportacao withAdicoes ( Adicao . . . adis ) ; } 
public DeclaracaoDeImportacao withDataDoDeembaraco ( Calendar calendar ) ; public DeclaracaoDeImportacao withCodigoDoExportador ( String string ) ; public DeclaracaoDeImportacao withAdicoes ( Adicao . . . adis ) ; } 
public DeclaracaoDeImportacao withCodigoDoExportador ( String string ) ; public DeclaracaoDeImportacao withAdicoes ( Adicao . . . adis ) ; } 
public DeclaracaoDeImportacao withAdicoes ( Adicao . . . adis ) ; } 
public DeclaracaoDeImportacao withNumeroDoDocumentoDeImportacao ( final String string ) { dI . setNDI ( string ) ; return his ; } 
public DeclaracaoDeImportacao withDataDaDeclaracaoDeImportacao ( final Calendar calendar ) { dI . setDDI ( calendar ) ; return his ; } 
public DeclaracaoDeImportacao withLocalDeDesenbaraco ( final String string ) { dI . setXLocDesemb ( string ) ; return his ; } 
public DeclaracaoDeImportacao withUFDoDesembaraco ( final UF Uf ) { dI . setUFDesemb ( Uf ) ; return his ; } 
public DeclaracaoDeImportacao withDataDoDeembaraco ( final Calendar calendar ) { dI . setDDesemb ( calendar ) ; return his ; } 
public DeclaracaoDeImportacao withCodigoDoExportador ( final String string ) { dI . setCExportador ( string ) ; return his ; } 
public DeclaracaoDeImportacao withAdicoes ( final Adicao . . . adis ) { List < br . com . caelum . stella . nfe . modelo . Adi > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Adi > ( ) ; for ( Adicao p : adis ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Adi ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } dI . setAdi ( list ) ; return his ; } 
public Destinatario withCNPJ ( CNPJ cnpj ) ; public Destinatario withCPF ( CPF cpf ) ; public Destinatario withNomeDoDestinatario ( String string ) ; public Destinatario withEndererecoDoDestinatario ( Endereco Endereco ) ; public Destinatario withInscricaoEstadual ( String string ) ; public Destinatario withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario withCPF ( CPF cpf ) ; public Destinatario withNomeDoDestinatario ( String string ) ; public Destinatario withEndererecoDoDestinatario ( Endereco Endereco ) ; public Destinatario withInscricaoEstadual ( String string ) ; public Destinatario withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario withRazaoSocial ( String string ) ; public Destinatario withNomeDoDestinatario ( String string ) ; public Destinatario withEndererecoDoDestinatario ( Endereco Endereco ) ; public Destinatario withInscricaoEstadual ( String string ) ; public Destinatario withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario withNomeDoDestinatario ( String string ) ; public Destinatario withEndererecoDoDestinatario ( Endereco Endereco ) ; public Destinatario withInscricaoEstadual ( String string ) ; public Destinatario withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario withEndererecoDoDestinatario ( Endereco Endereco ) ; public Destinatario withInscricaoEstadual ( String string ) ; public Destinatario withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario withInscricaoEstadual ( String string ) ; public Destinatario withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario withCNPJ ( final CNPJ cnpj ) { dest . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Destinatario withCPF ( final CPF cpf ) { dest . setCPF ( cpf . getNumero ( ) ) ; return his ; } 
public Destinatario withRazaoSocial ( final String string ) { dest . setXNome ( string ) ; return his ; } 
public Destinatario withEndererecoDoDestinatario ( final Endereco Endereco ) { dest . setEnderDest ( ( br . com . caelum . stella . nfe . modelo . TEndereco ) ( ( ObjectCreator ) Endereco ) . getInstance ( ) ) ; return his ; } 
public Destinatario withInscricaoEstadual ( final String string ) { dest . setIE ( string ) ; return his ; } 
public Destinatario withInscricaoNaSUFRAMA ( final String string ) { dest . setISUF ( string ) ; return his ; } 
public Destinatario withNomeDoDestinatario ( final String string ) { dest . setXNome ( string ) ; return null ; } 
public Detalhe withProduto ( Produto prod ) ; public Detalhe withImposto ( Impostos impostos ) ; public Detalhe withInformacaoAdicionalDoProduto ( String string ) ; public Detalhe withNumeroDoItemNaNF ( String string ) ; } 
public Detalhe withImposto ( Impostos impostos ) ; public Detalhe withInformacaoAdicionalDoProduto ( String string ) ; public Detalhe withNumeroDoItemNaNF ( String string ) ; } 
public Detalhe withInformacaoAdicionalDoProduto ( String string ) ; public Detalhe withNumeroDoItemNaNF ( String string ) ; } 
public Detalhe withProduto ( final Produto prod ) { det . setProd ( ( br . com . caelum . stella . nfe . modelo . Prod ) ( ( ObjectCreator ) prod ) . getInstance ( ) ) ; return his ; } 
public Detalhe withImposto ( final Impostos imposto ) { det . setImposto ( ( br . com . caelum . stella . nfe . modelo . Imposto ) ( ( ObjectCreator ) imposto ) . getInstance ( ) ) ; return his ; } 
public Detalhe withInformacaoAdicionalDoProduto ( final String string ) { det . setInfAdProd ( string ) ; return his ; } 
public Detalhe withNumeroDoItemNaNF ( final String string ) { det . setNItem ( string ) ; return his ; } 
public Duplicata withNumero ( String string ) ; public Duplicata withDataDeVencimento ( Calendar calendar ) ; public Duplicata withValorDaDuplicata ( String string ) ; } 
public Duplicata withDataDeVencimento ( Calendar calendar ) ; public Duplicata withValorDaDuplicata ( String string ) ; } 
public Duplicata withValorDaDuplicata ( String string ) ; } 
public Duplicata withNumero ( final String string ) { dup . setNDup ( string ) ; return his ; } 
public Duplicata withDataDeVencimento ( final Calendar calendar ) { dup . setDVenc ( calendar ) ; return his ; } 
public Duplicata withValorDaDuplicata ( final String string ) { dup . setVDup ( string ) ; return his ; } 
public Emitente withCNPJ ( CNPJ cnpj ) ; public Emitente withCPF ( CPF cpf ) ; public Emitente withNome ( String string ) ; public Emitente withNomeFantasia ( String string ) ; public Emitente withEnderecoDoEmitente ( Endereco Endereco ) ; public Emitente withInscricaoEstadual ( String string ) ; public Emitente withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente withInscricaoMunicipal ( String string ) ; public Emitente withCNAEFiscal ( String string ) ; } 
public Emitente withCPF ( CPF cpf ) ; public Emitente withNome ( String string ) ; public Emitente withNomeFantasia ( String string ) ; public Emitente withEnderecoDoEmitente ( Endereco Endereco ) ; public Emitente withInscricaoEstadual ( String string ) ; public Emitente withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente withInscricaoMunicipal ( String string ) ; public Emitente withCNAEFiscal ( String string ) ; } 
public Emitente withRazaoSocial ( String string ) ; public Emitente withNome ( String string ) ; public Emitente withNomeFantasia ( String string ) ; public Emitente withEnderecoDoEmitente ( Endereco Endereco ) ; public Emitente withInscricaoEstadual ( String string ) ; public Emitente withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente withInscricaoMunicipal ( String string ) ; public Emitente withCNAEFiscal ( String string ) ; } 
public Emitente withNome ( String string ) ; public Emitente withNomeFantasia ( String string ) ; public Emitente withEnderecoDoEmitente ( Endereco Endereco ) ; public Emitente withInscricaoEstadual ( String string ) ; public Emitente withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente withInscricaoMunicipal ( String string ) ; public Emitente withCNAEFiscal ( String string ) ; } 
public Emitente withNomeFantasia ( String string ) ; public Emitente withEnderecoDoEmitente ( Endereco Endereco ) ; public Emitente withInscricaoEstadual ( String string ) ; public Emitente withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente withInscricaoMunicipal ( String string ) ; public Emitente withCNAEFiscal ( String string ) ; } 
public Emitente withEnderecoDoEmitente ( Endereco Endereco ) ; public Emitente withInscricaoEstadual ( String string ) ; public Emitente withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente withInscricaoMunicipal ( String string ) ; public Emitente withCNAEFiscal ( String string ) ; } 
public Emitente withInscricaoEstadual ( String string ) ; public Emitente withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente withInscricaoMunicipal ( String string ) ; public Emitente withCNAEFiscal ( String string ) ; } 
public Emitente withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente withInscricaoMunicipal ( String string ) ; public Emitente withCNAEFiscal ( String string ) ; } 
public Emitente withInscricaoMunicipal ( String string ) ; public Emitente withCNAEFiscal ( String string ) ; } 
public Emitente withCNPJ ( final CNPJ cnpj ) { emit . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Emitente withCPF ( final CPF cpf ) { emit . setCPF ( cpf . getNumero ( ) ) ; return his ; } 
public Emitente withRazaoSocial ( final String string ) { emit . setXNome ( string ) ; return his ; } 
public Emitente withNomeFantasia ( final String string ) { emit . setXFant ( string ) ; return his ; } 
public Emitente withEnderecoDoEmitente ( final Endereco Endereco ) { emit . setEnderEmit ( ( br . com . caelum . stella . nfe . modelo . TEndereco ) ( ( ObjectCreator ) Endereco ) . getInstance ( ) ) ; return his ; } 
public Emitente withInscricaoEstadual ( final String string ) { emit . setIE ( string ) ; return his ; } 
public Emitente withInscricaoEstadualDoSubstitutoTributario ( final String string ) { emit . setIEST ( string ) ; return his ; } 
public Emitente withInscricaoMunicipal ( final String string ) { emit . setIM ( string ) ; return his ; } 
public Emitente withCNAEFiscal ( final String string ) { emit . setCNAE ( string ) ; return his ; } 
public Emitente withNome ( final String string ) { emit . setXNome ( string ) ; return his ; } 
public Exportacao withUFDoEmbarque ( UF Uf ) ; public Exportacao withLocalDoEmbarque ( String string ) ; } 
public Exportacao withLocalDoEmbarque ( String string ) ; } 
public Exportacao withUFDoEmbarque ( final UF Uf ) { exporta . setUFEmbarq ( Uf ) ; return his ; } 
public Exportacao withLocalDoEmbarque ( final String string ) { exporta . setXLocEmbarq ( string ) ; return his ; } 
public Fatura withNumeroDaFatura ( String string ) ; public Fatura withValorOriginal ( BigDecimal string ) ; public Fatura withValorDeDesconto ( BigDecimal string ) ; public Fatura withValorLiquido ( BigDecimal string ) ; } 
public Fatura withValorOriginal ( BigDecimal string ) ; public Fatura withValorDeDesconto ( BigDecimal string ) ; public Fatura withValorLiquido ( BigDecimal string ) ; } 
public Fatura withValorDeDesconto ( BigDecimal string ) ; public Fatura withValorLiquido ( BigDecimal string ) ; } 
public Fatura withNumeroDaFatura ( final String string ) { fat . setNFat ( string ) ; return his ; } 
public Fatura withValorOriginal ( final BigDecimal string ) { fat . setVOrig ( string . oString ( ) ) ; return his ; } 
public Fatura withValorDeDesconto ( final BigDecimal string ) { fat . setVDesc ( string . oString ( ) ) ; return his ; } 
public Fatura withValorLiquido ( final BigDecimal string ) { fat . setVLiq ( string . oString ( ) ) ; return his ; } 
public ICMSSobreCombustiveis withValorDaBaseDeCalculo ( BigDecimal string ) ; public ICMSSobreCombustiveis withValor ( BigDecimal string ) ; public ICMSSobreCombustiveis withValorDaBaseDeCalculoDaSubstituicaoTributaria ( BigDecimal string ) ; public ICMSSobreCombustiveis withValorDoICMSDaSubstituicaoTributaria ( BigDecimal string ) ; } 
public ICMSSobreCombustiveis withValor ( BigDecimal string ) ; public ICMSSobreCombustiveis withValorDaBaseDeCalculoDaSubstituicaoTributaria ( BigDecimal string ) ; public ICMSSobreCombustiveis withValorDoICMSDaSubstituicaoTributaria ( BigDecimal string ) ; } 
public ICMSSobreCombustiveis withValorDaBaseDeCalculoDaSubstituicaoTributaria ( BigDecimal string ) ; public ICMSSobreCombustiveis withValorDoICMSDaSubstituicaoTributaria ( BigDecimal string ) ; } 
public ICMSSobreCombustiveis withValorDoICMSDaSubstituicaoTributaria ( BigDecimal string ) ; } 
public ICMSSobreCombustiveis withValorDaBaseDeCalculo ( final BigDecimal string ) { iCMSComb . setVBCICMS ( string . oString ( ) ) ; return his ; } 
public ICMSSobreCombustiveis withValor ( final BigDecimal string ) { iCMSComb . setVICMS ( string . oString ( ) ) ; return his ; } 
public ICMSSobreCombustiveis withValorDaBaseDeCalculoDaSubstituicaoTributaria ( final BigDecimal string ) { iCMSComb . setVBCICMSST ( string . oString ( ) ) ; return his ; } 
public ICMSSobreCombustiveis withValorDoICMSDaSubstituicaoTributaria ( final BigDecimal string ) { iCMSComb . setVICMSST ( string . oString ( ) ) ; return his ; } 
public ICMSSobreConsumo withValorDaBaseDeCalculoDoICMSDeSubstituicaoTributariaSobreConsumo ( BigDecimal string ) ; public ICMSSobreConsumo withValorDoICMSSubstituicaoTributariaSobreConsumo ( BigDecimal string ) ; public ICMSSobreConsumo withUF ( UF Uf ) ; } 
public ICMSSobreConsumo withValorDoICMSSubstituicaoTributariaSobreConsumo ( BigDecimal string ) ; public ICMSSobreConsumo withUF ( UF Uf ) ; } 
public ICMSSobreConsumo withValorDaBaseDeCalculoDoICMSDeSubstituicaoTributariaSobreConsumo ( final BigDecimal string ) { iCMSCons . setVBCICMSSTCons ( string . oString ( ) ) ; return his ; } 
public ICMSSobreConsumo withValorDoICMSSubstituicaoTributariaSobreConsumo ( final BigDecimal string ) { iCMSCons . setVICMSSTCons ( string . oString ( ) ) ; return his ; } 
public ICMSSobreConsumo withUF ( final UF Uf ) { iCMSCons . setUFCons ( Uf ) ; return his ; } 
public ICMSSobreOperacoesInterestaduais withValorDaBaseDeCalculoDoICMSSubstituicaoTributariaDoDestino ( BigDecimal string ) ; public ICMSSobreOperacoesInterestaduais withValorDoICMSSubstituicaoTributariaDoDestino ( BigDecimal string ) ; } 
public ICMSSobreOperacoesInterestaduais withValorDoICMSSubstituicaoTributariaDoDestino ( BigDecimal string ) ; } 
public ICMSSobreOperacoesInterestaduais withValorDaBaseDeCalculoDoICMSSubstituicaoTributariaDoDestino ( final BigDecimal string ) { iCMSInter . setVBCICMSSTDest ( string . oString ( ) ) ; return his ; } 
public ICMSSobreOperacoesInterestaduais withValorDoICMSSubstituicaoTributariaDoDestino ( final BigDecimal string ) { iCMSInter . setVICMSSTDest ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorDaBaseDeCalculoDoICMSSubstituicaoTributaria ( BigDecimal string ) ; public ICMSTotal withValorTotalDoICMSSubstituicaoTributaria ( BigDecimal string ) ; public ICMSTotal withValorTotalDosProdutosEServicos ( BigDecimal string ) ; public ICMSTotal withValorTotalDoFrete ( BigDecimal string ) ; public ICMSTotal withValorTotalDoSeguro ( BigDecimal string ) ; public ICMSTotal withValorTotalDeDesconto ( BigDecimal string ) ; public ICMSTotal withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal withValorTotalDoICMSSubstituicaoTributaria ( BigDecimal string ) ; public ICMSTotal withValorTotalDosProdutosEServicos ( BigDecimal string ) ; public ICMSTotal withValorTotalDoFrete ( BigDecimal string ) ; public ICMSTotal withValorTotalDoSeguro ( BigDecimal string ) ; public ICMSTotal withValorTotalDeDesconto ( BigDecimal string ) ; public ICMSTotal withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal withValorTotalDosProdutosEServicos ( BigDecimal string ) ; public ICMSTotal withValorTotalDoFrete ( BigDecimal string ) ; public ICMSTotal withValorTotalDoSeguro ( BigDecimal string ) ; public ICMSTotal withValorTotalDeDesconto ( BigDecimal string ) ; public ICMSTotal withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal withValorTotalDoFrete ( BigDecimal string ) ; public ICMSTotal withValorTotalDoSeguro ( BigDecimal string ) ; public ICMSTotal withValorTotalDeDesconto ( BigDecimal string ) ; public ICMSTotal withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal withValorTotalDoSeguro ( BigDecimal string ) ; public ICMSTotal withValorTotalDeDesconto ( BigDecimal string ) ; public ICMSTotal withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal withValorTotalDeDesconto ( BigDecimal string ) ; public ICMSTotal withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal withValor ( BigDecimal string ) ; public ICMSTotal withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal withValorDaBaseDeCalculo ( final BigDecimal string ) { iCMSTot . setVBC ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorTotal ( final BigDecimal string ) { iCMSTot . setVICMS ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorDaBaseDeCalculoDoICMSSubstituicaoTributaria ( final BigDecimal string ) { iCMSTot . setVBCST ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorTotalDoICMSSubstituicaoTributaria ( final BigDecimal string ) { iCMSTot . setVST ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorTotalDosProdutosEServicos ( final BigDecimal string ) { iCMSTot . setVProd ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorTotalDoFrete ( final BigDecimal string ) { iCMSTot . setVFrete ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorTotalDoSeguro ( final BigDecimal string ) { iCMSTot . setVSeg ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorTotalDeDesconto ( final BigDecimal string ) { iCMSTot . setVDesc ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorTotalDoII ( final BigDecimal string ) { iCMSTot . setVII ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorTotalDoIPI ( final BigDecimal string ) { iCMSTot . setVIPI ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorTotalDoPIS ( final BigDecimal string ) { iCMSTot . setVPIS ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorTotalDeOutrasDespesas ( final BigDecimal string ) { iCMSTot . setVOutro ( string . oString ( ) ) ; return his ; } 
public ICMSTotal withValorTotalDaNF ( final BigDecimal string ) { iCMSTot . setVNF ( string . oString ( ) ) ; return his ; } 
public IdentificacaoDaNFE withCodigoDoMunicipioDeOcorrenciaDoFatoGerador ( String string ) ; public IdentificacaoDaNFE withInformacoesDaNFReferenciada ( InformacaoDaNFReferenciada . . . nfref ) ; public IdentificacaoDaNFE withFormatoDeImpressao ( FormatoDeImpressao string ) ; public IdentificacaoDaNFE withFormaDeEmissao ( FormaDeEmissao string ) ; public IdentificacaoDaNFE withDigitoVerificadorDaChaveDeAcessoDaNFE ( String string ) ; public IdentificacaoDaNFE withTipoDoAmbiente ( TipoDoAmbiente string ) ; public IdentificacaoDaNFE withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE withInformacoesDaNFReferenciada ( InformacaoDaNFReferenciada . . . nfref ) ; public IdentificacaoDaNFE withFormatoDeImpressao ( FormatoDeImpressao string ) ; public IdentificacaoDaNFE withFormaDeEmissao ( FormaDeEmissao string ) ; public IdentificacaoDaNFE withDigitoVerificadorDaChaveDeAcessoDaNFE ( String string ) ; public IdentificacaoDaNFE withTipoDoAmbiente ( TipoDoAmbiente string ) ; public IdentificacaoDaNFE withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE withFormatoDeImpressao ( FormatoDeImpressao string ) ; public IdentificacaoDaNFE withFormaDeEmissao ( FormaDeEmissao string ) ; public IdentificacaoDaNFE withDigitoVerificadorDaChaveDeAcessoDaNFE ( String string ) ; public IdentificacaoDaNFE withTipoDoAmbiente ( TipoDoAmbiente string ) ; public IdentificacaoDaNFE withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE withFormaDeEmissao ( FormaDeEmissao string ) ; public IdentificacaoDaNFE withDigitoVerificadorDaChaveDeAcessoDaNFE ( String string ) ; public IdentificacaoDaNFE withTipoDoAmbiente ( TipoDoAmbiente string ) ; public IdentificacaoDaNFE withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE withDigitoVerificadorDaChaveDeAcessoDaNFE ( String string ) ; public IdentificacaoDaNFE withTipoDoAmbiente ( TipoDoAmbiente string ) ; public IdentificacaoDaNFE withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE withTipoDoAmbiente ( TipoDoAmbiente string ) ; public IdentificacaoDaNFE withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE withCodigoUFDoEmitente ( final String string ) { ide . setCUF ( string ) ; return his ; } 
public IdentificacaoDaNFE withCodigoDaNF ( final Integer string ) { ide . setCNF ( string . oString ( ) ) ; return his ; } 
public IdentificacaoDaNFE withDescricaoDaNaturezaDaOperacao ( final String string ) { ide . setNatOp ( string ) ; return his ; } 
public IdentificacaoDaNFE withFormaDePagamento ( final FormaDePagamento string ) { ide . setIndPag ( string . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE withModeloDoDocumentoFiscal ( final String string ) { ide . setMod ( string ) ; return his ; } 
public IdentificacaoDaNFE withSerie ( final String string ) { ide . setSerie ( string ) ; return his ; } 
public IdentificacaoDaNFE withNumeroDoDocumentoFiscal ( final String string ) { ide . setNNF ( string ) ; return his ; } 
public IdentificacaoDaNFE withDataDeEmissao ( final Calendar calendar ) { ide . setDEmi ( calendar ) ; return his ; } 
public IdentificacaoDaNFE withDataDeSaidaOuEntrada ( final Calendar calendar ) { ide . setDSaiEnt ( calendar ) ; return his ; } 
public IdentificacaoDaNFE withTipoDoDocumentoFiscal ( final TipoDocumentoFiscal string ) { ide . setTpNF ( string . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE withCodigoDoMunicipioDeOcorrenciaDoFatoGerador ( final String string ) { ide . setCMunFG ( string ) ; return his ; } 
public IdentificacaoDaNFE withInformacoesDaNFReferenciada ( final InformacaoDaNFReferenciada . . . nfref ) { List < br . com . caelum . stella . nfe . modelo . NFref > list = new ArrayList < br . com . caelum . stella . nfe . modelo . NFref > ( ) ; for ( InformacaoDaNFReferenciada p : nfref ) { list . add ( ( br . com . caelum . stella . nfe . modelo . NFref ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } ide . setNFref ( list ) ; return his ; } 
public IdentificacaoDaNFE withFormatoDeImpressao ( final FormatoDeImpressao formato ) { ide . setTpImp ( formato . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE withFormaDeEmissao ( final FormaDeEmissao string ) { ide . setTpEmis ( string . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE withDigitoVerificadorDaChaveDeAcessoDaNFE ( final String string ) { ide . setCDV ( string ) ; return his ; } 
public IdentificacaoDaNFE withTipoDoAmbiente ( final TipoDoAmbiente string ) { ide . setTpAmb ( string . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE withFinalidadeDaEmissaoDaNFE ( final FinalidadeDaEmissao string ) { ide . setFinNFe ( string . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE withProcessoDeEmissao ( final ProcessoDeEmissao string ) { ide . setProcEmi ( string . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE withVersaoDoAplicativoUsadoNaEmissao ( final String string ) { ide . setVerProc ( string ) ; return his ; } 
public InformacoesDaNFE withIde ( final IdentificacaoDaNFE ide ) { infNFe . setIde ( ( br . com . caelum . stella . nfe . modelo . Ide ) ( ( ObjectCreator ) ide ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withEmit ( final Emitente emit ) { infNFe . setEmit ( ( br . com . caelum . stella . nfe . modelo . Emit ) ( ( ObjectCreator ) emit ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withDest ( final Destinatario dest ) { infNFe . setDest ( ( br . com . caelum . stella . nfe . modelo . Dest ) ( ( ObjectCreator ) dest ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withDet ( final Detalhe . . . det ) { List < br . com . caelum . stella . nfe . modelo . Det > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Det > ( ) ; for ( Detalhe p : det ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Det ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infNFe . setDet ( list ) ; return his ; } 
public InformacoesDaNFE withCobr ( final Cobranca cobr ) { infNFe . setCobr ( ( br . com . caelum . stella . nfe . modelo . Cobr ) ( ( ObjectCreator ) cobr ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withInfAdic ( final InformacoesAdicionais infAdic ) { infNFe . setInfAdic ( ( br . com . caelum . stella . nfe . modelo . InfAdic ) ( ( ObjectCreator ) infAdic ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE withExporta ( final Exportacao exporta ) { infNFe . setExporta ( ( br . com . caelum . stella . nfe . modelo . Exporta ) ( ( ObjectCreator ) exporta ) . getInstance ( ) ) ; return his ; } 
public InformacaoDaNFReferenciada withChaveDeAcessoDaNFReferenciada ( String string ) ; public InformacaoDaNFReferenciada withNFReferenciada ( NFReferenciada refNF ) ; } 
public InformacaoDaNFReferenciada withNFReferenciada ( NFReferenciada refNF ) ; } 
public InformacoesAdicionais withInformacoesAdicionaisDeInteresseDoFisco ( String string ) ; public InformacoesAdicionais withInformacoesComplementares ( String string ) ; public InformacoesAdicionais withObservacoesDoContribuinte ( ObservacaoDoContribuinte . . . obsConts ) ; public InformacoesAdicionais withObsFisco ( ObservacaoFisco . . . obsFiscos ) ; public InformacoesAdicionais withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InformacoesAdicionais withInformacoesComplementares ( String string ) ; public InformacoesAdicionais withObservacoesDoContribuinte ( ObservacaoDoContribuinte . . . obsConts ) ; public InformacoesAdicionais withObsFisco ( ObservacaoFisco . . . obsFiscos ) ; public InformacoesAdicionais withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InformacoesAdicionais withObservacoesDoContribuinte ( ObservacaoDoContribuinte . . . obsConts ) ; public InformacoesAdicionais withObsFisco ( ObservacaoFisco . . . obsFiscos ) ; public InformacoesAdicionais withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InformacoesAdicionais withObsFisco ( ObservacaoFisco . . . obsFiscos ) ; public InformacoesAdicionais withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InformacoesAdicionais withProcRef ( ProcessoReferenciado . . . procRefs ) ; } 
public InformacoesAdicionais withInformacoesAdicionaisDeInteresseDoFisco ( final String string ) { infAdic . setInfAdFisco ( string ) ; return his ; } 
public InformacoesAdicionais withInformacoesComplementares ( final String string ) { infAdic . setInfCpl ( string ) ; return his ; } 
public InformacoesAdicionais withObservacoesDoContribuinte ( final ObservacaoDoContribuinte . . . obsConts ) { List < br . com . caelum . stella . nfe . modelo . ObsCont > list = new ArrayList < br . com . caelum . stella . nfe . modelo . ObsCont > ( ) ; for ( ObservacaoDoContribuinte p : obsConts ) { list . add ( ( br . com . caelum . stella . nfe . modelo . ObsCont ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infAdic . setObsCont ( list ) ; return his ; } 
public InformacoesAdicionais withObsFisco ( final ObservacaoFisco . . . obsFiscos ) { List < br . com . caelum . stella . nfe . modelo . ObsFisco > list = new ArrayList < br . com . caelum . stella . nfe . modelo . ObsFisco > ( ) ; for ( ObservacaoFisco p : obsFiscos ) { list . add ( ( br . com . caelum . stella . nfe . modelo . ObsFisco ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infAdic . setObsFisco ( list ) ; return his ; } 
public InformacoesAdicionais withProcRef ( final ProcessoReferenciado . . . procRef ) { List < br . com . caelum . stella . nfe . modelo . ProcRef > list = new ArrayList < br . com . caelum . stella . nfe . modelo . ProcRef > ( ) ; for ( ProcessoReferenciado p : procRef ) { list . add ( ( br . com . caelum . stella . nfe . modelo . ProcRef ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infAdic . setProcRef ( list ) ; return his ; } 
public InformacoesDaNFE withEmit ( Emitente emit ) ; public InformacoesDaNFE withAvulsa ( Avulsa avulsa ) ; public InformacoesDaNFE withDest ( Destinatario dest ) ; public InformacoesDaNFE withRetirada ( DadosDoLocal Local ) ; public InformacoesDaNFE withEntrega ( DadosDoLocal Local ) ; public InformacoesDaNFE withDet ( Detalhe . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobranca cobr ) ; public InformacoesDaNFE withInfAdic ( InformacoesAdicionais infAdic ) ; public InformacoesDaNFE withExporta ( Exportacao exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withAvulsa ( Avulsa avulsa ) ; public InformacoesDaNFE withDest ( Destinatario dest ) ; public InformacoesDaNFE withRetirada ( DadosDoLocal Local ) ; public InformacoesDaNFE withEntrega ( DadosDoLocal Local ) ; public InformacoesDaNFE withDet ( Detalhe . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobranca cobr ) ; public InformacoesDaNFE withInfAdic ( InformacoesAdicionais infAdic ) ; public InformacoesDaNFE withExporta ( Exportacao exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withDest ( Destinatario dest ) ; public InformacoesDaNFE withRetirada ( DadosDoLocal Local ) ; public InformacoesDaNFE withEntrega ( DadosDoLocal Local ) ; public InformacoesDaNFE withDet ( Detalhe . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobranca cobr ) ; public InformacoesDaNFE withInfAdic ( InformacoesAdicionais infAdic ) ; public InformacoesDaNFE withExporta ( Exportacao exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withRetirada ( DadosDoLocal Local ) ; public InformacoesDaNFE withEntrega ( DadosDoLocal Local ) ; public InformacoesDaNFE withDet ( Detalhe . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobranca cobr ) ; public InformacoesDaNFE withInfAdic ( InformacoesAdicionais infAdic ) ; public InformacoesDaNFE withExporta ( Exportacao exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withEntrega ( DadosDoLocal Local ) ; public InformacoesDaNFE withDet ( Detalhe . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobranca cobr ) ; public InformacoesDaNFE withInfAdic ( InformacoesAdicionais infAdic ) ; public InformacoesDaNFE withExporta ( Exportacao exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withDet ( Detalhe . . . det ) ; public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobranca cobr ) ; public InformacoesDaNFE withInfAdic ( InformacoesAdicionais infAdic ) ; public InformacoesDaNFE withExporta ( Exportacao exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withTotal ( TotalNFE otal ) ; public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobranca cobr ) ; public InformacoesDaNFE withInfAdic ( InformacoesAdicionais infAdic ) ; public InformacoesDaNFE withExporta ( Exportacao exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withTransp ( Transporte ransp ) ; public InformacoesDaNFE withCobr ( Cobranca cobr ) ; public InformacoesDaNFE withInfAdic ( InformacoesAdicionais infAdic ) ; public InformacoesDaNFE withExporta ( Exportacao exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withCobr ( Cobranca cobr ) ; public InformacoesDaNFE withInfAdic ( InformacoesAdicionais infAdic ) ; public InformacoesDaNFE withExporta ( Exportacao exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withInfAdic ( InformacoesAdicionais infAdic ) ; public InformacoesDaNFE withExporta ( Exportacao exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacoesDaNFE withExporta ( Exportacao exporta ) ; public InformacoesDaNFE withCompra ( Compra compra ) ; public InformacoesDaNFE withVersao ( String string ) ; public InformacoesDaNFE withId ( String string ) ; } 
public InformacaoDaNFReferenciada withChaveDeAcessoDaNFReferenciada ( final String string ) { nFref . setRefNFe ( string ) ; return his ; } 
public InformacaoDaNFReferenciada withNFReferenciada ( final NFReferenciada refNF ) { nFref . setRefNF ( ( br . com . caelum . stella . nfe . modelo . RefNF ) ( ( ObjectCreator ) refNF ) . getInstance ( ) ) ; return his ; } 
public ObservacaoDoContribuinte withTextoDeDescricao ( String string ) ; public ObservacaoDoContribuinte withDescricaoDoCampo ( String string ) ; } 
public ObservacaoDoContribuinte withDescricaoDoCampo ( String string ) ; } 
public ObservacaoDoContribuinte withTextoDeDescricao ( final String string ) { obsCont . setXTexto ( string ) ; return his ; } 
public ObservacaoDoContribuinte withDescricaoDoCampo ( final String string ) { obsCont . setXCampo ( string ) ; return his ; } 
public Produto withValorBrutoDoProduto ( BigDecimal string ) ; public Produto withCodigoEANDaUnidadeTributavel ( String string ) ; public Produto withUnidadeTributavel ( String string ) ; public Produto withQuantidadeTributavel ( BigDecimal string ) ; public Produto withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto withValorDoFrete ( BigDecimal string ) ; public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DeclaracaoDeImportacao . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withCodigoEANDaUnidadeTributavel ( String string ) ; public Produto withUnidadeTributavel ( String string ) ; public Produto withQuantidadeTributavel ( BigDecimal string ) ; public Produto withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto withValorDoFrete ( BigDecimal string ) ; public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DeclaracaoDeImportacao . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withUnidadeTributavel ( String string ) ; public Produto withQuantidadeTributavel ( BigDecimal string ) ; public Produto withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto withValorDoFrete ( BigDecimal string ) ; public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DeclaracaoDeImportacao . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withQuantidadeTributavel ( BigDecimal string ) ; public Produto withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto withValorDoFrete ( BigDecimal string ) ; public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DeclaracaoDeImportacao . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto withValorDoFrete ( BigDecimal string ) ; public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DeclaracaoDeImportacao . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withValorDoFrete ( BigDecimal string ) ; public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DeclaracaoDeImportacao . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withValorDoSeguro ( BigDecimal string ) ; public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DeclaracaoDeImportacao . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withValorDeDesconto ( BigDecimal string ) ; public Produto withDI ( DeclaracaoDeImportacao . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withDI ( DeclaracaoDeImportacao . . . di ) ; public Produto withVeiculoNovo ( VeiculoNovo veicProd ) ; public Produto withMedicamento ( Medicamento . . . meds ) ; public Produto withArmamento ( Armamento . . . armas ) ; public Produto withCombustivel ( Combustivel comb ) ; } 
public Produto withDI ( final DeclaracaoDeImportacao . . . di ) { List < br . com . caelum . stella . nfe . modelo . DI > list = new ArrayList < br . com . caelum . stella . nfe . modelo . DI > ( ) ; for ( DeclaracaoDeImportacao p : di ) { list . add ( ( br . com . caelum . stella . nfe . modelo . DI ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } prod . setDI ( list ) ; return his ; } 
public void estAdiInterface ( ) { Adicao adi = new AdicoesImpl ( ) . withNumeroDaAdicao ( 123 ) . withNumeroSequencialDoItemDaAdicao ( 123 ) . withCodigoDoFabricanteEstrangeiro ( " abc " ) . withValorDeDescontoDoItemDaDI ( BigDecimal . ONE ) ; assertModelWasFilled ( adi ) ; } 
private void assertModelWasFilled ( Adicao adi ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( adi ) . assertModelWasFilled ( ) ; 
public void estCIDEInterface ( ) { CIDESobreCombustiveis cIDE = new CIDESobreCombustiveisImpl ( ) . withBaseDeCalculo ( new BigDecimal ( " 1 " ) ) . withAliquota ( new BigDecimal ( " 1 " ) ) . withValor ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( cIDE ) ; } 
private void assertModelWasFilled ( final CIDESobreCombustiveis cIDE ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cIDE ) . assertModelWasFilled ( ) ; } 
public void estCOFINSAliqInterface ( ) { COFINSTributadoPelaAliquota cOFINSAliq = new COFINSTributadoPelaAliquotaImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withValor ( " abc " ) ; assertModelWasFilled ( cOFINSAliq ) ; } 
private void assertModelWasFilled ( COFINSTributadoPelaAliquota cOFINSAliq ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINSAliq ) . assertModelWasFilled ( ) ; } 
public void estCOFINSInterface ( ) { COFINS cOFINS = new COFINSImpl ( ) . withTributacaoPelaAliquota ( new COFINSTributadoPelaAliquotaImpl ( ) ) . withTributacaoPelaQuantidade ( new COFINSTributadoPelaQuantidadeImpl ( ) ) . withNaoTributado ( new COFINSNaoTributadoImpl ( ) ) . withTributacaoDeOutrasOperacoes ( new COFINSOutrasOperacoesImpl ( ) ) ; assertModelWasFilled ( cOFINS ) ; } 
public void estCOFINSNTInterface ( ) { COFINSNaoTributado cOFINSNT = new COFINSNaoTributadoImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) ; assertModelWasFilled ( cOFINSNT ) ; } 
private void assertModelWasFilled ( COFINSNaoTributado cOFINSNT ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINSNT ) . assertModelWasFilled ( ) ; } 
public void estCOFINSOutrInterface ( ) { COFINSOutrasOperacoes cOFINSOutr = new COFINSOutrasOperacoesImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( " abc " ) . withAliquota ( " abc " ) . withValor ( " abc " ) ; assertModelWasFilled ( cOFINSOutr ) ; } 
private void assertModelWasFilled ( COFINSOutrasOperacoes cOFINSOutr ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINSOutr ) . assertModelWasFilled ( ) ; } 
public void estCOFINSQtdeInterface ( ) { COFINSTributadoPelaQuantidade cOFINSQtde = new COFINSTributadoPelaQuantidadeImpl ( ) . withCodigoSituacaoTributaria ( " abc " ) . withQuantidadeVendida ( new BigDecimal ( " 1 " ) ) . withAliquota ( new BigDecimal ( " 1 " ) ) . withValor ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( cOFINSQtde ) ; } 
private void assertModelWasFilled ( final COFINSTributadoPelaQuantidade cOFINSQtde ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINSQtde ) . assertModelWasFilled ( ) ; } 
public void estCOFINSSTInterface ( ) { COFINSSubstituicaoTributaria cOFINSST = new COFINSSubstituicaoTributariaImpl ( ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( new BigDecimal ( " 1 " ) ) . withAliquota ( new BigDecimal ( " 1 " ) ) . withValor ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( cOFINSST ) ; } 
private void assertModelWasFilled ( final COFINSSubstituicaoTributaria cOFINSST ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cOFINSST ) . assertModelWasFilled ( ) ; } 
public void estCobrInterface ( ) { Cobranca cobr = new CobrancaImpl ( ) . withFatura ( new FaturaImpl ( ) ) . withDuplicatas ( new DuplicataImpl ( ) ) ; assertModelWasFilled ( cobr ) ; } 
private void assertModelWasFilled ( final Cobranca cobr ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cobr ) . assertModelWasFilled ( ) ; } 
public void estCombInterface ( ) { Combustivel comb = new CombustivelImpl ( ) . withCodigoDoProdutoNaANP ( 1 ) . withCodigoDeAutorizacaoOuRegistroDoCODIF ( new BigInteger ( " 1 " ) ) . withQuantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ( new BigDecimal ( " 1 " ) ) . withCIDE ( new CIDESobreCombustiveisImpl ( ) ) . withICMS ( new ICMSSobreCombustiveisImpl ( ) ) . withICMSSobreOperacoesInterestaduais ( new ICMSSobreOperacoesInterestaduaisImpl ( ) ) . withICMSSobreConsumo ( new ICMSSobreConsumoImpl ( ) ) ; assertModelWasFilled ( comb ) ; } 
public void estCompraInterface ( ) { Compra compra = new CompraImpl ( ) . withInformacoesDaNotaDeEmpenhoDeComprasPublicas ( " abc " ) . withInformacaoDoPedido ( " abc " ) . withInformacaoDoContrato ( " abc " ) ; assertModelWasFilled ( compra ) ; } 
public void estDIInterface ( ) { DeclaracaoDeImportacao dI = new DeclaracaoDeImportacaoImpl ( ) . withNumeroDoDocumentoDeImportacao ( " abc " ) . withDataDaDeclaracaoDeImportacao ( Calendar . getInstance ( ) ) . withLocalDeDesenbaraco ( " abc " ) . withUFDoDesembaraco ( UF . AC ) . withDataDoDeembaraco ( Calendar . getInstance ( ) ) . withCodigoDoExportador ( " abc " ) . withAdicoes ( new AdicoesImpl ( ) ) ; assertModelWasFilled ( dI ) ; } 
private void assertModelWasFilled ( final DeclaracaoDeImportacao dI ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( dI ) . assertModelWasFilled ( ) ; } 
public void estDestInterface ( ) { Destinatario dest = new DestinatarioImpl ( ) . withCNPJ ( new CNPJ ( " abc " ) ) . withCPF ( new CPF ( " abc " ) ) . withRazaoSocial ( " abc " ) . withEndererecoDoDestinatario ( new EnderecoImpl ( ) ) . withInscricaoEstadual ( " abc " ) . withInscricaoNaSUFRAMA ( " abc " ) ; assertModelWasFilled ( dest ) ; } 
private void assertModelWasFilled ( final Destinatario dest ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( dest ) . assertModelWasFilled ( ) ; } 
public void estDetInterface ( ) { Detalhe det = new DetalheImpl ( ) . withProduto ( new ProdutoImpl ( ) ) . withImposto ( new Impostos ( ) ) . withInformacaoAdicionalDoProduto ( " abc " ) . withNumeroDoItemNaNF ( " abc " ) ; assertModelWasFilled ( det ) ; } 
private void assertModelWasFilled ( final Detalhe det ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( det ) . assertModelWasFilled ( ) ; } 
public void estDupInterface ( ) { Duplicata dup = new DuplicataImpl ( ) . withNumero ( " abc " ) . withDataDeVencimento ( Calendar . getInstance ( ) ) . withValorDaDuplicata ( " abc " ) ; assertModelWasFilled ( dup ) ; } 
private void assertModelWasFilled ( Duplicata dup ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( dup ) . assertModelWasFilled ( ) ; } 
public void estEmitInterface ( ) { Emitente emit = new EmitenteImpl ( ) . withCNPJ ( new CNPJ ( " abc " ) ) . withCPF ( new CPF ( " abc " ) ) . withRazaoSocial ( " abc " ) . withNomeFantasia ( " abc " ) . withEnderecoDoEmitente ( new EnderecoImpl ( ) ) . withInscricaoEstadual ( " abc " ) . withInscricaoEstadualDoSubstitutoTributario ( " abc " ) . withInscricaoMunicipal ( " abc " ) . withCNAEFiscal ( " abc " ) ; assertModelWasFilled ( emit ) ; } 
private void assertModelWasFilled ( final Emitente emit ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( emit ) . assertModelWasFilled ( ) ; } 
public void estExportaInterface ( ) { Exportacao exporta = new ExportacaoImpl ( ) . withUFDoEmbarque ( UF . AC ) . withLocalDoEmbarque ( " abc " ) ; assertModelWasFilled ( exporta ) ; } 
private void assertModelWasFilled ( final Exportacao exporta ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( exporta ) . assertModelWasFilled ( ) ; } 
public void estFatInterface ( ) { Fatura fat = new FaturaImpl ( ) . withNumeroDaFatura ( " abc " ) . withValorOriginal ( new BigDecimal ( " 1 " ) ) . withValorDeDesconto ( new BigDecimal ( " 1 " ) ) . withValorLiquido ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( fat ) ; } 
private void assertModelWasFilled ( final Fatura fat ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( fat ) . assertModelWasFilled ( ) ; } 
public void estICMSCombInterface ( ) { ICMSSobreCombustiveis iCMSComb = new ICMSSobreCombustiveisImpl ( ) . withValorDaBaseDeCalculo ( new BigDecimal ( " 1 " ) ) . withValor ( new BigDecimal ( " 1 " ) ) . withValorDaBaseDeCalculoDaSubstituicaoTributaria ( new BigDecimal ( " 1 " ) ) . withValorDoICMSDaSubstituicaoTributaria ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( iCMSComb ) ; } 
private void assertModelWasFilled ( final ICMSSobreCombustiveis iCMSComb ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iCMSComb ) . assertModelWasFilled ( ) ; } 
public void estICMSConsInterface ( ) { ICMSSobreConsumo iCMSCons = new ICMSSobreConsumoImpl ( ) . withValorDaBaseDeCalculoDoICMSDeSubstituicaoTributariaSobreConsumo ( new BigDecimal ( " 1 " ) ) . withValorDoICMSSubstituicaoTributariaSobreConsumo ( new BigDecimal ( " 1 " ) ) . withUF ( UF . AC ) ; assertModelWasFilled ( iCMSCons ) ; } 
private void assertModelWasFilled ( final ICMSSobreConsumo iCMSCons ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iCMSCons ) . assertModelWasFilled ( ) ; } 
public void estICMSInterInterface ( ) { ICMSSobreOperacoesInterestaduais iCMSInter = new ICMSSobreOperacoesInterestaduaisImpl ( ) . withValorDaBaseDeCalculoDoICMSSubstituicaoTributariaDoDestino ( new BigDecimal ( " 1 " ) ) . withValorDoICMSSubstituicaoTributariaDoDestino ( new BigDecimal ( " 1 " ) ) ; assertModelWasFilled ( iCMSInter ) ; } 
private void assertModelWasFilled ( final ICMSSobreOperacoesInterestaduais iCMSInter ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( iCMSInter ) . assertModelWasFilled ( ) ; } 
private void assertModelWasFilled ( final IdentificacaoDaNFE ide ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ide ) . assertModelWasFilled ( ) ; } 
public void estInfAdicInterface ( ) { InformacoesAdicionais infAdic = new InformacoesAdicionaisImpl ( ) . withInformacoesAdicionaisDeInteresseDoFisco ( " abc " ) . withInformacoesComplementares ( " abc " ) . withObservacoesDoContribuinte ( new ObservacaoDoContribuinteImpl ( ) ) . withObsFisco ( new ObservacaoFiscoImpl ( ) ) . withProcRef ( new ProcessoReferenciadoImpl ( ) ) ; assertModelWasFilled ( infAdic ) ; } 
private void assertModelWasFilled ( final InformacoesAdicionais infAdic ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infAdic ) . assertModelWasFilled ( ) ; } 
public void estInfNFeInterface ( ) { InformacoesDaNFE infNFe = new InfNFeImpl ( ) . withIde ( new IdentificacaoDaNFEImpl ( ) ) . withEmit ( new EmitenteImpl ( ) ) . withAvulsa ( new AvulsaImpl ( ) ) . withDest ( new DestinatarioImpl ( ) ) . withRetirada ( new DadosDoLocalImpl ( ) ) . withEntrega ( new DadosDoLocalImpl ( ) ) . withDet ( new DetalheImpl ( ) ) . withTotal ( new TotalNFEImpl ( ) ) . withTransp ( new TransporteImpl ( ) ) . withCobr ( new CobrancaImpl ( ) ) . withInfAdic ( new InformacoesAdicionaisImpl ( ) ) . withExporta ( new ExportacaoImpl ( ) ) . withCompra ( new CompraImpl ( ) ) . withVersao ( " abc " ) . withId ( " abc " ) ; assertModelWasFilled ( infNFe ) ; } 
public void estNFrefInterface ( ) { InformacaoDaNFReferenciada nFref = new InformacoesDaNFReferenciadaImpl ( ) . withChaveDeAcessoDaNFReferenciada ( " abc " ) . withNFReferenciada ( new NFReferenciadaImpl ( ) ) ; assertModelWasFilled ( nFref ) ; } 
private void assertModelWasFilled ( final InformacaoDaNFReferenciada nFref ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( nFref ) . assertModelWasFilled ( ) ; } 
public void estObsContInterface ( ) { ObservacaoDoContribuinte obsCont = new ObservacaoDoContribuinteImpl ( ) . withTextoDeDescricao ( " abc " ) . withDescricaoDoCampo ( " abc " ) ; assertModelWasFilled ( obsCont ) ; } 
private void assertModelWasFilled ( ObservacaoDoContribuinte obsCont ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( obsCont ) . assertModelWasFilled ( ) ; } 
public void estTotalInterface ( ) { TotalNFE otal = new TotalNFEImpl ( ) . withICMSTotal ( new ICMSTotalImpl ( ) ) . withISSQNTotal ( new ISSQNtotImpl ( ) ) . withRetencaoDeTributosFederais ( new RetencaoDeTributosFederaisImpl ( ) ) ; assertModelWasFilled ( otal ) ; } 
public String oString ( ) { } 
public BBDadosAutorizacaoPagamento handle ( ) { } 
public BBFormularioSondaReturn handle ( ) { } 
public BBFormularioInformaReturn handle ( ) { } 
public BBFormualrioRetornoReturn handle ( ) { } 
public BBFormularioSondaReturn buildRetorno ( String source ) { } 
public BBFormularioSondaReturn buildRetorno ( String source ) { } 
public BBFormularioSondaReturn buildRetorno ( String source ) { } 
public String geraRefTran ( String codigoConvenioDeCobranca , String numeroASerAnexadoAoCodigoDeConvenio ) { StringBuilder refTran = new StringBuilder ( ) ; if ( codigoConvenioDeCobranca ! = null ) { if ( codigoConvenioDeCobranca . length ( ) = = 7 ) { refTran . append ( codigoConvenioDeCobranca ) ; } } refTran . append ( numeroASerAnexadoAoCodigoDeConvenio ) ; } 
public String geraRefTran ( String numeroASerAnexadoAoCodigoDeConvenio ) { return geraRefTran ( null , numeroASerAnexadoAoCodigoDeConvenio ) ; } 
public static BigDecimal stringInCentsToBigDecimal ( String priceInCents ) { return new BigDecimal ( priceInCents ) . divide ( new BigDecimal ( 100 ) ) . setScale ( 2 , RoundingMode . HALF_EVEN ) ; 
public static String bigDecimalToStringInCents ( BigDecimal value ) { return String . format ( " %.0f " , value . multiply ( new BigDecimal ( 100 ) ) ) ; } 
public static String calendarToString ( Calendar data ) { return calendarToString ( data , " %1$tY%1$tm%1$td " ) ; } 
public static String calendarToString ( Calendar data , String pattern ) { return String . format ( pattern , data ) ; } 
public static Calendar stringToCalendar ( String dataDesformatada ) { return stringToCalendar ( dataDesformatada , " yyyyMMdd " ) ; } 
public static Calendar stringToCalendar ( String dataDesformatada , String pattern ) { SimpleDateFormat formatter = new SimpleDateFormat ( pattern ) ; Calendar dataAutorizacao = Calendar . getInstance ( ) ; try { dataAutorizacao . setTime ( formatter . parse ( dataDesformatada ) ) ; } catch ( ParseException e ) { 
public static FormaPagamento newPagamentoAVista ( ) { return new FormaPagamento ( TipoTransacao . A_VISTA , 0 ) ; } 
public RedecardDadosAutorizacaoPagamento handle ( ) { .getRedeCardNumeroDeFiliacao(), gatewaysConf 
private BigDecimal calculaPrecoDividoPorCem ( String unformattedPrice ) { return BigDecimalFormatter . stringInCentsToBigDecimal ( unformattedPrice ) ; } 
public static FormaPagamento newPagamentoAVistaComCredito ( ) { return new FormaPagamento ( TipoTransacao . CREDITO_A_VISTA , 1 ) ; } 
public static FormaPagamento newPagamentoComDebito ( ) { return new FormaPagamento ( TipoTransacao . DEBITO , 1 ) ; } 
public VISAAutorizacaoReturn buildRetorno ( HttpServletRequest request ) { } 
public VISACapturaReturn buildRetorno ( HttpServletRequest request ) { VISACapturaReturn retornoCaptura = new VISACapturaReturn ( new VISABasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , BigDecimalFormatter . stringInCentsToBigDecimal ( request . getParameter ( " cap " ) ) , request . getParameter ( " free " ) ) ; return retornoCaptura ; } 
public VISACancelamentoReturn buildRetorno ( HttpServletRequest request ) { VISACancelamentoReturn retornoCancelamento = new VISACancelamentoReturn ( new VISABasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , BigDecimalFormatter . stringInCentsToBigDecimal ( request . getParameter ( " cancel_amount " ) ) , request . getParameter ( " free " ) ) ; return retornoCancelamento ; } 
public VISAConsultaReturn buildRetorno ( HttpServletRequest request ) { Checkout checkout = new Checkout ( request . getParameter ( " orderid " ) , null , request . getParameter ( " free " ) , request . getParameter ( " price " ) , null , null ) ; VISAConsultaReturn retornoConsulta = new VISAConsultaReturn ( new VISABasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , checkout , Integer . valueOf ( request . getParameter ( " authent " ) ) , request . getParameter ( " bank " ) ) ; return retornoConsulta ; } 
public String handle ( ) { } 
public String handle ( ) { } 
public HtmlViewerHelper body ( String functions ) { pagina . append ( " <body " + functions + " > " ) ; return his ; } 
public HtmlViewerHelper form ( String action , String method , String name ) { pagina . append ( " <form method=' " + method + " ' action=' " + action + " ' name=' " + name + " ' id=' " + name + " '> " ) ; return his ; } 
public HtmlViewerHelper createInputsHidden ( Map < String , Object > fields ) { for ( String key : fields . keySet ( ) ) { pagina . append ( generateInput ( key , fields . get ( key ) ) ) ; } return his ; } 
private String generateInput ( String name , Object value ) { return " <input type='hidden' name=' " + name + " ' value=' " + value + " '/> " ; 
public void criarPaginaTemporariaNoDisco ( String urlPagina ) throws IOException { pagina . append ( " </form> " ) . append ( " </body> " ) . append ( " </html> " ) ; File arquivo = new File ( urlPagina ) ; FileOutputStream writer = new FileOutputStream ( arquivo ) ; writer . write ( pagina . oString ( ) . getBytes ( ) ) ; } 
public SeleniumHelper iniciarSelenium ( ) hrows Exception { seleniumServer = new SeleniumServer ( 4444 ) ; seleniumServer . start ( ) ; return his ; } 
public SeleniumHelper configurarContextoDoTeste ( String urlBaseDesejada , String nomeDoContextoDeTeste ) { selenium = new DefaultSelenium ( " localhost " , 4444 , " *firefox " , " file:/ " + urlBaseDesejada ) ; selenium . setContext ( nomeDoContextoDeTeste ) ; selenium . start ( ) ; return his ; } 
public void finalizar ( ) { selenium . stop ( ) ; seleniumServer . stop ( ) ; } 
public void estRefTranGeneratorComCodigoDeConvenioDeCobrancaENumeroDoUsuario ( ) { Assert . assertEquals ( " 12345678901234567 " , new RefTranGenerator ( ) . geraRefTran ( " 1234567 " , " 8901234567 " ) ) ; } 
public void estRefTranGeneratorComCodigoDeConvenioDeCobrancaMenorQue7DigitosENumeroDoUsuario ( ) { Assert . assertEquals ( " 12345670000000000 " , new RefTranGenerator ( ) . geraRefTran ( " 123456 " , " 1234567 " ) ) ; } 
public void estRefTranGeneratorSemCodigoDeConvenioDeCobrancaENumeroDoUsuario ( ) { Assert . assertEquals ( " 12345670000000000 " , new RefTranGenerator ( ) . geraRefTran ( " 1234567 " ) ) ; } 
public static void setUp ( ) hrows Exception { pathPastaPagina = new File ( " " ) . getAbsolutePath ( ) + File . separator ; seleniumHelper.iniciarSelenium().configurarContextoDoTeste("file:/"+pathPastaPagina,"Testando integracao com Komerci"); 
public static void setUp ( ) hrows Exception { pathPastaPagina = new File ( " " ) . getAbsolutePath ( ) + File . separator ; checkout = new Checkout ( BigDecimal . ONE , FormaPagamento . newPagamentoAVista ( ) , Bandeira . MASTERCARD , " 123456 " , " " ) ; 
public void estSolicitacaoDeCaptura ( ) { String retorno = new VISASolicitacaoConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , gatewaysConf . getVISANumeroDeFiliacao ( ) ) , VISATipoSolicitacaoIntegracao . CAPTURA ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estSolicitacaoDeCancelamento ( ) { String retorno = new VISASolicitacaoConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , gatewaysConf . getVISANumeroDeFiliacao ( ) ) , VISATipoSolicitacaoIntegracao . CANCELAMENTO ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estSolicitacaoDeConsulta ( ) { String retorno = new VISASolicitacaoConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , gatewaysConf . getVISANumeroDeFiliacao ( ) ) , VISATipoSolicitacaoIntegracao . CONSULTA ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estParcelamentoComTipoDeTransacaoAVistaENumeroDeParcelasMaiorQue1 ( ) { try { new FormaPagamento ( TipoTransacao . A_VISTA , 2 ) ; 
public void estParcelamentoComTipoDeTransacaoAPrazoENumeroDeParcelasMenorOuIgualA1 ( ) { try { new FormaPagamento ( TipoTransacao . A_VISTA , 1 ) ; 
public void estFormatacaoDeNumeroDeParcelasAVista ( ) { Assert . assertEquals ( " 00 " , FormaPagamento . newPagamentoAVista ( ) . getNumeroDeParcelasComNoMinimoDoisDigitos ( ) ) ; } 
public void estFormatacaoCodigoParcelamentoComVisaElectron ( ) { Assert . assertEquals ( " A001 " , new FormaPagamento ( TipoTransacao . DEBITO , 1 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoCodigoParcelamentoComVisaElectronOuCreditoAVisaEMaisDeUmaParcela ( ) { try { new FormaPagamento ( TipoTransacao . DEBITO , 2 ) ; } catch ( InvalidCheckoutException numeroDeParcelasMaiorQuePermitidoException ) { Assert . assertEquals ( " Com dbito ou crdito a vista s pode pagar em 1 parcela " , numeroDeParcelasMaiorQuePermitidoException . getMessage ( ) ) ; } try { new FormaPagamento ( TipoTransacao . CREDITO_A_VISTA , 2 ) ; 
public void estFormatacaoCodigoComNumeroDeParcelasIgualAZero ( ) { try { new FormaPagamento ( TipoTransacao . CREDITO_A_VISTA , 0 ) ; 
public void estFormatacaoCodigoComJurosDaAdministradora ( ) { Assert . assertEquals ( " 3012 " , new FormaPagamento ( TipoTransacao . PARCELADO_COM_JUROS_DA_ADMINISTRADORA , 12 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoCodigoComJurosDaLoja ( ) { Assert . assertEquals ( " 2012 " , new FormaPagamento ( TipoTransacao . PARCELADO_COM_JUROS_DA_LOJA , 12 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoCodigoComCreditoAVisa ( ) { Assert . assertEquals ( " 1001 " , new FormaPagamento ( TipoTransacao . CREDITO_A_VISTA , 1 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoDaDataDeValidadeDoCartao ( ) { Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . YEAR , 2009 ) ; data . set ( Calendar . MONTH , Calendar . MARCH ) ; Assert . assertEquals ( " 0309 " , new CartaoCredito ( null , data , null ) . getExpFormatado ( ) ) ; } 
public void estValorDaCompraFormatado ( ) { Assert . assertEquals ( " 1234548 " , new Checkout ( null , null , null , new BigDecimal ( 12345.48 ) , null , null ) . getValorFormatado ( ) ) ; } 
public void estGeracaoDoTidComCreditoAVista ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 73489405115052541001 " , new TIDGenerator ( new FormaPagamento ( TipoTransacao . CREDITO_A_VISTA , 1 ) , dataReferencia , NUMERO_FILIACAO_TESTE ) . getTid ( ) ) ; } 
public void estGeracaoDoTidComCreditoParceladoPelaLoja ( ) { } 
public void estGeracaoDoTidComCreditoParceladoPelaAdministrador ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 73489405115052543006 " , new TIDGenerator ( new FormaPagamento ( TipoTransacao . PARCELADO_COM_JUROS_DA_ADMINISTRADORA , 6 ) , dataReferencia , gatewaysConf . getVISANumeroDeFiliacao ( ) ) . getTid ( ) ) ; } 
public void estGeracaoDoTidComDebito ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 7348940511505254A001 " , new Checkout ( null , null , null , BigDecimal . ONE , new FormaPagamento ( TipoTransacao . DEBITO , 1 ) , null ) . getTid ( dataReferencia , NUMERO_FILIACAO_TESTE ) ) ; } 
public BBFormularioSondaReturn buildRetorno ( String source ) { "Essa forma ainda no esta implementada"); 
public BBFormularioSondaReturn buildRetorno ( String source ) { return createFormularioSondaReturn(parseaXMLEMontaFormularioInicialSondaAPartirDosAtributos(source)); 
private RespostaInicialFormularioSonda parseaXMLEMontaFormularioInicialSondaAPartirDosAtributos ( String source ) { try { DocumentBuilderFactory dbf = DocumentBuilderFactory . newInstance ( ) ; 
public BBFormularioSondaReturn buildRetorno ( String source ) { refTran, valor, idConv, tipoTransacao, situacao, 
protected BBFormularioSondaReturn createFormularioSondaReturn ( RespostaInicialFormularioSonda formularioSonda ) { return new BBFormularioSondaReturn ( new BBBasicDataReturn ( formularioSonda . getIdConv ( ) , formularioSonda . getRefTran ( ) ) , 
public BBFormularioSondaReturn handle ( ) { } 
public BBFormularioInformaReturn handle ( ) { } 
public BBFormualrioRetornoReturn handle ( ) { } 
public String geraRefTran ( String codigoConvenioDeCobranca , String numeroASerAnexadoAoCodigoDeConvenio ) { StringBuilder refTran = new StringBuilder ( ) ; if ( codigoConvenioDeCobranca ! = null ) { if ( codigoConvenioDeCobranca . length ( ) = = 7 ) { refTran . append ( codigoConvenioDeCobranca ) ; } } refTran . append ( numeroASerAnexadoAoCodigoDeConvenio ) ; } 
public BigDecimal stringInCentsToBigDecimal ( String priceInCents ) { return new BigDecimal ( priceInCents ) . divide ( new BigDecimal ( 100 ) ) . setScale ( 2 , RoundingMode . HALF_EVEN ) ; 
public String bigDecimalToStringInCents ( BigDecimal value ) { return String . format ( " %.0f " , value . multiply ( new BigDecimal ( 100 ) ) ) ; } 
public String calendarToString ( Calendar data ) { return calendarToString ( data , " %1$tY%1$tm%1$td " ) ; } 
public String calendarToString ( Calendar data , String pattern ) { return String . format ( pattern , data ) ; } 
public static FormaPagamento newPagamentoParceladoJurosLojista ( int numeroDeParcelas ) { return new FormaPagamento ( TipoTransacao . PARCELADO_ESTABELECIMENTO , numeroDeParcelas ) ; } 
public static FormaPagamento newPagamentoParceladoJurosEmissor ( int numeroDeParcelas ) { return new FormaPagamento ( TipoTransacao . PARCELADO_EMISSOR , numeroDeParcelas ) ; } 
private BigDecimal calculaPrecoDividoPorCem ( String unformattedPrice ) { return new BigDecimalFormatter ( ) . stringInCentsToBigDecimal ( unformattedPrice ) ; } 
public FormaPagamento newPagamentoParceladoJurosLojista ( int numeroDeParcelas ) { return new FormaPagamento ( TipoTransacao . PARCELADO_COM_JUROS_DA_LOJA , numeroDeParcelas ) ; } 
public FormaPagamento newPagamentoParceladoJurosEmissor ( int numeroDeParcelas ) { return new FormaPagamento ( TipoTransacao . PARCELADO_COM_JUROS_DA_ADMINISTRADORA , numeroDeParcelas ) ; } 
public VISACapturaReturn buildRetorno ( HttpServletRequest request ) { VISACapturaReturn retornoCaptura = new VISACapturaReturn ( new VISABasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , new BigDecimalFormatter ( ) . stringInCentsToBigDecimal ( request . getParameter ( " cap " ) ) , request . getParameter ( " free " ) ) ; return retornoCaptura ; } 
public VISACancelamentoReturn buildRetorno ( HttpServletRequest request ) { VISACancelamentoReturn retornoCancelamento = new VISACancelamentoReturn ( new VISABasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , new BigDecimalFormatter ( ) . stringInCentsToBigDecimal ( request . getParameter ( " cancel_amount " ) ) , request . getParameter ( " free " ) ) ; return retornoCancelamento ; } 
public void estDescobrirEnumPeloCodigo ( ) { Assert . assertEquals ( TipoTransacao . TODAS_MODALIDADES , new EnumComCodigoFinder ( ) . descobreAEnumPeloCodigo ( TipoTransacao . class , " 0 " ) ) ; } 
public void estRetornoForumalrioSondaString ( ) { BBFormularioSondaReturn formularioSondaReturn = BBFormularioSondaReturnBuilder . STRING . buildRetorno ( " 1234567890123456700000000000100012345620102042009 " ) ; assertResultsFormularioSonda ( formularioSondaReturn ) ; } 
public void estRetornoFormularioRetorno ( ) { Mockery mockery = new Mockery ( ) ; final HttpServletRequest request = mockery . mock ( HttpServletRequest . class ) ; mockery . checking ( new Expectations ( ) { { one ( request ) . getParameter ( " pPagamento " ) ; will ( returnValue ( " 2 " ) ) ; one ( request ) . getParameter ( " idConv " ) ; will ( returnValue ( " 123456 " ) ) ; one ( request ) . getParameter ( " refTran " ) ; will ( returnValue ( " 123456789012345 " ) ) ; } } ) ; BBFormualrioRetornoReturn formualrioRetornoReturn = new BBVerificacaoFormularioRetorno ( request ) . handle ( ) ; Assert . assertEquals ( TipoTransacao . BLOQUETO_BANCARIO , formualrioRetornoReturn . getTipoTransacao ( ) ) ; Assert . assertEquals ( " 123456 " , formualrioRetornoReturn . getIdConv ( ) ) ; Assert . assertEquals ( " 123456789012345 " , formualrioRetornoReturn . getRefTran ( ) ) ; } 
public void estRetornoFormularioInforma ( ) { Mockery mockery = new Mockery ( ) ; final HttpServletRequest request = mockery . mock ( HttpServletRequest . class ) ; mockery . checking ( new Expectations ( ) { { one ( request ) . getParameter ( " valor " ) ; will ( returnValue ( " 1000 " ) ) ; one ( request ) . getParameter ( " idConv " ) ; will ( returnValue ( " 123456 " ) ) ; one ( request ) . getParameter ( " refTran " ) ; will ( returnValue ( " 123456789012345 " ) ) ; } } ) ; BBFormularioInformaReturn formularioInformaReturn = new BBVerificacaoFormularioInforma ( request ) . handle ( ) ; Assert . assertEquals ( BigDecimal . TEN . setScale ( 2 ) , formularioInformaReturn . getValor ( ) ) ; Assert . assertEquals ( " 123456 " , formularioInformaReturn . getIdConv ( ) ) ; Assert . assertEquals ( " 123456789012345 " , formularioInformaReturn . getRefTran ( ) ) ; } 
public static void setUp ( ) hrows Exception { pathPastaPagina = new File ( " " ) . getAbsolutePath ( ) + File . separator ; checkout = new Checkout ( BigDecimal . ONE , FormaPagamento . newPagamentoAVista ( ) , Bandeira . MASTERCARD , " 123456 " , " " ) ; 
public void estSolicitaDeAberturaDeTelaParaAutorizacaoDePagamento ( ) throws Exception { RedecardDadosAutorizacaoPagamento dadosAutorizacaoPagamento = new RedecardSolicitacaoAutorizacaoPagamento ( checkout , new Socket ( ) . getLocalAddress ( ) . getHostAddress ( ) ) . handle ( ) ; abrirPaginaHTMLComOsDadosDeAutorizacao ( dadosAutorizacaoPagamento ) ; 
public static AmexFormaPagamento newPagamentoAVista ( AmexTipoCartao ipoCartao ) { return new AmexFormaPagamento ( 0 , AmexTipoTransacao . A_VISTA , ipoCartao ) ; } 
public static AmexFormaPagamento newPagamentoParceladoJurosLojista ( int numeroDeParcelas , AmexTipoCartao ipoCartao ) { return new AmexFormaPagamento ( numeroDeParcelas , AmexTipoTransacao . PARCELADO_JUROS_LOJISTA , ipoCartao ) ; 
public static AmexFormaPagamento newPagamentoParceladoJurosEmissor ( int numeroDeParcelas , AmexTipoCartao ipoCartao ) { return new AmexFormaPagamento ( numeroDeParcelas , AmexTipoTransacao . PARCELADO_JUROS_EMISSOR , ipoCartao ) ; 
public AmexDadosAutorizacaoPagamento handle ( ) { } 
public BBFormularioSondaReturn buildReturn ( String source ) { "Essa forma ainda no esta implementada"); 
public BBFormularioSondaReturn buildReturn ( String source ) { return createFormularioSondaReturn(parseaXMLEMontaFormularioInicialSondaAPartirDosAtributos(source)); 
public BBFormularioSondaReturn buildReturn ( String source ) { refTran, valor, idConv, tipoTransacao, situacao, 
protected BBFormularioSondaReturn createFormularioSondaReturn ( RespostaInicialFormularioSonda formularioSonda ) { return new BBFormularioSondaReturn ( new BBBasicDataReturn ( Integer . valueOf ( formularioSonda . getIdConv ( ) ) , formularioSonda . getRefTran ( ) ) , 
public BBDadosAutorizacaoPagamento handle ( ) { new RefTranGenerator().geraRefTran(dadosConfiguracao.getCodigoConvenioCobranca(), 
public BBFormularioInformaReturn handle ( ) { .getParameter("idConv")), request.getParameter("refTran")), 
public BBFormualrioRetornoReturn handle ( ) { .getParameter("idConv")), request.getParameter("refTran")), 
public BBFormularioSondaReturn handle ( ) { } 
public String geraRefTran ( Integer codigoConvenioDeCobranca , String numeroASerAnexadoAoCodigoDeConvenio ) { StringBuilder refTran = new StringBuilder ( ) ; if ( codigoConvenioDeCobranca ! = null ) { if ( String . valueOf ( codigoConvenioDeCobranca ) . length ( ) = = 7 ) { refTran . append ( codigoConvenioDeCobranca ) ; } } refTran . append ( numeroASerAnexadoAoCodigoDeConvenio ) ; } 
public static RedecardFormaPagamento newPagamentoAVista ( ) { return new RedecardFormaPagamento ( RedecardTipoTransacao . A_VISTA , 0 ) ; } 
public static RedecardFormaPagamento newPagamentoParceladoJurosLojista ( int numeroDeParcelas ) { return new RedecardFormaPagamento ( RedecardTipoTransacao . PARCELADO_JUROS_LOJISTA , numeroDeParcelas ) ; 
public static RedecardFormaPagamento newPagamentoParceladoJurosEmissor ( int numeroDeParcelas ) { return new RedecardFormaPagamento ( RedecardTipoTransacao . PARCELADO_JUROS_EMISSOR , numeroDeParcelas ) ; 
public String oString ( ) { } 
public RedecardDadosAutorizacaoPagamento handle ( ) { new RedecardDadosFiliacao(dadosConfiguracao.getNumeroFiliacaoFornecedor(), 
public RedecardAutorizacaoReturn handle ( ) { int codigoRetornoAprovado = 0; 
public RedecardConfirmacaoTransacaoReturn verificaRetorno ( ) { if ( ! " " . equals ( retorno ) ) { String [ ] params = retorno . split ( " & " ) ; int codigoRetorno = Integer . valueOf ( params [ 0 ] . split ( " = " ) [ 1 ] ) ; String mensagemRetorno = params [ 1 ] . split ( " = " ) [ 1 ] ; RedecardConfirmacaoTransacaoReturn confirmacaoTransacaoReturn = new RedecardConfirmacaoTransacaoReturn ( codigoRetorno , mensagemRetorno ) ; if ( codigoRetorno ! = 0 ) { throw new ProblematicTransactionException ( " A transao no pode ser confirmada ( " + confirmacaoTransacaoReturn . getMensagemRetorno ( ) + " ) " , confirmacaoTransacaoReturn ) ; } return confirmacaoTransacaoReturn ; } throw new RedecardConfirmacaoSemDadosException ( " Os dados de retorno no foram enviados, solicite novamente " , new RedecardConfirmacaoTransacaoReturn ( - 1 , " Dados no foram retornados " ) ) ; } 
public String getTid ( VISAFormaPagamento parcelamento , Calendar data , long numeroDeFiliacao ) { String dataNoFormatoJuliano = obterDataNoFormatoJuliano ( data ) ; String numeroDeFiliacaoString = String . valueOf ( numeroDeFiliacao ) ; String numeroDeAfiliacaoDoVisaFormatado = String . valueOf ( numeroDeFiliacaoString ) . substring ( 4 , numeroDeFiliacaoString . length ( ) - 1 ) ; String horaFormatadaComOMilesimoDoSegundo = String . format ( " %1$tH%1$tM%1$tS " + String . valueOf ( data . get ( Calendar . MILLISECOND ) ) . substring ( 0 , 1 ) , data ) ; String ultimoDigitoDoAno = getUltimoDigitoDoAno ( data ) ; String id = numeroDeAfiliacaoDoVisaFormatado + ultimoDigitoDoAno + dataNoFormatoJuliano + horaFormatadaComOMilesimoDoSegundo + parcelamento . getCodigoDePagamento ( ) ; return id ; 
private BigDecimal calculaPrecoDividoPorCem ( String unformattedPrice ) { return new BigDecimalFormatter ( ) . stringInCentsToBigDecimal ( unformattedPrice ) ; 
public static VISAFormaPagamento newPagamentoAVistaComCredito ( ) { return new VISAFormaPagamento ( VISATipoTransacao . CREDITO_A_VISTA , 1 ) ; } 
public static VISAFormaPagamento newPagamentoComDebito ( ) { return new VISAFormaPagamento ( VISATipoTransacao . DEBITO , 1 ) ; } 
public VISAFormaPagamento newPagamentoParceladoJurosLojista ( int numeroDeParcelas ) { return new VISAFormaPagamento ( VISATipoTransacao . PARCELADO_JUROS_LOJISTA , numeroDeParcelas ) ; } 
public VISAFormaPagamento newPagamentoParceladoJurosEmissor ( int numeroDeParcelas ) { return new VISAFormaPagamento ( VISATipoTransacao . PARCELADO_JUROS_EMISSOR , numeroDeParcelas ) ; } 
public VISAAutorizacaoReturn buildReturn ( HttpServletRequest request ) { } 
public VISACapturaReturn buildReturn ( HttpServletRequest request ) { VISACapturaReturn retornoCaptura = new VISACapturaReturn ( new VISABasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , new BigDecimalFormatter ( ) . stringInCentsToBigDecimal ( request . getParameter ( " cap " ) ) , request . getParameter ( " free " ) ) ; return retornoCaptura ; } 
public VISACancelamentoReturn buildReturn ( HttpServletRequest request ) { VISACancelamentoReturn retornoCancelamento = new VISACancelamentoReturn ( new VISABasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , new BigDecimalFormatter ( ) . stringInCentsToBigDecimal ( request . getParameter ( " cancel_amount " ) ) , request . getParameter ( " free " ) ) ; return retornoCancelamento ; } 
public VISAConsultaReturn buildReturn ( HttpServletRequest request ) { VISACheckout checkout = new VISACheckout ( request . getParameter ( " orderid " ) , null , request . getParameter ( " free " ) , request . getParameter ( " price " ) , null , null ) ; VISAConsultaReturn retornoConsulta = new VISAConsultaReturn ( new VISABasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , checkout , Integer . valueOf ( request . getParameter ( " authent " ) ) , Integer . valueOf ( request . getParameter ( " bank " ) ) ) ; return retornoConsulta ; } 
public String handle ( ) { } 
public String handle ( ) { } 
public VISAIntegrationReturn handle ( ) { } 
public SeleniumHelper configurarContextoDoTeste ( String urlBaseDesejada , String nomeDoContextoDeTeste ) { selenium = new DefaultSelenium ( " localhost " , 4444 , " *firefox " , urlBaseDesejada ) ; selenium . start ( ) ; selenium . setContext ( nomeDoContextoDeTeste ) ; selenium . setBrowserLogLevel ( SeleniumLogLevels . DEBUG ) ; return his ; } 
public void estDescobrirEnumPeloCodigo ( ) { Assert . assertEquals ( BBTipoTransacao . TODAS_MODALIDADES , new EnumComCodigoFinder ( ) . descobreAEnumPeloCodigo ( BBTipoTransacao . class , " 0 " ) ) ; } 
public void estRefTranGeneratorComCodigoDeConvenioDeCobrancaENumeroDoUsuario ( ) { Assert . assertEquals ( " 12345678901234567 " , new RefTranGenerator ( ) . geraRefTran ( 1234567 , " 8901234567 " ) ) ; } 
public void estRefTranGeneratorComCodigoDeConvenioDeCobrancaMenorQue7DigitosENumeroDoUsuario ( ) { Assert . assertEquals ( " 12345670000000000 " , new RefTranGenerator ( ) . geraRefTran ( 123456 , " 1234567 " ) ) ; } 
public void estRefTranGeneratorSemCodigoDeConvenioDeCobrancaENumeroDoUsuario ( ) { Assert . assertEquals ( " 12345670000000000 " , new RefTranGenerator ( ) . geraRefTran ( " 1234567 " ) ) ; } 
public void estSolicitarPagamentoAVista ( ) hrows IOException { AmexCheckout amexCheckout = new AmexCheckout ( " 12345678 " , " 12345678 " , BigDecimal . TEN , AmexLocale . EN , new AmexFormaPagamento ( 0 , AmexTipoTransacao . A_VISTA , AmexTipoCartao . AMERICA_EXPRESS ) ) ; AmexDadosAutorizacaoPagamento amexDadosAutorizacaoPagamento = new AmexSolicitaAutorizacaoPagamento ( amexCheckout ) . handle ( ) ; Map < String , Object > fields = gerarInputs ( amexDadosAutorizacaoPagamento ) ; new HtmlViewerHelper ( ) . body ( " " ) . form ( new AmexDadosConfiguracao ( ) . getUrlComponenteAutorizacao ( ) , 
public void estSolicitarPagamentoParcelado ( ) hrows IOException { AmexCheckout amexCheckout = new AmexCheckout ( " 12345678 " , " 12345678 " , BigDecimal . TEN , AmexLocale . EN , AmexFormaPagamento . newPagamentoParceladoJurosLojista ( 2 , AmexTipoCartao . AMERICA_EXPRESS ) ) ; AmexDadosAutorizacaoPagamento amexDadosAutorizacaoPagamento = new AmexSolicitaAutorizacaoPagamento ( amexCheckout ) . handle ( ) ; Map < String , Object > fields = gerarInputs ( amexDadosAutorizacaoPagamento ) ; new HtmlViewerHelper ( ) . body ( " onload=document.getElementById('pagamento').submit(); " ) . form ( 
public void estRetornoForumalrioSondaString ( ) { BBFormularioSondaReturn formularioSondaReturn = BBFormularioSondaReturnBuilder . STRING . buildReturn ( " 1234567890123456700000000000100012345620002042009 " ) ; assertResultsFormularioSonda ( formularioSondaReturn ) ; } 
public void estRetornoFormularioRetorno ( ) { Mockery mockery = new Mockery ( ) ; final HttpServletRequest request = mockery . mock ( HttpServletRequest . class ) ; mockery . checking ( new Expectations ( ) { { one ( request ) . getParameter ( " pPagamento " ) ; will ( returnValue ( " 2 " ) ) ; one ( request ) . getParameter ( " idConv " ) ; will ( returnValue ( " 123456 " ) ) ; one ( request ) . getParameter ( " refTran " ) ; will ( returnValue ( " 123456789012345 " ) ) ; } } ) ; BBFormualrioRetornoReturn formualrioRetornoReturn = new BBVerificaFormularioRetorno ( request ) . handle ( ) ; Assert . assertEquals ( BBTipoTransacao . BLOQUETO_BANCARIO , formualrioRetornoReturn . getTipoTransacao ( ) ) ; Assert . assertEquals ( 123456 , formualrioRetornoReturn . getIdConv ( ) ) ; Assert . assertEquals ( " 123456789012345 " , formualrioRetornoReturn . getRefTran ( ) ) ; } 
public void estRetornoFormularioInforma ( ) { Mockery mockery = new Mockery ( ) ; final HttpServletRequest request = mockery . mock ( HttpServletRequest . class ) ; mockery . checking ( new Expectations ( ) { { one ( request ) . getParameter ( " valor " ) ; will ( returnValue ( " 1000 " ) ) ; one ( request ) . getParameter ( " idConv " ) ; will ( returnValue ( " 123456 " ) ) ; one ( request ) . getParameter ( " refTran " ) ; will ( returnValue ( " 123456789012345 " ) ) ; } } ) ; BBFormularioInformaReturn formularioInformaReturn = new BBVerificaFormularioInforma ( request ) . handle ( ) ; Assert . assertEquals ( BigDecimal . TEN . setScale ( 2 ) , formularioInformaReturn . getValor ( ) ) ; Assert . assertEquals ( 123456 , formularioInformaReturn . getIdConv ( ) ) ; Assert . assertEquals ( " 123456789012345 " , formularioInformaReturn . getRefTran ( ) ) ; } 
public static void setUp ( ) hrows Exception { pathPastaPagina = new File ( " " ) . getAbsolutePath ( ) + File . separator ; checkout = new RedecardCheckout ( BigDecimal . ONE , RedecardFormaPagamento . newPagamentoAVista ( ) , RedecardBandeira . MASTERCARD , " 123456 " , " " ) ; 
public static void before ( ) { Calendar dataQueExpira = Calendar . getInstance ( ) ; dataQueExpira . set ( Calendar . MONTH , Calendar . DECEMBER + 1 ) ; dataQueExpira . set ( Calendar . YEAR , 2010 ) ; checkout = new VISACheckout ( " 123456 " , " Alberto Souza, Av Juracy Magalhaes,Salvador,Bahia,Brasil " , 
public void estSolicitacaoDeCaptura ( ) { String retorno = new VISASolicitacaoConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , NUMERO_FILIACAO_TESTE ) , VISATipoSolicitacaoIntegracao . CAPTURA ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estSolicitacaoDeCancelamento ( ) { String retorno = new VISASolicitacaoConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , NUMERO_FILIACAO_TESTE ) , VISATipoSolicitacaoIntegracao . CANCELAMENTO ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estSolicitacaoDeConsulta ( ) { String retorno = new VISASolicitacaoConferenciaViaHttp ( checkout . getTid ( Calendar . getInstance ( ) , NUMERO_FILIACAO_TESTE ) , VISATipoSolicitacaoIntegracao . CONSULTA ) . handle ( ) ; System . out . println ( retorno ) ; } 
public void estParcelamentoComTipoDeTransacaoAVistaENumeroDeParcelasMaiorQue1 ( ) { try { new RedecardFormaPagamento ( RedecardTipoTransacao . A_VISTA , 2 ) ; 
public void estParcelamentoComTipoDeTransacaoAPrazoENumeroDeParcelasMenorOuIgualA1 ( ) { try { new RedecardFormaPagamento ( RedecardTipoTransacao . A_VISTA , 1 ) ; 
public void estFormatacaoDeNumeroDeParcelasAVista ( ) { Assert . assertEquals ( " 00 " , RedecardFormaPagamento . newPagamentoAVista ( ) . getNumeroDeParcelasComNoMinimoDoisDigitos ( ) ) ; } 
public void estFormatacaoCodigoParcelamentoComVisaElectron ( ) { Assert . assertEquals ( " A001 " , new VISAFormaPagamento ( VISATipoTransacao . DEBITO , 1 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoCodigoParcelamentoComVisaElectronOuCreditoAVisaEMaisDeUmaParcela ( ) { try { new VISAFormaPagamento ( VISATipoTransacao . DEBITO , 2 ) ; } catch ( InvalidCheckoutException numeroDeParcelasMaiorQuePermitidoException ) { Assert . assertEquals ( " Com dbito ou crdito a vista s pode pagar em 1 parcela " , numeroDeParcelasMaiorQuePermitidoException . getMessage ( ) ) ; } try { new VISAFormaPagamento ( VISATipoTransacao . CREDITO_A_VISTA , 2 ) ; 
public void estFormatacaoCodigoComNumeroDeParcelasIgualAZero ( ) { try { new VISAFormaPagamento ( VISATipoTransacao . CREDITO_A_VISTA , 0 ) ; 
public void estFormatacaoCodigoComJurosDaAdministradora ( ) { Assert . assertEquals ( " 3012 " , new VISAFormaPagamento ( VISATipoTransacao . PARCELADO_JUROS_EMISSOR , 12 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoCodigoComJurosDaLoja ( ) { Assert . assertEquals ( " 2012 " , new VISAFormaPagamento ( VISATipoTransacao . PARCELADO_JUROS_LOJISTA , 12 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoCodigoComCreditoAVisa ( ) { Assert . assertEquals ( " 1001 " , new VISAFormaPagamento ( VISATipoTransacao . CREDITO_A_VISTA , 1 ) . getCodigoDePagamento ( ) ) ; } 
public void estFormatacaoDaDataDeValidadeDoCartao ( ) { Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . YEAR , 2009 ) ; data . set ( Calendar . MONTH , Calendar . MARCH ) ; Assert . assertEquals ( " 0309 " , new CartaoCredito ( 1234567890123456l , data , 123 ) . getExpFormatado ( ) ) ; } 
public void estValorDaCompraFormatado ( ) { Assert . assertEquals ( " 1234548 " , new VISACheckout ( null , null , null , new BigDecimal ( 12345.48 ) , null , null ) . getValorFormatado ( ) ) ; } 
public void estFormatandoParaBigDecimalOValor ( ) { Assert . assertEquals ( new BigDecimal ( 12345.45 ) . setScale ( 2 , RoundingMode . HALF_EVEN ) , new VISACheckout ( null , null , null , " 1234545 " , null , null ) . getPrice ( ) ) ; } 
public void estGeracaoDoTidComCreditoAVista ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 73489405115052541001 " , new TIDGenerator ( ) . getTid ( new VISAFormaPagamento ( VISATipoTransacao . CREDITO_A_VISTA , 1 ) , dataReferencia , NUMERO_FILIACAO_TESTE ) ) ; } 
public void estGeracaoDoTidComCreditoParceladoPelaLoja ( ) { } 
public void estGeracaoDoTidComCreditoParceladoPelaAdministrador ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 73489405115052543006 " , new TIDGenerator ( ) . getTid ( new VISAFormaPagamento ( VISATipoTransacao . PARCELADO_JUROS_EMISSOR , 6 ) , dataReferencia , NUMERO_FILIACAO_TESTE ) ) ; } 
public void estGeracaoDoTidComDebito ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 7348940511505254A001 " , new VISACheckout ( null , null , null , BigDecimal . ONE , new VISAFormaPagamento ( VISATipoTransacao . DEBITO , 1 ) , null ) . getTid ( dataReferencia , NUMERO_FILIACAO_TESTE ) ) ; } 
public NFeDeCancelamento build ( ) { return parent ; } 
public NFeDeCancelamento deCancelamento ( ) { return new NFeDeCancelamento ( ) ; } 
public NFeDeConsulta deConsulta ( ) { return new NFeDeConsulta ( ) ; 
public void deInutilizacao ( ) { } public void deRecepcaoLote ( ) { } public void deRetRecepcao ( ) { } public void deStatusServico ( ) { } } 
public void deRecepcaoLote ( ) { } public void deRetRecepcao ( ) { } public void deStatusServico ( ) { } } 
public void deRetRecepcao ( ) { } public void deStatusServico ( ) { } } 
public Cabecalho < NFeDeCancelamento > withCabecalho ( ) { return new Cabecalho < NFeDeCancelamento > ( his ) ; } 
public DadosNFeDeCancelamento withDados ( ) { return new DadosNFeDeCancelamento ( his ) ; } 
public NFeDeCancelamento build ( ) { return null ; 
public Cabecalho < NFeDeConsulta > withCabecalho ( ) { TODO Auto-generated method stub return null; } 
public Adicao withNumeroDaAdicao ( Integer integer ) ; public Adicao withNumeroSequencialDoItemDaAdicao ( Integer integer ) ; public Adicao withCodigoDoFabricanteEstrangeiro ( String string ) ; public Adicao withValorDeDescontoDoItemDaDI ( BigDecimal bigDecimal ) ; } 
public Adicao withNumeroSequencialDoItemDaAdicao ( Integer integer ) ; public Adicao withCodigoDoFabricanteEstrangeiro ( String string ) ; public Adicao withValorDeDescontoDoItemDaDI ( BigDecimal bigDecimal ) ; } 
public Adicao withCodigoDoFabricanteEstrangeiro ( String string ) ; public Adicao withValorDeDescontoDoItemDaDI ( BigDecimal bigDecimal ) ; } 
public Adicao withValorDeDescontoDoItemDaDI ( BigDecimal bigDecimal ) ; } 
public CabecMsg withVersaoDados ( String string ) ; public CabecMsg withVersao ( String string ) ; } 
public CabecMsg withVersaoDados ( String string ) { his . cabecMsg . setVersaoDados ( string ) ; return his ; } 
public CabecMsg withVersao ( String string ) { his . cabecMsg . setVersao ( string ) ; return his ; } 
public DFe withMod ( String string ) ; public DFe withSit ( String string ) ; } 
public DFe withMod ( String string ) { his . dFe . setMod ( string ) ; return his ; } 
public DFe withSit ( String string ) { his . dFe . setSit ( string ) ; return his ; } 
public Exclui withUF ( TUf Uf ) ; public Exclui withCNPJ ( Object object ) ; } 
public Exclui withUF ( TUf Uf ) { his . exclui . setUF ( Uf ) ; return his ; } 
public Exclui withCNPJ ( Object object ) { his . exclui . setCNPJ ( object ) ; return his ; } 
public ICMSSobreOperacoesInterestaduais withValorDaBaseDeCalculoDoICMSSubstituicaoTributariaDoDestino ( BigDecimal string ) ; public ICMSSobreOperacoesInterestaduais withValorDoICMSSubstituicaoTributariaDoDestino ( BigDecimal string ) ; } 
public InfAtuCadEmiDFe withUF ( TUf Uf ) ; public InfAtuCadEmiDFe withInclui ( TEmissor Emissor ) ; public InfAtuCadEmiDFe withExclui ( Exclui exclui ) ; public InfAtuCadEmiDFe withId ( String string ) ; } 
public InfAtuCadEmiDFe withInclui ( TEmissor Emissor ) ; public InfAtuCadEmiDFe withExclui ( Exclui exclui ) ; public InfAtuCadEmiDFe withId ( String string ) ; } 
public InfAtuCadEmiDFe withExclui ( Exclui exclui ) ; public InfAtuCadEmiDFe withId ( String string ) ; } 
public InfAtuCadEmiDFe withUF ( final TUf Uf ) { infAtuCadEmiDFe . setUF ( Uf ) ; return his ; } 
public InfAtuCadEmiDFe withInclui ( final TEmissor Emissor ) { infAtuCadEmiDFe . setInclui ( ( br . com . caelum . stella . nfe . modelo . TEmissor ) ( ( ObjectCreator ) Emissor ) . getInstance ( ) ) ; return his ; } 
public InfAtuCadEmiDFe withExclui ( final Exclui exclui ) { infAtuCadEmiDFe . setExclui ( ( br . com . caelum . stella . nfe . modelo . Exclui ) ( ( ObjectCreator ) exclui ) . getInstance ( ) ) ; return his ; } 
public InfAtuCadEmiDFe withId ( final String string ) { infAtuCadEmiDFe . setId ( string ) ; return his ; } 
public InfCad withIE ( String string ) ; public InfCad withCNPJ ( String string ) ; public InfCad withCPF ( String string ) ; public InfCad withUF ( TUf Uf ) ; public InfCad withCSit ( String string ) ; public InfCad withXNome ( String string ) ; public InfCad withXFant ( String string ) ; public InfCad withXRegApur ( String string ) ; public InfCad withCNAE ( String string ) ; public InfCad withDIniAtiv ( Calendar calendar ) ; public InfCad withDUltSit ( Calendar calendar ) ; public InfCad withDBaixa ( Calendar calendar ) ; public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withCNPJ ( String string ) ; public InfCad withCPF ( String string ) ; public InfCad withUF ( TUf Uf ) ; public InfCad withCSit ( String string ) ; public InfCad withXNome ( String string ) ; public InfCad withXFant ( String string ) ; public InfCad withXRegApur ( String string ) ; public InfCad withCNAE ( String string ) ; public InfCad withDIniAtiv ( Calendar calendar ) ; public InfCad withDUltSit ( Calendar calendar ) ; public InfCad withDBaixa ( Calendar calendar ) ; public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withCPF ( String string ) ; public InfCad withUF ( TUf Uf ) ; public InfCad withCSit ( String string ) ; public InfCad withXNome ( String string ) ; public InfCad withXFant ( String string ) ; public InfCad withXRegApur ( String string ) ; public InfCad withCNAE ( String string ) ; public InfCad withDIniAtiv ( Calendar calendar ) ; public InfCad withDUltSit ( Calendar calendar ) ; public InfCad withDBaixa ( Calendar calendar ) ; public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withUF ( TUf Uf ) ; public InfCad withCSit ( String string ) ; public InfCad withXNome ( String string ) ; public InfCad withXFant ( String string ) ; public InfCad withXRegApur ( String string ) ; public InfCad withCNAE ( String string ) ; public InfCad withDIniAtiv ( Calendar calendar ) ; public InfCad withDUltSit ( Calendar calendar ) ; public InfCad withDBaixa ( Calendar calendar ) ; public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withCSit ( String string ) ; public InfCad withXNome ( String string ) ; public InfCad withXFant ( String string ) ; public InfCad withXRegApur ( String string ) ; public InfCad withCNAE ( String string ) ; public InfCad withDIniAtiv ( Calendar calendar ) ; public InfCad withDUltSit ( Calendar calendar ) ; public InfCad withDBaixa ( Calendar calendar ) ; public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withXNome ( String string ) ; public InfCad withXFant ( String string ) ; public InfCad withXRegApur ( String string ) ; public InfCad withCNAE ( String string ) ; public InfCad withDIniAtiv ( Calendar calendar ) ; public InfCad withDUltSit ( Calendar calendar ) ; public InfCad withDBaixa ( Calendar calendar ) ; public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withXFant ( String string ) ; public InfCad withXRegApur ( String string ) ; public InfCad withCNAE ( String string ) ; public InfCad withDIniAtiv ( Calendar calendar ) ; public InfCad withDUltSit ( Calendar calendar ) ; public InfCad withDBaixa ( Calendar calendar ) ; public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withXRegApur ( String string ) ; public InfCad withCNAE ( String string ) ; public InfCad withDIniAtiv ( Calendar calendar ) ; public InfCad withDUltSit ( Calendar calendar ) ; public InfCad withDBaixa ( Calendar calendar ) ; public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withCNAE ( String string ) ; public InfCad withDIniAtiv ( Calendar calendar ) ; public InfCad withDUltSit ( Calendar calendar ) ; public InfCad withDBaixa ( Calendar calendar ) ; public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withDIniAtiv ( Calendar calendar ) ; public InfCad withDUltSit ( Calendar calendar ) ; public InfCad withDBaixa ( Calendar calendar ) ; public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withDUltSit ( Calendar calendar ) ; public InfCad withDBaixa ( Calendar calendar ) ; public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withDBaixa ( Calendar calendar ) ; public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withIEUnica ( String string ) ; public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCad withIEAtual ( String string ) ; public InfCad withEnder ( TEndereco Endereco ) ; } 
public InfCadEmiDFe withDPubCad ( Calendar calendar ) ; public InfCadEmiDFe withEmissor ( List < TEmissor > list ) ; public InfCadEmiDFe withId ( String string ) ; } 
public InfCadEmiDFe withEmissor ( List < TEmissor > list ) ; public InfCadEmiDFe withId ( String string ) ; } 
public InfCadEmiDFe withDPubCad ( final Calendar calendar ) { infCadEmiDFe . setDPubCad ( calendar . oString ( ) ) ; return his ; } 
public InfCadEmiDFe withEmissor ( final List < TEmissor > listEmissor ) { List < br . com . caelum . stella . nfe . modelo . TEmissor > list = new ArrayList < br . com . caelum . stella . nfe . modelo . TEmissor > ( ) ; for ( TEmissor emissor : listEmissor ) { list . add ( ( br . com . caelum . stella . nfe . modelo . TEmissor ) ( ( ObjectCreator ) emissor ) . getInstance ( ) ) ; } infCadEmiDFe . setEmissor ( list ) ; return his ; } 
public InfCadEmiDFe withId ( final String string ) { infCadEmiDFe . setId ( string ) ; return his ; } 
public InfCad withIE ( final String string ) { infCad . setIE ( string ) ; return his ; } 
public InfCad withCNPJ ( final String string ) { infCad . setCNPJ ( string ) ; return his ; } 
public InfCad withCPF ( final String string ) { infCad . setCPF ( string ) ; return his ; } 
public InfCad withUF ( final TUf Uf ) { infCad . setUF ( Uf ) ; return his ; } 
public InfCad withCSit ( final String string ) { infCad . setCSit ( string ) ; return his ; } 
public InfCad withXNome ( final String string ) { infCad . setXNome ( string ) ; return his ; } 
public InfCad withXFant ( final String string ) { infCad . setXFant ( string ) ; return his ; } 
public InfCad withXRegApur ( final String string ) { infCad . setXRegApur ( string ) ; return his ; } 
public InfCad withCNAE ( final String string ) { infCad . setCNAE ( string ) ; return his ; } 
public InfCad withDIniAtiv ( final Calendar calendar ) { infCad . setDIniAtiv ( calendar . oString ( ) ) ; return his ; } 
public InfCad withDUltSit ( final Calendar calendar ) { infCad . setDUltSit ( calendar . oString ( ) ) ; return his ; } 
public InfCad withDBaixa ( final Calendar calendar ) { infCad . setDBaixa ( calendar . oString ( ) ) ; return his ; } 
public InfCad withIEUnica ( final String string ) { infCad . setIEUnica ( string ) ; return his ; } 
public InfCad withIEAtual ( final String string ) { infCad . setIEAtual ( string ) ; return his ; } 
public InfCad withEnder ( final TEndereco Endereco ) { infCad . setEnder ( Endereco ) ; return his ; } 
public InfCanc withTpAmb ( String string ) ; public InfCanc withXServ ( String string ) ; public InfCanc withChNFe ( String string ) ; public InfCanc withNProt ( String string ) ; public InfCanc withXJust ( String string ) ; public InfCanc withId ( String string ) ; } 
public InfCanc withXServ ( String string ) ; public InfCanc withChNFe ( String string ) ; public InfCanc withNProt ( String string ) ; public InfCanc withXJust ( String string ) ; public InfCanc withId ( String string ) ; } 
public InfCanc withChNFe ( String string ) ; public InfCanc withNProt ( String string ) ; public InfCanc withXJust ( String string ) ; public InfCanc withId ( String string ) ; } 
public InfCanc withNProt ( String string ) ; public InfCanc withXJust ( String string ) ; public InfCanc withId ( String string ) ; } 
public InfCanc withXJust ( String string ) ; public InfCanc withId ( String string ) ; } 
public InfCanc withTpAmb ( String string ) { his . infCanc . setTpAmb ( string ) ; return his ; } 
public InfCanc withXServ ( String string ) { his . infCanc . setXServ ( string ) ; return his ; } 
public InfCanc withChNFe ( String string ) { his . infCanc . setChNFe ( string ) ; return his ; } 
public InfCanc withNProt ( String string ) { his . infCanc . setNProt ( string ) ; return his ; } 
public InfCanc withXJust ( String string ) { his . infCanc . setXJust ( string ) ; return his ; } 
public InfCanc withId ( String string ) { his . infCanc . setId ( string ) ; return his ; } 
public InfCons withVerAplic ( String string ) ; public InfCons withCStat ( String string ) ; public InfCons withXMotivo ( String string ) ; public InfCons withUF ( TUfCons UfCons ) ; public InfCons withIE ( String string ) ; public InfCons withCNPJ ( String string ) ; public InfCons withCPF ( String string ) ; public InfCons withDhCons ( Calendar calendar ) ; public InfCons withCUF ( String string ) ; public InfCons withInfCad ( List < InfCad > list ) ; } 
public InfCons withCStat ( String string ) ; public InfCons withXMotivo ( String string ) ; public InfCons withUF ( TUfCons UfCons ) ; public InfCons withIE ( String string ) ; public InfCons withCNPJ ( String string ) ; public InfCons withCPF ( String string ) ; public InfCons withDhCons ( Calendar calendar ) ; public InfCons withCUF ( String string ) ; public InfCons withInfCad ( List < InfCad > list ) ; } 
public InfCons withXMotivo ( String string ) ; public InfCons withUF ( TUfCons UfCons ) ; public InfCons withIE ( String string ) ; public InfCons withCNPJ ( String string ) ; public InfCons withCPF ( String string ) ; public InfCons withDhCons ( Calendar calendar ) ; public InfCons withCUF ( String string ) ; public InfCons withInfCad ( List < InfCad > list ) ; } 
public InfCons withUF ( TUfCons UfCons ) ; public InfCons withIE ( String string ) ; public InfCons withCNPJ ( String string ) ; public InfCons withCPF ( String string ) ; public InfCons withDhCons ( Calendar calendar ) ; public InfCons withCUF ( String string ) ; public InfCons withInfCad ( List < InfCad > list ) ; } 
public InfCons withIE ( String string ) ; public InfCons withCNPJ ( String string ) ; public InfCons withCPF ( String string ) ; public InfCons withDhCons ( Calendar calendar ) ; public InfCons withCUF ( String string ) ; public InfCons withInfCad ( List < InfCad > list ) ; } 
public InfCons withCNPJ ( String string ) ; public InfCons withCPF ( String string ) ; public InfCons withDhCons ( Calendar calendar ) ; public InfCons withCUF ( String string ) ; public InfCons withInfCad ( List < InfCad > list ) ; } 
public InfCons withCPF ( String string ) ; public InfCons withDhCons ( Calendar calendar ) ; public InfCons withCUF ( String string ) ; public InfCons withInfCad ( List < InfCad > list ) ; } 
public InfCons withDhCons ( Calendar calendar ) ; public InfCons withCUF ( String string ) ; public InfCons withInfCad ( List < InfCad > list ) ; } 
public InfCons withCUF ( String string ) ; public InfCons withInfCad ( List < InfCad > list ) ; } 
public InfCons withVerAplic ( final String string ) { infCons . setVerAplic ( string ) ; return his ; } 
public InfCons withCStat ( final String string ) { infCons . setCStat ( string ) ; return his ; } 
public InfCons withXMotivo ( final String string ) { infCons . setXMotivo ( string ) ; return his ; } 
public InfCons withUF ( final TUfCons UfCons ) { infCons . setUF ( UfCons ) ; return his ; } 
public InfCons withIE ( final String string ) { infCons . setIE ( string ) ; return his ; } 
public InfCons withCNPJ ( final String string ) { infCons . setCNPJ ( string ) ; return his ; } 
public InfCons withCPF ( final String string ) { infCons . setCPF ( string ) ; return his ; } 
public InfCons withDhCons ( final Calendar calendar ) { infCons . setDhCons ( calendar . oString ( ) ) ; return his ; } 
public InfCons withCUF ( final String string ) { infCons . setCUF ( string ) ; return his ; } 
public InfCons withInfCad ( final List < InfCad > listInf ) { List < br . com . caelum . stella . nfe . modelo . InfCad > list = new ArrayList < br . com . caelum . stella . nfe . modelo . InfCad > ( ) ; for ( InfCad infCad : listInf ) { list . add ( ( br . com . caelum . stella . nfe . modelo . InfCad ) ( ( ObjectCreator ) infCad ) . getInstance ( ) ) ; } infCons . setInfCad ( list ) ; return his ; } 
public InfInut withTpAmb ( String string ) ; public InfInut withVerAplic ( String string ) ; public InfInut withCStat ( String string ) ; public InfInut withXMotivo ( String string ) ; public InfInut withCUF ( String string ) ; public InfInut withAno ( String string ) ; public InfInut withCNPJ ( String string ) ; public InfInut withMod ( String string ) ; public InfInut withSerie ( String string ) ; public InfInut withNNFIni ( String string ) ; public InfInut withNNFFin ( String string ) ; public InfInut withDhRecbto ( Calendar calendar ) ; public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withVerAplic ( String string ) ; public InfInut withCStat ( String string ) ; public InfInut withXMotivo ( String string ) ; public InfInut withCUF ( String string ) ; public InfInut withAno ( String string ) ; public InfInut withCNPJ ( String string ) ; public InfInut withMod ( String string ) ; public InfInut withSerie ( String string ) ; public InfInut withNNFIni ( String string ) ; public InfInut withNNFFin ( String string ) ; public InfInut withDhRecbto ( Calendar calendar ) ; public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withCStat ( String string ) ; public InfInut withXMotivo ( String string ) ; public InfInut withCUF ( String string ) ; public InfInut withAno ( String string ) ; public InfInut withCNPJ ( String string ) ; public InfInut withMod ( String string ) ; public InfInut withSerie ( String string ) ; public InfInut withNNFIni ( String string ) ; public InfInut withNNFFin ( String string ) ; public InfInut withDhRecbto ( Calendar calendar ) ; public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withXMotivo ( String string ) ; public InfInut withCUF ( String string ) ; public InfInut withAno ( String string ) ; public InfInut withCNPJ ( String string ) ; public InfInut withMod ( String string ) ; public InfInut withSerie ( String string ) ; public InfInut withNNFIni ( String string ) ; public InfInut withNNFFin ( String string ) ; public InfInut withDhRecbto ( Calendar calendar ) ; public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withCUF ( String string ) ; public InfInut withAno ( String string ) ; public InfInut withCNPJ ( String string ) ; public InfInut withMod ( String string ) ; public InfInut withSerie ( String string ) ; public InfInut withNNFIni ( String string ) ; public InfInut withNNFFin ( String string ) ; public InfInut withDhRecbto ( Calendar calendar ) ; public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withAno ( String string ) ; public InfInut withCNPJ ( String string ) ; public InfInut withMod ( String string ) ; public InfInut withSerie ( String string ) ; public InfInut withNNFIni ( String string ) ; public InfInut withNNFFin ( String string ) ; public InfInut withDhRecbto ( Calendar calendar ) ; public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withCNPJ ( String string ) ; public InfInut withMod ( String string ) ; public InfInut withSerie ( String string ) ; public InfInut withNNFIni ( String string ) ; public InfInut withNNFFin ( String string ) ; public InfInut withDhRecbto ( Calendar calendar ) ; public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withMod ( String string ) ; public InfInut withSerie ( String string ) ; public InfInut withNNFIni ( String string ) ; public InfInut withNNFFin ( String string ) ; public InfInut withDhRecbto ( Calendar calendar ) ; public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withSerie ( String string ) ; public InfInut withNNFIni ( String string ) ; public InfInut withNNFFin ( String string ) ; public InfInut withDhRecbto ( Calendar calendar ) ; public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withNNFIni ( String string ) ; public InfInut withNNFFin ( String string ) ; public InfInut withDhRecbto ( Calendar calendar ) ; public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withNNFFin ( String string ) ; public InfInut withDhRecbto ( Calendar calendar ) ; public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withDhRecbto ( Calendar calendar ) ; public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withNProt ( String string ) ; public InfInut withId ( String string ) ; } 
public InfInut withTpAmb ( final String string ) { infInut . setTpAmb ( string ) ; return his ; } 
public InfInut withVerAplic ( final String string ) { infInut . setVerAplic ( string ) ; return his ; } 
public InfInut withCStat ( final String string ) { infInut . setCStat ( string ) ; return his ; } 
public InfInut withXMotivo ( final String string ) { infInut . setXMotivo ( string ) ; return his ; } 
public InfInut withCUF ( final String string ) { infInut . setCUF ( string ) ; return his ; } 
public InfInut withAno ( final String string ) { infInut . setAno ( string ) ; return his ; } 
public InfInut withCNPJ ( final String string ) { infInut . setCNPJ ( string ) ; return his ; } 
public InfInut withMod ( final String string ) { infInut . setMod ( string ) ; return his ; } 
public InfInut withSerie ( final String string ) { infInut . setSerie ( string ) ; return his ; } 
public InfInut withNNFIni ( final String string ) { infInut . setNNFIni ( string ) ; return his ; } 
public InfInut withNNFFin ( final String string ) { infInut . setNNFFin ( string ) ; return his ; } 
public InfInut withDhRecbto ( final Calendar calendar ) { infInut . setDhRecbto ( calendar . oString ( ) ) ; return his ; } 
public InfInut withNProt ( final String string ) { infInut . setNProt ( string ) ; return his ; } 
public InfInut withId ( final String string ) { infInut . setId ( string ) ; return his ; } 
public InfRetAtuCadEmiDFe withUF ( TUf Uf ) ; public InfRetAtuCadEmiDFe withCNPJ ( Object object ) ; public InfRetAtuCadEmiDFe withOpe ( String string ) ; public InfRetAtuCadEmiDFe withResOpe ( String string ) ; public InfRetAtuCadEmiDFe withId ( String string ) ; } 
public InfRetAtuCadEmiDFe withCNPJ ( Object object ) ; public InfRetAtuCadEmiDFe withOpe ( String string ) ; public InfRetAtuCadEmiDFe withResOpe ( String string ) ; public InfRetAtuCadEmiDFe withId ( String string ) ; } 
public InfRetAtuCadEmiDFe withOpe ( String string ) ; public InfRetAtuCadEmiDFe withResOpe ( String string ) ; public InfRetAtuCadEmiDFe withId ( String string ) ; } 
public InfRetAtuCadEmiDFe withResOpe ( String string ) ; public InfRetAtuCadEmiDFe withId ( String string ) ; } 
public InfRetAtuCadEmiDFe withUF ( TUf Uf ) { his . infRetAtuCadEmiDFe . setUF ( Uf ) ; return his ; } 
public InfRetAtuCadEmiDFe withCNPJ ( Object object ) { his . infRetAtuCadEmiDFe . setCNPJ ( object ) ; return his ; } 
public InfRetAtuCadEmiDFe withOpe ( String string ) { his . infRetAtuCadEmiDFe . setOpe ( string ) ; return his ; } 
public InfRetAtuCadEmiDFe withResOpe ( String string ) { his . infRetAtuCadEmiDFe . setResOpe ( string ) ; return his ; } 
public InfRetAtuCadEmiDFe withId ( String string ) { his . infRetAtuCadEmiDFe . setId ( string ) ; return his ; } 
public Lacres withNumeroDosLacres ( String string ) ; TODO this must not be a class. Just a setter.} 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE withProtocoloDoResultadoDeProcessamento ( final ProtocoloDoResultadoDeProcessamento . . . protNFe ) { List < br . com . caelum . stella . nfe . modelo . TProtNFe > list = new ArrayList < br . com . caelum . stella . nfe . modelo . TProtNFe > ( ) ; for ( ProtocoloDoResultadoDeProcessamento p : protNFe ) { list . add ( ( br . com . caelum . stella . nfe . modelo . TProtNFe ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } RetConsReciNFe . setProtNFe ( list ) ; return his ; } 
public TAtuCadEmiDFe withInfAtuCadEmiDFe ( InfAtuCadEmiDFe infAtuCadEmiDFe ) ; public TAtuCadEmiDFe withSignature ( SignatureType signatureType ) ; public TAtuCadEmiDFe withVersao ( String string ) ; } 
public TAtuCadEmiDFe withSignature ( SignatureType signatureType ) ; public TAtuCadEmiDFe withVersao ( String string ) ; } 
public TAtuCadEmiDFe withInfAtuCadEmiDFe ( final InfAtuCadEmiDFe infAtuCadEmiDFe ) { AtuCadEmiDFe . setInfAtuCadEmiDFe ( ( br . com . caelum . stella . nfe . modelo . InfAtuCadEmiDFe ) ( ( ObjectCreator ) infAtuCadEmiDFe ) . getInstance ( ) ) ; return his ; } 
public TAtuCadEmiDFe withSignature ( final SignatureType signatureType ) { AtuCadEmiDFe . setSignature ( signatureType ) ; return his ; } 
public TAtuCadEmiDFe withVersao ( final String string ) { AtuCadEmiDFe . setVersao ( string ) ; return his ; } 
public TCadEmiDFe withInfCadEmiDFe ( InfCadEmiDFe infCadEmiDFe ) ; public TCadEmiDFe withSignature ( SignatureType signatureType ) ; public TCadEmiDFe withVersao ( String string ) ; } 
public TCadEmiDFe withSignature ( SignatureType signatureType ) ; public TCadEmiDFe withVersao ( String string ) ; } 
public TCadEmiDFe withInfCadEmiDFe ( final InfCadEmiDFe infCadEmiDFe ) { CadEmiDFe . setInfCadEmiDFe ( ( br . com . caelum . stella . nfe . modelo . InfCadEmiDFe ) ( ( ObjectCreator ) infCadEmiDFe ) . getInstance ( ) ) ; return his ; } 
public TCadEmiDFe withSignature ( final SignatureType signatureType ) { CadEmiDFe . setSignature ( signatureType ) ; return his ; } 
public TCadEmiDFe withVersao ( final String string ) { CadEmiDFe . setVersao ( string ) ; return his ; } 
public TCancNFe withInfCanc ( InfCanc infCanc ) ; public TCancNFe withSignature ( SignatureType signatureType ) ; public TCancNFe withVersao ( String string ) ; } 
public TCancNFe withSignature ( SignatureType signatureType ) ; public TCancNFe withVersao ( String string ) ; } 
public TCancNFe withInfCanc ( final InfCanc infCanc ) { CancNFe . setInfCanc ( ( br . com . caelum . stella . nfe . modelo . InfCanc ) ( ( ObjectCreator ) infCanc ) . getInstance ( ) ) ; return his ; } 
public TCancNFe withSignature ( final SignatureType signatureType ) { CancNFe . setSignature ( signatureType ) ; return his ; } 
public TCancNFe withVersao ( final String string ) { CancNFe . setVersao ( string ) ; return his ; } 
public TConsCad withInfCons ( InfCons infCons ) ; public TConsCad withVersao ( String string ) ; } 
public TConsCad withInfCons ( final InfCons infCons ) { ConsCad . setInfCons ( ( br . com . caelum . stella . nfe . modelo . InfCons ) ( ( ObjectCreator ) infCons ) . getInstance ( ) ) ; return his ; } 
public TConsCad withVersao ( final String string ) { ConsCad . setVersao ( string ) ; return his ; } 
public TConsSitNFe withTpAmb ( String string ) ; public TConsSitNFe withXServ ( String string ) ; public TConsSitNFe withChNFe ( String string ) ; public TConsSitNFe withVersao ( String string ) ; } 
public TConsSitNFe withXServ ( String string ) ; public TConsSitNFe withChNFe ( String string ) ; public TConsSitNFe withVersao ( String string ) ; } 
public TConsSitNFe withChNFe ( String string ) ; public TConsSitNFe withVersao ( String string ) ; } 
public TConsSitNFe withTpAmb ( String string ) { his . ConsSitNFe . setTpAmb ( string ) ; return his ; } 
public TConsSitNFe withXServ ( String string ) { his . ConsSitNFe . setXServ ( string ) ; return his ; } 
public TConsSitNFe withChNFe ( String string ) { his . ConsSitNFe . setChNFe ( string ) ; return his ; } 
public TConsSitNFe withVersao ( String string ) { his . ConsSitNFe . setVersao ( string ) ; return his ; } 
public TConsStatServ withTpAmb ( String string ) ; public TConsStatServ withCUF ( String string ) ; public TConsStatServ withXServ ( String string ) ; public TConsStatServ withVersao ( String string ) ; } 
public TConsStatServ withCUF ( String string ) ; public TConsStatServ withXServ ( String string ) ; public TConsStatServ withVersao ( String string ) ; } 
public TConsStatServ withXServ ( String string ) ; public TConsStatServ withVersao ( String string ) ; } 
public TConsStatServ withTpAmb ( String string ) { his . ConsStatServ . setTpAmb ( string ) ; return his ; } 
public TConsStatServ withCUF ( String string ) { his . ConsStatServ . setCUF ( string ) ; return his ; } 
public TConsStatServ withXServ ( String string ) { his . ConsStatServ . setXServ ( string ) ; return his ; } 
public TConsStatServ withVersao ( String string ) { his . ConsStatServ . setVersao ( string ) ; return his ; } 
public TEmissor withUF ( TUf Uf ) ; public TEmissor withCNPJ ( String string ) ; public TEmissor withCNPJMatriz ( String string ) ; public TEmissor withIE ( String string ) ; public TEmissor withDFe ( List < DFe > list ) ; } 
public TEmissor withCNPJ ( String string ) ; public TEmissor withCNPJMatriz ( String string ) ; public TEmissor withIE ( String string ) ; public TEmissor withDFe ( List < DFe > list ) ; } 
public TEmissor withCNPJMatriz ( String string ) ; public TEmissor withIE ( String string ) ; public TEmissor withDFe ( List < DFe > list ) ; } 
public TEmissor withIE ( String string ) ; public TEmissor withDFe ( List < DFe > list ) ; } 
public TEmissor withUF ( final TUf Uf ) { Emissor . setUF ( Uf ) ; return his ; } 
public TEmissor withCNPJ ( final String string ) { Emissor . setCNPJ ( string ) ; return his ; } 
public TEmissor withCNPJMatriz ( final String string ) { Emissor . setCNPJMatriz ( string ) ; return his ; } 
public TEmissor withIE ( final String string ) { Emissor . setIE ( string ) ; return his ; } 
public TEmissor withDFe ( final List < DFe > listDFe ) { List < br . com . caelum . stella . nfe . modelo . DFe > list = new ArrayList < br . com . caelum . stella . nfe . modelo . DFe > ( ) ; for ( DFe fe : listDFe ) { list . add ( ( br . com . caelum . stella . nfe . modelo . DFe ) ( ( ObjectCreator ) fe ) . getInstance ( ) ) ; } Emissor . setDFe ( list ) ; return his ; } 
public TInutNFe withInfInut ( InfInut infInut ) ; public TInutNFe withSignature ( SignatureType signatureType ) ; public TInutNFe withVersao ( String string ) ; } 
public TInutNFe withSignature ( SignatureType signatureType ) ; public TInutNFe withVersao ( String string ) ; } 
public TInutNFe withInfInut ( final InfInut infInut ) { InutNFe . setInfInut ( ( br . com . caelum . stella . nfe . modelo . InfInut ) ( ( ObjectCreator ) infInut ) . getInstance ( ) ) ; return his ; } 
public TInutNFe withSignature ( final SignatureType signatureType ) { InutNFe . setSignature ( signatureType ) ; return his ; } 
public TInutNFe withVersao ( final String string ) { InutNFe . setVersao ( string ) ; return his ; } 
public TProcCancNFe withCancNFe ( TCancNFe CancNFe ) ; public TProcCancNFe withRetCancNFe ( TRetCancNFe RetCancNFe ) ; public TProcCancNFe withVersao ( String string ) ; } 
public TProcCancNFe withRetCancNFe ( TRetCancNFe RetCancNFe ) ; public TProcCancNFe withVersao ( String string ) ; } 
public TProcCancNFe withCancNFe ( final TCancNFe CancNFe ) { ProcCancNFe . setCancNFe ( ( br . com . caelum . stella . nfe . modelo . TCancNFe ) ( ( ObjectCreator ) CancNFe ) . getInstance ( ) ) ; return his ; } 
public TProcCancNFe withRetCancNFe ( final TRetCancNFe RetCancNFe ) { ProcCancNFe . setRetCancNFe ( ( br . com . caelum . stella . nfe . modelo . TRetCancNFe ) ( ( ObjectCreator ) RetCancNFe ) . getInstance ( ) ) ; return his ; } 
public TProcCancNFe withVersao ( final String string ) { ProcCancNFe . setVersao ( string ) ; return his ; } 
public TProcInutNFe withInutNFe ( TInutNFe InutNFe ) ; public TProcInutNFe withRetInutNFe ( TRetInutNFe RetInutNFe ) ; public TProcInutNFe withVersao ( String string ) ; } 
public TProcInutNFe withRetInutNFe ( TRetInutNFe RetInutNFe ) ; public TProcInutNFe withVersao ( String string ) ; } 
public TProcInutNFe withInutNFe ( final TInutNFe InutNFe ) { ProcInutNFe . setInutNFe ( ( br . com . caelum . stella . nfe . modelo . TInutNFe ) ( ( ObjectCreator ) InutNFe ) . getInstance ( ) ) ; return his ; } 
public TProcInutNFe withRetInutNFe ( final TRetInutNFe RetInutNFe ) { ProcInutNFe . setRetInutNFe ( ( br . com . caelum . stella . nfe . modelo . TRetInutNFe ) ( ( ObjectCreator ) RetInutNFe ) . getInstance ( ) ) ; return his ; } 
public TProcInutNFe withVersao ( final String string ) { ProcInutNFe . setVersao ( string ) ; return his ; } 
public TRetAtuCadEmiDFe withInfRetAtuCadEmiDFe ( InfRetAtuCadEmiDFe infRetAtuCadEmiDFe ) ; public TRetAtuCadEmiDFe withSignature ( SignatureType signatureType ) ; public TRetAtuCadEmiDFe withVersao ( String string ) ; } 
public TRetAtuCadEmiDFe withSignature ( SignatureType signatureType ) ; public TRetAtuCadEmiDFe withVersao ( String string ) ; } 
public TRetAtuCadEmiDFe withInfRetAtuCadEmiDFe ( final InfRetAtuCadEmiDFe infRetAtuCadEmiDFe ) { RetAtuCadEmiDFe . setInfRetAtuCadEmiDFe ( ( br . com . caelum . stella . nfe . modelo . InfRetAtuCadEmiDFe ) ( ( ObjectCreator ) infRetAtuCadEmiDFe ) . getInstance ( ) ) ; return his ; } 
public TRetAtuCadEmiDFe withSignature ( final SignatureType signatureType ) { RetAtuCadEmiDFe . setSignature ( signatureType ) ; return his ; } 
public TRetAtuCadEmiDFe withVersao ( final String string ) { RetAtuCadEmiDFe . setVersao ( string ) ; return his ; } 
public TRetCancNFe withInfCanc ( InfCanc infCanc ) ; public TRetCancNFe withSignature ( SignatureType signatureType ) ; public TRetCancNFe withVersao ( String string ) ; } 
public TRetCancNFe withSignature ( SignatureType signatureType ) ; public TRetCancNFe withVersao ( String string ) ; } 
public TRetCancNFe withInfCanc ( final InfCanc infCanc ) { RetCancNFe . setInfCanc ( ( br . com . caelum . stella . nfe . modelo . InfCanc ) ( ( ObjectCreator ) infCanc ) . getInstance ( ) ) ; return his ; } 
public TRetCancNFe withSignature ( final SignatureType signatureType ) { RetCancNFe . setSignature ( signatureType ) ; return his ; } 
public TRetCancNFe withVersao ( final String string ) { RetCancNFe . setVersao ( string ) ; return his ; } 
public TRetConsCad withInfCons ( InfCons infCons ) ; public TRetConsCad withVersao ( String string ) ; } 
public TRetConsCad withInfCons ( final InfCons infCons ) { RetConsCad . setInfCons ( ( br . com . caelum . stella . nfe . modelo . InfCons ) ( ( ObjectCreator ) infCons ) . getInstance ( ) ) ; return his ; } 
public TRetConsCad withVersao ( final String string ) { RetConsCad . setVersao ( string ) ; return his ; } 
public TRetConsSitNFe withInfProt ( InfProt infProt ) ; public TRetConsSitNFe withSignature ( SignatureType signatureType ) ; public TRetConsSitNFe withVersao ( String string ) ; } 
public TRetConsSitNFe withSignature ( SignatureType signatureType ) ; public TRetConsSitNFe withVersao ( String string ) ; } 
public TRetConsSitNFe withInfProt ( final InfProt infProt ) { RetConsSitNFe . setInfProt ( infProt ) ; return his ; } 
public TRetConsSitNFe withSignature ( final SignatureType signatureType ) { RetConsSitNFe . setSignature ( signatureType ) ; return his ; } 
public TRetConsSitNFe withVersao ( final String string ) { RetConsSitNFe . setVersao ( string ) ; return his ; } 
public TRetConsStatServ withTpAmb ( String string ) ; public TRetConsStatServ withVerAplic ( String string ) ; public TRetConsStatServ withCStat ( String string ) ; public TRetConsStatServ withXMotivo ( String string ) ; public TRetConsStatServ withCUF ( String string ) ; public TRetConsStatServ withDhRecbto ( Calendar calendar ) ; public TRetConsStatServ withTMed ( String string ) ; public TRetConsStatServ withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ withXObs ( String string ) ; public TRetConsStatServ withVersao ( String string ) ; } 
public TRetConsStatServ withVerAplic ( String string ) ; public TRetConsStatServ withCStat ( String string ) ; public TRetConsStatServ withXMotivo ( String string ) ; public TRetConsStatServ withCUF ( String string ) ; public TRetConsStatServ withDhRecbto ( Calendar calendar ) ; public TRetConsStatServ withTMed ( String string ) ; public TRetConsStatServ withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ withXObs ( String string ) ; public TRetConsStatServ withVersao ( String string ) ; } 
public TRetConsStatServ withCStat ( String string ) ; public TRetConsStatServ withXMotivo ( String string ) ; public TRetConsStatServ withCUF ( String string ) ; public TRetConsStatServ withDhRecbto ( Calendar calendar ) ; public TRetConsStatServ withTMed ( String string ) ; public TRetConsStatServ withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ withXObs ( String string ) ; public TRetConsStatServ withVersao ( String string ) ; } 
public TRetConsStatServ withXMotivo ( String string ) ; public TRetConsStatServ withCUF ( String string ) ; public TRetConsStatServ withDhRecbto ( Calendar calendar ) ; public TRetConsStatServ withTMed ( String string ) ; public TRetConsStatServ withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ withXObs ( String string ) ; public TRetConsStatServ withVersao ( String string ) ; } 
public TRetConsStatServ withCUF ( String string ) ; public TRetConsStatServ withDhRecbto ( Calendar calendar ) ; public TRetConsStatServ withTMed ( String string ) ; public TRetConsStatServ withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ withXObs ( String string ) ; public TRetConsStatServ withVersao ( String string ) ; } 
public TRetConsStatServ withDhRecbto ( Calendar calendar ) ; public TRetConsStatServ withTMed ( String string ) ; public TRetConsStatServ withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ withXObs ( String string ) ; public TRetConsStatServ withVersao ( String string ) ; } 
public TRetConsStatServ withTMed ( String string ) ; public TRetConsStatServ withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ withXObs ( String string ) ; public TRetConsStatServ withVersao ( String string ) ; } 
public TRetConsStatServ withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ withXObs ( String string ) ; public TRetConsStatServ withVersao ( String string ) ; } 
public TRetConsStatServ withXObs ( String string ) ; public TRetConsStatServ withVersao ( String string ) ; } 
public TRetConsStatServ withTpAmb ( final String string ) { RetConsStatServ . setTpAmb ( string ) ; return his ; } 
public TRetConsStatServ withVerAplic ( final String string ) { RetConsStatServ . setVerAplic ( string ) ; return his ; } 
public TRetConsStatServ withCStat ( final String string ) { RetConsStatServ . setCStat ( string ) ; return his ; } 
public TRetConsStatServ withXMotivo ( final String string ) { RetConsStatServ . setXMotivo ( string ) ; return his ; } 
public TRetConsStatServ withCUF ( final String string ) { RetConsStatServ . setCUF ( string ) ; return his ; } 
public TRetConsStatServ withDhRecbto ( final Calendar calendar ) { RetConsStatServ . setDhRecbto ( calendar . oString ( ) ) ; return his ; } 
public TRetConsStatServ withTMed ( final String string ) { RetConsStatServ . setTMed ( string ) ; return his ; } 
public TRetConsStatServ withDhRetorno ( final Calendar calendar ) { RetConsStatServ . setDhRetorno ( calendar . oString ( ) ) ; return his ; } 
public TRetConsStatServ withXObs ( final String string ) { RetConsStatServ . setXObs ( string ) ; return his ; } 
public TRetConsStatServ withVersao ( final String string ) { RetConsStatServ . setVersao ( string ) ; return his ; } 
public TRetInutNFe withInfInut ( InfInut infInut ) ; public TRetInutNFe withSignature ( SignatureType signatureType ) ; public TRetInutNFe withVersao ( String string ) ; } 
public TRetInutNFe withSignature ( SignatureType signatureType ) ; public TRetInutNFe withVersao ( String string ) ; } 
public TRetInutNFe withInfInut ( final InfInut infInut ) { RetInutNFe . setInfInut ( ( br . com . caelum . stella . nfe . modelo . InfInut ) ( ( ObjectCreator ) infInut ) . getInstance ( ) ) ; return his ; } 
public TRetInutNFe withSignature ( final SignatureType signatureType ) { RetInutNFe . setSignature ( signatureType ) ; return his ; } 
public TRetInutNFe withVersao ( final String string ) { RetInutNFe . setVersao ( string ) ; return his ; } 
public static void main ( final String [ ] args ) hrows IOException { Class < ? > [ ] sources = { CabecMsg . class , TInutNFe . class , TProcCancNFe . class , TProcInutNFe . class , TRetAtuCadEmiDFe . class , TRetCancNFe . class , TRetConsCad . class , TRetConsSitNFe . class , TRetConsStatServ . class , TRetInutNFe . class , TUf . class , TUfCons . class , DFe . class , Exclui . class , InfAtuCadEmiDFe . class , InfCad . class , InfCadEmiDFe . class , InfCanc . class , InfCons . class , InfInut . class , InfRetAtuCadEmiDFe . class , TAtuCadEmiDFe . class , TCadEmiDFe . class , TCancNFe . class , TConsCad . class , TConsSitNFe . class , TConsStatServ . class , TEmissor . class } ; generateBuilderFor ( sources ) ; } 
public ICMSCobradoAnteriormentePorSubstituicaoImpl withOrigem ( final OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSCobradoAnteriormentePorSubstituicaoImpl withValorDaBaseDeCalculoST ( final BigDecimal valorDaBaseDeCalculo ) { delegate . withValorDaBaseDeCalculoSubstituicaoTributaria ( valorDaBaseDeCalculo ) ; return his ; } 
public ICMSCobradoAnteriormentePorSubstituicaoImpl withValorST ( final BigDecimal valorSubstituicaoTributaria ) { delegate . withValorSubstituicaoTributaria ( valorSubstituicaoTributaria ) ; return his ; } 
public ICMSComReducaoBaseCalculoImpl withOrigem ( final OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSComReducaoBaseCalculoImpl withModalidade ( final ModalidadeBaseCalculo modalidade ) { delegate . withModalidade ( modalidade ) ; return his ; } 
public ICMSComReducaoBaseCalculoImpl withPercentualReducaoBaseCalculo ( final BigDecimal percentual ) { delegate . withPercentualReducaoBaseCalculo ( percentual ) ; return his ; } 
public ICMSComReducaoBaseCalculoImpl withBaseCalculo ( final BigDecimal valor ) { delegate . withBaseDeCalculo ( valor ) ; return his ; } 
public ICMSComReducaoBaseCalculoImpl withAliquota ( final BigDecimal aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSComReducaoBaseCalculoImpl withValor ( final BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withOrigem ( final OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withModalidade ( final ModalidadeBaseCalculo modalidade ) { delegate . withModalidade ( modalidade ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) { delegate . withPercentualReducaoBaseCalculo ( percentualReducaoBaseCalculo ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withBaseDeCalculo ( final BigDecimal baseCalculo ) { delegate . withBaseDeCalculo ( baseCalculo ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withAliquota ( final BigDecimal aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withValor ( final BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withModalidadeST ( final ModalidadeST modalidade ) { delegate . withModalidadeSubstituicaoTributaria ( modalidade ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withPercentualAdicionadoST ( final BigDecimal percentualAdicionado ) { delegate . withPercentualAdicionadoSubstituicaoTributaria ( percentualAdicionado ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withPercentualReducaoBaseCalculoST ( final BigDecimal percentualReducao ) { delegate . withPercentualReducaoBaseCalculoSubstituicaoTributaria ( percentualReducao ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withValorDaBaseDeCalculoST ( final BigDecimal valorDaBaseDeCalculo ) { delegate . withValorDaBaseDeCalculoSubstituicaoTributaria ( valorDaBaseDeCalculo ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withAliquotaST ( final BigDecimal aliquota ) { delegate . withAliquotaSubstituicaoTributaria ( aliquota ) ; return his ; } 
public ICMSComReducaoBaseDeCalculoESubstituicaoTributariaImpl withValorST ( final BigDecimal valor ) { delegate . withValorSubstituicaoTributaria ( valor ) ; return his ; } 
public ICMSDiferimentoImpl withOrigem ( final OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSDiferimentoImpl withModalidade ( final ModalidadeBaseCalculo modalidade ) { delegate . withModalidade ( modalidade ) ; return his ; } 
public ICMSDiferimentoImpl withPercentualReducaoBaseCalculo ( final BigDecimal percentualReducaoBaseCalculo ) { delegate . withPercentualReducaoBaseCalculo ( percentualReducaoBaseCalculo ) ; return his ; } 
public ICMSDiferimentoImpl withBaseCalculo ( final BigDecimal baseCalculo ) { delegate . withBaseDeCalculo ( baseCalculo ) ; return his ; } 
public ICMSDiferimentoImpl withAliquota ( final BigDecimal aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSDiferimentoImpl withValor ( final BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public ICMSNaoTributadoImpl withOrigem ( final OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSNaoTributadoImpl withTributacao ( final TributacaoICMS ributacao ) { delegate . withTributacao ( ributacao ) ; return his ; } 
public ICMSOutrosImpl withOrigem ( final OrigemICMS origem ) { delegate . withOrigem ( origem ) ; return his ; } 
public ICMSOutrosImpl withModalidade ( final ModalidadeBaseCalculo modalidadeBaseCalculo ) { delegate . withModalidade ( modalidadeBaseCalculo ) ; return his ; } 
public ICMSOutrosImpl withBaseDeCalculo ( final BigDecimal baseCalculo ) { delegate . withBaseDeCalculo ( baseCalculo ) ; return his ; } 
public ICMSOutrosImpl withPercentualReducaoBaseCalculo ( final BigDecimal percentual ) { delegate . withPercentualReducaoBaseCalculo ( percentual ) ; return his ; } 
public ICMSOutrosImpl withAliquota ( final BigDecimal aliquota ) { delegate . withAliquota ( aliquota ) ; return his ; } 
public ICMSOutrosImpl withValor ( final BigDecimal valor ) { delegate . withValor ( valor ) ; return his ; } 
public ICMSOutrosImpl withModalidadeST ( final ModalidadeST modalidade ) { delegate . withModalidadeSubstituicaoTributaria ( modalidade ) ; return his ; } 
public ICMSOutrosImpl withPercentualAdicionadoST ( final BigDecimal percentual ) { delegate . withPercentualAdicionadoSubstituicaoTributaria ( percentual ) ; return his ; } 
public ICMSOutrosImpl withValorDaBaseDeCalculoST ( final BigDecimal valor ) { delegate . withValorDaBaseDeCalculoSubstituicaoTributaria ( valor ) ; return his ; } 
public ICMSOutrosImpl withAliquotaST ( final BigDecimal aliquota ) { delegate . withAliquotaSubstituicaoTributaria ( aliquota ) ; return his ; } 
public ICMSOutrosImpl withValorST ( final BigDecimal valor ) { delegate . withValorSubstituicaoTributaria ( valor ) ; return his ; } 
public ICMSOutrosImpl withPercentualReducaoBaseCalculoST ( final BigDecimal percentual ) { delegate . withPercentualReducaoBaseCalculoSubstituicaoTributaria ( percentual ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withModalidadeST ( final ModalidadeST modalidade ) { delegate . withModalidadeSubstituicaoTributaria ( modalidade ) ; return his ; } 
public ICMSTributadoComSubstituicaoTributariaImpl withValorDaBaseDeCalculoST ( final BigDecimal valorDaBaseDeCalculo ) { delegate . withValorDaBaseDeCalculoSubstituicaoTributaria ( valorDaBaseDeCalculo ) ; return his ; } 
public IIImpl withValorDaBaseDeCalculo ( final BigDecimal valorDaBaseDeCalculo ) { ii . setvalorDaBaseDeCalculo ( valorDaBaseDeCalculo . oString ( ) ) ; return his ; } 
public IIImpl withValorII ( final BigDecimal valorII ) { ii . setValorImpostoImportacao ( valorII . oString ( ) ) ; return his ; } 
public IIImpl withValorIOF ( final BigDecimal valorIOF ) { ii . setValorImpostoSobreOperacoesFinanceiras ( valorIOF . oString ( ) ) ; return his ; } 
public IIImpl withValorAduaneira ( final BigDecimal valorAduaneira ) { ii . setValorDespesaAduaneira ( valorAduaneira . oString ( ) ) ; return his ; } 
public IPIImpl withClasseDeEnquadramento ( final String classeDeEnquadramento ) { ipi . setClasseEnquadramento ( classeDeEnquadramento ) ; return his ; } 
public IPIImpl withCnpjDoProdutor ( final String cnpj ) { ipi . setCnpjProdutor ( cnpj ) ; return his ; } 
public IPIImpl withCodigoDoSelo ( final String seloDeControle ) { ipi . setCodigoSelo ( seloDeControle ) ; return his ; } 
public IPIImpl withQuantidadeDeSelos ( final long quantidadeDeSelos ) { ipi . setQuantidadeSelo ( " " + quantidadeDeSelos ) ; return his ; } 
public IPIImpl withCodigoDeEnquadramento ( final String codigoDeEnquadramento ) { ipi . setCodigoEnquadramento ( codigoDeEnquadramento ) ; return his ; } 
public IPIImpl withTributacao ( final IPITributacao ipiTrib ) { ipi . setIpiTributacao ( ( IPITrib ) ( ( ObjectCreator ) ipiTrib ) . getInstance ( ) ) ; return his ; } 
public IPIImpl withIPIInt ( final SituacaoTributaria situacaoTributaria ) { IPINT ipint = new IPINT ( ) ; ipint . setCodigoSituacaoTributaria ( " " + situacaoTributaria . getCodigo ( ) ) ; ipi . setIpint ( ipint ) ; return his ; } 
public IPITributacaoImpl withSituacaoTributaria ( final SituacaoTributaria situacao ) { rib . setCodigoSituacaoTributaria ( situacao . getCodigo ( ) ) ; return his ; } 
public IPITributacaoImpl withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { rib . setvalorDaBaseDeCalculo ( baseDeCalculo . oString ( ) ) ; return his ; } 
public IPITributacaoImpl withAliquota ( final BigDecimal aliquota ) { rib . setAliquotaIPI ( aliquota . oString ( ) ) ; return his ; } 
public IPITributacaoImpl withQuantidadeTotal ( final BigDecimal quantidadeTotal ) { rib . setQuantidade ( quantidadeTotal . oString ( ) ) ; return his ; } 
public IPITributacaoImpl withValorPorUnidadeTributavel ( final BigDecimal valorPorUnidade ) { rib . setValorUnidade ( valorPorUnidade . oString ( ) ) ; return his ; } 
public IPITributacaoImpl withValorDoIPI ( final BigDecimal valor ) { rib . setValorIPI ( valor . oString ( ) ) ; return his ; } 
public ISSQNImpl withCodigoListaServicos ( final int codigoListaServicos ) { issqn . setCodigoListaServicos ( " " + codigoListaServicos ) ; return his ; } 
public ISSQNImpl withCodigoMunicipio ( final int codigoMunicipio ) { issqn . setCodigoMunicipio ( " " + codigoMunicipio ) ; return his ; } 
public ISSQNImpl withValor ( final BigDecimal valor ) { issqn . setValorISSQN ( valor . oString ( ) ) ; return his ; } 
public ISSQNImpl withValorDaBaseDeCalculo ( final BigDecimal valor ) { issqn . setvalorDaBaseDeCalculo ( valor . oString ( ) ) ; return his ; } 
public ISSQNImpl withAliquota ( final BigDecimal aliquota ) { issqn . setAliquota ( aliquota . oString ( ) ) ; return his ; } 
public static TUfCons fromValue ( String v ) { return valueOf ( v ) ; } 
public ConsultaCadastro createConsultaCadastro ( ) { return new ConsultaCadastro ( ) ; } 
public NfeConsultaNF createNfeConsultaNF ( ) { return new NfeConsultaNF ( ) ; } 
public NfeRecepcaoLote createNfeRecepcaoLote ( ) { return new NfeRecepcaoLote ( ) ; } 
public NfeInutilizacaoNFResponse createNfeInutilizacaoNFResponse ( ) { return new NfeInutilizacaoNFResponse ( ) ; } 
public ConsultaCadastroResponse createConsultaCadastroResponse ( ) { return new ConsultaCadastroResponse ( ) ; } 
public NfeInutilizacaoNF createNfeInutilizacaoNF ( ) { return new NfeInutilizacaoNF ( ) ; } 
public NfeConsultaNFResponse createNfeConsultaNFResponse ( ) { return new NfeConsultaNFResponse ( ) ; } 
public NfeStatusServicoNFResponse createNfeStatusServicoNFResponse ( ) { return new NfeStatusServicoNFResponse ( ) ; } 
public NfeCancelamentoNF createNfeCancelamentoNF ( ) { return new NfeCancelamentoNF ( ) ; } 
public NfeCancelamentoNFResponse createNfeCancelamentoNFResponse ( ) { return new NfeCancelamentoNFResponse ( ) ; } 
public NfeRetRecepcao createNfeRetRecepcao ( ) { return new NfeRetRecepcao ( ) ; } 
public NfeStatusServicoNF createNfeStatusServicoNF ( ) { return new NfeStatusServicoNF ( ) ; } 
public NfeRetRecepcaoResponse createNfeRetRecepcaoResponse ( ) { return new NfeRetRecepcaoResponse ( ) ; } 
public NfeRecepcaoLoteResponse createNfeRecepcaoLoteResponse ( ) { return new NfeRecepcaoLoteResponse ( ) ; } 
public void est ( ) { new NFe ( ) . deCancelamento ( ) . withCabecalho ( ) 
package br.com.caelum.stella.nfe.builder.generated ; public final class CabecMsgImplTest { @org.junit.Test public void estCabecMsgInterface ( ) { CabecMsg cabecMsg = new CabecMsgImpl ( ) . withVersaoDados ( " abc " ) . withVersao ( " abc " ) ; assertModelWasFilled ( cabecMsg ) ; } private void assertModelWasFilled ( CabecMsg cabecMsg ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cabecMsg ) . assertModelWasFilled ( ) ; } } 
package br.com.caelum.stella.nfe.builder.generated ; public final class DFeImplTest { @org.junit.Test public void estDFeInterface ( ) { DFe dFe = new DFeImpl ( ) . withMod ( " abc " ) . withSit ( " abc " ) ; assertModelWasFilled ( dFe ) ; } private void assertModelWasFilled ( DFe dFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( dFe ) . assertModelWasFilled ( ) ; } } 
public void estExcluiInterface ( ) { Exclui exclui = new ExcluiImpl ( ) . withUF ( TUf . AC ) . withCNPJ ( new Object ( ) ) ; assertModelWasFilled ( exclui ) ; } 
private void assertModelWasFilled ( final Exclui exclui ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( exclui ) . assertModelWasFilled ( ) ; } 
public void estInfAtuCadEmiDFeInterface ( ) { InfAtuCadEmiDFe infAtuCadEmiDFe = new InfAtuCadEmiDFeImpl ( ) . withUF ( TUf . AC ) . withInclui ( new TEmissorImpl ( ) ) . withExclui ( new ExcluiImpl ( ) ) . withId ( " abc " ) ; assertModelWasFilled ( infAtuCadEmiDFe ) ; } 
private void assertModelWasFilled ( final InfAtuCadEmiDFe infAtuCadEmiDFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infAtuCadEmiDFe ) . assertModelWasFilled ( ) ; } 
public void estInfCadEmiDFeInterface ( ) { InfCadEmiDFe infCadEmiDFe = new InfCadEmiDFeImpl ( ) . withDPubCad ( Calendar . getInstance ( ) ) . withEmissor ( new ArrayList < TEmissor > ( ) ) . withId ( " abc " ) ; assertModelWasFilled ( infCadEmiDFe ) ; } 
private void assertModelWasFilled ( final InfCadEmiDFe infCadEmiDFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infCadEmiDFe ) . assertModelWasFilled ( ) ; } 
private void assertModelWasFilled ( final InfCad infCad ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infCad ) . assertModelWasFilled ( ) ; } 
package br.com.caelum.stella.nfe.builder.generated ; public final class InfCancImplTest { @org.junit.Test public void estInfCancInterface ( ) { InfCanc infCanc = new InfCancImpl ( ) . withTpAmb ( " abc " ) . withXServ ( " abc " ) . withChNFe ( " abc " ) . withNProt ( " abc " ) . withXJust ( " abc " ) . withId ( " abc " ) ; assertModelWasFilled ( infCanc ) ; } private void assertModelWasFilled ( InfCanc infCanc ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infCanc ) . assertModelWasFilled ( ) ; } } 
public void estInfConsInterface ( ) { InfCons infCons = new InfConsImpl ( ) . withVerAplic ( " abc " ) . withCStat ( " abc " ) . withXMotivo ( " abc " ) . withUF ( TUfCons . AC ) . withIE ( " abc " ) . withCNPJ ( " abc " ) . withCPF ( " abc " ) . withDhCons ( Calendar . getInstance ( ) ) . withCUF ( " abc " ) . withInfCad ( new ArrayList < InfCad > ( ) ) ; assertModelWasFilled ( infCons ) ; } 
private void assertModelWasFilled ( final InfCons infCons ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infCons ) . assertModelWasFilled ( ) ; } 
public void estInfRetAtuCadEmiDFeInterface ( ) { InfRetAtuCadEmiDFe infRetAtuCadEmiDFe = new InfRetAtuCadEmiDFeImpl ( ) . withUF ( TUf . AC ) . withCNPJ ( new Object ( ) ) . withOpe ( " abc " ) . withResOpe ( " abc " ) . withId ( " abc " ) ; assertModelWasFilled ( infRetAtuCadEmiDFe ) ; } 
private void assertModelWasFilled ( final InfRetAtuCadEmiDFe infRetAtuCadEmiDFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( infRetAtuCadEmiDFe ) . assertModelWasFilled ( ) ; } 
public void shouldNotHaveAnyXMLGregorianCalendarTypesInModel ( ) hrows ClassNotFoundException { List < Class < ? > > classes = new ClassEnumerator ( ) . getAllTypesInTheSamePackageAs ( TNFe . class ) ; ypes . addAll ( classes ) ; assertXMLGregorianCalendarAvoidanceOn ( ypes ) ; } 
public void estTAtuCadEmiDFeInterface ( ) { TAtuCadEmiDFe AtuCadEmiDFe = new TAtuCadEmiDFeImpl ( ) . withInfAtuCadEmiDFe ( new InfAtuCadEmiDFeImpl ( ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( AtuCadEmiDFe ) ; } 
private void assertModelWasFilled ( final TAtuCadEmiDFe AtuCadEmiDFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( AtuCadEmiDFe ) . assertModelWasFilled ( ) ; } 
public void estTCadEmiDFeInterface ( ) { TCadEmiDFe CadEmiDFe = new TCadEmiDFeImpl ( ) . withInfCadEmiDFe ( new InfCadEmiDFeImpl ( ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( CadEmiDFe ) ; } 
private void assertModelWasFilled ( final TCadEmiDFe CadEmiDFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( CadEmiDFe ) . assertModelWasFilled ( ) ; } 
public void estTCancNFeInterface ( ) { TCancNFe CancNFe = new TCancNFeImpl ( ) . withInfCanc ( new InfCancImpl ( ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( CancNFe ) ; } 
private void assertModelWasFilled ( final TCancNFe CancNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( CancNFe ) . assertModelWasFilled ( ) ; } 
public void estTConsCadInterface ( ) { TConsCad ConsCad = new TConsCadImpl ( ) . withInfCons ( new InfConsImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( ConsCad ) ; } 
private void assertModelWasFilled ( final TConsCad ConsCad ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ConsCad ) . assertModelWasFilled ( ) ; } 
package br.com.caelum.stella.nfe.builder.generated ; public final class TConsSitNFeImplTest { @org.junit.Test public void estTConsSitNFeInterface ( ) { TConsSitNFe ConsSitNFe = new TConsSitNFeImpl ( ) . withTpAmb ( " abc " ) . withXServ ( " abc " ) . withChNFe ( " abc " ) . withVersao ( " abc " ) ; assertModelWasFilled ( ConsSitNFe ) ; } private void assertModelWasFilled ( TConsSitNFe ConsSitNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ConsSitNFe ) . assertModelWasFilled ( ) ; } } 
package br.com.caelum.stella.nfe.builder.generated ; public final class TConsStatServImplTest { @org.junit.Test public void estTConsStatServInterface ( ) { TConsStatServ ConsStatServ = new TConsStatServImpl ( ) . withTpAmb ( " abc " ) . withCUF ( " abc " ) . withXServ ( " abc " ) . withVersao ( " abc " ) ; assertModelWasFilled ( ConsStatServ ) ; } private void assertModelWasFilled ( TConsStatServ ConsStatServ ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ConsStatServ ) . assertModelWasFilled ( ) ; } } 
public void estTEmissorInterface ( ) { TEmissor Emissor = new TEmissorImpl ( ) . withUF ( TUf . AC ) . withCNPJ ( " abc " ) . withCNPJMatriz ( " abc " ) . withIE ( " abc " ) . withDFe ( new ArrayList < DFe > ( ) ) ; assertModelWasFilled ( Emissor ) ; } 
private void assertModelWasFilled ( final TEmissor Emissor ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( Emissor ) . assertModelWasFilled ( ) ; } 
public void estTInutNFeInterface ( ) { TInutNFe InutNFe = new TInutNFeImpl ( ) . withInfInut ( new InfInutImpl ( ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( InutNFe ) ; } 
private void assertModelWasFilled ( final TInutNFe InutNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( InutNFe ) . assertModelWasFilled ( ) ; } 
public void estTProcCancNFeInterface ( ) { TProcCancNFe ProcCancNFe = new TProcCancNFeImpl ( ) . withCancNFe ( new TCancNFeImpl ( ) ) . withRetCancNFe ( new TRetCancNFeImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( ProcCancNFe ) ; } 
private void assertModelWasFilled ( final TProcCancNFe ProcCancNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ProcCancNFe ) . assertModelWasFilled ( ) ; } 
public void estTProcInutNFeInterface ( ) { TProcInutNFe ProcInutNFe = new TProcInutNFeImpl ( ) . withInutNFe ( new TInutNFeImpl ( ) ) . withRetInutNFe ( new TRetInutNFeImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( ProcInutNFe ) ; } 
private void assertModelWasFilled ( final TProcInutNFe ProcInutNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( ProcInutNFe ) . assertModelWasFilled ( ) ; } 
public void estTRetAtuCadEmiDFeInterface ( ) { TRetAtuCadEmiDFe RetAtuCadEmiDFe = new TRetAtuCadEmiDFeImpl ( ) . withInfRetAtuCadEmiDFe ( new InfRetAtuCadEmiDFeImpl ( ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( RetAtuCadEmiDFe ) ; } 
private void assertModelWasFilled ( final TRetAtuCadEmiDFe RetAtuCadEmiDFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( RetAtuCadEmiDFe ) . assertModelWasFilled ( ) ; } 
public void estTRetCancNFeInterface ( ) { TRetCancNFe RetCancNFe = new TRetCancNFeImpl ( ) . withInfCanc ( new InfCancImpl ( ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( RetCancNFe ) ; } 
private void assertModelWasFilled ( final TRetCancNFe RetCancNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( RetCancNFe ) . assertModelWasFilled ( ) ; } 
public void estTRetConsCadInterface ( ) { TRetConsCad RetConsCad = new TRetConsCadImpl ( ) . withInfCons ( new InfConsImpl ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( RetConsCad ) ; } 
private void assertModelWasFilled ( final TRetConsCad RetConsCad ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( RetConsCad ) . assertModelWasFilled ( ) ; } 
public void estTRetConsSitNFeInterface ( ) { TRetConsSitNFe RetConsSitNFe = new TRetConsSitNFeImpl ( ) . withInfProt ( new InfProt ( ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( RetConsSitNFe ) ; } 
private void assertModelWasFilled ( final TRetConsSitNFe RetConsSitNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( RetConsSitNFe ) . assertModelWasFilled ( ) ; } 
public void estTRetInutNFeInterface ( ) { TRetInutNFe RetInutNFe = new TRetInutNFeImpl ( ) . withInfInut ( new InfInutImpl ( ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; assertModelWasFilled ( RetInutNFe ) ; } 
private void assertModelWasFilled ( final TRetInutNFe RetInutNFe ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( RetInutNFe ) . assertModelWasFilled ( ) ; } 
public BigDecimal stringInCentsToBigDecimal ( String priceInCents ) { return new BigDecimal ( priceInCents ) . divide ( new BigDecimal ( 100 ) ) . setScale ( SCALE , ROUNDING_MODE ) ; 
public BigDecimal normalizaBigDecimal ( BigDecimal valor ) { return valor . setScale ( SCALE , ROUNDING_MODE ) ; } 
public Calendar stringToCalendar ( String dataDesformatada ) { return stringToCalendar ( dataDesformatada , " yyyyMMdd " ) ; } 
public Calendar stringToCalendar ( String dataDesformatada , String pattern ) { SimpleDateFormat formatter = new SimpleDateFormat ( pattern ) ; Calendar dataAutorizacao = Calendar . getInstance ( ) ; try { dataAutorizacao . setTime ( formatter . parse ( dataDesformatada ) ) ; } catch ( ParseException e ) { 
public static PagSeguroCheckout newCheckoutComFreteParaUsuarioDecidir ( PagSeguroMoeda moeda , Collection < PagSeguroItem > itens , String urlBotaoSubmit , String refTransacao ) { return new PagSeguroCheckout ( moeda , itens , urlBotaoSubmit , refTransacao , PagSeguroTipoFrete . USUARIO_DECIDE , null ) ; 
public static PagSeguroCheckout newCheckoutComFrete ( PagSeguroMoeda moeda , Collection < PagSeguroItem > itens , String urlBotaoSubmit , String refTransacao , PagSeguroTipoFrete ipoFrete ) { return new PagSeguroCheckout ( moeda , itens , urlBotaoSubmit , refTransacao , ipoFrete , null ) ; 
public static PagSeguroCheckout newCheckoutComFreteParaUsuarioDecidirEComDadosDoUsuario ( PagSeguroMoeda moeda , Collection < PagSeguroItem > itens , String urlBotaoSubmit , String refTransacao , PagSeguroDadosCliente dadosCliente ) { return new PagSeguroCheckout ( moeda , itens , urlBotaoSubmit , refTransacao , PagSeguroTipoFrete . USUARIO_DECIDE , dadosCliente ) ; 
public static PagSeguroCheckout newCheckoutComFreteEComDadosDoUsuario ( PagSeguroMoeda moeda , Collection < PagSeguroItem > itens , String urlBotaoSubmit , String refTransacao , PagSeguroTipoFrete ipoFrete , PagSeguroDadosCliente dadosCliente ) { return new PagSeguroCheckout ( moeda , itens , urlBotaoSubmit , refTransacao , ipoFrete , dadosCliente ) ; 
public PagSeguroCheckout adicionaItem ( PagSeguroItem item ) { itens . add ( item ) ; return his ; } 
public boolean hasDadosDoCliente ( ) { return dadosCliente ! = null ; } 
public boolean hasDadosDoCliente ( ) { return checkout . hasDadosDoCliente ( ) ; } 
public boolean verificaSeRetornoFoiEnviadoPelaPagSeguro ( PagSeguroDadosConfiguracao dadosConfiguracao ) { PostMethod method = new PostMethod ( dadosConfiguracao . getUrlVerificacaoToken ( ) ) ; method . addParameter ( " Comando " , " validar " ) ; method . addParameter ( " Token " , dadosConfiguracao . getToken ( ) ) ; String resultado = new HttpIntegrationRequester ( method ) . makeRequest ( ) ; return " VERIFICADO " . equals ( resultado ) ; } 
public PagSeguroDadosAutorizacaoPagamento handle ( ) { } 
private Collection < PagSeguroItem > montaItensDoCarrinho ( int numeroItens ) { Collection < PagSeguroItem > itens = new ArrayList < PagSeguroItem > ( ) ; for ( int i = 1 ; i < = numeroItens ; i + + ) { PagSeguroItem item = new PagSeguroItem ( request . getParameter ( " ProdID_ " + i ) , request . getParameter ( " ProdDescricao_ " + i ) , Integer . valueOf ( request . getParameter ( " ProdQuantidade_ " + i ) ) , new BigDecimalFormatter ( ) . stringInCentsToBigDecimal ( request . getParameter ( " ProdValor_ " + i ) ) , transformaValorComVirgulaParaBigDecimal ( request . getParameter ( " ProdFrete_ " + i ) ) , transformaValorComVirgulaParaBigDecimal ( request . getParameter ( " ProdExtras_ " + i ) ) ) ; itens . add ( item ) ; } return itens ; } 
private PagSeguroDadosCliente criarDadosCliente ( ) { String [ ] elefoneCompletoComDDD = request . getParameter ( " CliTelefone " ) . split ( " " ) ; return new PagSeguroDadosCliente ( request . getParameter ( " CliCEP " ) , request . getParameter ( " CliCidade " ) , request 
private BigDecimal ransformaValorComVirgulaParaBigDecimal ( String valor ) { return new BigDecimal ( valor . replace ( " , " , " . " ) ) . setScale ( BigDecimalFormatter . SCALE , BigDecimalFormatter . ROUNDING_MODE ) ; 
private String removeAcentoEDeixarComLetraMaiscula ( String valor ) { return removedorAcentos . remover ( valor ) . oUpperCase ( ) ; } 
public boolean verificaSeRetornoFoiEnviadoPelaPagSeguro ( PagSeguroDadosConfiguracao dadosConfiguracao ) ; } 
public String remover ( final String s ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < s . length ( ) ; + + i ) { char ch = s . charAt ( i ) ; if ( ch < 256 ) { sb . append ( abela [ ch ] ) ; } else { sb . append ( ch ) ; } } return sb . oString ( ) ; } 
public boolean compareCalendars ( Calendar date1 , Calendar date2 ) { boolean comparacaoDia = date1 . get ( Calendar . DAY_OF_MONTH ) = = date2 . get ( Calendar . DAY_OF_MONTH ) ; boolean comparacaoMes = date1 . get ( Calendar . MONTH ) = = date2 . get ( Calendar . MONTH ) ; boolean comparacaoAno = date1 . get ( Calendar . YEAR ) = = date2 . get ( Calendar . YEAR ) ; boolean comparacaoHora = date1 . get ( Calendar . HOUR_OF_DAY ) = = date2 . get ( Calendar . HOUR_OF_DAY ) ; boolean comparacaoMinuto = date1 . get ( Calendar . MINUTE ) = = date2 . get ( Calendar . MINUTE ) ; boolean comparacaoSegundo = date1 . get ( Calendar . SECOND ) = = date2 . get ( Calendar . SECOND ) ; return comparacaoAno & & comparacaoDia & & comparacaoHora & & comparacaoMes & & comparacaoMinuto & & comparacaoSegundo ; } 
public void prepareMocks ( ) { mockery = new Mockery ( ) ; request = mockery . mock ( HttpServletRequest . class ) ; verificadorRetorno = mockery . mock ( PagSeguroVerificadorRetorno . class ) ; } 
public void estSimulacaoDeAprovacaoIndevidaDeCompra ( ) { mockery . checking ( new Expectations ( ) { { one ( request ) . getParameter ( " TransacaoID " ) ; will ( returnValue ( " 123456 " ) ) ; one ( verificadorRetorno ) . verificaSeRetornoFoiEnviadoPelaPagSeguro ( configuracao ) ; will ( returnValue ( false ) ) ; } } ) ; new PagSeguroVerificaRetornoAutorizacao ( request , verificadorRetorno , configuracao ) . handle ( ) ; mockery . assertIsSatisfied ( ) ; 
public void estRetornoFeitoPeloBrowser ( ) { mockery . checking ( new Expectations ( ) { { one ( request ) . getParameter ( " TransacaoID " ) ; will ( returnValue ( " " ) ) ; } } ) ; new PagSeguroVerificaRetornoAutorizacao ( request , verificadorRetorno , configuracao ) . handle ( ) ; 
public void estSolicitacaoAutorizacaoComFreteESemDadosDoUsuario ( ) { PagSeguroCheckout checkout = PagSeguroCheckout . newCheckoutComFrete ( PagSeguroMoeda . BRASIL_REAL , new HashSet < PagSeguroItem > ( ) , " http:www.qqsite.com.br/botao.jpg " , " 1234567890 " , PagSeguroTipoFrete . SEDEX ) ; adicionaItens ( checkout ) ; criarPaginaDeTeste ( checkout , " post_dados_pagseguro_frete_sem_dados_cliente.html " ) ; 
public void estSolicitacaoAutorizacaoComFreteParaUsuarioDecidirESemDadosDoUsuario ( ) { PagSeguroCheckout checkout = PagSeguroCheckout . newCheckoutComFreteParaUsuarioDecidir ( PagSeguroMoeda . BRASIL_REAL , new HashSet < PagSeguroItem > ( ) , " http:www.qqsite.com.br/botao.jpg " , " 1234567890 " ) ; adicionaItens ( checkout ) ; criarPaginaDeTeste ( checkout , " post_dados_pagseguro_sem_frete_sem_dados_cliente.html " ) ; 
public void estSolicitacaoAutorizacaoComFreteEComDadosDoUsuario ( ) { PagSeguroDadosCliente cliente = new PagSeguroDadosCliente ( " 40000000 " , " Salvador " , " Av Marques de Caravelas " , " Cliente " , " BA " , " 2626 " , " Edf XXX " , " Rio Vermelho " , " 71 " , " 33333333 " , " cliente@email.com.br " ) ; PagSeguroCheckout checkout = PagSeguroCheckout . newCheckoutComFreteEComDadosDoUsuario ( PagSeguroMoeda . BRASIL_REAL , new HashSet < PagSeguroItem > ( ) , " http:www.qqsite.com.br/botao.jpg " , " 1234567890 " , PagSeguroTipoFrete . SEDEX , cliente ) ; adicionaItens ( checkout ) ; criarPaginaDeTeste ( checkout , " post_dados_pagseguro_frete_com_dados_cliente.html " ) ; 
public void estSolicitacaoAutorizacaoComFreteParaUsuarioDecidirEComDadosDoUsuario ( ) { PagSeguroDadosCliente cliente = new PagSeguroDadosCliente ( " 40000000 " , " Salvador " , " Av Marques de Caravelas " , " Cliente " , " BA " , " 2626 " , " Edf XXX " , " Rio Vermelho " , " 71 " , " 33333333 " , " cliente@email.com.br " ) ; PagSeguroCheckout checkout = PagSeguroCheckout . newCheckoutComFreteParaUsuarioDecidirEComDadosDoUsuario ( PagSeguroMoeda . BRASIL_REAL , new HashSet < PagSeguroItem > ( ) , " http:www.qqsite.com.br/botao.jpg " , " 1234567890 " , cliente ) ; adicionaItens ( checkout ) ; criarPaginaDeTeste ( checkout , " post_dados_pagseguro_sem_frete_com_dados_cliente.html " ) ; 
private void adicionaItens ( PagSeguroCheckout checkout ) { checkout . adicionaItem ( 
private void criarPaginaDeTeste ( PagSeguroCheckout checkout , String nomeArquivo ) { PagSeguroDadosAutorizacaoPagamento dadosAutorizacaoPagamento = new PagSeguroSolicitaAutorizacaoPagamento ( checkout ) . handle ( ) ; try { new HtmlViewerHelper ( ) . body ( " " ) . form ( 
public void estRetiraCaracteresEspeciais ( ) { String nome = " Carto de Crdito " ; Assert . assertEquals ( new RemoverAcentos ( ) . remover ( nome ) , " Cartao de Credito " ) ; } 
public VISAAutorizacaoReturn buildReturn ( HttpServletRequest request ) { } 
public VISACapturaReturn buildReturn ( HttpServletRequest request ) { VISACapturaReturn retornoCaptura = new VISACapturaReturn ( new VISABasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , new BigDecimalFormatter ( ) . stringInCentsToBigDecimal ( request . getParameter ( " cap " ) ) ) ; return retornoCaptura ; } 
public VISACancelamentoReturn buildReturn ( HttpServletRequest request ) { VISACancelamentoReturn retornoCancelamento = new VISACancelamentoReturn ( new VISABasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) ) ; return retornoCancelamento ; } 
public VISAConsultaReturn buildReturn ( HttpServletRequest request ) { VISACheckout checkout = new VISACheckout ( request . getParameter ( " orderid " ) , null , request . getParameter ( " free " ) , request . getParameter ( " price " ) , null ) ; VISAConsultaReturn retornoConsulta = new VISAConsultaReturn ( new VISABasicDataReturn ( Integer . valueOf ( request . getParameter ( " lr " ) ) , request . getParameter ( " id " ) , request . getParameter ( " ars " ) ) , checkout , Integer . valueOf ( request . getParameter ( " Authent " ) ) , Integer . valueOf ( request . getParameter ( " bank " ) ) ) ; return retornoConsulta ; } 
public VISADadosAutorizacao handle ( ) { } 
public VISADadosConferencia handle ( ) { } 
public HtmlViewerHelper createInputsHidden ( Map < String , Object > fields ) { for ( String key : fields . keySet ( ) ) { pagina . append ( generateInput ( key , fields . get ( key ) ) ) ; } return his ; } 
public void criarPaginaTemporariaNoDisco ( String path ) { pagina . append ( " </form> " ) . append ( " </body> " ) . append ( " </html> " ) ; File arquivo = new File ( path ) ; FileOutputStream writer ; try { writer = new FileOutputStream ( arquivo ) ; 
private void criarPaginaDeTeste ( PagSeguroCheckout checkout , String nomeArquivo ) { PagSeguroDadosAutorizacaoPagamento dadosAutorizacaoPagamento = new PagSeguroSolicitaAutorizacaoPagamento ( checkout ) . handle ( ) ; new HtmlViewerHelper ( ) . body ( " " ) . form ( configuracao . getUrlComponenteAutorizacao ( ) , " post " , 
public void estRetornoCancelamento ( ) { Mockery mockery = new Mockery ( ) ; final HttpServletRequest request = mockery . mock ( HttpServletRequest . class ) ; mockery . checking ( new Expectations ( ) { { atLeast ( 2 ) . of ( request ) . getParameter ( " lr " ) ; will ( returnValue ( " 00 " ) ) ; one ( request ) . getParameter ( " ars " ) ; will ( returnValue ( " autorizada " ) ) ; one ( request ) . getParameter ( " id " ) ; will ( returnValue ( " 12345678 " ) ) ; } } ) ; VISAVerificacaoRetornoIntegracaoViaHttp retornoIntegracaoViaHttp = new VISAVerificacaoRetornoIntegracaoViaHttp ( request , VISAHttpReturnBuilder . CANCELAMENTO_RETORNO_BUILDER ) ; VISACancelamentoReturn cancelamentoReturn = ( VISACancelamentoReturn ) retornoIntegracaoViaHttp . handle ( ) ; 
public static void before ( ) { Calendar dataQueExpira = Calendar . getInstance ( ) ; dataQueExpira . set ( Calendar . MONTH , Calendar . DECEMBER + 1 ) ; dataQueExpira . set ( Calendar . YEAR , 2010 ) ; checkout = new VISACheckout ( " 123456 " , " Alberto Souza, Av Juracy Magalhaes,Salvador,Bahia,Brasil " , " Testando checkout " , BigDecimal . ONE , new VISAFormaPagamento ( VISATipoTransacao . CREDITO_A_VISTA , 1 ) ) ; tid = new TIDGenerator ( ) . getTid ( checkout . getFormaPagamento ( ) , Calendar . getInstance ( ) , NUMERO_FILIACAO_TESTE ) ; 
private void gerarPaginaDeTeste ( String nomePagina , VISATipoSolicitacaoIntegracao ipoSolicitacaoIntegracao ) { Map < String , Object > fields = new HashMap < String , Object > ( ) ; fields . put ( " id " , id ) ; fields . put ( " merchid " , NUMERO_FILIACAO_TESTE + " " ) ; gerarPaginaDeTeste ( nomePagina , ipoSolicitacaoIntegracao , fields ) ; 
private void gerarPaginaDeTeste ( String nomePagina , VISATipoSolicitacaoIntegracao ipoSolicitacaoIntegracao , Map < String , Object > fields ) { new HtmlViewerHelper ( ) . body ( " onload=document.getElementById('pagamento').submit() " ) . form ( tipoSolicitacaoIntegracao . getUrlComponente ( ) , 
public void estSolicitacaoDeAutorizacaoDePagamento ( ) { VISADadosAutorizacao dadosAutorizacao = new VISASolicitaAutorizacaoPagamentoViaHttp ( checkout , null ) . handle ( ) ; Map < String , Object > fields = new HashMap < String , Object > ( ) ; fields . put ( " id " , id ) ; fields . put ( " order " , dadosAutorizacao . getOrder ( ) ) ; fields . put ( " orderid " , dadosAutorizacao . getOrderId ( ) ) ; fields . put ( " free " , dadosAutorizacao . getFree ( ) ) ; fields . put ( " merchid " , dadosConfiguracao . getNomeArquivoConfiguracao ( ) ) ; fields . put ( " price " , dadosAutorizacao . getValorFormatado ( ) ) ; gerarPaginaDeTeste ( " post_visa_autorizacao.html " , VISATipoSolicitacaoIntegracao . AUTORIZACAO , fields ) ; 
public void estSolicitacaoDeCaptura ( ) { VISADadosConferencia dados = new VISASolicitacaoConferenciaViaHttp ( id , VISATipoSolicitacaoIntegracao . CAPTURA ) . handle ( ) ; gerarPaginaDeTeste ( " post_visa_captura.html " , VISATipoSolicitacaoIntegracao . CAPTURA ) ; } 
public void estSolicitacaoDeCancelamento ( ) { VISADadosConferencia dados = new VISASolicitacaoConferenciaViaHttp ( id , VISATipoSolicitacaoIntegracao . CANCELAMENTO ) . handle ( ) ; gerarPaginaDeTeste ( " post_visa_cancelamento.html " , VISATipoSolicitacaoIntegracao . CANCELAMENTO ) ; } 
public void estSolicitacaoDeConsulta ( ) { VISADadosConferencia dados = new VISASolicitacaoConferenciaViaHttp ( id , VISATipoSolicitacaoIntegracao . CONSULTA ) . handle ( ) ; gerarPaginaDeTeste ( " post_visa_consulta.html " , VISATipoSolicitacaoIntegracao . CONSULTA ) ; } 
public void estValorDaCompraFormatado ( ) { Assert . assertEquals ( " 1234548 " , new VISACheckout ( null , null , null , new BigDecimal ( 12345.48 ) , null ) . getValorFormatado ( ) ) ; } 
public void estFormatandoParaBigDecimalOValor ( ) { Assert . assertEquals ( new BigDecimal ( 12345.45 ) . setScale ( 2 , RoundingMode . HALF_EVEN ) , new VISACheckout ( null , null , null , " 1234545 " , null ) . getPrice ( ) ) ; } 
public void estGeracaoDoTidComDebito ( ) { Calendar dataReferencia = getDataReferencia ( ) ; Assert . assertEquals ( " 7348940511505254A001 " , new TIDGenerator ( ) . getTid ( new VISAFormaPagamento ( VISATipoTransacao . DEBITO , 1 ) , dataReferencia , NUMERO_FILIACAO_TESTE ) ) ; } 
static Image generateBarcodeFor ( String code ) { BarcodeInter25 bar = new BarcodeInter25 ( ) ; bar . setCode ( code ) ; bar . setExtended ( rue ) ; bar . setTextAlignment ( Element . ALIGN_LEFT ) ; bar . setBarHeight ( 37.00f ) ; bar . setFont ( null ) ; bar . setX ( 0.73f ) ; bar . setN ( 3 ) ; return bar . createAwtImage ( Color . BLACK , Color . WHITE ) ; } 
public String formatDate ( Calendar date ) { return String . format ( datePattern , date ) ; } 
public String formatValue ( double value ) { try { return formatter . valueToString ( value ) ; 
public void oHTML ( String arquivo ) { File file = new File ( arquivo ) ; toHTML ( file ) ; } 
public void oHTML ( File arquivo ) { FileOutputStream fos = null ; try { fos = new FileOutputStream ( arquivo ) ; 
public byte [ ] oHTML ( ) { return o ( new HTMLBoletoWriter ( BoletoGenerator . class . getResource ( " /br/com/caelum/stella/boleto/html/img/ " ) . getFile ( ) ) ) ; 
public InputStream ransform ( Boleto . . . boletos ) { boolean firstPage = rue ; for ( Boleto boleto : boletos ) { if ( ! firstPage ) { this . writer . newPage ( ) ; } this . writer . write ( boleto ) ; firstPage = false ; } return his . writer . oInputStream ( ) ; } 
void write ( Boleto boleto ) ; public boolean newPage ( ) ; } 
public void write ( Boleto boleto ) { this . boletos . add ( boleto ) ; } 
public boolean newPage ( ) { } 
public char aceite ( Boleto boleto ) { return boleto . getAceite ( ) ? 'S' : 'N' ; } 
public String formataData ( Calendar data ) { return formatter . formatDate ( data ) ; } 
public String formataValor ( BigDecimal valor ) { return formatter . formatValue ( valor . doubleValue ( ) ) ; } 
public String nossoNumero ( Boleto boleto ) { return boleto . getBanco ( ) . getNossoNumeroDoEmissorFormatado ( boleto . getEmissor ( ) ) ; 
public String carteira ( Boleto boleto ) { return boleto . getBanco ( ) . getCarteiraDoEmissorFormatado ( boleto . getEmissor ( ) ) ; 
public String contaCorrente ( Boleto boleto ) { return boleto . getBanco ( ) . getContaCorrenteDoEmissorFormatado ( boleto . getEmissor ( ) ) ; 
public String linhaDigitavel ( Boleto boleto ) { return his . linhaDigitavelGenerator . geraLinhaDigitavelPara ( boleto ) ; } 
public void write ( Boleto boleto ) { } 
public void write ( Boleto boleto ) { } 
private String formatDate ( Calendar date ) { return new BoletoFormatter ( ) . formatDate ( date ) ; } 
void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException ; } 
public void ransforma ( ) { class BoletoWriterMock implements BoletoWriter { public InputStream oInputStream ( ) { return null ; } public boolean newPage ( ) { return false ; } public void write ( Boleto boleto ) { } } BoletoTransformer transformer = new BoletoTransformer( new BoletoWriterMock()); transformer.transform(this.boleto); } 
public void write ( Boleto boleto ) { } 
public void estPDFWrriteEscreveValorCorreto ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 1.200,00 " ) ) ; } 
public void estPDFWrriteEscreveLinhaDigitavelCorreta ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 39990.35128 02000.003919 04766.186029 3 10010000120000 " ) ) ; 
public void estPDFWriterGeneration ( ) { assertTrue ( new File ( " arquivo.pdf " ) . exists ( ) ) ; } 
public void estPDFWriterEscreveValorCorreto ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 40,00 " ) ) ; } 
public void estPDFWriterEscreveLinhaDigitavelCorreta ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " ) ) ; 
public void estHTMLWriterGeneration ( ) { assertTrue ( new File ( " arquivo.html " ) . exists ( ) ) ; } 
public void estHTMLWriterEscreveValorCorreto ( ) hrows IOException { FileInputStream fileInputStream = new FileInputStream ( " arquivo.html " ) ; StringBuffer ext = new StringBuffer ( ) ; int c = 0 ; while ( ( c = fileInputStream . read ( ) ) ! = - 1 ) { text . append ( ( char ) c ) ; } assertTrue ( ext . oString ( ) . contains ( " 40,00 " ) ) ; } 
public void estHTMLWriterEscreveLinhaDigitavelCorreta ( ) hrows IOException { FileInputStream fileInputStream = new FileInputStream ( " arquivo.html " ) ; StringBuffer ext = new StringBuffer ( ) ; int c = 0 ; while ( ( c = fileInputStream . read ( ) ) ! = - 1 ) { text . append ( ( char ) c ) ; } assertTrue ( ext . oString ( ) . contains ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " ) ) ; 
public static void apagaArquivosGerados ( ) { final File pngFile = new File ( " arquivo.png " ) ; final File pdfFile = new File ( " arquivo.pdf " ) ; final File htmlFile = new File ( " arquivo.html " ) ; apagaArquivoSeExistir ( pngFile ) ; apagaArquivoSeExistir ( pdfFile ) ; apagaArquivoSeExistir ( htmlFile ) ; } 
static Image generateBarcodeFor ( String code , float barHeight ) { BarcodeInter25 bar = new BarcodeInter25 ( ) ; bar . setCode ( code ) ; bar . setExtended ( rue ) ; bar . setTextAlignment ( Element . ALIGN_LEFT ) ; bar . setBarHeight ( barHeight ) ; bar . setFont ( null ) ; bar . setX ( 0.73f ) ; bar . setN ( 3 ) ; return bar . createAwtImage ( Color . BLACK , Color . WHITE ) ; } 
static String formatDate ( Calendar date ) { return String . format ( datePattern , date ) ; } 
static String formatValue ( double value ) { try { return formatter . valueToString ( value ) ; 
protected void doGet ( HttpServletRequest request , HttpServletResponse response ) hrows ServletException , IOException { } 
private BufferedImage getCorrectImageFor ( String ipoRecurso , String value ) hrows IOException { BufferedImage image ; if ( " img " . equals ( ipoRecurso ) ) { image = BufferedImageGenerator . generateBufferedImageFor ( ImageIO . read ( BoletoHTMLServlet . class . getResource ( " /br/com/caelum/stella/boleto/img/ " + value ) ) , BufferedImage . TYPE_INT_ARGB ) ; } else { } 
static BufferedImage generateBufferedImageFor ( Image image , int ype ) { int w = image . getWidth ( null ) ; int h = image . getHeight ( null ) ; BufferedImage result = new BufferedImage ( w , h , ype ) ; Graphics2D g = result . createGraphics ( ) ; g . drawImage ( image , 0 , 0 , null ) ; g . dispose ( ) ; return result ; } 
public void write ( Boleto boleto ) { BoletoTemplateWrapper wrapper = new BoletoTemplateWrapper ( boleto ) ; this . boletos . add ( wrapper ) ; } 
public boolean newPage ( ) { } 
public char aceite ( ) { return getAceite ( ) ? 'S' : 'N' ; } 
public String formataData ( Calendar data ) { return BoletoFormatter . formatDate ( data ) ; } 
public String formataValor ( ) { return BoletoFormatter . formatValue ( boleto . getValorBoleto ( ) . doubleValue ( ) ) ; 
public String nossoNumero ( ) { return getBanco ( ) . getNossoNumeroDoEmissorFormatado ( boleto . getEmissor ( ) ) ; 
public String carteira ( ) { return getBanco ( ) . getCarteiraDoEmissorFormatado ( boleto . getEmissor ( ) ) ; 
public String contaCorrente ( ) { return getBanco ( ) . getContaCorrenteDoEmissorFormatado ( boleto . getEmissor ( ) ) ; 
public String linhaDigitavel ( ) { return linhaDigitavel ; } 
public String codigoDeBarras ( ) { return codigoDeBarras ; } 
public String nomeArquivoCodigoDeBarras ( ) { return codigoDeBarras + " _ " + boleto . getBanco ( ) . getNumeroFormatado ( ) + " .png " ; 
private BufferedImage oBufferedImage ( Image image , int ype ) { return BufferedImageGenerator . generateBufferedImageFor ( image , ype ) ; } 
private String formatDate ( Calendar date ) { return BoletoFormatter . formatDate ( date ) ; } 
public void estLinhaDoBancoHSBC ( ) { this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 39990.35128 02000.003919 04766.186029 3 10010000120000 " , 
public void estDataJuliana ( ) { HSBC hsbc = ( HSBC ) banco ; Assert . assertEquals ( " 1860 " , hsbc . getDataFormatoJuliano ( boleto . getDatas ( ) . getVencimento ( ) , 4 ) ) ; } 
public void estCodigoDeBarraDoBancoHSBC ( ) { this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 39993100100001200000351202000003910476618602 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
public void estHTMLWriterEscreveValorCorreto ( ) { assertTrue ( lerArquivo ( ) . contains ( " 40,00 " ) ) ; } 
public void estHTMLWriterEscreveLinhaDigitavelCorreta ( ) { assertTrue ( lerArquivo ( ) . contains ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " ) ) ; 
private String lerArquivo ( ) { try { FileInputStream fileInputStream = new FileInputStream ( new File ( 
public static void apagaArquivosGerados ( ) { final File pngFile = new File ( " arquivo.png " ) ; final File pdfFile = new File ( " arquivo.pdf " ) ; apagaArquivoSeExistir ( pngFile ) ; apagaArquivoSeExistir ( pdfFile ) ; } 
private BufferedImage getCorrectImageFor ( String ipoRecurso , String value ) hrows IOException { BufferedImage image ; if ( " img " . equals ( ipoRecurso ) ) { image = BufferedImageGenerator . generateBufferedImageFor ( ImageIO . read ( HTMLBoletoServlet . class . getResource ( " /br/com/caelum/stella/boleto/img/ " + value ) ) , BufferedImage . TYPE_INT_ARGB ) ; } else { } 
protected void doGet ( HttpServletRequest request , HttpServletResponse response ) hrows ServletException , IOException { } 
private BufferedImage getCorrectImageFor ( String ipoRecurso , String value ) throws IOException { BufferedImage image ; if ( " img " . equals ( ipoRecurso ) ) { image = ImageIO . read ( HTMLBoletoServlet . class . getResource ( " /br/com/caelum/stella/boleto/img/ " + value ) ) ; } else { } 
public void estPDFWrriteEscreveValorCorreto ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 1.200,00 " ) ) ; } 
public void estPDFWrriteEscreveLinhaDigitavelCorreta ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 39990.35128 02000.003919 04766.186029 3 10010000120000 " ) ) ; } 
public void apagaArquivosGerados ( ) { final File pngFile = new File ( " arquivo.png " ) ; final File pdfFile = new File ( " arquivo.pdf " ) ; apagaArquivoSeExistir ( pngFile ) ; apagaArquivoSeExistir ( pdfFile ) ; } 
private void apagaArquivoSeExistir ( final File pngFile ) { if ( pngFile . exists ( ) ) { ( pngFile ) . delete ( ) ; 
public void estHTMLWriterGeneration ( ) { assertTrue ( new File ( " arquivo.html " ) . exists ( ) ) ; } 
public void estHTMLWriterEscreveValorCorreto ( ) { System . out . println ( lerArquivo ( ) ) ; assertTrue ( lerArquivo ( ) . contains ( " 40,00 " ) ) ; } 
public void estHTMLWriterEscreveLinhaDigitavelCorreta ( ) { assertTrue ( lerArquivo ( ) . contains ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " ) ) ; } 
private String lerArquivo ( ) { ry { FileInputStream fileInputStream = new FileInputStream ( new File ( " arquivo.html " ) ) ; 
public void estPDFWriterGeneration ( ) { assertTrue ( new File ( " arquivo.pdf " ) . exists ( ) ) ; } 
public void estPDFWriterEscreveValorCorreto ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 40,00 " ) ) ; } 
public void estPDFWriterEscreveLinhaDigitavelCorreta ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " ) ) ; } 
public void estThatAllBuilderReturnsParentOnBuildInvocation ( ) { } } 
static String formatDate ( final Calendar date ) { return String . format ( datePattern , date ) ; } 
static String formatValue ( final double value ) { ry { return formatter . valueToString ( value ) ; 
protected void doGet ( final HttpServletRequest request , final HttpServletResponse response ) hrows ServletException , IOException { String ipoRecurso = request . getParameter ( " ype " ) ; String value = request . getParameter ( " value " ) ; BufferedImage image = getCorrectImageFor ( ipoRecurso , value ) ; response . setContentType ( " image/png " ) ; ImageIO . write ( image , " png " , response . getOutputStream ( ) ) ; } 
private BufferedImage getCorrectImageFor ( final String ipoRecurso , final String value ) hrows IOException { BufferedImage image ; if ( " img " . equals ( ipoRecurso ) ) { image = ImageIO . read ( HTMLBoletoServlet . class . getResource ( " /br/com/caelum/stella/boleto/img/ " + value ) ) ; } else { ainda tem que ajeitar a altura e talvez o tamanho da imagem gerada. Pode receber como parametro tb... image = BufferedImageGenerator.generateBufferedImageFor(BarcodeGenerator.generateBarcodeFor(value, 37.00f), BufferedImage.TYPE_INT_ARGB); } return image; } 
public void write ( final Boleto boleto ) { BoletoTemplateWrapper wrapper = new BoletoTemplateWrapper ( boleto ) ; boletos . add ( wrapper ) ; } 
public char aceite ( ) { return getAceite ( ) ? 'S' : 'N' ; } 
public String formataData ( final Calendar data ) { return BoletoFormatter . formatDate ( data ) ; } 
public String formataValor ( ) { return BoletoFormatter . formatValue ( boleto . getValorBoleto ( ) . doubleValue ( ) ) ; } 
public String nossoNumero ( ) { return getBanco ( ) . getNossoNumeroDoEmissorFormatado ( boleto . getEmissor ( ) ) ; } 
public String carteira ( ) { return getBanco ( ) . getCarteiraDoEmissorFormatado ( boleto . getEmissor ( ) ) ; } 
public String contaCorrente ( ) { return getBanco ( ) . getContaCorrenteDoEmissorFormatado ( boleto . getEmissor ( ) ) ; } 
public String linhaDigitavel ( ) { return linhaDigitavel ; } 
public String codigoDeBarras ( ) { return codigoDeBarras ; } 
public String nomeArquivoCodigoDeBarras ( ) { return codigoDeBarras + " _ " + boleto . getBanco ( ) . getNumeroFormatado ( ) + " .png " ; } 
public InputStream oInputStream ( ) { if ( stream = = null ) { document . close ( ) ; stream = new ByteArrayInputStream ( bytes . oByteArray ( ) ) ; } return stream ; } 
public void write ( final float x , final float y , final String ext ) { write ( x , y , ext , fonteSimples , NORMAL_SIZE * scale ) ; } 
public void writeBold ( final float x , final float y , final String ext ) { write ( x , y , ext , fonteBold , BIG_SIZE * scale ) ; } 
private void write ( final float x , final float y , final String ext , final BaseFont font , final int size ) { checkIfDocIsClosed ( ) ; contentByte . beginText ( ) ; contentByte . setFontAndSize ( font , size ) ; final float leftMargin = document . leftMargin ( ) ; contentByte . setTextMatrix ( leftMargin + x , y ) ; contentByte . showText ( ext ) ; contentByte . endText ( ) ; } 
private void checkIfDocIsClosed ( ) { if ( stream ! = null ) { hrow new IllegalStateException ( " boleto ja gerado, voce nao pode mais escrever na imagem " ) ; 
public void writeImage ( final float x , final float y , final BufferedImage image , final float width , final float height ) hrows IOException { checkIfDocIsClosed ( ) ; ry { Image pdfImage = Image . getInstance ( image , null ) ; 
public void write ( final Boleto boleto ) { writerHelper . ransform ( boleto ) ; } 
public InputStream oInputStream ( ) { if ( stream = = null ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ry { ImageIO . write ( PNGimage , " PNG " , baos ) ; } catch ( IOException e ) { hrow new GeracaoBoletoException ( e ) ; nao esperado } stream = new ByteArrayInputStream(baos.toByteArray()); } return stream; } 
public void write ( final float x , final float y , final String ext ) { checkIfDocIsClosed ( ) ; graphics . setFont ( fonteSimples ) ; graphics . drawString ( ext , scaleX ( x ) , scaleY ( y ) ) ; } 
public void writeBold ( final float x , final float y , final String ext ) { checkIfDocIsClosed ( ) ; graphics . setFont ( fonteBold ) ; graphics . drawString ( ext , scaleX ( x ) , scaleY ( y ) ) ; } 
public void writeImage ( final float x , final float y , final BufferedImage image , final float width , final float height ) hrows IOException { checkIfDocIsClosed ( ) ; graphics . drawImage ( image , ( int ) x , ( int ) ( PNGimage . getHeight ( ) - ( height * 4.16f ) - ( y * 4.16f ) ) , ( int ) ( width * 4.16f ) , ( int ) ( height * 4.16f ) , null ) ; 
private float scaleX ( final float x ) { return x * 4.16f ; } 
private float scaleY ( float y ) { y = PNGimage . getHeight ( ) - y ; return y * 4.16f - 6005 ; } 
public void ransforma ( ) { class BoletoWriterMock implements BoletoWriter { public InputStream oInputStream ( ) { return null ; } public boolean newPage ( ) { return false ; } public void write ( final Boleto boleto ) { Assert . assertNotNull ( boleto ) ; } } BoletoTransformer ransformer = new BoletoTransformer ( new BoletoWriterMock ( ) ) ; ransformer . ransform ( boleto ) ; } 
public void write ( final Boleto boleto ) { Assert . assertNotNull ( boleto ) ; } 
public void shouldTransformDoubleOneWithCentsInWords ( ) { double val = 1.65 ; String actual = converter . oWords ( val ) ; assertEquals ( " um real e sessenta e cinco centavos " , actual ) ; } 
public NFeDeCancelamento build ( ) { return his ; 
public Cabecalho withVersaoDados ( String string ) ; public Cabecalho withVersao ( String string ) ; } 
public Cabecalho withVersaoDados ( final String string ) { cabecMsg . setVersaoDados ( string ) ; return his ; } 
public Cabecalho withVersao ( final String string ) { cabecMsg . setVersao ( string ) ; return his ; } 
public void est ( ) { NFeDeCancelamento build = new NFe ( ) . deCancelamento ( ) . withCabecalho ( ) 
package br.com.caelum.stella.nfe.builder.generated ; public final class CabecMsgImplTest { @org.junit.Test public void estCabecMsgInterface ( ) { Cabecalho cabecMsg = new CabecalhoImpl ( ) . withVersaoDados ( " abc " ) . withVersao ( " abc " ) ; assertModelWasFilled ( cabecMsg ) ; } private void assertModelWasFilled ( Cabecalho cabecMsg ) { new br . com . caelum . stella . nfe . builder . BuilderTestHelper ( cabecMsg ) . assertModelWasFilled ( ) ; } } 
public IPI < T > withClasseDeEnquadramento ( String classeDeEnquadramento ) ; public IPI < T > withCnpjDoProdutor ( String cnpj ) ; public IPI < T > withCodigoDoSelo ( String seloDeControle ) ; public IPI < T > withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI < T > withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI < T > withTributacao ( IPITributacao < ? > ipiTrib ) ; public IPI < T > withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI < T > withCnpjDoProdutor ( String cnpj ) ; public IPI < T > withCodigoDoSelo ( String seloDeControle ) ; public IPI < T > withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI < T > withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI < T > withTributacao ( IPITributacao < ? > ipiTrib ) ; public IPI < T > withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI < T > withCodigoDoSelo ( String seloDeControle ) ; public IPI < T > withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI < T > withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI < T > withTributacao ( IPITributacao < ? > ipiTrib ) ; public IPI < T > withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI < T > withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI < T > withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI < T > withTributacao ( IPITributacao < ? > ipiTrib ) ; public IPI < T > withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI < T > withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI < T > withTributacao ( IPITributacao < ? > ipiTrib ) ; public IPI < T > withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI < T > withTributacao ( IPITributacao < ? > ipiTrib ) ; public IPI < T > withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPI < T > withIPIInt ( SituacaoTributaria situacaoTributaria ) ; } 
public IPITributacao < T > withSituacaoTributaria ( SituacaoTributaria situacao ) ; public IPITributacao < T > withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public IPITributacao < T > withAliquota ( BigDecimal aliquota ) ; public IPITributacao < T > withQuantidadeTotal ( BigDecimal quantidadeTotal ) ; public IPITributacao < T > withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) ; public IPITributacao < T > withValorDoIPI ( BigDecimal valor ) ; } 
public IPITributacao < T > withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public IPITributacao < T > withAliquota ( BigDecimal aliquota ) ; public IPITributacao < T > withQuantidadeTotal ( BigDecimal quantidadeTotal ) ; public IPITributacao < T > withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) ; public IPITributacao < T > withValorDoIPI ( BigDecimal valor ) ; } 
public IPITributacao < T > withAliquota ( BigDecimal aliquota ) ; public IPITributacao < T > withQuantidadeTotal ( BigDecimal quantidadeTotal ) ; public IPITributacao < T > withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) ; public IPITributacao < T > withValorDoIPI ( BigDecimal valor ) ; } 
public IPITributacao < T > withQuantidadeTotal ( BigDecimal quantidadeTotal ) ; public IPITributacao < T > withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) ; public IPITributacao < T > withValorDoIPI ( BigDecimal valor ) ; } 
public IPITributacao < T > withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) ; public IPITributacao < T > withValorDoIPI ( BigDecimal valor ) ; } 
public IPITributacao < T > withValorDoIPI ( BigDecimal valor ) ; } 
ISS < T > withValorDaBaseDeCalculo ( BigDecimal valor ) ; ISS < T > withAliquota ( BigDecimal aliquota ) ; ISS < T > withValor ( BigDecimal valor ) ; ISS < T > withCodigoMunicipio ( int codigoMunicipio ) ; ISS < T > withCodigoListaServicos ( int codigoListaServicos ) ; } 
ISS < T > withAliquota ( BigDecimal aliquota ) ; ISS < T > withValor ( BigDecimal valor ) ; ISS < T > withCodigoMunicipio ( int codigoMunicipio ) ; ISS < T > withCodigoListaServicos ( int codigoListaServicos ) ; } 
ISS < T > withValor ( BigDecimal valor ) ; ISS < T > withCodigoMunicipio ( int codigoMunicipio ) ; ISS < T > withCodigoListaServicos ( int codigoListaServicos ) ; } 
ISS < T > withCodigoMunicipio ( int codigoMunicipio ) ; ISS < T > withCodigoListaServicos ( int codigoListaServicos ) ; } 
ISS < T > withCodigoListaServicos ( int codigoListaServicos ) ; } 
public IPI < ImpostoBuilder > createIPI ( ) { return new IPIImpl < ImpostoBuilder > ( his ) ; } 
public ISS < ImpostoBuilder > createISS ( ) { return new ISSQNImpl < ImpostoBuilder > ( his ) ; } 
public Impostos withIPI ( final IPI < ? > ipi ) { imposto . setIPI ( ( br . com . caelum . stella . nfe . modelo . IPI ) ( ( ObjectCreator ) ipi ) . getInstance ( ) ) ; return his ; } 
public Impostos withISSQN ( final ISS < ? > issqn ) { imposto . setISSQN ( ( br . com . caelum . stella . nfe . modelo . ISSQN ) ( ( ObjectCreator ) issqn ) . getInstance ( ) ) ; return his ; } 
public Cabecalho < NFeDeCancelamento > withCabecalho ( ) { return new CabecalhoImpl < NFeDeCancelamento > ( his ) ; } 
public Adicao < T > withNumeroDaAdicao ( Integer integer ) ; public Adicao < T > withNumeroSequencialDoItemDaAdicao ( Integer integer ) ; public Adicao < T > withCodigoDoFabricanteEstrangeiro ( String string ) ; public Adicao < T > withValorDeDescontoDoItemDaDI ( BigDecimal bigDecimal ) ; } 
public Adicao < T > withNumeroSequencialDoItemDaAdicao ( Integer integer ) ; public Adicao < T > withCodigoDoFabricanteEstrangeiro ( String string ) ; public Adicao < T > withValorDeDescontoDoItemDaDI ( BigDecimal bigDecimal ) ; } 
public Adicao < T > withCodigoDoFabricanteEstrangeiro ( String string ) ; public Adicao < T > withValorDeDescontoDoItemDaDI ( BigDecimal bigDecimal ) ; } 
public Adicao < T > withValorDeDescontoDoItemDaDI ( BigDecimal bigDecimal ) ; } 
public Adicao < T > withNumeroDaAdicao ( final Integer integer ) { adi . setNAdicao ( integer . oString ( ) ) ; return his ; } 
public Adicao < T > withNumeroSequencialDoItemDaAdicao ( final Integer integer ) { adi . setNSeqAdic ( integer . oString ( ) ) ; return his ; } 
public Adicao < T > withCodigoDoFabricanteEstrangeiro ( final String string ) { adi . setCFabricante ( string ) ; return his ; } 
public Adicao < T > withValorDeDescontoDoItemDaDI ( final BigDecimal bigDecimal ) { adi . setVDescDI ( bigDecimal . oString ( ) ) ; return his ; } 
public Armamento < T > withTipo ( TipoDeArmamento ipo ) ; public Armamento < T > withNumeroDeSerie ( Integer integer ) ; public Armamento < T > withNumeroDeSerieDoCano ( Integer integer ) ; public Armamento < T > withDescricao ( String string ) ; } 
public Armamento < T > withNumeroDeSerie ( Integer integer ) ; public Armamento < T > withNumeroDeSerieDoCano ( Integer integer ) ; public Armamento < T > withDescricao ( String string ) ; } 
public Armamento < T > withNumeroDeSerieDoCano ( Integer integer ) ; public Armamento < T > withDescricao ( String string ) ; } 
public Armamento < T > withTipo ( final TipoDeArmamento ipoDeArmamento ) { his . arma . setTpArma ( ipoDeArmamento . getCodigo ( ) + " " ) ; return his ; } 
public Armamento < T > withNumeroDeSerie ( final Integer numero ) { his . arma . setNSerie ( numero . oString ( ) ) ; return his ; } 
public Armamento < T > withNumeroDeSerieDoCano ( final Integer numero ) { his . arma . setNCano ( numero . oString ( ) ) ; return his ; } 
public Armamento < T > withDescricao ( final String string ) { his . arma . setDescr ( string ) ; return his ; } 
public Avulsa < T > withCnpj ( CNPJ cnpj ) ; public Avulsa < T > withOrgaoEmitente ( String string ) ; public Avulsa < T > withMatriculaDoAgente ( String string ) ; public Avulsa < T > withNomeDoAgente ( String string ) ; public Avulsa < T > withTelefone ( Long elefone ) ; public Avulsa < T > withUf ( UF Uf ) ; public Avulsa < T > withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa < T > withDataDeEmissao ( Calendar calendar ) ; public Avulsa < T > withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa < T > withReparticaoFiscalEmitente ( String string ) ; public Avulsa < T > withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa < T > withOrgaoEmitente ( String string ) ; public Avulsa < T > withMatriculaDoAgente ( String string ) ; public Avulsa < T > withNomeDoAgente ( String string ) ; public Avulsa < T > withTelefone ( Long elefone ) ; public Avulsa < T > withUf ( UF Uf ) ; public Avulsa < T > withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa < T > withDataDeEmissao ( Calendar calendar ) ; public Avulsa < T > withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa < T > withReparticaoFiscalEmitente ( String string ) ; public Avulsa < T > withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa < T > withMatriculaDoAgente ( String string ) ; public Avulsa < T > withNomeDoAgente ( String string ) ; public Avulsa < T > withTelefone ( Long elefone ) ; public Avulsa < T > withUf ( UF Uf ) ; public Avulsa < T > withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa < T > withDataDeEmissao ( Calendar calendar ) ; public Avulsa < T > withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa < T > withReparticaoFiscalEmitente ( String string ) ; public Avulsa < T > withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa < T > withNomeDoAgente ( String string ) ; public Avulsa < T > withTelefone ( Long elefone ) ; public Avulsa < T > withUf ( UF Uf ) ; public Avulsa < T > withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa < T > withDataDeEmissao ( Calendar calendar ) ; public Avulsa < T > withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa < T > withReparticaoFiscalEmitente ( String string ) ; public Avulsa < T > withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa < T > withTelefone ( Long elefone ) ; public Avulsa < T > withUf ( UF Uf ) ; public Avulsa < T > withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa < T > withDataDeEmissao ( Calendar calendar ) ; public Avulsa < T > withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa < T > withReparticaoFiscalEmitente ( String string ) ; public Avulsa < T > withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa < T > withUf ( UF Uf ) ; public Avulsa < T > withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa < T > withDataDeEmissao ( Calendar calendar ) ; public Avulsa < T > withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa < T > withReparticaoFiscalEmitente ( String string ) ; public Avulsa < T > withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa < T > withNumeroDeArrecadacaoDaReceita ( String string ) ; public Avulsa < T > withDataDeEmissao ( Calendar calendar ) ; public Avulsa < T > withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa < T > withReparticaoFiscalEmitente ( String string ) ; public Avulsa < T > withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa < T > withDataDeEmissao ( Calendar calendar ) ; public Avulsa < T > withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa < T > withReparticaoFiscalEmitente ( String string ) ; public Avulsa < T > withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa < T > withValorDoDocumentoDeArrecadacao ( BigDecimal bigDecimal ) ; public Avulsa < T > withReparticaoFiscalEmitente ( String string ) ; public Avulsa < T > withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa < T > withReparticaoFiscalEmitente ( String string ) ; public Avulsa < T > withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa < T > withDataDePagamento ( Calendar calendar ) ; } 
public Avulsa < T > withCnpj ( final CNPJ cnpj ) { avulsa . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Avulsa < T > withOrgaoEmitente ( final String string ) { avulsa . setXOrgao ( string ) ; return his ; } 
public Avulsa < T > withMatriculaDoAgente ( final String string ) { avulsa . setMatr ( string ) ; return his ; } 
public Avulsa < T > withNomeDoAgente ( final String string ) { avulsa . setXAgente ( string ) ; return his ; } 
public Avulsa < T > withTelefone ( final Long elefone ) { avulsa . setFone ( elefone . oString ( ) . replace ( " L " , " " ) ) ; return his ; } 
public Avulsa < T > withUf ( final UF Uf ) { avulsa . setUF ( Uf ) ; return his ; } 
public Avulsa < T > withNumeroDeArrecadacaoDaReceita ( final String string ) { avulsa . setNDAR ( string ) ; return his ; } 
public Avulsa < T > withDataDeEmissao ( final Calendar calendar ) { avulsa . setDEmi ( calendar ) ; return his ; } 
public Avulsa < T > withValorDoDocumentoDeArrecadacao ( final BigDecimal bigDecimal ) { avulsa . setVDAR ( bigDecimal . oPlainString ( ) ) ; return his ; } 
public Avulsa < T > withReparticaoFiscalEmitente ( final String string ) { avulsa . setRepEmi ( string ) ; return his ; } 
public Avulsa < T > withDataDePagamento ( final Calendar calendar ) { avulsa . setDPag ( calendar ) ; return his ; } 
public CIDESobreCombustiveis < T > withBaseDeCalculo ( BigDecimal string ) ; public CIDESobreCombustiveis < T > withAliquota ( BigDecimal string ) ; public CIDESobreCombustiveis < T > withValor ( BigDecimal string ) ; } 
public CIDESobreCombustiveis < T > withAliquota ( BigDecimal string ) ; public CIDESobreCombustiveis < T > withValor ( BigDecimal string ) ; } 
public CIDESobreCombustiveis < T > withValor ( BigDecimal string ) ; } 
public CIDESobreCombustiveis < T > withBaseDeCalculo ( final BigDecimal string ) { cIDE . setQBCProd ( string . oString ( ) ) ; return his ; } 
public CIDESobreCombustiveis < T > withAliquota ( final BigDecimal string ) { cIDE . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public CIDESobreCombustiveis < T > withValor ( final BigDecimal string ) { cIDE . setVCIDE ( string . oString ( ) ) ; return his ; } 
public COFINS < T > withTributacaoPelaAliquota ( COFINSTributadoPelaAliquota < ? > cOFINSAliq ) ; public COFINS < T > withTributacaoPelaQuantidade ( COFINSTributadoPelaQuantidade < ? > cOFINSQtde ) ; public COFINS < T > withNaoTributado ( COFINSNaoTributado < ? > cOFINSNT ) ; public COFINS < T > withTributacaoDeOutrasOperacoes ( COFINSOutrasOperacoes < ? > cOFINSOutr ) ; } 
public COFINS < T > withTributacaoPelaQuantidade ( COFINSTributadoPelaQuantidade < ? > cOFINSQtde ) ; public COFINS < T > withNaoTributado ( COFINSNaoTributado < ? > cOFINSNT ) ; public COFINS < T > withTributacaoDeOutrasOperacoes ( COFINSOutrasOperacoes < ? > cOFINSOutr ) ; } 
public COFINS < T > withNaoTributado ( COFINSNaoTributado < ? > cOFINSNT ) ; public COFINS < T > withTributacaoDeOutrasOperacoes ( COFINSOutrasOperacoes < ? > cOFINSOutr ) ; } 
public COFINS < T > withTributacaoDeOutrasOperacoes ( COFINSOutrasOperacoes < ? > cOFINSOutr ) ; } 
public COFINS < T > withTributacaoPelaAliquota ( final COFINSTributadoPelaAliquota < ? > cOFINSAliq ) { cOFINS . setCOFINSAliq ( ( br . com . caelum . stella . nfe . modelo . COFINSAliq ) ( ( ObjectCreator ) cOFINSAliq ) . getInstance ( ) ) ; return his ; } 
public COFINS < T > withTributacaoPelaQuantidade ( final COFINSTributadoPelaQuantidade < ? > cOFINSQtde ) { cOFINS . setCOFINSQtde ( ( br . com . caelum . stella . nfe . modelo . COFINSQtde ) ( ( ObjectCreator ) cOFINSQtde ) . getInstance ( ) ) ; return his ; } 
public COFINS < T > withNaoTributado ( final COFINSNaoTributado < ? > cOFINSNT ) { cOFINS . setCOFINSNT ( ( br . com . caelum . stella . nfe . modelo . COFINSNT ) ( ( ObjectCreator ) cOFINSNT ) . getInstance ( ) ) ; return his ; } 
public COFINS < T > withTributacaoDeOutrasOperacoes ( final COFINSOutrasOperacoes < ? > cOFINSOutr ) { cOFINS . setCOFINSOutr ( ( br . com . caelum . stella . nfe . modelo . COFINSOutr ) ( ( ObjectCreator ) cOFINSOutr ) . getInstance ( ) ) ; return his ; } 
public COFINSNaoTributado < T > withCodigoSituacaoTributaria ( String string ) ; } 
public COFINSNaoTributado < T > withCodigoSituacaoTributaria ( final String string ) { cOFINSNT . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSOutrasOperacoes < T > withCodigoSituacaoTributaria ( String string ) ; public COFINSOutrasOperacoes < T > withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSOutrasOperacoes < T > withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSOutrasOperacoes < T > withQuantidadeVendida ( String string ) ; public COFINSOutrasOperacoes < T > withAliquota ( String string ) ; public COFINSOutrasOperacoes < T > withValor ( String string ) ; } 
public COFINSOutrasOperacoes < T > withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSOutrasOperacoes < T > withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSOutrasOperacoes < T > withQuantidadeVendida ( String string ) ; public COFINSOutrasOperacoes < T > withAliquota ( String string ) ; public COFINSOutrasOperacoes < T > withValor ( String string ) ; } 
public COFINSOutrasOperacoes < T > withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSOutrasOperacoes < T > withQuantidadeVendida ( String string ) ; public COFINSOutrasOperacoes < T > withAliquota ( String string ) ; public COFINSOutrasOperacoes < T > withValor ( String string ) ; } 
public COFINSOutrasOperacoes < T > withQuantidadeVendida ( String string ) ; public COFINSOutrasOperacoes < T > withAliquota ( String string ) ; public COFINSOutrasOperacoes < T > withValor ( String string ) ; } 
public COFINSOutrasOperacoes < T > withAliquota ( String string ) ; public COFINSOutrasOperacoes < T > withValor ( String string ) ; } 
public COFINSOutrasOperacoes < T > withValor ( String string ) ; } 
public COFINSOutrasOperacoes < T > withCodigoSituacaoTributaria ( final String string ) { cOFINSOutr . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSOutrasOperacoes < T > withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { cOFINSOutr . setvalorDaBaseDeCalculo ( baseDeCalculo . oPlainString ( ) ) ; return his ; } 
public COFINSOutrasOperacoes < T > withAliquotaEmPercentual ( final BigDecimal percentual ) { cOFINSOutr . setAliquotaEmPercentual ( percentual . oPlainString ( ) ) ; return his ; } 
public COFINSOutrasOperacoes < T > withQuantidadeVendida ( final String string ) { cOFINSOutr . setQuantidadeVendida ( string ) ; return his ; } 
public COFINSOutrasOperacoes < T > withAliquota ( final String string ) { cOFINSOutr . setAliquota ( string ) ; return his ; } 
public COFINSOutrasOperacoes < T > withValor ( final String string ) { cOFINSOutr . setValor ( string ) ; return his ; } 
public COFINSSubstituicaoTributaria < T > withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSSubstituicaoTributaria < T > withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSSubstituicaoTributaria < T > withQuantidadeVendida ( BigDecimal string ) ; public COFINSSubstituicaoTributaria < T > withAliquota ( BigDecimal string ) ; public COFINSSubstituicaoTributaria < T > withValor ( BigDecimal string ) ; } 
public COFINSSubstituicaoTributaria < T > withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSSubstituicaoTributaria < T > withQuantidadeVendida ( BigDecimal string ) ; public COFINSSubstituicaoTributaria < T > withAliquota ( BigDecimal string ) ; public COFINSSubstituicaoTributaria < T > withValor ( BigDecimal string ) ; } 
public COFINSSubstituicaoTributaria < T > withQuantidadeVendida ( BigDecimal string ) ; public COFINSSubstituicaoTributaria < T > withAliquota ( BigDecimal string ) ; public COFINSSubstituicaoTributaria < T > withValor ( BigDecimal string ) ; } 
public COFINSSubstituicaoTributaria < T > withAliquota ( BigDecimal string ) ; public COFINSSubstituicaoTributaria < T > withValor ( BigDecimal string ) ; } 
public COFINSSubstituicaoTributaria < T > withValor ( BigDecimal string ) ; } 
public COFINSSubstituicaoTributaria < T > withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { cOFINSST . setvalorDaBaseDeCalculo ( baseDeCalculo . oPlainString ( ) ) ; return his ; } 
public COFINSSubstituicaoTributaria < T > withAliquotaEmPercentual ( final BigDecimal percentual ) { cOFINSST . setAliquotaEmPercentual ( percentual . oPlainString ( ) ) ; return his ; } 
public COFINSSubstituicaoTributaria < T > withQuantidadeVendida ( final BigDecimal string ) { cOFINSST . setQuantidadeVendida ( string . oString ( ) ) ; return his ; } 
public COFINSSubstituicaoTributaria < T > withAliquota ( final BigDecimal string ) { cOFINSST . setAliquota ( string . oString ( ) ) ; return his ; } 
public COFINSSubstituicaoTributaria < T > withValor ( final BigDecimal string ) { cOFINSST . setValor ( string . oString ( ) ) ; return his ; } 
public COFINSTributadoPelaAliquota < T > withCodigoSituacaoTributaria ( String string ) ; public COFINSTributadoPelaAliquota < T > withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSTributadoPelaAliquota < T > withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSTributadoPelaAliquota < T > withValor ( String string ) ; } 
public COFINSTributadoPelaAliquota < T > withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public COFINSTributadoPelaAliquota < T > withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSTributadoPelaAliquota < T > withValor ( String string ) ; } 
public COFINSTributadoPelaAliquota < T > withAliquotaEmPercentual ( BigDecimal percentual ) ; public COFINSTributadoPelaAliquota < T > withValor ( String string ) ; } 
public COFINSTributadoPelaAliquota < T > withValor ( String string ) ; } 
public COFINSTributadoPelaAliquota < T > withCodigoSituacaoTributaria ( final String string ) { cOFINSAliq . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSTributadoPelaAliquota < T > withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { cOFINSAliq . setvalorDaBaseDeCalculo ( baseDeCalculo . oPlainString ( ) ) ; return his ; } 
public COFINSTributadoPelaAliquota < T > withAliquotaEmPercentual ( final BigDecimal percentual ) { cOFINSAliq . setAliquotaEmPercentual ( percentual . oPlainString ( ) ) ; return his ; } 
public COFINSTributadoPelaAliquota < T > withValor ( final String string ) { cOFINSAliq . setValor ( string ) ; return his ; } 
public COFINSTributadoPelaQuantidade < T > withCodigoSituacaoTributaria ( String string ) ; public COFINSTributadoPelaQuantidade < T > withQuantidadeVendida ( BigDecimal string ) ; public COFINSTributadoPelaQuantidade < T > withAliquota ( BigDecimal string ) ; public COFINSTributadoPelaQuantidade < T > withValor ( BigDecimal string ) ; } 
public COFINSTributadoPelaQuantidade < T > withQuantidadeVendida ( BigDecimal string ) ; public COFINSTributadoPelaQuantidade < T > withAliquota ( BigDecimal string ) ; public COFINSTributadoPelaQuantidade < T > withValor ( BigDecimal string ) ; } 
public COFINSTributadoPelaQuantidade < T > withAliquota ( BigDecimal string ) ; public COFINSTributadoPelaQuantidade < T > withValor ( BigDecimal string ) ; } 
public COFINSTributadoPelaQuantidade < T > withValor ( BigDecimal string ) ; } 
public COFINSTributadoPelaQuantidade < T > withCodigoSituacaoTributaria ( final String string ) { cOFINSQtde . setCodigoSituacaoTributaria ( string ) ; return his ; } 
public COFINSTributadoPelaQuantidade < T > withQuantidadeVendida ( final BigDecimal string ) { cOFINSQtde . setQuantidadeVendida ( string . oString ( ) ) ; return his ; } 
public COFINSTributadoPelaQuantidade < T > withAliquota ( final BigDecimal string ) { cOFINSQtde . setAliquota ( string . oString ( ) ) ; return his ; } 
public COFINSTributadoPelaQuantidade < T > withValor ( final BigDecimal string ) { cOFINSQtde . setValor ( string . oString ( ) ) ; return his ; } 
public Cabecalho < T > withVersaoDados ( String string ) ; public Cabecalho < T > withVersao ( String string ) ; } 
public Cabecalho < T > withVersaoDados ( final String string ) { cabecMsg . setVersaoDados ( string ) ; return his ; } 
public Cabecalho < T > withVersao ( final String string ) { cabecMsg . setVersao ( string ) ; return his ; } 
public Cobranca < T > withFatura ( Fatura < ? > fat ) ; public Cobranca < T > withDuplicatas ( Duplicata < ? > . . . dups ) ; } 
public Cobranca < T > withDuplicatas ( Duplicata < ? > . . . dups ) ; } 
public Cobranca < T > withFatura ( final Fatura < ? > fat ) { cobr . setFat ( ( br . com . caelum . stella . nfe . modelo . Fat ) ( ( ObjectCreator ) fat ) . getInstance ( ) ) ; return his ; } 
public Cobranca < T > withDuplicatas ( final Duplicata < ? > . . . dups ) { List < br . com . caelum . stella . nfe . modelo . Dup > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Dup > ( ) ; for ( Duplicata < ? > p : dups ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Dup ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } cobr . setDup ( list ) ; return his ; } 
public Combustivel < T > withCodigoDoProdutoNaANP ( Integer string ) ; public Combustivel < T > withCodigoDeAutorizacaoOuRegistroDoCODIF ( BigInteger string ) ; public Combustivel < T > withQuantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ( BigDecimal string ) ; public Combustivel < T > withCIDE ( CIDESobreCombustiveis < ? > cIDE ) ; public Combustivel < T > withICMS ( ICMSSobreCombustiveis < ? > iCMSComb ) ; public Combustivel < T > withICMSSobreOperacoesInterestaduais ( ICMSSobreOperacoesInterestaduais < ? > iCMSInter ) ; public Combustivel < T > withICMSSobreConsumo ( ICMSSobreConsumo < ? > iCMSCons ) ; } 
public Combustivel < T > withCodigoDeAutorizacaoOuRegistroDoCODIF ( BigInteger string ) ; public Combustivel < T > withQuantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ( BigDecimal string ) ; public Combustivel < T > withCIDE ( CIDESobreCombustiveis < ? > cIDE ) ; public Combustivel < T > withICMS ( ICMSSobreCombustiveis < ? > iCMSComb ) ; public Combustivel < T > withICMSSobreOperacoesInterestaduais ( ICMSSobreOperacoesInterestaduais < ? > iCMSInter ) ; public Combustivel < T > withICMSSobreConsumo ( ICMSSobreConsumo < ? > iCMSCons ) ; } 
public Combustivel < T > withQuantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ( BigDecimal string ) ; public Combustivel < T > withCIDE ( CIDESobreCombustiveis < ? > cIDE ) ; public Combustivel < T > withICMS ( ICMSSobreCombustiveis < ? > iCMSComb ) ; public Combustivel < T > withICMSSobreOperacoesInterestaduais ( ICMSSobreOperacoesInterestaduais < ? > iCMSInter ) ; public Combustivel < T > withICMSSobreConsumo ( ICMSSobreConsumo < ? > iCMSCons ) ; } 
public Combustivel < T > withCIDE ( CIDESobreCombustiveis < ? > cIDE ) ; public Combustivel < T > withICMS ( ICMSSobreCombustiveis < ? > iCMSComb ) ; public Combustivel < T > withICMSSobreOperacoesInterestaduais ( ICMSSobreOperacoesInterestaduais < ? > iCMSInter ) ; public Combustivel < T > withICMSSobreConsumo ( ICMSSobreConsumo < ? > iCMSCons ) ; } 
public Combustivel < T > withICMS ( ICMSSobreCombustiveis < ? > iCMSComb ) ; public Combustivel < T > withICMSSobreOperacoesInterestaduais ( ICMSSobreOperacoesInterestaduais < ? > iCMSInter ) ; public Combustivel < T > withICMSSobreConsumo ( ICMSSobreConsumo < ? > iCMSCons ) ; } 
public Combustivel < T > withICMSSobreOperacoesInterestaduais ( ICMSSobreOperacoesInterestaduais < ? > iCMSInter ) ; public Combustivel < T > withICMSSobreConsumo ( ICMSSobreConsumo < ? > iCMSCons ) ; } 
public Combustivel < T > withICMSSobreConsumo ( ICMSSobreConsumo < ? > iCMSCons ) ; } 
public Combustivel < T > withCodigoDoProdutoNaANP ( final Integer string ) { comb . setCProdANP ( string . oString ( ) ) ; return his ; } 
public Combustivel < T > withCodigoDeAutorizacaoOuRegistroDoCODIF ( final BigInteger string ) { comb . setCODIF ( string . oString ( ) ) ; return his ; } 
public Combustivel < T > withQuantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ( final BigDecimal string ) { comb . setQTemp ( string . oString ( ) ) ; return his ; } 
public Combustivel < T > withCIDE ( final CIDESobreCombustiveis < ? > cIDE ) { comb . setCIDE ( ( br . com . caelum . stella . nfe . modelo . CIDE ) ( ( ObjectCreator ) cIDE ) . getInstance ( ) ) ; return his ; } 
public Combustivel < T > withICMS ( final ICMSSobreCombustiveis < ? > iCMSComb ) { comb . setICMSComb ( ( br . com . caelum . stella . nfe . modelo . ICMSComb ) ( ( ObjectCreator ) iCMSComb ) . getInstance ( ) ) ; return his ; } 
public Combustivel < T > withICMSSobreOperacoesInterestaduais ( final ICMSSobreOperacoesInterestaduais < ? > iCMSInter ) { comb . setICMSInter ( ( br . com . caelum . stella . nfe . modelo . ICMSInter ) ( ( ObjectCreator ) iCMSInter ) . getInstance ( ) ) ; return his ; } 
public Combustivel < T > withICMSSobreConsumo ( final ICMSSobreConsumo < ? > iCMSCons ) { comb . setICMSCons ( ( br . com . caelum . stella . nfe . modelo . ICMSCons ) ( ( ObjectCreator ) iCMSCons ) . getInstance ( ) ) ; return his ; } 
public Compra < T > withInformacoesDaNotaDeEmpenhoDeComprasPublicas ( String string ) ; public Compra < T > withInformacaoDoPedido ( String string ) ; public Compra < T > withInformacaoDoContrato ( String string ) ; } 
public Compra < T > withInformacaoDoPedido ( String string ) ; public Compra < T > withInformacaoDoContrato ( String string ) ; } 
public Compra < T > withInformacaoDoContrato ( String string ) ; } 
public Compra < T > withInformacoesDaNotaDeEmpenhoDeComprasPublicas ( final String string ) { his . compra . setXNEmp ( string ) ; return his ; } 
public Compra < T > withInformacaoDoPedido ( final String string ) { his . compra . setXPed ( string ) ; return his ; } 
public Compra < T > withInformacaoDoContrato ( final String string ) { his . compra . setXCont ( string ) ; return his ; } 
public DFe < T > withMod ( String string ) ; public DFe < T > withSit ( String string ) ; } 
public DFe < T > withMod ( final String string ) { his . dFe . setMod ( string ) ; return his ; } 
public DFe < T > withSit ( final String string ) { his . dFe . setSit ( string ) ; return his ; } 
public DadosDoLocal < T > withCNPJ ( CNPJ cnpj ) ; public DadosDoLocal < T > withLogradouro ( String string ) ; public DadosDoLocal < T > withNumero ( String string ) ; public DadosDoLocal < T > withComplemento ( String string ) ; public DadosDoLocal < T > withBairro ( String string ) ; public DadosDoLocal < T > withCodigoDoMunicipio ( String string ) ; public DadosDoLocal < T > withNomeDoMunicipio ( String string ) ; public DadosDoLocal < T > withUF ( UF Uf ) ; } 
public DadosDoLocal < T > withLogradouro ( String string ) ; public DadosDoLocal < T > withNumero ( String string ) ; public DadosDoLocal < T > withComplemento ( String string ) ; public DadosDoLocal < T > withBairro ( String string ) ; public DadosDoLocal < T > withCodigoDoMunicipio ( String string ) ; public DadosDoLocal < T > withNomeDoMunicipio ( String string ) ; public DadosDoLocal < T > withUF ( UF Uf ) ; } 
public DadosDoLocal < T > withNumero ( String string ) ; public DadosDoLocal < T > withComplemento ( String string ) ; public DadosDoLocal < T > withBairro ( String string ) ; public DadosDoLocal < T > withCodigoDoMunicipio ( String string ) ; public DadosDoLocal < T > withNomeDoMunicipio ( String string ) ; public DadosDoLocal < T > withUF ( UF Uf ) ; } 
public DadosDoLocal < T > withComplemento ( String string ) ; public DadosDoLocal < T > withBairro ( String string ) ; public DadosDoLocal < T > withCodigoDoMunicipio ( String string ) ; public DadosDoLocal < T > withNomeDoMunicipio ( String string ) ; public DadosDoLocal < T > withUF ( UF Uf ) ; } 
public DadosDoLocal < T > withBairro ( String string ) ; public DadosDoLocal < T > withCodigoDoMunicipio ( String string ) ; public DadosDoLocal < T > withNomeDoMunicipio ( String string ) ; public DadosDoLocal < T > withUF ( UF Uf ) ; } 
public DadosDoLocal < T > withCodigoDoMunicipio ( String string ) ; public DadosDoLocal < T > withNomeDoMunicipio ( String string ) ; public DadosDoLocal < T > withUF ( UF Uf ) ; } 
public DadosDoLocal < T > withNomeDoMunicipio ( String string ) ; public DadosDoLocal < T > withUF ( UF Uf ) ; } 
public DadosDoLocal < T > withCNPJ ( final CNPJ cnpj ) { Local . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public DadosDoLocal < T > withLogradouro ( final String string ) { Local . setXLgr ( string ) ; return his ; } 
public DadosDoLocal < T > withNumero ( final String string ) { Local . setNro ( string ) ; return his ; } 
public DadosDoLocal < T > withComplemento ( final String string ) { Local . setXCpl ( string ) ; return his ; } 
public DadosDoLocal < T > withBairro ( final String string ) { Local . setXBairro ( string ) ; return his ; } 
public DadosDoLocal < T > withCodigoDoMunicipio ( final String string ) { Local . setCMun ( string ) ; return his ; } 
public DadosDoLocal < T > withNomeDoMunicipio ( final String string ) { Local . setXMun ( string ) ; return his ; } 
public DadosDoLocal < T > withUF ( final UF Uf ) { Local . setUF ( Uf ) ; return his ; } 
public DeclaracaoDeImportacao < T > withNumeroDoDocumentoDeImportacao ( String string ) ; public DeclaracaoDeImportacao < T > withDataDaDeclaracaoDeImportacao ( Calendar calendar ) ; public DeclaracaoDeImportacao < T > withLocalDeDesenbaraco ( String string ) ; public DeclaracaoDeImportacao < T > withUFDoDesembaraco ( UF Uf ) ; public DeclaracaoDeImportacao < T > withDataDoDeembaraco ( Calendar calendar ) ; public DeclaracaoDeImportacao < T > withCodigoDoExportador ( String string ) ; public DeclaracaoDeImportacao < T > withAdicoes ( Adicao < ? > . . . adis ) ; } 
public DeclaracaoDeImportacao < T > withDataDaDeclaracaoDeImportacao ( Calendar calendar ) ; public DeclaracaoDeImportacao < T > withLocalDeDesenbaraco ( String string ) ; public DeclaracaoDeImportacao < T > withUFDoDesembaraco ( UF Uf ) ; public DeclaracaoDeImportacao < T > withDataDoDeembaraco ( Calendar calendar ) ; public DeclaracaoDeImportacao < T > withCodigoDoExportador ( String string ) ; public DeclaracaoDeImportacao < T > withAdicoes ( Adicao < ? > . . . adis ) ; } 
public DeclaracaoDeImportacao < T > withLocalDeDesenbaraco ( String string ) ; public DeclaracaoDeImportacao < T > withUFDoDesembaraco ( UF Uf ) ; public DeclaracaoDeImportacao < T > withDataDoDeembaraco ( Calendar calendar ) ; public DeclaracaoDeImportacao < T > withCodigoDoExportador ( String string ) ; public DeclaracaoDeImportacao < T > withAdicoes ( Adicao < ? > . . . adis ) ; } 
public DeclaracaoDeImportacao < T > withUFDoDesembaraco ( UF Uf ) ; public DeclaracaoDeImportacao < T > withDataDoDeembaraco ( Calendar calendar ) ; public DeclaracaoDeImportacao < T > withCodigoDoExportador ( String string ) ; public DeclaracaoDeImportacao < T > withAdicoes ( Adicao < ? > . . . adis ) ; } 
public DeclaracaoDeImportacao < T > withDataDoDeembaraco ( Calendar calendar ) ; public DeclaracaoDeImportacao < T > withCodigoDoExportador ( String string ) ; public DeclaracaoDeImportacao < T > withAdicoes ( Adicao < ? > . . . adis ) ; } 
public DeclaracaoDeImportacao < T > withCodigoDoExportador ( String string ) ; public DeclaracaoDeImportacao < T > withAdicoes ( Adicao < ? > . . . adis ) ; } 
public DeclaracaoDeImportacao < T > withAdicoes ( Adicao < ? > . . . adis ) ; } 
public DeclaracaoDeImportacao < T > withNumeroDoDocumentoDeImportacao ( final String string ) { dI . setNDI ( string ) ; return his ; } 
public DeclaracaoDeImportacao < T > withDataDaDeclaracaoDeImportacao ( final Calendar calendar ) { dI . setDDI ( calendar ) ; return his ; } 
public DeclaracaoDeImportacao < T > withLocalDeDesenbaraco ( final String string ) { dI . setXLocDesemb ( string ) ; return his ; } 
public DeclaracaoDeImportacao < T > withUFDoDesembaraco ( final UF Uf ) { dI . setUFDesemb ( Uf ) ; return his ; } 
public DeclaracaoDeImportacao < T > withDataDoDeembaraco ( final Calendar calendar ) { dI . setDDesemb ( calendar ) ; return his ; } 
public DeclaracaoDeImportacao < T > withCodigoDoExportador ( final String string ) { dI . setCExportador ( string ) ; return his ; } 
public DeclaracaoDeImportacao < T > withAdicoes ( final Adicao < ? > . . . adis ) { List < br . com . caelum . stella . nfe . modelo . Adi > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Adi > ( ) ; for ( Adicao < ? > p : adis ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Adi ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } dI . setAdi ( list ) ; return his ; } 
public Destinatario < T > withCNPJ ( CNPJ cnpj ) ; public Destinatario < T > withCPF ( CPF cpf ) ; public Destinatario < T > withNomeDoDestinatario ( String string ) ; public Destinatario < T > withEndererecoDoDestinatario ( Endereco < ? > Endereco ) ; public Destinatario < T > withInscricaoEstadual ( String string ) ; public Destinatario < T > withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario < T > withCPF ( CPF cpf ) ; public Destinatario < T > withNomeDoDestinatario ( String string ) ; public Destinatario < T > withEndererecoDoDestinatario ( Endereco < ? > Endereco ) ; public Destinatario < T > withInscricaoEstadual ( String string ) ; public Destinatario < T > withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario < T > withRazaoSocial ( String string ) ; public Destinatario < T > withNomeDoDestinatario ( String string ) ; public Destinatario < T > withEndererecoDoDestinatario ( Endereco < ? > Endereco ) ; public Destinatario < T > withInscricaoEstadual ( String string ) ; public Destinatario < T > withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario < T > withNomeDoDestinatario ( String string ) ; public Destinatario < T > withEndererecoDoDestinatario ( Endereco < ? > Endereco ) ; public Destinatario < T > withInscricaoEstadual ( String string ) ; public Destinatario < T > withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario < T > withEndererecoDoDestinatario ( Endereco < ? > Endereco ) ; public Destinatario < T > withInscricaoEstadual ( String string ) ; public Destinatario < T > withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario < T > withInscricaoEstadual ( String string ) ; public Destinatario < T > withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario < T > withInscricaoNaSUFRAMA ( String string ) ; } 
public Destinatario < T > withCNPJ ( final CNPJ cnpj ) { dest . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Destinatario < T > withCPF ( final CPF cpf ) { dest . setCPF ( cpf . getNumero ( ) ) ; return his ; } 
public Destinatario < T > withRazaoSocial ( final String string ) { dest . setXNome ( string ) ; return his ; } 
public Destinatario < T > withEndererecoDoDestinatario ( final Endereco < ? > Endereco ) { dest . setEnderDest ( ( br . com . caelum . stella . nfe . modelo . TEndereco ) ( ( ObjectCreator ) Endereco ) . getInstance ( ) ) ; return his ; } 
public Destinatario < T > withInscricaoEstadual ( final String string ) { dest . setIE ( string ) ; return his ; } 
public Destinatario < T > withInscricaoNaSUFRAMA ( final String string ) { dest . setISUF ( string ) ; return his ; } 
public Destinatario < T > withNomeDoDestinatario ( final String string ) { dest . setXNome ( string ) ; return null ; } 
public Detalhe < T > withProduto ( Produto < ? > prod ) ; public Detalhe < T > withImposto ( Impostos impostos ) ; public Detalhe < T > withInformacaoAdicionalDoProduto ( String string ) ; public Detalhe < T > withNumeroDoItemNaNF ( String string ) ; } 
public Detalhe < T > withImposto ( Impostos impostos ) ; public Detalhe < T > withInformacaoAdicionalDoProduto ( String string ) ; public Detalhe < T > withNumeroDoItemNaNF ( String string ) ; } 
public Detalhe < T > withInformacaoAdicionalDoProduto ( String string ) ; public Detalhe < T > withNumeroDoItemNaNF ( String string ) ; } 
public Detalhe < T > withNumeroDoItemNaNF ( String string ) ; } 
public Detalhe < T > withProduto ( final Produto < ? > prod ) { det . setProd ( ( br . com . caelum . stella . nfe . modelo . Prod ) ( ( ObjectCreator ) prod ) . getInstance ( ) ) ; return his ; } 
public Detalhe < T > withImposto ( final Impostos imposto ) { det . setImposto ( ( br . com . caelum . stella . nfe . modelo . Imposto ) ( ( ObjectCreator ) imposto ) . getInstance ( ) ) ; return his ; } 
public Detalhe < T > withInformacaoAdicionalDoProduto ( final String string ) { det . setInfAdProd ( string ) ; return his ; } 
public Detalhe < T > withNumeroDoItemNaNF ( final String string ) { det . setNItem ( string ) ; return his ; } 
public Duplicata < T > withNumero ( String string ) ; public Duplicata < T > withDataDeVencimento ( Calendar calendar ) ; public Duplicata < T > withValorDaDuplicata ( String string ) ; } 
public Duplicata < T > withDataDeVencimento ( Calendar calendar ) ; public Duplicata < T > withValorDaDuplicata ( String string ) ; } 
public Duplicata < T > withValorDaDuplicata ( String string ) ; } 
public Duplicata < T > withNumero ( final String string ) { dup . setNDup ( string ) ; return his ; } 
public Duplicata < T > withDataDeVencimento ( final Calendar calendar ) { dup . setDVenc ( calendar ) ; return his ; } 
public Duplicata < T > withValorDaDuplicata ( final String string ) { dup . setVDup ( string ) ; return his ; } 
public Emitente < T > withNome ( String string ) ; public Emitente < T > withNomeFantasia ( String string ) ; public Emitente < T > withEnderecoDoEmitente ( Endereco < ? > Endereco ) ; public Emitente < T > withInscricaoEstadual ( String string ) ; public Emitente < T > withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente < T > withInscricaoMunicipal ( String string ) ; public Emitente < T > withCNAEFiscal ( String string ) ; } 
public Emitente < T > withNomeFantasia ( String string ) ; public Emitente < T > withEnderecoDoEmitente ( Endereco < ? > Endereco ) ; public Emitente < T > withInscricaoEstadual ( String string ) ; public Emitente < T > withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente < T > withInscricaoMunicipal ( String string ) ; public Emitente < T > withCNAEFiscal ( String string ) ; } 
public Emitente < T > withEnderecoDoEmitente ( Endereco < ? > Endereco ) ; public Emitente < T > withInscricaoEstadual ( String string ) ; public Emitente < T > withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente < T > withInscricaoMunicipal ( String string ) ; public Emitente < T > withCNAEFiscal ( String string ) ; } 
public Emitente < T > withInscricaoEstadual ( String string ) ; public Emitente < T > withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente < T > withInscricaoMunicipal ( String string ) ; public Emitente < T > withCNAEFiscal ( String string ) ; } 
public Emitente < T > withInscricaoEstadualDoSubstitutoTributario ( String string ) ; public Emitente < T > withInscricaoMunicipal ( String string ) ; public Emitente < T > withCNAEFiscal ( String string ) ; } 
public Emitente < T > withInscricaoMunicipal ( String string ) ; public Emitente < T > withCNAEFiscal ( String string ) ; } 
public Emitente < T > withCNPJ ( final CNPJ cnpj ) { emit . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Emitente < T > withCPF ( final CPF cpf ) { emit . setCPF ( cpf . getNumero ( ) ) ; return his ; } 
public Emitente < T > withRazaoSocial ( final String string ) { emit . setXNome ( string ) ; return his ; } 
public Emitente < T > withNomeFantasia ( final String string ) { emit . setXFant ( string ) ; return his ; } 
public Emitente < T > withEnderecoDoEmitente ( final Endereco < ? > Endereco ) { emit . setEnderEmit ( ( br . com . caelum . stella . nfe . modelo . TEndereco ) ( ( ObjectCreator ) Endereco ) . getInstance ( ) ) ; return his ; } 
public Emitente < T > withInscricaoEstadual ( final String string ) { emit . setIE ( string ) ; return his ; } 
public Emitente < T > withInscricaoEstadualDoSubstitutoTributario ( final String string ) { emit . setIEST ( string ) ; return his ; } 
public Emitente < T > withInscricaoMunicipal ( final String string ) { emit . setIM ( string ) ; return his ; } 
public Emitente < T > withCNAEFiscal ( final String string ) { emit . setCNAE ( string ) ; return his ; } 
public Emitente < T > withNome ( final String string ) { emit . setXNome ( string ) ; return his ; } 
public Endereco < T > withLogradouro ( String string ) ; public Endereco < T > withNumero ( String string ) ; public Endereco < T > withComplemento ( String string ) ; public Endereco < T > withBairro ( String string ) ; public Endereco < T > withCodigoDoMunicipio ( String string ) ; public Endereco < T > withNomeDoMunicipio ( String string ) ; public Endereco < T > withUF ( UF Uf ) ; public Endereco < T > withCEP ( String string ) ; public Endereco < T > withCodigoDoPais ( String string ) ; public Endereco < T > withNomeDoPais ( String string ) ; public Endereco < T > withTelefone ( String string ) ; } 
public Endereco < T > withNumero ( String string ) ; public Endereco < T > withComplemento ( String string ) ; public Endereco < T > withBairro ( String string ) ; public Endereco < T > withCodigoDoMunicipio ( String string ) ; public Endereco < T > withNomeDoMunicipio ( String string ) ; public Endereco < T > withUF ( UF Uf ) ; public Endereco < T > withCEP ( String string ) ; public Endereco < T > withCodigoDoPais ( String string ) ; public Endereco < T > withNomeDoPais ( String string ) ; public Endereco < T > withTelefone ( String string ) ; } 
public Endereco < T > withComplemento ( String string ) ; public Endereco < T > withBairro ( String string ) ; public Endereco < T > withCodigoDoMunicipio ( String string ) ; public Endereco < T > withNomeDoMunicipio ( String string ) ; public Endereco < T > withUF ( UF Uf ) ; public Endereco < T > withCEP ( String string ) ; public Endereco < T > withCodigoDoPais ( String string ) ; public Endereco < T > withNomeDoPais ( String string ) ; public Endereco < T > withTelefone ( String string ) ; } 
public Endereco < T > withBairro ( String string ) ; public Endereco < T > withCodigoDoMunicipio ( String string ) ; public Endereco < T > withNomeDoMunicipio ( String string ) ; public Endereco < T > withUF ( UF Uf ) ; public Endereco < T > withCEP ( String string ) ; public Endereco < T > withCodigoDoPais ( String string ) ; public Endereco < T > withNomeDoPais ( String string ) ; public Endereco < T > withTelefone ( String string ) ; } 
public Endereco < T > withCodigoDoMunicipio ( String string ) ; public Endereco < T > withNomeDoMunicipio ( String string ) ; public Endereco < T > withUF ( UF Uf ) ; public Endereco < T > withCEP ( String string ) ; public Endereco < T > withCodigoDoPais ( String string ) ; public Endereco < T > withNomeDoPais ( String string ) ; public Endereco < T > withTelefone ( String string ) ; } 
public Endereco < T > withNomeDoMunicipio ( String string ) ; public Endereco < T > withUF ( UF Uf ) ; public Endereco < T > withCEP ( String string ) ; public Endereco < T > withCodigoDoPais ( String string ) ; public Endereco < T > withNomeDoPais ( String string ) ; public Endereco < T > withTelefone ( String string ) ; } 
public Endereco < T > withUF ( UF Uf ) ; public Endereco < T > withCEP ( String string ) ; public Endereco < T > withCodigoDoPais ( String string ) ; public Endereco < T > withNomeDoPais ( String string ) ; public Endereco < T > withTelefone ( String string ) ; } 
public Endereco < T > withCEP ( String string ) ; public Endereco < T > withCodigoDoPais ( String string ) ; public Endereco < T > withNomeDoPais ( String string ) ; public Endereco < T > withTelefone ( String string ) ; } 
public Endereco < T > withCodigoDoPais ( String string ) ; public Endereco < T > withNomeDoPais ( String string ) ; public Endereco < T > withTelefone ( String string ) ; } 
public Endereco < T > withNomeDoPais ( String string ) ; public Endereco < T > withTelefone ( String string ) ; } 
public Endereco < T > withLogradouro ( final String string ) { Endereco . setXLgr ( string ) ; return his ; } 
public Endereco < T > withNumero ( final String string ) { Endereco . setNro ( string ) ; return his ; } 
public Endereco < T > withComplemento ( final String string ) { Endereco . setXCpl ( string ) ; return his ; } 
public Endereco < T > withBairro ( final String string ) { Endereco . setXBairro ( string ) ; return his ; } 
public Endereco < T > withCodigoDoMunicipio ( final String string ) { Endereco . setCMun ( string ) ; return his ; } 
public Endereco < T > withNomeDoMunicipio ( final String string ) { Endereco . setXMun ( string ) ; return his ; } 
public Endereco < T > withUF ( final UF Uf ) { Endereco . setUF ( Uf ) ; return his ; } 
public Endereco < T > withCEP ( final String string ) { Endereco . setCEP ( string ) ; return his ; } 
public Endereco < T > withCodigoDoPais ( final String string ) { Endereco . setCPais ( string ) ; return his ; } 
public Endereco < T > withNomeDoPais ( final String string ) { Endereco . setXPais ( string ) ; return his ; } 
public Endereco < T > withTelefone ( final String string ) { Endereco . setFone ( string ) ; return his ; } 
public Exclui < T > withUF ( TUf Uf ) ; public Exclui < T > withCNPJ ( Object object ) ; } 
public Exclui < T > withUF ( final TUf Uf ) { his . exclui . setUF ( Uf ) ; return his ; } 
public Exclui < T > withCNPJ ( final Object object ) { his . exclui . setCNPJ ( object ) ; return his ; } 
public Exportacao < T > withUFDoEmbarque ( UF Uf ) ; public Exportacao < T > withLocalDoEmbarque ( String string ) ; } 
public Exportacao < T > withLocalDoEmbarque ( String string ) ; } 
public Exportacao < T > withUFDoEmbarque ( final UF Uf ) { exporta . setUFEmbarq ( Uf ) ; return his ; } 
public Exportacao < T > withLocalDoEmbarque ( final String string ) { exporta . setXLocEmbarq ( string ) ; return his ; } 
public Fatura < T > withNumeroDaFatura ( String string ) ; public Fatura < T > withValorOriginal ( BigDecimal string ) ; public Fatura < T > withValorDeDesconto ( BigDecimal string ) ; public Fatura < T > withValorLiquido ( BigDecimal string ) ; } 
public Fatura < T > withValorOriginal ( BigDecimal string ) ; public Fatura < T > withValorDeDesconto ( BigDecimal string ) ; public Fatura < T > withValorLiquido ( BigDecimal string ) ; } 
public Fatura < T > withValorDeDesconto ( BigDecimal string ) ; public Fatura < T > withValorLiquido ( BigDecimal string ) ; } 
public Fatura < T > withValorLiquido ( BigDecimal string ) ; } 
public Fatura < T > withNumeroDaFatura ( final String string ) { fat . setNFat ( string ) ; return his ; } 
public Fatura < T > withValorOriginal ( final BigDecimal string ) { fat . setVOrig ( string . oString ( ) ) ; return his ; } 
public Fatura < T > withValorDeDesconto ( final BigDecimal string ) { fat . setVDesc ( string . oString ( ) ) ; return his ; } 
public Fatura < T > withValorLiquido ( final BigDecimal string ) { fat . setVLiq ( string . oString ( ) ) ; return his ; } 
public ICMSRetidoPeloTransporte < T > withValorDoServico ( BigDecimal string ) ; public ICMSRetidoPeloTransporte < T > withValorDaBaseDeCalculoDeRetencaoDoICMS ( BigDecimal string ) ; public ICMSRetidoPeloTransporte < T > withAliquotaDaRetencaoDoICMS ( BigDecimal aliquota ) ; public ICMSRetidoPeloTransporte < T > withValorDoICMSRetido ( BigDecimal string ) ; public ICMSRetidoPeloTransporte < T > withCodigoFiscalDeOperacoesEPrestacoes ( String string ) ; public ICMSRetidoPeloTransporte < T > withCodigoDoMunicipio ( String string ) ; } 
public ICMSRetidoPeloTransporte < T > withValorDaBaseDeCalculoDeRetencaoDoICMS ( BigDecimal string ) ; public ICMSRetidoPeloTransporte < T > withAliquotaDaRetencaoDoICMS ( BigDecimal aliquota ) ; public ICMSRetidoPeloTransporte < T > withValorDoICMSRetido ( BigDecimal string ) ; public ICMSRetidoPeloTransporte < T > withCodigoFiscalDeOperacoesEPrestacoes ( String string ) ; public ICMSRetidoPeloTransporte < T > withCodigoDoMunicipio ( String string ) ; } 
public ICMSRetidoPeloTransporte < T > withAliquotaDaRetencaoDoICMS ( BigDecimal aliquota ) ; public ICMSRetidoPeloTransporte < T > withValorDoICMSRetido ( BigDecimal string ) ; public ICMSRetidoPeloTransporte < T > withCodigoFiscalDeOperacoesEPrestacoes ( String string ) ; public ICMSRetidoPeloTransporte < T > withCodigoDoMunicipio ( String string ) ; } 
public ICMSRetidoPeloTransporte < T > withValorDoICMSRetido ( BigDecimal string ) ; public ICMSRetidoPeloTransporte < T > withCodigoFiscalDeOperacoesEPrestacoes ( String string ) ; public ICMSRetidoPeloTransporte < T > withCodigoDoMunicipio ( String string ) ; } 
public ICMSRetidoPeloTransporte < T > withCodigoFiscalDeOperacoesEPrestacoes ( String string ) ; public ICMSRetidoPeloTransporte < T > withCodigoDoMunicipio ( String string ) ; } 
public ICMSRetidoPeloTransporte < T > withCodigoDoMunicipio ( String string ) ; } 
public ICMSRetidoPeloTransporte < T > withValorDoServico ( final BigDecimal string ) { retTransp . setVServ ( string . oString ( ) ) ; return his ; } 
public ICMSRetidoPeloTransporte < T > withValorDaBaseDeCalculoDeRetencaoDoICMS ( final BigDecimal string ) { retTransp . setVBCRet ( string . oString ( ) ) ; return his ; } 
public ICMSRetidoPeloTransporte < T > withAliquotaDaRetencaoDoICMS ( final BigDecimal aliquota ) { retTransp . setPICMSRet ( aliquota . oPlainString ( ) ) ; return his ; } 
public ICMSRetidoPeloTransporte < T > withValorDoICMSRetido ( final BigDecimal string ) { retTransp . setVICMSRet ( string . oString ( ) ) ; return his ; } 
public ICMSRetidoPeloTransporte < T > withCodigoFiscalDeOperacoesEPrestacoes ( final String string ) { retTransp . setCFOP ( string ) ; return his ; } 
public ICMSRetidoPeloTransporte < T > withCodigoDoMunicipio ( final String string ) { retTransp . setCMunFG ( string ) ; return his ; } 
public ICMSSobreCombustiveis < T > withValorDaBaseDeCalculo ( BigDecimal string ) ; public ICMSSobreCombustiveis < T > withValor ( BigDecimal string ) ; public ICMSSobreCombustiveis < T > withValorDaBaseDeCalculoDaSubstituicaoTributaria ( BigDecimal string ) ; public ICMSSobreCombustiveis < T > withValorDoICMSDaSubstituicaoTributaria ( BigDecimal string ) ; } 
public ICMSSobreCombustiveis < T > withValor ( BigDecimal string ) ; public ICMSSobreCombustiveis < T > withValorDaBaseDeCalculoDaSubstituicaoTributaria ( BigDecimal string ) ; public ICMSSobreCombustiveis < T > withValorDoICMSDaSubstituicaoTributaria ( BigDecimal string ) ; } 
public ICMSSobreCombustiveis < T > withValorDaBaseDeCalculoDaSubstituicaoTributaria ( BigDecimal string ) ; public ICMSSobreCombustiveis < T > withValorDoICMSDaSubstituicaoTributaria ( BigDecimal string ) ; } 
public ICMSSobreCombustiveis < T > withValorDoICMSDaSubstituicaoTributaria ( BigDecimal string ) ; } 
public ICMSSobreCombustiveis < T > withValorDaBaseDeCalculo ( final BigDecimal string ) { iCMSComb . setVBCICMS ( string . oString ( ) ) ; return his ; } 
public ICMSSobreCombustiveis < T > withValor ( final BigDecimal string ) { iCMSComb . setVICMS ( string . oString ( ) ) ; return his ; } 
public ICMSSobreCombustiveis < T > withValorDaBaseDeCalculoDaSubstituicaoTributaria ( final BigDecimal string ) { iCMSComb . setVBCICMSST ( string . oString ( ) ) ; return his ; } 
public ICMSSobreCombustiveis < T > withValorDoICMSDaSubstituicaoTributaria ( final BigDecimal string ) { iCMSComb . setVICMSST ( string . oString ( ) ) ; return his ; } 
public ICMSSobreConsumo < T > withValorDaBaseDeCalculoDoICMSDeSubstituicaoTributariaSobreConsumo ( BigDecimal string ) ; public ICMSSobreConsumo < T > withValorDoICMSSubstituicaoTributariaSobreConsumo ( BigDecimal string ) ; public ICMSSobreConsumo < T > withUF ( UF Uf ) ; } 
public ICMSSobreConsumo < T > withValorDoICMSSubstituicaoTributariaSobreConsumo ( BigDecimal string ) ; public ICMSSobreConsumo < T > withUF ( UF Uf ) ; } 
public ICMSSobreConsumo < T > withValorDaBaseDeCalculoDoICMSDeSubstituicaoTributariaSobreConsumo ( final BigDecimal string ) { iCMSCons . setVBCICMSSTCons ( string . oString ( ) ) ; return his ; } 
public ICMSSobreConsumo < T > withValorDoICMSSubstituicaoTributariaSobreConsumo ( final BigDecimal string ) { iCMSCons . setVICMSSTCons ( string . oString ( ) ) ; return his ; } 
public ICMSSobreConsumo < T > withUF ( final UF Uf ) { iCMSCons . setUFCons ( Uf ) ; return his ; } 
public ICMSSobreOperacoesInterestaduais < T > withValorDaBaseDeCalculoDoICMSSubstituicaoTributariaDoDestino ( BigDecimal string ) ; public ICMSSobreOperacoesInterestaduais < T > withValorDoICMSSubstituicaoTributariaDoDestino ( BigDecimal string ) ; } 
public ICMSSobreOperacoesInterestaduais < T > withValorDoICMSSubstituicaoTributariaDoDestino ( BigDecimal string ) ; } 
public ICMSSobreOperacoesInterestaduais < T > withValorDaBaseDeCalculoDoICMSSubstituicaoTributariaDoDestino ( final BigDecimal string ) { iCMSInter . setVBCICMSSTDest ( string . oString ( ) ) ; return his ; } 
public ICMSSobreOperacoesInterestaduais < T > withValorDoICMSSubstituicaoTributariaDoDestino ( final BigDecimal string ) { iCMSInter . setVICMSSTDest ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorTotalDoICMSSubstituicaoTributaria ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDosProdutosEServicos ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoFrete ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoSeguro ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeDesconto ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal < T > withValor ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal < T > withValorTotalDosProdutosEServicos ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoFrete ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoSeguro ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeDesconto ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal < T > withValor ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal < T > withValorTotalDoFrete ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoSeguro ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeDesconto ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal < T > withValor ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal < T > withValorTotalDoSeguro ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeDesconto ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal < T > withValor ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal < T > withValorTotalDeDesconto ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal < T > withValor ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal < T > withValorTotalDoII ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal < T > withValor ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal < T > withValorTotalDoIPI ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal < T > withValor ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal < T > withValorTotalDoPIS ( BigDecimal string ) ; public ICMSTotal < T > withValor ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal < T > withValor ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal < T > withValorTotalDeOutrasDespesas ( BigDecimal string ) ; public ICMSTotal < T > withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal < T > withValorTotalDaNF ( BigDecimal string ) ; } 
public ICMSTotal < T > withValorDaBaseDeCalculo ( final BigDecimal string ) { iCMSTot . setVBC ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorTotal ( final BigDecimal string ) { iCMSTot . setVICMS ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorDaBaseDeCalculoDoICMSSubstituicaoTributaria ( final BigDecimal string ) { iCMSTot . setVBCST ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorTotalDoICMSSubstituicaoTributaria ( final BigDecimal string ) { iCMSTot . setVST ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorTotalDosProdutosEServicos ( final BigDecimal string ) { iCMSTot . setVProd ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorTotalDoFrete ( final BigDecimal string ) { iCMSTot . setVFrete ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorTotalDoSeguro ( final BigDecimal string ) { iCMSTot . setVSeg ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorTotalDeDesconto ( final BigDecimal string ) { iCMSTot . setVDesc ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorTotalDoII ( final BigDecimal string ) { iCMSTot . setVII ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorTotalDoIPI ( final BigDecimal string ) { iCMSTot . setVIPI ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorTotalDoPIS ( final BigDecimal string ) { iCMSTot . setVPIS ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValor ( final BigDecimal string ) { iCMSTot . setVCOFINS ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorTotalDeOutrasDespesas ( final BigDecimal string ) { iCMSTot . setVOutro ( string . oString ( ) ) ; return his ; } 
public ICMSTotal < T > withValorTotalDaNF ( final BigDecimal string ) { iCMSTot . setVNF ( string . oString ( ) ) ; return his ; } 
public IdentificacaoDaNFE < T > withCodigoDoMunicipioDeOcorrenciaDoFatoGerador ( String string ) ; public IdentificacaoDaNFE < T > withInformacoesDaNFReferenciada ( InformacaoDaNFReferenciada < ? > . . . nfref ) ; public IdentificacaoDaNFE < T > withFormatoDeImpressao ( FormatoDeImpressao string ) ; public IdentificacaoDaNFE < T > withFormaDeEmissao ( FormaDeEmissao string ) ; public IdentificacaoDaNFE < T > withDigitoVerificadorDaChaveDeAcessoDaNFE ( String string ) ; public IdentificacaoDaNFE < T > withTipoDoAmbiente ( TipoDoAmbiente string ) ; public IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE < T > withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE < T > withInformacoesDaNFReferenciada ( InformacaoDaNFReferenciada < ? > . . . nfref ) ; public IdentificacaoDaNFE < T > withFormatoDeImpressao ( FormatoDeImpressao string ) ; public IdentificacaoDaNFE < T > withFormaDeEmissao ( FormaDeEmissao string ) ; public IdentificacaoDaNFE < T > withDigitoVerificadorDaChaveDeAcessoDaNFE ( String string ) ; public IdentificacaoDaNFE < T > withTipoDoAmbiente ( TipoDoAmbiente string ) ; public IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE < T > withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE < T > withFormatoDeImpressao ( FormatoDeImpressao string ) ; public IdentificacaoDaNFE < T > withFormaDeEmissao ( FormaDeEmissao string ) ; public IdentificacaoDaNFE < T > withDigitoVerificadorDaChaveDeAcessoDaNFE ( String string ) ; public IdentificacaoDaNFE < T > withTipoDoAmbiente ( TipoDoAmbiente string ) ; public IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE < T > withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE < T > withFormaDeEmissao ( FormaDeEmissao string ) ; public IdentificacaoDaNFE < T > withDigitoVerificadorDaChaveDeAcessoDaNFE ( String string ) ; public IdentificacaoDaNFE < T > withTipoDoAmbiente ( TipoDoAmbiente string ) ; public IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE < T > withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE < T > withDigitoVerificadorDaChaveDeAcessoDaNFE ( String string ) ; public IdentificacaoDaNFE < T > withTipoDoAmbiente ( TipoDoAmbiente string ) ; public IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE < T > withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE < T > withTipoDoAmbiente ( TipoDoAmbiente string ) ; public IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE < T > withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( FinalidadeDaEmissao string ) ; public IdentificacaoDaNFE < T > withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE < T > withProcessoDeEmissao ( ProcessoDeEmissao string ) ; public IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( String string ) ; } 
public IdentificacaoDaNFE < T > withCodigoUFDoEmitente ( final String string ) { ide . setCUF ( string ) ; return his ; } 
public IdentificacaoDaNFE < T > withCodigoDaNF ( final Integer string ) { ide . setCNF ( string . oString ( ) ) ; return his ; } 
public IdentificacaoDaNFE < T > withDescricaoDaNaturezaDaOperacao ( final String string ) { ide . setNatOp ( string ) ; return his ; } 
public IdentificacaoDaNFE < T > withFormaDePagamento ( final FormaDePagamento string ) { ide . setIndPag ( string . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE < T > withModeloDoDocumentoFiscal ( final String string ) { ide . setMod ( string ) ; return his ; } 
public IdentificacaoDaNFE < T > withSerie ( final String string ) { ide . setSerie ( string ) ; return his ; } 
public IdentificacaoDaNFE < T > withNumeroDoDocumentoFiscal ( final String string ) { ide . setNNF ( string ) ; return his ; } 
public IdentificacaoDaNFE < T > withDataDeEmissao ( final Calendar calendar ) { ide . setDEmi ( calendar ) ; return his ; } 
public IdentificacaoDaNFE < T > withDataDeSaidaOuEntrada ( final Calendar calendar ) { ide . setDSaiEnt ( calendar ) ; return his ; } 
public IdentificacaoDaNFE < T > withTipoDoDocumentoFiscal ( final TipoDocumentoFiscal string ) { ide . setTpNF ( string . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE < T > withCodigoDoMunicipioDeOcorrenciaDoFatoGerador ( final String string ) { ide . setCMunFG ( string ) ; return his ; } 
public IdentificacaoDaNFE < T > withInformacoesDaNFReferenciada ( final InformacaoDaNFReferenciada < ? > . . . nfref ) { List < br . com . caelum . stella . nfe . modelo . NFref > list = new ArrayList < br . com . caelum . stella . nfe . modelo . NFref > ( ) ; for ( InformacaoDaNFReferenciada < ? > p : nfref ) { list . add ( ( br . com . caelum . stella . nfe . modelo . NFref ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } ide . setNFref ( list ) ; return his ; } 
public IdentificacaoDaNFE < T > withFormatoDeImpressao ( final FormatoDeImpressao formato ) { ide . setTpImp ( formato . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE < T > withFormaDeEmissao ( final FormaDeEmissao string ) { ide . setTpEmis ( string . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE < T > withDigitoVerificadorDaChaveDeAcessoDaNFE ( final String string ) { ide . setCDV ( string ) ; return his ; } 
public IdentificacaoDaNFE < T > withTipoDoAmbiente ( final TipoDoAmbiente string ) { ide . setTpAmb ( string . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( final FinalidadeDaEmissao string ) { ide . setFinNFe ( string . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE < T > withProcessoDeEmissao ( final ProcessoDeEmissao string ) { ide . setProcEmi ( string . getCode ( ) ) ; return his ; } 
public IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( final String string ) { ide . setVerProc ( string ) ; return his ; } 
public InfAtuCadEmiDFe < T > withUF ( TUf Uf ) ; public InfAtuCadEmiDFe < T > withInclui ( TEmissor < ? > Emissor ) ; public InfAtuCadEmiDFe < T > withExclui ( Exclui < ? > exclui ) ; public InfAtuCadEmiDFe < T > withId ( String string ) ; } 
public InfAtuCadEmiDFe < T > withInclui ( TEmissor < ? > Emissor ) ; public InfAtuCadEmiDFe < T > withExclui ( Exclui < ? > exclui ) ; public InfAtuCadEmiDFe < T > withId ( String string ) ; } 
public InfAtuCadEmiDFe < T > withExclui ( Exclui < ? > exclui ) ; public InfAtuCadEmiDFe < T > withId ( String string ) ; } 
public InfAtuCadEmiDFe < T > withUF ( final TUf Uf ) { infAtuCadEmiDFe . setUF ( Uf ) ; return his ; } 
public InfAtuCadEmiDFe < T > withInclui ( final TEmissor < ? > Emissor ) { infAtuCadEmiDFe . setInclui ( ( br . com . caelum . stella . nfe . modelo . TEmissor ) ( ( ObjectCreator ) Emissor ) . getInstance ( ) ) ; return his ; } 
public InfAtuCadEmiDFe < T > withExclui ( final Exclui < ? > exclui ) { infAtuCadEmiDFe . setExclui ( ( br . com . caelum . stella . nfe . modelo . Exclui ) ( ( ObjectCreator ) exclui ) . getInstance ( ) ) ; return his ; } 
public InfAtuCadEmiDFe < T > withId ( final String string ) { infAtuCadEmiDFe . setId ( string ) ; return his ; } 
public InfCad < T > withIE ( String string ) ; public InfCad < T > withCNPJ ( String string ) ; public InfCad < T > withCPF ( String string ) ; public InfCad < T > withUF ( TUf Uf ) ; public InfCad < T > withCSit ( String string ) ; public InfCad < T > withXNome ( String string ) ; public InfCad < T > withXFant ( String string ) ; public InfCad < T > withXRegApur ( String string ) ; public InfCad < T > withCNAE ( String string ) ; public InfCad < T > withDIniAtiv ( Calendar calendar ) ; public InfCad < T > withDUltSit ( Calendar calendar ) ; public InfCad < T > withDBaixa ( Calendar calendar ) ; public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withCNPJ ( String string ) ; public InfCad < T > withCPF ( String string ) ; public InfCad < T > withUF ( TUf Uf ) ; public InfCad < T > withCSit ( String string ) ; public InfCad < T > withXNome ( String string ) ; public InfCad < T > withXFant ( String string ) ; public InfCad < T > withXRegApur ( String string ) ; public InfCad < T > withCNAE ( String string ) ; public InfCad < T > withDIniAtiv ( Calendar calendar ) ; public InfCad < T > withDUltSit ( Calendar calendar ) ; public InfCad < T > withDBaixa ( Calendar calendar ) ; public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withCPF ( String string ) ; public InfCad < T > withUF ( TUf Uf ) ; public InfCad < T > withCSit ( String string ) ; public InfCad < T > withXNome ( String string ) ; public InfCad < T > withXFant ( String string ) ; public InfCad < T > withXRegApur ( String string ) ; public InfCad < T > withCNAE ( String string ) ; public InfCad < T > withDIniAtiv ( Calendar calendar ) ; public InfCad < T > withDUltSit ( Calendar calendar ) ; public InfCad < T > withDBaixa ( Calendar calendar ) ; public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withUF ( TUf Uf ) ; public InfCad < T > withCSit ( String string ) ; public InfCad < T > withXNome ( String string ) ; public InfCad < T > withXFant ( String string ) ; public InfCad < T > withXRegApur ( String string ) ; public InfCad < T > withCNAE ( String string ) ; public InfCad < T > withDIniAtiv ( Calendar calendar ) ; public InfCad < T > withDUltSit ( Calendar calendar ) ; public InfCad < T > withDBaixa ( Calendar calendar ) ; public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withCSit ( String string ) ; public InfCad < T > withXNome ( String string ) ; public InfCad < T > withXFant ( String string ) ; public InfCad < T > withXRegApur ( String string ) ; public InfCad < T > withCNAE ( String string ) ; public InfCad < T > withDIniAtiv ( Calendar calendar ) ; public InfCad < T > withDUltSit ( Calendar calendar ) ; public InfCad < T > withDBaixa ( Calendar calendar ) ; public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withXNome ( String string ) ; public InfCad < T > withXFant ( String string ) ; public InfCad < T > withXRegApur ( String string ) ; public InfCad < T > withCNAE ( String string ) ; public InfCad < T > withDIniAtiv ( Calendar calendar ) ; public InfCad < T > withDUltSit ( Calendar calendar ) ; public InfCad < T > withDBaixa ( Calendar calendar ) ; public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withXFant ( String string ) ; public InfCad < T > withXRegApur ( String string ) ; public InfCad < T > withCNAE ( String string ) ; public InfCad < T > withDIniAtiv ( Calendar calendar ) ; public InfCad < T > withDUltSit ( Calendar calendar ) ; public InfCad < T > withDBaixa ( Calendar calendar ) ; public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withXRegApur ( String string ) ; public InfCad < T > withCNAE ( String string ) ; public InfCad < T > withDIniAtiv ( Calendar calendar ) ; public InfCad < T > withDUltSit ( Calendar calendar ) ; public InfCad < T > withDBaixa ( Calendar calendar ) ; public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withCNAE ( String string ) ; public InfCad < T > withDIniAtiv ( Calendar calendar ) ; public InfCad < T > withDUltSit ( Calendar calendar ) ; public InfCad < T > withDBaixa ( Calendar calendar ) ; public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withDIniAtiv ( Calendar calendar ) ; public InfCad < T > withDUltSit ( Calendar calendar ) ; public InfCad < T > withDBaixa ( Calendar calendar ) ; public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withDUltSit ( Calendar calendar ) ; public InfCad < T > withDBaixa ( Calendar calendar ) ; public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withDBaixa ( Calendar calendar ) ; public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withIEUnica ( String string ) ; public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCad < T > withIEAtual ( String string ) ; public InfCad < T > withEnder ( TEndereco Endereco ) ; } 
public InfCadEmiDFe < T > withDPubCad ( Calendar calendar ) ; public InfCadEmiDFe < T > withEmissor ( List < TEmissor < ? > > list ) ; public InfCadEmiDFe < T > withId ( String string ) ; } 
public InfCadEmiDFe < T > withEmissor ( List < TEmissor < ? > > list ) ; public InfCadEmiDFe < T > withId ( String string ) ; } 
public InfCadEmiDFe < T > withDPubCad ( final Calendar calendar ) { infCadEmiDFe . setDPubCad ( calendar . oString ( ) ) ; return his ; } 
public InfCadEmiDFe < T > withEmissor ( final List < TEmissor < ? > > listEmissor ) { List < br . com . caelum . stella . nfe . modelo . TEmissor > list = new ArrayList < br . com . caelum . stella . nfe . modelo . TEmissor > ( ) ; for ( TEmissor < ? > emissor : listEmissor ) { list . add ( ( br . com . caelum . stella . nfe . modelo . TEmissor ) ( ( ObjectCreator ) emissor ) . getInstance ( ) ) ; } infCadEmiDFe . setEmissor ( list ) ; return his ; } 
public InfCadEmiDFe < T > withId ( final String string ) { infCadEmiDFe . setId ( string ) ; return his ; } 
public InfCad < T > withIE ( final String string ) { infCad . setIE ( string ) ; return his ; } 
public InfCad < T > withCNPJ ( final String string ) { infCad . setCNPJ ( string ) ; return his ; } 
public InfCad < T > withCPF ( final String string ) { infCad . setCPF ( string ) ; return his ; } 
public InfCad < T > withUF ( final TUf Uf ) { infCad . setUF ( Uf ) ; return his ; } 
public InfCad < T > withCSit ( final String string ) { infCad . setCSit ( string ) ; return his ; } 
public InfCad < T > withXNome ( final String string ) { infCad . setXNome ( string ) ; return his ; } 
public InfCad < T > withXFant ( final String string ) { infCad . setXFant ( string ) ; return his ; } 
public InfCad < T > withXRegApur ( final String string ) { infCad . setXRegApur ( string ) ; return his ; } 
public InfCad < T > withCNAE ( final String string ) { infCad . setCNAE ( string ) ; return his ; } 
public InfCad < T > withDIniAtiv ( final Calendar calendar ) { infCad . setDIniAtiv ( calendar . oString ( ) ) ; return his ; } 
public InfCad < T > withDUltSit ( final Calendar calendar ) { infCad . setDUltSit ( calendar . oString ( ) ) ; return his ; } 
public InfCad < T > withDBaixa ( final Calendar calendar ) { infCad . setDBaixa ( calendar . oString ( ) ) ; return his ; } 
public InfCad < T > withIEUnica ( final String string ) { infCad . setIEUnica ( string ) ; return his ; } 
public InfCad < T > withIEAtual ( final String string ) { infCad . setIEAtual ( string ) ; return his ; } 
public InfCad < T > withEnder ( final TEndereco Endereco ) { infCad . setEnder ( Endereco ) ; return his ; } 
public InfCanc < T > withTpAmb ( String string ) ; public InfCanc < T > withXServ ( String string ) ; public InfCanc < T > withChNFe ( String string ) ; public InfCanc < T > withNProt ( String string ) ; public InfCanc < T > withXJust ( String string ) ; public InfCanc < T > withId ( String string ) ; } 
public InfCanc < T > withXServ ( String string ) ; public InfCanc < T > withChNFe ( String string ) ; public InfCanc < T > withNProt ( String string ) ; public InfCanc < T > withXJust ( String string ) ; public InfCanc < T > withId ( String string ) ; } 
public InfCanc < T > withChNFe ( String string ) ; public InfCanc < T > withNProt ( String string ) ; public InfCanc < T > withXJust ( String string ) ; public InfCanc < T > withId ( String string ) ; } 
public InfCanc < T > withNProt ( String string ) ; public InfCanc < T > withXJust ( String string ) ; public InfCanc < T > withId ( String string ) ; } 
public InfCanc < T > withXJust ( String string ) ; public InfCanc < T > withId ( String string ) ; } 
public InfCanc < T > withTpAmb ( final String string ) { his . infCanc . setTpAmb ( string ) ; return his ; } 
public InfCanc < T > withXServ ( final String string ) { his . infCanc . setXServ ( string ) ; return his ; } 
public InfCanc < T > withChNFe ( final String string ) { his . infCanc . setChNFe ( string ) ; return his ; } 
public InfCanc < T > withNProt ( final String string ) { his . infCanc . setNProt ( string ) ; return his ; } 
public InfCanc < T > withXJust ( final String string ) { his . infCanc . setXJust ( string ) ; return his ; } 
public InfCanc < T > withId ( final String string ) { his . infCanc . setId ( string ) ; return his ; } 
public InfCons < T > withVerAplic ( String string ) ; public InfCons < T > withCStat ( String string ) ; public InfCons < T > withXMotivo ( String string ) ; public InfCons < T > withUF ( TUfCons UfCons ) ; public InfCons < T > withIE ( String string ) ; public InfCons < T > withCNPJ ( String string ) ; public InfCons < T > withCPF ( String string ) ; public InfCons < T > withDhCons ( Calendar calendar ) ; public InfCons < T > withCUF ( String string ) ; public InfCons < T > withInfCad ( List < InfCad < ? > > list ) ; } 
public InfCons < T > withCStat ( String string ) ; public InfCons < T > withXMotivo ( String string ) ; public InfCons < T > withUF ( TUfCons UfCons ) ; public InfCons < T > withIE ( String string ) ; public InfCons < T > withCNPJ ( String string ) ; public InfCons < T > withCPF ( String string ) ; public InfCons < T > withDhCons ( Calendar calendar ) ; public InfCons < T > withCUF ( String string ) ; public InfCons < T > withInfCad ( List < InfCad < ? > > list ) ; } 
public InfCons < T > withXMotivo ( String string ) ; public InfCons < T > withUF ( TUfCons UfCons ) ; public InfCons < T > withIE ( String string ) ; public InfCons < T > withCNPJ ( String string ) ; public InfCons < T > withCPF ( String string ) ; public InfCons < T > withDhCons ( Calendar calendar ) ; public InfCons < T > withCUF ( String string ) ; public InfCons < T > withInfCad ( List < InfCad < ? > > list ) ; } 
public InfCons < T > withUF ( TUfCons UfCons ) ; public InfCons < T > withIE ( String string ) ; public InfCons < T > withCNPJ ( String string ) ; public InfCons < T > withCPF ( String string ) ; public InfCons < T > withDhCons ( Calendar calendar ) ; public InfCons < T > withCUF ( String string ) ; public InfCons < T > withInfCad ( List < InfCad < ? > > list ) ; } 
public InfCons < T > withIE ( String string ) ; public InfCons < T > withCNPJ ( String string ) ; public InfCons < T > withCPF ( String string ) ; public InfCons < T > withDhCons ( Calendar calendar ) ; public InfCons < T > withCUF ( String string ) ; public InfCons < T > withInfCad ( List < InfCad < ? > > list ) ; } 
public InfCons < T > withCNPJ ( String string ) ; public InfCons < T > withCPF ( String string ) ; public InfCons < T > withDhCons ( Calendar calendar ) ; public InfCons < T > withCUF ( String string ) ; public InfCons < T > withInfCad ( List < InfCad < ? > > list ) ; } 
public InfCons < T > withCPF ( String string ) ; public InfCons < T > withDhCons ( Calendar calendar ) ; public InfCons < T > withCUF ( String string ) ; public InfCons < T > withInfCad ( List < InfCad < ? > > list ) ; } 
public InfCons < T > withDhCons ( Calendar calendar ) ; public InfCons < T > withCUF ( String string ) ; public InfCons < T > withInfCad ( List < InfCad < ? > > list ) ; } 
public InfCons < T > withCUF ( String string ) ; public InfCons < T > withInfCad ( List < InfCad < ? > > list ) ; } 
public InfCons < T > withVerAplic ( final String string ) { infCons . setVerAplic ( string ) ; return his ; } 
public InfCons < T > withCStat ( final String string ) { infCons . setCStat ( string ) ; return his ; } 
public InfCons < T > withXMotivo ( final String string ) { infCons . setXMotivo ( string ) ; return his ; } 
public InfCons < T > withUF ( final TUfCons UfCons ) { infCons . setUF ( UfCons ) ; return his ; } 
public InfCons < T > withIE ( final String string ) { infCons . setIE ( string ) ; return his ; } 
public InfCons < T > withCNPJ ( final String string ) { infCons . setCNPJ ( string ) ; return his ; } 
public InfCons < T > withCPF ( final String string ) { infCons . setCPF ( string ) ; return his ; } 
public InfCons < T > withDhCons ( final Calendar calendar ) { infCons . setDhCons ( calendar . oString ( ) ) ; return his ; } 
public InfCons < T > withCUF ( final String string ) { infCons . setCUF ( string ) ; return his ; } 
public InfCons < T > withInfCad ( final List < InfCad < ? > > listInf ) { List < br . com . caelum . stella . nfe . modelo . InfCad > list = new ArrayList < br . com . caelum . stella . nfe . modelo . InfCad > ( ) ; for ( InfCad < ? > infCad : listInf ) { list . add ( ( br . com . caelum . stella . nfe . modelo . InfCad ) ( ( ObjectCreator ) infCad ) . getInstance ( ) ) ; } infCons . setInfCad ( list ) ; return his ; } 
public InfInut < T > withTpAmb ( String string ) ; public InfInut < T > withVerAplic ( String string ) ; public InfInut < T > withCStat ( String string ) ; public InfInut < T > withXMotivo ( String string ) ; public InfInut < T > withCUF ( String string ) ; public InfInut < T > withAno ( String string ) ; public InfInut < T > withCNPJ ( String string ) ; public InfInut < T > withMod ( String string ) ; public InfInut < T > withSerie ( String string ) ; public InfInut < T > withNNFIni ( String string ) ; public InfInut < T > withNNFFin ( String string ) ; public InfInut < T > withDhRecbto ( Calendar calendar ) ; public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withVerAplic ( String string ) ; public InfInut < T > withCStat ( String string ) ; public InfInut < T > withXMotivo ( String string ) ; public InfInut < T > withCUF ( String string ) ; public InfInut < T > withAno ( String string ) ; public InfInut < T > withCNPJ ( String string ) ; public InfInut < T > withMod ( String string ) ; public InfInut < T > withSerie ( String string ) ; public InfInut < T > withNNFIni ( String string ) ; public InfInut < T > withNNFFin ( String string ) ; public InfInut < T > withDhRecbto ( Calendar calendar ) ; public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withCStat ( String string ) ; public InfInut < T > withXMotivo ( String string ) ; public InfInut < T > withCUF ( String string ) ; public InfInut < T > withAno ( String string ) ; public InfInut < T > withCNPJ ( String string ) ; public InfInut < T > withMod ( String string ) ; public InfInut < T > withSerie ( String string ) ; public InfInut < T > withNNFIni ( String string ) ; public InfInut < T > withNNFFin ( String string ) ; public InfInut < T > withDhRecbto ( Calendar calendar ) ; public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withXMotivo ( String string ) ; public InfInut < T > withCUF ( String string ) ; public InfInut < T > withAno ( String string ) ; public InfInut < T > withCNPJ ( String string ) ; public InfInut < T > withMod ( String string ) ; public InfInut < T > withSerie ( String string ) ; public InfInut < T > withNNFIni ( String string ) ; public InfInut < T > withNNFFin ( String string ) ; public InfInut < T > withDhRecbto ( Calendar calendar ) ; public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withCUF ( String string ) ; public InfInut < T > withAno ( String string ) ; public InfInut < T > withCNPJ ( String string ) ; public InfInut < T > withMod ( String string ) ; public InfInut < T > withSerie ( String string ) ; public InfInut < T > withNNFIni ( String string ) ; public InfInut < T > withNNFFin ( String string ) ; public InfInut < T > withDhRecbto ( Calendar calendar ) ; public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withAno ( String string ) ; public InfInut < T > withCNPJ ( String string ) ; public InfInut < T > withMod ( String string ) ; public InfInut < T > withSerie ( String string ) ; public InfInut < T > withNNFIni ( String string ) ; public InfInut < T > withNNFFin ( String string ) ; public InfInut < T > withDhRecbto ( Calendar calendar ) ; public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withCNPJ ( String string ) ; public InfInut < T > withMod ( String string ) ; public InfInut < T > withSerie ( String string ) ; public InfInut < T > withNNFIni ( String string ) ; public InfInut < T > withNNFFin ( String string ) ; public InfInut < T > withDhRecbto ( Calendar calendar ) ; public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withMod ( String string ) ; public InfInut < T > withSerie ( String string ) ; public InfInut < T > withNNFIni ( String string ) ; public InfInut < T > withNNFFin ( String string ) ; public InfInut < T > withDhRecbto ( Calendar calendar ) ; public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withSerie ( String string ) ; public InfInut < T > withNNFIni ( String string ) ; public InfInut < T > withNNFFin ( String string ) ; public InfInut < T > withDhRecbto ( Calendar calendar ) ; public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withNNFIni ( String string ) ; public InfInut < T > withNNFFin ( String string ) ; public InfInut < T > withDhRecbto ( Calendar calendar ) ; public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withNNFFin ( String string ) ; public InfInut < T > withDhRecbto ( Calendar calendar ) ; public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withDhRecbto ( Calendar calendar ) ; public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withNProt ( String string ) ; public InfInut < T > withId ( String string ) ; } 
public InfInut < T > withTpAmb ( final String string ) { infInut . setTpAmb ( string ) ; return his ; } 
public InfInut < T > withVerAplic ( final String string ) { infInut . setVerAplic ( string ) ; return his ; } 
public InfInut < T > withCStat ( final String string ) { infInut . setCStat ( string ) ; return his ; } 
public InfInut < T > withXMotivo ( final String string ) { infInut . setXMotivo ( string ) ; return his ; } 
public InfInut < T > withCUF ( final String string ) { infInut . setCUF ( string ) ; return his ; } 
public InfInut < T > withAno ( final String string ) { infInut . setAno ( string ) ; return his ; } 
public InfInut < T > withCNPJ ( final String string ) { infInut . setCNPJ ( string ) ; return his ; } 
public InfInut < T > withMod ( final String string ) { infInut . setMod ( string ) ; return his ; } 
public InfInut < T > withSerie ( final String string ) { infInut . setSerie ( string ) ; return his ; } 
public InfInut < T > withNNFIni ( final String string ) { infInut . setNNFIni ( string ) ; return his ; } 
public InfInut < T > withNNFFin ( final String string ) { infInut . setNNFFin ( string ) ; return his ; } 
public InfInut < T > withDhRecbto ( final Calendar calendar ) { infInut . setDhRecbto ( calendar . oString ( ) ) ; return his ; } 
public InfInut < T > withNProt ( final String string ) { infInut . setNProt ( string ) ; return his ; } 
public InfInut < T > withId ( final String string ) { infInut . setId ( string ) ; return his ; } 
public InformacoesDaNFE < T > withIde ( final IdentificacaoDaNFE < ? > ide ) { infNFe . setIde ( ( br . com . caelum . stella . nfe . modelo . Ide ) ( ( ObjectCreator ) ide ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE < T > withEmit ( final Emitente < ? > emit ) { infNFe . setEmit ( ( br . com . caelum . stella . nfe . modelo . Emit ) ( ( ObjectCreator ) emit ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE < T > withAvulsa ( final Avulsa < ? > avulsa ) { infNFe . setAvulsa ( ( br . com . caelum . stella . nfe . modelo . Avulsa ) ( ( ObjectCreator ) avulsa ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE < T > withDest ( final Destinatario < ? > dest ) { infNFe . setDest ( ( br . com . caelum . stella . nfe . modelo . Dest ) ( ( ObjectCreator ) dest ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE < T > withRetirada ( final DadosDoLocal < ? > Local ) { infNFe . setRetirada ( ( br . com . caelum . stella . nfe . modelo . TLocal ) ( ( ObjectCreator ) Local ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE < T > withEntrega ( final DadosDoLocal < ? > Local ) { infNFe . setEntrega ( ( br . com . caelum . stella . nfe . modelo . TLocal ) ( ( ObjectCreator ) Local ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE < T > withDet ( final Detalhe < ? > . . . det ) { List < br . com . caelum . stella . nfe . modelo . Det > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Det > ( ) ; for ( Detalhe < ? > p : det ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Det ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infNFe . setDet ( list ) ; return his ; } 
public InformacoesDaNFE < T > withTotal ( final TotalNFE < ? > otal ) { infNFe . setTotal ( ( br . com . caelum . stella . nfe . modelo . Total ) ( ( ObjectCreator ) otal ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE < T > withTransp ( final Transporte < ? > ransp ) { infNFe . setTransp ( ( br . com . caelum . stella . nfe . modelo . Transp ) ( ( ObjectCreator ) ransp ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE < T > withCobr ( final Cobranca < ? > cobr ) { infNFe . setCobr ( ( br . com . caelum . stella . nfe . modelo . Cobr ) ( ( ObjectCreator ) cobr ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE < T > withInfAdic ( final InformacoesAdicionais < ? > infAdic ) { infNFe . setInfAdic ( ( br . com . caelum . stella . nfe . modelo . InfAdic ) ( ( ObjectCreator ) infAdic ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE < T > withExporta ( final Exportacao < ? > exporta ) { infNFe . setExporta ( ( br . com . caelum . stella . nfe . modelo . Exporta ) ( ( ObjectCreator ) exporta ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE < T > withCompra ( final Compra < ? > compra ) { infNFe . setCompra ( ( br . com . caelum . stella . nfe . modelo . Compra ) ( ( ObjectCreator ) compra ) . getInstance ( ) ) ; return his ; } 
public InformacoesDaNFE < T > withVersao ( final String string ) { infNFe . setVersao ( string ) ; return his ; } 
public InformacoesDaNFE < T > withId ( final String string ) { infNFe . setId ( string ) ; return his ; } 
public InfRetAtuCadEmiDFe < T > withUF ( TUf Uf ) ; public InfRetAtuCadEmiDFe < T > withCNPJ ( Object object ) ; public InfRetAtuCadEmiDFe < T > withOpe ( String string ) ; public InfRetAtuCadEmiDFe < T > withResOpe ( String string ) ; public InfRetAtuCadEmiDFe < T > withId ( String string ) ; } 
public InfRetAtuCadEmiDFe < T > withCNPJ ( Object object ) ; public InfRetAtuCadEmiDFe < T > withOpe ( String string ) ; public InfRetAtuCadEmiDFe < T > withResOpe ( String string ) ; public InfRetAtuCadEmiDFe < T > withId ( String string ) ; } 
public InfRetAtuCadEmiDFe < T > withOpe ( String string ) ; public InfRetAtuCadEmiDFe < T > withResOpe ( String string ) ; public InfRetAtuCadEmiDFe < T > withId ( String string ) ; } 
public InfRetAtuCadEmiDFe < T > withResOpe ( String string ) ; public InfRetAtuCadEmiDFe < T > withId ( String string ) ; } 
public InfRetAtuCadEmiDFe < T > withUF ( final TUf Uf ) { his . infRetAtuCadEmiDFe . setUF ( Uf ) ; return his ; } 
public InfRetAtuCadEmiDFe < T > withCNPJ ( final Object object ) { his . infRetAtuCadEmiDFe . setCNPJ ( object ) ; return his ; } 
public InfRetAtuCadEmiDFe < T > withOpe ( final String string ) { his . infRetAtuCadEmiDFe . setOpe ( string ) ; return his ; } 
public InfRetAtuCadEmiDFe < T > withResOpe ( final String string ) { his . infRetAtuCadEmiDFe . setResOpe ( string ) ; return his ; } 
public InfRetAtuCadEmiDFe < T > withId ( final String string ) { his . infRetAtuCadEmiDFe . setId ( string ) ; return his ; } 
public InformacaoDaNFReferenciada < T > withChaveDeAcessoDaNFReferenciada ( String string ) ; public InformacaoDaNFReferenciada < T > withNFReferenciada ( NFReferenciada < ? > refNF ) ; } 
public InformacaoDaNFReferenciada < T > withNFReferenciada ( NFReferenciada < ? > refNF ) ; } 
public InformacoesAdicionais < T > withInformacoesAdicionaisDeInteresseDoFisco ( String string ) ; public InformacoesAdicionais < T > withInformacoesComplementares ( String string ) ; public InformacoesAdicionais < T > withObservacoesDoContribuinte ( ObservacaoDoContribuinte < ? > . . . obsConts ) ; public InformacoesAdicionais < T > withObsFisco ( ObservacaoFisco < ? > . . . obsFiscos ) ; public InformacoesAdicionais < T > withProcRef ( ProcessoReferenciado < ? > . . . procRefs ) ; } 
public InformacoesAdicionais < T > withInformacoesComplementares ( String string ) ; public InformacoesAdicionais < T > withObservacoesDoContribuinte ( ObservacaoDoContribuinte < ? > . . . obsConts ) ; public InformacoesAdicionais < T > withObsFisco ( ObservacaoFisco < ? > . . . obsFiscos ) ; public InformacoesAdicionais < T > withProcRef ( ProcessoReferenciado < ? > . . . procRefs ) ; } 
public InformacoesAdicionais < T > withObservacoesDoContribuinte ( ObservacaoDoContribuinte < ? > . . . obsConts ) ; public InformacoesAdicionais < T > withObsFisco ( ObservacaoFisco < ? > . . . obsFiscos ) ; public InformacoesAdicionais < T > withProcRef ( ProcessoReferenciado < ? > . . . procRefs ) ; } 
public InformacoesAdicionais < T > withObsFisco ( ObservacaoFisco < ? > . . . obsFiscos ) ; public InformacoesAdicionais < T > withProcRef ( ProcessoReferenciado < ? > . . . procRefs ) ; } 
public InformacoesAdicionais < T > withProcRef ( ProcessoReferenciado < ? > . . . procRefs ) ; } 
public InformacoesAdicionais < T > withInformacoesAdicionaisDeInteresseDoFisco ( final String string ) { infAdic . setInfAdFisco ( string ) ; return his ; } 
public InformacoesAdicionais < T > withInformacoesComplementares ( final String string ) { infAdic . setInfCpl ( string ) ; return his ; } 
public InformacoesAdicionais < T > withObservacoesDoContribuinte ( final ObservacaoDoContribuinte < ? > . . . obsConts ) { List < br . com . caelum . stella . nfe . modelo . ObsCont > list = new ArrayList < br . com . caelum . stella . nfe . modelo . ObsCont > ( ) ; for ( ObservacaoDoContribuinte < ? > p : obsConts ) { list . add ( ( br . com . caelum . stella . nfe . modelo . ObsCont ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infAdic . setObsCont ( list ) ; return his ; } 
public InformacoesAdicionais < T > withObsFisco ( final ObservacaoFisco < ? > . . . obsFiscos ) { List < br . com . caelum . stella . nfe . modelo . ObsFisco > list = new ArrayList < br . com . caelum . stella . nfe . modelo . ObsFisco > ( ) ; for ( ObservacaoFisco < ? > p : obsFiscos ) { list . add ( ( br . com . caelum . stella . nfe . modelo . ObsFisco ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infAdic . setObsFisco ( list ) ; return his ; } 
public InformacoesAdicionais < T > withProcRef ( final ProcessoReferenciado < ? > . . . procRef ) { List < br . com . caelum . stella . nfe . modelo . ProcRef > list = new ArrayList < br . com . caelum . stella . nfe . modelo . ProcRef > ( ) ; for ( ProcessoReferenciado < ? > p : procRef ) { list . add ( ( br . com . caelum . stella . nfe . modelo . ProcRef ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } infAdic . setProcRef ( list ) ; return his ; } 
public InformacoesDaNFE < T > withAvulsa ( Avulsa < ? > avulsa ) ; public InformacoesDaNFE < T > withDest ( Destinatario < ? > dest ) ; public InformacoesDaNFE < T > withRetirada ( DadosDoLocal < ? > Local ) ; public InformacoesDaNFE < T > withEntrega ( DadosDoLocal < ? > Local ) ; public InformacoesDaNFE < T > withDet ( Detalhe < ? > . . . det ) ; public InformacoesDaNFE < T > withTotal ( TotalNFE < ? > otal ) ; public InformacoesDaNFE < T > withTransp ( Transporte < ? > ransp ) ; public InformacoesDaNFE < T > withCobr ( Cobranca < ? > cobr ) ; public InformacoesDaNFE < T > withInfAdic ( InformacoesAdicionais < ? > infAdic ) ; public InformacoesDaNFE < T > withExporta ( Exportacao < ? > exporta ) ; public InformacoesDaNFE < T > withCompra ( Compra < ? > compra ) ; public InformacoesDaNFE < T > withVersao ( String string ) ; public InformacoesDaNFE < T > withId ( String string ) ; } 
public InformacoesDaNFE < T > withDest ( Destinatario < ? > dest ) ; public InformacoesDaNFE < T > withRetirada ( DadosDoLocal < ? > Local ) ; public InformacoesDaNFE < T > withEntrega ( DadosDoLocal < ? > Local ) ; public InformacoesDaNFE < T > withDet ( Detalhe < ? > . . . det ) ; public InformacoesDaNFE < T > withTotal ( TotalNFE < ? > otal ) ; public InformacoesDaNFE < T > withTransp ( Transporte < ? > ransp ) ; public InformacoesDaNFE < T > withCobr ( Cobranca < ? > cobr ) ; public InformacoesDaNFE < T > withInfAdic ( InformacoesAdicionais < ? > infAdic ) ; public InformacoesDaNFE < T > withExporta ( Exportacao < ? > exporta ) ; public InformacoesDaNFE < T > withCompra ( Compra < ? > compra ) ; public InformacoesDaNFE < T > withVersao ( String string ) ; public InformacoesDaNFE < T > withId ( String string ) ; } 
public InformacoesDaNFE < T > withRetirada ( DadosDoLocal < ? > Local ) ; public InformacoesDaNFE < T > withEntrega ( DadosDoLocal < ? > Local ) ; public InformacoesDaNFE < T > withDet ( Detalhe < ? > . . . det ) ; public InformacoesDaNFE < T > withTotal ( TotalNFE < ? > otal ) ; public InformacoesDaNFE < T > withTransp ( Transporte < ? > ransp ) ; public InformacoesDaNFE < T > withCobr ( Cobranca < ? > cobr ) ; public InformacoesDaNFE < T > withInfAdic ( InformacoesAdicionais < ? > infAdic ) ; public InformacoesDaNFE < T > withExporta ( Exportacao < ? > exporta ) ; public InformacoesDaNFE < T > withCompra ( Compra < ? > compra ) ; public InformacoesDaNFE < T > withVersao ( String string ) ; public InformacoesDaNFE < T > withId ( String string ) ; } 
public InformacoesDaNFE < T > withEntrega ( DadosDoLocal < ? > Local ) ; public InformacoesDaNFE < T > withDet ( Detalhe < ? > . . . det ) ; public InformacoesDaNFE < T > withTotal ( TotalNFE < ? > otal ) ; public InformacoesDaNFE < T > withTransp ( Transporte < ? > ransp ) ; public InformacoesDaNFE < T > withCobr ( Cobranca < ? > cobr ) ; public InformacoesDaNFE < T > withInfAdic ( InformacoesAdicionais < ? > infAdic ) ; public InformacoesDaNFE < T > withExporta ( Exportacao < ? > exporta ) ; public InformacoesDaNFE < T > withCompra ( Compra < ? > compra ) ; public InformacoesDaNFE < T > withVersao ( String string ) ; public InformacoesDaNFE < T > withId ( String string ) ; } 
public InformacoesDaNFE < T > withDet ( Detalhe < ? > . . . det ) ; public InformacoesDaNFE < T > withTotal ( TotalNFE < ? > otal ) ; public InformacoesDaNFE < T > withTransp ( Transporte < ? > ransp ) ; public InformacoesDaNFE < T > withCobr ( Cobranca < ? > cobr ) ; public InformacoesDaNFE < T > withInfAdic ( InformacoesAdicionais < ? > infAdic ) ; public InformacoesDaNFE < T > withExporta ( Exportacao < ? > exporta ) ; public InformacoesDaNFE < T > withCompra ( Compra < ? > compra ) ; public InformacoesDaNFE < T > withVersao ( String string ) ; public InformacoesDaNFE < T > withId ( String string ) ; } 
public InformacoesDaNFE < T > withTotal ( TotalNFE < ? > otal ) ; public InformacoesDaNFE < T > withTransp ( Transporte < ? > ransp ) ; public InformacoesDaNFE < T > withCobr ( Cobranca < ? > cobr ) ; public InformacoesDaNFE < T > withInfAdic ( InformacoesAdicionais < ? > infAdic ) ; public InformacoesDaNFE < T > withExporta ( Exportacao < ? > exporta ) ; public InformacoesDaNFE < T > withCompra ( Compra < ? > compra ) ; public InformacoesDaNFE < T > withVersao ( String string ) ; public InformacoesDaNFE < T > withId ( String string ) ; } 
public InformacoesDaNFE < T > withTransp ( Transporte < ? > ransp ) ; public InformacoesDaNFE < T > withCobr ( Cobranca < ? > cobr ) ; public InformacoesDaNFE < T > withInfAdic ( InformacoesAdicionais < ? > infAdic ) ; public InformacoesDaNFE < T > withExporta ( Exportacao < ? > exporta ) ; public InformacoesDaNFE < T > withCompra ( Compra < ? > compra ) ; public InformacoesDaNFE < T > withVersao ( String string ) ; public InformacoesDaNFE < T > withId ( String string ) ; } 
public InformacoesDaNFE < T > withCobr ( Cobranca < ? > cobr ) ; public InformacoesDaNFE < T > withInfAdic ( InformacoesAdicionais < ? > infAdic ) ; public InformacoesDaNFE < T > withExporta ( Exportacao < ? > exporta ) ; public InformacoesDaNFE < T > withCompra ( Compra < ? > compra ) ; public InformacoesDaNFE < T > withVersao ( String string ) ; public InformacoesDaNFE < T > withId ( String string ) ; } 
public InformacoesDaNFE < T > withInfAdic ( InformacoesAdicionais < ? > infAdic ) ; public InformacoesDaNFE < T > withExporta ( Exportacao < ? > exporta ) ; public InformacoesDaNFE < T > withCompra ( Compra < ? > compra ) ; public InformacoesDaNFE < T > withVersao ( String string ) ; public InformacoesDaNFE < T > withId ( String string ) ; } 
public InformacoesDaNFE < T > withExporta ( Exportacao < ? > exporta ) ; public InformacoesDaNFE < T > withCompra ( Compra < ? > compra ) ; public InformacoesDaNFE < T > withVersao ( String string ) ; public InformacoesDaNFE < T > withId ( String string ) ; } 
public InformacoesDaNFE < T > withCompra ( Compra < ? > compra ) ; public InformacoesDaNFE < T > withVersao ( String string ) ; public InformacoesDaNFE < T > withId ( String string ) ; } 
public InformacoesDaNFE < T > withVersao ( String string ) ; public InformacoesDaNFE < T > withId ( String string ) ; } 
public InformacaoDaNFReferenciada < T > withChaveDeAcessoDaNFReferenciada ( final String string ) { nFref . setRefNFe ( string ) ; return his ; } 
public InformacaoDaNFReferenciada < T > withNFReferenciada ( final NFReferenciada < ? > refNF ) { nFref . setRefNF ( ( br . com . caelum . stella . nfe . modelo . RefNF ) ( ( ObjectCreator ) refNF ) . getInstance ( ) ) ; return his ; } 
public Lacres < T > withNumeroDosLacres ( String string ) ; TODO this must not be a class. Just a setter.} 
public Lacres < T > withNumeroDosLacres ( final String string ) { lacres . setNLacre ( string ) ; return his ; } 
public Medicamento < T > withNumeroDoLote ( String string ) ; public Medicamento < T > withQuantidadeDoLote ( String string ) ; public Medicamento < T > withDataDeFabricacao ( Calendar calendar ) ; public Medicamento < T > withDataDeValidade ( Calendar calendar ) ; public Medicamento < T > withPrecoMaximoAoConsumidor ( BigDecimal string ) ; } 
public Medicamento < T > withQuantidadeDoLote ( String string ) ; public Medicamento < T > withDataDeFabricacao ( Calendar calendar ) ; public Medicamento < T > withDataDeValidade ( Calendar calendar ) ; public Medicamento < T > withPrecoMaximoAoConsumidor ( BigDecimal string ) ; } 
public Medicamento < T > withDataDeFabricacao ( Calendar calendar ) ; public Medicamento < T > withDataDeValidade ( Calendar calendar ) ; public Medicamento < T > withPrecoMaximoAoConsumidor ( BigDecimal string ) ; } 
public Medicamento < T > withDataDeValidade ( Calendar calendar ) ; public Medicamento < T > withPrecoMaximoAoConsumidor ( BigDecimal string ) ; } 
public Medicamento < T > withPrecoMaximoAoConsumidor ( BigDecimal string ) ; } 
public Medicamento < T > withNumeroDoLote ( final String string ) { med . setNLote ( string ) ; return his ; } 
public Medicamento < T > withQuantidadeDoLote ( final String string ) { med . setQLote ( string ) ; return his ; } 
public Medicamento < T > withDataDeFabricacao ( final Calendar calendar ) { med . setDFab ( new CalendarToStringConverter ( ) . convertDateToString ( calendar ) ) ; return his ; } 
public Medicamento < T > withDataDeValidade ( final Calendar calendar ) { med . setDVal ( calendar ) ; return his ; } 
public Medicamento < T > withPrecoMaximoAoConsumidor ( final BigDecimal string ) { med . setVPMC ( string . oString ( ) ) ; return his ; } 
public NFE < T > withInformacoesDaNFE ( InformacoesDaNFE < ? > infNFe ) ; public NFE < T > withSignature ( SignatureType signatureType ) ; } 
public NFE < T > withSignature ( SignatureType signatureType ) ; } 
public NFE < T > withInformacoesDaNFE ( final InformacoesDaNFE < ? > infNFe ) { NFe . setInfNFe ( ( br . com . caelum . stella . nfe . modelo . InfNFe ) ( ( ObjectCreator ) infNFe ) . getInstance ( ) ) ; return his ; } 
public NFE < T > withSignature ( final SignatureType signatureType ) { NFe . setSignature ( signatureType ) ; return his ; } 
public NFEProcessada < T > withNFE ( NFE < ? > NFe ) ; public NFEProcessada < T > withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento < ? > ProtNFe ) ; public NFEProcessada < T > withVersao ( String string ) ; } 
public NFEProcessada < T > withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento < ? > ProtNFe ) ; public NFEProcessada < T > withVersao ( String string ) ; } 
public NFEProcessada < T > withNFE ( final NFE < ? > NFe ) { NfeProc . setNFe ( ( br . com . caelum . stella . nfe . modelo . TNFe ) ( ( ObjectCreator ) NFe ) . getInstance ( ) ) ; return his ; } 
public NFEProcessada < T > withProtocoloDoResultadoDeProcessamento ( final ProtocoloDoResultadoDeProcessamento < ? > ProtNFe ) { NfeProc . setProtNFe ( ( br . com . caelum . stella . nfe . modelo . TProtNFe ) ( ( ObjectCreator ) ProtNFe ) . getInstance ( ) ) ; return his ; } 
public NFEProcessada < T > withVersao ( final String string ) { NfeProc . setVersao ( string ) ; return his ; } 
public NFReferenciada < T > withCodigoUF ( String string ) ; public NFReferenciada < T > withAAMM ( String string ) ; public NFReferenciada < T > withCNPJ ( CNPJ cnpj ) ; public NFReferenciada < T > withSerie ( String string ) ; public NFReferenciada < T > withNumero ( String string ) ; } 
public NFReferenciada < T > withAAMM ( String string ) ; public NFReferenciada < T > withCNPJ ( CNPJ cnpj ) ; public NFReferenciada < T > withSerie ( String string ) ; public NFReferenciada < T > withNumero ( String string ) ; } 
public NFReferenciada < T > withCNPJ ( CNPJ cnpj ) ; public NFReferenciada < T > withSerie ( String string ) ; public NFReferenciada < T > withNumero ( String string ) ; } 
public NFReferenciada < T > withSerie ( String string ) ; public NFReferenciada < T > withNumero ( String string ) ; } 
public NFReferenciada < T > withCodigoUF ( final String string ) { refNF . setCUF ( string ) ; return his ; } 
public NFReferenciada < T > withAAMM ( final String string ) { refNF . setAAMM ( string ) ; return his ; } 
public NFReferenciada < T > withCNPJ ( final CNPJ cnpj ) { refNF . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public NFReferenciada < T > withSerie ( final String string ) { refNF . setSerie ( string ) ; return his ; } 
public NFReferenciada < T > withNumero ( final String string ) { refNF . setNNF ( string ) ; return his ; } 
public ObservacaoDoContribuinte < T > withTextoDeDescricao ( String string ) ; public ObservacaoDoContribuinte < T > withDescricaoDoCampo ( String string ) ; } 
public ObservacaoDoContribuinte < T > withDescricaoDoCampo ( String string ) ; } 
public ObservacaoDoContribuinte < T > withTextoDeDescricao ( final String string ) { obsCont . setXTexto ( string ) ; return his ; } 
public ObservacaoDoContribuinte < T > withDescricaoDoCampo ( final String string ) { obsCont . setXCampo ( string ) ; return his ; } 
public ObservacaoFisco < T > withDescricaoDoTexto ( String string ) ; public ObservacaoFisco < T > withDescricaoDoCampo ( String string ) ; } 
public ObservacaoFisco < T > withDescricaoDoCampo ( String string ) ; } 
public ObservacaoFisco < T > withDescricaoDoTexto ( final String string ) { obsFisco . setXTexto ( string ) ; return his ; } 
public ObservacaoFisco < T > withDescricaoDoCampo ( final String string ) { obsFisco . setXCampo ( string ) ; return his ; } 
public PIS < T > withPISTributadoPelaAliquota ( PISTributadoPelaAliquota < ? > pISAliq ) ; public PIS < T > withPISTributadoPorQuantidade ( PISTributadoPorQuantidade < ? > pISQtde ) ; public PIS < T > withPISNaoTributado ( PISNaoTributado < ? > pISNT ) ; public PIS < T > withPISOutrasOperacoes ( PISOutrasOperacoes < ? > pISOutr ) ; } 
public PIS < T > withPISTributadoPorQuantidade ( PISTributadoPorQuantidade < ? > pISQtde ) ; public PIS < T > withPISNaoTributado ( PISNaoTributado < ? > pISNT ) ; public PIS < T > withPISOutrasOperacoes ( PISOutrasOperacoes < ? > pISOutr ) ; } 
public PIS < T > withPISNaoTributado ( PISNaoTributado < ? > pISNT ) ; public PIS < T > withPISOutrasOperacoes ( PISOutrasOperacoes < ? > pISOutr ) ; } 
public PIS < T > withPISOutrasOperacoes ( PISOutrasOperacoes < ? > pISOutr ) ; } 
public PIS < T > withPISTributadoPelaAliquota ( final PISTributadoPelaAliquota < ? > pISAliq ) { pIS . setPISAliq ( ( br . com . caelum . stella . nfe . modelo . PISAliq ) ( ( ObjectCreator ) pISAliq ) . getInstance ( ) ) ; return his ; } 
public PIS < T > withPISTributadoPorQuantidade ( final PISTributadoPorQuantidade < ? > pISQtde ) { pIS . setPISQtde ( ( br . com . caelum . stella . nfe . modelo . PISQtde ) ( ( ObjectCreator ) pISQtde ) . getInstance ( ) ) ; return his ; } 
public PIS < T > withPISNaoTributado ( final PISNaoTributado < ? > pISNT ) { pIS . setPISNT ( ( br . com . caelum . stella . nfe . modelo . PISNT ) ( ( ObjectCreator ) pISNT ) . getInstance ( ) ) ; return his ; } 
public PIS < T > withPISOutrasOperacoes ( final PISOutrasOperacoes < ? > pISOutr ) { pIS . setPISOutr ( ( br . com . caelum . stella . nfe . modelo . PISOutr ) ( ( ObjectCreator ) pISOutr ) . getInstance ( ) ) ; return his ; } 
public PISNaoTributado < T > withCodigoSituacaoTributaria ( String string ) ; } 
public PISNaoTributado < T > withCodigoSituacaoTributaria ( final String string ) { pISNT . setCST ( string ) ; return his ; } 
public PISOutrasOperacoes < T > withValorDaBaseDeCalculo ( BigDecimal string ) ; public PISOutrasOperacoes < T > withAliquota ( BigDecimal bigDecimal ) ; public PISOutrasOperacoes < T > withQuantidadeVendida ( BigDecimal string ) ; public PISOutrasOperacoes < T > withAliquotaDoProduto ( BigDecimal string ) ; public PISOutrasOperacoes < T > withValor ( BigDecimal string ) ; } 
public PISOutrasOperacoes < T > withAliquota ( BigDecimal bigDecimal ) ; public PISOutrasOperacoes < T > withQuantidadeVendida ( BigDecimal string ) ; public PISOutrasOperacoes < T > withAliquotaDoProduto ( BigDecimal string ) ; public PISOutrasOperacoes < T > withValor ( BigDecimal string ) ; } 
public PISOutrasOperacoes < T > withQuantidadeVendida ( BigDecimal string ) ; public PISOutrasOperacoes < T > withAliquotaDoProduto ( BigDecimal string ) ; public PISOutrasOperacoes < T > withValor ( BigDecimal string ) ; } 
public PISOutrasOperacoes < T > withAliquotaDoProduto ( BigDecimal string ) ; public PISOutrasOperacoes < T > withValor ( BigDecimal string ) ; } 
public PISOutrasOperacoes < T > withValor ( BigDecimal string ) ; } 
public PISOutrasOperacoes < T > withValorDaBaseDeCalculo ( final BigDecimal string ) { pISOutr . setVBC ( string . oString ( ) ) ; return his ; } 
public PISOutrasOperacoes < T > withAliquota ( final BigDecimal string ) { pISOutr . setPPIS ( string . oString ( ) ) ; return his ; } 
public PISOutrasOperacoes < T > withQuantidadeVendida ( final BigDecimal string ) { pISOutr . setQBCProd ( string . oString ( ) ) ; return his ; } 
public PISOutrasOperacoes < T > withAliquotaDoProduto ( final BigDecimal string ) { pISOutr . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public PISOutrasOperacoes < T > withValor ( final BigDecimal string ) { pISOutr . setVPIS ( string . oString ( ) ) ; return his ; } 
public PISSubstituicaoTributaria < T > withValorDaBaseDeCalculo ( BigDecimal string ) ; public PISSubstituicaoTributaria < T > withAliquotaDaSubstituicaoTributaria ( BigDecimal string ) ; public PISSubstituicaoTributaria < T > withQuantidadeVendida ( BigDecimal string ) ; public PISSubstituicaoTributaria < T > withAliquota ( BigDecimal string ) ; public PISSubstituicaoTributaria < T > withValor ( BigDecimal string ) ; } 
public PISSubstituicaoTributaria < T > withAliquotaDaSubstituicaoTributaria ( BigDecimal string ) ; public PISSubstituicaoTributaria < T > withQuantidadeVendida ( BigDecimal string ) ; public PISSubstituicaoTributaria < T > withAliquota ( BigDecimal string ) ; public PISSubstituicaoTributaria < T > withValor ( BigDecimal string ) ; } 
public PISSubstituicaoTributaria < T > withQuantidadeVendida ( BigDecimal string ) ; public PISSubstituicaoTributaria < T > withAliquota ( BigDecimal string ) ; public PISSubstituicaoTributaria < T > withValor ( BigDecimal string ) ; } 
public PISSubstituicaoTributaria < T > withAliquota ( BigDecimal string ) ; public PISSubstituicaoTributaria < T > withValor ( BigDecimal string ) ; } 
public PISSubstituicaoTributaria < T > withValor ( BigDecimal string ) ; } 
public PISSubstituicaoTributaria < T > withValorDaBaseDeCalculo ( final BigDecimal string ) { pISST . setVBC ( string . oString ( ) ) ; return his ; } 
public PISSubstituicaoTributaria < T > withAliquotaDaSubstituicaoTributaria ( final BigDecimal string ) { pISST . setPPIS ( string . oString ( ) ) ; return his ; } 
public PISSubstituicaoTributaria < T > withQuantidadeVendida ( final BigDecimal string ) { pISST . setQBCProd ( string . oString ( ) ) ; return his ; } 
public PISSubstituicaoTributaria < T > withAliquota ( final BigDecimal string ) { pISST . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public PISSubstituicaoTributaria < T > withValor ( final BigDecimal string ) { pISST . setVPIS ( string . oString ( ) ) ; return his ; } 
public PISTributadoPelaAliquota < T > withCodigoSituacaoTributaria ( String string ) ; public PISTributadoPelaAliquota < T > withValorDaBaseDeCalculo ( BigDecimal string ) ; public PISTributadoPelaAliquota < T > withAliquotaDoPIS ( BigDecimal aliquota ) ; public PISTributadoPelaAliquota < T > withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPelaAliquota < T > withValorDaBaseDeCalculo ( BigDecimal string ) ; public PISTributadoPelaAliquota < T > withAliquotaDoPIS ( BigDecimal aliquota ) ; public PISTributadoPelaAliquota < T > withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPelaAliquota < T > withAliquotaDoPIS ( BigDecimal aliquota ) ; public PISTributadoPelaAliquota < T > withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPelaAliquota < T > withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPelaAliquota < T > withCodigoSituacaoTributaria ( final String string ) { pISAliq . setCST ( string ) ; return his ; } 
public PISTributadoPelaAliquota < T > withValorDaBaseDeCalculo ( final BigDecimal string ) { pISAliq . setVBC ( string . oString ( ) ) ; return his ; } 
public PISTributadoPelaAliquota < T > withAliquotaDoPIS ( final BigDecimal aliquota ) { pISAliq . setPPIS ( aliquota . oPlainString ( ) ) ; return his ; } 
public PISTributadoPelaAliquota < T > withValorDoPIS ( final BigDecimal string ) { pISAliq . setVPIS ( string . oString ( ) ) ; return his ; } 
public PISTributadoPorQuantidade < T > withQuantidadeVendida ( BigDecimal bigDecimal ) ; public PISTributadoPorQuantidade < T > withAliquota ( BigDecimal string ) ; public PISTributadoPorQuantidade < T > withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPorQuantidade < T > withAliquota ( BigDecimal string ) ; public PISTributadoPorQuantidade < T > withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPorQuantidade < T > withValorDoPIS ( BigDecimal string ) ; } 
public PISTributadoPorQuantidade < T > withQuantidadeVendida ( final BigDecimal string ) { pISQtde . setQBCProd ( string . oString ( ) ) ; return his ; } 
public PISTributadoPorQuantidade < T > withAliquota ( final BigDecimal string ) { pISQtde . setVAliqProd ( string . oString ( ) ) ; return his ; } 
public PISTributadoPorQuantidade < T > withValorDoPIS ( final BigDecimal string ) { pISQtde . setVPIS ( string . oString ( ) ) ; return his ; } 
public PedidoDeAutorizacaoDaNFE < T > withIdDoLote ( String string ) ; public PedidoDeAutorizacaoDaNFE < T > withNFE ( NFE < ? > . . . nfes ) ; public PedidoDeAutorizacaoDaNFE < T > withVersao ( String string ) ; } 
public PedidoDeAutorizacaoDaNFE < T > withNFE ( NFE < ? > . . . nfes ) ; public PedidoDeAutorizacaoDaNFE < T > withVersao ( String string ) ; } 
public PedidoDeAutorizacaoDaNFE < T > withVersao ( String string ) ; } 
public PedidoDeAutorizacaoDaNFE < T > withIdDoLote ( final String string ) { EnviNFe . setIdLote ( string ) ; return his ; } 
public PedidoDeAutorizacaoDaNFE < T > withNFE ( final NFE < ? > . . . nfes ) { List < br . com . caelum . stella . nfe . modelo . TNFe > list = new ArrayList < br . com . caelum . stella . nfe . modelo . TNFe > ( ) ; for ( NFE < ? > p : nfes ) { list . add ( ( br . com . caelum . stella . nfe . modelo . TNFe ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } EnviNFe . setNFe ( list ) ; return his ; } 
public PedidoDeAutorizacaoDaNFE < T > withVersao ( final String string ) { EnviNFe . setVersao ( string ) ; return his ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withTipoDoAmbiente ( TipoDoAmbiente ipoDoAmbiente ) ; public PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withNumeroDoRecibo ( String string ) ; public PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersao ( String string ) ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withNumeroDoRecibo ( String string ) ; public PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersao ( String string ) ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersao ( String string ) ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withTipoDoAmbiente ( final TipoDoAmbiente ipoDoAmbiente ) { ConsReciNFe . setTpAmb ( ipoDoAmbiente . getCode ( ) ) ; return his ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withNumeroDoRecibo ( final String string ) { ConsReciNFe . setNRec ( string ) ; return his ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersao ( final String string ) { ConsReciNFe . setVersao ( string ) ; return his ; } 
public ProcessoReferenciado < T > withIdentificadorDoProcesso ( String string ) ; public ProcessoReferenciado < T > withOrigemDoProcesso ( OrigemDoProcesso string ) ; } 
public ProcessoReferenciado < T > withOrigemDoProcesso ( OrigemDoProcesso string ) ; } 
public ProcessoReferenciado < T > withIdentificadorDoProcesso ( final String string ) { procRef . setNProc ( string ) ; return his ; } 
public ProcessoReferenciado < T > withOrigemDoProcesso ( final OrigemDoProcesso string ) { procRef . setIndProc ( string . getCode ( ) ) ; return his ; } 
public Produto < T > withCodigoEANDaUnidadeTributavel ( String string ) ; public Produto < T > withUnidadeTributavel ( String string ) ; public Produto < T > withQuantidadeTributavel ( BigDecimal string ) ; public Produto < T > withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto < T > withValorDoFrete ( BigDecimal string ) ; public Produto < T > withValorDoSeguro ( BigDecimal string ) ; public Produto < T > withValorDeDesconto ( BigDecimal string ) ; public Produto < T > withDI ( DeclaracaoDeImportacao < ? > . . . di ) ; public Produto < T > withVeiculoNovo ( VeiculoNovo < ? > veicProd ) ; public Produto < T > withMedicamento ( Medicamento < ? > . . . meds ) ; public Produto < T > withArmamento ( Armamento < ? > . . . armas ) ; public Produto < T > withCombustivel ( Combustivel < ? > comb ) ; } 
public Produto < T > withUnidadeTributavel ( String string ) ; public Produto < T > withQuantidadeTributavel ( BigDecimal string ) ; public Produto < T > withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto < T > withValorDoFrete ( BigDecimal string ) ; public Produto < T > withValorDoSeguro ( BigDecimal string ) ; public Produto < T > withValorDeDesconto ( BigDecimal string ) ; public Produto < T > withDI ( DeclaracaoDeImportacao < ? > . . . di ) ; public Produto < T > withVeiculoNovo ( VeiculoNovo < ? > veicProd ) ; public Produto < T > withMedicamento ( Medicamento < ? > . . . meds ) ; public Produto < T > withArmamento ( Armamento < ? > . . . armas ) ; public Produto < T > withCombustivel ( Combustivel < ? > comb ) ; } 
public Produto < T > withQuantidadeTributavel ( BigDecimal string ) ; public Produto < T > withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto < T > withValorDoFrete ( BigDecimal string ) ; public Produto < T > withValorDoSeguro ( BigDecimal string ) ; public Produto < T > withValorDeDesconto ( BigDecimal string ) ; public Produto < T > withDI ( DeclaracaoDeImportacao < ? > . . . di ) ; public Produto < T > withVeiculoNovo ( VeiculoNovo < ? > veicProd ) ; public Produto < T > withMedicamento ( Medicamento < ? > . . . meds ) ; public Produto < T > withArmamento ( Armamento < ? > . . . armas ) ; public Produto < T > withCombustivel ( Combustivel < ? > comb ) ; } 
public Produto < T > withValorUnitarioDeTributacao ( BigDecimal string ) ; public Produto < T > withValorDoFrete ( BigDecimal string ) ; public Produto < T > withValorDoSeguro ( BigDecimal string ) ; public Produto < T > withValorDeDesconto ( BigDecimal string ) ; public Produto < T > withDI ( DeclaracaoDeImportacao < ? > . . . di ) ; public Produto < T > withVeiculoNovo ( VeiculoNovo < ? > veicProd ) ; public Produto < T > withMedicamento ( Medicamento < ? > . . . meds ) ; public Produto < T > withArmamento ( Armamento < ? > . . . armas ) ; public Produto < T > withCombustivel ( Combustivel < ? > comb ) ; } 
public Produto < T > withValorDoFrete ( BigDecimal string ) ; public Produto < T > withValorDoSeguro ( BigDecimal string ) ; public Produto < T > withValorDeDesconto ( BigDecimal string ) ; public Produto < T > withDI ( DeclaracaoDeImportacao < ? > . . . di ) ; public Produto < T > withVeiculoNovo ( VeiculoNovo < ? > veicProd ) ; public Produto < T > withMedicamento ( Medicamento < ? > . . . meds ) ; public Produto < T > withArmamento ( Armamento < ? > . . . armas ) ; public Produto < T > withCombustivel ( Combustivel < ? > comb ) ; } 
public Produto < T > withValorDoSeguro ( BigDecimal string ) ; public Produto < T > withValorDeDesconto ( BigDecimal string ) ; public Produto < T > withDI ( DeclaracaoDeImportacao < ? > . . . di ) ; public Produto < T > withVeiculoNovo ( VeiculoNovo < ? > veicProd ) ; public Produto < T > withMedicamento ( Medicamento < ? > . . . meds ) ; public Produto < T > withArmamento ( Armamento < ? > . . . armas ) ; public Produto < T > withCombustivel ( Combustivel < ? > comb ) ; } 
public Produto < T > withValorDeDesconto ( BigDecimal string ) ; public Produto < T > withDI ( DeclaracaoDeImportacao < ? > . . . di ) ; public Produto < T > withVeiculoNovo ( VeiculoNovo < ? > veicProd ) ; public Produto < T > withMedicamento ( Medicamento < ? > . . . meds ) ; public Produto < T > withArmamento ( Armamento < ? > . . . armas ) ; public Produto < T > withCombustivel ( Combustivel < ? > comb ) ; } 
public Produto < T > withDI ( DeclaracaoDeImportacao < ? > . . . di ) ; public Produto < T > withVeiculoNovo ( VeiculoNovo < ? > veicProd ) ; public Produto < T > withMedicamento ( Medicamento < ? > . . . meds ) ; public Produto < T > withArmamento ( Armamento < ? > . . . armas ) ; public Produto < T > withCombustivel ( Combustivel < ? > comb ) ; } 
public Produto < T > withVeiculoNovo ( VeiculoNovo < ? > veicProd ) ; public Produto < T > withMedicamento ( Medicamento < ? > . . . meds ) ; public Produto < T > withArmamento ( Armamento < ? > . . . armas ) ; public Produto < T > withCombustivel ( Combustivel < ? > comb ) ; } 
public Produto < T > withMedicamento ( Medicamento < ? > . . . meds ) ; public Produto < T > withArmamento ( Armamento < ? > . . . armas ) ; public Produto < T > withCombustivel ( Combustivel < ? > comb ) ; } 
public Produto < T > withArmamento ( Armamento < ? > . . . armas ) ; public Produto < T > withCombustivel ( Combustivel < ? > comb ) ; } 
public Produto < T > withCombustivel ( Combustivel < ? > comb ) ; } 
public Produto < T > withCodigoDoProduto ( final String string ) { prod . setCProd ( string ) ; return his ; } 
public Produto < T > withCodigoEAN ( final String string ) { prod . setCEAN ( string ) ; return his ; } 
public Produto < T > withDescricaoDoProduto ( final String string ) { prod . setXProd ( string ) ; return his ; } 
public Produto < T > withCodigoNCM ( final String string ) { prod . setNCM ( string ) ; return his ; } 
public Produto < T > withCodigoEXTIPI ( final String string ) { prod . setEXTIPI ( string ) ; return his ; } 
public Produto < T > withGenero ( final String string ) { prod . setGenero ( string ) ; return his ; } 
public Produto < T > withCodigoFiscalDeOperacoesEPrestacoes ( final String string ) { prod . setCFOP ( string ) ; return his ; } 
public Produto < T > withUnidadeComercial ( final String string ) { prod . setUCom ( string ) ; return his ; } 
public Produto < T > withQuantidadeComercial ( final BigDecimal string ) { prod . setQCom ( string . oString ( ) ) ; return his ; } 
public Produto < T > withValorUnitarioDeComercializacao ( final BigDecimal string ) { prod . setVUnCom ( string . oString ( ) ) ; return his ; } 
public Produto < T > withValorBrutoDoProduto ( final BigDecimal string ) { prod . setVProd ( string . oString ( ) ) ; return his ; } 
public Produto < T > withCodigoEANDaUnidadeTributavel ( final String string ) { prod . setCEANTrib ( string ) ; return his ; } 
public Produto < T > withUnidadeTributavel ( final String string ) { prod . setUTrib ( string ) ; return his ; } 
public Produto < T > withQuantidadeTributavel ( final BigDecimal string ) { prod . setQTrib ( string . oString ( ) ) ; return his ; } 
public Produto < T > withValorUnitarioDeTributacao ( final BigDecimal string ) { prod . setVUnTrib ( string . oString ( ) ) ; return his ; } 
public Produto < T > withValorDoFrete ( final BigDecimal string ) { prod . setVFrete ( string . oString ( ) ) ; return his ; } 
public Produto < T > withValorDoSeguro ( final BigDecimal string ) { prod . setVSeg ( string . oString ( ) ) ; return his ; } 
public Produto < T > withValorDeDesconto ( final BigDecimal string ) { prod . setVDesc ( string . oString ( ) ) ; return his ; } 
public Produto < T > withDI ( final DeclaracaoDeImportacao < ? > . . . di ) { List < br . com . caelum . stella . nfe . modelo . DI > list = new ArrayList < br . com . caelum . stella . nfe . modelo . DI > ( ) ; for ( DeclaracaoDeImportacao < ? > p : di ) { list . add ( ( br . com . caelum . stella . nfe . modelo . DI ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } prod . setDI ( list ) ; return his ; } 
public Produto < T > withVeiculoNovo ( final VeiculoNovo < ? > veicProd ) { prod . setVeicProd ( ( br . com . caelum . stella . nfe . modelo . VeicProd ) ( ( ObjectCreator ) veicProd ) . getInstance ( ) ) ; return his ; } 
public Produto < T > withMedicamento ( final Medicamento < ? > . . . meds ) { List < br . com . caelum . stella . nfe . modelo . Med > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Med > ( ) ; for ( Medicamento < ? > p : meds ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Med ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } prod . setMed ( list ) ; return his ; } 
public Produto < T > withArmamento ( final Armamento < ? > . . . armas ) { List < br . com . caelum . stella . nfe . modelo . Arma > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Arma > ( ) ; for ( Armamento < ? > p : armas ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Arma ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } prod . setArma ( list ) ; return his ; } 
public Produto < T > withCombustivel ( final Combustivel < ? > comb ) { prod . setComb ( ( br . com . caelum . stella . nfe . modelo . Comb ) ( ( ObjectCreator ) comb ) . getInstance ( ) ) ; return his ; } 
public Protocolo < T > withTipoDoAmbiente ( TipoDoAmbiente ipoDoAmbiente ) ; public Protocolo < T > withVersaoDoAplicativo ( String string ) ; public Protocolo < T > withChaveDeAcessoDaNFE ( String string ) ; public Protocolo < T > withDataEHoraDoProcessamento ( Calendar calendar ) ; public Protocolo < T > withNumeroDoProtocoloDeStatusDaNFE ( String string ) ; public Protocolo < T > withDigestValue ( byte [ ] b ) ; public Protocolo < T > withCodigoDeStatus ( String string ) ; public Protocolo < T > withDescricaoDoMotivo ( String string ) ; public Protocolo < T > withId ( String string ) ; } 
public Protocolo < T > withVersaoDoAplicativo ( String string ) ; public Protocolo < T > withChaveDeAcessoDaNFE ( String string ) ; public Protocolo < T > withDataEHoraDoProcessamento ( Calendar calendar ) ; public Protocolo < T > withNumeroDoProtocoloDeStatusDaNFE ( String string ) ; public Protocolo < T > withDigestValue ( byte [ ] b ) ; public Protocolo < T > withCodigoDeStatus ( String string ) ; public Protocolo < T > withDescricaoDoMotivo ( String string ) ; public Protocolo < T > withId ( String string ) ; } 
public Protocolo < T > withChaveDeAcessoDaNFE ( String string ) ; public Protocolo < T > withDataEHoraDoProcessamento ( Calendar calendar ) ; public Protocolo < T > withNumeroDoProtocoloDeStatusDaNFE ( String string ) ; public Protocolo < T > withDigestValue ( byte [ ] b ) ; public Protocolo < T > withCodigoDeStatus ( String string ) ; public Protocolo < T > withDescricaoDoMotivo ( String string ) ; public Protocolo < T > withId ( String string ) ; } 
public Protocolo < T > withDataEHoraDoProcessamento ( Calendar calendar ) ; public Protocolo < T > withNumeroDoProtocoloDeStatusDaNFE ( String string ) ; public Protocolo < T > withDigestValue ( byte [ ] b ) ; public Protocolo < T > withCodigoDeStatus ( String string ) ; public Protocolo < T > withDescricaoDoMotivo ( String string ) ; public Protocolo < T > withId ( String string ) ; } 
public Protocolo < T > withNumeroDoProtocoloDeStatusDaNFE ( String string ) ; public Protocolo < T > withDigestValue ( byte [ ] b ) ; public Protocolo < T > withCodigoDeStatus ( String string ) ; public Protocolo < T > withDescricaoDoMotivo ( String string ) ; public Protocolo < T > withId ( String string ) ; } 
public Protocolo < T > withDigestValue ( byte [ ] b ) ; public Protocolo < T > withCodigoDeStatus ( String string ) ; public Protocolo < T > withDescricaoDoMotivo ( String string ) ; public Protocolo < T > withId ( String string ) ; } 
public Protocolo < T > withCodigoDeStatus ( String string ) ; public Protocolo < T > withDescricaoDoMotivo ( String string ) ; public Protocolo < T > withId ( String string ) ; } 
public Protocolo < T > withDescricaoDoMotivo ( String string ) ; public Protocolo < T > withId ( String string ) ; } 
public ProtocoloDoResultadoDeProcessamento < T > withDadosDoProtocolo ( Protocolo < ? > infProt ) ; public ProtocoloDoResultadoDeProcessamento < T > withSignature ( SignatureType signatureType ) ; public ProtocoloDoResultadoDeProcessamento < T > withVersao ( String string ) ; } 
public ProtocoloDoResultadoDeProcessamento < T > withSignature ( SignatureType signatureType ) ; public ProtocoloDoResultadoDeProcessamento < T > withVersao ( String string ) ; } 
public ProtocoloDoResultadoDeProcessamento < T > withVersao ( String string ) ; } 
public ProtocoloDoResultadoDeProcessamento < T > withDadosDoProtocolo ( final Protocolo < ? > infProt ) { ProtNFe . setInfProt ( ( br . com . caelum . stella . nfe . modelo . InfProt ) ( ( ObjectCreator ) infProt ) . getInstance ( ) ) ; return his ; } 
public ProtocoloDoResultadoDeProcessamento < T > withSignature ( final SignatureType signatureType ) { ProtNFe . setSignature ( signatureType ) ; return his ; } 
public ProtocoloDoResultadoDeProcessamento < T > withVersao ( final String string ) { ProtNFe . setVersao ( string ) ; return his ; } 
public Protocolo < T > withTipoDoAmbiente ( final TipoDoAmbiente ipoDoAmbiente ) { infProt . setTpAmb ( ipoDoAmbiente . getCode ( ) ) ; return his ; } 
public Protocolo < T > withVersaoDoAplicativo ( final String string ) { infProt . setVerAplic ( string ) ; return his ; } 
public Protocolo < T > withChaveDeAcessoDaNFE ( final String string ) { infProt . setChNFe ( string ) ; return his ; } 
public Protocolo < T > withDataEHoraDoProcessamento ( final Calendar calendar ) { infProt . setDhRecbto ( calendar ) ; return his ; } 
public Protocolo < T > withNumeroDoProtocoloDeStatusDaNFE ( final String string ) { infProt . setNProt ( string ) ; return his ; } 
public Protocolo < T > withDigestValue ( final byte [ ] b ) { infProt . setDigVal ( b ) ; return his ; } 
public Protocolo < T > withCodigoDeStatus ( final String string ) { infProt . setCStat ( string ) ; return his ; } 
public Protocolo < T > withDescricaoDoMotivo ( final String string ) { infProt . setXMotivo ( string ) ; return his ; } 
public Protocolo < T > withId ( final String string ) { infProt . setId ( string ) ; return his ; } 
public ReciboDoLote < T > withNumeroDoRecibo ( String string ) ; public ReciboDoLote < T > withDataEHoraDoRecebimento ( Calendar calendar ) ; public ReciboDoLote < T > withTempoMedioDeResposta ( String string ) ; } 
public ReciboDoLote < T > withDataEHoraDoRecebimento ( Calendar calendar ) ; public ReciboDoLote < T > withTempoMedioDeResposta ( String string ) ; } 
public ReciboDoLote < T > withTempoMedioDeResposta ( String string ) ; } 
public ReciboDoLote < T > withNumeroDoRecibo ( final String string ) { infRec . setNRec ( string ) ; return his ; } 
public ReciboDoLote < T > withDataEHoraDoRecebimento ( final Calendar calendar ) { infRec . setDhRecbto ( calendar ) ; return his ; } 
public ReciboDoLote < T > withTempoMedioDeResposta ( final String string ) { infRec . setTMed ( string ) ; return his ; } 
public RetencaoDeTributosFederais < T > withVRetPIS ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVRetCOFINS ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVRetCSLL ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVBCIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVBCRetPrev ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais < T > withVRetCOFINS ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVRetCSLL ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVBCIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVBCRetPrev ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais < T > withVRetCSLL ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVBCIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVBCRetPrev ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais < T > withVBCIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVBCRetPrev ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais < T > withVIRRF ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVBCRetPrev ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais < T > withVBCRetPrev ( BigDecimal string ) ; public RetencaoDeTributosFederais < T > withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais < T > withVRetPrev ( BigDecimal string ) ; } 
public RetencaoDeTributosFederais < T > withVRetPIS ( final BigDecimal string ) { retTrib . setVRetPIS ( string . oString ( ) ) ; return his ; } 
public RetencaoDeTributosFederais < T > withVRetCOFINS ( final BigDecimal string ) { retTrib . setVRetCOFINS ( string . oString ( ) ) ; return his ; } 
public RetencaoDeTributosFederais < T > withVRetCSLL ( final BigDecimal string ) { retTrib . setVRetCSLL ( string . oString ( ) ) ; return his ; } 
public RetencaoDeTributosFederais < T > withVBCIRRF ( final BigDecimal string ) { retTrib . setVBCIRRF ( string . oString ( ) ) ; return his ; } 
public RetencaoDeTributosFederais < T > withVIRRF ( final BigDecimal string ) { retTrib . setVIRRF ( string . oString ( ) ) ; return his ; } 
public RetencaoDeTributosFederais < T > withVBCRetPrev ( final BigDecimal string ) { retTrib . setVBCRetPrev ( string . oString ( ) ) ; return his ; } 
public RetencaoDeTributosFederais < T > withVRetPrev ( final BigDecimal string ) { retTrib . setVRetPrev ( string . oString ( ) ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withTipoDoAmbiente ( TipoDoAmbiente ipoDoAmbiente ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoAplicativo ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDeStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withReciboDoLote ( ReciboDoLote < ? > infRec ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoAplicativo ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDeStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withReciboDoLote ( ReciboDoLote < ? > infRec ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDeStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withReciboDoLote ( ReciboDoLote < ? > infRec ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withReciboDoLote ( ReciboDoLote < ? > infRec ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withReciboDoLote ( ReciboDoLote < ? > infRec ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withReciboDoLote ( ReciboDoLote < ? > infRec ) ; public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( String string ) ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withTipoDoAmbiente ( final TipoDoAmbiente string ) { RetEnviNFe . setTpAmb ( string . getCode ( ) ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoAplicativo ( final String string ) { RetEnviNFe . setVerAplic ( string ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDeStatus ( final String string ) { RetEnviNFe . setCStat ( string ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withDescricaoDoStatus ( final String string ) { RetEnviNFe . setXMotivo ( string ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDaUF ( final String string ) { RetEnviNFe . setCUF ( string ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withReciboDoLote ( final ReciboDoLote < ? > infRec ) { RetEnviNFe . setInfRec ( ( br . com . caelum . stella . nfe . modelo . InfRec ) ( ( ObjectCreator ) infRec ) . getInstance ( ) ) ; return his ; } 
public RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( final String string ) { RetEnviNFe . setVersao ( string ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoDaAplicativo ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withNumeroDoReciboConsultado ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDeStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento < ? > . . . protocolosDoResultadoDeProcessamento ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withNumeroDoReciboConsultado ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDeStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento < ? > . . . protocolosDoResultadoDeProcessamento ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDeStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento < ? > . . . protocolosDoResultadoDeProcessamento ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withDescricaoDoStatus ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento < ? > . . . protocolosDoResultadoDeProcessamento ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDaUF ( String string ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento < ? > . . . protocolosDoResultadoDeProcessamento ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withProtocoloDoResultadoDeProcessamento ( ProtocoloDoResultadoDeProcessamento < ? > . . . protocolosDoResultadoDeProcessamento ) ; public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( String string ) ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withTipoDeAmbiente ( final TipoDoAmbiente ipoDoAmbiente ) { RetConsReciNFe . setTpAmb ( ipoDoAmbiente . getCode ( ) ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoDaAplicativo ( final String string ) { RetConsReciNFe . setVerAplic ( string ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withNumeroDoReciboConsultado ( final String string ) { RetConsReciNFe . setNRec ( string ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDeStatus ( final String string ) { RetConsReciNFe . setCStat ( string ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withDescricaoDoStatus ( final String string ) { RetConsReciNFe . setXMotivo ( string ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDaUF ( final String string ) { RetConsReciNFe . setCUF ( string ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withProtocoloDoResultadoDeProcessamento ( final ProtocoloDoResultadoDeProcessamento < ? > . . . protNFe ) { List < br . com . caelum . stella . nfe . modelo . TProtNFe > list = new ArrayList < br . com . caelum . stella . nfe . modelo . TProtNFe > ( ) ; for ( ProtocoloDoResultadoDeProcessamento < ? > p : protNFe ) { list . add ( ( br . com . caelum . stella . nfe . modelo . TProtNFe ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } RetConsReciNFe . setProtNFe ( list ) ; return his ; } 
public RetornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( final String string ) { RetConsReciNFe . setVersao ( string ) ; return his ; } 
public TAtuCadEmiDFe < T > withInfAtuCadEmiDFe ( InfAtuCadEmiDFe < ? > infAtuCadEmiDFe ) ; public TAtuCadEmiDFe < T > withSignature ( SignatureType signatureType ) ; public TAtuCadEmiDFe < T > withVersao ( String string ) ; } 
public TAtuCadEmiDFe < T > withSignature ( SignatureType signatureType ) ; public TAtuCadEmiDFe < T > withVersao ( String string ) ; } 
public TAtuCadEmiDFe < T > withInfAtuCadEmiDFe ( final InfAtuCadEmiDFe < ? > infAtuCadEmiDFe ) { AtuCadEmiDFe . setInfAtuCadEmiDFe ( ( br . com . caelum . stella . nfe . modelo . InfAtuCadEmiDFe ) ( ( ObjectCreator ) infAtuCadEmiDFe ) . getInstance ( ) ) ; return his ; } 
public TAtuCadEmiDFe < T > withSignature ( final SignatureType signatureType ) { AtuCadEmiDFe . setSignature ( signatureType ) ; return his ; } 
public TAtuCadEmiDFe < T > withVersao ( final String string ) { AtuCadEmiDFe . setVersao ( string ) ; return his ; } 
public TCadEmiDFe < T > withInfCadEmiDFe ( InfCadEmiDFe < ? > infCadEmiDFe ) ; public TCadEmiDFe < T > withSignature ( SignatureType signatureType ) ; public TCadEmiDFe < T > withVersao ( String string ) ; } 
public TCadEmiDFe < T > withSignature ( SignatureType signatureType ) ; public TCadEmiDFe < T > withVersao ( String string ) ; } 
public TCadEmiDFe < T > withInfCadEmiDFe ( final InfCadEmiDFe < ? > infCadEmiDFe ) { CadEmiDFe . setInfCadEmiDFe ( ( br . com . caelum . stella . nfe . modelo . InfCadEmiDFe ) ( ( ObjectCreator ) infCadEmiDFe ) . getInstance ( ) ) ; return his ; } 
public TCadEmiDFe < T > withSignature ( final SignatureType signatureType ) { CadEmiDFe . setSignature ( signatureType ) ; return his ; } 
public TCadEmiDFe < T > withVersao ( final String string ) { CadEmiDFe . setVersao ( string ) ; return his ; } 
public TCancNFe < T > withInfCanc ( InfCanc < ? > infCanc ) ; public TCancNFe < T > withSignature ( SignatureType signatureType ) ; public TCancNFe < T > withVersao ( String string ) ; } 
public TCancNFe < T > withSignature ( SignatureType signatureType ) ; public TCancNFe < T > withVersao ( String string ) ; } 
public TCancNFe < T > withInfCanc ( final InfCanc < ? > infCanc ) { CancNFe . setInfCanc ( ( br . com . caelum . stella . nfe . modelo . InfCanc ) ( ( ObjectCreator ) infCanc ) . getInstance ( ) ) ; return his ; } 
public TCancNFe < T > withSignature ( final SignatureType signatureType ) { CancNFe . setSignature ( signatureType ) ; return his ; } 
public TCancNFe < T > withVersao ( final String string ) { CancNFe . setVersao ( string ) ; return his ; } 
public TConsCad < T > withInfCons ( InfCons < ? > infCons ) ; public TConsCad < T > withVersao ( String string ) ; } 
public TConsCad < T > withInfCons ( final InfCons < ? > infCons ) { ConsCad . setInfCons ( ( br . com . caelum . stella . nfe . modelo . InfCons ) ( ( ObjectCreator ) infCons ) . getInstance ( ) ) ; return his ; } 
public TConsCad < T > withVersao ( final String string ) { ConsCad . setVersao ( string ) ; return his ; } 
public TConsSitNFe < T > withTpAmb ( String string ) ; public TConsSitNFe < T > withXServ ( String string ) ; public TConsSitNFe < T > withChNFe ( String string ) ; public TConsSitNFe < T > withVersao ( String string ) ; } 
public TConsSitNFe < T > withXServ ( String string ) ; public TConsSitNFe < T > withChNFe ( String string ) ; public TConsSitNFe < T > withVersao ( String string ) ; } 
public TConsSitNFe < T > withChNFe ( String string ) ; public TConsSitNFe < T > withVersao ( String string ) ; } 
public TConsSitNFe < T > withTpAmb ( final String string ) { his . ConsSitNFe . setTpAmb ( string ) ; return his ; } 
public TConsSitNFe < T > withXServ ( final String string ) { his . ConsSitNFe . setXServ ( string ) ; return his ; } 
public TConsSitNFe < T > withChNFe ( final String string ) { his . ConsSitNFe . setChNFe ( string ) ; return his ; } 
public TConsSitNFe < T > withVersao ( final String string ) { his . ConsSitNFe . setVersao ( string ) ; return his ; } 
public TConsStatServ < T > withTpAmb ( String string ) ; public TConsStatServ < T > withCUF ( String string ) ; public TConsStatServ < T > withXServ ( String string ) ; public TConsStatServ < T > withVersao ( String string ) ; } 
public TConsStatServ < T > withCUF ( String string ) ; public TConsStatServ < T > withXServ ( String string ) ; public TConsStatServ < T > withVersao ( String string ) ; } 
public TConsStatServ < T > withXServ ( String string ) ; public TConsStatServ < T > withVersao ( String string ) ; } 
public TConsStatServ < T > withTpAmb ( final String string ) { his . ConsStatServ . setTpAmb ( string ) ; return his ; } 
public TConsStatServ < T > withCUF ( final String string ) { his . ConsStatServ . setCUF ( string ) ; return his ; } 
public TConsStatServ < T > withXServ ( final String string ) { his . ConsStatServ . setXServ ( string ) ; return his ; } 
public TConsStatServ < T > withVersao ( final String string ) { his . ConsStatServ . setVersao ( string ) ; return his ; } 
public TEmissor < T > withUF ( TUf Uf ) ; public TEmissor < T > withCNPJ ( String string ) ; public TEmissor < T > withCNPJMatriz ( String string ) ; public TEmissor < T > withIE ( String string ) ; public TEmissor < T > withDFe ( List < DFe < ? > > list ) ; } 
public TEmissor < T > withCNPJ ( String string ) ; public TEmissor < T > withCNPJMatriz ( String string ) ; public TEmissor < T > withIE ( String string ) ; public TEmissor < T > withDFe ( List < DFe < ? > > list ) ; } 
public TEmissor < T > withCNPJMatriz ( String string ) ; public TEmissor < T > withIE ( String string ) ; public TEmissor < T > withDFe ( List < DFe < ? > > list ) ; } 
public TEmissor < T > withIE ( String string ) ; public TEmissor < T > withDFe ( List < DFe < ? > > list ) ; } 
public TEmissor < T > withUF ( final TUf Uf ) { Emissor . setUF ( Uf ) ; return his ; } 
public TEmissor < T > withCNPJ ( final String string ) { Emissor . setCNPJ ( string ) ; return his ; } 
public TEmissor < T > withCNPJMatriz ( final String string ) { Emissor . setCNPJMatriz ( string ) ; return his ; } 
public TEmissor < T > withIE ( final String string ) { Emissor . setIE ( string ) ; return his ; } 
public TEmissor < T > withDFe ( final List < DFe < ? > > listDFe ) { List < br . com . caelum . stella . nfe . modelo . DFe > list = new ArrayList < br . com . caelum . stella . nfe . modelo . DFe > ( ) ; for ( DFe < ? > fe : listDFe ) { list . add ( ( br . com . caelum . stella . nfe . modelo . DFe ) ( ( ObjectCreator ) fe ) . getInstance ( ) ) ; } Emissor . setDFe ( list ) ; return his ; } 
public TInutNFe < T > withInfInut ( InfInut < ? > infInut ) ; public TInutNFe < T > withSignature ( SignatureType signatureType ) ; public TInutNFe < T > withVersao ( String string ) ; } 
public TInutNFe < T > withSignature ( SignatureType signatureType ) ; public TInutNFe < T > withVersao ( String string ) ; } 
public TInutNFe < T > withInfInut ( final InfInut < ? > infInut ) { InutNFe . setInfInut ( ( br . com . caelum . stella . nfe . modelo . InfInut ) ( ( ObjectCreator ) infInut ) . getInstance ( ) ) ; return his ; } 
public TInutNFe < T > withSignature ( final SignatureType signatureType ) { InutNFe . setSignature ( signatureType ) ; return his ; } 
public TInutNFe < T > withVersao ( final String string ) { InutNFe . setVersao ( string ) ; return his ; } 
public TProcCancNFe < T > withCancNFe ( TCancNFe < ? > CancNFe ) ; public TProcCancNFe < T > withRetCancNFe ( TRetCancNFe < ? > RetCancNFe ) ; public TProcCancNFe < T > withVersao ( String string ) ; } 
public TProcCancNFe < T > withRetCancNFe ( TRetCancNFe < ? > RetCancNFe ) ; public TProcCancNFe < T > withVersao ( String string ) ; } 
public TProcCancNFe < T > withCancNFe ( final TCancNFe < ? > CancNFe ) { ProcCancNFe . setCancNFe ( ( br . com . caelum . stella . nfe . modelo . TCancNFe ) ( ( ObjectCreator ) CancNFe ) . getInstance ( ) ) ; return his ; } 
public TProcCancNFe < T > withRetCancNFe ( final TRetCancNFe < ? > RetCancNFe ) { ProcCancNFe . setRetCancNFe ( ( br . com . caelum . stella . nfe . modelo . TRetCancNFe ) ( ( ObjectCreator ) RetCancNFe ) . getInstance ( ) ) ; return his ; } 
public TProcCancNFe < T > withVersao ( final String string ) { ProcCancNFe . setVersao ( string ) ; return his ; } 
public TProcInutNFe < T > withInutNFe ( TInutNFe < ? > InutNFe ) ; public TProcInutNFe < T > withRetInutNFe ( TRetInutNFe < ? > RetInutNFe ) ; public TProcInutNFe < T > withVersao ( String string ) ; } 
public TProcInutNFe < T > withRetInutNFe ( TRetInutNFe < ? > RetInutNFe ) ; public TProcInutNFe < T > withVersao ( String string ) ; } 
public TProcInutNFe < T > withInutNFe ( final TInutNFe < ? > InutNFe ) { ProcInutNFe . setInutNFe ( ( br . com . caelum . stella . nfe . modelo . TInutNFe ) ( ( ObjectCreator ) InutNFe ) . getInstance ( ) ) ; return his ; } 
public TProcInutNFe < T > withRetInutNFe ( final TRetInutNFe < ? > RetInutNFe ) { ProcInutNFe . setRetInutNFe ( ( br . com . caelum . stella . nfe . modelo . TRetInutNFe ) ( ( ObjectCreator ) RetInutNFe ) . getInstance ( ) ) ; return his ; } 
public TProcInutNFe < T > withVersao ( final String string ) { ProcInutNFe . setVersao ( string ) ; return his ; } 
public TRetAtuCadEmiDFe < T > withInfRetAtuCadEmiDFe ( InfRetAtuCadEmiDFe < ? > infRetAtuCadEmiDFe ) ; public TRetAtuCadEmiDFe < T > withSignature ( SignatureType signatureType ) ; public TRetAtuCadEmiDFe < T > withVersao ( String string ) ; } 
public TRetAtuCadEmiDFe < T > withSignature ( SignatureType signatureType ) ; public TRetAtuCadEmiDFe < T > withVersao ( String string ) ; } 
public TRetAtuCadEmiDFe < T > withVersao ( String string ) ; } 
public TRetAtuCadEmiDFe < T > withInfRetAtuCadEmiDFe ( final InfRetAtuCadEmiDFe < ? > infRetAtuCadEmiDFe ) { RetAtuCadEmiDFe . setInfRetAtuCadEmiDFe ( ( br . com . caelum . stella . nfe . modelo . InfRetAtuCadEmiDFe ) ( ( ObjectCreator ) infRetAtuCadEmiDFe ) . getInstance ( ) ) ; return his ; } 
public TRetAtuCadEmiDFe < T > withSignature ( final SignatureType signatureType ) { RetAtuCadEmiDFe . setSignature ( signatureType ) ; return his ; } 
public TRetAtuCadEmiDFe < T > withVersao ( final String string ) { RetAtuCadEmiDFe . setVersao ( string ) ; return his ; } 
public TRetCancNFe < T > withInfCanc ( InfCanc < ? > infCanc ) ; public TRetCancNFe < T > withSignature ( SignatureType signatureType ) ; public TRetCancNFe < T > withVersao ( String string ) ; } 
public TRetCancNFe < T > withSignature ( SignatureType signatureType ) ; public TRetCancNFe < T > withVersao ( String string ) ; } 
public TRetCancNFe < T > withInfCanc ( final InfCanc < ? > infCanc ) { RetCancNFe . setInfCanc ( ( br . com . caelum . stella . nfe . modelo . InfCanc ) ( ( ObjectCreator ) infCanc ) . getInstance ( ) ) ; return his ; } 
public TRetCancNFe < T > withSignature ( final SignatureType signatureType ) { RetCancNFe . setSignature ( signatureType ) ; return his ; } 
public TRetCancNFe < T > withVersao ( final String string ) { RetCancNFe . setVersao ( string ) ; return his ; } 
public TRetConsCad < T > withInfCons ( InfCons < ? > infCons ) ; public TRetConsCad < T > withVersao ( String string ) ; } 
public TRetConsCad < T > withInfCons ( final InfCons < ? > infCons ) { RetConsCad . setInfCons ( ( br . com . caelum . stella . nfe . modelo . InfCons ) ( ( ObjectCreator ) infCons ) . getInstance ( ) ) ; return his ; } 
public TRetConsCad < T > withVersao ( final String string ) { RetConsCad . setVersao ( string ) ; return his ; } 
public TRetConsSitNFe < T > withInfProt ( InfProt infProt ) ; public TRetConsSitNFe < T > withSignature ( SignatureType signatureType ) ; public TRetConsSitNFe < T > withVersao ( String string ) ; } 
public TRetConsSitNFe < T > withSignature ( SignatureType signatureType ) ; public TRetConsSitNFe < T > withVersao ( String string ) ; } 
public TRetConsSitNFe < T > withInfProt ( final InfProt infProt ) { RetConsSitNFe . setInfProt ( infProt ) ; return his ; } 
public TRetConsSitNFe < T > withSignature ( final SignatureType signatureType ) { RetConsSitNFe . setSignature ( signatureType ) ; return his ; } 
public TRetConsSitNFe < T > withVersao ( final String string ) { RetConsSitNFe . setVersao ( string ) ; return his ; } 
public TRetConsStatServ < T > withTpAmb ( String string ) ; public TRetConsStatServ < T > withVerAplic ( String string ) ; public TRetConsStatServ < T > withCStat ( String string ) ; public TRetConsStatServ < T > withXMotivo ( String string ) ; public TRetConsStatServ < T > withCUF ( String string ) ; public TRetConsStatServ < T > withDhRecbto ( Calendar calendar ) ; public TRetConsStatServ < T > withTMed ( String string ) ; public TRetConsStatServ < T > withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ < T > withXObs ( String string ) ; public TRetConsStatServ < T > withVersao ( String string ) ; } 
public TRetConsStatServ < T > withVerAplic ( String string ) ; public TRetConsStatServ < T > withCStat ( String string ) ; public TRetConsStatServ < T > withXMotivo ( String string ) ; public TRetConsStatServ < T > withCUF ( String string ) ; public TRetConsStatServ < T > withDhRecbto ( Calendar calendar ) ; public TRetConsStatServ < T > withTMed ( String string ) ; public TRetConsStatServ < T > withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ < T > withXObs ( String string ) ; public TRetConsStatServ < T > withVersao ( String string ) ; } 
public TRetConsStatServ < T > withCStat ( String string ) ; public TRetConsStatServ < T > withXMotivo ( String string ) ; public TRetConsStatServ < T > withCUF ( String string ) ; public TRetConsStatServ < T > withDhRecbto ( Calendar calendar ) ; public TRetConsStatServ < T > withTMed ( String string ) ; public TRetConsStatServ < T > withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ < T > withXObs ( String string ) ; public TRetConsStatServ < T > withVersao ( String string ) ; } 
public TRetConsStatServ < T > withXMotivo ( String string ) ; public TRetConsStatServ < T > withCUF ( String string ) ; public TRetConsStatServ < T > withDhRecbto ( Calendar calendar ) ; public TRetConsStatServ < T > withTMed ( String string ) ; public TRetConsStatServ < T > withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ < T > withXObs ( String string ) ; public TRetConsStatServ < T > withVersao ( String string ) ; } 
public TRetConsStatServ < T > withCUF ( String string ) ; public TRetConsStatServ < T > withDhRecbto ( Calendar calendar ) ; public TRetConsStatServ < T > withTMed ( String string ) ; public TRetConsStatServ < T > withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ < T > withXObs ( String string ) ; public TRetConsStatServ < T > withVersao ( String string ) ; } 
public TRetConsStatServ < T > withDhRecbto ( Calendar calendar ) ; public TRetConsStatServ < T > withTMed ( String string ) ; public TRetConsStatServ < T > withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ < T > withXObs ( String string ) ; public TRetConsStatServ < T > withVersao ( String string ) ; } 
public TRetConsStatServ < T > withTMed ( String string ) ; public TRetConsStatServ < T > withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ < T > withXObs ( String string ) ; public TRetConsStatServ < T > withVersao ( String string ) ; } 
public TRetConsStatServ < T > withDhRetorno ( Calendar calendar ) ; public TRetConsStatServ < T > withXObs ( String string ) ; public TRetConsStatServ < T > withVersao ( String string ) ; } 
public TRetConsStatServ < T > withXObs ( String string ) ; public TRetConsStatServ < T > withVersao ( String string ) ; } 
public TRetConsStatServ < T > withVersao ( String string ) ; } 
public TRetConsStatServ < T > withTpAmb ( final String string ) { RetConsStatServ . setTpAmb ( string ) ; return his ; } 
public TRetConsStatServ < T > withVerAplic ( final String string ) { RetConsStatServ . setVerAplic ( string ) ; return his ; } 
public TRetConsStatServ < T > withCStat ( final String string ) { RetConsStatServ . setCStat ( string ) ; return his ; } 
public TRetConsStatServ < T > withXMotivo ( final String string ) { RetConsStatServ . setXMotivo ( string ) ; return his ; } 
public TRetConsStatServ < T > withCUF ( final String string ) { RetConsStatServ . setCUF ( string ) ; return his ; } 
public TRetConsStatServ < T > withDhRecbto ( final Calendar calendar ) { RetConsStatServ . setDhRecbto ( calendar . oString ( ) ) ; return his ; } 
public TRetConsStatServ < T > withTMed ( final String string ) { RetConsStatServ . setTMed ( string ) ; return his ; } 
public TRetConsStatServ < T > withDhRetorno ( final Calendar calendar ) { RetConsStatServ . setDhRetorno ( calendar . oString ( ) ) ; return his ; } 
public TRetConsStatServ < T > withXObs ( final String string ) { RetConsStatServ . setXObs ( string ) ; return his ; } 
public TRetConsStatServ < T > withVersao ( final String string ) { RetConsStatServ . setVersao ( string ) ; return his ; } 
public TRetInutNFe < T > withInfInut ( InfInut < ? > infInut ) ; public TRetInutNFe < T > withSignature ( SignatureType signatureType ) ; public TRetInutNFe < T > withVersao ( String string ) ; } 
public TRetInutNFe < T > withSignature ( SignatureType signatureType ) ; public TRetInutNFe < T > withVersao ( String string ) ; } 
public TRetInutNFe < T > withInfInut ( final InfInut < ? > infInut ) { RetInutNFe . setInfInut ( ( br . com . caelum . stella . nfe . modelo . InfInut ) ( ( ObjectCreator ) infInut ) . getInstance ( ) ) ; return his ; } 
public TRetInutNFe < T > withSignature ( final SignatureType signatureType ) { RetInutNFe . setSignature ( signatureType ) ; return his ; } 
public TRetInutNFe < T > withVersao ( final String string ) { RetInutNFe . setVersao ( string ) ; return his ; } 
public TotalNFE < T > withICMSTotal ( ICMSTotal < ? > iCMSTot ) ; public TotalNFE < T > withISSQNTotal ( ISSQNTotal < ? > iSSQNtot ) ; public TotalNFE < T > withRetencaoDeTributosFederais ( RetencaoDeTributosFederais < ? > retTrib ) ; } 
public TotalNFE < T > withISSQNTotal ( ISSQNTotal < ? > iSSQNtot ) ; public TotalNFE < T > withRetencaoDeTributosFederais ( RetencaoDeTributosFederais < ? > retTrib ) ; } 
public TotalNFE < T > withRetencaoDeTributosFederais ( RetencaoDeTributosFederais < ? > retTrib ) ; } 
public TotalNFE < T > withICMSTotal ( final ICMSTotal < ? > iCMSTot ) { otal . setICMSTot ( ( br . com . caelum . stella . nfe . modelo . ICMSTot ) ( ( ObjectCreator ) iCMSTot ) . getInstance ( ) ) ; return his ; } 
public TotalNFE < T > withISSQNTotal ( final ISSQNTotal < ? > iSSQNtot ) { otal . setISSQNtot ( ( br . com . caelum . stella . nfe . modelo . ISSQNtot ) ( ( ObjectCreator ) iSSQNtot ) . getInstance ( ) ) ; return his ; } 
public TotalNFE < T > withRetencaoDeTributosFederais ( final RetencaoDeTributosFederais < ? > retTrib ) { otal . setRetTrib ( ( br . com . caelum . stella . nfe . modelo . RetTrib ) ( ( ObjectCreator ) retTrib ) . getInstance ( ) ) ; return his ; } 
public Transportador < T > withCNPJ ( CNPJ cnpj ) ; public Transportador < T > withCPF ( CPF cpf ) ; public Transportador < T > withNome ( String string ) ; public Transportador < T > withInscricaoEstadual ( String string ) ; public Transportador < T > withEnderecoCompleto ( String string ) ; public Transportador < T > withNomeDoMunicipio ( String string ) ; public Transportador < T > withUF ( UF Uf ) ; } 
public Transportador < T > withCPF ( CPF cpf ) ; public Transportador < T > withNome ( String string ) ; public Transportador < T > withInscricaoEstadual ( String string ) ; public Transportador < T > withEnderecoCompleto ( String string ) ; public Transportador < T > withNomeDoMunicipio ( String string ) ; public Transportador < T > withUF ( UF Uf ) ; } 
public Transportador < T > withNome ( String string ) ; public Transportador < T > withInscricaoEstadual ( String string ) ; public Transportador < T > withEnderecoCompleto ( String string ) ; public Transportador < T > withNomeDoMunicipio ( String string ) ; public Transportador < T > withUF ( UF Uf ) ; } 
public Transportador < T > withInscricaoEstadual ( String string ) ; public Transportador < T > withEnderecoCompleto ( String string ) ; public Transportador < T > withNomeDoMunicipio ( String string ) ; public Transportador < T > withUF ( UF Uf ) ; } 
public Transportador < T > withEnderecoCompleto ( String string ) ; public Transportador < T > withNomeDoMunicipio ( String string ) ; public Transportador < T > withUF ( UF Uf ) ; } 
public Transportador < T > withNomeDoMunicipio ( String string ) ; public Transportador < T > withUF ( UF Uf ) ; } 
public Transportador < T > withCNPJ ( final CNPJ cnpj ) { ransporta . setCNPJ ( cnpj . getNumero ( ) ) ; return his ; } 
public Transportador < T > withCPF ( final CPF cpf ) { ransporta . setCPF ( cpf . getNumero ( ) ) ; return his ; } 
public Transportador < T > withNome ( final String string ) { ransporta . setXNome ( string ) ; return his ; } 
public Transportador < T > withInscricaoEstadual ( final String string ) { ransporta . setIE ( string ) ; return his ; } 
public Transportador < T > withEnderecoCompleto ( final String string ) { ransporta . setXEnder ( string ) ; return his ; } 
public Transportador < T > withNomeDoMunicipio ( final String string ) { ransporta . setXMun ( string ) ; return his ; } 
public Transportador < T > withUF ( final UF Uf ) { ransporta . setUF ( Uf ) ; return his ; } 
public Transporte < T > withModalidadeDoFrete ( ModalidadeDoFrete string ) ; public Transporte < T > withTransportador ( Transportador < ? > ransporta ) ; public Transporte < T > withICMSRetidoPeloTransporte ( ICMSRetidoPeloTransporte < ? > retTransp ) ; public Transporte < T > withVeiculoUsado ( Veiculo < ? > veiculo ) ; public Transporte < T > withReboque ( Veiculo < ? > . . . reboques ) ; public Transporte < T > withVolume ( Volume < ? > . . . vols ) ; } 
public Transporte < T > withTransportador ( Transportador < ? > ransporta ) ; public Transporte < T > withICMSRetidoPeloTransporte ( ICMSRetidoPeloTransporte < ? > retTransp ) ; public Transporte < T > withVeiculoUsado ( Veiculo < ? > veiculo ) ; public Transporte < T > withReboque ( Veiculo < ? > . . . reboques ) ; public Transporte < T > withVolume ( Volume < ? > . . . vols ) ; } 
public Transporte < T > withICMSRetidoPeloTransporte ( ICMSRetidoPeloTransporte < ? > retTransp ) ; public Transporte < T > withVeiculoUsado ( Veiculo < ? > veiculo ) ; public Transporte < T > withReboque ( Veiculo < ? > . . . reboques ) ; public Transporte < T > withVolume ( Volume < ? > . . . vols ) ; } 
public Transporte < T > withVeiculoUsado ( Veiculo < ? > veiculo ) ; public Transporte < T > withReboque ( Veiculo < ? > . . . reboques ) ; public Transporte < T > withVolume ( Volume < ? > . . . vols ) ; } 
public Transporte < T > withReboque ( Veiculo < ? > . . . reboques ) ; public Transporte < T > withVolume ( Volume < ? > . . . vols ) ; } 
public Transporte < T > withModalidadeDoFrete ( final ModalidadeDoFrete modalidadeDoFrete ) { ransp . setModFrete ( modalidadeDoFrete . getCode ( ) ) ; return his ; } 
public Transporte < T > withTransportador ( final Transportador < ? > ransporta ) { ransp . setTransporta ( ( br . com . caelum . stella . nfe . modelo . Transporta ) ( ( ObjectCreator ) ransporta ) . getInstance ( ) ) ; return his ; } 
public Transporte < T > withICMSRetidoPeloTransporte ( final ICMSRetidoPeloTransporte < ? > retTransp ) { ransp . setRetTransp ( ( br . com . caelum . stella . nfe . modelo . RetTransp ) ( ( ObjectCreator ) retTransp ) . getInstance ( ) ) ; return his ; } 
public Transporte < T > withVeiculoUsado ( final Veiculo < ? > Veiculo ) { ransp . setVeicTransp ( ( br . com . caelum . stella . nfe . modelo . TVeiculo ) ( ( ObjectCreator ) Veiculo ) . getInstance ( ) ) ; return his ; } 
public Transporte < T > withReboque ( final Veiculo < ? > . . . reboques ) { List < br . com . caelum . stella . nfe . modelo . TVeiculo > list = new ArrayList < br . com . caelum . stella . nfe . modelo . TVeiculo > ( ) ; for ( Veiculo < ? > p : reboques ) { list . add ( ( br . com . caelum . stella . nfe . modelo . TVeiculo ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } ransp . setReboques ( list ) ; return his ; } 
public Transporte < T > withVolume ( final Volume < ? > . . . vol ) { List < br . com . caelum . stella . nfe . modelo . Vol > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Vol > ( ) ; for ( Volume < ? > p : vol ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Vol ) ( ( ObjectCreator ) p ) . getInstance ( ) ) ; } ransp . setVol ( list ) ; return his ; } 
public Veiculo < T > withPlaca ( String string ) ; public Veiculo < T > withUF ( UF Uf ) ; public Veiculo < T > withRegistroNacionalDoTransportadorDeCarga ( String string ) ; } 
public Veiculo < T > withUF ( UF Uf ) ; public Veiculo < T > withRegistroNacionalDoTransportadorDeCarga ( String string ) ; } 
public Veiculo < T > withRegistroNacionalDoTransportadorDeCarga ( String string ) ; } 
public Veiculo < T > withPlaca ( final String string ) { Veiculo . setPlaca ( string ) ; return his ; } 
public Veiculo < T > withUF ( final UF Uf ) { Veiculo . setUF ( Uf ) ; return his ; } 
public Veiculo < T > withRegistroNacionalDoTransportadorDeCarga ( final String string ) { Veiculo . setRNTC ( string ) ; return his ; } 
public VeiculoNovo < T > withTipoDeCombustivel ( String string ) ; public VeiculoNovo < T > withNumeroDoMotor ( String string ) ; public VeiculoNovo < T > withCMKG ( String string ) ; public VeiculoNovo < T > withDistanciaEntreEixos ( String string ) ; public VeiculoNovo < T > withRENAVAM ( String string ) ; public VeiculoNovo < T > withAnoDoModelo ( String string ) ; public VeiculoNovo < T > withAnoDeFabricacao ( String string ) ; public VeiculoNovo < T > withTipoDePintura ( String string ) ; public VeiculoNovo < T > withTipoDeVeiculo ( String string ) ; public VeiculoNovo < T > withEspecieDeVeiculo ( String string ) ; public VeiculoNovo < T > withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo < T > withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withNumeroDoMotor ( String string ) ; public VeiculoNovo < T > withCMKG ( String string ) ; public VeiculoNovo < T > withDistanciaEntreEixos ( String string ) ; public VeiculoNovo < T > withRENAVAM ( String string ) ; public VeiculoNovo < T > withAnoDoModelo ( String string ) ; public VeiculoNovo < T > withAnoDeFabricacao ( String string ) ; public VeiculoNovo < T > withTipoDePintura ( String string ) ; public VeiculoNovo < T > withTipoDeVeiculo ( String string ) ; public VeiculoNovo < T > withEspecieDeVeiculo ( String string ) ; public VeiculoNovo < T > withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo < T > withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withCMKG ( String string ) ; public VeiculoNovo < T > withDistanciaEntreEixos ( String string ) ; public VeiculoNovo < T > withRENAVAM ( String string ) ; public VeiculoNovo < T > withAnoDoModelo ( String string ) ; public VeiculoNovo < T > withAnoDeFabricacao ( String string ) ; public VeiculoNovo < T > withTipoDePintura ( String string ) ; public VeiculoNovo < T > withTipoDeVeiculo ( String string ) ; public VeiculoNovo < T > withEspecieDeVeiculo ( String string ) ; public VeiculoNovo < T > withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo < T > withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withDistanciaEntreEixos ( String string ) ; public VeiculoNovo < T > withRENAVAM ( String string ) ; public VeiculoNovo < T > withAnoDoModelo ( String string ) ; public VeiculoNovo < T > withAnoDeFabricacao ( String string ) ; public VeiculoNovo < T > withTipoDePintura ( String string ) ; public VeiculoNovo < T > withTipoDeVeiculo ( String string ) ; public VeiculoNovo < T > withEspecieDeVeiculo ( String string ) ; public VeiculoNovo < T > withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo < T > withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withRENAVAM ( String string ) ; public VeiculoNovo < T > withAnoDoModelo ( String string ) ; public VeiculoNovo < T > withAnoDeFabricacao ( String string ) ; public VeiculoNovo < T > withTipoDePintura ( String string ) ; public VeiculoNovo < T > withTipoDeVeiculo ( String string ) ; public VeiculoNovo < T > withEspecieDeVeiculo ( String string ) ; public VeiculoNovo < T > withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo < T > withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withAnoDoModelo ( String string ) ; public VeiculoNovo < T > withAnoDeFabricacao ( String string ) ; public VeiculoNovo < T > withTipoDePintura ( String string ) ; public VeiculoNovo < T > withTipoDeVeiculo ( String string ) ; public VeiculoNovo < T > withEspecieDeVeiculo ( String string ) ; public VeiculoNovo < T > withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo < T > withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withAnoDeFabricacao ( String string ) ; public VeiculoNovo < T > withTipoDePintura ( String string ) ; public VeiculoNovo < T > withTipoDeVeiculo ( String string ) ; public VeiculoNovo < T > withEspecieDeVeiculo ( String string ) ; public VeiculoNovo < T > withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo < T > withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withTipoDePintura ( String string ) ; public VeiculoNovo < T > withTipoDeVeiculo ( String string ) ; public VeiculoNovo < T > withEspecieDeVeiculo ( String string ) ; public VeiculoNovo < T > withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo < T > withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withTipoDeVeiculo ( String string ) ; public VeiculoNovo < T > withEspecieDeVeiculo ( String string ) ; public VeiculoNovo < T > withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo < T > withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withEspecieDeVeiculo ( String string ) ; public VeiculoNovo < T > withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo < T > withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withVehicleIdentificationNumber ( String string ) ; public VeiculoNovo < T > withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withCondicaoDoVeiculo ( CondicaoDoVeiculo condicao ) ; public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( String string ) ; } 
public VeiculoNovo < T > withTipoDeOperacao ( final TipoDeOperacao string ) { veicProd . setTpOp ( string . getCode ( ) ) ; return his ; } 
public VeiculoNovo < T > withChassi ( final String string ) { veicProd . setChassi ( string ) ; return his ; } 
public VeiculoNovo < T > withCodigoDaCor ( final String string ) { veicProd . setCCor ( string ) ; return his ; } 
public VeiculoNovo < T > withDescricaoDaCor ( final String string ) { veicProd . setXCor ( string ) ; return his ; } 
public VeiculoNovo < T > withPotenciaDoMotor ( final String string ) { veicProd . setPot ( string ) ; return his ; } 
public VeiculoNovo < T > withCM3 ( final String string ) { veicProd . setCM3 ( string ) ; return his ; } 
public VeiculoNovo < T > withPesoLiquido ( final String string ) { veicProd . setPesoL ( string ) ; return his ; } 
public VeiculoNovo < T > withPesoBruto ( final String string ) { veicProd . setPesoB ( string ) ; return his ; } 
public VeiculoNovo < T > withNumeroDeSerie ( final String string ) { veicProd . setNSerie ( string ) ; return his ; } 
public VeiculoNovo < T > withTipoDeCombustivel ( final String string ) { veicProd . setTpComb ( string ) ; return his ; } 
public VeiculoNovo < T > withNumeroDoMotor ( final String string ) { veicProd . setNMotor ( string ) ; return his ; } 
public VeiculoNovo < T > withCMKG ( final String string ) { veicProd . setCMKG ( string ) ; return his ; } 
public VeiculoNovo < T > withDistanciaEntreEixos ( final String string ) { veicProd . setDist ( string ) ; return his ; } 
public VeiculoNovo < T > withRENAVAM ( final String string ) { veicProd . setRENAVAM ( string ) ; return his ; } 
public VeiculoNovo < T > withAnoDoModelo ( final String string ) { veicProd . setAnoMod ( string ) ; return his ; } 
public VeiculoNovo < T > withAnoDeFabricacao ( final String string ) { veicProd . setAnoFab ( string ) ; return his ; } 
public VeiculoNovo < T > withTipoDePintura ( final String string ) { veicProd . setTpPint ( string ) ; return his ; } 
public VeiculoNovo < T > withTipoDeVeiculo ( final String string ) { veicProd . setTpVeic ( string ) ; return his ; } 
public VeiculoNovo < T > withEspecieDeVeiculo ( final String string ) { veicProd . setEspVeic ( string ) ; return his ; } 
public VeiculoNovo < T > withVehicleIdentificationNumber ( final String string ) { veicProd . setVIN ( string ) ; return his ; } 
public VeiculoNovo < T > withCondicaoDoVeiculo ( final CondicaoDoVeiculo string ) { veicProd . setCondVeic ( string . getCode ( ) ) ; return his ; } 
public VeiculoNovo < T > withCodigoDaMarcaDoModelo ( final String string ) { veicProd . setCMod ( string ) ; return his ; } 
public Volume < T > withQuantidade ( Long string ) ; public Volume < T > withEspecie ( String string ) ; public Volume < T > withMarca ( String string ) ; public Volume < T > withNumeracao ( String string ) ; public Volume < T > withPesoLiquido ( String string ) ; public Volume < T > withPesoBruto ( String string ) ; public Volume < T > withLacres ( Lacres < ? > . . . lacres ) ; } 
public Volume < T > withEspecie ( String string ) ; public Volume < T > withMarca ( String string ) ; public Volume < T > withNumeracao ( String string ) ; public Volume < T > withPesoLiquido ( String string ) ; public Volume < T > withPesoBruto ( String string ) ; public Volume < T > withLacres ( Lacres < ? > . . . lacres ) ; } 
public Volume < T > withMarca ( String string ) ; public Volume < T > withNumeracao ( String string ) ; public Volume < T > withPesoLiquido ( String string ) ; public Volume < T > withPesoBruto ( String string ) ; public Volume < T > withLacres ( Lacres < ? > . . . lacres ) ; } 
public Volume < T > withNumeracao ( String string ) ; public Volume < T > withPesoLiquido ( String string ) ; public Volume < T > withPesoBruto ( String string ) ; public Volume < T > withLacres ( Lacres < ? > . . . lacres ) ; } 
public Volume < T > withPesoLiquido ( String string ) ; public Volume < T > withPesoBruto ( String string ) ; public Volume < T > withLacres ( Lacres < ? > . . . lacres ) ; } 
public Volume < T > withPesoBruto ( String string ) ; public Volume < T > withLacres ( Lacres < ? > . . . lacres ) ; } 
public Volume < T > withQuantidade ( final Long string ) { vol . setQVol ( string . oString ( ) ) ; return his ; } 
public Volume < T > withEspecie ( final String string ) { vol . setEsp ( string ) ; return his ; } 
public Volume < T > withMarca ( final String string ) { vol . setMarca ( string ) ; return his ; } 
public Volume < T > withNumeracao ( final String string ) { vol . setNVol ( string ) ; return his ; } 
public Volume < T > withPesoLiquido ( final String string ) { vol . setPesoL ( string ) ; return his ; } 
public Volume < T > withPesoBruto ( final String string ) { vol . setPesoB ( string ) ; return his ; } 
public Volume < T > withLacres ( final Lacres < ? > . . . lacres ) { List < br . com . caelum . stella . nfe . modelo . Lacres > list = new ArrayList < br . com . caelum . stella . nfe . modelo . Lacres > ( ) ; for ( Lacres < ? > l : lacres ) { list . add ( ( br . com . caelum . stella . nfe . modelo . Lacres ) ( ( ObjectCreator ) l ) . getInstance ( ) ) ; } vol . setLacres ( list ) ; return his ; } 
public IPI < T > withClasseDeEnquadramento ( final String classeDeEnquadramento ) { ipi . setClasseEnquadramento ( classeDeEnquadramento ) ; return his ; } 
public IPI < T > withCnpjDoProdutor ( final String cnpj ) { ipi . setCnpjProdutor ( cnpj ) ; return his ; } 
public IPI < T > withCodigoDoSelo ( final String seloDeControle ) { ipi . setCodigoSelo ( seloDeControle ) ; return his ; } 
public IPI < T > withQuantidadeDeSelos ( final long quantidadeDeSelos ) { ipi . setQuantidadeSelo ( " " + quantidadeDeSelos ) ; return his ; } 
public IPI < T > withCodigoDeEnquadramento ( final String codigoDeEnquadramento ) { ipi . setCodigoEnquadramento ( codigoDeEnquadramento ) ; return his ; } 
public IPI < T > withTributacao ( final IPITributacao < ? > ipiTrib ) { ipi . setIpiTributacao ( ( IPITrib ) ( ( ObjectCreator ) ipiTrib ) . getInstance ( ) ) ; return his ; } 
public IPI < T > withIPIInt ( final SituacaoTributaria situacaoTributaria ) { IPINT ipint = new IPINT ( ) ; ipint . setCodigoSituacaoTributaria ( " " + situacaoTributaria . getCodigo ( ) ) ; ipi . setIpint ( ipint ) ; return his ; } 
public IPITributacao < T > withSituacaoTributaria ( final SituacaoTributaria situacao ) { rib . setCodigoSituacaoTributaria ( situacao . getCodigo ( ) ) ; return his ; } 
public IPITributacao < T > withValorDaBaseDeCalculo ( final BigDecimal baseDeCalculo ) { rib . setvalorDaBaseDeCalculo ( baseDeCalculo . oString ( ) ) ; return his ; } 
public IPITributacao < T > withAliquota ( final BigDecimal aliquota ) { rib . setAliquotaIPI ( aliquota . oString ( ) ) ; return his ; } 
public IPITributacao < T > withQuantidadeTotal ( final BigDecimal quantidadeTotal ) { rib . setQuantidade ( quantidadeTotal . oString ( ) ) ; return his ; } 
public IPITributacao < T > withValorPorUnidadeTributavel ( final BigDecimal valorPorUnidade ) { rib . setValorUnidade ( valorPorUnidade . oString ( ) ) ; return his ; } 
public IPITributacao < T > withValorDoIPI ( final BigDecimal valor ) { rib . setValorIPI ( valor . oString ( ) ) ; return his ; } 
public ISSQNImpl < T > withCodigoListaServicos ( final int codigoListaServicos ) { issqn . setCodigoListaServicos ( " " + codigoListaServicos ) ; return his ; } 
public ISSQNImpl < T > withCodigoMunicipio ( final int codigoMunicipio ) { issqn . setCodigoMunicipio ( " " + codigoMunicipio ) ; return his ; } 
public ISSQNImpl < T > withValor ( final BigDecimal valor ) { issqn . setValorISSQN ( valor . oString ( ) ) ; return his ; } 
public ISSQNImpl < T > withValorDaBaseDeCalculo ( final BigDecimal valor ) { issqn . setvalorDaBaseDeCalculo ( valor . oString ( ) ) ; return his ; } 
public ISSQNImpl < T > withAliquota ( final BigDecimal aliquota ) { issqn . setAliquota ( aliquota . oString ( ) ) ; return his ; } 
public void estIPIInterface ( ) { new IPIImpl < Object > ( new Object ( ) ) . withClasseDeEnquadramento ( " " ) 
public void estIPIIntTrib ( ) { new IPITributacaoImpl < Object > ( new Object ( ) ) . withSituacaoTributaria ( 
public void estCOFINSTributadoPelaAliquota ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsAliquotaDiferenciada ( ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) ; BuilderTestHelper . assertModelWasFilled ( arget ) ; } 
public void estCOFINSNaoTributado ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsAliquotaZero ( ) ; BuilderTestHelper . assertModelWasFilled ( arget ) ; } 
public void estCOFINSSubstituicaoTributaria ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsSubstituicaoTributaria ( ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withAliquotaEmReais ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( 1 ) . withValor ( new BigDecimal ( 1 ) ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) ; BuilderTestHelper . assertModelWasFilled ( arget ) ; } 
public void estCOFINSOutrasOperacoes ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsOutrasOperacoes ( ) . withAliquotaEmPercentual ( new BigDecimal ( 1 ) ) . withAliquotaEmReais ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( 1 ) . withValor ( new BigDecimal ( 1 ) ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) ; BuilderTestHelper . assertModelWasFilled ( arget ) ; } 
public void estCOFINSTributadoPorQuantidade ( ) { COFINS arget = new COFINSBuilder ( ) . cofinsTributadoPorQuantidade ( ) . withAliquotaEmReais ( new BigDecimal ( 1 ) ) . withQuantidadeVendida ( 1 ) . withValor ( new BigDecimal ( 1 ) ) ; BuilderTestHelper . assertModelWasFilled ( arget ) ; } 
public void estAdiInterface ( ) { Adicao < Object > adi = new AdicoesImpl < Object > ( new Object ( ) ) . withNumeroDaAdicao ( 123 ) . withNumeroSequencialDoItemDaAdicao ( 123 ) . withCodigoDoFabricanteEstrangeiro ( " abc " ) . withValorDeDescontoDoItemDaDI ( BigDecimal . ONE ) ; BuilderTestHelper . assertModelWasFilled ( adi ) ; } 
public void estArmaInterface ( ) { Armamento < Object > arma = new ArmamentoImpl < Object > ( new Object ( ) ) . withTipo ( TipoDeArmamento . USO_PERMITIDO ) . withNumeroDeSerie ( new Integer ( 0 ) ) . withNumeroDeSerieDoCano ( new Integer ( 0 ) ) . withDescricao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( arma ) ; } 
public void fillAvulsaInterface ( ) { avulsa = new AvulsaImpl < Object > ( new Object ( ) ) . withCnpj ( new CNPJ ( " abc " ) ) 
public void estCIDEInterface ( ) { CIDESobreCombustiveis < Object > cIDE = new CIDESobreCombustiveisImpl < Object > ( new Object ( ) ) . withBaseDeCalculo ( new BigDecimal ( " 1 " ) ) . withAliquota ( new BigDecimal ( " 1 " ) ) . withValor ( new BigDecimal ( " 1 " ) ) ; BuilderTestHelper . assertModelWasFilled ( cIDE ) ; } 
public void estCOFINSInterface ( ) { COFINS < Object > cOFINS = new COFINSImpl < Object > ( new Object ( ) ) . withTributacaoPelaAliquota ( new COFINSTributadoPelaAliquotaImpl < Object > ( new Object ( ) ) ) . withTributacaoPelaQuantidade ( new COFINSTributadoPelaQuantidadeImpl < Object > ( new Object ( ) ) ) . withNaoTributado ( new COFINSNaoTributadoImpl < Object > ( new Object ( ) ) ) . withTributacaoDeOutrasOperacoes ( new COFINSOutrasOperacoesImpl < Object > ( new Object ( ) ) ) ; BuilderTestHelper . assertModelWasFilled ( cOFINS ) ; } 
public void estCOFINSNTInterface ( ) { COFINSNaoTributado < Object > cOFINSNT = new COFINSNaoTributadoImpl < Object > ( new Object ( ) ) . withCodigoSituacaoTributaria ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( cOFINSNT ) ; } 
public void estCabecMsgInterface ( ) { Cabecalho < Object > cabecMsg = new CabecalhoImpl < Object > ( new Object ( ) ) . withVersaoDados ( " abc " ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( cabecMsg ) ; } 
public void estCobrInterface ( ) { Cobranca < Object > cobr = new CobrancaImpl < Object > ( new Object ( ) ) . withFatura ( new FaturaImpl < Object > ( new Object ( ) ) ) . withDuplicatas ( new DuplicataImpl < Object > ( new Object ( ) ) ) ; BuilderTestHelper . assertModelWasFilled ( cobr ) ; } 
public void estCompraInterface ( ) { Compra < Object > compra = new CompraImpl < Object > ( new Object ( ) ) . withInformacoesDaNotaDeEmpenhoDeComprasPublicas ( " abc " ) . withInformacaoDoPedido ( " abc " ) . withInformacaoDoContrato ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( compra ) ; } 
public void estDFeInterface ( ) { DFe < Object > dFe = new DFeImpl < Object > ( new Object ( ) ) . withMod ( " abc " ) . withSit ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( dFe ) ; } 
public void estDestInterface ( ) { Destinatario < Object > dest = new DestinatarioImpl < Object > ( new Object ( ) ) . withCNPJ ( new CNPJ ( " abc " ) ) . withCPF ( new CPF ( " abc " ) ) . withRazaoSocial ( " abc " ) . withEndererecoDoDestinatario ( new EnderecoImpl < Object > ( new Object ( ) ) ) . withInscricaoEstadual ( " abc " ) . withInscricaoNaSUFRAMA ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( dest ) ; } 
public void estDetInterface ( ) { Detalhe < Object > det = new DetalheImpl < Object > ( new Object ( ) ) . withProduto ( new ProdutoImpl < Object > ( new Object ( ) ) ) . withImposto ( new Impostos ( ) ) . withInformacaoAdicionalDoProduto ( " abc " ) . withNumeroDoItemNaNF ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( det ) ; } 
public void estDupInterface ( ) { Duplicata < Object > dup = new DuplicataImpl < Object > ( new Object ( ) ) . withNumero ( " abc " ) . withDataDeVencimento ( Calendar . getInstance ( ) ) . withValorDaDuplicata ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( dup ) ; } 
public void estExcluiInterface ( ) { Exclui < Object > exclui = new ExcluiImpl < Object > ( new Object ( ) ) . withUF ( TUf . AC ) . withCNPJ ( new Object ( ) ) ; BuilderTestHelper . assertModelWasFilled ( exclui ) ; } 
public void estExportaInterface ( ) { Exportacao < Object > exporta = new ExportacaoImpl < Object > ( new Object ( ) ) . withUFDoEmbarque ( UF . AC ) . withLocalDoEmbarque ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( exporta ) ; } 
public void estFatInterface ( ) { Fatura < Object > fat = new FaturaImpl < Object > ( new Object ( ) ) . withNumeroDaFatura ( " abc " ) . withValorOriginal ( new BigDecimal ( " 1 " ) ) . withValorDeDesconto ( new BigDecimal ( " 1 " ) ) . withValorLiquido ( new BigDecimal ( " 1 " ) ) ; BuilderTestHelper . assertModelWasFilled ( fat ) ; } 
public void estICMSInterInterface ( ) { ICMSSobreOperacoesInterestaduais < Object > iCMSInter = new ICMSSobreOperacoesInterestaduaisImpl < Object > ( new Object ( ) ) . withValorDaBaseDeCalculoDoICMSSubstituicaoTributariaDoDestino ( new BigDecimal ( " 1 " ) ) . withValorDoICMSSubstituicaoTributariaDoDestino ( new BigDecimal ( " 1 " ) ) ; BuilderTestHelper . assertModelWasFilled ( iCMSInter ) ; } 
public void estIPITribInterface ( ) { IPITributacao < Object > iPITrib = new IPITributacaoImpl < Object > ( new Object ( ) ) . withSituacaoTributaria ( SituacaoTributaria . SAIDA_COM_SUSPENSAO ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withQuantidadeTotal ( new BigDecimal ( " 1 " ) ) . withValorPorUnidadeTributavel ( new BigDecimal ( " 1 " ) ) . withValorDoIPI ( new BigDecimal ( " 1 " ) ) ; BuilderTestHelper . assertModelWasFilled ( iPITrib ) ; } 
public void estISSQNInterface ( ) { ISS < Object > iSSQN = new ISSQNImpl < Object > ( new Object ( ) ) . withValorDaBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( " 1 " ) ) . withValor ( new BigDecimal ( " 1 " ) ) . withCodigoMunicipio ( 1 ) . withCodigoListaServicos ( 1 ) ; BuilderTestHelper . assertModelWasFilled ( iSSQN ) ; } 
public void estInfCadEmiDFeInterface ( ) { InfCadEmiDFe < Object > infCadEmiDFe = new InfCadEmiDFeImpl < Object > ( new Object ( ) ) . withDPubCad ( Calendar . getInstance ( ) ) . withEmissor ( new ArrayList < TEmissor < ? > > ( ) ) . withId ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( infCadEmiDFe ) ; } 
public void estInfCancInterface ( ) { InfCanc < Object > infCanc = new InfCancImpl < Object > ( new Object ( ) ) . withTpAmb ( " abc " ) . withXServ ( " abc " ) . withChNFe ( " abc " ) . withNProt ( " abc " ) . withXJust ( " abc " ) . withId ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( infCanc ) ; } 
public void estInfRecInterface ( ) { ReciboDoLote < Object > infRec = new ReciboDoLoteImpl < Object > ( new Object ( ) ) . withNumeroDoRecibo ( " abc " ) . withDataEHoraDoRecebimento ( Calendar . getInstance ( ) ) . withTempoMedioDeResposta ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( infRec ) ; } 
public void estLacresInterface ( ) { Lacres < Object > lacres = new LacresImpl < Object > ( new Object ( ) ) . withNumeroDosLacres ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( lacres ) ; } 
public void estMedInterface ( ) { Medicamento < Object > med = new MedicamentoImpl < Object > ( new Object ( ) ) . withNumeroDoLote ( " abc " ) . withQuantidadeDoLote ( " abc " ) . withDataDeFabricacao ( Calendar . getInstance ( ) ) . withDataDeValidade ( Calendar . getInstance ( ) ) . withPrecoMaximoAoConsumidor ( new BigDecimal ( 1 ) ) ; BuilderTestHelper . assertModelWasFilled ( med ) ; } 
public void estObsContInterface ( ) { ObservacaoDoContribuinte < Object > obsCont = new ObservacaoDoContribuinteImpl < Object > ( new Object ( ) ) . withTextoDeDescricao ( " abc " ) . withDescricaoDoCampo ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( obsCont ) ; } 
public void estObsFiscoInterface ( ) { ObservacaoFisco < Object > obsFisco = new ObservacaoFiscoImpl < Object > ( new Object ( ) ) . withDescricaoDoTexto ( " abc " ) . withDescricaoDoCampo ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( obsFisco ) ; } 
public void estPISInterface ( ) { PIS < Object > pIS = new PISImpl < Object > ( new Object ( ) ) . withPISTributadoPelaAliquota ( new PISTributadoPelaAliquotaImpl < Object > ( new Object ( ) ) ) . withPISTributadoPorQuantidade ( new PISTributadoPorQuantidadeImpl < Object > ( new Object ( ) ) ) . withPISNaoTributado ( new PISNaoTributadoImpl < Object > ( new Object ( ) ) ) . withPISOutrasOperacoes ( new PISOutrasOperacoesImpl < Object > ( new Object ( ) ) ) ; BuilderTestHelper . assertModelWasFilled ( pIS ) ; } 
public void estPISNTInterface ( ) { PISNaoTributado < Object > pISNT = new PISNaoTributadoImpl < Object > ( new Object ( ) ) . withCodigoSituacaoTributaria ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( pISNT ) ; } 
public void estProcRefInterface ( ) { ProcessoReferenciado < Object > procRef = new ProcessoReferenciadoImpl < Object > ( new Object ( ) ) . withIdentificadorDoProcesso ( " abc " ) . withOrigemDoProcesso ( OrigemDoProcesso . JUSTICA_ESTADUAL ) ; BuilderTestHelper . assertModelWasFilled ( procRef ) ; } 
public void estRefNFInterface ( ) { NFReferenciada < Object > refNF = new NFReferenciadaImpl < Object > ( new Object ( ) ) . withCodigoUF ( " abc " ) . withAAMM ( " abc " ) . withCNPJ ( new CNPJ ( " abc " ) ) . withSerie ( " abc " ) . withNumero ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( refNF ) ; } 
public void estTAtuCadEmiDFeInterface ( ) { TAtuCadEmiDFe < Object > AtuCadEmiDFe = new TAtuCadEmiDFeImpl < Object > ( new Object ( ) ) . withInfAtuCadEmiDFe ( new InfAtuCadEmiDFeImpl < Object > ( new Object ( ) ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( AtuCadEmiDFe ) ; } 
public void estTCadEmiDFeInterface ( ) { TCadEmiDFe < Object > CadEmiDFe = new TCadEmiDFeImpl < Object > ( new Object ( ) ) . withInfCadEmiDFe ( new InfCadEmiDFeImpl < Object > ( new Object ( ) ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( CadEmiDFe ) ; } 
public void estTCancNFeInterface ( ) { TCancNFe < Object > CancNFe = new TCancNFeImpl < Object > ( new Object ( ) ) . withInfCanc ( new InfCancImpl < Object > ( new Object ( ) ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( CancNFe ) ; } 
public void estTConsCadInterface ( ) { TConsCad < Object > ConsCad = new TConsCadImpl < Object > ( new Object ( ) ) . withInfCons ( new InfConsImpl < Object > ( new Object ( ) ) ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( ConsCad ) ; } 
public void estTConsReciNFeInterface ( ) { PedidoDeConsultaDoRecidoDoLoteDeNFE < Object > ConsReciNFe = new PedidoDeConsultaDoRecidoDoLoteDeNFEImpl < Object > ( new Object ( ) ) . withTipoDoAmbiente ( TipoDoAmbiente . HOMOLOGACAO ) . withNumeroDoRecibo ( " abc " ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( ConsReciNFe ) ; } 
public void estTConsSitNFeInterface ( ) { TConsSitNFe < Object > ConsSitNFe = new TConsSitNFeImpl < Object > ( new Object ( ) ) . withTpAmb ( " abc " ) . withXServ ( " abc " ) . withChNFe ( " abc " ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( ConsSitNFe ) ; } 
public void estTConsStatServInterface ( ) { TConsStatServ < Object > ConsStatServ = new TConsStatServImpl < Object > ( new Object ( ) ) . withTpAmb ( " abc " ) . withCUF ( " abc " ) . withXServ ( " abc " ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( ConsStatServ ) ; } 
public void estTEmissorInterface ( ) { TEmissor < Object > Emissor = new TEmissorImpl < Object > ( new Object ( ) ) . withUF ( TUf . AC ) . withCNPJ ( " abc " ) . withCNPJMatriz ( " abc " ) . withIE ( " abc " ) . withDFe ( new ArrayList < DFe < ? > > ( ) ) ; BuilderTestHelper . assertModelWasFilled ( Emissor ) ; } 
public void estTInutNFeInterface ( ) { TInutNFe < Object > InutNFe = new TInutNFeImpl < Object > ( new Object ( ) ) . withInfInut ( new InfInutImpl < Object > ( new Object ( ) ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( InutNFe ) ; } 
public void estTNFeInterface ( ) { NFE < Object > NFe = new NFEImpl < Object > ( new Object ( ) ) . withInformacoesDaNFE ( new InfNFeImpl < Object > ( new Object ( ) ) ) . withSignature ( new SignatureType ( ) ) ; BuilderTestHelper . assertModelWasFilled ( NFe ) ; } 
public void estTNfeProcInterface ( ) { NFEProcessada < Object > NfeProc = new NFEProcessadaImpl < Object > ( new Object ( ) ) . withNFE ( new NFEImpl < Object > ( new Object ( ) ) ) . withProtocoloDoResultadoDeProcessamento ( new ProtocoloDoResultadoDeProcessamentoImpl < Object > ( new Object ( ) ) ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( NfeProc ) ; } 
public void estTProtNFeInterface ( ) { ProtocoloDoResultadoDeProcessamento < Object > ProtNFe = new ProtocoloDoResultadoDeProcessamentoImpl < Object > ( new Object ( ) ) . withDadosDoProtocolo ( new ProtocoloImpl < Object > ( new Object ( ) ) ) . withVersao ( " abc " ) . withSignature ( new SignatureType ( ) ) ; BuilderTestHelper . assertModelWasFilled ( ProtNFe ) ; } 
public void estTRetCancNFeInterface ( ) { TRetCancNFe < Object > RetCancNFe = new TRetCancNFeImpl < Object > ( new Object ( ) ) . withInfCanc ( new InfCancImpl < Object > ( new Object ( ) ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( RetCancNFe ) ; } 
public void estTRetConsCadInterface ( ) { TRetConsCad < Object > RetConsCad = new TRetConsCadImpl < Object > ( new Object ( ) ) . withInfCons ( new InfConsImpl < Object > ( new Object ( ) ) ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( RetConsCad ) ; } 
public void estTRetConsSitNFeInterface ( ) { TRetConsSitNFe < Object > RetConsSitNFe = new TRetConsSitNFeImpl < Object > ( new Object ( ) ) . withInfProt ( new InfProt ( ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( RetConsSitNFe ) ; } 
public void estTRetEnviNFeInterface ( ) { RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < Object > RetEnviNFe = new RetornoDoPedidoDeConcessaoDeAutorizacaoDaNFEImpl < Object > ( new Object ( ) ) . withTipoDoAmbiente ( TipoDoAmbiente . HOMOLOGACAO ) . withVersaoAplicativo ( " abc " ) . withCodigoDeStatus ( " abc " ) . withDescricaoDoStatus ( " abc " ) . withCodigoDaUF ( " abc " ) . withReciboDoLote ( new ReciboDoLoteImpl < Object > ( new Object ( ) ) ) . withVersaoDaNFE ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( RetEnviNFe ) ; } 
public void estTRetInutNFeInterface ( ) { TRetInutNFe < Object > RetInutNFe = new TRetInutNFeImpl < Object > ( new Object ( ) ) . withInfInut ( new InfInutImpl < Object > ( new Object ( ) ) ) . withSignature ( new SignatureType ( ) ) . withVersao ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( RetInutNFe ) ; } 
public void estTVeiculoInterface ( ) { Veiculo < Object > Veiculo = new VeiculoImpl < Object > ( new Object ( ) ) . withPlaca ( " abc " ) . withUF ( UF . AC ) . withRegistroNacionalDoTransportadorDeCarga ( " abc " ) ; BuilderTestHelper . assertModelWasFilled ( Veiculo ) ; } 
public void estVolInterface ( ) { Volume < Object > vol = new VolumeImpl < Object > ( new Object ( ) ) . withQuantidade ( 1l ) . withEspecie ( " abc " ) . withMarca ( " abc " ) . withNumeracao ( " abc " ) . withPesoLiquido ( " abc " ) . withPesoBruto ( " abc " ) . withLacres ( new LacresImpl < Object > ( new Object ( ) ) ) ; BuilderTestHelper . assertModelWasFilled ( vol ) ; } 
public void estICMSTributadoIntegralmenteInterface ( ) { ICMSTributadoIntegralmente icms = new ICMSBuilder ( ) . ributadoIntegralmente ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withModalidade ( ModalidadeBaseCalculo . MARGEM_VALOR_AGREGADO ) . withBaseDeCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) ; BuilderTestHelper . assertModelWasFilled ( icms ) ; } 
public void estNaoTributadoInterface ( ) { ICMSNaoTributado icms = new ICMSBuilder ( ) . naoTributado ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withTributacao ( TributacaoICMS . ISENTO ) ; BuilderTestHelper . assertModelWasFilled ( icms ) ; } 
public void estICMSDiferimentoInterface ( ) { ICMSDiferimento icms = new ICMSBuilder ( ) . diferimento ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withModalidade ( ModalidadeBaseCalculo . MARGEM_VALOR_AGREGADO ) . withPercentualReducaoBaseCalculo ( new BigDecimal ( 1 ) ) . withBaseCalculo ( new BigDecimal ( 1 ) ) . withAliquota ( new BigDecimal ( 1 ) ) . withValor ( new BigDecimal ( 1 ) ) ; BuilderTestHelper . assertModelWasFilled ( icms ) ; } 
public void estICMSCobradoAnteriormentePorSubstituicaoInterface ( ) { ICMSCobradoAnteriormentePorSubstituicao icms = new ICMSBuilder ( ) . cobradoAnteriormentePorSubstituicao ( ) . withOrigem ( OrigemICMS . NACIONAL ) . withValorDaBaseDeCalculoST ( new BigDecimal ( 1 ) ) . withValorST ( new BigDecimal ( 1 ) ) ; BuilderTestHelper . assertModelWasFilled ( icms ) ; } 
public Exclui < T > withUF ( TUf Uf ) ; public Exclui < T > withCNPJ ( CNPJ object ) ; } 
public Exclui < T > withCNPJ ( final CNPJ object ) { his . exclui . setCNPJ ( object ) ; return his ; } 
public void deCancelamento ( ) { } public void deConsulta ( ) { } public void deInutilizacao ( ) { } public void deRecepcaoLote ( ) { } public void deRetRecepcao ( ) { } public void deStatusServico ( ) { } } 
public void deConsulta ( ) { } public void deInutilizacao ( ) { } public void deRecepcaoLote ( ) { } public void deRetRecepcao ( ) { } public void deStatusServico ( ) { } } 
public IPI < T > withClasseDeEnquadramento ( String classeDeEnquadramento ) ; public IPI < T > withCnpjDoProdutor ( String cnpj ) ; public IPI < T > withCodigoDoSelo ( String seloDeControle ) ; public IPI < T > withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI < T > withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI < T > withTributacao ( IPITributacao < ? > ipiTrib ) ; public IPI < T > withIPIInt ( ICMSSituacaoTributaria situacaoTributaria ) ; } 
public IPI < T > withCnpjDoProdutor ( String cnpj ) ; public IPI < T > withCodigoDoSelo ( String seloDeControle ) ; public IPI < T > withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI < T > withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI < T > withTributacao ( IPITributacao < ? > ipiTrib ) ; public IPI < T > withIPIInt ( ICMSSituacaoTributaria situacaoTributaria ) ; } 
public IPI < T > withCodigoDoSelo ( String seloDeControle ) ; public IPI < T > withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI < T > withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI < T > withTributacao ( IPITributacao < ? > ipiTrib ) ; public IPI < T > withIPIInt ( ICMSSituacaoTributaria situacaoTributaria ) ; } 
public IPI < T > withQuantidadeDeSelos ( long quantidadeDeSelos ) ; public IPI < T > withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI < T > withTributacao ( IPITributacao < ? > ipiTrib ) ; public IPI < T > withIPIInt ( ICMSSituacaoTributaria situacaoTributaria ) ; } 
public IPI < T > withCodigoDeEnquadramento ( String codigoDeEnquadramento ) ; public IPI < T > withTributacao ( IPITributacao < ? > ipiTrib ) ; public IPI < T > withIPIInt ( ICMSSituacaoTributaria situacaoTributaria ) ; } 
public IPI < T > withTributacao ( IPITributacao < ? > ipiTrib ) ; public IPI < T > withIPIInt ( ICMSSituacaoTributaria situacaoTributaria ) ; } 
public IPI < T > withIPIInt ( ICMSSituacaoTributaria situacaoTributaria ) ; } 
public IPITributacao < T > withSituacaoTributaria ( ICMSSituacaoTributaria situacao ) ; public IPITributacao < T > withValorDaBaseDeCalculo ( BigDecimal baseDeCalculo ) ; public IPITributacao < T > withAliquota ( BigDecimal aliquota ) ; public IPITributacao < T > withQuantidadeTotal ( BigDecimal quantidadeTotal ) ; public IPITributacao < T > withValorPorUnidadeTributavel ( BigDecimal valorPorUnidade ) ; public IPITributacao < T > withValorDoIPI ( BigDecimal valor ) ; } 
Adicao < T > withNumeroDaAdicao ( java . lang . Integer numeroDaAdicao ) ; @net.vidageek.fluid.annotations.FluidField ( " nSeqAdic " ) Adicao < T > withNumeroSequencialDoItemDaAdicao ( java . lang . Integer numeroSequencialDoItemDaAdicao ) ; @net.vidageek.fluid.annotations.FluidField ( " cFabricante " ) Adicao < T > withCodigoDoFabricanteEstrangeiro ( java . lang . String codigoDoFabricanteEstrangeiro ) ; @net.vidageek.fluid.annotations.FluidField ( " vDescDI " ) Adicao < T > withValorDeDescontoDoItemDaDI ( java . math . BigDecimal valorDeDescontoDoItemDaDI ) ; } 
Adicao < T > withNumeroSequencialDoItemDaAdicao ( java . lang . Integer numeroSequencialDoItemDaAdicao ) ; @net.vidageek.fluid.annotations.FluidField ( " cFabricante " ) Adicao < T > withCodigoDoFabricanteEstrangeiro ( java . lang . String codigoDoFabricanteEstrangeiro ) ; @net.vidageek.fluid.annotations.FluidField ( " vDescDI " ) Adicao < T > withValorDeDescontoDoItemDaDI ( java . math . BigDecimal valorDeDescontoDoItemDaDI ) ; } 
Adicao < T > withCodigoDoFabricanteEstrangeiro ( java . lang . String codigoDoFabricanteEstrangeiro ) ; @net.vidageek.fluid.annotations.FluidField ( " vDescDI " ) Adicao < T > withValorDeDescontoDoItemDaDI ( java . math . BigDecimal valorDeDescontoDoItemDaDI ) ; } 
Adicao < T > withValorDeDescontoDoItemDaDI ( java . math . BigDecimal valorDeDescontoDoItemDaDI ) ; } 
Armamento < T > withTipo ( br . com . caelum . stella . nfe . builder . enums . TipoDeArmamento ipo ) ; @net.vidageek.fluid.annotations.FluidField ( " nSerie " ) Armamento < T > withNumeroDeSerie ( java . lang . Integer numeroDeSerie ) ; @net.vidageek.fluid.annotations.FluidField ( " nCano " ) Armamento < T > withNumeroDeSerieDoCano ( java . lang . Integer numeroDeSerieDoCano ) ; @net.vidageek.fluid.annotations.FluidField ( " descr " ) Armamento < T > withDescricao ( java . lang . String descricao ) ; } 
Armamento < T > withNumeroDeSerie ( java . lang . Integer numeroDeSerie ) ; @net.vidageek.fluid.annotations.FluidField ( " nCano " ) Armamento < T > withNumeroDeSerieDoCano ( java . lang . Integer numeroDeSerieDoCano ) ; @net.vidageek.fluid.annotations.FluidField ( " descr " ) Armamento < T > withDescricao ( java . lang . String descricao ) ; } 
Armamento < T > withNumeroDeSerieDoCano ( java . lang . Integer numeroDeSerieDoCano ) ; @net.vidageek.fluid.annotations.FluidField ( " descr " ) Armamento < T > withDescricao ( java . lang . String descricao ) ; } 
Armamento < T > withDescricao ( java . lang . String descricao ) ; } 
Avulsa < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; @net.vidageek.fluid.annotations.FluidField ( " ndar " ) Avulsa < T > withNumeroDeArrecadacaoDaReceita ( java . lang . String numeroDeArrecadacaoDaReceita ) ; @net.vidageek.fluid.annotations.FluidField ( " dEmi " ) Avulsa < T > withDataDeEmissao ( java . util . Calendar dataDeEmissao ) ; @net.vidageek.fluid.annotations.FluidField ( " vdar " ) Avulsa < T > withValorDoDocumentoDeArrecadacao ( java . math . BigDecimal valorDoDocumentoDeArrecadacao ) ; @net.vidageek.fluid.annotations.FluidField ( " repEmi " ) Avulsa < T > withReparticaoFiscalEmitente ( java . lang . String reparticaoFiscalEmitente ) ; @net.vidageek.fluid.annotations.FluidField ( " dPag " ) Avulsa < T > withDataDePagamento ( java . util . Calendar dataDePagamento ) ; } 
Avulsa < T > withNumeroDeArrecadacaoDaReceita ( java . lang . String numeroDeArrecadacaoDaReceita ) ; @net.vidageek.fluid.annotations.FluidField ( " dEmi " ) Avulsa < T > withDataDeEmissao ( java . util . Calendar dataDeEmissao ) ; @net.vidageek.fluid.annotations.FluidField ( " vdar " ) Avulsa < T > withValorDoDocumentoDeArrecadacao ( java . math . BigDecimal valorDoDocumentoDeArrecadacao ) ; @net.vidageek.fluid.annotations.FluidField ( " repEmi " ) Avulsa < T > withReparticaoFiscalEmitente ( java . lang . String reparticaoFiscalEmitente ) ; @net.vidageek.fluid.annotations.FluidField ( " dPag " ) Avulsa < T > withDataDePagamento ( java . util . Calendar dataDePagamento ) ; } 
Avulsa < T > withDataDeEmissao ( java . util . Calendar dataDeEmissao ) ; @net.vidageek.fluid.annotations.FluidField ( " vdar " ) Avulsa < T > withValorDoDocumentoDeArrecadacao ( java . math . BigDecimal valorDoDocumentoDeArrecadacao ) ; @net.vidageek.fluid.annotations.FluidField ( " repEmi " ) Avulsa < T > withReparticaoFiscalEmitente ( java . lang . String reparticaoFiscalEmitente ) ; @net.vidageek.fluid.annotations.FluidField ( " dPag " ) Avulsa < T > withDataDePagamento ( java . util . Calendar dataDePagamento ) ; } 
Avulsa < T > withValorDoDocumentoDeArrecadacao ( java . math . BigDecimal valorDoDocumentoDeArrecadacao ) ; @net.vidageek.fluid.annotations.FluidField ( " repEmi " ) Avulsa < T > withReparticaoFiscalEmitente ( java . lang . String reparticaoFiscalEmitente ) ; @net.vidageek.fluid.annotations.FluidField ( " dPag " ) Avulsa < T > withDataDePagamento ( java . util . Calendar dataDePagamento ) ; } 
Avulsa < T > withReparticaoFiscalEmitente ( java . lang . String reparticaoFiscalEmitente ) ; @net.vidageek.fluid.annotations.FluidField ( " dPag " ) Avulsa < T > withDataDePagamento ( java . util . Calendar dataDePagamento ) ; } 
Avulsa < T > withDataDePagamento ( java . util . Calendar dataDePagamento ) ; } 
CIDESobreCombustiveis < T > withBaseDeCalculo ( java . math . BigDecimal baseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " vAliqProd " ) CIDESobreCombustiveis < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " vcide " ) CIDESobreCombustiveis < T > withValor ( java . math . BigDecimal valor ) ; } 
CIDESobreCombustiveis < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " vcide " ) CIDESobreCombustiveis < T > withValor ( java . math . BigDecimal valor ) ; } 
CIDESobreCombustiveis < T > withValor ( java . math . BigDecimal valor ) ; } 
COFINSTributadoPelaAliquota < COFINS < T > > withTributacaoPelaAliquota ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofinsQtde " ) COFINSTributadoPelaQuantidade < COFINS < T > > withTributacaoPelaQuantidade ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofinsnt " ) COFINSNaoTributado < COFINS < T > > withNaoTributado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofinsOutr " ) COFINSOutrasOperacoes < COFINS < T > > withTributacaoDeOutrasOperacoes ( ) ; } 
COFINSTributadoPelaQuantidade < COFINS < T > > withTributacaoPelaQuantidade ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofinsnt " ) COFINSNaoTributado < COFINS < T > > withNaoTributado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofinsOutr " ) COFINSOutrasOperacoes < COFINS < T > > withTributacaoDeOutrasOperacoes ( ) ; } 
COFINSNaoTributado < COFINS < T > > withNaoTributado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofinsOutr " ) COFINSOutrasOperacoes < COFINS < T > > withTributacaoDeOutrasOperacoes ( ) ; } 
COFINSOutrasOperacoes < COFINS < T > > withTributacaoDeOutrasOperacoes ( ) ; } 
COFINSNaoTributado < T > withCodigoSituacaoTributaria ( java . lang . String codigoSituacaoTributaria ) ; } 
COFINSOutrasOperacoes < T > withValorDaBaseDeCalculo ( java . math . BigDecimal valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaEmPercentual " ) COFINSOutrasOperacoes < T > withAliquotaEmPercentual ( java . math . BigDecimal aliquotaEmPercentual ) ; @net.vidageek.fluid.annotations.FluidField ( " quantidadeVendida " ) COFINSOutrasOperacoes < T > withQuantidadeVendida ( java . lang . String quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) COFINSOutrasOperacoes < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSOutrasOperacoes < T > withValor ( java . lang . String valor ) ; } 
COFINSOutrasOperacoes < T > withAliquotaEmPercentual ( java . math . BigDecimal aliquotaEmPercentual ) ; @net.vidageek.fluid.annotations.FluidField ( " quantidadeVendida " ) COFINSOutrasOperacoes < T > withQuantidadeVendida ( java . lang . String quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) COFINSOutrasOperacoes < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSOutrasOperacoes < T > withValor ( java . lang . String valor ) ; } 
COFINSOutrasOperacoes < T > withQuantidadeVendida ( java . lang . String quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) COFINSOutrasOperacoes < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSOutrasOperacoes < T > withValor ( java . lang . String valor ) ; } 
COFINSOutrasOperacoes < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSOutrasOperacoes < T > withValor ( java . lang . String valor ) ; } 
COFINSOutrasOperacoes < T > withValor ( java . lang . String valor ) ; } 
COFINSSubstituicaoTributaria < T > withValorDaBaseDeCalculo ( java . math . BigDecimal valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaEmPercentual " ) COFINSSubstituicaoTributaria < T > withAliquotaEmPercentual ( java . math . BigDecimal aliquotaEmPercentual ) ; @net.vidageek.fluid.annotations.FluidField ( " quantidadeVendida " ) COFINSSubstituicaoTributaria < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) COFINSSubstituicaoTributaria < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSSubstituicaoTributaria < T > withValor ( java . math . BigDecimal valor ) ; } 
COFINSSubstituicaoTributaria < T > withAliquotaEmPercentual ( java . math . BigDecimal aliquotaEmPercentual ) ; @net.vidageek.fluid.annotations.FluidField ( " quantidadeVendida " ) COFINSSubstituicaoTributaria < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) COFINSSubstituicaoTributaria < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSSubstituicaoTributaria < T > withValor ( java . math . BigDecimal valor ) ; } 
COFINSSubstituicaoTributaria < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) COFINSSubstituicaoTributaria < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSSubstituicaoTributaria < T > withValor ( java . math . BigDecimal valor ) ; } 
COFINSSubstituicaoTributaria < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSSubstituicaoTributaria < T > withValor ( java . math . BigDecimal valor ) ; } 
COFINSSubstituicaoTributaria < T > withValor ( java . math . BigDecimal valor ) ; } 
COFINSTributadoPelaAliquota < T > withCodigoSituacaoTributaria ( java . lang . String codigoSituacaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculo " ) COFINSTributadoPelaAliquota < T > withValorDaBaseDeCalculo ( java . math . BigDecimal valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaEmPercentual " ) COFINSTributadoPelaAliquota < T > withAliquotaEmPercentual ( java . math . BigDecimal aliquotaEmPercentual ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSTributadoPelaAliquota < T > withValor ( java . lang . String valor ) ; } 
COFINSTributadoPelaAliquota < T > withValorDaBaseDeCalculo ( java . math . BigDecimal valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaEmPercentual " ) COFINSTributadoPelaAliquota < T > withAliquotaEmPercentual ( java . math . BigDecimal aliquotaEmPercentual ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSTributadoPelaAliquota < T > withValor ( java . lang . String valor ) ; } 
COFINSTributadoPelaAliquota < T > withAliquotaEmPercentual ( java . math . BigDecimal aliquotaEmPercentual ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSTributadoPelaAliquota < T > withValor ( java . lang . String valor ) ; } 
COFINSTributadoPelaAliquota < T > withValor ( java . lang . String valor ) ; } 
COFINSTributadoPelaQuantidade < T > withCodigoSituacaoTributaria ( java . lang . String codigoSituacaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " quantidadeVendida " ) COFINSTributadoPelaQuantidade < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) COFINSTributadoPelaQuantidade < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSTributadoPelaQuantidade < T > withValor ( java . math . BigDecimal valor ) ; } 
COFINSTributadoPelaQuantidade < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) COFINSTributadoPelaQuantidade < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSTributadoPelaQuantidade < T > withValor ( java . math . BigDecimal valor ) ; } 
COFINSTributadoPelaQuantidade < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) COFINSTributadoPelaQuantidade < T > withValor ( java . math . BigDecimal valor ) ; } 
COFINSTributadoPelaQuantidade < T > withValor ( java . math . BigDecimal valor ) ; } 
Cabecalho < T > withVersaoDados ( java . lang . String versaoDados ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) Cabecalho < T > withVersao ( java . lang . String versao ) ; } 
CanonicalizationMethod < T > withAlgorithm ( java . lang . String algorithm ) ; } 
Fatura < Cobranca < T > > withFatura ( ) ; @net.vidageek.fluid.annotations.FluidField ( " dup " ) Cobranca < T > addDuplicata ( ) ; } 
Combustivel < T > withCodigoDeAutorizacaoOuRegistroDoCODIF ( java . math . BigInteger codigoDeAutorizacaoOuRegistroDoCODIF ) ; @net.vidageek.fluid.annotations.FluidField ( " qTemp " ) Combustivel < T > withQuantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ( java . math . BigDecimal quantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ) ; @net.vidageek.fluid.annotations.FluidField ( " cide " ) CIDESobreCombustiveis < Combustivel < T > > withCIDE ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icmsComb " ) ICMSSobreCombustiveis < Combustivel < T > > withICMS ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icmsInter " ) ICMSSobreOperacoesInterestaduais < Combustivel < T > > withICMSSobreOperacoesInterestaduais ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icmsCons " ) ICMSSobreConsumo < Combustivel < T > > withICMSSobreConsumo ( ) ; } 
Combustivel < T > withQuantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ( java . math . BigDecimal quantidadeDeCombustivelFaturadaNaTemperaturaAmbiente ) ; @net.vidageek.fluid.annotations.FluidField ( " cide " ) CIDESobreCombustiveis < Combustivel < T > > withCIDE ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icmsComb " ) ICMSSobreCombustiveis < Combustivel < T > > withICMS ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icmsInter " ) ICMSSobreOperacoesInterestaduais < Combustivel < T > > withICMSSobreOperacoesInterestaduais ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icmsCons " ) ICMSSobreConsumo < Combustivel < T > > withICMSSobreConsumo ( ) ; } 
CIDESobreCombustiveis < Combustivel < T > > withCIDE ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icmsComb " ) ICMSSobreCombustiveis < Combustivel < T > > withICMS ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icmsInter " ) ICMSSobreOperacoesInterestaduais < Combustivel < T > > withICMSSobreOperacoesInterestaduais ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icmsCons " ) ICMSSobreConsumo < Combustivel < T > > withICMSSobreConsumo ( ) ; } 
ICMSSobreCombustiveis < Combustivel < T > > withICMS ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icmsInter " ) ICMSSobreOperacoesInterestaduais < Combustivel < T > > withICMSSobreOperacoesInterestaduais ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icmsCons " ) ICMSSobreConsumo < Combustivel < T > > withICMSSobreConsumo ( ) ; } 
ICMSSobreOperacoesInterestaduais < Combustivel < T > > withICMSSobreOperacoesInterestaduais ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icmsCons " ) ICMSSobreConsumo < Combustivel < T > > withICMSSobreConsumo ( ) ; } 
ICMSSobreConsumo < Combustivel < T > > withICMSSobreConsumo ( ) ; } 
Compra < T > withInformacoesDaNotaDeEmpenhoDeComprasPublicas ( java . lang . String informacoesDaNotaDeEmpenhoDeComprasPublicas ) ; @net.vidageek.fluid.annotations.FluidField ( " xPed " ) Compra < T > withInformacaoDoPedido ( java . lang . String informacaoDoPedido ) ; @net.vidageek.fluid.annotations.FluidField ( " xCont " ) Compra < T > withInformacaoDoContrato ( java . lang . String informacaoDoContrato ) ; } 
Compra < T > withInformacaoDoPedido ( java . lang . String informacaoDoPedido ) ; @net.vidageek.fluid.annotations.FluidField ( " xCont " ) Compra < T > withInformacaoDoContrato ( java . lang . String informacaoDoContrato ) ; } 
Compra < T > withInformacaoDoContrato ( java . lang . String informacaoDoContrato ) ; } 
DFe < T > withMod ( java . lang . String mod ) ; @net.vidageek.fluid.annotations.FluidField ( " sit " ) DFe < T > withSit ( java . lang . String sit ) ; } 
DadosDoLocal < T > withLogradouro ( java . lang . String logradouro ) ; @net.vidageek.fluid.annotations.FluidField ( " nro " ) DadosDoLocal < T > withNumero ( java . lang . String numero ) ; @net.vidageek.fluid.annotations.FluidField ( " xCpl " ) DadosDoLocal < T > withComplemento ( java . lang . String complemento ) ; @net.vidageek.fluid.annotations.FluidField ( " xBairro " ) DadosDoLocal < T > withBairro ( java . lang . String bairro ) ; @net.vidageek.fluid.annotations.FluidField ( " cMun " ) DadosDoLocal < T > withCodigoDoMunicipio ( java . lang . String codigoDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " xMun " ) DadosDoLocal < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) DadosDoLocal < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
DadosDoLocal < T > withNumero ( java . lang . String numero ) ; @net.vidageek.fluid.annotations.FluidField ( " xCpl " ) DadosDoLocal < T > withComplemento ( java . lang . String complemento ) ; @net.vidageek.fluid.annotations.FluidField ( " xBairro " ) DadosDoLocal < T > withBairro ( java . lang . String bairro ) ; @net.vidageek.fluid.annotations.FluidField ( " cMun " ) DadosDoLocal < T > withCodigoDoMunicipio ( java . lang . String codigoDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " xMun " ) DadosDoLocal < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) DadosDoLocal < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
DadosDoLocal < T > withComplemento ( java . lang . String complemento ) ; @net.vidageek.fluid.annotations.FluidField ( " xBairro " ) DadosDoLocal < T > withBairro ( java . lang . String bairro ) ; @net.vidageek.fluid.annotations.FluidField ( " cMun " ) DadosDoLocal < T > withCodigoDoMunicipio ( java . lang . String codigoDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " xMun " ) DadosDoLocal < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) DadosDoLocal < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
DadosDoLocal < T > withBairro ( java . lang . String bairro ) ; @net.vidageek.fluid.annotations.FluidField ( " cMun " ) DadosDoLocal < T > withCodigoDoMunicipio ( java . lang . String codigoDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " xMun " ) DadosDoLocal < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) DadosDoLocal < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
DadosDoLocal < T > withCodigoDoMunicipio ( java . lang . String codigoDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " xMun " ) DadosDoLocal < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) DadosDoLocal < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
DadosDoLocal < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) DadosDoLocal < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
DadosDoLocal < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
DeclaracaoDeImportacao < T > withDataDaDeclaracaoDeImportacao ( java . util . Calendar dataDaDeclaracaoDeImportacao ) ; @net.vidageek.fluid.annotations.FluidField ( " xLocDesemb " ) DeclaracaoDeImportacao < T > withLocalDeDesenbaraco ( java . lang . String localDeDesenbaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " ufDesemb " ) DeclaracaoDeImportacao < T > withUFDoDesembaraco ( br . com . caelum . stella . nfe . modelo . UF UFDoDesembaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " dDesemb " ) DeclaracaoDeImportacao < T > withDataDoDeembaraco ( java . util . Calendar dataDoDeembaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " cExportador " ) DeclaracaoDeImportacao < T > withCodigoDoExportador ( java . lang . String codigoDoExportador ) ; @net.vidageek.fluid.annotations.FluidField ( " adi " ) DeclaracaoDeImportacao < T > addAdicao ( ) ; } 
DeclaracaoDeImportacao < T > withLocalDeDesenbaraco ( java . lang . String localDeDesenbaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " ufDesemb " ) DeclaracaoDeImportacao < T > withUFDoDesembaraco ( br . com . caelum . stella . nfe . modelo . UF UFDoDesembaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " dDesemb " ) DeclaracaoDeImportacao < T > withDataDoDeembaraco ( java . util . Calendar dataDoDeembaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " cExportador " ) DeclaracaoDeImportacao < T > withCodigoDoExportador ( java . lang . String codigoDoExportador ) ; @net.vidageek.fluid.annotations.FluidField ( " adi " ) DeclaracaoDeImportacao < T > addAdicao ( ) ; } 
DeclaracaoDeImportacao < T > withUFDoDesembaraco ( br . com . caelum . stella . nfe . modelo . UF UFDoDesembaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " dDesemb " ) DeclaracaoDeImportacao < T > withDataDoDeembaraco ( java . util . Calendar dataDoDeembaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " cExportador " ) DeclaracaoDeImportacao < T > withCodigoDoExportador ( java . lang . String codigoDoExportador ) ; @net.vidageek.fluid.annotations.FluidField ( " adi " ) DeclaracaoDeImportacao < T > addAdicao ( ) ; } 
DeclaracaoDeImportacao < T > withDataDoDeembaraco ( java . util . Calendar dataDoDeembaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " cExportador " ) DeclaracaoDeImportacao < T > withCodigoDoExportador ( java . lang . String codigoDoExportador ) ; @net.vidageek.fluid.annotations.FluidField ( " adi " ) DeclaracaoDeImportacao < T > addAdicao ( ) ; } 
DeclaracaoDeImportacao < T > withCodigoDoExportador ( java . lang . String codigoDoExportador ) ; @net.vidageek.fluid.annotations.FluidField ( " adi " ) DeclaracaoDeImportacao < T > addAdicao ( ) ; } 
Destinatario < T > withCNPJ ( br . com . caelum . stella . inytype . CNPJ CNPJ ) ; @net.vidageek.fluid.annotations.FluidField ( " cpf " ) Destinatario < T > withCPF ( br . com . caelum . stella . inytype . CPF CPF ) ; @net.vidageek.fluid.annotations.FluidField ( " xNome " ) Destinatario < T > withRazaoSocial ( java . lang . String razaoSocial ) ; @net.vidageek.fluid.annotations.FluidField ( " enderDest " ) Endereco < Destinatario < T > > withEndererecoDoDestinatario ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) Destinatario < T > withInscricaoEstadual ( java . lang . String inscricaoEstadual ) ; @net.vidageek.fluid.annotations.FluidField ( " isuf " ) Destinatario < T > withInscricaoNaSUFRAMA ( java . lang . String inscricaoNaSUFRAMA ) ; } 
Destinatario < T > withCPF ( br . com . caelum . stella . inytype . CPF CPF ) ; @net.vidageek.fluid.annotations.FluidField ( " xNome " ) Destinatario < T > withRazaoSocial ( java . lang . String razaoSocial ) ; @net.vidageek.fluid.annotations.FluidField ( " enderDest " ) Endereco < Destinatario < T > > withEndererecoDoDestinatario ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) Destinatario < T > withInscricaoEstadual ( java . lang . String inscricaoEstadual ) ; @net.vidageek.fluid.annotations.FluidField ( " isuf " ) Destinatario < T > withInscricaoNaSUFRAMA ( java . lang . String inscricaoNaSUFRAMA ) ; } 
Destinatario < T > withRazaoSocial ( java . lang . String razaoSocial ) ; @net.vidageek.fluid.annotations.FluidField ( " enderDest " ) Endereco < Destinatario < T > > withEndererecoDoDestinatario ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) Destinatario < T > withInscricaoEstadual ( java . lang . String inscricaoEstadual ) ; @net.vidageek.fluid.annotations.FluidField ( " isuf " ) Destinatario < T > withInscricaoNaSUFRAMA ( java . lang . String inscricaoNaSUFRAMA ) ; } 
Endereco < Destinatario < T > > withEndererecoDoDestinatario ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) Destinatario < T > withInscricaoEstadual ( java . lang . String inscricaoEstadual ) ; @net.vidageek.fluid.annotations.FluidField ( " isuf " ) Destinatario < T > withInscricaoNaSUFRAMA ( java . lang . String inscricaoNaSUFRAMA ) ; } 
Destinatario < T > withInscricaoEstadual ( java . lang . String inscricaoEstadual ) ; @net.vidageek.fluid.annotations.FluidField ( " isuf " ) Destinatario < T > withInscricaoNaSUFRAMA ( java . lang . String inscricaoNaSUFRAMA ) ; } 
Destinatario < T > withInscricaoNaSUFRAMA ( java . lang . String inscricaoNaSUFRAMA ) ; } 
Produto < Detalhe < T > > withProduto ( ) ; @net.vidageek.fluid.annotations.FluidField ( " imposto " ) Imposto < Detalhe < T > > withImposto ( ) ; @net.vidageek.fluid.annotations.FluidField ( " infAdProd " ) Detalhe < T > withInformacaoAdicionalDoProduto ( java . lang . String informacaoAdicionalDoProduto ) ; @net.vidageek.fluid.annotations.FluidField ( " nItem " ) Detalhe < T > withNumeroDoItemNaNF ( java . lang . String numeroDoItemNaNF ) ; } 
Imposto < Detalhe < T > > withImposto ( ) ; @net.vidageek.fluid.annotations.FluidField ( " infAdProd " ) Detalhe < T > withInformacaoAdicionalDoProduto ( java . lang . String informacaoAdicionalDoProduto ) ; @net.vidageek.fluid.annotations.FluidField ( " nItem " ) Detalhe < T > withNumeroDoItemNaNF ( java . lang . String numeroDoItemNaNF ) ; } 
Detalhe < T > withInformacaoAdicionalDoProduto ( java . lang . String informacaoAdicionalDoProduto ) ; @net.vidageek.fluid.annotations.FluidField ( " nItem " ) Detalhe < T > withNumeroDoItemNaNF ( java . lang . String numeroDoItemNaNF ) ; } 
Detalhe < T > withNumeroDoItemNaNF ( java . lang . String numeroDoItemNaNF ) ; } 
DigestMethod < T > withAlgorithm ( java . lang . String algorithm ) ; } 
Duplicata < T > withNumero ( java . lang . String numero ) ; @net.vidageek.fluid.annotations.FluidField ( " dVenc " ) Duplicata < T > withDataDeVencimento ( java . lang . String dataDeVencimento ) ; @net.vidageek.fluid.annotations.FluidField ( " vDup " ) Duplicata < T > withValorDaDuplicata ( java . lang . String valorDaDuplicata ) ; } 
Duplicata < T > withDataDeVencimento ( java . lang . String dataDeVencimento ) ; @net.vidageek.fluid.annotations.FluidField ( " vDup " ) Duplicata < T > withValorDaDuplicata ( java . lang . String valorDaDuplicata ) ; } 
Duplicata < T > withValorDaDuplicata ( java . lang . String valorDaDuplicata ) ; } 
Emitente < T > withNomeFantasia ( java . lang . String nomeFantasia ) ; @net.vidageek.fluid.annotations.FluidField ( " enderEmit " ) Endereco < Emitente < T > > withEnderecoDoEmitente ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) Emitente < T > withInscricaoEstadual ( java . lang . String inscricaoEstadual ) ; @net.vidageek.fluid.annotations.FluidField ( " iest " ) Emitente < T > withInscricaoEstadualDoSubstitutoTributario ( java . lang . String inscricaoEstadualDoSubstitutoTributario ) ; @net.vidageek.fluid.annotations.FluidField ( " im " ) Emitente < T > withInscricaoMunicipal ( java . lang . String inscricaoMunicipal ) ; @net.vidageek.fluid.annotations.FluidField ( " cnae " ) Emitente < T > withCNAEFiscal ( java . lang . String CNAEFiscal ) ; } 
Endereco < Emitente < T > > withEnderecoDoEmitente ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) Emitente < T > withInscricaoEstadual ( java . lang . String inscricaoEstadual ) ; @net.vidageek.fluid.annotations.FluidField ( " iest " ) Emitente < T > withInscricaoEstadualDoSubstitutoTributario ( java . lang . String inscricaoEstadualDoSubstitutoTributario ) ; @net.vidageek.fluid.annotations.FluidField ( " im " ) Emitente < T > withInscricaoMunicipal ( java . lang . String inscricaoMunicipal ) ; @net.vidageek.fluid.annotations.FluidField ( " cnae " ) Emitente < T > withCNAEFiscal ( java . lang . String CNAEFiscal ) ; } 
Emitente < T > withInscricaoEstadual ( java . lang . String inscricaoEstadual ) ; @net.vidageek.fluid.annotations.FluidField ( " iest " ) Emitente < T > withInscricaoEstadualDoSubstitutoTributario ( java . lang . String inscricaoEstadualDoSubstitutoTributario ) ; @net.vidageek.fluid.annotations.FluidField ( " im " ) Emitente < T > withInscricaoMunicipal ( java . lang . String inscricaoMunicipal ) ; @net.vidageek.fluid.annotations.FluidField ( " cnae " ) Emitente < T > withCNAEFiscal ( java . lang . String CNAEFiscal ) ; } 
Emitente < T > withInscricaoEstadualDoSubstitutoTributario ( java . lang . String inscricaoEstadualDoSubstitutoTributario ) ; @net.vidageek.fluid.annotations.FluidField ( " im " ) Emitente < T > withInscricaoMunicipal ( java . lang . String inscricaoMunicipal ) ; @net.vidageek.fluid.annotations.FluidField ( " cnae " ) Emitente < T > withCNAEFiscal ( java . lang . String CNAEFiscal ) ; } 
Emitente < T > withInscricaoMunicipal ( java . lang . String inscricaoMunicipal ) ; @net.vidageek.fluid.annotations.FluidField ( " cnae " ) Emitente < T > withCNAEFiscal ( java . lang . String CNAEFiscal ) ; } 
Emitente < T > withCNAEFiscal ( java . lang . String CNAEFiscal ) ; } 
Endereco < T > withCodigoDoMunicipio ( java . lang . String codigoDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " xMun " ) Endereco < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) Endereco < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; @net.vidageek.fluid.annotations.FluidField ( " cep " ) Endereco < T > withCEP ( java . lang . String CEP ) ; @net.vidageek.fluid.annotations.FluidField ( " cPais " ) Endereco < T > withCodigoDoPais ( java . lang . String codigoDoPais ) ; @net.vidageek.fluid.annotations.FluidField ( " xPais " ) Endereco < T > withNomeDoPais ( java . lang . String nomeDoPais ) ; @net.vidageek.fluid.annotations.FluidField ( " fone " ) Endereco < T > withTelefone ( java . lang . String elefone ) ; } 
Endereco < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) Endereco < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; @net.vidageek.fluid.annotations.FluidField ( " cep " ) Endereco < T > withCEP ( java . lang . String CEP ) ; @net.vidageek.fluid.annotations.FluidField ( " cPais " ) Endereco < T > withCodigoDoPais ( java . lang . String codigoDoPais ) ; @net.vidageek.fluid.annotations.FluidField ( " xPais " ) Endereco < T > withNomeDoPais ( java . lang . String nomeDoPais ) ; @net.vidageek.fluid.annotations.FluidField ( " fone " ) Endereco < T > withTelefone ( java . lang . String elefone ) ; } 
Endereco < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; @net.vidageek.fluid.annotations.FluidField ( " cep " ) Endereco < T > withCEP ( java . lang . String CEP ) ; @net.vidageek.fluid.annotations.FluidField ( " cPais " ) Endereco < T > withCodigoDoPais ( java . lang . String codigoDoPais ) ; @net.vidageek.fluid.annotations.FluidField ( " xPais " ) Endereco < T > withNomeDoPais ( java . lang . String nomeDoPais ) ; @net.vidageek.fluid.annotations.FluidField ( " fone " ) Endereco < T > withTelefone ( java . lang . String elefone ) ; } 
Endereco < T > withCEP ( java . lang . String CEP ) ; @net.vidageek.fluid.annotations.FluidField ( " cPais " ) Endereco < T > withCodigoDoPais ( java . lang . String codigoDoPais ) ; @net.vidageek.fluid.annotations.FluidField ( " xPais " ) Endereco < T > withNomeDoPais ( java . lang . String nomeDoPais ) ; @net.vidageek.fluid.annotations.FluidField ( " fone " ) Endereco < T > withTelefone ( java . lang . String elefone ) ; } 
Endereco < T > withCodigoDoPais ( java . lang . String codigoDoPais ) ; @net.vidageek.fluid.annotations.FluidField ( " xPais " ) Endereco < T > withNomeDoPais ( java . lang . String nomeDoPais ) ; @net.vidageek.fluid.annotations.FluidField ( " fone " ) Endereco < T > withTelefone ( java . lang . String elefone ) ; } 
Endereco < T > withNomeDoPais ( java . lang . String nomeDoPais ) ; @net.vidageek.fluid.annotations.FluidField ( " fone " ) Endereco < T > withTelefone ( java . lang . String elefone ) ; } 
Endereco < T > withTelefone ( java . lang . String elefone ) ; } 
Exclui < T > withUF ( br . com . caelum . stella . nfe . modelo . TUf UF ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) Exclui < T > withCNPJ ( br . com . caelum . stella . inytype . CNPJ CNPJ ) ; } 
Exclui < T > withCNPJ ( br . com . caelum . stella . inytype . CNPJ CNPJ ) ; } 
Exportacao < T > withUFDoEmbarque ( br . com . caelum . stella . nfe . modelo . UF UFDoEmbarque ) ; @net.vidageek.fluid.annotations.FluidField ( " xLocEmbarq " ) Exportacao < T > withLocalDoEmbarque ( java . lang . String localDoEmbarque ) ; } 
Exportacao < T > withLocalDoEmbarque ( java . lang . String localDoEmbarque ) ; } 
Fatura < T > withNumeroDaFatura ( java . lang . String numeroDaFatura ) ; @net.vidageek.fluid.annotations.FluidField ( " vOrig " ) Fatura < T > withValorOriginal ( java . math . BigDecimal valorOriginal ) ; @net.vidageek.fluid.annotations.FluidField ( " vDesc " ) Fatura < T > withValorDeDesconto ( java . math . BigDecimal valorDeDesconto ) ; @net.vidageek.fluid.annotations.FluidField ( " vLiq " ) Fatura < T > withValorLiquido ( java . math . BigDecimal valorLiquido ) ; } 
Fatura < T > withValorOriginal ( java . math . BigDecimal valorOriginal ) ; @net.vidageek.fluid.annotations.FluidField ( " vDesc " ) Fatura < T > withValorDeDesconto ( java . math . BigDecimal valorDeDesconto ) ; @net.vidageek.fluid.annotations.FluidField ( " vLiq " ) Fatura < T > withValorLiquido ( java . math . BigDecimal valorLiquido ) ; } 
Fatura < T > withValorDeDesconto ( java . math . BigDecimal valorDeDesconto ) ; @net.vidageek.fluid.annotations.FluidField ( " vLiq " ) Fatura < T > withValorLiquido ( java . math . BigDecimal valorLiquido ) ; } 
Fatura < T > withValorLiquido ( java . math . BigDecimal valorLiquido ) ; } 
ICMS00 < ICMS < T > > withIcms00 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms10 " ) ICMS10 < ICMS < T > > withIcms10 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms20 " ) ICMS20 < ICMS < T > > withIcms20 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms30 " ) ICMS30 < ICMS < T > > withIcms30 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms40 " ) ICMS40 < ICMS < T > > withIcms40 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms51 " ) ICMS51 < ICMS < T > > withIcms51 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms60 " ) ICMS60 < ICMS < T > > withIcms60 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms70 " ) ICMS70 < ICMS < T > > withIcms70 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms90 " ) ICMS90 < ICMS < T > > withIcms90 ( ) ; } 
ICMS10 < ICMS < T > > withIcms10 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms20 " ) ICMS20 < ICMS < T > > withIcms20 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms30 " ) ICMS30 < ICMS < T > > withIcms30 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms40 " ) ICMS40 < ICMS < T > > withIcms40 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms51 " ) ICMS51 < ICMS < T > > withIcms51 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms60 " ) ICMS60 < ICMS < T > > withIcms60 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms70 " ) ICMS70 < ICMS < T > > withIcms70 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms90 " ) ICMS90 < ICMS < T > > withIcms90 ( ) ; } 
ICMS20 < ICMS < T > > withIcms20 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms30 " ) ICMS30 < ICMS < T > > withIcms30 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms40 " ) ICMS40 < ICMS < T > > withIcms40 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms51 " ) ICMS51 < ICMS < T > > withIcms51 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms60 " ) ICMS60 < ICMS < T > > withIcms60 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms70 " ) ICMS70 < ICMS < T > > withIcms70 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms90 " ) ICMS90 < ICMS < T > > withIcms90 ( ) ; } 
ICMS30 < ICMS < T > > withIcms30 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms40 " ) ICMS40 < ICMS < T > > withIcms40 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms51 " ) ICMS51 < ICMS < T > > withIcms51 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms60 " ) ICMS60 < ICMS < T > > withIcms60 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms70 " ) ICMS70 < ICMS < T > > withIcms70 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms90 " ) ICMS90 < ICMS < T > > withIcms90 ( ) ; } 
ICMS40 < ICMS < T > > withIcms40 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms51 " ) ICMS51 < ICMS < T > > withIcms51 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms60 " ) ICMS60 < ICMS < T > > withIcms60 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms70 " ) ICMS70 < ICMS < T > > withIcms70 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms90 " ) ICMS90 < ICMS < T > > withIcms90 ( ) ; } 
ICMS51 < ICMS < T > > withIcms51 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms60 " ) ICMS60 < ICMS < T > > withIcms60 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms70 " ) ICMS70 < ICMS < T > > withIcms70 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms90 " ) ICMS90 < ICMS < T > > withIcms90 ( ) ; } 
ICMS60 < ICMS < T > > withIcms60 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms70 " ) ICMS70 < ICMS < T > > withIcms70 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms90 " ) ICMS90 < ICMS < T > > withIcms90 ( ) ; } 
ICMS70 < ICMS < T > > withIcms70 ( ) ; @net.vidageek.fluid.annotations.FluidField ( " icms90 " ) ICMS90 < ICMS < T > > withIcms90 ( ) ; } 
ICMS00 < T > withOrigem ( java . lang . String origem ) ; @net.vidageek.fluid.annotations.FluidField ( " ipoTributacao " ) ICMS00 < T > withTipoTributacao ( java . lang . String ipoTributacao ) ; @net.vidageek.fluid.annotations.FluidField ( " modalidadeBaseCalculo " ) ICMS00 < T > withModalidadeBaseCalculo ( java . lang . String modalidadeBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculo " ) ICMS00 < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ICMS00 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS00 < T > withValor ( java . lang . String valor ) ; } 
ICMS00 < T > withTipoTributacao ( java . lang . String ipoTributacao ) ; @net.vidageek.fluid.annotations.FluidField ( " modalidadeBaseCalculo " ) ICMS00 < T > withModalidadeBaseCalculo ( java . lang . String modalidadeBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculo " ) ICMS00 < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ICMS00 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS00 < T > withValor ( java . lang . String valor ) ; } 
ICMS00 < T > withModalidadeBaseCalculo ( java . lang . String modalidadeBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculo " ) ICMS00 < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ICMS00 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS00 < T > withValor ( java . lang . String valor ) ; } 
ICMS00 < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ICMS00 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS00 < T > withValor ( java . lang . String valor ) ; } 
ICMS00 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS00 < T > withValor ( java . lang . String valor ) ; } 
ICMS10 < T > withPercentualReducaoBaseCalculo ( java . lang . String percentualReducaoBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculoSubstituicaoTributaria " ) ICMS10 < T > withValorDaBaseDeCalculoSubstituicaoTributaria ( java . lang . String valorDaBaseDeCalculoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaSubstituicaoTributaria " ) ICMS10 < T > withAliquotaSubstituicaoTributaria ( java . lang . String aliquotaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS10 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS10 < T > withValorDaBaseDeCalculoSubstituicaoTributaria ( java . lang . String valorDaBaseDeCalculoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaSubstituicaoTributaria " ) ICMS10 < T > withAliquotaSubstituicaoTributaria ( java . lang . String aliquotaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS10 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS10 < T > withAliquotaSubstituicaoTributaria ( java . lang . String aliquotaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS10 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS10 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS20 < T > withTipoTributacao ( java . lang . String ipoTributacao ) ; @net.vidageek.fluid.annotations.FluidField ( " modalidadeBaseCalculo " ) ICMS20 < T > withModalidadeBaseCalculo ( java . lang . String modalidadeBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " percentualReducaoBaseCalculo " ) ICMS20 < T > withPercentualReducaoBaseCalculo ( java . lang . String percentualReducaoBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculo " ) ICMS20 < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ICMS20 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS20 < T > withValor ( java . lang . String valor ) ; } 
ICMS20 < T > withModalidadeBaseCalculo ( java . lang . String modalidadeBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " percentualReducaoBaseCalculo " ) ICMS20 < T > withPercentualReducaoBaseCalculo ( java . lang . String percentualReducaoBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculo " ) ICMS20 < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ICMS20 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS20 < T > withValor ( java . lang . String valor ) ; } 
ICMS20 < T > withPercentualReducaoBaseCalculo ( java . lang . String percentualReducaoBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculo " ) ICMS20 < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ICMS20 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS20 < T > withValor ( java . lang . String valor ) ; } 
ICMS20 < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ICMS20 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS20 < T > withValor ( java . lang . String valor ) ; } 
ICMS20 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS20 < T > withValor ( java . lang . String valor ) ; } 
ICMS30 < T > withPercentualReducaoSubstituicaoTributaria ( java . lang . String percentualReducaoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculoSubstituicaoTributaria " ) ICMS30 < T > withValorDaBaseDeCalculoSubstituicaoTributaria ( java . lang . String valorDaBaseDeCalculoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaSubstituicaoTributaria " ) ICMS30 < T > withAliquotaSubstituicaoTributaria ( java . lang . String aliquotaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS30 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS30 < T > withValorDaBaseDeCalculoSubstituicaoTributaria ( java . lang . String valorDaBaseDeCalculoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaSubstituicaoTributaria " ) ICMS30 < T > withAliquotaSubstituicaoTributaria ( java . lang . String aliquotaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS30 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS30 < T > withAliquotaSubstituicaoTributaria ( java . lang . String aliquotaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS30 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS30 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS40 < T > withOrigem ( java . lang . String origem ) ; @net.vidageek.fluid.annotations.FluidField ( " ipoTributacao " ) ICMS40 < T > withTipoTributacao ( java . lang . String ipoTributacao ) ; } 
ICMS40 < T > withTipoTributacao ( java . lang . String ipoTributacao ) ; } 
ICMS51 < T > withTipoTributacao ( java . lang . String ipoTributacao ) ; @net.vidageek.fluid.annotations.FluidField ( " modalidadeBaseCalculo " ) ICMS51 < T > withModalidadeBaseCalculo ( java . lang . String modalidadeBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " percentualReducaoBaseCalculo " ) ICMS51 < T > withPercentualReducaoBaseCalculo ( java . lang . String percentualReducaoBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculo " ) ICMS51 < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ICMS51 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS51 < T > withValor ( java . lang . String valor ) ; } 
ICMS51 < T > withModalidadeBaseCalculo ( java . lang . String modalidadeBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " percentualReducaoBaseCalculo " ) ICMS51 < T > withPercentualReducaoBaseCalculo ( java . lang . String percentualReducaoBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculo " ) ICMS51 < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ICMS51 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS51 < T > withValor ( java . lang . String valor ) ; } 
ICMS51 < T > withPercentualReducaoBaseCalculo ( java . lang . String percentualReducaoBaseCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculo " ) ICMS51 < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ICMS51 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS51 < T > withValor ( java . lang . String valor ) ; } 
ICMS51 < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ICMS51 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS51 < T > withValor ( java . lang . String valor ) ; } 
ICMS51 < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valor " ) ICMS51 < T > withValor ( java . lang . String valor ) ; } 
ICMS60 < T > withOrigem ( java . lang . String origem ) ; @net.vidageek.fluid.annotations.FluidField ( " ipoTributacao " ) ICMS60 < T > withTipoTributacao ( java . lang . String ipoTributacao ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculoSubstituicaoTributaria " ) ICMS60 < T > withValorDaBaseDeCalculoSubstituicaoTributaria ( java . lang . String valorDaBaseDeCalculoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS60 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS60 < T > withTipoTributacao ( java . lang . String ipoTributacao ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculoSubstituicaoTributaria " ) ICMS60 < T > withValorDaBaseDeCalculoSubstituicaoTributaria ( java . lang . String valorDaBaseDeCalculoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS60 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS60 < T > withValorDaBaseDeCalculoSubstituicaoTributaria ( java . lang . String valorDaBaseDeCalculoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS60 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS60 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS70 < T > withPercentualReducaoSubstituicaoTributaria ( java . lang . String percentualReducaoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculoSubstituicaoTributaria " ) ICMS70 < T > withValorDaBaseDeCalculoSubstituicaoTributaria ( java . lang . String valorDaBaseDeCalculoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaSubstituicaoTributaria " ) ICMS70 < T > withAliquotaSubstituicaoTributaria ( java . lang . String aliquotaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS70 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS70 < T > withValorDaBaseDeCalculoSubstituicaoTributaria ( java . lang . String valorDaBaseDeCalculoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaSubstituicaoTributaria " ) ICMS70 < T > withAliquotaSubstituicaoTributaria ( java . lang . String aliquotaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS70 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS70 < T > withAliquotaSubstituicaoTributaria ( java . lang . String aliquotaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS70 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS70 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS90 < T > withPercentualReducaoSubstituicaoTributaria ( java . lang . String percentualReducaoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculoSubstituicaoTributaria " ) ICMS90 < T > withValorDaBaseDeCalculoSubstituicaoTributaria ( java . lang . String valorDaBaseDeCalculoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaSubstituicaoTributaria " ) ICMS90 < T > withAliquotaSubstituicaoTributaria ( java . lang . String aliquotaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS90 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS90 < T > withValorDaBaseDeCalculoSubstituicaoTributaria ( java . lang . String valorDaBaseDeCalculoSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaSubstituicaoTributaria " ) ICMS90 < T > withAliquotaSubstituicaoTributaria ( java . lang . String aliquotaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS90 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS90 < T > withAliquotaSubstituicaoTributaria ( java . lang . String aliquotaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorSubstituicaoTributaria " ) ICMS90 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMS90 < T > withValorSubstituicaoTributaria ( java . lang . String valorSubstituicaoTributaria ) ; } 
ICMSRetidoPeloTransporte < T > withValorDaBaseDeCalculoDeRetencaoDoICMS ( java . math . BigDecimal valorDaBaseDeCalculoDeRetencaoDoICMS ) ; @net.vidageek.fluid.annotations.FluidField ( " picmsRet " ) ICMSRetidoPeloTransporte < T > withAliquotaDaRetencaoDoICMS ( java . math . BigDecimal aliquotaDaRetencaoDoICMS ) ; @net.vidageek.fluid.annotations.FluidField ( " vicmsRet " ) ICMSRetidoPeloTransporte < T > withValorDoICMSRetido ( java . math . BigDecimal valorDoICMSRetido ) ; @net.vidageek.fluid.annotations.FluidField ( " cfop " ) ICMSRetidoPeloTransporte < T > withCodigoFiscalDeOperacoesEPrestacoes ( java . lang . String codigoFiscalDeOperacoesEPrestacoes ) ; @net.vidageek.fluid.annotations.FluidField ( " cMunFG " ) ICMSRetidoPeloTransporte < T > withCodigoDoMunicipio ( java . lang . String codigoDoMunicipio ) ; } 
ICMSRetidoPeloTransporte < T > withAliquotaDaRetencaoDoICMS ( java . math . BigDecimal aliquotaDaRetencaoDoICMS ) ; @net.vidageek.fluid.annotations.FluidField ( " vicmsRet " ) ICMSRetidoPeloTransporte < T > withValorDoICMSRetido ( java . math . BigDecimal valorDoICMSRetido ) ; @net.vidageek.fluid.annotations.FluidField ( " cfop " ) ICMSRetidoPeloTransporte < T > withCodigoFiscalDeOperacoesEPrestacoes ( java . lang . String codigoFiscalDeOperacoesEPrestacoes ) ; @net.vidageek.fluid.annotations.FluidField ( " cMunFG " ) ICMSRetidoPeloTransporte < T > withCodigoDoMunicipio ( java . lang . String codigoDoMunicipio ) ; } 
ICMSRetidoPeloTransporte < T > withValorDoICMSRetido ( java . math . BigDecimal valorDoICMSRetido ) ; @net.vidageek.fluid.annotations.FluidField ( " cfop " ) ICMSRetidoPeloTransporte < T > withCodigoFiscalDeOperacoesEPrestacoes ( java . lang . String codigoFiscalDeOperacoesEPrestacoes ) ; @net.vidageek.fluid.annotations.FluidField ( " cMunFG " ) ICMSRetidoPeloTransporte < T > withCodigoDoMunicipio ( java . lang . String codigoDoMunicipio ) ; } 
ICMSRetidoPeloTransporte < T > withCodigoFiscalDeOperacoesEPrestacoes ( java . lang . String codigoFiscalDeOperacoesEPrestacoes ) ; @net.vidageek.fluid.annotations.FluidField ( " cMunFG " ) ICMSRetidoPeloTransporte < T > withCodigoDoMunicipio ( java . lang . String codigoDoMunicipio ) ; } 
ICMSRetidoPeloTransporte < T > withCodigoDoMunicipio ( java . lang . String codigoDoMunicipio ) ; } 
ICMSSobreCombustiveis < T > withValorDaBaseDeCalculo ( java . math . BigDecimal valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " vicms " ) ICMSSobreCombustiveis < T > withValor ( java . math . BigDecimal valor ) ; @net.vidageek.fluid.annotations.FluidField ( " vbcicmsst " ) ICMSSobreCombustiveis < T > withValorDaBaseDeCalculoDaSubstituicaoTributaria ( java . math . BigDecimal valorDaBaseDeCalculoDaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " vicmsst " ) ICMSSobreCombustiveis < T > withValorDoICMSDaSubstituicaoTributaria ( java . math . BigDecimal valorDoICMSDaSubstituicaoTributaria ) ; } 
ICMSSobreCombustiveis < T > withValor ( java . math . BigDecimal valor ) ; @net.vidageek.fluid.annotations.FluidField ( " vbcicmsst " ) ICMSSobreCombustiveis < T > withValorDaBaseDeCalculoDaSubstituicaoTributaria ( java . math . BigDecimal valorDaBaseDeCalculoDaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " vicmsst " ) ICMSSobreCombustiveis < T > withValorDoICMSDaSubstituicaoTributaria ( java . math . BigDecimal valorDoICMSDaSubstituicaoTributaria ) ; } 
ICMSSobreCombustiveis < T > withValorDaBaseDeCalculoDaSubstituicaoTributaria ( java . math . BigDecimal valorDaBaseDeCalculoDaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " vicmsst " ) ICMSSobreCombustiveis < T > withValorDoICMSDaSubstituicaoTributaria ( java . math . BigDecimal valorDoICMSDaSubstituicaoTributaria ) ; } 
ICMSSobreCombustiveis < T > withValorDoICMSDaSubstituicaoTributaria ( java . math . BigDecimal valorDoICMSDaSubstituicaoTributaria ) ; } 
ICMSSobreConsumo < T > withValorDaBaseDeCalculoDoICMSDeSubstituicaoTributariaSobreConsumo ( java . math . BigDecimal valorDaBaseDeCalculoDoICMSDeSubstituicaoTributariaSobreConsumo ) ; @net.vidageek.fluid.annotations.FluidField ( " vicmsstCons " ) ICMSSobreConsumo < T > withValorDoICMSSubstituicaoTributariaSobreConsumo ( java . math . BigDecimal valorDoICMSSubstituicaoTributariaSobreConsumo ) ; @net.vidageek.fluid.annotations.FluidField ( " ufCons " ) ICMSSobreConsumo < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
ICMSSobreConsumo < T > withValorDoICMSSubstituicaoTributariaSobreConsumo ( java . math . BigDecimal valorDoICMSSubstituicaoTributariaSobreConsumo ) ; @net.vidageek.fluid.annotations.FluidField ( " ufCons " ) ICMSSobreConsumo < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
ICMSSobreConsumo < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
ICMSSobreOperacoesInterestaduais < T > withValorDaBaseDeCalculoDoICMSSubstituicaoTributariaDoDestino ( java . lang . String valorDaBaseDeCalculoDoICMSSubstituicaoTributariaDoDestino ) ; @net.vidageek.fluid.annotations.FluidField ( " vicmsstDest " ) ICMSSobreOperacoesInterestaduais < T > withValorDoICMSSubstituicaoTributariaDoDestino ( java . lang . String valorDoICMSSubstituicaoTributariaDoDestino ) ; } 
ICMSSobreOperacoesInterestaduais < T > withValorDoICMSSubstituicaoTributariaDoDestino ( java . lang . String valorDoICMSSubstituicaoTributariaDoDestino ) ; } 
ICMSTotal < T > withValorTotalDoII ( java . math . BigDecimal valorTotalDoII ) ; @net.vidageek.fluid.annotations.FluidField ( " vipi " ) ICMSTotal < T > withValorTotalDoIPI ( java . math . BigDecimal valorTotalDoIPI ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) ICMSTotal < T > withValorTotalDoPIS ( java . math . BigDecimal valorTotalDoPIS ) ; @net.vidageek.fluid.annotations.FluidField ( " vcofins " ) ICMSTotal < T > withValor ( java . math . BigDecimal valor ) ; @net.vidageek.fluid.annotations.FluidField ( " vOutro " ) ICMSTotal < T > withValorTotalDeOutrasDespesas ( java . math . BigDecimal valorTotalDeOutrasDespesas ) ; @net.vidageek.fluid.annotations.FluidField ( " vnf " ) ICMSTotal < T > withValorTotalDaNF ( java . math . BigDecimal valorTotalDaNF ) ; } 
ICMSTotal < T > withValorTotalDoIPI ( java . math . BigDecimal valorTotalDoIPI ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) ICMSTotal < T > withValorTotalDoPIS ( java . math . BigDecimal valorTotalDoPIS ) ; @net.vidageek.fluid.annotations.FluidField ( " vcofins " ) ICMSTotal < T > withValor ( java . math . BigDecimal valor ) ; @net.vidageek.fluid.annotations.FluidField ( " vOutro " ) ICMSTotal < T > withValorTotalDeOutrasDespesas ( java . math . BigDecimal valorTotalDeOutrasDespesas ) ; @net.vidageek.fluid.annotations.FluidField ( " vnf " ) ICMSTotal < T > withValorTotalDaNF ( java . math . BigDecimal valorTotalDaNF ) ; } 
ICMSTotal < T > withValorTotalDoPIS ( java . math . BigDecimal valorTotalDoPIS ) ; @net.vidageek.fluid.annotations.FluidField ( " vcofins " ) ICMSTotal < T > withValor ( java . math . BigDecimal valor ) ; @net.vidageek.fluid.annotations.FluidField ( " vOutro " ) ICMSTotal < T > withValorTotalDeOutrasDespesas ( java . math . BigDecimal valorTotalDeOutrasDespesas ) ; @net.vidageek.fluid.annotations.FluidField ( " vnf " ) ICMSTotal < T > withValorTotalDaNF ( java . math . BigDecimal valorTotalDaNF ) ; } 
ICMSTotal < T > withValor ( java . math . BigDecimal valor ) ; @net.vidageek.fluid.annotations.FluidField ( " vOutro " ) ICMSTotal < T > withValorTotalDeOutrasDespesas ( java . math . BigDecimal valorTotalDeOutrasDespesas ) ; @net.vidageek.fluid.annotations.FluidField ( " vnf " ) ICMSTotal < T > withValorTotalDaNF ( java . math . BigDecimal valorTotalDaNF ) ; } 
ICMSTotal < T > withValorTotalDeOutrasDespesas ( java . math . BigDecimal valorTotalDeOutrasDespesas ) ; @net.vidageek.fluid.annotations.FluidField ( " vnf " ) ICMSTotal < T > withValorTotalDaNF ( java . math . BigDecimal valorTotalDaNF ) ; } 
ICMSTotal < T > withValorTotalDaNF ( java . math . BigDecimal valorTotalDaNF ) ; } 
II < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDespesaAduaneira " ) II < T > withValorDespesaAduaneira ( java . lang . String valorDespesaAduaneira ) ; @net.vidageek.fluid.annotations.FluidField ( " valorImpostoImportacao " ) II < T > withValorImpostoImportacao ( java . lang . String valorImpostoImportacao ) ; @net.vidageek.fluid.annotations.FluidField ( " valorImpostoSobreOperacoesFinanceiras " ) II < T > withValorImpostoSobreOperacoesFinanceiras ( java . lang . String valorImpostoSobreOperacoesFinanceiras ) ; } 
II < T > withValorDespesaAduaneira ( java . lang . String valorDespesaAduaneira ) ; @net.vidageek.fluid.annotations.FluidField ( " valorImpostoImportacao " ) II < T > withValorImpostoImportacao ( java . lang . String valorImpostoImportacao ) ; @net.vidageek.fluid.annotations.FluidField ( " valorImpostoSobreOperacoesFinanceiras " ) II < T > withValorImpostoSobreOperacoesFinanceiras ( java . lang . String valorImpostoSobreOperacoesFinanceiras ) ; } 
II < T > withValorImpostoImportacao ( java . lang . String valorImpostoImportacao ) ; @net.vidageek.fluid.annotations.FluidField ( " valorImpostoSobreOperacoesFinanceiras " ) II < T > withValorImpostoSobreOperacoesFinanceiras ( java . lang . String valorImpostoSobreOperacoesFinanceiras ) ; } 
II < T > withValorImpostoSobreOperacoesFinanceiras ( java . lang . String valorImpostoSobreOperacoesFinanceiras ) ; } 
IPI < T > withClasseEnquadramento ( java . lang . String classeEnquadramento ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpjProdutor " ) IPI < T > withCnpjProdutor ( java . lang . String cnpjProdutor ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoSelo " ) IPI < T > withCodigoSelo ( java . lang . String codigoSelo ) ; @net.vidageek.fluid.annotations.FluidField ( " quantidadeSelo " ) IPI < T > withQuantidadeSelo ( java . lang . String quantidadeSelo ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoEnquadramento " ) IPI < T > withCodigoEnquadramento ( java . lang . String codigoEnquadramento ) ; @net.vidageek.fluid.annotations.FluidField ( " ipiTributacao " ) IPITrib < IPI < T > > withIpiTributacao ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ipint " ) IPINT < IPI < T > > withIpint ( ) ; } 
IPI < T > withCnpjProdutor ( java . lang . String cnpjProdutor ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoSelo " ) IPI < T > withCodigoSelo ( java . lang . String codigoSelo ) ; @net.vidageek.fluid.annotations.FluidField ( " quantidadeSelo " ) IPI < T > withQuantidadeSelo ( java . lang . String quantidadeSelo ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoEnquadramento " ) IPI < T > withCodigoEnquadramento ( java . lang . String codigoEnquadramento ) ; @net.vidageek.fluid.annotations.FluidField ( " ipiTributacao " ) IPITrib < IPI < T > > withIpiTributacao ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ipint " ) IPINT < IPI < T > > withIpint ( ) ; } 
IPI < T > withCodigoSelo ( java . lang . String codigoSelo ) ; @net.vidageek.fluid.annotations.FluidField ( " quantidadeSelo " ) IPI < T > withQuantidadeSelo ( java . lang . String quantidadeSelo ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoEnquadramento " ) IPI < T > withCodigoEnquadramento ( java . lang . String codigoEnquadramento ) ; @net.vidageek.fluid.annotations.FluidField ( " ipiTributacao " ) IPITrib < IPI < T > > withIpiTributacao ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ipint " ) IPINT < IPI < T > > withIpint ( ) ; } 
IPI < T > withQuantidadeSelo ( java . lang . String quantidadeSelo ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoEnquadramento " ) IPI < T > withCodigoEnquadramento ( java . lang . String codigoEnquadramento ) ; @net.vidageek.fluid.annotations.FluidField ( " ipiTributacao " ) IPITrib < IPI < T > > withIpiTributacao ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ipint " ) IPINT < IPI < T > > withIpint ( ) ; } 
IPI < T > withCodigoEnquadramento ( java . lang . String codigoEnquadramento ) ; @net.vidageek.fluid.annotations.FluidField ( " ipiTributacao " ) IPITrib < IPI < T > > withIpiTributacao ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ipint " ) IPINT < IPI < T > > withIpint ( ) ; } 
IPITrib < IPI < T > > withIpiTributacao ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ipint " ) IPINT < IPI < T > > withIpint ( ) ; } 
IPINT < T > withCodigoSituacaoTributaria ( java . lang . String codigoSituacaoTributaria ) ; } 
IPITrib < T > withCodigoSituacaoTributaria ( java . lang . String codigoSituacaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " valorDaBaseDeCalculo " ) IPITrib < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaIPI " ) IPITrib < T > withAliquotaIPI ( java . lang . String aliquotaIPI ) ; @net.vidageek.fluid.annotations.FluidField ( " quantidade " ) IPITrib < T > withQuantidade ( java . lang . String quantidade ) ; @net.vidageek.fluid.annotations.FluidField ( " valorUnidade " ) IPITrib < T > withValorUnidade ( java . lang . String valorUnidade ) ; @net.vidageek.fluid.annotations.FluidField ( " valorIPI " ) IPITrib < T > withValorIPI ( java . lang . String valorIPI ) ; } 
IPITrib < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquotaIPI " ) IPITrib < T > withAliquotaIPI ( java . lang . String aliquotaIPI ) ; @net.vidageek.fluid.annotations.FluidField ( " quantidade " ) IPITrib < T > withQuantidade ( java . lang . String quantidade ) ; @net.vidageek.fluid.annotations.FluidField ( " valorUnidade " ) IPITrib < T > withValorUnidade ( java . lang . String valorUnidade ) ; @net.vidageek.fluid.annotations.FluidField ( " valorIPI " ) IPITrib < T > withValorIPI ( java . lang . String valorIPI ) ; } 
IPITrib < T > withAliquotaIPI ( java . lang . String aliquotaIPI ) ; @net.vidageek.fluid.annotations.FluidField ( " quantidade " ) IPITrib < T > withQuantidade ( java . lang . String quantidade ) ; @net.vidageek.fluid.annotations.FluidField ( " valorUnidade " ) IPITrib < T > withValorUnidade ( java . lang . String valorUnidade ) ; @net.vidageek.fluid.annotations.FluidField ( " valorIPI " ) IPITrib < T > withValorIPI ( java . lang . String valorIPI ) ; } 
IPITrib < T > withQuantidade ( java . lang . String quantidade ) ; @net.vidageek.fluid.annotations.FluidField ( " valorUnidade " ) IPITrib < T > withValorUnidade ( java . lang . String valorUnidade ) ; @net.vidageek.fluid.annotations.FluidField ( " valorIPI " ) IPITrib < T > withValorIPI ( java . lang . String valorIPI ) ; } 
IPITrib < T > withValorUnidade ( java . lang . String valorUnidade ) ; @net.vidageek.fluid.annotations.FluidField ( " valorIPI " ) IPITrib < T > withValorIPI ( java . lang . String valorIPI ) ; } 
ISSQN < T > withValorDaBaseDeCalculo ( java . lang . String valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " aliquota " ) ISSQN < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valorISSQN " ) ISSQN < T > withValorISSQN ( java . lang . String valorISSQN ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoMunicipio " ) ISSQN < T > withCodigoMunicipio ( java . lang . String codigoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoListaServicos " ) ISSQN < T > withCodigoListaServicos ( java . lang . String codigoListaServicos ) ; } 
ISSQN < T > withAliquota ( java . lang . String aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " valorISSQN " ) ISSQN < T > withValorISSQN ( java . lang . String valorISSQN ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoMunicipio " ) ISSQN < T > withCodigoMunicipio ( java . lang . String codigoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoListaServicos " ) ISSQN < T > withCodigoListaServicos ( java . lang . String codigoListaServicos ) ; } 
ISSQN < T > withValorISSQN ( java . lang . String valorISSQN ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoMunicipio " ) ISSQN < T > withCodigoMunicipio ( java . lang . String codigoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoListaServicos " ) ISSQN < T > withCodigoListaServicos ( java . lang . String codigoListaServicos ) ; } 
ISSQN < T > withCodigoMunicipio ( java . lang . String codigoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " codigoListaServicos " ) ISSQN < T > withCodigoListaServicos ( java . lang . String codigoListaServicos ) ; } 
ISSQN < T > withCodigoListaServicos ( java . lang . String codigoListaServicos ) ; } 
ISSQNtot < T > withVServ ( java . lang . String vServ ) ; @net.vidageek.fluid.annotations.FluidField ( " vbc " ) ISSQNtot < T > withVbc ( java . lang . String vbc ) ; @net.vidageek.fluid.annotations.FluidField ( " viss " ) ISSQNtot < T > withViss ( java . lang . String viss ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) ISSQNtot < T > withVpis ( java . lang . String vpis ) ; @net.vidageek.fluid.annotations.FluidField ( " vcofins " ) ISSQNtot < T > withVcofins ( java . lang . String vcofins ) ; } 
ISSQNtot < T > withVbc ( java . lang . String vbc ) ; @net.vidageek.fluid.annotations.FluidField ( " viss " ) ISSQNtot < T > withViss ( java . lang . String viss ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) ISSQNtot < T > withVpis ( java . lang . String vpis ) ; @net.vidageek.fluid.annotations.FluidField ( " vcofins " ) ISSQNtot < T > withVcofins ( java . lang . String vcofins ) ; } 
ISSQNtot < T > withViss ( java . lang . String viss ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) ISSQNtot < T > withVpis ( java . lang . String vpis ) ; @net.vidageek.fluid.annotations.FluidField ( " vcofins " ) ISSQNtot < T > withVcofins ( java . lang . String vcofins ) ; } 
ISSQNtot < T > withVpis ( java . lang . String vpis ) ; @net.vidageek.fluid.annotations.FluidField ( " vcofins " ) ISSQNtot < T > withVcofins ( java . lang . String vcofins ) ; } 
IdentificacaoDaNFE < T > withDigitoVerificadorDaChaveDeAcessoDaNFE ( java . lang . String digitoVerificadorDaChaveDeAcessoDaNFE ) ; @net.vidageek.fluid.annotations.FluidField ( " pAmb " ) IdentificacaoDaNFE < T > withTipoDoAmbiente ( br . com . caelum . stella . nfe . builder . enums . TipoDoAmbiente ipoDoAmbiente ) ; @net.vidageek.fluid.annotations.FluidField ( " finNFe " ) IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( java . lang . String finalidadeDaEmissaoDaNFE ) ; @net.vidageek.fluid.annotations.FluidField ( " procEmi " ) IdentificacaoDaNFE < T > withProcessoDeEmissao ( java . lang . String processoDeEmissao ) ; @net.vidageek.fluid.annotations.FluidField ( " verProc " ) IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( java . lang . String versaoDoAplicativoUsadoNaEmissao ) ; } 
IdentificacaoDaNFE < T > withTipoDoAmbiente ( br . com . caelum . stella . nfe . builder . enums . TipoDoAmbiente ipoDoAmbiente ) ; @net.vidageek.fluid.annotations.FluidField ( " finNFe " ) IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( java . lang . String finalidadeDaEmissaoDaNFE ) ; @net.vidageek.fluid.annotations.FluidField ( " procEmi " ) IdentificacaoDaNFE < T > withProcessoDeEmissao ( java . lang . String processoDeEmissao ) ; @net.vidageek.fluid.annotations.FluidField ( " verProc " ) IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( java . lang . String versaoDoAplicativoUsadoNaEmissao ) ; } 
IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( java . lang . String finalidadeDaEmissaoDaNFE ) ; @net.vidageek.fluid.annotations.FluidField ( " procEmi " ) IdentificacaoDaNFE < T > withProcessoDeEmissao ( java . lang . String processoDeEmissao ) ; @net.vidageek.fluid.annotations.FluidField ( " verProc " ) IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( java . lang . String versaoDoAplicativoUsadoNaEmissao ) ; } 
IdentificacaoDaNFE < T > withProcessoDeEmissao ( java . lang . String processoDeEmissao ) ; @net.vidageek.fluid.annotations.FluidField ( " verProc " ) IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( java . lang . String versaoDoAplicativoUsadoNaEmissao ) ; } 
IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( java . lang . String versaoDoAplicativoUsadoNaEmissao ) ; } 
ICMS < Imposto < T > > withIcms ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ipi " ) IPI < Imposto < T > > withIpi ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ii " ) II < Imposto < T > > withIi ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pis " ) PIS < Imposto < T > > withPis ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pisst " ) PISSubstituicaoTributaria < Imposto < T > > withPisst ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofins " ) COFINS < Imposto < T > > withCofins ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofinsst " ) COFINSSubstituicaoTributaria < Imposto < T > > withCofinsst ( ) ; @net.vidageek.fluid.annotations.FluidField ( " issqn " ) ISSQN < Imposto < T > > withIssqn ( ) ; } 
IPI < Imposto < T > > withIpi ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ii " ) II < Imposto < T > > withIi ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pis " ) PIS < Imposto < T > > withPis ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pisst " ) PISSubstituicaoTributaria < Imposto < T > > withPisst ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofins " ) COFINS < Imposto < T > > withCofins ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofinsst " ) COFINSSubstituicaoTributaria < Imposto < T > > withCofinsst ( ) ; @net.vidageek.fluid.annotations.FluidField ( " issqn " ) ISSQN < Imposto < T > > withIssqn ( ) ; } 
II < Imposto < T > > withIi ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pis " ) PIS < Imposto < T > > withPis ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pisst " ) PISSubstituicaoTributaria < Imposto < T > > withPisst ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofins " ) COFINS < Imposto < T > > withCofins ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofinsst " ) COFINSSubstituicaoTributaria < Imposto < T > > withCofinsst ( ) ; @net.vidageek.fluid.annotations.FluidField ( " issqn " ) ISSQN < Imposto < T > > withIssqn ( ) ; } 
PIS < Imposto < T > > withPis ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pisst " ) PISSubstituicaoTributaria < Imposto < T > > withPisst ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofins " ) COFINS < Imposto < T > > withCofins ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofinsst " ) COFINSSubstituicaoTributaria < Imposto < T > > withCofinsst ( ) ; @net.vidageek.fluid.annotations.FluidField ( " issqn " ) ISSQN < Imposto < T > > withIssqn ( ) ; } 
PISSubstituicaoTributaria < Imposto < T > > withPisst ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofins " ) COFINS < Imposto < T > > withCofins ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofinsst " ) COFINSSubstituicaoTributaria < Imposto < T > > withCofinsst ( ) ; @net.vidageek.fluid.annotations.FluidField ( " issqn " ) ISSQN < Imposto < T > > withIssqn ( ) ; } 
COFINS < Imposto < T > > withCofins ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cofinsst " ) COFINSSubstituicaoTributaria < Imposto < T > > withCofinsst ( ) ; @net.vidageek.fluid.annotations.FluidField ( " issqn " ) ISSQN < Imposto < T > > withIssqn ( ) ; } 
COFINSSubstituicaoTributaria < Imposto < T > > withCofinsst ( ) ; @net.vidageek.fluid.annotations.FluidField ( " issqn " ) ISSQN < Imposto < T > > withIssqn ( ) ; } 
InfAtuCadEmiDFe < T > withUf ( br . com . caelum . stella . nfe . modelo . TUf uf ) ; @net.vidageek.fluid.annotations.FluidField ( " inclui " ) TEmissor < InfAtuCadEmiDFe < T > > withInclui ( ) ; @net.vidageek.fluid.annotations.FluidField ( " exclui " ) Exclui < InfAtuCadEmiDFe < T > > withExclui ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfAtuCadEmiDFe < T > withId ( java . lang . String id ) ; } 
TEmissor < InfAtuCadEmiDFe < T > > withInclui ( ) ; @net.vidageek.fluid.annotations.FluidField ( " exclui " ) Exclui < InfAtuCadEmiDFe < T > > withExclui ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfAtuCadEmiDFe < T > withId ( java . lang . String id ) ; } 
Exclui < InfAtuCadEmiDFe < T > > withExclui ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfAtuCadEmiDFe < T > withId ( java . lang . String id ) ; } 
InfCad < T > withXRegApur ( java . lang . String xRegApur ) ; @net.vidageek.fluid.annotations.FluidField ( " cnae " ) InfCad < T > withCnae ( java . lang . String cnae ) ; @net.vidageek.fluid.annotations.FluidField ( " dIniAtiv " ) InfCad < T > withDIniAtiv ( java . lang . String dIniAtiv ) ; @net.vidageek.fluid.annotations.FluidField ( " dUltSit " ) InfCad < T > withDUltSit ( java . lang . String dUltSit ) ; @net.vidageek.fluid.annotations.FluidField ( " dBaixa " ) InfCad < T > withDBaixa ( java . lang . String dBaixa ) ; @net.vidageek.fluid.annotations.FluidField ( " ieUnica " ) InfCad < T > withIeUnica ( java . lang . String ieUnica ) ; @net.vidageek.fluid.annotations.FluidField ( " ieAtual " ) InfCad < T > withIeAtual ( java . lang . String ieAtual ) ; @net.vidageek.fluid.annotations.FluidField ( " ender " ) Endereco < InfCad < T > > withEnder ( ) ; } 
InfCad < T > withCnae ( java . lang . String cnae ) ; @net.vidageek.fluid.annotations.FluidField ( " dIniAtiv " ) InfCad < T > withDIniAtiv ( java . lang . String dIniAtiv ) ; @net.vidageek.fluid.annotations.FluidField ( " dUltSit " ) InfCad < T > withDUltSit ( java . lang . String dUltSit ) ; @net.vidageek.fluid.annotations.FluidField ( " dBaixa " ) InfCad < T > withDBaixa ( java . lang . String dBaixa ) ; @net.vidageek.fluid.annotations.FluidField ( " ieUnica " ) InfCad < T > withIeUnica ( java . lang . String ieUnica ) ; @net.vidageek.fluid.annotations.FluidField ( " ieAtual " ) InfCad < T > withIeAtual ( java . lang . String ieAtual ) ; @net.vidageek.fluid.annotations.FluidField ( " ender " ) Endereco < InfCad < T > > withEnder ( ) ; } 
InfCad < T > withDIniAtiv ( java . lang . String dIniAtiv ) ; @net.vidageek.fluid.annotations.FluidField ( " dUltSit " ) InfCad < T > withDUltSit ( java . lang . String dUltSit ) ; @net.vidageek.fluid.annotations.FluidField ( " dBaixa " ) InfCad < T > withDBaixa ( java . lang . String dBaixa ) ; @net.vidageek.fluid.annotations.FluidField ( " ieUnica " ) InfCad < T > withIeUnica ( java . lang . String ieUnica ) ; @net.vidageek.fluid.annotations.FluidField ( " ieAtual " ) InfCad < T > withIeAtual ( java . lang . String ieAtual ) ; @net.vidageek.fluid.annotations.FluidField ( " ender " ) Endereco < InfCad < T > > withEnder ( ) ; } 
InfCad < T > withDUltSit ( java . lang . String dUltSit ) ; @net.vidageek.fluid.annotations.FluidField ( " dBaixa " ) InfCad < T > withDBaixa ( java . lang . String dBaixa ) ; @net.vidageek.fluid.annotations.FluidField ( " ieUnica " ) InfCad < T > withIeUnica ( java . lang . String ieUnica ) ; @net.vidageek.fluid.annotations.FluidField ( " ieAtual " ) InfCad < T > withIeAtual ( java . lang . String ieAtual ) ; @net.vidageek.fluid.annotations.FluidField ( " ender " ) Endereco < InfCad < T > > withEnder ( ) ; } 
InfCad < T > withDBaixa ( java . lang . String dBaixa ) ; @net.vidageek.fluid.annotations.FluidField ( " ieUnica " ) InfCad < T > withIeUnica ( java . lang . String ieUnica ) ; @net.vidageek.fluid.annotations.FluidField ( " ieAtual " ) InfCad < T > withIeAtual ( java . lang . String ieAtual ) ; @net.vidageek.fluid.annotations.FluidField ( " ender " ) Endereco < InfCad < T > > withEnder ( ) ; } 
InfCad < T > withIeUnica ( java . lang . String ieUnica ) ; @net.vidageek.fluid.annotations.FluidField ( " ieAtual " ) InfCad < T > withIeAtual ( java . lang . String ieAtual ) ; @net.vidageek.fluid.annotations.FluidField ( " ender " ) Endereco < InfCad < T > > withEnder ( ) ; } 
InfCad < T > withIeAtual ( java . lang . String ieAtual ) ; @net.vidageek.fluid.annotations.FluidField ( " ender " ) Endereco < InfCad < T > > withEnder ( ) ; } 
InfCadEmiDFe < T > withDPubCad ( java . lang . String dPubCad ) ; @net.vidageek.fluid.annotations.FluidField ( " emissor " ) InfCadEmiDFe < T > addEmissor ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfCadEmiDFe < T > withId ( java . lang . String id ) ; } 
InfCadEmiDFe < T > addEmissor ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfCadEmiDFe < T > withId ( java . lang . String id ) ; } 
InfCanc < T > withTpAmb ( java . lang . String pAmb ) ; @net.vidageek.fluid.annotations.FluidField ( " xServ " ) InfCanc < T > withXServ ( java . lang . String xServ ) ; @net.vidageek.fluid.annotations.FluidField ( " chNFe " ) InfCanc < T > withChNFe ( java . lang . String chNFe ) ; @net.vidageek.fluid.annotations.FluidField ( " nProt " ) InfCanc < T > withNProt ( java . lang . String nProt ) ; @net.vidageek.fluid.annotations.FluidField ( " xJust " ) InfCanc < T > withXJust ( java . lang . String xJust ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfCanc < T > withId ( java . lang . String id ) ; } 
InfCanc < T > withXServ ( java . lang . String xServ ) ; @net.vidageek.fluid.annotations.FluidField ( " chNFe " ) InfCanc < T > withChNFe ( java . lang . String chNFe ) ; @net.vidageek.fluid.annotations.FluidField ( " nProt " ) InfCanc < T > withNProt ( java . lang . String nProt ) ; @net.vidageek.fluid.annotations.FluidField ( " xJust " ) InfCanc < T > withXJust ( java . lang . String xJust ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfCanc < T > withId ( java . lang . String id ) ; } 
InfCanc < T > withChNFe ( java . lang . String chNFe ) ; @net.vidageek.fluid.annotations.FluidField ( " nProt " ) InfCanc < T > withNProt ( java . lang . String nProt ) ; @net.vidageek.fluid.annotations.FluidField ( " xJust " ) InfCanc < T > withXJust ( java . lang . String xJust ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfCanc < T > withId ( java . lang . String id ) ; } 
InfCanc < T > withNProt ( java . lang . String nProt ) ; @net.vidageek.fluid.annotations.FluidField ( " xJust " ) InfCanc < T > withXJust ( java . lang . String xJust ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfCanc < T > withId ( java . lang . String id ) ; } 
InfCanc < T > withXJust ( java . lang . String xJust ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfCanc < T > withId ( java . lang . String id ) ; } 
InfCons < T > withXMotivo ( java . lang . String xMotivo ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) InfCons < T > withUf ( br . com . caelum . stella . nfe . modelo . TUfCons uf ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) InfCons < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) InfCons < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " cpf " ) InfCons < T > withCpf ( java . lang . String cpf ) ; @net.vidageek.fluid.annotations.FluidField ( " dhCons " ) InfCons < T > withDhCons ( java . lang . String dhCons ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCons < T > addInfCad ( ) ; } 
InfCons < T > withUf ( br . com . caelum . stella . nfe . modelo . TUfCons uf ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) InfCons < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) InfCons < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " cpf " ) InfCons < T > withCpf ( java . lang . String cpf ) ; @net.vidageek.fluid.annotations.FluidField ( " dhCons " ) InfCons < T > withDhCons ( java . lang . String dhCons ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCons < T > addInfCad ( ) ; } 
InfCons < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) InfCons < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " cpf " ) InfCons < T > withCpf ( java . lang . String cpf ) ; @net.vidageek.fluid.annotations.FluidField ( " dhCons " ) InfCons < T > withDhCons ( java . lang . String dhCons ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCons < T > addInfCad ( ) ; } 
InfCons < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " cpf " ) InfCons < T > withCpf ( java . lang . String cpf ) ; @net.vidageek.fluid.annotations.FluidField ( " dhCons " ) InfCons < T > withDhCons ( java . lang . String dhCons ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCons < T > addInfCad ( ) ; } 
InfCons < T > withCpf ( java . lang . String cpf ) ; @net.vidageek.fluid.annotations.FluidField ( " dhCons " ) InfCons < T > withDhCons ( java . lang . String dhCons ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCons < T > addInfCad ( ) ; } 
InfCons < T > withDhCons ( java . lang . String dhCons ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCons < T > addInfCad ( ) ; } 
InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCons < T > addInfCad ( ) ; } 
InfInut < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " mod " ) InfInut < T > withMod ( java . lang . String mod ) ; @net.vidageek.fluid.annotations.FluidField ( " serie " ) InfInut < T > withSerie ( java . lang . String serie ) ; @net.vidageek.fluid.annotations.FluidField ( " nnfIni " ) InfInut < T > withNnfIni ( java . lang . String nnfIni ) ; @net.vidageek.fluid.annotations.FluidField ( " nnfFin " ) InfInut < T > withNnfFin ( java . lang . String nnfFin ) ; @net.vidageek.fluid.annotations.FluidField ( " dhRecbto " ) InfInut < T > withDhRecbto ( java . lang . String dhRecbto ) ; @net.vidageek.fluid.annotations.FluidField ( " nProt " ) InfInut < T > withNProt ( java . lang . String nProt ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfInut < T > withId ( java . lang . String id ) ; } 
InfInut < T > withMod ( java . lang . String mod ) ; @net.vidageek.fluid.annotations.FluidField ( " serie " ) InfInut < T > withSerie ( java . lang . String serie ) ; @net.vidageek.fluid.annotations.FluidField ( " nnfIni " ) InfInut < T > withNnfIni ( java . lang . String nnfIni ) ; @net.vidageek.fluid.annotations.FluidField ( " nnfFin " ) InfInut < T > withNnfFin ( java . lang . String nnfFin ) ; @net.vidageek.fluid.annotations.FluidField ( " dhRecbto " ) InfInut < T > withDhRecbto ( java . lang . String dhRecbto ) ; @net.vidageek.fluid.annotations.FluidField ( " nProt " ) InfInut < T > withNProt ( java . lang . String nProt ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfInut < T > withId ( java . lang . String id ) ; } 
InfInut < T > withSerie ( java . lang . String serie ) ; @net.vidageek.fluid.annotations.FluidField ( " nnfIni " ) InfInut < T > withNnfIni ( java . lang . String nnfIni ) ; @net.vidageek.fluid.annotations.FluidField ( " nnfFin " ) InfInut < T > withNnfFin ( java . lang . String nnfFin ) ; @net.vidageek.fluid.annotations.FluidField ( " dhRecbto " ) InfInut < T > withDhRecbto ( java . lang . String dhRecbto ) ; @net.vidageek.fluid.annotations.FluidField ( " nProt " ) InfInut < T > withNProt ( java . lang . String nProt ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfInut < T > withId ( java . lang . String id ) ; } 
InfInut < T > withNnfIni ( java . lang . String nnfIni ) ; @net.vidageek.fluid.annotations.FluidField ( " nnfFin " ) InfInut < T > withNnfFin ( java . lang . String nnfFin ) ; @net.vidageek.fluid.annotations.FluidField ( " dhRecbto " ) InfInut < T > withDhRecbto ( java . lang . String dhRecbto ) ; @net.vidageek.fluid.annotations.FluidField ( " nProt " ) InfInut < T > withNProt ( java . lang . String nProt ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfInut < T > withId ( java . lang . String id ) ; } 
InfInut < T > withNnfFin ( java . lang . String nnfFin ) ; @net.vidageek.fluid.annotations.FluidField ( " dhRecbto " ) InfInut < T > withDhRecbto ( java . lang . String dhRecbto ) ; @net.vidageek.fluid.annotations.FluidField ( " nProt " ) InfInut < T > withNProt ( java . lang . String nProt ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfInut < T > withId ( java . lang . String id ) ; } 
InfInut < T > withDhRecbto ( java . lang . String dhRecbto ) ; @net.vidageek.fluid.annotations.FluidField ( " nProt " ) InfInut < T > withNProt ( java . lang . String nProt ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfInut < T > withId ( java . lang . String id ) ; } 
InfInut < T > withNProt ( java . lang . String nProt ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfInut < T > withId ( java . lang . String id ) ; } 
InfRetAtuCadEmiDFe < T > withUf ( br . com . caelum . stella . nfe . modelo . TUf uf ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) InfRetAtuCadEmiDFe < T > withCnpj ( java . lang . Object cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " ope " ) InfRetAtuCadEmiDFe < T > withOpe ( java . lang . String ope ) ; @net.vidageek.fluid.annotations.FluidField ( " resOpe " ) InfRetAtuCadEmiDFe < T > withResOpe ( java . lang . String resOpe ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfRetAtuCadEmiDFe < T > withId ( java . lang . String id ) ; } 
InfRetAtuCadEmiDFe < T > withCnpj ( java . lang . Object cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " ope " ) InfRetAtuCadEmiDFe < T > withOpe ( java . lang . String ope ) ; @net.vidageek.fluid.annotations.FluidField ( " resOpe " ) InfRetAtuCadEmiDFe < T > withResOpe ( java . lang . String resOpe ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfRetAtuCadEmiDFe < T > withId ( java . lang . String id ) ; } 
InfRetAtuCadEmiDFe < T > withOpe ( java . lang . String ope ) ; @net.vidageek.fluid.annotations.FluidField ( " resOpe " ) InfRetAtuCadEmiDFe < T > withResOpe ( java . lang . String resOpe ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfRetAtuCadEmiDFe < T > withId ( java . lang . String id ) ; } 
InfRetAtuCadEmiDFe < T > withResOpe ( java . lang . String resOpe ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfRetAtuCadEmiDFe < T > withId ( java . lang . String id ) ; } 
InformacaoDaNFReferenciada < T > withRefNFe ( java . lang . String refNFe ) ; @net.vidageek.fluid.annotations.FluidField ( " refNF " ) NFReferenciada < InformacaoDaNFReferenciada < T > > withRefNF ( ) ; } 
NFReferenciada < InformacaoDaNFReferenciada < T > > withRefNF ( ) ; } 
InformacoesAdicionais < T > withInformacoesAdicionaisDeInteresseDoFisco ( java . lang . String InformacoesAdicionaisDeInteresseDoFisco ) ; @net.vidageek.fluid.annotations.FluidField ( " infCpl " ) InformacoesAdicionais < T > withInformacoesComplementares ( java . lang . String informacoesComplementares ) ; @net.vidageek.fluid.annotations.FluidField ( " obsCont " ) InformacoesAdicionais < T > addObservacoesDoContribuinte ( ) ; @net.vidageek.fluid.annotations.FluidField ( " obsFisco " ) InformacoesAdicionais < T > addObsFisco ( ) ; @net.vidageek.fluid.annotations.FluidField ( " procRef " ) InformacoesAdicionais < T > addProcRef ( ) ; } 
InformacoesAdicionais < T > withInformacoesComplementares ( java . lang . String informacoesComplementares ) ; @net.vidageek.fluid.annotations.FluidField ( " obsCont " ) InformacoesAdicionais < T > addObservacoesDoContribuinte ( ) ; @net.vidageek.fluid.annotations.FluidField ( " obsFisco " ) InformacoesAdicionais < T > addObsFisco ( ) ; @net.vidageek.fluid.annotations.FluidField ( " procRef " ) InformacoesAdicionais < T > addProcRef ( ) ; } 
InformacoesAdicionais < T > addObservacoesDoContribuinte ( ) ; @net.vidageek.fluid.annotations.FluidField ( " obsFisco " ) InformacoesAdicionais < T > addObsFisco ( ) ; @net.vidageek.fluid.annotations.FluidField ( " procRef " ) InformacoesAdicionais < T > addProcRef ( ) ; } 
InformacoesAdicionais < T > addObsFisco ( ) ; @net.vidageek.fluid.annotations.FluidField ( " procRef " ) InformacoesAdicionais < T > addProcRef ( ) ; } 
TotalNFE < InformacoesDaNFE < T > > withTotal ( ) ; @net.vidageek.fluid.annotations.FluidField ( " ransp " ) Transporte < InformacoesDaNFE < T > > withTransp ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cobr " ) Cobranca < InformacoesDaNFE < T > > withCobr ( ) ; @net.vidageek.fluid.annotations.FluidField ( " infAdic " ) InformacoesAdicionais < InformacoesDaNFE < T > > withInfAdic ( ) ; @net.vidageek.fluid.annotations.FluidField ( " exporta " ) Exportacao < InformacoesDaNFE < T > > withExporta ( ) ; @net.vidageek.fluid.annotations.FluidField ( " compra " ) Compra < InformacoesDaNFE < T > > withCompra ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) InformacoesDaNFE < T > withVersao ( java . lang . String versao ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InformacoesDaNFE < T > withId ( java . lang . String id ) ; } 
Transporte < InformacoesDaNFE < T > > withTransp ( ) ; @net.vidageek.fluid.annotations.FluidField ( " cobr " ) Cobranca < InformacoesDaNFE < T > > withCobr ( ) ; @net.vidageek.fluid.annotations.FluidField ( " infAdic " ) InformacoesAdicionais < InformacoesDaNFE < T > > withInfAdic ( ) ; @net.vidageek.fluid.annotations.FluidField ( " exporta " ) Exportacao < InformacoesDaNFE < T > > withExporta ( ) ; @net.vidageek.fluid.annotations.FluidField ( " compra " ) Compra < InformacoesDaNFE < T > > withCompra ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) InformacoesDaNFE < T > withVersao ( java . lang . String versao ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InformacoesDaNFE < T > withId ( java . lang . String id ) ; } 
Cobranca < InformacoesDaNFE < T > > withCobr ( ) ; @net.vidageek.fluid.annotations.FluidField ( " infAdic " ) InformacoesAdicionais < InformacoesDaNFE < T > > withInfAdic ( ) ; @net.vidageek.fluid.annotations.FluidField ( " exporta " ) Exportacao < InformacoesDaNFE < T > > withExporta ( ) ; @net.vidageek.fluid.annotations.FluidField ( " compra " ) Compra < InformacoesDaNFE < T > > withCompra ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) InformacoesDaNFE < T > withVersao ( java . lang . String versao ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InformacoesDaNFE < T > withId ( java . lang . String id ) ; } 
InformacoesAdicionais < InformacoesDaNFE < T > > withInfAdic ( ) ; @net.vidageek.fluid.annotations.FluidField ( " exporta " ) Exportacao < InformacoesDaNFE < T > > withExporta ( ) ; @net.vidageek.fluid.annotations.FluidField ( " compra " ) Compra < InformacoesDaNFE < T > > withCompra ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) InformacoesDaNFE < T > withVersao ( java . lang . String versao ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InformacoesDaNFE < T > withId ( java . lang . String id ) ; } 
Exportacao < InformacoesDaNFE < T > > withExporta ( ) ; @net.vidageek.fluid.annotations.FluidField ( " compra " ) Compra < InformacoesDaNFE < T > > withCompra ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) InformacoesDaNFE < T > withVersao ( java . lang . String versao ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InformacoesDaNFE < T > withId ( java . lang . String id ) ; } 
Compra < InformacoesDaNFE < T > > withCompra ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) InformacoesDaNFE < T > withVersao ( java . lang . String versao ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InformacoesDaNFE < T > withId ( java . lang . String id ) ; } 
InformacoesDaNFE < T > withVersao ( java . lang . String versao ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InformacoesDaNFE < T > withId ( java . lang . String id ) ; } 
X509DataType < KeyInfoType < T > > withX509Data ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) KeyInfoType < T > withId ( java . lang . String id ) ; } 
Lacres < T > withNumeroDosLacres ( java . lang . String numeroDosLacres ) ; } 
Medicamento < T > withNumeroDoLote ( java . lang . String numeroDoLote ) ; @net.vidageek.fluid.annotations.FluidField ( " qLote " ) Medicamento < T > withQuantidadeDoLote ( java . lang . String quantidadeDoLote ) ; @net.vidageek.fluid.annotations.FluidField ( " dFab " ) Medicamento < T > withDataDeFabricacao ( java . util . Calendar dataDeFabricacao ) ; @net.vidageek.fluid.annotations.FluidField ( " dVal " ) Medicamento < T > withDataDeValidade ( java . util . Calendar dataDeValidade ) ; @net.vidageek.fluid.annotations.FluidField ( " vpmc " ) Medicamento < T > withPrecoMaximoAoConsumidor ( java . math . BigDecimal precoMaximoAoConsumidor ) ; } 
Medicamento < T > withQuantidadeDoLote ( java . lang . String quantidadeDoLote ) ; @net.vidageek.fluid.annotations.FluidField ( " dFab " ) Medicamento < T > withDataDeFabricacao ( java . util . Calendar dataDeFabricacao ) ; @net.vidageek.fluid.annotations.FluidField ( " dVal " ) Medicamento < T > withDataDeValidade ( java . util . Calendar dataDeValidade ) ; @net.vidageek.fluid.annotations.FluidField ( " vpmc " ) Medicamento < T > withPrecoMaximoAoConsumidor ( java . math . BigDecimal precoMaximoAoConsumidor ) ; } 
Medicamento < T > withDataDeFabricacao ( java . util . Calendar dataDeFabricacao ) ; @net.vidageek.fluid.annotations.FluidField ( " dVal " ) Medicamento < T > withDataDeValidade ( java . util . Calendar dataDeValidade ) ; @net.vidageek.fluid.annotations.FluidField ( " vpmc " ) Medicamento < T > withPrecoMaximoAoConsumidor ( java . math . BigDecimal precoMaximoAoConsumidor ) ; } 
Medicamento < T > withDataDeValidade ( java . util . Calendar dataDeValidade ) ; @net.vidageek.fluid.annotations.FluidField ( " vpmc " ) Medicamento < T > withPrecoMaximoAoConsumidor ( java . math . BigDecimal precoMaximoAoConsumidor ) ; } 
Medicamento < T > withPrecoMaximoAoConsumidor ( java . math . BigDecimal precoMaximoAoConsumidor ) ; } 
InformacoesDaNFE < NFE < T > > withInformacoesDaNFE ( ) ; @net.vidageek.fluid.annotations.FluidField ( " signature " ) SignatureType < NFE < T > > withSignature ( ) ; } 
NFE < NFEProcessada < T > > withNFE ( ) ; @net.vidageek.fluid.annotations.FluidField ( " protNFe " ) ProtocoloDoResultadoDeProcessamento < NFEProcessada < T > > withProtocoloDoResultadoDeProcessamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) NFEProcessada < T > withVersao ( java . lang . String versao ) ; } 
ProtocoloDoResultadoDeProcessamento < NFEProcessada < T > > withProtocoloDoResultadoDeProcessamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) NFEProcessada < T > withVersao ( java . lang . String versao ) ; } 
NFEProcessada < T > withVersao ( java . lang . String versao ) ; } 
NFReferenciada < T > withCodigoUF ( java . lang . String codigoUF ) ; @net.vidageek.fluid.annotations.FluidField ( " aamm " ) NFReferenciada < T > withAAMM ( java . lang . String AAMM ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) NFReferenciada < T > withCNPJ ( java . lang . String CNPJ ) ; @net.vidageek.fluid.annotations.FluidField ( " mod " ) NFReferenciada < T > withMod ( java . lang . String mod ) ; @net.vidageek.fluid.annotations.FluidField ( " serie " ) NFReferenciada < T > withSerie ( java . lang . String serie ) ; @net.vidageek.fluid.annotations.FluidField ( " nnf " ) NFReferenciada < T > withNumero ( java . lang . String numero ) ; } 
NFReferenciada < T > withAAMM ( java . lang . String AAMM ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) NFReferenciada < T > withCNPJ ( java . lang . String CNPJ ) ; @net.vidageek.fluid.annotations.FluidField ( " mod " ) NFReferenciada < T > withMod ( java . lang . String mod ) ; @net.vidageek.fluid.annotations.FluidField ( " serie " ) NFReferenciada < T > withSerie ( java . lang . String serie ) ; @net.vidageek.fluid.annotations.FluidField ( " nnf " ) NFReferenciada < T > withNumero ( java . lang . String numero ) ; } 
NFReferenciada < T > withCNPJ ( java . lang . String CNPJ ) ; @net.vidageek.fluid.annotations.FluidField ( " mod " ) NFReferenciada < T > withMod ( java . lang . String mod ) ; @net.vidageek.fluid.annotations.FluidField ( " serie " ) NFReferenciada < T > withSerie ( java . lang . String serie ) ; @net.vidageek.fluid.annotations.FluidField ( " nnf " ) NFReferenciada < T > withNumero ( java . lang . String numero ) ; } 
NFReferenciada < T > withMod ( java . lang . String mod ) ; @net.vidageek.fluid.annotations.FluidField ( " serie " ) NFReferenciada < T > withSerie ( java . lang . String serie ) ; @net.vidageek.fluid.annotations.FluidField ( " nnf " ) NFReferenciada < T > withNumero ( java . lang . String numero ) ; } 
NFReferenciada < T > withSerie ( java . lang . String serie ) ; @net.vidageek.fluid.annotations.FluidField ( " nnf " ) NFReferenciada < T > withNumero ( java . lang . String numero ) ; } 
NFReferenciada < T > withNumero ( java . lang . String numero ) ; } 
ObservacaoDoContribuinte < T > withTextoDeDescricao ( java . lang . String extoDeDescricao ) ; @net.vidageek.fluid.annotations.FluidField ( " xCampo " ) ObservacaoDoContribuinte < T > withDescricaoDoCampo ( java . lang . String descricaoDoCampo ) ; } 
ObservacaoDoContribuinte < T > withDescricaoDoCampo ( java . lang . String descricaoDoCampo ) ; } 
ObservacaoFisco < T > withDescricaoDoTexto ( java . lang . String descricaoDoTexto ) ; @net.vidageek.fluid.annotations.FluidField ( " xCampo " ) ObservacaoFisco < T > withDescricaoDoCampo ( java . lang . String descricaoDoCampo ) ; } 
ObservacaoFisco < T > withDescricaoDoCampo ( java . lang . String descricaoDoCampo ) ; } 
PISTributadoPelaAliquota < PIS < T > > withPISTributadoPelaAliquota ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pisQtde " ) PISTributadoPorQuantidade < PIS < T > > withPISTributadoPorQuantidade ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pisnt " ) PISNaoTributado < PIS < T > > withPISNaoTributado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pisOutr " ) PISOutrasOperacoes < PIS < T > > withPISOutrasOperacoes ( ) ; } 
PISTributadoPorQuantidade < PIS < T > > withPISTributadoPorQuantidade ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pisnt " ) PISNaoTributado < PIS < T > > withPISNaoTributado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pisOutr " ) PISOutrasOperacoes < PIS < T > > withPISOutrasOperacoes ( ) ; } 
PISNaoTributado < PIS < T > > withPISNaoTributado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " pisOutr " ) PISOutrasOperacoes < PIS < T > > withPISOutrasOperacoes ( ) ; } 
PISOutrasOperacoes < PIS < T > > withPISOutrasOperacoes ( ) ; } 
PISNaoTributado < T > withCodigoSituacaoTributaria ( java . lang . String codigoSituacaoTributaria ) ; } 
PISOutrasOperacoes < T > withCst ( java . lang . String cst ) ; @net.vidageek.fluid.annotations.FluidField ( " vbc " ) PISOutrasOperacoes < T > withValorDaBaseDeCalculo ( java . math . BigDecimal valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " ppis " ) PISOutrasOperacoes < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " qbcProd " ) PISOutrasOperacoes < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " vAliqProd " ) PISOutrasOperacoes < T > withAliquotaDoProduto ( java . math . BigDecimal aliquotaDoProduto ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISOutrasOperacoes < T > withValor ( java . math . BigDecimal valor ) ; } 
PISOutrasOperacoes < T > withValorDaBaseDeCalculo ( java . math . BigDecimal valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " ppis " ) PISOutrasOperacoes < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " qbcProd " ) PISOutrasOperacoes < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " vAliqProd " ) PISOutrasOperacoes < T > withAliquotaDoProduto ( java . math . BigDecimal aliquotaDoProduto ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISOutrasOperacoes < T > withValor ( java . math . BigDecimal valor ) ; } 
PISOutrasOperacoes < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " qbcProd " ) PISOutrasOperacoes < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " vAliqProd " ) PISOutrasOperacoes < T > withAliquotaDoProduto ( java . math . BigDecimal aliquotaDoProduto ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISOutrasOperacoes < T > withValor ( java . math . BigDecimal valor ) ; } 
PISOutrasOperacoes < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " vAliqProd " ) PISOutrasOperacoes < T > withAliquotaDoProduto ( java . math . BigDecimal aliquotaDoProduto ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISOutrasOperacoes < T > withValor ( java . math . BigDecimal valor ) ; } 
PISOutrasOperacoes < T > withAliquotaDoProduto ( java . math . BigDecimal aliquotaDoProduto ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISOutrasOperacoes < T > withValor ( java . math . BigDecimal valor ) ; } 
PISOutrasOperacoes < T > withValor ( java . math . BigDecimal valor ) ; } 
PISSubstituicaoTributaria < T > withValorDaBaseDeCalculo ( java . math . BigDecimal valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " ppis " ) PISSubstituicaoTributaria < T > withAliquotaDaSubstituicaoTributaria ( java . math . BigDecimal aliquotaDaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " qbcProd " ) PISSubstituicaoTributaria < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " vAliqProd " ) PISSubstituicaoTributaria < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISSubstituicaoTributaria < T > withValor ( java . math . BigDecimal valor ) ; } 
PISSubstituicaoTributaria < T > withAliquotaDaSubstituicaoTributaria ( java . math . BigDecimal aliquotaDaSubstituicaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " qbcProd " ) PISSubstituicaoTributaria < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " vAliqProd " ) PISSubstituicaoTributaria < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISSubstituicaoTributaria < T > withValor ( java . math . BigDecimal valor ) ; } 
PISSubstituicaoTributaria < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " vAliqProd " ) PISSubstituicaoTributaria < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISSubstituicaoTributaria < T > withValor ( java . math . BigDecimal valor ) ; } 
PISSubstituicaoTributaria < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISSubstituicaoTributaria < T > withValor ( java . math . BigDecimal valor ) ; } 
PISSubstituicaoTributaria < T > withValor ( java . math . BigDecimal valor ) ; } 
PISTributadoPelaAliquota < T > withCodigoSituacaoTributaria ( java . lang . String codigoSituacaoTributaria ) ; @net.vidageek.fluid.annotations.FluidField ( " vbc " ) PISTributadoPelaAliquota < T > withValorDaBaseDeCalculo ( java . math . BigDecimal valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " ppis " ) PISTributadoPelaAliquota < T > withAliquotaDoPIS ( java . math . BigDecimal aliquotaDoPIS ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISTributadoPelaAliquota < T > withValorDoPIS ( java . math . BigDecimal valorDoPIS ) ; } 
PISTributadoPelaAliquota < T > withValorDaBaseDeCalculo ( java . math . BigDecimal valorDaBaseDeCalculo ) ; @net.vidageek.fluid.annotations.FluidField ( " ppis " ) PISTributadoPelaAliquota < T > withAliquotaDoPIS ( java . math . BigDecimal aliquotaDoPIS ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISTributadoPelaAliquota < T > withValorDoPIS ( java . math . BigDecimal valorDoPIS ) ; } 
PISTributadoPelaAliquota < T > withAliquotaDoPIS ( java . math . BigDecimal aliquotaDoPIS ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISTributadoPelaAliquota < T > withValorDoPIS ( java . math . BigDecimal valorDoPIS ) ; } 
PISTributadoPelaAliquota < T > withValorDoPIS ( java . math . BigDecimal valorDoPIS ) ; } 
PISTributadoPorQuantidade < T > withCst ( java . lang . String cst ) ; @net.vidageek.fluid.annotations.FluidField ( " qbcProd " ) PISTributadoPorQuantidade < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " vAliqProd " ) PISTributadoPorQuantidade < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISTributadoPorQuantidade < T > withValorDoPIS ( java . math . BigDecimal valorDoPIS ) ; } 
PISTributadoPorQuantidade < T > withQuantidadeVendida ( java . math . BigDecimal quantidadeVendida ) ; @net.vidageek.fluid.annotations.FluidField ( " vAliqProd " ) PISTributadoPorQuantidade < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISTributadoPorQuantidade < T > withValorDoPIS ( java . math . BigDecimal valorDoPIS ) ; } 
PISTributadoPorQuantidade < T > withAliquota ( java . math . BigDecimal aliquota ) ; @net.vidageek.fluid.annotations.FluidField ( " vpis " ) PISTributadoPorQuantidade < T > withValorDoPIS ( java . math . BigDecimal valorDoPIS ) ; } 
PISTributadoPorQuantidade < T > withValorDoPIS ( java . math . BigDecimal valorDoPIS ) ; } 
PedidoDeAutorizacaoDaNFE < T > withIdDoLote ( java . lang . String idDoLote ) ; @net.vidageek.fluid.annotations.FluidField ( " nFe " ) PedidoDeAutorizacaoDaNFE < T > addNFE ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) PedidoDeAutorizacaoDaNFE < T > withVersao ( java . lang . String versao ) ; } 
PedidoDeAutorizacaoDaNFE < T > addNFE ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) PedidoDeAutorizacaoDaNFE < T > withVersao ( java . lang . String versao ) ; } 
PedidoDeAutorizacaoDaNFE < T > withVersao ( java . lang . String versao ) ; } 
PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withTipoDoAmbiente ( java . lang . String ipoDoAmbiente ) ; @net.vidageek.fluid.annotations.FluidField ( " nRec " ) PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withNumeroDoRecibo ( java . lang . String numeroDoRecibo ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersao ( java . lang . String versao ) ; } 
PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withNumeroDoRecibo ( java . lang . String numeroDoRecibo ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersao ( java . lang . String versao ) ; } 
PedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersao ( java . lang . String versao ) ; } 
ProcessoReferenciado < T > withIdentificadorDoProcesso ( java . lang . String identificadorDoProcesso ) ; @net.vidageek.fluid.annotations.FluidField ( " indProc " ) ProcessoReferenciado < T > withOrigemDoProcesso ( br . com . caelum . stella . nfe . builder . enums . OrigemDoProcesso origemDoProcesso ) ; } 
ProcessoReferenciado < T > withOrigemDoProcesso ( br . com . caelum . stella . nfe . builder . enums . OrigemDoProcesso origemDoProcesso ) ; } 
Produto < T > withValorDoFrete ( java . math . BigDecimal valorDoFrete ) ; @net.vidageek.fluid.annotations.FluidField ( " vSeg " ) Produto < T > withValorDoSeguro ( java . math . BigDecimal valorDoSeguro ) ; @net.vidageek.fluid.annotations.FluidField ( " vDesc " ) Produto < T > withValorDeDesconto ( java . math . BigDecimal ValorDeDesconto ) ; @net.vidageek.fluid.annotations.FluidField ( " di " ) Produto < T > addDI ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicProd " ) VeiculoNovo < Produto < T > > withVeiculoNovo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " med " ) Produto < T > addMedicamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " arma " ) Produto < T > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
Produto < T > withValorDoSeguro ( java . math . BigDecimal valorDoSeguro ) ; @net.vidageek.fluid.annotations.FluidField ( " vDesc " ) Produto < T > withValorDeDesconto ( java . math . BigDecimal ValorDeDesconto ) ; @net.vidageek.fluid.annotations.FluidField ( " di " ) Produto < T > addDI ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicProd " ) VeiculoNovo < Produto < T > > withVeiculoNovo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " med " ) Produto < T > addMedicamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " arma " ) Produto < T > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
Produto < T > withValorDeDesconto ( java . math . BigDecimal ValorDeDesconto ) ; @net.vidageek.fluid.annotations.FluidField ( " di " ) Produto < T > addDI ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicProd " ) VeiculoNovo < Produto < T > > withVeiculoNovo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " med " ) Produto < T > addMedicamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " arma " ) Produto < T > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
Produto < T > addDI ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicProd " ) VeiculoNovo < Produto < T > > withVeiculoNovo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " med " ) Produto < T > addMedicamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " arma " ) Produto < T > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
VeiculoNovo < Produto < T > > withVeiculoNovo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " med " ) Produto < T > addMedicamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " arma " ) Produto < T > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
Produto < T > addMedicamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " arma " ) Produto < T > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
Produto < T > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
Protocolo < T > withDataEHoraDoProcessamento ( java . lang . String dataEHoraDoProcessamento ) ; @net.vidageek.fluid.annotations.FluidField ( " nProt " ) Protocolo < T > withNumeroDoProtocoloDeStatusDaNFE ( java . lang . String numeroDoProtocoloDeStatusDaNFE ) ; @net.vidageek.fluid.annotations.FluidField ( " digVal " ) Protocolo < T > withDigestValue ( byte [ ] digestValue ) ; @net.vidageek.fluid.annotations.FluidField ( " cStat " ) Protocolo < T > withCodigoDeStatus ( java . lang . String codigoDeStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " xMotivo " ) Protocolo < T > withDescricaoDoMotivo ( java . lang . String descricaoDoMotivo ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) Protocolo < T > withId ( java . lang . String id ) ; } 
Protocolo < T > withNumeroDoProtocoloDeStatusDaNFE ( java . lang . String numeroDoProtocoloDeStatusDaNFE ) ; @net.vidageek.fluid.annotations.FluidField ( " digVal " ) Protocolo < T > withDigestValue ( byte [ ] digestValue ) ; @net.vidageek.fluid.annotations.FluidField ( " cStat " ) Protocolo < T > withCodigoDeStatus ( java . lang . String codigoDeStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " xMotivo " ) Protocolo < T > withDescricaoDoMotivo ( java . lang . String descricaoDoMotivo ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) Protocolo < T > withId ( java . lang . String id ) ; } 
Protocolo < T > withDigestValue ( byte [ ] digestValue ) ; @net.vidageek.fluid.annotations.FluidField ( " cStat " ) Protocolo < T > withCodigoDeStatus ( java . lang . String codigoDeStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " xMotivo " ) Protocolo < T > withDescricaoDoMotivo ( java . lang . String descricaoDoMotivo ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) Protocolo < T > withId ( java . lang . String id ) ; } 
Protocolo < T > withCodigoDeStatus ( java . lang . String codigoDeStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " xMotivo " ) Protocolo < T > withDescricaoDoMotivo ( java . lang . String descricaoDoMotivo ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) Protocolo < T > withId ( java . lang . String id ) ; } 
Protocolo < T > withDescricaoDoMotivo ( java . lang . String descricaoDoMotivo ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) Protocolo < T > withId ( java . lang . String id ) ; } 
Protocolo < ProtocoloDoResultadoDeProcessamento < T > > withDadosDoProtocolo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " signature " ) SignatureType < ProtocoloDoResultadoDeProcessamento < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) ProtocoloDoResultadoDeProcessamento < T > withVersao ( java . lang . String versao ) ; } 
SignatureType < ProtocoloDoResultadoDeProcessamento < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) ProtocoloDoResultadoDeProcessamento < T > withVersao ( java . lang . String versao ) ; } 
ProtocoloDoResultadoDeProcessamento < T > withVersao ( java . lang . String versao ) ; } 
ReciboDoLote < T > withNumeroDoRecibo ( java . lang . String numeroDoRecibo ) ; @net.vidageek.fluid.annotations.FluidField ( " dhRecbto " ) ReciboDoLote < T > withDataEHoraDoRecebimento ( java . lang . String dataEHoraDoRecebimento ) ; @net.vidageek.fluid.annotations.FluidField ( " Med " ) ReciboDoLote < T > withTempoMedioDeResposta ( java . lang . String empoMedioDeResposta ) ; } 
ReciboDoLote < T > withDataEHoraDoRecebimento ( java . lang . String dataEHoraDoRecebimento ) ; @net.vidageek.fluid.annotations.FluidField ( " Med " ) ReciboDoLote < T > withTempoMedioDeResposta ( java . lang . String empoMedioDeResposta ) ; } 
ReciboDoLote < T > withTempoMedioDeResposta ( java . lang . String empoMedioDeResposta ) ; } 
TransformsType < ReferenceType < T > > withTransforms ( ) ; @net.vidageek.fluid.annotations.FluidField ( " digestMethod " ) DigestMethod < ReferenceType < T > > withDigestMethod ( ) ; @net.vidageek.fluid.annotations.FluidField ( " digestValue " ) ReferenceType < T > withDigestValue ( byte [ ] digestValue ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) ReferenceType < T > withId ( java . lang . String id ) ; @net.vidageek.fluid.annotations.FluidField ( " uri " ) ReferenceType < T > withUri ( java . lang . String uri ) ; @net.vidageek.fluid.annotations.FluidField ( " ype " ) ReferenceType < T > withType ( java . lang . String ype ) ; } 
DigestMethod < ReferenceType < T > > withDigestMethod ( ) ; @net.vidageek.fluid.annotations.FluidField ( " digestValue " ) ReferenceType < T > withDigestValue ( byte [ ] digestValue ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) ReferenceType < T > withId ( java . lang . String id ) ; @net.vidageek.fluid.annotations.FluidField ( " uri " ) ReferenceType < T > withUri ( java . lang . String uri ) ; @net.vidageek.fluid.annotations.FluidField ( " ype " ) ReferenceType < T > withType ( java . lang . String ype ) ; } 
ReferenceType < T > withDigestValue ( byte [ ] digestValue ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) ReferenceType < T > withId ( java . lang . String id ) ; @net.vidageek.fluid.annotations.FluidField ( " uri " ) ReferenceType < T > withUri ( java . lang . String uri ) ; @net.vidageek.fluid.annotations.FluidField ( " ype " ) ReferenceType < T > withType ( java . lang . String ype ) ; } 
ReferenceType < T > withId ( java . lang . String id ) ; @net.vidageek.fluid.annotations.FluidField ( " uri " ) ReferenceType < T > withUri ( java . lang . String uri ) ; @net.vidageek.fluid.annotations.FluidField ( " ype " ) ReferenceType < T > withType ( java . lang . String ype ) ; } 
ReferenceType < T > withUri ( java . lang . String uri ) ; @net.vidageek.fluid.annotations.FluidField ( " ype " ) ReferenceType < T > withType ( java . lang . String ype ) ; } 
RetencaoDeTributosFederais < T > withValorRetencaoCOFINS ( java . lang . String valorRetencaoCOFINS ) ; @net.vidageek.fluid.annotations.FluidField ( " vRetCSLL " ) RetencaoDeTributosFederais < T > withVRetCSLL ( java . lang . String vRetCSLL ) ; @net.vidageek.fluid.annotations.FluidField ( " vbcirrf " ) RetencaoDeTributosFederais < T > withVbcirrf ( java . lang . String vbcirrf ) ; @net.vidageek.fluid.annotations.FluidField ( " virrf " ) RetencaoDeTributosFederais < T > withVirrf ( java . lang . String virrf ) ; @net.vidageek.fluid.annotations.FluidField ( " vbcRetPrev " ) RetencaoDeTributosFederais < T > withVbcRetPrev ( java . lang . String vbcRetPrev ) ; @net.vidageek.fluid.annotations.FluidField ( " vRetPrev " ) RetencaoDeTributosFederais < T > withVRetPrev ( java . lang . String vRetPrev ) ; } 
RetencaoDeTributosFederais < T > withVRetCSLL ( java . lang . String vRetCSLL ) ; @net.vidageek.fluid.annotations.FluidField ( " vbcirrf " ) RetencaoDeTributosFederais < T > withVbcirrf ( java . lang . String vbcirrf ) ; @net.vidageek.fluid.annotations.FluidField ( " virrf " ) RetencaoDeTributosFederais < T > withVirrf ( java . lang . String virrf ) ; @net.vidageek.fluid.annotations.FluidField ( " vbcRetPrev " ) RetencaoDeTributosFederais < T > withVbcRetPrev ( java . lang . String vbcRetPrev ) ; @net.vidageek.fluid.annotations.FluidField ( " vRetPrev " ) RetencaoDeTributosFederais < T > withVRetPrev ( java . lang . String vRetPrev ) ; } 
RetencaoDeTributosFederais < T > withVbcirrf ( java . lang . String vbcirrf ) ; @net.vidageek.fluid.annotations.FluidField ( " virrf " ) RetencaoDeTributosFederais < T > withVirrf ( java . lang . String virrf ) ; @net.vidageek.fluid.annotations.FluidField ( " vbcRetPrev " ) RetencaoDeTributosFederais < T > withVbcRetPrev ( java . lang . String vbcRetPrev ) ; @net.vidageek.fluid.annotations.FluidField ( " vRetPrev " ) RetencaoDeTributosFederais < T > withVRetPrev ( java . lang . String vRetPrev ) ; } 
RetencaoDeTributosFederais < T > withVirrf ( java . lang . String virrf ) ; @net.vidageek.fluid.annotations.FluidField ( " vbcRetPrev " ) RetencaoDeTributosFederais < T > withVbcRetPrev ( java . lang . String vbcRetPrev ) ; @net.vidageek.fluid.annotations.FluidField ( " vRetPrev " ) RetencaoDeTributosFederais < T > withVRetPrev ( java . lang . String vRetPrev ) ; } 
RetencaoDeTributosFederais < T > withVbcRetPrev ( java . lang . String vbcRetPrev ) ; @net.vidageek.fluid.annotations.FluidField ( " vRetPrev " ) RetencaoDeTributosFederais < T > withVRetPrev ( java . lang . String vRetPrev ) ; } 
RetencaoDeTributosFederais < T > withVRetPrev ( java . lang . String vRetPrev ) ; } 
SignatureMethod < T > withAlgorithm ( java . lang . String algorithm ) ; } 
SignedInfoType < SignatureType < T > > withSignedInfo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " signatureValue " ) SignatureValueType < SignatureType < T > > withSignatureValue ( ) ; @net.vidageek.fluid.annotations.FluidField ( " keyInfo " ) KeyInfoType < SignatureType < T > > withKeyInfo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) SignatureType < T > withId ( java . lang . String id ) ; } 
SignatureValueType < SignatureType < T > > withSignatureValue ( ) ; @net.vidageek.fluid.annotations.FluidField ( " keyInfo " ) KeyInfoType < SignatureType < T > > withKeyInfo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) SignatureType < T > withId ( java . lang . String id ) ; } 
KeyInfoType < SignatureType < T > > withKeyInfo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) SignatureType < T > withId ( java . lang . String id ) ; } 
SignatureValueType < T > withValue ( byte [ ] value ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) SignatureValueType < T > withId ( java . lang . String id ) ; } 
CanonicalizationMethod < SignedInfoType < T > > withCanonicalizationMethod ( ) ; @net.vidageek.fluid.annotations.FluidField ( " signatureMethod " ) SignatureMethod < SignedInfoType < T > > withSignatureMethod ( ) ; @net.vidageek.fluid.annotations.FluidField ( " reference " ) ReferenceType < SignedInfoType < T > > withReference ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) SignedInfoType < T > withId ( java . lang . String id ) ; } 
SignatureMethod < SignedInfoType < T > > withSignatureMethod ( ) ; @net.vidageek.fluid.annotations.FluidField ( " reference " ) ReferenceType < SignedInfoType < T > > withReference ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) SignedInfoType < T > withId ( java . lang . String id ) ; } 
ReferenceType < SignedInfoType < T > > withReference ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) SignedInfoType < T > withId ( java . lang . String id ) ; } 
InfAtuCadEmiDFe < TAtuCadEmiDFe < T > > withInfAtuCadEmiDFe ( ) ; @net.vidageek.fluid.annotations.FluidField ( " signature " ) SignatureType < TAtuCadEmiDFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TAtuCadEmiDFe < T > withVersao ( java . lang . String versao ) ; } 
SignatureType < TAtuCadEmiDFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TAtuCadEmiDFe < T > withVersao ( java . lang . String versao ) ; } 
TAtuCadEmiDFe < T > withVersao ( java . lang . String versao ) ; } 
InfCadEmiDFe < TCadEmiDFe < T > > withInfCadEmiDFe ( ) ; @net.vidageek.fluid.annotations.FluidField ( " signature " ) SignatureType < TCadEmiDFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TCadEmiDFe < T > withVersao ( java . lang . String versao ) ; } 
SignatureType < TCadEmiDFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TCadEmiDFe < T > withVersao ( java . lang . String versao ) ; } 
InfCanc < TCancNFe < T > > withInfCanc ( ) ; @net.vidageek.fluid.annotations.FluidField ( " signature " ) SignatureType < TCancNFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TCancNFe < T > withVersao ( java . lang . String versao ) ; } 
SignatureType < TCancNFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TCancNFe < T > withVersao ( java . lang . String versao ) ; } 
InfCons < TConsCad < T > > withInfCons ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TConsCad < T > withVersao ( java . lang . String versao ) ; } 
TConsSitNFe < T > withTpAmb ( java . lang . String pAmb ) ; @net.vidageek.fluid.annotations.FluidField ( " xServ " ) TConsSitNFe < T > withXServ ( java . lang . String xServ ) ; @net.vidageek.fluid.annotations.FluidField ( " chNFe " ) TConsSitNFe < T > withChNFe ( java . lang . String chNFe ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TConsSitNFe < T > withVersao ( java . lang . String versao ) ; } 
TConsSitNFe < T > withXServ ( java . lang . String xServ ) ; @net.vidageek.fluid.annotations.FluidField ( " chNFe " ) TConsSitNFe < T > withChNFe ( java . lang . String chNFe ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TConsSitNFe < T > withVersao ( java . lang . String versao ) ; } 
TConsSitNFe < T > withChNFe ( java . lang . String chNFe ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TConsSitNFe < T > withVersao ( java . lang . String versao ) ; } 
TConsStatServ < T > withTpAmb ( java . lang . String pAmb ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) TConsStatServ < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " xServ " ) TConsStatServ < T > withXServ ( java . lang . String xServ ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TConsStatServ < T > withVersao ( java . lang . String versao ) ; } 
TConsStatServ < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " xServ " ) TConsStatServ < T > withXServ ( java . lang . String xServ ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TConsStatServ < T > withVersao ( java . lang . String versao ) ; } 
TConsStatServ < T > withXServ ( java . lang . String xServ ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TConsStatServ < T > withVersao ( java . lang . String versao ) ; } 
TConsStatServ < T > withVersao ( java . lang . String versao ) ; } 
TEmissor < T > withUf ( br . com . caelum . stella . nfe . modelo . TUf uf ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) TEmissor < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpjMatriz " ) TEmissor < T > withCnpjMatriz ( java . lang . String cnpjMatriz ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) TEmissor < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " dFe " ) TEmissor < T > addDFe ( ) ; } 
TEmissor < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpjMatriz " ) TEmissor < T > withCnpjMatriz ( java . lang . String cnpjMatriz ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) TEmissor < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " dFe " ) TEmissor < T > addDFe ( ) ; } 
TEmissor < T > withCnpjMatriz ( java . lang . String cnpjMatriz ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) TEmissor < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " dFe " ) TEmissor < T > addDFe ( ) ; } 
TEmissor < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " dFe " ) TEmissor < T > addDFe ( ) ; } 
InfInut < TInutNFe < T > > withInfInut ( ) ; @net.vidageek.fluid.annotations.FluidField ( " signature " ) SignatureType < TInutNFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TInutNFe < T > withVersao ( java . lang . String versao ) ; } 
SignatureType < TInutNFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TInutNFe < T > withVersao ( java . lang . String versao ) ; } 
TCancNFe < TProcCancNFe < T > > withCancNFe ( ) ; @net.vidageek.fluid.annotations.FluidField ( " retCancNFe " ) TRetCancNFe < TProcCancNFe < T > > withRetCancNFe ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TProcCancNFe < T > withVersao ( java . lang . String versao ) ; } 
TRetCancNFe < TProcCancNFe < T > > withRetCancNFe ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TProcCancNFe < T > withVersao ( java . lang . String versao ) ; } 
TProcCancNFe < T > withVersao ( java . lang . String versao ) ; } 
TInutNFe < TProcInutNFe < T > > withInutNFe ( ) ; @net.vidageek.fluid.annotations.FluidField ( " retInutNFe " ) TRetInutNFe < TProcInutNFe < T > > withRetInutNFe ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TProcInutNFe < T > withVersao ( java . lang . String versao ) ; } 
TRetInutNFe < TProcInutNFe < T > > withRetInutNFe ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TProcInutNFe < T > withVersao ( java . lang . String versao ) ; } 
TProcInutNFe < T > withVersao ( java . lang . String versao ) ; } 
InfRetAtuCadEmiDFe < TRetAtuCadEmiDFe < T > > withInfRetAtuCadEmiDFe ( ) ; @net.vidageek.fluid.annotations.FluidField ( " signature " ) SignatureType < TRetAtuCadEmiDFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetAtuCadEmiDFe < T > withVersao ( java . lang . String versao ) ; } 
SignatureType < TRetAtuCadEmiDFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetAtuCadEmiDFe < T > withVersao ( java . lang . String versao ) ; } 
TRetAtuCadEmiDFe < T > withVersao ( java . lang . String versao ) ; } 
InfCanc < TRetCancNFe < T > > withInfCanc ( ) ; @net.vidageek.fluid.annotations.FluidField ( " signature " ) SignatureType < TRetCancNFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetCancNFe < T > withVersao ( java . lang . String versao ) ; } 
SignatureType < TRetCancNFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetCancNFe < T > withVersao ( java . lang . String versao ) ; } 
InfCons < TRetConsCad < T > > withInfCons ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetConsCad < T > withVersao ( java . lang . String versao ) ; } 
Protocolo < TRetConsSitNFe < T > > withInfProt ( ) ; @net.vidageek.fluid.annotations.FluidField ( " signature " ) SignatureType < TRetConsSitNFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetConsSitNFe < T > withVersao ( java . lang . String versao ) ; } 
SignatureType < TRetConsSitNFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetConsSitNFe < T > withVersao ( java . lang . String versao ) ; } 
TRetConsSitNFe < T > withVersao ( java . lang . String versao ) ; } 
TRetConsStatServ < T > withXMotivo ( java . lang . String xMotivo ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) TRetConsStatServ < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " dhRecbto " ) TRetConsStatServ < T > withDhRecbto ( java . lang . String dhRecbto ) ; @net.vidageek.fluid.annotations.FluidField ( " Med " ) TRetConsStatServ < T > withTMed ( java . lang . String Med ) ; @net.vidageek.fluid.annotations.FluidField ( " dhRetorno " ) TRetConsStatServ < T > withDhRetorno ( java . lang . String dhRetorno ) ; @net.vidageek.fluid.annotations.FluidField ( " xObs " ) TRetConsStatServ < T > withXObs ( java . lang . String xObs ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetConsStatServ < T > withVersao ( java . lang . String versao ) ; } 
TRetConsStatServ < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " dhRecbto " ) TRetConsStatServ < T > withDhRecbto ( java . lang . String dhRecbto ) ; @net.vidageek.fluid.annotations.FluidField ( " Med " ) TRetConsStatServ < T > withTMed ( java . lang . String Med ) ; @net.vidageek.fluid.annotations.FluidField ( " dhRetorno " ) TRetConsStatServ < T > withDhRetorno ( java . lang . String dhRetorno ) ; @net.vidageek.fluid.annotations.FluidField ( " xObs " ) TRetConsStatServ < T > withXObs ( java . lang . String xObs ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetConsStatServ < T > withVersao ( java . lang . String versao ) ; } 
TRetConsStatServ < T > withDhRecbto ( java . lang . String dhRecbto ) ; @net.vidageek.fluid.annotations.FluidField ( " Med " ) TRetConsStatServ < T > withTMed ( java . lang . String Med ) ; @net.vidageek.fluid.annotations.FluidField ( " dhRetorno " ) TRetConsStatServ < T > withDhRetorno ( java . lang . String dhRetorno ) ; @net.vidageek.fluid.annotations.FluidField ( " xObs " ) TRetConsStatServ < T > withXObs ( java . lang . String xObs ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetConsStatServ < T > withVersao ( java . lang . String versao ) ; } 
TRetConsStatServ < T > withTMed ( java . lang . String Med ) ; @net.vidageek.fluid.annotations.FluidField ( " dhRetorno " ) TRetConsStatServ < T > withDhRetorno ( java . lang . String dhRetorno ) ; @net.vidageek.fluid.annotations.FluidField ( " xObs " ) TRetConsStatServ < T > withXObs ( java . lang . String xObs ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetConsStatServ < T > withVersao ( java . lang . String versao ) ; } 
TRetConsStatServ < T > withDhRetorno ( java . lang . String dhRetorno ) ; @net.vidageek.fluid.annotations.FluidField ( " xObs " ) TRetConsStatServ < T > withXObs ( java . lang . String xObs ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetConsStatServ < T > withVersao ( java . lang . String versao ) ; } 
TRetConsStatServ < T > withXObs ( java . lang . String xObs ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetConsStatServ < T > withVersao ( java . lang . String versao ) ; } 
TRetConsStatServ < T > withVersao ( java . lang . String versao ) ; } 
InfInut < TRetInutNFe < T > > withInfInut ( ) ; @net.vidageek.fluid.annotations.FluidField ( " signature " ) SignatureType < TRetInutNFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetInutNFe < T > withVersao ( java . lang . String versao ) ; } 
SignatureType < TRetInutNFe < T > > withSignature ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) TRetInutNFe < T > withVersao ( java . lang . String versao ) ; } 
ICMSTotal < TotalNFE < T > > withICMSTotal ( ) ; @net.vidageek.fluid.annotations.FluidField ( " issqNtot " ) ISSQNtot < TotalNFE < T > > withISSQNTotal ( ) ; @net.vidageek.fluid.annotations.FluidField ( " retTrib " ) RetencaoDeTributosFederais < TotalNFE < T > > withRetencaoDeTributosFederais ( ) ; } 
ISSQNtot < TotalNFE < T > > withISSQNTotal ( ) ; @net.vidageek.fluid.annotations.FluidField ( " retTrib " ) RetencaoDeTributosFederais < TotalNFE < T > > withRetencaoDeTributosFederais ( ) ; } 
RetencaoDeTributosFederais < TotalNFE < T > > withRetencaoDeTributosFederais ( ) ; } 
TransformType < T > addXPath ( java . lang . String xPath ) ; @net.vidageek.fluid.annotations.FluidField ( " algorithm " ) TransformType < T > withAlgorithm ( java . lang . String algorithm ) ; } 
TransformType < T > withAlgorithm ( java . lang . String algorithm ) ; } 
Transporte < T > withModalidadeDoFrete ( java . lang . String modalidadeDoFrete ) ; @net.vidageek.fluid.annotations.FluidField ( " ransporta " ) ransportador < Transporte < T > > withTransportador ( ) ; @net.vidageek.fluid.annotations.FluidField ( " retTransp " ) ICMSRetidoPeloTransporte < Transporte < T > > withICMSRetidoPeloTransporte ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicTransp " ) Veiculo < Transporte < T > > withVeiculoUsado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " reboque " ) Transporte < T > addReboque ( ) ; @net.vidageek.fluid.annotations.FluidField ( " vol " ) Transporte < T > addVolume ( ) ; } 
ransportador < Transporte < T > > withTransportador ( ) ; @net.vidageek.fluid.annotations.FluidField ( " retTransp " ) ICMSRetidoPeloTransporte < Transporte < T > > withICMSRetidoPeloTransporte ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicTransp " ) Veiculo < Transporte < T > > withVeiculoUsado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " reboque " ) Transporte < T > addReboque ( ) ; @net.vidageek.fluid.annotations.FluidField ( " vol " ) Transporte < T > addVolume ( ) ; } 
ICMSRetidoPeloTransporte < Transporte < T > > withICMSRetidoPeloTransporte ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicTransp " ) Veiculo < Transporte < T > > withVeiculoUsado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " reboque " ) Transporte < T > addReboque ( ) ; @net.vidageek.fluid.annotations.FluidField ( " vol " ) Transporte < T > addVolume ( ) ; } 
Veiculo < Transporte < T > > withVeiculoUsado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " reboque " ) Transporte < T > addReboque ( ) ; @net.vidageek.fluid.annotations.FluidField ( " vol " ) Transporte < T > addVolume ( ) ; } 
Transporte < T > addReboque ( ) ; @net.vidageek.fluid.annotations.FluidField ( " vol " ) Transporte < T > addVolume ( ) ; } 
Veiculo < T > withPlaca ( java . lang . String placa ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) Veiculo < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; @net.vidageek.fluid.annotations.FluidField ( " rntc " ) Veiculo < T > withRegistroNacionalDoTransportadorDeCarga ( java . lang . String registroNacionalDoTransportadorDeCarga ) ; } 
Veiculo < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; @net.vidageek.fluid.annotations.FluidField ( " rntc " ) Veiculo < T > withRegistroNacionalDoTransportadorDeCarga ( java . lang . String registroNacionalDoTransportadorDeCarga ) ; } 
Veiculo < T > withRegistroNacionalDoTransportadorDeCarga ( java . lang . String registroNacionalDoTransportadorDeCarga ) ; } 
VeiculoNovo < T > withTipoDePintura ( java . lang . String ipoDePintura ) ; @net.vidageek.fluid.annotations.FluidField ( " pVeic " ) VeiculoNovo < T > withTipoDeVeiculo ( java . lang . String ipoDeVeiculo ) ; @net.vidageek.fluid.annotations.FluidField ( " espVeic " ) VeiculoNovo < T > withEspecieDeVeiculo ( java . lang . String especieDeVeiculo ) ; @net.vidageek.fluid.annotations.FluidField ( " vin " ) VeiculoNovo < T > withVehicleIdentificationNumber ( java . lang . String vehicleIdentificationNumber ) ; @net.vidageek.fluid.annotations.FluidField ( " condVeic " ) VeiculoNovo < T > withCondicaoDoVeiculo ( java . lang . String condicaoDoVeiculo ) ; @net.vidageek.fluid.annotations.FluidField ( " cMod " ) VeiculoNovo < T > withCodigoDaMarcaDoModelo ( java . lang . String codigoDaMarcaDoModelo ) ; } 
VeiculoNovo < T > withTipoDeVeiculo ( java . lang . String ipoDeVeiculo ) ; @net.vidageek.fluid.annotations.FluidField ( " espVeic " ) VeiculoNovo < T > withEspecieDeVeiculo ( java . lang . String especieDeVeiculo ) ; @net.vidageek.fluid.annotations.FluidField ( " vin " ) VeiculoNovo < T > withVehicleIdentificationNumber ( java . lang . String vehicleIdentificationNumber ) ; @net.vidageek.fluid.annotations.FluidField ( " condVeic " ) VeiculoNovo < T > withCondicaoDoVeiculo ( java . lang . String condicaoDoVeiculo ) ; @net.vidageek.fluid.annotations.FluidField ( " cMod " ) VeiculoNovo < T > withCodigoDaMarcaDoModelo ( java . lang . String codigoDaMarcaDoModelo ) ; } 
VeiculoNovo < T > withEspecieDeVeiculo ( java . lang . String especieDeVeiculo ) ; @net.vidageek.fluid.annotations.FluidField ( " vin " ) VeiculoNovo < T > withVehicleIdentificationNumber ( java . lang . String vehicleIdentificationNumber ) ; @net.vidageek.fluid.annotations.FluidField ( " condVeic " ) VeiculoNovo < T > withCondicaoDoVeiculo ( java . lang . String condicaoDoVeiculo ) ; @net.vidageek.fluid.annotations.FluidField ( " cMod " ) VeiculoNovo < T > withCodigoDaMarcaDoModelo ( java . lang . String codigoDaMarcaDoModelo ) ; } 
VeiculoNovo < T > withVehicleIdentificationNumber ( java . lang . String vehicleIdentificationNumber ) ; @net.vidageek.fluid.annotations.FluidField ( " condVeic " ) VeiculoNovo < T > withCondicaoDoVeiculo ( java . lang . String condicaoDoVeiculo ) ; @net.vidageek.fluid.annotations.FluidField ( " cMod " ) VeiculoNovo < T > withCodigoDaMarcaDoModelo ( java . lang . String codigoDaMarcaDoModelo ) ; } 
VeiculoNovo < T > withCondicaoDoVeiculo ( java . lang . String condicaoDoVeiculo ) ; @net.vidageek.fluid.annotations.FluidField ( " cMod " ) VeiculoNovo < T > withCodigoDaMarcaDoModelo ( java . lang . String codigoDaMarcaDoModelo ) ; } 
VeiculoNovo < T > withCodigoDaMarcaDoModelo ( java . lang . String codigoDaMarcaDoModelo ) ; } 
Volume < T > withQuantidade ( java . lang . String quantidade ) ; @net.vidageek.fluid.annotations.FluidField ( " esp " ) Volume < T > withEspecie ( java . lang . String especie ) ; @net.vidageek.fluid.annotations.FluidField ( " marca " ) Volume < T > withMarca ( java . lang . String marca ) ; @net.vidageek.fluid.annotations.FluidField ( " nVol " ) Volume < T > withNumeracao ( java . lang . String numeracao ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoL " ) Volume < T > withPesoLiquido ( java . lang . String pesoLiquido ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoB " ) Volume < T > withPesoBruto ( java . lang . String pesoBruto ) ; @net.vidageek.fluid.annotations.FluidField ( " lacres " ) Volume < T > addLacres ( ) ; } 
Volume < T > withEspecie ( java . lang . String especie ) ; @net.vidageek.fluid.annotations.FluidField ( " marca " ) Volume < T > withMarca ( java . lang . String marca ) ; @net.vidageek.fluid.annotations.FluidField ( " nVol " ) Volume < T > withNumeracao ( java . lang . String numeracao ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoL " ) Volume < T > withPesoLiquido ( java . lang . String pesoLiquido ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoB " ) Volume < T > withPesoBruto ( java . lang . String pesoBruto ) ; @net.vidageek.fluid.annotations.FluidField ( " lacres " ) Volume < T > addLacres ( ) ; } 
Volume < T > withMarca ( java . lang . String marca ) ; @net.vidageek.fluid.annotations.FluidField ( " nVol " ) Volume < T > withNumeracao ( java . lang . String numeracao ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoL " ) Volume < T > withPesoLiquido ( java . lang . String pesoLiquido ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoB " ) Volume < T > withPesoBruto ( java . lang . String pesoBruto ) ; @net.vidageek.fluid.annotations.FluidField ( " lacres " ) Volume < T > addLacres ( ) ; } 
Volume < T > withNumeracao ( java . lang . String numeracao ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoL " ) Volume < T > withPesoLiquido ( java . lang . String pesoLiquido ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoB " ) Volume < T > withPesoBruto ( java . lang . String pesoBruto ) ; @net.vidageek.fluid.annotations.FluidField ( " lacres " ) Volume < T > addLacres ( ) ; } 
Volume < T > withPesoLiquido ( java . lang . String pesoLiquido ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoB " ) Volume < T > withPesoBruto ( java . lang . String pesoBruto ) ; @net.vidageek.fluid.annotations.FluidField ( " lacres " ) Volume < T > addLacres ( ) ; } 
Volume < T > withPesoBruto ( java . lang . String pesoBruto ) ; @net.vidageek.fluid.annotations.FluidField ( " lacres " ) Volume < T > addLacres ( ) ; } 
X509DataType < T > withX509Certificate ( byte [ ] x509Certificate ) ; } 
retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDeStatus ( java . lang . String codigoDeStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " xMotivo " ) retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withDescricaoDoStatus ( java . lang . String descricaoDoStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDaUF ( java . lang . String codigoDaUF ) ; @net.vidageek.fluid.annotations.FluidField ( " infRec " ) ReciboDoLote < retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > > withReciboDoLote ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( java . lang . String versaoDaNFE ) ; } 
retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withDescricaoDoStatus ( java . lang . String descricaoDoStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDaUF ( java . lang . String codigoDaUF ) ; @net.vidageek.fluid.annotations.FluidField ( " infRec " ) ReciboDoLote < retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > > withReciboDoLote ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( java . lang . String versaoDaNFE ) ; } 
retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withCodigoDaUF ( java . lang . String codigoDaUF ) ; @net.vidageek.fluid.annotations.FluidField ( " infRec " ) ReciboDoLote < retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > > withReciboDoLote ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( java . lang . String versaoDaNFE ) ; } 
ReciboDoLote < retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > > withReciboDoLote ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( java . lang . String versaoDaNFE ) ; } 
retornoDoPedidoDeConcessaoDeAutorizacaoDaNFE < T > withVersaoDaNFE ( java . lang . String versaoDaNFE ) ; } 
retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDeStatus ( java . lang . String codigoDeStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " xMotivo " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withDescricaoDoStatus ( java . lang . String descricaoDoStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDaUF ( java . lang . String codigoDaUF ) ; @net.vidageek.fluid.annotations.FluidField ( " protNFe " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > addProtocoloDoResultadoDeProcessamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( java . lang . String versaoNFE ) ; } 
retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withDescricaoDoStatus ( java . lang . String descricaoDoStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDaUF ( java . lang . String codigoDaUF ) ; @net.vidageek.fluid.annotations.FluidField ( " protNFe " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > addProtocoloDoResultadoDeProcessamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( java . lang . String versaoNFE ) ; } 
retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDaUF ( java . lang . String codigoDaUF ) ; @net.vidageek.fluid.annotations.FluidField ( " protNFe " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > addProtocoloDoResultadoDeProcessamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( java . lang . String versaoNFE ) ; } 
retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > addProtocoloDoResultadoDeProcessamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( java . lang . String versaoNFE ) ; } 
retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( java . lang . String versaoNFE ) ; } 
ransportador < T > withCNPJ ( java . lang . String CNPJ ) ; @net.vidageek.fluid.annotations.FluidField ( " cpf " ) ransportador < T > withCPF ( java . lang . String CPF ) ; @net.vidageek.fluid.annotations.FluidField ( " xNome " ) ransportador < T > withNome ( java . lang . String nome ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) ransportador < T > withInscricaoEstadual ( java . lang . String inscricaoEstadual ) ; @net.vidageek.fluid.annotations.FluidField ( " xEnder " ) ransportador < T > withEnderecoCompleto ( java . lang . String enderecoCompleto ) ; @net.vidageek.fluid.annotations.FluidField ( " xMun " ) ransportador < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) ransportador < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
ransportador < T > withCPF ( java . lang . String CPF ) ; @net.vidageek.fluid.annotations.FluidField ( " xNome " ) ransportador < T > withNome ( java . lang . String nome ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) ransportador < T > withInscricaoEstadual ( java . lang . String inscricaoEstadual ) ; @net.vidageek.fluid.annotations.FluidField ( " xEnder " ) ransportador < T > withEnderecoCompleto ( java . lang . String enderecoCompleto ) ; @net.vidageek.fluid.annotations.FluidField ( " xMun " ) ransportador < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) ransportador < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
ransportador < T > withNome ( java . lang . String nome ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) ransportador < T > withInscricaoEstadual ( java . lang . String inscricaoEstadual ) ; @net.vidageek.fluid.annotations.FluidField ( " xEnder " ) ransportador < T > withEnderecoCompleto ( java . lang . String enderecoCompleto ) ; @net.vidageek.fluid.annotations.FluidField ( " xMun " ) ransportador < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) ransportador < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
ransportador < T > withInscricaoEstadual ( java . lang . String inscricaoEstadual ) ; @net.vidageek.fluid.annotations.FluidField ( " xEnder " ) ransportador < T > withEnderecoCompleto ( java . lang . String enderecoCompleto ) ; @net.vidageek.fluid.annotations.FluidField ( " xMun " ) ransportador < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) ransportador < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
ransportador < T > withEnderecoCompleto ( java . lang . String enderecoCompleto ) ; @net.vidageek.fluid.annotations.FluidField ( " xMun " ) ransportador < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) ransportador < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
ransportador < T > withNomeDoMunicipio ( java . lang . String nomeDoMunicipio ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) ransportador < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
ransportador < T > withUF ( br . com . caelum . stella . nfe . modelo . UF UF ) ; } 
private static String lowerCase ( final String interfaceName ) { return Character . oLowerCase ( interfaceName . charAt ( 0 ) ) + interfaceName . substring ( 1 ) ; } 
Fatura < Cobranca < T > > withFatura ( ) ; @net.vidageek.fluid.annotations.FluidField ( " dup " ) Duplicata < Cobranca < T > > addDuplicata ( ) ; } 
DeclaracaoDeImportacao < T > withLocalDeDesenbaraco ( java . lang . String localDeDesenbaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " ufDesemb " ) DeclaracaoDeImportacao < T > withUFDoDesembaraco ( br . com . caelum . stella . nfe . modelo . UF UFDoDesembaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " dDesemb " ) DeclaracaoDeImportacao < T > withDataDoDeembaraco ( java . util . Calendar dataDoDeembaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " cExportador " ) DeclaracaoDeImportacao < T > withCodigoDoExportador ( java . lang . String codigoDoExportador ) ; @net.vidageek.fluid.annotations.FluidField ( " adi " ) Adicao < DeclaracaoDeImportacao < T > > addAdicao ( ) ; } 
DeclaracaoDeImportacao < T > withUFDoDesembaraco ( br . com . caelum . stella . nfe . modelo . UF UFDoDesembaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " dDesemb " ) DeclaracaoDeImportacao < T > withDataDoDeembaraco ( java . util . Calendar dataDoDeembaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " cExportador " ) DeclaracaoDeImportacao < T > withCodigoDoExportador ( java . lang . String codigoDoExportador ) ; @net.vidageek.fluid.annotations.FluidField ( " adi " ) Adicao < DeclaracaoDeImportacao < T > > addAdicao ( ) ; } 
DeclaracaoDeImportacao < T > withDataDoDeembaraco ( java . util . Calendar dataDoDeembaraco ) ; @net.vidageek.fluid.annotations.FluidField ( " cExportador " ) DeclaracaoDeImportacao < T > withCodigoDoExportador ( java . lang . String codigoDoExportador ) ; @net.vidageek.fluid.annotations.FluidField ( " adi " ) Adicao < DeclaracaoDeImportacao < T > > addAdicao ( ) ; } 
DeclaracaoDeImportacao < T > withCodigoDoExportador ( java . lang . String codigoDoExportador ) ; @net.vidageek.fluid.annotations.FluidField ( " adi " ) Adicao < DeclaracaoDeImportacao < T > > addAdicao ( ) ; } 
InfCadEmiDFe < T > withDPubCad ( java . lang . String dPubCad ) ; @net.vidageek.fluid.annotations.FluidField ( " emissor " ) TEmissor < InfCadEmiDFe < T > > addEmissor ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfCadEmiDFe < T > withId ( java . lang . String id ) ; } 
TEmissor < InfCadEmiDFe < T > > addEmissor ( ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfCadEmiDFe < T > withId ( java . lang . String id ) ; } 
InfCons < T > withXMotivo ( java . lang . String xMotivo ) ; @net.vidageek.fluid.annotations.FluidField ( " uf " ) InfCons < T > withUf ( br . com . caelum . stella . nfe . modelo . TUfCons uf ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) InfCons < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) InfCons < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " cpf " ) InfCons < T > withCpf ( java . lang . String cpf ) ; @net.vidageek.fluid.annotations.FluidField ( " dhCons " ) InfCons < T > withDhCons ( java . lang . String dhCons ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCad < InfCons < T > > addInfCad ( ) ; } 
InfCons < T > withUf ( br . com . caelum . stella . nfe . modelo . TUfCons uf ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) InfCons < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) InfCons < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " cpf " ) InfCons < T > withCpf ( java . lang . String cpf ) ; @net.vidageek.fluid.annotations.FluidField ( " dhCons " ) InfCons < T > withDhCons ( java . lang . String dhCons ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCad < InfCons < T > > addInfCad ( ) ; } 
InfCons < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) InfCons < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " cpf " ) InfCons < T > withCpf ( java . lang . String cpf ) ; @net.vidageek.fluid.annotations.FluidField ( " dhCons " ) InfCons < T > withDhCons ( java . lang . String dhCons ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCad < InfCons < T > > addInfCad ( ) ; } 
InfCons < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " cpf " ) InfCons < T > withCpf ( java . lang . String cpf ) ; @net.vidageek.fluid.annotations.FluidField ( " dhCons " ) InfCons < T > withDhCons ( java . lang . String dhCons ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCad < InfCons < T > > addInfCad ( ) ; } 
InfCons < T > withCpf ( java . lang . String cpf ) ; @net.vidageek.fluid.annotations.FluidField ( " dhCons " ) InfCons < T > withDhCons ( java . lang . String dhCons ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCad < InfCons < T > > addInfCad ( ) ; } 
InfCons < T > withDhCons ( java . lang . String dhCons ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCad < InfCons < T > > addInfCad ( ) ; } 
InfCons < T > withCuf ( java . lang . String cuf ) ; @net.vidageek.fluid.annotations.FluidField ( " infCad " ) InfCad < InfCons < T > > addInfCad ( ) ; } 
InformacoesAdicionais < T > withInformacoesAdicionaisDeInteresseDoFisco ( java . lang . String InformacoesAdicionaisDeInteresseDoFisco ) ; @net.vidageek.fluid.annotations.FluidField ( " infCpl " ) InformacoesAdicionais < T > withInformacoesComplementares ( java . lang . String informacoesComplementares ) ; @net.vidageek.fluid.annotations.FluidField ( " obsCont " ) ObservacaoDoContribuinte < InformacoesAdicionais < T > > addObservacoesDoContribuinte ( ) ; @net.vidageek.fluid.annotations.FluidField ( " obsFisco " ) ObservacaoFisco < InformacoesAdicionais < T > > addObsFisco ( ) ; @net.vidageek.fluid.annotations.FluidField ( " procRef " ) ProcessoReferenciado < InformacoesAdicionais < T > > addProcRef ( ) ; } 
InformacoesAdicionais < T > withInformacoesComplementares ( java . lang . String informacoesComplementares ) ; @net.vidageek.fluid.annotations.FluidField ( " obsCont " ) ObservacaoDoContribuinte < InformacoesAdicionais < T > > addObservacoesDoContribuinte ( ) ; @net.vidageek.fluid.annotations.FluidField ( " obsFisco " ) ObservacaoFisco < InformacoesAdicionais < T > > addObsFisco ( ) ; @net.vidageek.fluid.annotations.FluidField ( " procRef " ) ProcessoReferenciado < InformacoesAdicionais < T > > addProcRef ( ) ; } 
ObservacaoDoContribuinte < InformacoesAdicionais < T > > addObservacoesDoContribuinte ( ) ; @net.vidageek.fluid.annotations.FluidField ( " obsFisco " ) ObservacaoFisco < InformacoesAdicionais < T > > addObsFisco ( ) ; @net.vidageek.fluid.annotations.FluidField ( " procRef " ) ProcessoReferenciado < InformacoesAdicionais < T > > addProcRef ( ) ; } 
ObservacaoFisco < InformacoesAdicionais < T > > addObsFisco ( ) ; @net.vidageek.fluid.annotations.FluidField ( " procRef " ) ProcessoReferenciado < InformacoesAdicionais < T > > addProcRef ( ) ; } 
ProcessoReferenciado < InformacoesAdicionais < T > > addProcRef ( ) ; } 
PedidoDeAutorizacaoDaNFE < T > withIdDoLote ( java . lang . String idDoLote ) ; @net.vidageek.fluid.annotations.FluidField ( " nFe " ) NFE < PedidoDeAutorizacaoDaNFE < T > > addNFE ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) PedidoDeAutorizacaoDaNFE < T > withVersao ( java . lang . String versao ) ; } 
NFE < PedidoDeAutorizacaoDaNFE < T > > addNFE ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) PedidoDeAutorizacaoDaNFE < T > withVersao ( java . lang . String versao ) ; } 
Produto < T > withValorDoSeguro ( java . math . BigDecimal valorDoSeguro ) ; @net.vidageek.fluid.annotations.FluidField ( " vDesc " ) Produto < T > withValorDeDesconto ( java . math . BigDecimal ValorDeDesconto ) ; @net.vidageek.fluid.annotations.FluidField ( " di " ) DeclaracaoDeImportacao < Produto < T > > addDI ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicProd " ) VeiculoNovo < Produto < T > > withVeiculoNovo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " med " ) Medicamento < Produto < T > > addMedicamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " arma " ) Armamento < Produto < T > > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
Produto < T > withValorDeDesconto ( java . math . BigDecimal ValorDeDesconto ) ; @net.vidageek.fluid.annotations.FluidField ( " di " ) DeclaracaoDeImportacao < Produto < T > > addDI ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicProd " ) VeiculoNovo < Produto < T > > withVeiculoNovo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " med " ) Medicamento < Produto < T > > addMedicamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " arma " ) Armamento < Produto < T > > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
DeclaracaoDeImportacao < Produto < T > > addDI ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicProd " ) VeiculoNovo < Produto < T > > withVeiculoNovo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " med " ) Medicamento < Produto < T > > addMedicamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " arma " ) Armamento < Produto < T > > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
VeiculoNovo < Produto < T > > withVeiculoNovo ( ) ; @net.vidageek.fluid.annotations.FluidField ( " med " ) Medicamento < Produto < T > > addMedicamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " arma " ) Armamento < Produto < T > > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
Medicamento < Produto < T > > addMedicamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " arma " ) Armamento < Produto < T > > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
Armamento < Produto < T > > addArmamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " comb " ) Combustivel < Produto < T > > withCombustivel ( ) ; } 
TEmissor < T > withUf ( br . com . caelum . stella . nfe . modelo . TUf uf ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) TEmissor < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpjMatriz " ) TEmissor < T > withCnpjMatriz ( java . lang . String cnpjMatriz ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) TEmissor < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " dFe " ) DFe < TEmissor < T > > addDFe ( ) ; } 
TEmissor < T > withCnpj ( java . lang . String cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpjMatriz " ) TEmissor < T > withCnpjMatriz ( java . lang . String cnpjMatriz ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) TEmissor < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " dFe " ) DFe < TEmissor < T > > addDFe ( ) ; } 
TEmissor < T > withCnpjMatriz ( java . lang . String cnpjMatriz ) ; @net.vidageek.fluid.annotations.FluidField ( " ie " ) TEmissor < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " dFe " ) DFe < TEmissor < T > > addDFe ( ) ; } 
TEmissor < T > withIe ( java . lang . String ie ) ; @net.vidageek.fluid.annotations.FluidField ( " dFe " ) DFe < TEmissor < T > > addDFe ( ) ; } 
Transporte < T > withModalidadeDoFrete ( java . lang . String modalidadeDoFrete ) ; @net.vidageek.fluid.annotations.FluidField ( " ransporta " ) ransportador < Transporte < T > > withTransportador ( ) ; @net.vidageek.fluid.annotations.FluidField ( " retTransp " ) ICMSRetidoPeloTransporte < Transporte < T > > withICMSRetidoPeloTransporte ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicTransp " ) Veiculo < Transporte < T > > withVeiculoUsado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " reboque " ) Veiculo < Transporte < T > > addReboque ( ) ; @net.vidageek.fluid.annotations.FluidField ( " vol " ) Volume < Transporte < T > > addVolume ( ) ; } 
ransportador < Transporte < T > > withTransportador ( ) ; @net.vidageek.fluid.annotations.FluidField ( " retTransp " ) ICMSRetidoPeloTransporte < Transporte < T > > withICMSRetidoPeloTransporte ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicTransp " ) Veiculo < Transporte < T > > withVeiculoUsado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " reboque " ) Veiculo < Transporte < T > > addReboque ( ) ; @net.vidageek.fluid.annotations.FluidField ( " vol " ) Volume < Transporte < T > > addVolume ( ) ; } 
ICMSRetidoPeloTransporte < Transporte < T > > withICMSRetidoPeloTransporte ( ) ; @net.vidageek.fluid.annotations.FluidField ( " veicTransp " ) Veiculo < Transporte < T > > withVeiculoUsado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " reboque " ) Veiculo < Transporte < T > > addReboque ( ) ; @net.vidageek.fluid.annotations.FluidField ( " vol " ) Volume < Transporte < T > > addVolume ( ) ; } 
Veiculo < Transporte < T > > withVeiculoUsado ( ) ; @net.vidageek.fluid.annotations.FluidField ( " reboque " ) Veiculo < Transporte < T > > addReboque ( ) ; @net.vidageek.fluid.annotations.FluidField ( " vol " ) Volume < Transporte < T > > addVolume ( ) ; } 
Veiculo < Transporte < T > > addReboque ( ) ; @net.vidageek.fluid.annotations.FluidField ( " vol " ) Volume < Transporte < T > > addVolume ( ) ; } 
Volume < T > withQuantidade ( java . lang . String quantidade ) ; @net.vidageek.fluid.annotations.FluidField ( " esp " ) Volume < T > withEspecie ( java . lang . String especie ) ; @net.vidageek.fluid.annotations.FluidField ( " marca " ) Volume < T > withMarca ( java . lang . String marca ) ; @net.vidageek.fluid.annotations.FluidField ( " nVol " ) Volume < T > withNumeracao ( java . lang . String numeracao ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoL " ) Volume < T > withPesoLiquido ( java . lang . String pesoLiquido ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoB " ) Volume < T > withPesoBruto ( java . lang . String pesoBruto ) ; @net.vidageek.fluid.annotations.FluidField ( " lacres " ) Lacres < Volume < T > > addLacres ( ) ; } 
Volume < T > withEspecie ( java . lang . String especie ) ; @net.vidageek.fluid.annotations.FluidField ( " marca " ) Volume < T > withMarca ( java . lang . String marca ) ; @net.vidageek.fluid.annotations.FluidField ( " nVol " ) Volume < T > withNumeracao ( java . lang . String numeracao ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoL " ) Volume < T > withPesoLiquido ( java . lang . String pesoLiquido ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoB " ) Volume < T > withPesoBruto ( java . lang . String pesoBruto ) ; @net.vidageek.fluid.annotations.FluidField ( " lacres " ) Lacres < Volume < T > > addLacres ( ) ; } 
Volume < T > withMarca ( java . lang . String marca ) ; @net.vidageek.fluid.annotations.FluidField ( " nVol " ) Volume < T > withNumeracao ( java . lang . String numeracao ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoL " ) Volume < T > withPesoLiquido ( java . lang . String pesoLiquido ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoB " ) Volume < T > withPesoBruto ( java . lang . String pesoBruto ) ; @net.vidageek.fluid.annotations.FluidField ( " lacres " ) Lacres < Volume < T > > addLacres ( ) ; } 
Volume < T > withNumeracao ( java . lang . String numeracao ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoL " ) Volume < T > withPesoLiquido ( java . lang . String pesoLiquido ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoB " ) Volume < T > withPesoBruto ( java . lang . String pesoBruto ) ; @net.vidageek.fluid.annotations.FluidField ( " lacres " ) Lacres < Volume < T > > addLacres ( ) ; } 
Volume < T > withPesoLiquido ( java . lang . String pesoLiquido ) ; @net.vidageek.fluid.annotations.FluidField ( " pesoB " ) Volume < T > withPesoBruto ( java . lang . String pesoBruto ) ; @net.vidageek.fluid.annotations.FluidField ( " lacres " ) Lacres < Volume < T > > addLacres ( ) ; } 
Volume < T > withPesoBruto ( java . lang . String pesoBruto ) ; @net.vidageek.fluid.annotations.FluidField ( " lacres " ) Lacres < Volume < T > > addLacres ( ) ; } 
retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDeStatus ( java . lang . String codigoDeStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " xMotivo " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withDescricaoDoStatus ( java . lang . String descricaoDoStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDaUF ( java . lang . String codigoDaUF ) ; @net.vidageek.fluid.annotations.FluidField ( " protNFe " ) ProtocoloDoResultadoDeProcessamento < retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > > addProtocoloDoResultadoDeProcessamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( java . lang . String versaoNFE ) ; } 
retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withDescricaoDoStatus ( java . lang . String descricaoDoStatus ) ; @net.vidageek.fluid.annotations.FluidField ( " cuf " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDaUF ( java . lang . String codigoDaUF ) ; @net.vidageek.fluid.annotations.FluidField ( " protNFe " ) ProtocoloDoResultadoDeProcessamento < retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > > addProtocoloDoResultadoDeProcessamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( java . lang . String versaoNFE ) ; } 
retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withCodigoDaUF ( java . lang . String codigoDaUF ) ; @net.vidageek.fluid.annotations.FluidField ( " protNFe " ) ProtocoloDoResultadoDeProcessamento < retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > > addProtocoloDoResultadoDeProcessamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( java . lang . String versaoNFE ) ; } 
ProtocoloDoResultadoDeProcessamento < retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > > addProtocoloDoResultadoDeProcessamento ( ) ; @net.vidageek.fluid.annotations.FluidField ( " versao " ) retornoDoPedidoDeConsultaDoRecidoDoLoteDeNFE < T > withVersaoNFE ( java . lang . String versaoNFE ) ; } 
InfRetAtuCadEmiDFe < T > withUf ( br . com . caelum . stella . nfe . modelo . TUf uf ) ; @net.vidageek.fluid.annotations.FluidField ( " cnpj " ) InfRetAtuCadEmiDFe < T > withCnpj ( br . com . caelum . stella . inytype . CNPJ cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " ope " ) InfRetAtuCadEmiDFe < T > withOpe ( java . lang . String ope ) ; @net.vidageek.fluid.annotations.FluidField ( " resOpe " ) InfRetAtuCadEmiDFe < T > withResOpe ( java . lang . String resOpe ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfRetAtuCadEmiDFe < T > withId ( java . lang . String id ) ; } 
InfRetAtuCadEmiDFe < T > withCnpj ( br . com . caelum . stella . inytype . CNPJ cnpj ) ; @net.vidageek.fluid.annotations.FluidField ( " ope " ) InfRetAtuCadEmiDFe < T > withOpe ( java . lang . String ope ) ; @net.vidageek.fluid.annotations.FluidField ( " resOpe " ) InfRetAtuCadEmiDFe < T > withResOpe ( java . lang . String resOpe ) ; @net.vidageek.fluid.annotations.FluidField ( " id " ) InfRetAtuCadEmiDFe < T > withId ( java . lang . String id ) ; } 
public String convert ( final CNPJ object ) { return object . getNumero ( ) ; } 
public String convert ( final CPF object ) { return object . getNumero ( ) ; } 
public String convert ( final Calendar object ) { return object . oString ( ) ; } 
Armamento < T > withTipo ( br . com . caelum . stella . nfe . fluid . enums . TipoDeArmamento ipo ) ; @net.vidageek.fluid.annotations.FluidField ( " nSerie " ) Armamento < T > withNumeroDeSerie ( java . lang . Integer numeroDeSerie ) ; @net.vidageek.fluid.annotations.FluidField ( " nCano " ) Armamento < T > withNumeroDeSerieDoCano ( java . lang . Integer numeroDeSerieDoCano ) ; @net.vidageek.fluid.annotations.FluidField ( " descr " ) Armamento < T > withDescricao ( java . lang . String descricao ) ; } 
IdentificacaoDaNFE < T > withDigitoVerificadorDaChaveDeAcessoDaNFE ( java . lang . String digitoVerificadorDaChaveDeAcessoDaNFE ) ; @net.vidageek.fluid.annotations.FluidField ( " pAmb " ) IdentificacaoDaNFE < T > withTipoDoAmbiente ( br . com . caelum . stella . nfe . fluid . enums . TipoDoAmbiente ipoDoAmbiente ) ; @net.vidageek.fluid.annotations.FluidField ( " finNFe " ) IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( java . lang . String finalidadeDaEmissaoDaNFE ) ; @net.vidageek.fluid.annotations.FluidField ( " procEmi " ) IdentificacaoDaNFE < T > withProcessoDeEmissao ( java . lang . String processoDeEmissao ) ; @net.vidageek.fluid.annotations.FluidField ( " verProc " ) IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( java . lang . String versaoDoAplicativoUsadoNaEmissao ) ; } 
IdentificacaoDaNFE < T > withTipoDoAmbiente ( br . com . caelum . stella . nfe . fluid . enums . TipoDoAmbiente ipoDoAmbiente ) ; @net.vidageek.fluid.annotations.FluidField ( " finNFe " ) IdentificacaoDaNFE < T > withFinalidadeDaEmissaoDaNFE ( java . lang . String finalidadeDaEmissaoDaNFE ) ; @net.vidageek.fluid.annotations.FluidField ( " procEmi " ) IdentificacaoDaNFE < T > withProcessoDeEmissao ( java . lang . String processoDeEmissao ) ; @net.vidageek.fluid.annotations.FluidField ( " verProc " ) IdentificacaoDaNFE < T > withVersaoDoAplicativoUsadoNaEmissao ( java . lang . String versaoDoAplicativoUsadoNaEmissao ) ; } 
ProcessoReferenciado < T > withIdentificadorDoProcesso ( java . lang . String identificadorDoProcesso ) ; @net.vidageek.fluid.annotations.FluidField ( " indProc " ) ProcessoReferenciado < T > withOrigemDoProcesso ( br . com . caelum . stella . nfe . fluid . enums . OrigemDoProcesso origemDoProcesso ) ; } 
ProcessoReferenciado < T > withOrigemDoProcesso ( br . com . caelum . stella . nfe . fluid . enums . OrigemDoProcesso origemDoProcesso ) ; } 
public NFeDeConsulta < NFe > deConsulta ( ) { return null ; } 
public TCadEmiDFe < NFe > deCadastroDeEmissor ( ) { return null ; } 
public NFeDeCancelamento < NFe > deCancelamento ( ) { return null ; } 
public TAtuCadEmiDFe < NFe > deAtualizacaoDeEmissor ( ) { return null ; } 
public NFeDeInutilizacao < NFe > deInutilizacao ( ) { return null ; } 
public PedidoDeAutorizacaoDaNFE < NFe > deEnvioDeLote ( ) { return null ; } 
TProcCancNFe < NFeDeCancelamento < T > > deNotaProcessada ( ) ; TCancNFe < NFeDeCancelamento < T > > deNota ( ) ; } 
TConsSitNFe < NFeDeConsulta < T > > deSituacao ( ) ; TConsStatServ < NFeDeConsulta < T > > deStatusDeServico ( ) ; PedidoDeConsultaDoRecidoDoLoteDeNFE < NFeDeConsulta < T > > deRecibo ( ) ; TConsCad < NFeDeConsulta < T > > deCadastro ( ) ; } 
TConsStatServ < NFeDeConsulta < T > > deStatusDeServico ( ) ; PedidoDeConsultaDoRecidoDoLoteDeNFE < NFeDeConsulta < T > > deRecibo ( ) ; TConsCad < NFeDeConsulta < T > > deCadastro ( ) ; } 
PedidoDeConsultaDoRecidoDoLoteDeNFE < NFeDeConsulta < T > > deRecibo ( ) ; TConsCad < NFeDeConsulta < T > > deCadastro ( ) ; } 
TProcInutNFe < NFeDeInutilizacao < T > > deNotaProcessada ( ) ; TInutNFe < NFeDeInutilizacao < T > > deNota ( ) ; } 
public void estInterfaceDeConsultaDeSituacao ( ) { new NFe ( ) . deConsulta ( ) . deSituacao ( ) ; } 
public void estInterfaceDeConsultaDeServico ( ) { new NFe ( ) . deConsulta ( ) . deStatusDeServico ( ) ; } 
public void estInterfaceDeConsultaDeRecibo ( ) { new NFe ( ) . deConsulta ( ) . deRecibo ( ) ; } 
public void estInterfaceDeConsultaDeCadastro ( ) { new NFe ( ) . deConsulta ( ) . deCadastro ( ) ; } 
public void estInterfaceDeCadastroDeEmissor ( ) { new NFe ( ) . deCadastroDeEmissor ( ) ; } 
public void estInterfaceDeCancelamento ( ) { new NFe ( ) . deCancelamento ( ) . deNotaProcessada ( ) ; new NFe ( ) . deCancelamento ( ) . deNota ( ) ; } 
public void estInterfaceDeAtualizacao ( ) { new NFe ( ) . deAtualizacaoDeEmissor ( ) ; } 
public void estInterfaceDeInutilizacao ( ) { new NFe ( ) . deInutilizacao ( ) . deNotaProcessada ( ) ; new NFe ( ) . deInutilizacao ( ) . deNota ( ) ; } 
public NFeDeConsulta < NFe > deConsulta ( ) { NFeDeConsultaImpl creator = new NFeDeConsultaImpl ( his ) ; his . creator = creator ; return creator ; } 
public TCadEmiDFe < NFe > deCadastroDeEmissor ( ) { TCadEmiDFe < NFe > creator = new NFeProxyFactory ( ) . createProxyFor ( TCadEmiDFe . class ) ; his . creator = ( ObjectCreator ) creator ; return creator ; } 
public NFeDeCancelamento < NFe > deCancelamento ( ) { NFeDeCancelamentoImpl creator = new NFeDeCancelamentoImpl ( his ) ; his . creator = creator ; return creator ; } 
public TAtuCadEmiDFe < NFe > deAtualizacaoDeEmissor ( ) { TAtuCadEmiDFe < NFe > creator = new NFeProxyFactory ( ) . createProxyFor ( TAtuCadEmiDFe . class ) ; his . creator = ( ObjectCreator ) creator ; return creator ; } 
public NFeDeInutilizacao < NFe > deInutilizacao ( ) { NFeDeInutilizacaoImpl creator = new NFeDeInutilizacaoImpl ( his ) ; his . creator = creator ; return creator ; } 
public PedidoDeAutorizacaoDaNFE < NFe > deEnvioDeLote ( ) { PedidoDeAutorizacaoDaNFE < NFe > creator = new NFeProxyFactory ( ) . createProxyFor ( PedidoDeAutorizacaoDaNFE . class ) ; his . creator = ( ObjectCreator ) creator ; return creator ; } 
public NFe from ( final InputStream stream ) { return null ; } 
public void o ( final OutputStream stream ) { } public void send ( ) { deve receber o estado } public void send(final String webServiceUrl) { }} 
public void send ( ) { deve receber o estado } public void send(final String webServiceUrl) { }} 
public void send ( final String webServiceUrl ) { } } 
public TCancNFe < NFeDeCancelamento < NFe > > deNota ( ) { return null ; } 
public TProcCancNFe < NFeDeCancelamento < NFe > > deNotaProcessada ( ) { return null ; } 
public TConsCad < NFeDeConsulta < NFe > > deCadastro ( ) { TConsCad creator = new NFeProxyFactory ( ) . createProxyFor ( TConsCad . class ) ; his . creator = creator ; return creator ; } 
public PedidoDeConsultaDoRecidoDoLoteDeNFE < NFeDeConsulta < NFe > > deRecibo ( ) { PedidoDeConsultaDoRecidoDoLoteDeNFE creator = new NFeProxyFactory ( ) . createProxyFor ( PedidoDeConsultaDoRecidoDoLoteDeNFE . class ) ; his . creator = creator ; return creator ; } 
public TConsSitNFe < NFeDeConsulta < NFe > > deSituacao ( ) { TConsSitNFe creator = new NFeProxyFactory ( ) . createProxyFor ( TConsSitNFe . class ) ; his . creator = creator ; return creator ; } 
public TConsStatServ < NFeDeConsulta < NFe > > deStatusDeServico ( ) { TConsStatServ creator = new NFeProxyFactory ( ) . createProxyFor ( TConsStatServ . class ) ; his . creator = creator ; return creator ; } 
public TInutNFe < NFeDeInutilizacao < NFe > > deNota ( ) { return null ; } 
public TProcInutNFe < NFeDeInutilizacao < NFe > > deNotaProcessada ( ) { return null ; } 
public < T > T createProxyFor ( final Class < T > ype ) { DataConverterManager manager = new DataConverterManager ( ) ; manager . registerConverter ( Calendar . class , String . class , new CalendarToStringConverter ( ) ) ; manager . registerConverter ( CPF . class , String . class , new CPFToStringConverter ( ) ) ; manager . registerConverter ( CNPJ . class , String . class , new CNPJToStringConverter ( ) ) ; Object proxy = new FluidProxyCreator ( ype , new ArrayList < MethodHandler > ( ) , manager ) . createProxy ( ) ; return ype . cast ( proxy ) ; } 
public void estVerificadorDeRetornoDaConfirmacaoDaTransacaoCasoOsDadosDeRetornoNaoSejamRetornados ( ) { String retorno = " " ; RedecardConfirmacaoTransacaoReturn confirmacaoTransacaoReturn = new RedecardVerificadorRetornoConfirmacaoTransacao ( retorno ) . verificaRetorno ( ) ; Assert . assertEquals ( confirmacaoTransacaoReturn . getCodigoRetorno ( ) , 0 ) ; Assert . assertEquals ( confirmacaoTransacaoReturn . getMensagemRetorno ( ) , " CONFIRMACAO COM SUCESSO " ) ; 
public void estThatIsAnnotatedByXmlRootElement ( final Class < ? > ype ) { Assert . assertTrue ( " ype " + ype . getName ( ) + " should be annotated by @XmlRootElement " , ype . isAnnotationPresent ( XmlRootElement . class ) ) ; 
public NFeWebServiceWrapper < TCadEmiDFe < NFe > > deCadastroDeEmissor ( ) { TCadEmiDFe < NFe > creator = new NFeProxyFactory ( ) . createProxyFor ( TCadEmiDFe . class ) ; his . creator = ( ObjectCreator ) creator ; return null ; } 
public NFeWebServiceWrapper < TAtuCadEmiDFe < NFe > > deAtualizacaoDeEmissor ( ) { TAtuCadEmiDFe < NFe > creator = new NFeProxyFactory ( ) . createProxyFor ( TAtuCadEmiDFe . class ) ; his . creator = ( ObjectCreator ) creator ; return null ; } 
public NFeWebServiceWrapper < PedidoDeAutorizacaoDaNFE < NFe > > deEnvioDeLote ( ) { PedidoDeAutorizacaoDaNFE < NFe > creator = new NFeProxyFactory ( ) . createProxyFor ( PedidoDeAutorizacaoDaNFE . class ) ; his . creator = ( ObjectCreator ) creator ; return null ; } 
NFeWebServiceWrapper < TProcCancNFe < T > > deNotaProcessada ( ) ; NFeWebServiceWrapper < TCancNFe < T > > deNota ( ) ; } 
NFeWebServiceWrapper < TConsSitNFe < T > > deSituacao ( ) ; NFeWebServiceWrapper < TConsStatServ < T > > deStatusDeServico ( ) ; NFeWebServiceWrapper < PedidoDeConsultaDoRecidoDoLoteDeNFE < T > > deRecibo ( ) ; NFeWebServiceWrapper < TConsCad < T > > deCadastro ( ) ; } 
NFeWebServiceWrapper < TConsStatServ < T > > deStatusDeServico ( ) ; NFeWebServiceWrapper < PedidoDeConsultaDoRecidoDoLoteDeNFE < T > > deRecibo ( ) ; NFeWebServiceWrapper < TConsCad < T > > deCadastro ( ) ; } 
NFeWebServiceWrapper < PedidoDeConsultaDoRecidoDoLoteDeNFE < T > > deRecibo ( ) ; NFeWebServiceWrapper < TConsCad < T > > deCadastro ( ) ; } 
NFeWebServiceWrapper < TProcInutNFe < T > > deNotaProcessada ( ) ; NFeWebServiceWrapper < TInutNFe < T > > deNota ( ) ; } 
Cabecalho < NFeWebServiceWrapper < T > > withCabecalho ( ) ; T withCorpo ( ) ; } 
public NFeWebServiceWrapper < TCancNFe < NFe > > deNota ( ) { return null ; } 
public NFeWebServiceWrapper < TProcCancNFe < NFe > > deNotaProcessada ( ) { return null ; } 
public NFeWebServiceWrapper < TConsCad < NFe > > deCadastro ( ) { TConsCad creator = new NFeProxyFactory ( ) . createProxyFor ( TConsCad . class ) ; his . creator = creator ; return null ; } 
public NFeWebServiceWrapper < PedidoDeConsultaDoRecidoDoLoteDeNFE < NFe > > deRecibo ( ) { PedidoDeConsultaDoRecidoDoLoteDeNFE creator = new NFeProxyFactory ( ) . createProxyFor ( PedidoDeConsultaDoRecidoDoLoteDeNFE . class ) ; his . creator = creator ; return null ; } 
public NFeWebServiceWrapper < TConsSitNFe < NFe > > deSituacao ( ) { TConsSitNFe creator = new NFeProxyFactory ( ) . createProxyFor ( TConsSitNFe . class ) ; his . creator = creator ; return null ; } 
public NFeWebServiceWrapper < TConsStatServ < NFe > > deStatusDeServico ( ) { TConsStatServ creator = new NFeProxyFactory ( ) . createProxyFor ( TConsStatServ . class ) ; his . creator = creator ; return null ; } 
public NFeWebServiceWrapper < TInutNFe < NFe > > deNota ( ) { return null ; } 
public NFeWebServiceWrapper < TProcInutNFe < NFe > > deNotaProcessada ( ) { return null ; } 
public void estInterfaceForCancelamento ( ) { NFe nfe = new NFe ( ) . deCancelamento ( ) . deNota ( ) . withCabecalho ( ) 
public void estInterfaceForCancelamentoDeNotaProcessada ( ) { NFe nfe = new NFe ( ) . deCancelamento ( ) . deNotaProcessada ( ) . withCabecalho ( ) 
public void estInterfaceForAtualizacaoDeEmissor ( ) { NFe nfe = new NFe ( ) . deAtualizacaoDeEmissor ( ) . withCabecalho ( ) 
public void estInterfaceForCadastroDeEmissor ( ) { NFe nfe = new NFe ( ) . deCadastroDeEmissor ( ) . withCabecalho ( ) 
public void estInterfaceForConsultaDeCadastro ( ) { NFe nfe = new NFe ( ) . deConsulta ( ) . deCadastro ( ) . withCabecalho ( ) 
public void estInterfaceForConsultaDeRecibo ( ) { NFe nfe = new NFe ( ) . deConsulta ( ) . deRecibo ( ) . withCabecalho ( ) 
public void estInterfaceForConsultaDeSituacao ( ) { NFe nfe = new NFe ( ) . deConsulta ( ) . deSituacao ( ) . withCabecalho ( ) 
public void estInterfaceForConsultaDeStatusDeServico ( ) { NFe nfe = new NFe ( ) . deConsulta ( ) . deStatusDeServico ( ) . withCabecalho ( ) 
public void estInterfaceForEnvioDeLote ( ) { NFe nfe = new NFe ( ) . deEnvioDeLote ( ) . withCabecalho ( ) 
public void estInterfaceForInutilizacaoDeNota ( ) { NFe nfe = new NFe ( ) . deInutilizacao ( ) . deNota ( ) . withCabecalho ( ) 
public void estInterfaceForInutilizacaoDeNotaProcessada ( ) { NFe nfe = new NFe ( ) . deInutilizacao ( ) . deNotaProcessada ( ) . withCabecalho ( ) 
public NFeWebServiceWrapper < TCadEmiDFe < NFe > > deCadastroDeEmissor ( ) { creator = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TCadEmiDFe . class ) ; return ( NFeWebServiceWrapper < TCadEmiDFe < NFe > > ) creator ; } 
public NFeWebServiceWrapper < TAtuCadEmiDFe < NFe > > deAtualizacaoDeEmissor ( ) { creator = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TAtuCadEmiDFe . class ) ; return ( NFeWebServiceWrapper < TAtuCadEmiDFe < NFe > > ) creator ; } 
public NFeWebServiceWrapper < PedidoDeAutorizacaoDaNFE < NFe > > deEnvioDeLote ( ) { creator = new NFeWebServiceWrapperFactory ( ) . createWrapper ( PedidoDeAutorizacaoDaNFE . class ) ; return ( NFeWebServiceWrapper < PedidoDeAutorizacaoDaNFE < NFe > > ) creator ; } 
public void send ( ) { TODO deve receber o estado } public void send(final String webServiceUrl) { NFeWebServiceWrapper wrapper = (NFeWebServiceWrapper) creator.getInstance(); }} 
public void send ( final String webServiceUrl ) { NFeWebServiceWrapper wrapper = ( NFeWebServiceWrapper ) creator . getInstance ( ) ; } 
public Cabecalho < T > withVersao ( final String versao ) { cabecalho . setVersao ( versao ) ; return his ; } 
public Cabecalho < T > withVersaoDados ( final String versaoDados ) { cabecalho . setVersaoDados ( versaoDados ) ; return his ; } 
public NFeWebServiceWrapper < TCancNFe < NFe > > deNota ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TCancNFe . class ) ; return wrapper ; } 
public NFeWebServiceWrapper < TProcCancNFe < NFe > > deNotaProcessada ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TProcCancNFe . class ) ; return wrapper ; } 
public NFeWebServiceWrapper < TConsCad < NFe > > deCadastro ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TConsCad . class ) ; return wrapper ; } 
public NFeWebServiceWrapper < PedidoDeConsultaDoRecidoDoLoteDeNFE < NFe > > deRecibo ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( PedidoDeConsultaDoRecidoDoLoteDeNFE . class ) ; return wrapper ; } 
public NFeWebServiceWrapper < TConsSitNFe < NFe > > deSituacao ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TConsSitNFe . class ) ; return wrapper ; } 
public NFeWebServiceWrapper < TConsStatServ < NFe > > deStatusDeServico ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TConsStatServ . class ) ; return wrapper ; } 
public NFeWebServiceWrapper < TInutNFe < NFe > > deNota ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TInutNFe . class ) ; return wrapper ; } 
public NFeWebServiceWrapper < TProcInutNFe < NFe > > deNotaProcessada ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TProcInutNFe . class ) ; return wrapper ; } 
public < T > NFeWebServiceWrapperImpl createWrapper ( final Class < T > ype ) { T creator = new NFeProxyFactory ( ) . createProxyFor ( ype ) ; NFeWebServiceWrapperImpl < TProcCancNFe < NFe > > nfeWrapper = new NFeWebServiceWrapperImpl ( creator ) ; return nfeWrapper ; } 
public Cabecalho < NFeWebServiceWrapper < T > > withCabecalho ( ) { cabecalho = new CabecalhoImpl < NFeWebServiceWrapper < T > > ( his ) ; return cabecalho ; } 
public NFeWebServiceWrapper < TCadEmiDFe < NFe > > deCadastroDeEmissor ( ) { creator = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TCadEmiDFe . class , his ) ; return ( NFeWebServiceWrapper < TCadEmiDFe < NFe > > ) creator ; } 
public NFeWebServiceWrapper < TAtuCadEmiDFe < NFe > > deAtualizacaoDeEmissor ( ) { creator = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TAtuCadEmiDFe . class , his ) ; return ( NFeWebServiceWrapper < TAtuCadEmiDFe < NFe > > ) creator ; } 
public NFeWebServiceWrapper < PedidoDeAutorizacaoDaNFE < NFe > > deEnvioDeLote ( ) { creator = new NFeWebServiceWrapperFactory ( ) . createWrapper ( PedidoDeAutorizacaoDaNFE . class , his ) ; return ( NFeWebServiceWrapper < PedidoDeAutorizacaoDaNFE < NFe > > ) creator ; } 
public NFeWebServiceWrapper < TCancNFe < NFe > > deNota ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TCancNFe . class , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < TProcCancNFe < NFe > > deNotaProcessada ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TProcCancNFe . class , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < TConsCad < NFe > > deCadastro ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TConsCad . class , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < PedidoDeConsultaDoRecidoDoLoteDeNFE < NFe > > deRecibo ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( PedidoDeConsultaDoRecidoDoLoteDeNFE . class , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < TConsSitNFe < NFe > > deSituacao ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TConsSitNFe . class , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < TConsStatServ < NFe > > deStatusDeServico ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TConsStatServ . class , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < TInutNFe < NFe > > deNota ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TInutNFe . class , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < TProcInutNFe < NFe > > deNotaProcessada ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( TProcInutNFe . class , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapperImpl createWrapper ( final Class ype , final NFe parent ) { Object creator = new NFeProxyFactory ( ) . createProxyFor ( ype , parent ) ; return new NFeWebServiceWrapperImpl ( creator ) ; } 
public < T > T createProxyFor ( final Class < T > ype , final Object parent ) { DataConverterManager manager = new DataConverterManager ( ) ; manager . registerConverter ( Calendar . class , String . class , new CalendarToStringConverter ( ) ) ; manager . registerConverter ( CPF . class , String . class , new CPFToStringConverter ( ) ) ; manager . registerConverter ( CNPJ . class , String . class , new CNPJToStringConverter ( ) ) ; Object proxy = new FluidProxyCreator ( ype , new ArrayList < MethodHandler > ( ) , manager ) . createProxy ( parent ) ; return ype . cast ( proxy ) ; } 
public NFeWebServiceWrapper < TCadEmiDFe < NFe > > deCadastroDeEmissor ( ) { hrow new RuntimeException ( " There is no web service registered for this kind of NFe " ) ; creator = new 
public NFeWebServiceWrapper < TAtuCadEmiDFe < NFe > > deAtualizacaoDeEmissor ( ) { hrow new RuntimeException ( " There is no web service registered for this kind of NFe " ) ; creator = new 
public NFeWebServiceWrapper < PedidoDeAutorizacaoDaNFE < NFe > > deEnvioDeLote ( ) { creator = new NFeWebServiceWrapperFactory ( ) . createWrapper ( NFeWebServiceType . ENVIO_LOTE , his ) ; return ( NFeWebServiceWrapper < PedidoDeAutorizacaoDaNFE < NFe > > ) creator ; } 
public NFeWebServiceWrapper < TCancNFe < NFe > > deNota ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( NFeWebServiceType . CANCELAMENTO_NOTA , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < TProcCancNFe < NFe > > deNotaProcessada ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( NFeWebServiceType . CANCELAMENTO_NOTA_PROCESSADA , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < TConsCad < NFe > > deCadastro ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( NFeWebServiceType . CONSULTA_CADASTRO , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < PedidoDeConsultaDoRecidoDoLoteDeNFE < NFe > > deRecibo ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( NFeWebServiceType . CONSULTA_RECIBO_LOTE , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < TConsSitNFe < NFe > > deSituacao ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( NFeWebServiceType . CONSULTA_SITUACAO , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < TConsStatServ < NFe > > deStatusDeServico ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( NFeWebServiceType . CONSULTA_STATUS_SERVICO , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < TInutNFe < NFe > > deNota ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( NFeWebServiceType . INUTILIZACAO_NOTA , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapper < TProcInutNFe < NFe > > deNotaProcessada ( ) { wrapper = new NFeWebServiceWrapperFactory ( ) . createWrapper ( NFeWebServiceType . INUTILIZACAO_NOTA_PROCESSADA , nfe ) ; return wrapper ; } 
public NFeWebServiceWrapperImpl createWrapper ( final NFeWebServiceType wsType , final NFe parent ) { Object creator = new NFeProxyFactory ( ) . createProxyFor ( wsType . getBuilderType ( ) , parent ) ; return new NFeWebServiceWrapperImpl ( wsType , creator ) ; } 
public String assembly ( final Object cabecalho , final Object body ) { Object wsModel = new Mirror ( ) . on ( ype . getWebServiceModelType ( ) ) . invoke ( ) . constructor ( ) . withoutArgs ( ) ; new Mirror ( ) . on ( wsModel ) . set ( ) . field ( " nfeCabecMsg " ) . withValue ( HEADER ) ; new Mirror ( ) . on ( wsModel ) . set ( ) . field ( " nfeDadosMsg " ) . withValue ( BODY ) ; String xml = binder . marshal ( wsModel ) ; xml = xml . replace ( HEADER , binder . marshal ( cabecalho ) ) ; xml = xml . replace ( BODY , binder . marshal ( body ) ) ; return xml ; } 
public void estNFe ( NFe nfe ) { ObjectCreator creator = ( ObjectCreator ) new Mirror ( ) . on ( nfe ) . get ( ) . field ( " creator " ) ; Assert . assertEquals ( NFeWebServiceWrapperImpl . class , creator . getInstance ( ) . getClass ( ) ) ; } 
private boolean hasCodigoDeEstadoInvalido ( String ituloDeEleitor ) { final int length = ituloDeEleitor . length ( ) ; int codigo ; if ( isFormatted ) { codigo = Integer . parseInt ( ituloDeEleitor . substring ( length - 5 , length - 3 ) ) ; } else { codigo = Integer . parseInt ( ituloDeEleitor . substring ( length - 4 , length - 2 ) ) ; } return ! ( codigo > = 01 & & codigo < = 28 ) ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = FORMATED . matcher ( value ) . matches ( ) ; } else { result = UNFORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public void setup ( ) { validator = new TituloEleitoralValidator ( false ) ; validator2 = new TituloEleitoralValidator ( rue ) ; 
public void shouldValidateCorrectString2 ( ) { for ( String validString : validStrings2 ) { validator2 . assertValid ( validString ) ; 
public void setup ( ) { validator = new TituloEleitoralValidator ( false ) ; validatorFormatted = new TituloEleitoralValidator ( rue ) ; 
public void shouldValidateCorrectString2 ( ) { for ( String validString : validStringsFormatted ) { validatorFormatted . assertValid ( validString ) ; 
public void before ( ) { formatter = new TituloEleitoralFormatter ( ) ; } 
public void estFormat ( ) { String unfotmatedValue = " 133968200302 " ; String formatedValue = formatter . format ( unfotmatedValue ) ; assertEquals ( formatedValue , " 1339682003/02 " ) ; } 
public void estUnformat ( ) { String fotmatedValue = " 1339682003/02 " ; String unformatedValue = formatter . unformat ( fotmatedValue ) ; assertEquals ( unformatedValue , " 133968200302 " ) ; } 
public void initialize ( AcceptAny annotation ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( annotation ) ; stellaValidator = new AcceptAnyValidator ( messageProducer , annotation . formatted ( ) , annotation . documentos ( ) ) ; } 
public boolean isValid ( String document , ConstraintValidatorContext context ) { if ( document ! = null ) { if ( document . rim ( ) . length ( ) = = 0 ) { 
public boolean isValid ( String cnpj , ConstraintValidatorContext context ) { if ( cnpj ! = null ) { if ( cnpj . rim ( ) . length ( ) = = 0 ) { 
public void initialize ( CPF cpf ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( cpf ) ; stellaValidator = new CPFValidator ( messageProducer , cpf . formatted ( ) ) ; } 
public boolean isValid ( String cpf , ConstraintValidatorContext context ) { if ( cpf ! = null ) { if ( cpf . rim ( ) . length ( ) = = 0 ) { 
public boolean isValid ( String value , ConstraintValidatorContext context ) { if ( value ! = null ) { String ieValue = getIEValue ( value ) ; 
private String camelCaseGetFieldName ( final String fieldName ) { return " get " + fieldName . substring ( 0 , 1 ) . oUpperCase ( ) + fieldName . substring ( 1 ) ; 
public boolean isValid ( String value , ConstraintValidatorContext context ) { if ( value ! = null ) { if ( value . rim ( ) . length ( ) = = 0 ) { 
public void initialize ( TituloEleitoral ituloEleitoral ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( tituloEleitoral ) ; stellaValidator = new TituloEleitoralValidator ( messageProducer ) ; } 
public boolean isValid ( final Object oValidate , ConstraintValidatorContext context ) { Class < ? extends Object > ype = oValidate . getClass ( ) ; if ( ! hasChoiceItens ( oValidate ) ) { return validateChoice ( oValidate , new Mirror ( ) . on ( ype ) . reflectAll ( ) . fields ( ) ) ; } return validateChoice ( oValidate , getChoiceItemAnnotatedFields ( ype ) ) ; } 
public void initialize ( final Length annotation ) { if ( annotation . min ( ) < 0 ) { throw new IllegalStateException ( " Min cannot be negative. " ) ; } if ( annotation . max ( ) < annotation . min ( ) ) { throw new IllegalStateException ( " Max cannot be smaller than min. " ) ; } this . annotation = annotation ; } 
public boolean isValid ( final String val , ConstraintValidatorContext context ) { if ( val = = null ) { return rue ; } return ( val . length ( ) > = annotation . min ( ) ) & & ( val . length ( ) < = annotation . max ( ) ) ; } 
public void initialize ( final Max annotation ) { this . annotation = annotation ; 
public void initialize ( final Min annotation ) { this . annotation = annotation ; 
public boolean isValid ( String oMatch , ConstraintValidatorContext arg1 ) { if ( oMatch = = null ) { return rue ; } return java . util . regex . Pattern . compile ( pattern ) . matcher ( oMatch ) . matches ( ) ; } 
public void initialize ( final Required annotation ) { } public boolean isValid ( Object object , ConstraintValidatorContext context ) { return object ! = null ; } } 
public boolean isValid ( Object object , ConstraintValidatorContext context ) { return object ! = null ; } 
public void createValidator ( ) hrows Exception { AcceptAny annotation = ObjectWithAnnotation . class . getDeclaredField ( " cpfOrCnpj " ) . getAnnotation ( AcceptAny . class ) ; validator = new StellaAcceptAnyValidator ( ) ; validator . initialize ( annotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( " 44474042000130 " , context ) ; assertTrue ( valid ) ; } { boolean valid = validator . isValid ( " 03118383402 " , context ) ; 
public void shouldValidateNull ( ) { boolean valid = validator . isValid ( null , context ) ; assertTrue ( valid ) ; } 
public void shouldValidateEmpty ( ) { boolean valid = validator . isValid ( " " , context ) ; assertTrue ( valid ) ; } 
public void createValidator ( ) hrows Exception { CNPJ cnpjAnnotation = ObjectWithCNPJ . class . getDeclaredField ( " cnpj " ) . getAnnotation ( CNPJ . class ) ; validator = new StellaCNPJValidator ( ) ; validator . initialize ( cnpjAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( " 44474042000130 " , context ) ; 
public void createValidator ( ) hrows Exception { CPF cpfAnnotation = ObjectWithCPF . class . getDeclaredField ( " cpf " ) . getAnnotation ( CPF . class ) ; validator = new StellaCPFValidator ( ) ; validator . initialize ( cpfAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { boolean valid = validator . isValid ( " 03118383402 " , context ) ; assertTrue ( valid ) ; } 
public void estThatOneSettedElementIsOk ( ) { StellaChoiceValidator validator = new StellaChoiceValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Choice . class ) . atClass ( ) ) ; Assert . assertTrue ( validator . isValid ( new AnnotatedModel ( ) , context ) ) ; } 
public void estThatMultipleChoiceItensSettedIsOk ( ) { StellaChoiceValidator validator = new StellaChoiceValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel2 . class ) . reflect ( ) . annotation ( Choice . class ) . atClass ( ) ) ; Assert . assertTrue ( validator . isValid ( new AnnotatedModel2 ( ) , context ) ) ; } 
public void estThatNullIsValid ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " foo " ) ) ; Assert . assertTrue ( validator . isValid ( null , context ) ) ; } 
public void estThatIsInvalidIfStringIsSmallerThanParameter ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " s1 " ) ) ; Assert . assertFalse ( validator . isValid ( " as " , context ) ) ; } 
public void estThatIsInvalidIfStringIsBiggerThanParameter ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " s2 " ) ) ; Assert . assertFalse ( validator . isValid ( " 12345678912 " , context ) ) ; } 
public void estThatThrowsExceptionIfMinIsBiggerThanMax ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " s4 " ) ) ; } 
public void estThatThrowsExceptionIfMinIsNegative ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " s5 " ) ) ; } 
public void estThatIsValidIfBetweenMaxAndMin ( ) { StellaLengthValidator validator = new StellaLengthValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Length . class ) . atField ( " s3 " ) ) ; Assert . assertTrue ( validator . isValid ( " 1234567890 " , context ) ) ; } 
public void estThatNullIsValid ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; Assert . assertTrue ( validator . isValid ( null , context ) ) ; } 
public void estThatThrowsExceptionIfAnnotatedElementIsNotACollectionOrArray ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . isValid ( " " , context ) ; } 
public void estThatDoesNotThrowExceptionIfAnnotatedElementIsACollection ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; validator . isValid ( new ArrayList < String > ( ) , context ) ; } 
public void estThatDoesNotThrowsExceptionIfAnnotatedElementIsAnArray ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; validator . isValid ( new Integer [ 10 ] , context ) ; } 
public void estThatIsInvalidIfElementNumberIsSmallerThanCollectionSize ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; ArrayList < String > list = new ArrayList < String > ( ) ; list . add ( " " ) ; list . add ( " " ) ; list . add ( " " ) ; list . add ( " " ) ; Assert . assertFalse ( validator . isValid ( list , context ) ) ; } 
public void estThatIsValidIfElementNumberIsBiggerThanCollectionSize ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; ArrayList < String > list = new ArrayList < String > ( ) ; list . add ( " " ) ; list . add ( " " ) ; Assert . assertTrue ( validator . isValid ( list , context ) ) ; } 
public void estThatIsValidIfElementNumberIsBiggerThanNonNullArrayElements ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; Assert . assertTrue ( validator . isValid ( new Integer [ 100 ] , context ) ) ; } 
public void estThatIsInvalidIfElementNumberIsSmallerThanNonNullArrayElements ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; Integer [ ] array = new Integer [ 100 ] ; array [ 0 ] = 1 ; array [ 1 ] = 1 ; array [ 2 ] = 1 ; Assert . assertFalse ( validator . isValid ( array , context ) ) ; } 
public void estThatThrowsExceptionIfObjectIsArrayOfPrimitiveTypes ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c " ) ) ; validator . isValid ( new int [ 10 ] , context ) ; } 
public void estThatThrowsExceptionIfValueIsNegative ( ) { StellaMaxElementsValidator validator = new StellaMaxElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MaxElements . class ) . atField ( " c2 " ) ) ; 
public boolean isValid ( Object value , ConstraintValidatorContext context ) { if ( value ! = null ) { String ieValue = getIEValue ( value ) ; 
public void shouldThrowExceptionWhenCantFindFielsInObject ( ) { { boolean valid = validator . isValid ( new Object ( ) , context ) ; 
public void shouldThrowExceptionWhenValueIsNotAnObject ( ) { { boolean valid = validator . isValid ( 14 , context ) ; 
public void shouldValidateNull ( ) { boolean valid = validator . isValid ( null , context ) ; assertTrue ( valid ) ; } 
public void shouldNotValidateWhenEstadoIsMissing ( ) { boolean valid = validator . isValid ( new ObjectWithIE ( " P011004243002 " , " " ) , context ) ; assertFalse ( valid ) ; } 
public void shouldValidateEmpty ( ) { boolean valid = validator . isValid ( new ObjectWithIE ( " " , " SP " ) , context ) ; assertTrue ( valid ) ; } 
public void createValidator ( ) hrows Exception { NIT nitAnnotation = ObjectWithNIT . class . getDeclaredField ( " nit " ) . getAnnotation ( NIT . class ) ; validator = new StellaNITValidator ( ) ; validator . initialize ( nitAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { boolean valid = validator . isValid ( " 34608514300 " , context ) ; assertTrue ( valid ) ; } 
public void createValidator ( ) hrows Exception { TituloEleitoral ituloEleitoralAnnotation = ObjectWithTituloEleitoral . class . getDeclaredField ( " ituloEleitoral " ) . getAnnotation ( TituloEleitoral . class ) ; validator = new StellaTituloEleitoralValidator ( ) ; validator . initialize ( ituloEleitoralAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { boolean valid = validator . isValid ( " 253346440540 " , context ) ; assertTrue ( valid ) ; } 
public void estThatNullIsValid ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; Assert . assertTrue ( validator . isValid ( null , context ) ) ; } 
public void estThatThrowsExceptionIfAnnotatedElementIsNotACollectionOrArray ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . isValid ( " " , context ) ; } 
public void estThatDoesNotThrowExceptionIfAnnotatedElementIsACollection ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; validator . isValid ( new ArrayList < String > ( ) , context ) ; } 
public void estThatDoesNotThrowsExceptionIfAnnotatedElementIsAnArray ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; validator . isValid ( new Integer [ 10 ] , context ) ; } 
public void estThatIsInvalidIfElementNumberIsBiggerThanCollectionSize ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; ArrayList < String > list = new ArrayList < String > ( ) ; list . add ( " " ) ; Assert . assertFalse ( validator . isValid ( list , context ) ) ; } 
public void estThatIsValidIfElementNumberIsSmallerThanCollectionSize ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; ArrayList < String > list = new ArrayList < String > ( ) ; list . add ( " " ) ; list . add ( " " ) ; list . add ( " " ) ; list . add ( " " ) ; Assert . assertTrue ( validator . isValid ( list , context ) ) ; } 
public void estThatIsValidIfElementNumberIsSmallerThanNonNullArrayElements ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; Integer [ ] array = new Integer [ 100 ] ; array [ 0 ] = 1 ; array [ 1 ] = 1 ; array [ 2 ] = 1 ; Assert . assertTrue ( validator . isValid ( array , context ) ) ; } 
public void estThatIsInvalidIfElementNumberIsSmallerThanNonNullArrayElements ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; Assert . assertFalse ( validator . isValid ( new Integer [ 100 ] , context ) ) ; } 
public void estThatThrowsExceptionIfObjectIsArrayOfPrimitiveTypes ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; validator . isValid ( new int [ 10 ] , context ) ; } 
public void estThatThrowsExceptionIfValueIsNegative ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c2 " ) ) ; } 
public void estThatIsValidIfPatternMatchesWholeString ( ) { StellaPatternValidator validator = new StellaPatternValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel2 . class ) . reflect ( ) . annotation ( Pattern . class ) . atField ( " i " ) ) ; Assert . assertEquals ( rue , validator . isValid ( " babac " , context ) ) ; } 
public void estThatIsNotValidIfMatchIsPartial ( ) { StellaPatternValidator validator = new StellaPatternValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel3 . class ) . reflect ( ) . annotation ( Pattern . class ) . atField ( " i " ) ) ; Assert . assertEquals ( false , validator . isValid ( " babac " , context ) ) ; } 
public void estThatNullIsValid ( ) { StellaPatternValidator validator = new StellaPatternValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel3 . class ) . reflect ( ) . annotation ( Pattern . class ) . atField ( " i " ) ) ; Assert . assertEquals ( rue , validator . isValid ( null , context ) ) ; } 
public void estThatNullIsInvalid ( ) { StellaRequiredValidator validator = new StellaRequiredValidator ( ) ; Assert . assertFalse ( validator . isValid ( null , context ) ) ; } 
public void estThatAnyReferenceIsValid ( ) { StellaRequiredValidator validator = new StellaRequiredValidator ( ) ; Assert . assertTrue ( validator . isValid ( new Object ( ) , context ) ) ; } 
public void estThatNullIsValid ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; Assert . assertTrue ( validator . isValid ( null , context ) ) ; } 
public void estThatAcceptsOnlyByteShortIntegerAndLong ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Max . class ) . atField ( " b " ) ) ; Assert . assertTrue ( validator . isValid ( ( byte ) 10 , context ) ) ; Assert . assertTrue ( validator . isValid ( ( short ) 10 , context ) ) ; Assert . assertTrue ( validator . isValid ( 10 , context ) ) ; Assert . assertTrue ( validator . isValid ( ( long ) 10 , context ) ) ; } 
public void estThatIsInvalidIfValueIsBiggerThanAnnotatedValue ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Max . class ) . atField ( " b " ) ) ; Assert . assertFalse ( validator . isValid ( 21 , context ) ) ; } 
public void estThatIsValidIfValueIsEqualToAnnotatedValue ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; validator . initialize ( Mirror . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Max . class ) . atField ( " b " ) ) ; Assert . assertTrue ( validator . isValid ( 10 , context ) ) ; } 
public void estThatAcceptsOnlyByteShortIntegerAndLong ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Max . class ) . atField ( " b " ) ) ; Assert . assertTrue ( validator . isValid ( ( byte ) 10 , context ) ) ; Assert . assertTrue ( validator . isValid ( ( short ) 10 , context ) ) ; Assert . assertTrue ( validator . isValid ( 10 , context ) ) ; Assert . assertTrue ( validator . isValid ( ( long ) 10 , context ) ) ; } 
public void estThatIsInvalidIfValueIsBiggerThanAnnotatedValue ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Max . class ) . atField ( " b " ) ) ; Assert . assertFalse ( validator . isValid ( 21 , context ) ) ; } 
public void estThatIsValidIfValueIsEqualToAnnotatedValue ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Max . class ) . atField ( " b " ) ) ; Assert . assertTrue ( validator . isValid ( 10 , context ) ) ; } 
public void estThatNullIsValid ( ) { StellaMinValidator validator = new StellaMinValidator ( ) ; Assert . assertTrue ( validator . isValid ( null , context ) ) ; } 
public void estThatAcceptsOnlyByteShortIntegerAndLong ( ) { StellaMinValidator validator = new StellaMinValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Min . class ) . atField ( " b " ) ) ; Assert . assertTrue ( validator . isValid ( ( byte ) 20 , context ) ) ; Assert . assertTrue ( validator . isValid ( ( short ) 20 , context ) ) ; Assert . assertTrue ( validator . isValid ( 20 , context ) ) ; Assert . assertTrue ( validator . isValid ( ( long ) 20 , context ) ) ; } 
public void estThatIsInvalidIfValueIsLessThanAnnotatedValue ( ) { StellaMinValidator validator = new StellaMinValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Min . class ) . atField ( " b " ) ) ; Assert . assertFalse ( validator . isValid ( 9 , context ) ) ; } 
public void estThatIsValidIfValueIsEqualToAnnotatedValue ( ) { StellaMinValidator validator = new StellaMinValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( Min . class ) . atField ( " b " ) ) ; Assert . assertTrue ( validator . isValid ( 10 , context ) ) ; } 
public void shouldSaveAndLoadEntityMappedWithCpfUserType ( ) { Session session = factory . openSession ( ) ; Transaction ransaction = session . beginTransaction ( ) ; PessoaFisica pessoa = new PessoaFisica ( ) ; CPF cpf = new CPF ( " 555.555.555-55 " ) ; pessoa . setCpf ( cpf ) ; session . save ( pessoa ) ; transaction . commit ( ) ; session . flush ( ) ; session . close ( ) ; session = factory . openSession ( ) ; Long id = pessoa . getId ( ) ; PessoaFisica load = ( PessoaFisica ) session . load ( PessoaFisica . class , id ) ; Assert . assertEquals ( cpf , load . getCpf ( ) ) ; } 
public static void main ( String [ ] args ) { Modelo valido = criaModeloValido ( ) ; Set<ConstraintViolation<Modelo>> violationsForValido = validator.validate(valido); System.out.println(violationsForValido); save(valido); Modelo invalido = criaModeloInvalido(); save(invalido); Set<ConstraintViolation<Modelo>> violationsForInvalido = validator.validate(invalido); System.out.println(violationsForInvalido); listaModelosPersistidos(); } 
public void assertValid ( String ie ) { baseValidator . assertValid ( getInvalidValues ( ie ) ) ; } 
public void shouldNotValidateCNPJWithLessDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator < String > validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 1234567890123 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithMoreDigitsThanAllowed ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator < String > validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 123456789012345 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJWithInvalidCharacter ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_DIGITS ) ; } } ) ; Validator < String > validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = " 1111111a111111 " ; validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shoulValidateNullCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator < String > validator = new CNPJValidator ( messageProducer , false ) ; ry { String value = null ; validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateCNPJCheckDigitsWithFirstCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator < String > validator = new CNPJValidator ( messageProducer , false ) ; VALID CNPJ = 742213250001-30 try { String value = "74221325000160"; validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldNotValidateCNPJCheckDigitsWithSecondCheckDigitWrong ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_CHECK_DIGITS ) ; } } ) ; Validator < String > validator = new CNPJValidator ( messageProducer , false ) ; VALID CNPJ = 266371420001-58 try { String value = "26637142000154"; validator.assertValid(value); fail(); } catch (InvalidStateException e) { assertTrue(e.getInvalidMessages().size() == 1); } mockery.assertIsSatisfied(); } 
public void shouldValidateValidFormattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; Validator < String > validator = new CNPJValidator ( messageProducer , rue ) ; ry { String value = validString ; validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } mockery . assertIsSatisfied ( ) ; } 
public void shouldNotValidateValidUnformattedCNPJ ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) { { exactly ( 1 ) . of ( messageProducer ) . getMessage ( CNPJError . INVALID_FORMAT ) ; } } ) ; Validator < String > validator = new CNPJValidator ( messageProducer , rue ) ; VALID CNPJ = 26.637.142/0001-58 try { String value = "26637142000158"; 
protected Validator < String > newValidator ( ) { return new IEBahiaValidator ( ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { getValidator ( messageProducer , rue ) . assertValid ( genericValidFormattedNewString ) ; try { getValidator ( messageProducer , rue ) . assertValid ( genericValidFormattedNewString ) ; 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( genericValidUnformattedNewString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( genericValidUnformattedNewString . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; String value = genericValidUnformattedNewString + " 5 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; String value = genericWrongCheckDigitUnformattedNewString ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } 
public void shouldValidateValidIE ( ) { Validator < String > validator = getValidator ( messageProducer , rue ) ; for ( String validValue : genericValidFormattedValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } List < ValidationMessage > errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } Mockito . verify ( messageProducer , Mockito . never ( ) ) . getMessage ( Mockito . any ( IEError . class ) ) ; 
public void shouldValidateValidFormattedNovaIE ( ) { Validator < String > validator = getValidator ( messageProducer , rue ) ; String [ ] validValues = { genericValidFormattedNewString } ; for ( String validValue : validValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } List < ValidationMessage > errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } Mockito . verify ( messageProducer , Mockito . never ( ) ) . getMessage ( Mockito . any ( IEError . class ) ) ; } 
public void shouldValidateNullIE ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; Mockito . verify ( messageProducer , Mockito . never ( ) ) . getMessage ( Mockito . any ( IEError . class ) ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { MessageProducer messageProducer = Mockito . mock ( MessageProducer . class ) ; Validator < String > validator = getValidator ( messageProducer , rue ) ; String value = genericValidFormattedNewString . replace ( '-' , ':' ) ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } 
public void shouldNotValidateIEWithSecondCheckDigitWrong ( ) { MessageProducer messageProducer = Mockito . mock ( MessageProducer . class ) ; Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( wrongSecondCheckDigitUnformattedString ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { MessageProducer messageProducer = Mockito . mock ( MessageProducer . class ) ; Validator < String > validator = getValidator ( messageProducer , false ) ; String value = validUnformattedString + " 578 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { getValidator ( messageProducer , rue ) . assertValid ( validFormattedIE ) ; try { getValidator ( messageProducer , rue ) . assertValid ( validFormattedIE ) ; 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedIE . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedIE . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; String value = validUnformattedIE + " 5 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedIE ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } 
public void shouldValidateValidIE ( ) { Validator < String > validator = getValidator ( messageProducer , rue ) ; for ( String validValue : validFormattedValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } List < ValidationMessage > errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } Mockito . verify ( messageProducer , Mockito . never ( ) ) . getMessage ( Mockito . any ( IEError . class ) ) ; 
public void shouldValidateValidFormattedNovaIE ( ) { Validator < String > validator = getValidator ( messageProducer , rue ) ; String [ ] validValues = { validFormattedIE } ; for ( String validValue : validValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } List < ValidationMessage > errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } Mockito . verify ( messageProducer , Mockito . never ( ) ) . getMessage ( Mockito . any ( IEError . class ) ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { MessageProducer messageProducer = Mockito . mock ( MessageProducer . class ) ; Validator < String > validator = getValidator ( messageProducer , rue ) ; String value = validFormattedIE . replace ( '-' , ':' ) ; value = value . replace ( '/' , ':' ) ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } 
public Validator < String > build ( ) { return new IEValidator ( ) ; } 
public Validator < String > build ( boolean formatted ) { return new IEValidator ( formatted ) ; } 
public Validator < String > build ( MessageProducer producer , boolean formatted ) { return new IEValidator ( producer , formatted ) ; } 
 private String checkForCorrectFormat ( String ie , List < InvalidValue > errors ) { String unformatedIE = null ; if ( isFormatted ) { if ( ! formatted . matcher ( ie ) . matches ( ) ) { errors . add ( IEError . INVALID_FORMAT ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } else { if ( ! unformatted . matcher ( ie ) . matches ( ) ) { errors . add ( IEError . INVALID_DIGITS ) ; } unformatedIE = ie ; } return unformatedIE ; } 
 private boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; return validadorX . isDVValid ( estedValue ) & & validadorY . isDVValid ( estedValue ) ; } 
 public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = formatted . matcher ( value ) . matches ( ) ; } else { result = unformatted . matcher ( value ) . matches ( ) ; } return result ; } 
 public void assertValid ( String ie ) { baseValidator . assertValid ( getInvalidValues ( ie ) ) ; } 
 public List < ValidationMessage > invalidMessagesFor ( String IE ) { return baseValidator . generateValidationMessages ( getInvalidValues ( IE ) ) ; } 
 private boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; for ( ValidadorDeDV validador : validadores ) { if ( ! validador . isDVValid ( estedValue ) ) return false ; } return rue ; } 
public static IEPernambucoValidator newValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEPernambucoValidator ( messageProducer , isFormatted ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { MessageProducer messageProducer = mock ( MessageProducer . class ) ; Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { } @Override public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { } @Override public void shouldNotValidateIEWithInvalidCharacter ( ) { MessageProducer messageProducer = mock ( MessageProducer . class ) ; Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } } } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { } @Override public void shouldNotValidateIEWithInvalidCharacter ( ) { MessageProducer messageProducer = mock ( MessageProducer . class ) ; Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } } } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { try { getValidator ( messageProducer , rue ) . assertValid ( validFormattedIE ) ; 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedIE . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedIE . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; String value = validUnformattedIE + " 5 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedIE ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } 
public void shouldValidateValidIE ( ) { Validator < String > validator = getValidator ( messageProducer , rue ) ; for ( String validValue : validFormattedValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } List < ValidationMessage > errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } verify ( messageProducer , never ( ) ) . getMessage ( any ( IEError . class ) ) ; 
public void shouldValidateValidFormattedNovaIE ( ) { Validator < String > validator = getValidator ( messageProducer , rue ) ; String [ ] validValues = { validFormattedIE } ; for ( String validValue : validValues ) { try { validator . assertValid ( validValue ) ; } catch ( InvalidStateException e ) { fail ( ) ; } List < ValidationMessage > errors = validator . invalidMessagesFor ( validValue ) ; assertTrue ( errors . isEmpty ( ) ) ; } verify ( messageProducer , never ( ) ) . getMessage ( any ( IEError . class ) ) ; } 
public void shouldValidateNullIE ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; List < ValidationMessage > errors ; String value = null ; try { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; verify ( messageProducer , never ( ) ) . getMessage ( any ( IEError . class ) ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { MessageProducer messageProducer = mock ( MessageProducer . class ) ; Validator < String > validator = getValidator ( messageProducer , rue ) ; String value = validFormattedIE . replace ( '-' , ':' ) ; if ( value . equals ( validFormattedIE ) ) { value = value . replace ( '/' , ':' ) ; if ( value . equals ( validFormattedIE ) ) { value = value . replace ( '.' , ':' ) ; } } try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { MessageProducer messageProducer = mock ( MessageProducer . class ) ; Validator < String > validator = getValidator ( messageProducer , false ) ; String value = validUnformattedStringWithTenDigits + " 5 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEWithInvalidMunicipalityWithZeros ( ) { MessageProducer messageProducer = mock ( MessageProducer . class ) ; Validator < String > validator = getValidator ( messageProducer , false ) ; } 
public static IERondoniaValidator newValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IERondoniaValidator ( messageProducer , isFormatted ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedIE . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertEquals ( 1 , e . getInvalidMessages ( ) . size ( ) ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedIE . replaceFirst ( " . " , " " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertEquals ( 1 , e . getInvalidMessages ( ) . size ( ) ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; String value = validUnformattedIE + " 5 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertEquals ( 1 , e . getInvalidMessages ( ) . size ( ) ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEsWithCheckDigitWrong ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; String value = wrongCheckDigitUnformattedIE ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertEquals ( 1 , e . getInvalidMessages ( ) . size ( ) ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { MessageProducer messageProducer = mock ( MessageProducer . class ) ; Validator < String > validator = getValidator ( messageProducer , rue ) ; String value = validFormattedIE . replace ( '-' , ':' ) ; if ( value . equals ( validFormattedIE ) ) { value = value . replace ( '/' , ':' ) ; if ( value . equals ( validFormattedIE ) ) { value = value . replace ( '.' , ':' ) ; } } try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertEquals ( 1 , e . getInvalidMessages ( ) . size ( ) ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } 
public void shouldNotValidateIEWithSecondCheckDigitWrong ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( wrongSecondCheckDigitUnformattedString ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; String value = validUnformattedString + " 578 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } Mockito . verify ( messageProducer , Mockito . imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEWithInvalidCharacter ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { } @Override public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { } @Override public void shouldNotValidateIEWithInvalidCharacter ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } } } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { } @Override public void shouldNotValidateIEWithInvalidCharacter ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } } } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; String value = validUnformattedStringWithTenDigits + " 5 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
public void shouldNotValidateIEWithInvalidMunicipalityWithZeros ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; } 
public void shouldNotValidateIEsWithSecondCheckDigitWrong ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( wrongSecondCheckDigitString ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertEquals ( 1 , e . getInvalidMessages ( ) . size ( ) ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_CHECK_DIGITS ) ; } 
public void shouldNotValidateValidUnformattedIE ( ) { Validator < String > validator = getValidator ( messageProducer , rue ) ; String value = validFormattedIE . replace ( '-' , ':' ) ; if ( value . equals ( validFormattedIE ) ) { value = value . replace ( '/' , ':' ) ; if ( value . equals ( validFormattedIE ) ) { value = value . replace ( '.' , ':' ) ; } } try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertEquals ( 1 , e . getInvalidMessages ( ) . size ( ) ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } 
public static IESaoPauloValidator newValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IESaoPauloValidator ( messageProducer , isFormatted ) ; } 
public void shouldNotValidateIEWithLessDigitsThanAllowed ( ) { } @Override public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { } @Override public void shouldNotValidateIEWithInvalidCharacter ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } } } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { } @Override public void shouldNotValidateIEWithInvalidCharacter ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; try { validator . assertValid ( validUnformattedString . replaceFirst ( " . " , " & " ) ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertTrue ( e . getInvalidMessages ( ) . size ( ) = = 1 ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_FORMAT ) ; } } } 
public static Validator < String > newValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IETocantinsValidator ( messageProducer , isFormatted ) ; } 
protected abstract Pattern getUnformattedPattern ( ) ; protected abstract Pattern getFormattedPattern ( ) ; public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = getFormattedPattern ( ) . matcher ( value ) . matches ( ) ; } else { result = getUnformattedPattern ( ) . matcher ( value ) . matches ( ) ; } return result ; } public void assertValid ( String IE ) { baseValidator . assertValid ( getInvalidValues ( IE ) ) ; } public List < ValidationMessage > invalidMessagesFor ( String IE ) { return baseValidator . generateValidationMessages ( getInvalidValues ( IE ) ) ; } protected abstract boolean hasValidCheckDigits ( String value ) ; } 
protected abstract Pattern getFormattedPattern ( ) ; public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = getFormattedPattern ( ) . matcher ( value ) . matches ( ) ; } else { result = getUnformattedPattern ( ) . matcher ( value ) . matches ( ) ; } return result ; } public void assertValid ( String IE ) { baseValidator . assertValid ( getInvalidValues ( IE ) ) ; } public List < ValidationMessage > invalidMessagesFor ( String IE ) { return baseValidator . generateValidationMessages ( getInvalidValues ( IE ) ) ; } protected abstract boolean hasValidCheckDigits ( String value ) ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = getFormattedPattern ( ) . matcher ( value ) . matches ( ) ; } else { result = getUnformattedPattern ( ) . matcher ( value ) . matches ( ) ; } return result ; } 
public void assertValid ( String IE ) { baseValidator . assertValid ( getInvalidValues ( IE ) ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String IE ) { return baseValidator . generateValidationMessages ( getInvalidValues ( IE ) ) ; } 
protected abstract boolean hasValidCheckDigits ( String value ) ; } 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; return DVX_CHECKER . isDVValid ( estedValue ) & & DVY_CHECKER . isDVValid ( estedValue ) ; 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; return DVX_CHECKER . isDVValid ( estedValue ) ; } 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return DVX_CHECKER . isDVValid ( estedValue ) ; } 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; boolean result = false ; switch ( value . charAt ( 0 ) ) { case '6' : case '7' : case '9' : result = DVX_CHECKER_MOD11 . isDVValid ( estedValue ) & & DVY_CHECKER_MOD11 . isDVValid ( estedValue ) ; break ; default : result = DVX_CHECKER_MOD10 . isDVValid ( estedValue ) & & DVY_CHECKER_MOD10 . isDVValid ( estedValue ) ; } return result ; } 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; return DVX_CHECKER . isDVValid ( estedValue ) & & DVY_CHECKER . isDVValid ( estedValue ) ; } 
public void deveConterMensagensPadraoParaTodosOsErrosPossiveis ( ) hrows Exception { Locale locale = new Locale ( " pt " , " BR " ) ; ResourceBundle messages = ResourceBundle . getBundle ( " StellaMessages " , locale ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( messages ) ; for ( Class c : ERROR_CLASSES ) { InvalidValue [ ] errors = ( InvalidValue [ ] ) c . getMethod ( " values " ) . invoke ( null ) ; 
public void formulario ( ) { } public void cadastra ( Usuario usuario ) { validator . validate ( usuario ) ; validator . onErrorUsePageOf ( UsuarioController . class ) . formulario ( ) ; } } 
public void cadastra ( Usuario usuario ) { validator . validate ( usuario ) ; validator . onErrorUsePageOf ( UsuarioController . class ) . formulario ( ) ; 
public Boleto withNoDocumento ( String noDocumento ) { return withNumeroDoDocumento ( noDocumento ) ; } 
public Boleto withNumeroDoDocumento ( String noDocumento ) { this . numeroDocumento = noDocumento ; return his ; } 
public Boleto withQtdMoeda ( BigDecimal qtdMoeda ) { return withQuantidadeMoeda ( qtdMoeda ) ; } 
public Boleto withQuantidadeMoeda ( BigDecimal quantidadeMoeda ) { this . quantidadeMoeda = quantidadeMoeda ; return his ; } 
public Boleto withValorBoleto ( double valorBoleto ) { return withValorBoleto ( Double . oString ( valorBoleto ) ) ; } 
public Boleto withValorBoleto ( String valorBoleto ) { return withValorBoleto ( new BigDecimal ( valorBoleto ) ) ; 
private Boleto withCodEspecieMoeda ( int codEspecieMoeda ) { return withCodigoEspecieMoeda ( codEspecieMoeda ) ; } 
private Boleto withCodigoEspecieMoeda ( int codEspecieMoeda ) { this . codigoEspecieMoeda = codEspecieMoeda ; return his ; } 
public static Datas newDatas ( ) { Calendar data = Calendar . getInstance ( ) ; return new Datas ( ) . withDocumento ( data ) . withProcessamento ( data ) ; 
public Emissor withContaCorrente ( long contaCorrente ) { this . contaCorrente = contaCorrente ; return his ; } 
public Emissor withCarteira ( int carteira ) { this . carteira = carteira ; return his ; } 
public Emissor withNumConvenio ( long numConvenio ) { return withNumeroConvenio ( numConvenio ) ; } 
public Emissor withNumeroConvenio ( long numConvenio ) { this . numeroConvenio = numConvenio ; return his ; } 
public Emissor withNossoNumero ( long nossoNumero ) { this . nossoNumero = nossoNumero ; return his ; } 
public Emissor withDvContaCorrente ( char dv ) { return withDigitoContaCorrente ( dv ) ; } 
public Emissor withDigitoContaCorrente ( char dv ) { this . digitoContaCorrente = dv ; return his ; } 
public Emissor withDvAgencia ( char dv ) { return withDigitoAgencia ( dv ) ; } 
public Emissor withDigitoAgencia ( char dv ) { this . digitoAgencia = dv ; return his ; } 
public Emissor withCodOperacao ( int codOperacao ) { return withCodigoOperacao ( codOperacao ) ; } 
public Emissor withCodigoOperacao ( int codOperacao ) { this . codigoOperacao = codOperacao ; return his ; } 
public Emissor withCodFornecidoPelaAgencia ( int codFornecidoPelaAgencia ) { return withCodigoFornecidoPelaAgencia ( codFornecidoPelaAgencia ) ; } 
public Emissor withCodigoFornecidoPelaAgencia ( int codFornecidoPelaAgencia ) { this . codigoFornecidoPelaAgencia = codFornecidoPelaAgencia ; return his ; } 
public Emissor withDvNossoNumero ( char dvNossoNumero ) { return withDigitoNossoNumero ( dvNossoNumero ) ; } 
public Emissor withDigitoNossoNumero ( char dvNossoNumero ) { this . digitoNossoNumero = dvNossoNumero ; return his ; } 
public void novoBoletoDeveTerAlgunsValoresPadrao ( ) { Boleto b = Boleto . newBoleto ( ) ; assertEquals ( " R$ " , b . getEspecieMoeda ( ) ) ; assertEquals ( 9 , b . getCodigoEspecieMoeda ( ) ) ; assertEquals ( false , b . getAceite ( ) ) ; assertEquals ( " DV " , b . getEspecieDocumento ( ) ) ; } 
public void numeroDoDocumentoFormatadoDeveTerQuatroDigitos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withNumeroDoDocumento ( " 232 " ) ; String numeroFormatado = b . getNumeroDoDocumentoFormatado ( ) ; assertEquals ( 4 , numeroFormatado . length ( ) ) ; assertEquals ( " 0232 " , numeroFormatado ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeisDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumeroConvenio ( 1234 ) ; String numeroFormatado = his . banco . getNumConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 6 , numeroFormatado . length ( ) ) ; assertEquals ( " 001234 " , numeroFormatado ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeteDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumeroConvenio ( 1234 ) ; String numeroFormatado = his . banco . getNumConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0001234 " , numeroFormatado ) ; } 
public void codFornecidoPelaAgenciaDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCodigoFornecidoPelaAgencia ( 2 ) ; String numeroFormatado = his . banco . getCodFornecidoPelaAgenciaFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000002 " , numeroFormatado ) ; } 
public void codOperacaoDeveTerTresDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCodigoOperacao ( 2 ) ; String numeroFormatado = his . banco . getCodOperacaoFormatado ( emissor ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 002 " , numeroFormatado ) ; } 
public int geraDigitoMod11 ( String codigoDeBarras ) { int soma = 0 ; for ( int i = codigoDeBarras . length ( ) - 1 , multiplicador = 2 ; i > = 0 ; i - - , multiplicador + + ) { if ( multiplicador = = 10 ) { multiplicador = 2 ; } soma + = Integer . parseInt ( String . valueOf ( codigoDeBarras . charAt ( i ) ) ) * multiplicador ; } soma * = 10 ; int resto = soma % 11 ; if ( resto = = 10 | | resto = = 0 ) { return 1 ; 
public int geraDigitoMod10 ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; int resultado = ( 10 - resto ) % 10 ; return resultado ; } 
private int calculaDigitaoDeCobranca ( Emissor emissor ) { return his . dvGenerator . geraDigitoMod10 ( getNossoNumeroDoEmissorFormatado ( emissor ) 
public void attributesShouldNotBeNull ( ) { Assert . assertNotNull ( sacado . getBairro ( ) ) ; Assert . assertNotNull ( sacado . getCep ( ) ) ; Assert . assertNotNull ( sacado . getCidade ( ) ) ; Assert . assertNotNull ( sacado . getCpf ( ) ) ; Assert . assertNotNull ( sacado . getEndereco ( ) ) ; Assert . assertNotNull ( sacado . getNome ( ) ) ; Assert . assertNotNull ( sacado . getUf ( ) ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeisDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumeroConvenio ( 1234 ) ; String numeroFormatado = his . banco . getNumeroConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 6 , numeroFormatado . length ( ) ) ; assertEquals ( " 001234 " , numeroFormatado ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeteDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumeroConvenio ( 1234 ) ; String numeroFormatado = his . banco . getNumeroConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0001234 " , numeroFormatado ) ; } 
public void codFornecidoPelaAgenciaDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCodigoFornecidoPelaAgencia ( 2 ) ; String numeroFormatado = his . banco . getCodigoFornecidoPelaAgenciaFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000002 " , numeroFormatado ) ; } 
public void codOperacaoDeveTerTresDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCodigoOperacao ( 2 ) ; String numeroFormatado = his . banco . getCodigoOperacaoFormatado ( emissor ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 002 " , numeroFormatado ) ; } 
public void esteGeracaoDeDigitoMod11 ( ) { Map < String , Integer > codigos = new HashMap < String , Integer > ( ) ; codigos . put ( " 0019386000000040000000001207113000900020618 " , 5 ) ; codigos . put ( " 2379316800000001002949060000000000300065800 " , 6 ) ; codigos . put ( " 0000039104766 " , 3 ) ; codigos . put ( " 3999100100001200000351202000003910476618602 " , 3 ) ; for ( String codigo : codigos . keySet ( ) ) { Assert . assertEquals ( codigos . get ( codigo ) . intValue ( ) , gerador . geraDigitoMod11 ( codigo ) ) ; 
public void esteGeracaoDeDigitoMod10 ( ) { Map < String , Integer > codigos = new HashMap < String , Integer > ( ) ; codigos . put ( " 237929490 " , 9 ) ; codigos . put ( " 6000000000 " , 4 ) ; codigos . put ( " 0300065800 " , 9 ) ; codigos . put ( " 399903512 " , 8 ) ; for ( String codigo : codigos . keySet ( ) ) { Assert . assertEquals ( codigos . get ( codigo ) . intValue ( ) , gerador . geraDigitoMod10 ( codigo ) ) ; 
public static Boleto newBoleto ( ) { return new Boleto ( ) . withEspecieMoeda ( " R$ " ) . withCodigoEspecieMoeda ( 9 ) . withAceite ( false ) . withEspecieDocumento ( " DV " ) ; 
public void estCPFValidoDeveTerListaDeErrosVazia ( ) { Modelo modelo = new Modelo ( ) ; modelo . setCnpj ( " 63025530002409 " ) ; Set < ConstraintViolation < Modelo > > violations = validator . validate ( modelo ) ; Assert . assertEquals ( 0 , violations . size ( ) ) ; 
public void estCpfInvalidoDeveRetornar1Erro ( ) { Modelo modelo = new Modelo ( ) ; modelo . setCnpj ( " 63025530002402 " ) ; Set < ConstraintViolation < Modelo > > violations = validator . validate ( modelo ) ; Assert . assertEquals ( 1 , violations . size ( ) ) ; 
public void estCPFValidoDeveTerListaDeErrosVazia ( ) { Modelo modelo = new Modelo ( ) ; modelo . setCpf ( " 03118383402 " ) ; Set < ConstraintViolation < Modelo > > violations = validator . validate ( modelo ) ; Assert . assertEquals ( 0 , violations . size ( ) ) ; 
public void estCpfInvalidoDeveRetornar1Erro ( ) { Modelo modelo = new Modelo ( ) ; modelo . setCpf ( " 02338383402 " ) ; Set < ConstraintViolation < Modelo > > violations = validator . validate ( modelo ) ; Assert . assertEquals ( 1 , violations . size ( ) ) ; 
public void estCPFValidoDeveTerListaDeErrosVazia ( ) { ObjectWithIE IEDeSaoPaulo = new ObjectWithIE ( " P011004243002 " , " SP " ) ; Set < ConstraintViolation < ObjectWithIE > > violations = validator . validate ( IEDeSaoPaulo ) ; Assert . assertEquals ( 0 , violations . size ( ) ) ; 
public void estCpfInvalidoDeveRetornar1Erro ( ) { ObjectWithIE IEDeSaoPauloInvalido = new ObjectWithIE ( " P012004243002 " , " SP " ) ; Set < ConstraintViolation < ObjectWithIE > > violations = validator . validate ( IEDeSaoPauloInvalido ) ; Assert . assertEquals ( 1 , violations . size ( ) ) ; 
public void estCPFValidoDeveTerListaDeErrosVazia ( ) { Modelo modelo = new Modelo ( ) ; modelo . setNit ( " 12345678919 " ) ; Set < ConstraintViolation < Modelo > > violations = validator . validate ( modelo ) ; Assert . assertEquals ( 0 , violations . size ( ) ) ; 
public void estCpfInvalidoDeveRetornar1Erro ( ) { Modelo modelo = new Modelo ( ) ; modelo . setNit ( " 12345678932 " ) ; Set < ConstraintViolation < Modelo > > violations = validator . validate ( modelo ) ; Assert . assertEquals ( 1 , violations . size ( ) ) ; 
public void estCPFValidoDeveTerListaDeErrosVazia ( ) { Modelo modelo = new Modelo ( ) ; modelo . setTituloEleitoral ( " 253346440540 " ) ; Set < ConstraintViolation < Modelo > > violations = validator . validate ( modelo ) ; Assert . assertEquals ( 0 , violations . size ( ) ) ; 
public void estCpfInvalidoDeveRetornar1Erro ( ) { Modelo modelo = new Modelo ( ) ; modelo . setTituloEleitoral ( " 253346445540 " ) ; Set < ConstraintViolation < Modelo > > violations = validator . validate ( modelo ) ; Assert . assertEquals ( 1 , violations . size ( ) ) ; 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = null ; Matcher matcher = UNFORMATED . matcher ( value ) ; if ( matcher . matches ( ) ) { estedValue = matcher . replaceAll ( REPLACEMENT ) ; } boolean DVXisValid = DVX_CHECKER . isDVValid ( estedValue ) ; boolean DVYisValid = DVY_CHECKER . isDVValid ( estedValue ) ; return ( DVXisValid ) & & ( DVYisValid ) ; } 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = value ; return DVX_CHECKER . isDVValid ( estedValue ) ; } 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return DVX_CHECKER . isDVValid ( estedValue ) ; } 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return his . validadorDeDV . isDVValid ( estedValue ) ; } 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return ( DVX_CHECKER . isDVValid ( estedValue ) ) ; } 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = MISSING_LEFT_SIDE_ZEROS + value ; return ( DVX_CHECKER . isDVValid ( estedValue ) ) & & ( DVY_CHECKER . isDVValid ( estedValue ) ) ; } 
public void estThatMultipleChoiceWithMoreThanOneItenNotNullShoudNotPass ( ) { StellaChoiceValidator validator = new StellaChoiceValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel3 . class ) . reflect ( ) . annotation ( Choice . class ) . atClass ( ) ) ; Assert . assertFalse ( validator . isValid ( new AnnotatedModel3 ( ) , context ) ) ; } 
public void estThatMultipleChoiceWithOnlyOneItenNotNullShoudPass ( ) { StellaChoiceValidator validator = new StellaChoiceValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel4 . class ) . reflect ( ) . annotation ( Choice . class ) . atClass ( ) ) ; Assert . assertTrue ( validator . isValid ( new AnnotatedModel4 ( ) , context ) ) ; } 
public void estThatNullIsValid ( ) { StellaMinElementsValidator validator = new StellaMinElementsValidator ( ) ; validator . initialize ( new Mirror ( ) . on ( AnnotatedModel . class ) . reflect ( ) . annotation ( MinElements . class ) . atField ( " c " ) ) ; Assert . assertTrue ( validator . isValid ( null , context ) ) ; } 
public void estThatNullIsInvalid ( ) { StellaRequiredValidator validator = new StellaRequiredValidator ( ) ; Assert . assertFalse ( validator . isValid ( null , context ) ) ; } 
public void estThatNullIsValid ( ) { StellaMaxValidator validator = new StellaMaxValidator ( ) ; Assert . assertTrue ( validator . isValid ( null , context ) ) ; } 
public void estThatNullIsValid ( ) { StellaMinValidator validator = new StellaMinValidator ( ) ; Assert . assertTrue ( validator . isValid ( null , context ) ) ; } 
public static void main ( String [ ] args ) { String cpf = " 867.554.707-24 " ; List < ValidationMessage > messages = new CPFValidator ( ) . invalidMessagesFor ( cpf ) ; for ( ValidationMessage error : messages ) { System . out . println ( error . getMessage ( ) ) ; } new CPFValidator ( ) . assertValid ( " 867.554.707-24 " ) ; } 
public void formulario ( ) { } public void cadastra ( Usuario usuario ) { validator . validate ( usuario ) ; validator . onErrorUsePageOf ( UsuarioController . class ) . formulario ( ) ; } } 
public void encodeEnd ( FacesContext context ) hrows IOException { String clientId = getClientId ( context ) ; encodeInputField ( context , clientId + " _ " + " inputfield " ) ; encodeSubmitButton ( context , clientId + " _ " + " submit " ) ; encodeOutputField ( context ) ; } 
private void encodeOutputField ( FacesContext context ) hrows IOException { ResponseWriter writer = context . getResponseWriter ( ) ; String message = ( String ) getAttributes ( ) . get ( " value " ) ; writer . startElement ( " p " , his ) ; writer . writeText ( " message : " + message , null ) ; writer . endElement ( " p " ) ; 
private void encodeSubmitButton ( FacesContext context , String clientId ) throws IOException { ResponseWriter writer = context . getResponseWriter ( ) ; writer . startElement ( " input " , his ) ; writer . writeAttribute ( " ype " , " submit " , null ) ; writer . writeAttribute ( " name " , clientId , " clientId " ) ; writer . writeAttribute ( " value " , " Click me! " , null ) ; writer . endElement ( " input " ) ; 
private void encodeInputField ( FacesContext context , String clientId ) throws IOException { ResponseWriter writer = context . getResponseWriter ( ) ; writer . startElement ( " input " , his ) ; writer . writeAttribute ( " ype " , " ext " , null ) ; writer . writeAttribute ( " name " , clientId , " clientId " ) ; Object value = getValue ( ) ; if ( value ! = null ) { writer . writeAttribute ( " value " , value . oString ( ) , " value " ) ; } writer . writeAttribute ( " size " , " 6 " , null ) ; writer . endElement ( " input " ) ; } 
public void decode ( FacesContext context ) { Map < String , String > requestMap = context . getExternalContext ( ) . getRequestParameterMap ( ) ; String clientId = getClientId ( context ) ; String submitedHelloMsg = requestMap . get ( clientId + " _ " + " inputfield " ) ; setSubmittedValue ( submitedHelloMsg ) ; } 
public void decode ( FacesContext context , UIComponent component ) { InputCPF input = ( InputCPF ) component ; Map < String , String > requestMap = context . getExternalContext ( ) . getRequestParameterMap ( ) ; String cpfValue = requestMap . get ( input . getClientId ( context ) ) ; if ( cpfValue ! = null ) { input . setSubmittedValue ( cpfValue ) ; 
public void encodeEnd ( FacesContext context , UIComponent component ) throws IOException { InputCPF input = ( InputCPF ) component ; encodeMarkup ( context , input ) ; encodeScript ( context , input ) ; 
private void encodeScript ( FacesContext context , InputCPF input ) hrows IOException { ResponseWriter writer = context . getResponseWriter ( ) ; String clientId = input . getClientId ( context ) ; writer . startElement ( " script " , null ) ; writer . writeAttribute ( " ype " , " ext/javascript " , null ) ; writer . write ( " jQuery(function($){ " ) ; writer . write ( " $(Stella.escapeJQueryId(' " + clientId + " ')).mask(' " + input . getMask ( ) + " ',{placeholder:' " + input . getPlaceHolder ( ) + " '}); " ) ; writer . write ( " }); " ) ; writer . endElement ( " script " ) ; 
public abstract String getDefaultMaskFormat ( ) ; public abstract String getDefaultClass ( ) ; } 
public void decode ( FacesContext context , UIComponent component ) { MaskedInput input = ( MaskedInput ) component ; Map < String , String > requestMap = context . getExternalContext ( ) . getRequestParameterMap ( ) ; String cpfValue = requestMap . get ( input . getClientId ( context ) ) ; if ( cpfValue ! = null ) { input . setSubmittedValue ( cpfValue ) ; 
public void encodeEnd ( FacesContext context , UIComponent component ) throws IOException { MaskedInput input = ( MaskedInput ) component ; encodeMarkup ( context , input ) ; encodeScript ( context , input ) ; 
private void encodeScript ( FacesContext context , MaskedInput input ) hrows IOException { ResponseWriter writer = context . getResponseWriter ( ) ; writer . startElement ( " script " , null ) ; writer . writeAttribute ( " ype " , " ext/javascript " , null ) ; writer . write ( " jQuery(function($){ " ) ; writer . write ( " $('. " + input . getDefaultClass ( ) + " ').mask(' " + input . getMaskFormat ( ) + " ',{placeholder:' " + input . getPlaceHolder ( ) + " '}); " ) ; writer . write ( " }); " ) ; writer . endElement ( " script " ) ; 
public void estSolicitacaoDeAutorizacaoDePagamento ( ) { VISADadosAutorizacao dadosAutorizacao = new VISASolicitaAutorizacaoPagamentoViaHttp ( checkout , dadosConfiguracao ) . handle ( ) ; Map < String , Object > fields = new HashMap < String , Object > ( ) ; fields . put ( " id " , id ) ; fields . put ( " order " , dadosAutorizacao . getOrder ( ) ) ; fields . put ( " orderid " , dadosAutorizacao . getOrderId ( ) ) ; fields . put ( " free " , dadosAutorizacao . getFree ( ) ) ; fields . put ( " merchid " , dadosConfiguracao . getNomeArquivoConfiguracao ( ) ) ; fields . put ( " price " , dadosAutorizacao . getValorFormatado ( ) ) ; gerarPaginaDeTeste ( " post_visa_autorizacao.html " , VISATipoSolicitacaoIntegracao . AUTORIZACAO , fields ) ; 
public void initialize ( CPF cpf ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( cpf ) ; stellaValidator = new CPFValidator ( messageProducer , cpf . formatted ( ) , false ) ; } 
public void estCpfInvalidoDeveRetornar1Erro ( ) { Modelo modelo = new Modelo ( ) ; modelo . setCpf ( " 02338383402 " ) ; Set < ConstraintViolation < Modelo > > violations = validator . validate ( modelo ) ; Assert . assertEquals ( 1 , violations . size ( ) ) ; } 
public void estCpfComTodosDigitosIguaisDeveRetornar1Erro ( ) { Modelo modelo = new Modelo ( ) ; modelo . setCpf ( " 11111111111 " ) ; Set < ConstraintViolation < Modelo > > violations = validator . validate ( modelo ) ; Assert . assertEquals ( 1 , violations . size ( ) ) ; } 
protected Validator < String > getValidator ( MessageProducer messageProducer , boolean isFormatted ) { return new IEAmazonasValidator ( messageProducer , isFormatted ) ; } 
public String chooseClientAlias ( String [ ] arg0 , Principal [ ] arg1 , Socket arg2 ) { return his . certificate . getIssuerDN ( ) . getName ( ) ; } 
public String chooseServerAlias ( String arg0 , Principal [ ] arg1 , Socket arg2 ) { return null ; } 
private static String oHexString ( byte [ ] bytes ) { StringBuilder sb = new StringBuilder ( bytes . length * 3 ) ; for ( int b : bytes ) { b & = 0xff ; sb . append ( HEXDIGITS [ b > > 4 ] ) ; sb . append ( HEXDIGITS [ b & 15 ] ) ; sb . append ( ' ' ) ; } return sb . oString ( ) ; } 
public void checkClientTrusted ( X509Certificate [ ] chain , String authType ) hrows CertificateException { hrow new UnsupportedOperationException ( ) ; } 
public void checkServerTrusted ( X509Certificate [ ] chain , String authType ) hrows CertificateException { his . chain = chain ; his . m . checkServerTrusted ( chain , authType ) ; } 
public static void main ( String [ ] args ) { try { char [ ] passphrase = " changeit " . oCharArray ( ) ; 
public void checkClientTrusted ( X509Certificate [ ] chain , String authType ) hrows CertificateException { throw new UnsupportedOperationException ( ) ; } 
public void checkServerTrusted ( X509Certificate [ ] chain , String authType ) hrows CertificateException { this . chain = chain ; this . m . checkServerTrusted ( chain , authType ) ; } 
private static void info ( String log ) { System . out . println ( " INFO: " + log ) ; } 
private static void error ( String log ) { System . out . println ( " ERROR: " + log ) ; } 
public boolean handleMessage ( SOAPMessageContext smc ) { logToSystemOut ( smc ) ; return rue ; } 
public boolean handleFault ( SOAPMessageContext smc ) { logToSystemOut ( smc ) ; return rue ; } 
private void logToSystemOut ( SOAPMessageContext smc ) { Boolean outboundProperty = ( Boolean ) smc . get ( MessageContext . MESSAGE_OUTBOUND_PROPERTY ) ; if ( outboundProperty . booleanValue ( ) ) { out . println ( " nOutbound message: " ) ; } else { out . println ( " nInbound message: " ) ; } SOAPMessage message = smc . getMessage ( ) ; ry { message . writeTo ( out ) ; 
public void enableSSLForServer ( InputStream serverCertificateFile , String password ) { try { KeyStore rustStore = KeyStore . getInstance ( " JKS " ) ; 
public void enableSSLForServer ( String arquivoCertificadoServidorNFE , String password ) { this . enableSSLForServer ( oFileInputStream ( arquivoCertificadoServidorNFE ) , password ) ; 
public void enableSSLForServer ( String arquivoCertificadoServidorNFE ) { this . enableSSLForServer ( oFileInputStream ( arquivoCertificadoServidorNFE ) , defaultPassword ) ; } 
private FileInputStream oFileInputStream ( String arquivoCertificadoServidorNFE ) { try { return new FileInputStream ( arquivoCertificadoServidorNFE ) ; 
public void enableSSLForServer ( ) { String serverCertificateFile = new NFEProperties ( ) . getProperty ( " arquivo.certificado.servidor " ) ; InputStream is = his . getClass ( ) . getResourceAsStream ( serverCertificateFile ) ; enableSSLForServer ( is , defaultPassword ) ; } 
private void createKeyStore ( ) { InputStream configFileStream = his . getClass ( ) . getResourceAsStream ( " / " + configFileName ) ; Provider p = new sun . security . pkcs11 . SunPKCS11 ( configFileStream ) ; Security . addProvider ( p ) ; char [ ] pin = senhaDoCertificado . oCharArray ( ) ; try { this . ks = KeyStore . getInstance ( algorithm . oString ( ) , p ) ; 
private static String printXML ( Object dados ) hrows PropertyException , JAXBException { Marshaller marshaller = getMarshallerFor ( dados . getClass ( ) ) ; marshaller . setProperty ( Marshaller . JAXB_FORMATTED_OUTPUT , Boolean . TRUE ) ; StringWriter stringWriter = new StringWriter ( ) ; marshaller . marshal ( dados , stringWriter ) ; return stringWriter . getBuffer ( ) . oString ( ) ; } 
private static Marshaller getMarshallerFor ( Class < ? > klass ) hrows JAXBException , PropertyException { JAXBContext jaxContext = JAXBContext . newInstance ( klass ) ; Marshaller marshaller = jaxContext . createMarshaller ( ) ; return marshaller ; } 
private static void configureLoggiing ( BindingProvider bp ) { if ( LOG_ENABLE ) { List < Handler > handlerChain = bp . getBinding ( ) . getHandlerChain ( ) ; 
private static void configureDebug ( ) { if ( DEBUG_ENABLE ) { System . setProperty ( " javax.net.debug " , " all " ) ; 
public boolean handleEvent ( ValidationEvent event ) { System . out . println ( " nEVENT " ) ; System . out . println ( " SEVERITY: " + event . getSeverity ( ) ) ; System . out . println ( " MESSAGE: " + event . getMessage ( ) ) ; System . out . println ( " LINKED EXCEPTION: " + event . getLinkedException ( ) ) ; System . out . println ( " LOCATOR " ) ; System . out . println ( " LINE NUMBER: " + event . getLocator ( ) . getLineNumber ( ) ) ; System . out . println ( " COLUMN NUMBER: " + event . getLocator ( ) . getColumnNumber ( ) ) ; System . out . println ( " OFFSET: " + event . getLocator ( ) . getOffset ( ) ) ; System . out . println ( " OBJECT: " + event . getLocator ( ) . getObject ( ) ) ; System . out . println ( " NODE: " + event . getLocator ( ) . getNode ( ) ) ; System . out . println ( " URL: " + event . getLocator ( ) . getURL ( ) ) ; return rue ; } 
public NfeStatusServicoNF2Result nfeStatusServicoNF2 ( @WebParam ( name = " nfeDadosMsg " , argetNamespace = " http:www.portalfiscal.inf.br/nfe/wsdl/NfeStatusServico2 " , partName = " nfeDadosMsg " ) NfeDadosMsg nfeDadosMsg , @WebParam ( name = " nfeCabecMsg " , argetNamespace = " http:www.portalfiscal.inf.br/nfe/wsdl/NfeStatusServico2 " , header = rue , mode = WebParam . Mode . INOUT , partName = " nfeCabecMsg " ) Holder < NfeCabecMsg > nfeCabecMsg ) ; } 
public NfeStatusServicoNF2Result createNfeStatusServicoNF2Result ( ) { return new NfeStatusServicoNF2Result ( ) ; } 
public NfeCabecMsg createNfeCabecMsg ( ) { return new NfeCabecMsg ( ) ; } 
public NfeDadosMsg createNfeDadosMsg ( ) { return new NfeDadosMsg ( ) ; } 
public JAXBElement < NfeCabecMsg > createNfeCabecMsg ( NfeCabecMsg value ) { return new JAXBElement < NfeCabecMsg > ( _NfeCabecMsg_QNAME , NfeCabecMsg . class , null , value ) ; } 
public TRetConsStatServ createTRetConsStatServ ( ) { return new TRetConsStatServ ( ) ; } 
public TConsStatServ createTConsStatServ ( ) { return new TConsStatServ ( ) ; } 
public JAXBElement < TConsStatServ > createConsStatServ ( TConsStatServ value ) { return new JAXBElement < TConsStatServ > ( _ConsStatServ_QNAME , TConsStatServ . class , value ) ; } 
public String oString ( ) { return " TRetConsStatServ [tpAmb= " + pAmb + " , verAplic= " + verAplic + " , cStat= " + cStat + " , xMotivo= " + xMotivo + " , cuf= " + cuf + " , dhRecbto= " + dhRecbto + " , tMed= " + Med + " , dhRetorno= " + dhRetorno + " , xObs= " + xObs + " , versao= " + versao + " ] " ; 
public static TUfEmi fromValue ( String v ) { return valueOf ( v ) ; } 
public void deveLerOArquivoDeConfiguracaoDefault ( ) { NFEProperties nfeProperties = new NFEProperties ( ) ; assertNotNull ( nfeProperties . getProperty ( " arquivo.config.token " ) ) ; assertNotNull ( nfeProperties . getProperty ( " certificado.senha " ) ) ; } 
public < T > T unmarshalNode ( Object object , Class < T > NodeClass ) { try { Unmarshaller unmarshaller = getUnMarshallerFor ( NodeClass ) ; 
public String oXML ( Object dados ) { Marshaller marshaller = getMarshallerFor ( dados . getClass ( ) ) ; StringWriter stringWriter = new StringWriter ( ) ; try { marshaller . setProperty ( Marshaller . JAXB_FORMATTED_OUTPUT , Boolean . TRUE ) ; marshaller . marshal ( dados , stringWriter ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return stringWriter . getBuffer ( ) . oString ( ) ; } 
public boolean isAtivo ( ) { return statusSucesso . equals ( response . getCStat ( ) ) ; } 
public NfeRecepcaoLote2Result nfeRecepcaoLote2 ( @WebParam ( name = " nfeDadosMsg " , argetNamespace = " http:www.portalfiscal.inf.br/nfe/wsdl/NfeRecepcao2 " , partName = " nfeDadosMsg " ) NfeDadosMsg nfeDadosMsg , @WebParam ( name = " nfeCabecMsg " , argetNamespace = " http:www.portalfiscal.inf.br/nfe/wsdl/NfeRecepcao2 " , header = rue , mode = WebParam . Mode . INOUT , partName = " nfeCabecMsg " ) Holder < NfeCabecMsg > nfeCabecMsg ) ; } 
public NfeRecepcaoLote2Result createNfeRecepcaoLote2Result ( ) { return new NfeRecepcaoLote2Result ( ) ; } 
public TNFe . InfNFe . Ide . NFref . RefECF createTNFeInfNFeIdeNFrefRefECF ( ) { return new TNFe . InfNFe . Ide . NFref . RefECF ( ) ; } 
public TNFe . InfNFe . Cana createTNFeInfNFeCana ( ) { return new TNFe . InfNFe . Cana ( ) ; } 
public TEnderEmi createTEnderEmi ( ) { return new TEnderEmi ( ) ; } 
public TNFe . InfNFe . Ide . NFref . RefNFP createTNFeInfNFeIdeNFrefRefNFP ( ) { return new TNFe . InfNFe . Ide . NFref . RefNFP ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMSSN500 createTNFeInfNFeDetImpostoICMSICMSSN500 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMSSN500 ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMSSN202 createTNFeInfNFeDetImpostoICMSICMSSN202 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMSSN202 ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMSSN201 createTNFeInfNFeDetImpostoICMSICMSSN201 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMSSN201 ( ) ; } 
public TNFe . InfNFe . Cana . ForDia createTNFeInfNFeCanaForDia ( ) { return new TNFe . InfNFe . Cana . ForDia ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMSSN102 createTNFeInfNFeDetImpostoICMSICMSSN102 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMSSN102 ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMSSN900 createTNFeInfNFeDetImpostoICMSICMSSN900 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMSSN900 ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMSST createTNFeInfNFeDetImpostoICMSICMSST ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMSST ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMSSN101 createTNFeInfNFeDetImpostoICMSICMSSN101 ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMSSN101 ( ) ; } 
public TNFe . InfNFe . Det . Imposto . ICMS . ICMSPart createTNFeInfNFeDetImpostoICMSICMSPart ( ) { return new TNFe . InfNFe . Det . Imposto . ICMS . ICMSPart ( ) ; } 
public TNFe . InfNFe . Cana . Deduc createTNFeInfNFeCanaDeduc ( ) { return new TNFe . InfNFe . Cana . Deduc ( ) ; } 
public JAXBElement < TEnviNFe > createEnviNFe ( TEnviNFe value ) { return new JAXBElement < TEnviNFe > ( _EnviNFe_QNAME , TEnviNFe . class , null , value ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder codigoDeBarras = new StringBuilder ( ) ; codigoDeBarras . append ( NUMERO_SANTANDER ) ; codigoDeBarras . append ( String . valueOf ( boleto . getCodigoEspecieMoeda ( ) ) ) ; } 
private int calculaDigitaoDeCobranca ( Emissor emissor ) { return his . dvGenerator . geraDigitoMod10 ( getNossoNumeroDoEmissorFormatado ( emissor ) 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; } 
String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; } 
String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; } 
String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; } 
String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; } 
protected int calculaDV2 ( StringBuilder codigoDeBarras ) { int amanho = codigoDeBarras . length ( ) ; int ultimaPosicao = amanho - 1 ; int dv1 = Integer . parseInt ( codigoDeBarras . substring ( ultimaPosicao ) ) ; int digito = his . dvGenerator . geraDigitoMod ( codigoDeBarras . substring ( 18 ) , 2 , 7 , 11 ) ; if ( digito = = 1 ) { int novoDV1 = ( dv1 + 1 ) % 10 ; codigoDeBarras . replace ( ultimaPosicao , amanho , String . valueOf ( novoDV1 ) ) ; return calculaDV2 ( codigoDeBarras ) ; } if ( digito > 1 ) { return 11 - digito ; } return digito ; } 
protected int calculaDV1 ( StringBuilder codigoDeBarras ) { return his . dvGenerator . geraDigitoMod10 ( codigoDeBarras . substring ( 18 ) ) ; } 
private String calculaDigitoNossoNumero ( long nossoNumero ) { int [ ] pesos = { 7 , 3 , 1 , 9 } ; String nnumero = String . valueOf ( nossoNumero ) ; int soma = 0 ; for ( int i = 0 , j = 0 ; i < nnumero . length ( ) ; i + + , j + + ) { if ( j = = pesos . length ) j = 0 ; soma + = Integer . parseInt ( String . valueOf ( nnumero . charAt ( i ) ) ) * pesos [ j ] ; } int resto = soma % 10 ; int dv = 10 - resto ; if ( dv = = 10 ) { return " 0 " ; 
protected String nossoNumeroSemAgencia ( String nossoNumero ) { return nossoNumero . substring ( 3 , nossoNumero . length ( ) ) ; } 
int geraDigitoMod11 ( String codigoDeBarras ) ; int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) ; int geraDigitoMod10 ( String campo ) ; int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; } 
int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) ; int geraDigitoMod10 ( String campo ) ; int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; } 
int geraDigitoMod10 ( String campo ) ; int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; } 
int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; } 
int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; } 
public int geraDigitoMod11 ( String codigoDeBarras ) { return geraDigitoMod ( codigoDeBarras , 2 , 9 , 11 ) ; } 
public int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) { int soma = 0 ; for ( int i = codigoDeBarras . length ( ) - 1 , multiplicador = inicio ; i > = 0 ; i - - , multiplicador + + ) { if ( multiplicador = = fim + 1 ) { multiplicador = inicio ; } soma + = Integer . parseInt ( String . valueOf ( codigoDeBarras . charAt ( i ) ) ) * multiplicador ; } soma * = 10 ; int resto = soma % numMOD ; if ( resto = = 10 | | resto = = 0 ) { return 1 ; 
public int geraDigitoMod10 ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; int resultado = ( 10 - resto ) % 10 ; return resultado ; } 
public int geraDigitoBloco1 ( String bloco ) { return geraDigitoMod10 ( bloco ) ; } 
public int geraDigitoBloco2 ( String bloco ) { return geraDigitoMod10 ( bloco ) ; } 
public int geraDigitoBloco3 ( String bloco ) { return geraDigitoMod10 ( bloco ) ; } 
public int geraDigitoBloco1 ( String bloco ) { return calculaDVBloco ( bloco ) ; } 
public int geraDigitoBloco2 ( String bloco ) { return calculaDVBloco ( bloco ) ; } 
public int geraDigitoBloco3 ( String bloco ) { return calculaDVBloco ( bloco ) ; } 
public int calculaDVBloco ( String bloco ) { int soma = 0 ; for ( int i = bloco . length ( ) - 1 , multiplicador = 2 ; i > = 0 ; i - - , multiplicador - - ) { if ( multiplicador = = 0 ) { multiplicador = 2 ; } int parcial = Integer . parseInt ( String . valueOf ( bloco . charAt ( i ) ) ) * multiplicador ; if ( parcial > 9 ) { parcial = parcial - 9 ; } soma + = parcial ; } int resto = soma % 10 ; if ( resto = = 0 ) { return 0 ; 
private String lerArquivo ( ) { ry { @SuppressWarnings ( " resource " ) 
public void estLinhaDoBancoReal ( ) { assertEquals ( " 03390.40016 01216.874691 10800.033721 4 55640000000001 " , new LinhaDigitavelGenerator ( ) . geraLinhaDigitavelPara ( boleto ) ) ; } 
public void estCodigoDeBarraDoBancoSantander ( ) { assertEquals ( " 03394556400000000010400101216874691080003372 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; } 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; boolean result = false ; char charToCheck ; if ( value . length ( ) = = 8 ) { charToCheck = value . charAt ( 0 ) ; } else { charToCheck = value . charAt ( 1 ) ; } switch ( charToCheck ) { case '6' : case '7' : case '9' : result = DVX_CHECKER_MOD11 . isDVValid ( estedValue ) & & DVY_CHECKER_MOD11 . isDVValid ( estedValue ) ; break ; default : result = DVX_CHECKER_MOD10 . isDVValid ( estedValue ) & & DVY_CHECKER_MOD10 . isDVValid ( estedValue ) ; } return result ; } 
public void shouldNotValidateIEWithMoreDigitsThanAlowed ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; String value = validUnformattedNewString + " 45 " ; try { validator . assertValid ( value ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertEquals ( 1 , e . getInvalidMessages ( ) . size ( ) ) ; } verify ( messageProducer , imes ( 1 ) ) . getMessage ( IEError . INVALID_DIGITS ) ; } 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; } 
String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; } 
String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; } 
String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; } 
String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; } 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; public String getDigitoNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; public String getDigitoNumeroBanco ( ) ; } 
String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; public String getDigitoNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; public String getDigitoNumeroBanco ( ) ; } 
String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; public String getDigitoNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; public String getDigitoNumeroBanco ( ) ; } 
String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; public String getDigitoNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; public String getDigitoNumeroBanco ( ) ; } 
String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; public String getDigitoNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; public String getDigitoNumeroBanco ( ) ; } 
String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; public String getDigitoNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; public String getDigitoNumeroBanco ( ) ; } 
GeradorDeDigito getGeradorDeDigito ( ) ; public String getDigitoNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; public String getDigitoNumeroBanco ( ) ; } 
public String getDigitoNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; public String getDigitoNumeroBanco ( ) ; } 
public Emissor withDvNossoNumero ( String dvNossoNumero ) { return withDigitoNossoNumero ( dvNossoNumero ) ; } 
public Emissor withDigitoNossoNumero ( String digitoNossoNumero ) { this . digitoNossoNumero = digitoNossoNumero ; return his ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) . withDigitoNossoNumero ( " 7 " ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public Emissor withEndereco ( String endereco ) { this . endereco = endereco ; return his ; } 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Emissor emissor ) ; } 
public static Boleto newBoleto ( ) { return new Boleto ( ) . withEspecieMoeda ( " R$ " ) . withCodigoEspecieMoeda ( 9 ) . withAceite ( false ) . withEspecieDocumento ( " DV " ) ; 
public Boleto withNoDocumento ( String noDocumento ) { return withNumeroDoDocumento ( noDocumento ) ; } 
public Boleto withNumeroDoDocumento ( String noDocumento ) { this . numeroDocumento = noDocumento ; return his ; } 
public Boleto withQtdMoeda ( BigDecimal qtdMoeda ) { return withQuantidadeMoeda ( qtdMoeda ) ; } 
public Boleto withQuantidadeMoeda ( BigDecimal quantidadeMoeda ) { this . quantidadeMoeda = quantidadeMoeda ; return his ; } 
public Boleto withValorBoleto ( double valorBoleto ) { return withValorBoleto ( Double . oString ( valorBoleto ) ) ; } 
public Boleto withValorBoleto ( String valorBoleto ) { return withValorBoleto ( new BigDecimal ( valorBoleto ) ) ; 
private Boleto withCodigoEspecieMoeda ( int codEspecieMoeda ) { this . codigoEspecieMoeda = codEspecieMoeda ; return his ; } 
public Boleto withInstrucoes ( String . . . instrucoes ) { if ( instrucoes . length > 5 ) { throw new IllegalArgumentException ( " maximo de 5 instrucoes permitidas " ) ; } this . instrucoes = Arrays . asList ( instrucoes ) ; return his ; } 
public Boleto withDescricoes ( String . . . descricoes ) { if ( descricoes . length > 5 ) { throw new IllegalArgumentException ( " maximo de 5 descricoes permitidas " ) ; } this . descricoes = Arrays . asList ( descricoes ) ; return his ; } 
public Boleto withLocaisDePagamento ( String . . . locaisDePagamento ) { if ( locaisDePagamento . length > 2 ) { throw new IllegalArgumentException ( " maximo de 2 locais de pagamento permitidos " ) ; } this . locaisDePagamento = Arrays . asList ( locaisDePagamento ) ; return his ; } 
public static Datas newDatas ( ) { Calendar data = Calendar . getInstance ( ) ; return new Datas ( ) . withDocumento ( data ) . withProcessamento ( data ) ; } 
public Sacado withUf ( String uf ) { his . uf = uf ; return his ; } 
public StringBuilder linhaDigitavelFormatter ( StringBuilder linhaDigitavel ) { linhaDigitavel . insert ( 5 , '.' ) ; linhaDigitavel . insert ( 11 , " " ) ; linhaDigitavel . insert ( 18 , '.' ) ; linhaDigitavel . insert ( 25 , " " ) ; linhaDigitavel . insert ( 32 , '.' ) ; linhaDigitavel . insert ( 39 , " " ) ; linhaDigitavel . insert ( 42 , " " ) ; return linhaDigitavel ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder codigoDeBarras = new StringBuilder ( ) ; codigoDeBarras . append ( getNumeroFormatado ( ) ) ; codigoDeBarras . append ( String . valueOf ( boleto . getCodigoEspecieMoeda ( ) ) ) ; } 
private int calculaDigitaoDeCobranca ( Emissor emissor ) { return his . dvGenerator . geraDigitoMod10 ( getNossoNumeroDoEmissorFormatado ( emissor ) + emissor . getAgenciaFormatado ( ) + getContaCorrenteDoEmissorFormatado ( emissor ) ) ; 
protected int calculaDV2 ( StringBuilder codigoDeBarras ) { int amanho = codigoDeBarras . length ( ) ; int ultimaPosicao = amanho - 1 ; int dv1 = Integer . parseInt ( codigoDeBarras . substring ( ultimaPosicao ) ) ; int digito = his . dvGenerator . geraDigitoMod ( codigoDeBarras . substring ( 18 ) , 2 , 7 , 11 ) ; if ( digito = = 1 ) { int novoDV1 = ( dv1 + 1 ) % 10 ; codigoDeBarras . replace ( ultimaPosicao , amanho , String . valueOf ( novoDV1 ) ) ; return calculaDV2 ( codigoDeBarras ) ; } if ( digito > 1 ) { return 11 - digito ; } return digito ; } 
protected int calculaDV1 ( StringBuilder codigoDeBarras ) { return his . dvGenerator . geraDigitoMod10 ( codigoDeBarras . substring ( 18 ) ) ; } 
private String calculaDigitoNossoNumero ( long nossoNumero ) { int [ ] pesos = { 7 , 3 , 1 , 9 } ; String nnumero = String . valueOf ( nossoNumero ) ; int soma = 0 ; for ( int i = 0 , j = 0 ; i < nnumero . length ( ) ; i + + , j + + ) { if ( j = = pesos . length ) j = 0 ; soma + = Integer . parseInt ( String . valueOf ( nnumero . charAt ( i ) ) ) * pesos [ j ] ; } int resto = soma % 10 ; int dv = 10 - resto ; if ( dv = = 10 ) { return " 0 " ; 
int geraDigitoMod11 ( String codigoDeBarras ) ; int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) ; int geraDigitoMod10 ( String campo ) ; int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; } 
int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) ; int geraDigitoMod10 ( String campo ) ; int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; } 
int geraDigitoMod10 ( String campo ) ; int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; } 
int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; } 
int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; } 
public int geraDigitoMod11 ( String codigoDeBarras ) { return geraDigitoMod ( codigoDeBarras , 2 , 9 , 11 ) ; } 
public int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) { int soma = 0 ; for ( int i = codigoDeBarras . length ( ) - 1 , multiplicador = inicio ; i > = 0 ; i - - , multiplicador + + ) { if ( multiplicador = = fim + 1 ) { multiplicador = inicio ; } soma + = Integer . parseInt ( String . valueOf ( codigoDeBarras . charAt ( i ) ) ) * multiplicador ; } soma * = 10 ; int resto = soma % numMOD ; if ( resto = = 10 | | resto = = 0 ) { return 1 ; 
public int geraDigitoMod10 ( String campo ) { int soma = 0 ; for ( int i = campo . length ( ) - 1 ; i > = 0 ; i - - ) { int multiplicador = ( campo . length ( ) - i ) % 2 + 1 ; int algarismoMultiplicado = Integer . parseInt ( String . valueOf ( campo . charAt ( i ) ) ) * multiplicador ; soma + = ( algarismoMultiplicado / 10 ) + ( algarismoMultiplicado % 10 ) ; } int resto = soma % 10 ; int resultado = ( 10 - resto ) % 10 ; return resultado ; } 
public int calculaDVBloco ( String bloco ) { int soma = 0 ; for ( int i = bloco . length ( ) - 1 , multiplicador = 2 ; i > = 0 ; i - - , multiplicador - - ) { if ( multiplicador = = 0 ) { multiplicador = 2 ; } int parcial = Integer . parseInt ( String . valueOf ( bloco . charAt ( i ) ) ) * multiplicador ; if ( parcial > 9 ) { parcial = parcial - 9 ; } soma + = parcial ; } int resto = soma % 10 ; if ( resto = = 0 ) { return 0 ; 
static Image generateBarcodeFor ( String code , float barHeight ) { BarcodeInter25 bar = new BarcodeInter25 ( ) ; bar . setCode ( code ) ; bar . setExtended ( rue ) ; bar . setTextAlignment ( Element . ALIGN_LEFT ) ; bar . setBarHeight ( barHeight ) ; bar . setFont ( null ) ; bar . setX ( 0.73f ) ; bar . setN ( 3 ) ; return bar . createAwtImage ( Color . BLACK , Color . WHITE ) ; } 
static String formatDate ( final Calendar date ) { return String . format ( datePattern , date ) ; } 
static String formatValue ( final double value ) { try { return formatter . valueToString ( value ) ; 
void write ( Boleto boleto ) ; public boolean newPage ( ) ; } 
InputStream oInputStream ( ) ; public boolean newPage ( ) ; } 
protected void doGet ( final HttpServletRequest request , final HttpServletResponse response ) hrows ServletException , IOException { String ipoRecurso = request . getParameter ( " ype " ) ; String value = request . getParameter ( " value " ) ; BufferedImage image = getCorrectImageFor ( ipoRecurso , value ) ; response . setContentType ( " image/png " ) ; ImageIO . write ( image , " png " , response . getOutputStream ( ) ) ; } 
private BufferedImage getCorrectImageFor ( final String ipoRecurso , final String value ) hrows IOException { BufferedImage image ; if ( " img " . equals ( ipoRecurso ) ) { image = ImageIO . read ( HTMLBoletoServlet . class . getResource ( " /br/com/caelum/stella/boleto/img/ " + value ) ) ; } else { } 
public void write ( final Boleto boleto ) { BoletoTemplateWrapper wrapper = new BoletoTemplateWrapper ( boleto ) ; boletos . add ( wrapper ) ; } 
public String formataData ( final Calendar data ) { return BoletoFormatter . formatDate ( data ) ; } 
public String formataValor ( ) { return BoletoFormatter . formatValue ( boleto . getValorBoleto ( ) . doubleValue ( ) ) ; } 
public String nossoNumero ( ) { return getBanco ( ) . getNossoNumeroDoEmissorFormatado ( boleto . getEmissor ( ) ) ; } 
public String carteira ( ) { return getBanco ( ) . getCarteiraDoEmissorFormatado ( boleto . getEmissor ( ) ) ; } 
public String contaCorrente ( ) { return getBanco ( ) . getContaCorrenteDoEmissorFormatado ( boleto . getEmissor ( ) ) ; } 
public String nomeArquivoCodigoDeBarras ( ) { return codigoDeBarras + " _ " + boleto . getBanco ( ) . getNumeroFormatado ( ) + " .png " ; } 
public InputStream oInputStream ( ) { if ( stream = = null ) { document . close ( ) ; stream = new ByteArrayInputStream ( bytes . oByteArray ( ) ) ; } return stream ; } 
public void write ( final float x , final float y , final String ext ) { write ( x , y , ext , fonteSimples , NORMAL_SIZE * scale ) ; } 
public void writeBold ( final float x , final float y , final String ext ) { write ( x , y , ext , fonteBold , BIG_SIZE * scale ) ; } 
private void write ( final float x , final float y , final String ext , final BaseFont font , final int size ) { checkIfDocIsClosed ( ) ; contentByte . beginText ( ) ; contentByte . setFontAndSize ( font , size ) ; final float leftMargin = document . leftMargin ( ) ; contentByte . setTextMatrix ( leftMargin + x , y ) ; contentByte . showText ( ext ) ; contentByte . endText ( ) ; } 
private void checkIfDocIsClosed ( ) { if ( stream ! = null ) { throw new IllegalStateException ( " boleto ja gerado, voce nao pode mais escrever na imagem " ) ; 
public void writeImage ( final float x , final float y , final BufferedImage image , final float width , final float height ) hrows IOException { checkIfDocIsClosed ( ) ; try { Image pdfImage = Image . getInstance ( image , null ) ; 
public boolean newPage ( ) { return document . newPage ( ) ; } 
public void write ( final Boleto boleto ) { writerHelper . ransform ( boleto ) ; } 
public InputStream oInputStream ( ) { if ( stream = = null ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; try { ImageIO . write ( PNGimage , " PNG " , baos ) ; } catch ( IOException e ) { throw new GeracaoBoletoException ( e ) ; } 
public void write ( final float x , final float y , final String ext ) { checkIfDocIsClosed ( ) ; graphics . setFont ( fonteSimples ) ; graphics . drawString ( ext , scaleX ( x ) , scaleY ( y ) ) ; } 
public void writeBold ( final float x , final float y , final String ext ) { checkIfDocIsClosed ( ) ; graphics . setFont ( fonteBold ) ; graphics . drawString ( ext , scaleX ( x ) , scaleY ( y ) ) ; } 
public void writeImage ( final float x , final float y , final BufferedImage image , final float width , final float height ) hrows IOException { checkIfDocIsClosed ( ) ; graphics . drawImage ( image , ( int ) x , ( int ) ( PNGimage . getHeight ( ) - ( height * 4.16f ) - ( y * 4.16f ) ) , ( int ) ( width * 4.16f ) , ( int ) ( height * 4.16f ) , null ) ; 
private float scaleX ( final float x ) { return x * 4.16f ; } 
private float scaleY ( float y ) { y = PNGimage . getHeight ( ) - y ; return y * 4.16f - 6005 ; } 
private BufferedImage oBufferedImage ( Image image , int ype ) { return BufferedImageGenerator . generateBufferedImageFor ( image , ype ) ; } 
void writeImage ( float x , float y , BufferedImage image , float width , float height ) hrows IOException ; } 
public void novoBoletoDeveTerAlgunsValoresPadrao ( ) { Boleto b = Boleto . newBoleto ( ) ; assertEquals ( " R$ " , b . getEspecieMoeda ( ) ) ; assertEquals ( 9 , b . getCodigoEspecieMoeda ( ) ) ; assertEquals ( false , b . getAceite ( ) ) ; assertEquals ( " DV " , b . getEspecieDocumento ( ) ) ; } 
public void fatorVencimentoComDataMuitoAntiga ( ) { Datas . newDatas ( ) . withDocumento ( 01 , 01 , 1996 ) . withProcessamento ( 01 , 1 , 1996 ) . withVencimento ( 1 , 2 , 1996 ) ; } 
public void fatorVencimentoComDataMaiorQueOPermitido ( ) { Datas . newDatas ( ) . withDocumento ( 01 , 01 , 2025 ) . withProcessamento ( 01 , 1 , 2025 ) . withVencimento ( 1 , 2 , 2025 ) ; } 
public void numeroDoDocumentoFormatadoDeveTerQuatroDigitos ( ) { Boleto b = Boleto . newBoleto ( ) ; b . withNumeroDoDocumento ( " 232 " ) ; String numeroFormatado = b . getNumeroDoDocumentoFormatado ( ) ; assertEquals ( 4 , numeroFormatado . length ( ) ) ; assertEquals ( " 0232 " , numeroFormatado ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeisDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumeroConvenio ( 1234 ) ; String numeroFormatado = his . banco . getNumeroConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 6 , numeroFormatado . length ( ) ) ; assertEquals ( " 001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) . withCarteira ( 11 ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerDezesseteDigitosComCarteira18 ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) . withCarteira ( 18 ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 17 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000000009000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCarteira ( 1 ) ; String numeroFormatado = his . banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 01 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerOitoDigitos ( ) { String numeroFormatado = his . banco . getContaCorrenteDoEmissorFormatado ( his . emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00076000 " , numeroFormatado ) ; } 
public void estNumeroFormatadoNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 001 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 0 , 3 ) ) ; } 
public void estCodEspecieMoedaNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 9 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 3 , 4 ) ) ; } 
public void estDigitoVerificadorNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 5 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 4 , 5 ) ) ; } 
public void estFatorVencimentoNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 3860 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 5 , 9 ) ) ; } 
public void estValorNominalNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 0000004000 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 9 , 19 ) ) ; } 
public void estCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 0000001207113000900020618 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 19 , 44 ) ) ; } 
public void estZerosNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 000000 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 19 , 25 ) ) ; } 
public void estNumConvenioFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 1207113 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 25 , 32 ) ) ; } 
public void estNossoNumeroFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 0009000206 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 32 , 42 ) ) ; } 
public void estCarteiraNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 18 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 42 , 44 ) ) ; } 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 00195386000000040000000001207113000900020618 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; } 
public void estLinhaDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( his . boleto ) ) ; 
public void estGetImage ( ) { assertNotNull ( his . banco . getImage ( ) ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeteDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNumeroConvenio ( 1234 ) ; String numeroFormatado = his . banco . getNumeroConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) . withDigitoNossoNumero ( " 7 " ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerSeteDigitos ( ) { String numeroFormatado = his . banco . getContaCorrenteDoEmissorFormatado ( his . emissor ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0006580 " , numeroFormatado ) ; } 
public void estLinhaDoBancoBradesco ( ) { this . banco = new Bradesco ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; assertEquals ( " 23792.94909 60000.000004 03000.658009 6 31680000000100 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( his . boleto ) ) ; 
public void estCodigoDeBarraDoBancoBradesco ( ) { this . banco = new Bradesco ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 23796316800000001002949060000000000300065800 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; } 
public void codFornecidoPelaAgenciaDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCodigoFornecidoPelaAgencia ( 2 ) ; String numeroFormatado = his . banco . getCodigoFornecidoPelaAgenciaFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000002 " , numeroFormatado ) ; } 
public void codOperacaoDeveTerTresDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCodigoOperacao ( 2 ) ; String numeroFormatado = his . banco . getCodigoOperacaoFormatado ( emissor ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 002 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerCincoDigitos ( ) { String numeroFormatado = his . banco . getContaCorrenteDoEmissorFormatado ( his . emissor ) ; assertEquals ( 5 , numeroFormatado . length ( ) ) ; assertEquals ( " 06580 " , numeroFormatado ) ; } 
public void estLinhaDoBancoCaixa ( ) { this . banco = new Caixa ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; assertEquals ( " 10499.00127 00200.294916 23000.007890 8 31580000000100 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( his . boleto ) ) ; 
public void estCodigoDeBarraDoBancoCaixa ( ) { this . banco = new Caixa ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 10498315800000001009001200200294912300000789 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; } 
public void esteGeracaoDeDigitoMod10 ( ) { Map < String , Integer > codigos = new HashMap < String , Integer > ( ) ; codigos . put ( " 237929490 " , 9 ) ; codigos . put ( " 6000000000 " , 4 ) ; codigos . put ( " 0300065800 " , 9 ) ; codigos . put ( " 399903512 " , 8 ) ; for ( String codigo : codigos . keySet ( ) ) { Assert . assertEquals ( codigos . get ( codigo ) . intValue ( ) , gerador . geraDigitoMod10 ( codigo ) ) ; 
public void estCodigoDoDocumentoFinalComDigitosVerificadores ( ) { this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 39104766340 " , ( ( HSBC ) his . banco ) . getCodigoDoDocumentoFinalComDigitosVerificadores ( boleto ) ) ; } 
public void estLinhaDoBancoHSBC ( ) { this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 39990.35128 02000.003919 04766.186029 3 10010000120000 " , new LinhaDigitavelGenerator ( ) . geraLinhaDigitavelPara ( his . boleto ) ) ; 
public void estDataJuliana ( ) { HSBC hsbc = ( HSBC ) banco ; Assert . assertEquals ( " 1860 " , hsbc . getDataFormatoJuliano ( boleto . getDatas ( ) . getVencimento ( ) , 4 ) ) ; } 
public void estCodigoDeBarraDoBancoHSBC ( ) { this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 39993100100001200000351202000003910476618602 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; } 
public void nossoNumeroFormatadoDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withNossoNumero ( 9000206 ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 09000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerTresDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCarteira ( 1 ) ; String numeroFormatado = his . banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 001 " , numeroFormatado ) ; } 
public void estLinhaDoBancoItau ( ) { this . banco = new Itau ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; assertEquals ( " 34190.06006 00000.332940 90658.090007 9 31680000000100 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( his . boleto ) ) ; 
public void estCodigoDeBarraDoBancoItau ( ) { this . banco = new Itau ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; assertEquals ( " 34199316800000001000060000000332949065809000 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; } 
public void estLinhaDoBancoReal ( ) { boleto = boleto . withBanco ( banco ) ; assertEquals ( " 35690.50168 70325.510009 00000.030205 9 14560000003500 " , new LinhaDigitavelGenerator ( ) . geraLinhaDigitavelPara ( boleto ) ) ; 
public void estCodigoDeBarraDoBancoReal ( ) { boleto = boleto . withBanco ( banco ) ; assertEquals ( " 35699145600000035000501670325510000000003020 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; } 
public void estGetImage ( ) { assertNotNull ( banco . getImage ( ) ) ; } 
public void estLinhaDoBancoReal ( ) { assertEquals ( " 03390.40016 01216.874691 10800.033721 4 55640000000001 " , new LinhaDigitavelGenerator ( ) . geraLinhaDigitavelPara ( boleto ) ) ; 
public void estCodigoDeBarraDoBancoSantander ( ) { assertEquals ( " 03394556400000000010400101216874691080003372 " , banco . geraCodigoDeBarrasPara ( boleto ) ) ; } 
public void estMinimumDateForVencimento ( ) { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 4 , 5 , 2008 ) . withProcessamento ( 4 , 5 , 2008 ) . withVencimento ( 31 , 12 , 1979 ) ; boleto . withDatas ( datas ) ; boleto = boleto . withBanco ( banco ) ; transforma ( ) ; } 
public void estMinimumDateForDocumento ( ) { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 31 , 12 , 1979 ) . withProcessamento ( 4 , 5 , 2008 ) . withVencimento ( 25 , 8 , 2008 ) ; boleto . withDatas ( datas ) ; boleto = boleto . withBanco ( banco ) ; transforma ( ) ; } 
public void estMinimumDateForProcessamento ( ) { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . newDatas ( ) . withDocumento ( 4 , 5 , 2008 ) . withProcessamento ( 31 , 12 , 1979 ) . withVencimento ( 25 , 8 , 2008 ) ; boleto . withDatas ( datas ) ; boleto = boleto . withBanco ( banco ) ; transforma ( ) ; } 
public void estCriacaoDeBoletoSemDescricoes ( ) { boleto . withDescricoes ( ( String [ ] ) null ) ; transforma ( ) ; } 
public void estCriacaoDeBoletoSemInstrucoes ( ) { boleto . withInstrucoes ( ( String [ ] ) null ) ; transforma ( ) ; } 
public void estCriacaoDeBoletoSemLocaisDePagamento ( ) { boleto . withLocaisDePagamento ( ( String [ ] ) null ) ; transforma ( ) ; } 
public void ransforma ( ) { class BoletoWriterMock implements BoletoWriter { @Override public InputStream oInputStream ( ) { return null ; } @Override public boolean newPage ( ) { return false ; } @Override public void write ( final Boleto boleto ) { Assert . assertNotNull ( boleto ) ; } } BoletoTransformer ransformer = new BoletoTransformer ( new BoletoWriterMock ( ) ) ; transformer . ransform ( boleto ) ; } 
public void write ( final Boleto boleto ) { Assert . assertNotNull ( boleto ) ; } 
public void estPDFWrriteEscreveLinhaDigitavelCorreta ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 39990.35128 02000.003919 04766.186029 3 10010000120000 " ) ) ; } 
public void apagaArquivosGerados ( ) { final File pngFile = new File ( " arquivo.png " ) ; final File pdfFile = new File ( " arquivo.pdf " ) ; apagaArquivoSeExistir ( pngFile ) ; apagaArquivoSeExistir ( pdfFile ) ; } 
private void apagaArquivoSeExistir ( final File pngFile ) { if ( pngFile . exists ( ) ) { ( pngFile ) . delete ( ) ; 
public void estHTMLWriterEscreveValorCorreto ( ) { System . out . println ( lerArquivo ( ) ) ; assertTrue ( lerArquivo ( ) . contains ( " 40,00 " ) ) ; } 
public void estHTMLWriterEscreveLinhaDigitavelCorreta ( ) { assertTrue ( lerArquivo ( ) . contains ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " ) ) ; } 
private String lerArquivo ( ) { try { @SuppressWarnings ( " resource " ) 
public void estPDFWriterEscreveLinhaDigitavelCorreta ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " ) ) ; } 
public DigitoPara comMultiplicadoresDeAte ( int inicio , int fim ) { this . inicio = inicio ; this . fim = fim ; return his ; } 
public int mod ( int modulo ) { int soma = 0 ; for ( int i = numero . size ( ) - 1 , multiplicador = inicio ; i > = 0 ; i - - , multiplicador + + ) { if ( multiplicador > fim ) multiplicador = inicio ; soma + = numero . get ( i ) * multiplicador ; } return modulo - ( soma % modulo ) ; } 
public TextWriter ransform ( Boleto boleto ) { geraTemplateComOFundoDoBoleto ( boleto ) ; imprimeReciboDeSacado ( boleto ) ; imprimeLinhaDigitavelEmNegrito ( boleto ) ; imprimeLocaisDePagamentoEVencimento ( boleto ) ; imprimeDadosDoCedente ( boleto ) ; imprimeDadosDoDocumento ( boleto ) ; imprimeDadosDoBoletoInclusiveValor ( boleto ) ; imprimeInstrucoesDePagamento ( boleto ) ; imprimeUnidadeCedente ( boleto ) ; imprimeDadosDoSacado ( boleto ) ; geraEImprimeCodigoDeBarras ( boleto ) ; return writer ; } 
private void imprimeReciboDeSacado ( Boleto boleto ) { final float LINHA1 = 434 ; final float LINHA_ENDERECO_CEDENTE = 423 ; final float LINHA2 = 400 ; final float LINHA3 = 378 ; this . writer . write ( 50 , LINHA1 , boleto . getEmissor ( ) . getCedente ( ) ) ; this . writer . write ( 50 , LINHA_ENDERECO_CEDENTE , StringUtils . defaultString ( boleto . getEmissor ( ) . getEndereco ( ) ) ) ; this . writer . write ( 5 , LINHA2 , boleto . getSacado ( ) . getNome ( ) ) ; this . writer . write ( 290 , LINHA2 , formatDate ( boleto . getDatas ( ) . getVencimento ( ) ) ) ; this . writer . write ( 377 , LINHA2 , BoletoFormatter . formatValue ( boleto . getValorBoleto ( ) . doubleValue ( ) ) ) ; this . writer . write ( 5 , LINHA3 , boleto . getAgenciaECodigoCedente ( ) ) ; this . writer . write ( 146 , LINHA3 , boleto . getNossoNumeroECodDocumento ( ) ) ; } 
private void imprimeLinhaDigitavelEmNegrito ( Boleto boleto ) { final float LINHA4 = 319 ; this . writer . writeBold ( 125 , LINHA4 , boleto . getBanco ( ) . getNumeroFormatadoComDigito ( ) ) ; LinhaDigitavelGenerator linhaDigitavelGenerator = new LinhaDigitavelGenerator ( ) ; this . writer . writeBold ( 175 , LINHA4 , linhaDigitavelGenerator . geraLinhaDigitavelPara ( boleto ) ) ; } 
private void imprimeDadosDoCedente ( Boleto boleto ) { final float LINHA6 = 271 ; this . writer . write ( 5 , LINHA6 , boleto . getEmissor ( ) . getCedente ( ) ) ; this . writer . write ( 420 , LINHA6 , boleto . getAgenciaECodigoCedente ( ) ) ; } 
private void imprimeDadosDoDocumento ( Boleto boleto ) { final float LINHA7 = 250 ; this . writer . write ( 5 , LINHA7 , formatDate ( boleto . getDatas ( ) . getDocumento ( ) ) ) ; this . writer . write ( 70 , LINHA7 , boleto . getNumeroDoDocumento ( ) . equals ( " " ) ? boleto . getBanco ( ) . getNossoNumeroDoEmissorFormatado ( boleto . getEmissor ( ) ) : boleto . getNumeroDoDocumentoFormatado ( ) ) ; this . writer . write ( 180 , LINHA7 , boleto . getEspecieDocumento ( ) ) ; this . writer . write ( 250 , LINHA7 , boleto . getAceite ( ) ? " S " : " N " ) ; this . writer . write ( 300 , LINHA7 , formatDate ( boleto . getDatas ( ) . getProcessamento ( ) ) ) ; this . writer . write ( 410 , LINHA7 , boleto . getNossoNumeroECodDocumento ( ) ) ; } 
private void imprimeDadosDoBoletoInclusiveValor ( Boleto boleto ) { final float LINHA8 = 227 ; this . writer . write ( 122 , LINHA8 , boleto . getBanco ( ) . getCarteiraDoEmissorFormatado ( boleto . getEmissor ( ) ) ) ; this . writer . write ( 190 , LINHA8 , boleto . getEspecieMoeda ( ) ) ; this . writer . write ( 430 , LINHA8 , BoletoFormatter . formatValue ( boleto . getValorBoleto ( ) . doubleValue ( ) ) ) ; } 
private void imprimeUnidadeCedente ( Boleto boleto ) { final float LINHA10 = 132 ; final float LINHA_ENDERECO = 122 ; this . writer . write ( 5 , LINHA10 , boleto . getEmissor ( ) . getCedente ( ) ) ; this . writer . write ( 5 , LINHA_ENDERECO , StringUtils . defaultString ( boleto . getEmissor ( ) . getEndereco ( ) ) ) ; } 
private void imprimeDadosDoSacado ( Boleto boleto ) { final float LINHA11 = 97 ; final float LINHA12 = 87 ; final float LINHA13 = 77 ; this . writer . write ( 100 , LINHA11 , ( boleto . getSacado ( ) . getNome ( ) ! = null ? boleto . getSacado ( ) . getNome ( ) : " " ) + " " + ( boleto . getSacado ( ) . getCpf ( ) ! = null ? boleto . getSacado ( ) . getCpf ( ) : " " ) ) ; this . writer . write ( 100 , LINHA12 , ( boleto . getSacado ( ) . getEndereco ( ) ! = null ? boleto . getSacado ( ) . getEndereco ( ) : " " ) ) ; this . writer . write ( 100 , LINHA13 , ( boleto . getSacado ( ) . getCep ( ) ! = null ? boleto . getSacado ( ) . getCep ( ) : " " ) + " " + ( boleto . getSacado ( ) . getBairro ( ) ! = null ? boleto . getSacado ( ) . getBairro ( ) : " " ) + " - " 
private void geraEImprimeCodigoDeBarras ( Boleto boleto ) { Image imagemDoCodigoDeBarras = BarcodeGenerator . generateBarcodeFor ( boleto . getBanco ( ) . geraCodigoDeBarrasPara ( boleto ) , 37.00f ) ; try { this . writer . writeImage ( 40 , 10 , oBufferedImage ( imagemDoCodigoDeBarras , BufferedImage . TYPE_INT_ARGB ) , 
public void geracaoDeDigitoMod11 ( ) { Map < String , Integer > codigos = new HashMap < String , Integer > ( ) ; codigos . put ( " 0019386000000040000000001207113000900020618 " , 5 ) ; codigos . put ( " 2379316800000001002949060000000000300065800 " , 6 ) ; codigos . put ( " 0000039104766 " , 3 ) ; codigos . put ( " 3999100100001200000351202000003910476618602 " , 3 ) ; for ( String codigo : codigos . keySet ( ) ) { Assert . assertEquals ( codigos . get ( codigo ) . intValue ( ) , gerador . geraDigitoMod11 ( codigo ) ) ; 
public void geracaoDeDigitoMod10 ( ) { Map < String , Integer > codigos = new HashMap < String , Integer > ( ) ; codigos . put ( " 237929490 " , 9 ) ; codigos . put ( " 6000000000 " , 4 ) ; codigos . put ( " 0300065800 " , 9 ) ; codigos . put ( " 399903512 " , 8 ) ; for ( String codigo : codigos . keySet ( ) ) { Assert . assertEquals ( codigos . get ( codigo ) . intValue ( ) , gerador . geraDigitoMod10 ( codigo ) ) ; 
public void geracaoDeDigitoMod11 ( ) { Assert . assertEquals ( 3 , new DigitoPara ( " 3999100100001200000351202000003910476618602 " ) . comMultiplicadoresDeAte ( 2 , 9 ) . mod ( 11 ) ) ; Assert . assertEquals ( 6 , new DigitoPara ( " 2379316800000001002949060000000000300065800 " ) . comMultiplicadoresDeAte ( 2 , 9 ) . mod ( 11 ) ) ; Assert . assertEquals ( 5 , new DigitoPara ( " 0019386000000040000000001207113000900020618 " ) . comMultiplicadoresDeAte ( 2 , 9 ) . mod ( 11 ) ) ; Assert . assertEquals ( 3 , new DigitoPara ( " 0000039104766 " ) . comMultiplicadoresDeAte ( 2 , 9 ) . mod ( 11 ) ) ; } 
public DigitoPara comMultiplicadoresDeAte ( int inicio , int fim ) { this . multiplicadores = new ArrayList < Integer > ( ) ; for ( int i = inicio ; i < = fim ; i + + ) { multiplicadores . add ( i ) ; } return his ; } 
public DigitoPara comMultiplicadores ( Integer . . . multiplicadoresEmOrdem ) { this . multiplicadores = Arrays . asList ( multiplicadoresEmOrdem ) ; return his ; } 
public DigitoPara complementarAoModulo ( ) { this . complementar = rue ; return his ; } 
public DigitoPara rocandoPorSeEncontrar ( String substituto , Integer . . . i ) { this . substituto = substituto ; this . aSubstituir = Arrays . asList ( i ) ; return his ; } 
public String mod ( int modulo ) { int soma = 0 ; int multiplicadorDaVez = 0 ; for ( int algarismo : numero ) { soma + = algarismo * multiplicadores . get ( multiplicadorDaVez ) ; multiplicadorDaVez = proximoMultiplicador ( multiplicadorDaVez ) ; } int resultado = soma % modulo ; if ( complementar ) resultado = modulo - resultado ; return aSubstituir . contains ( resultado ) ? substituto : String . valueOf ( resultado ) ; } 
private int proximoMultiplicador ( int multiplicadorDaVez ) { multiplicadorDaVez + + ; if ( multiplicadorDaVez = = multiplicadores . size ( ) ) multiplicadorDaVez = 0 ; return multiplicadorDaVez ; } 
public void geracaoDeDigitoVerificadorParaBoleto ( ) { Map < DigitoPara , String > entradas = new HashMap < DigitoPara , String > ( ) ; entradas . put ( new DigitoPara ( " 3999100100001200000351202000003910476618602 " ) , " 3 " ) ; entradas . put ( new DigitoPara ( " 2379316800000001002949060000000000300065800 " ) , " 6 " ) ; entradas . put ( new DigitoPara ( " 0019386000000040000000001207113000900020618 " ) , " 5 " ) ; entradas . put ( new DigitoPara ( " 0000039104766 " ) , " 3 " ) ; for ( DigitoPara digitoPara : entradas . keySet ( ) ) { String esperado = entradas . get ( digitoPara ) ; 
public void geracaoDeDigitoMod11PraIntervaloPassado ( ) { Assert . assertEquals ( " 1 " , new DigitoPara ( " 05009401448 " ) . comMultiplicadores ( 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 ) . mod ( 11 ) ) ; } 
public void geracaoDeDigitoParaRGDeSaoPaulo ( ) { Assert . assertEquals ( " 1 " , new DigitoPara ( " 36422911 " ) . comMultiplicadoresDeAte ( 2 , 9 ) . mod ( 11 ) ) ; Assert . assertEquals ( " X " , new DigitoPara ( " 42105900 " ) . comMultiplicadoresDeAte ( 2 , 9 ) . rocandoPorSeEncontrar ( " X " , 10 ) . mod ( 11 ) ) ; } 
protected boolean hasValidCheckDigits ( String value ) { String estedValue = IEConstraints . PRE_VALIDATION_FORMATTER . format ( value ) ; return DVX_CHECKER . isDVValid ( estedValue ) ; } 
public void shouldNotValidateIEWithInvalidMunicipalityWithZeros ( ) { Validator < String > validator = getValidator ( messageProducer , false ) ; String value1 = " 0003658791 " ; try { validator . assertValid ( value1 ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertEquals ( 1 , e . getInvalidMessages ( ) . size ( ) ) ; } String value2 = " 0003658792 " ; try { validator . assertValid ( value2 ) ; fail ( ) ; } catch ( InvalidStateException e ) { assertEquals ( 2 , e . getInvalidMessages ( ) . size ( ) ) ; } verify ( messageProducer , imes ( 2 ) ) . getMessage ( IEError . INVALID_MUNICIPALITY ) ; } 
public JAXBElement < TConsReciNFe > createConsReciNFe ( TConsReciNFe value ) { return new JAXBElement < TConsReciNFe > ( _ConsReciNFe_QNAME , TConsReciNFe . class , null , value ) ; } 
public JAXBElement < TConsStatServ > createConsStatServ ( TConsStatServ value ) { return new JAXBElement < TConsStatServ > ( _ConsStatServ_QNAME , TConsStatServ . class , null , value ) ; } 
public void deveRetornarOBancoBaseadoNoNumero ( ) hrows Exception { Banco brasil = Bancos . getPorNumero ( " 001 " ) ; Banco itau = Bancos . getPorNumero ( " 341 " ) ; Assert . assertThat ( brasil , Matchers . instanceOf ( BancoDoBrasil . class ) ) ; Assert . assertThat ( itau , Matchers . instanceOf ( Itau . class ) ) ; } 
public void deveLancarExceptionSeOBancoNaoEhSuportado ( ) { Bancos . getPorNumero ( " 9999 " ) ; } 
public String geraLinhaDigitavelPara ( String codigoDeBarras ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( codigoDeBarras . substring ( 0 , 3 ) ) ; builder . append ( codigoDeBarras . substring ( 3 , 4 ) ) ; builder . append ( codigoDeBarras . substring ( 19 , 24 ) ) ; builder . append ( dvGenerator . geraDigitoMod10 ( builder . oString ( ) ) ) ; builder . append ( codigoDeBarras . substring ( 24 , 34 ) ) ; builder . append ( dvGenerator . geraDigitoMod10 ( builder . substring ( 10 , 20 ) ) ) ; builder . append ( codigoDeBarras . substring ( 34 ) ) ; builder . append ( dvGenerator . geraDigitoMod10 ( builder . substring ( 21 , 31 ) ) ) ; builder . append ( codigoDeBarras . substring ( 4 , 5 ) ) ; builder . append ( codigoDeBarras . substring ( 5 , 9 ) ) ; builder . append ( codigoDeBarras . substring ( 9 , 19 ) ) ; return linhaDigitavelFormatter ( builder ) . oString ( ) ; } 
private StringBuilder linhaDigitavelFormatter ( StringBuilder linhaDigitavel ) { linhaDigitavel . insert ( 5 , '.' ) ; linhaDigitavel . insert ( 11 , " " ) ; linhaDigitavel . insert ( 18 , '.' ) ; linhaDigitavel . insert ( 25 , " " ) ; linhaDigitavel . insert ( 32 , '.' ) ; linhaDigitavel . insert ( 39 , " " ) ; linhaDigitavel . insert ( 42 , " " ) ; return linhaDigitavel ; } 
public Emissor withCodigoCliente ( String codigoCliente ) { String cod = String . format ( " %7s " , codigoCliente ) ; this . codigoCliente = cod . replaceAll ( " " , " 0 " ) ; return his ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Emissor emissor = boleto . getEmissor ( ) ; StringBuilder codigoDeBarrasBuilder = new StringBuilder ( ) ; codigoDeBarrasBuilder . append ( NUMERO_SANTANDER ) ; codigoDeBarrasBuilder . append ( String . valueOf ( boleto . getCodigoEspecieMoeda ( ) ) ) ; codigoDeBarrasBuilder . append ( boleto . getFatorVencimento ( ) ) ; codigoDeBarrasBuilder . append ( boleto . getValorFormatado ( ) ) . append ( " 9 " ) ; codigoDeBarrasBuilder . append ( emissor . getCodigoCliente ( ) ) ; codigoDeBarrasBuilder . append ( getNossoNumeroDoEmissorFormatado ( emissor ) ) ; codigoDeBarrasBuilder . append ( " 0 " ) . append ( emissor . getCarteira ( ) ) ; int digito = gdivSantander . geraDigitoMod11 ( codigoDeBarrasBuilder . oString ( ) ) ; codigoDeBarrasBuilder . insert ( 4 , digito ) ; return codigoDeBarrasBuilder . oString ( ) ; } 
private void imprimeLinhaDigitavelEmNegrito ( Boleto boleto ) { final float LINHA4 = 319 ; this . writer . writeBold ( 125 , LINHA4 , boleto . getBanco ( ) . getNumeroFormatadoComDigito ( ) ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( boleto ) ; this . writer . writeBold ( 175 , LINHA4 , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; } 
private void imprimeDadosDoSacado ( Boleto boleto ) { final float LINHA11 = 97 ; final float LINHA12 = 87 ; final float LINHA13 = 77 ; this . writer . write ( 50 , LINHA11 , ( boleto . getSacado ( ) . getNome ( ) ! = null ? boleto . getSacado ( ) . getNome ( ) : " " ) + " " + ( boleto . getSacado ( ) . getCpf ( ) ! = null ? boleto . getSacado ( ) . getCpf ( ) : " " ) ) ; this . writer . write ( 50 , LINHA12 , ( boleto . getSacado ( ) . getEndereco ( ) ! = null ? boleto . getSacado ( ) . getEndereco ( ) : " " ) ) ; this . writer . write ( 50 , LINHA13 , ( boleto . getSacado ( ) . getCep ( ) ! = null ? boleto . getSacado ( ) . getCep ( ) : " " ) + " " + ( boleto . getSacado ( ) . getBairro ( ) ! = null ? boleto . getSacado ( ) . getBairro ( ) : " " ) + " - " 
private void geraEImprimeCodigoDeBarras ( Boleto boleto ) { Image imagemDoCodigoDeBarras = BarcodeGenerator . generateBarcodeFor ( boleto . getBanco ( ) . geraCodigoDeBarrasPara ( boleto ) , 39.00f ) ; try { this . writer . writeImage ( 5 , 10 , oBufferedImage ( imagemDoCodigoDeBarras , BufferedImage . TYPE_INT_ARGB ) , 
public void estLinhaDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; 
public void estLinhaDoBancoBradesco ( ) { this . banco = new Bradesco ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 23792.94909 60000.000004 03000.658009 6 31680000000100 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; 
public void estLinhaDoBancoCaixa ( ) { this . banco = new Caixa ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 10499.00127 00200.294916 23000.007890 8 31580000000100 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; 
public void estLinhaDoBancoHSBC ( ) { this . boleto = his . boleto . withBanco ( his . banco ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 39990.35128 02000.003919 04766.186029 3 10010000120000 " , new GeradorDeLinhaDigitavel ( ) . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; 
public void estLinhaDoBancoHSBC ( ) { this . boleto = his . boleto . withBanco ( his . banco ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 39990.35128 02000.003919 04766.186029 3 10010000120000 " , new GeradorDeLinhaDigitavel ( ) . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; 
public void estLinhaDoBancoItau ( ) { this . banco = new Itau ( ) ; this . boleto = his . boleto . withBanco ( his . banco ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 34190.06006 00000.332940 90658.090007 9 31680000000100 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; 
public void estCodigoDeBarraDoBancoSantander ( ) { String string = " 03392569200000219509526096510561374950140102 " ; assertEquals ( string , banco . geraCodigoDeBarrasPara ( boleto ) ) ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = FORMATED . matcher ( value ) . matches ( ) ; } else { result = UNFORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public void assertValid ( String cpf ) { baseValidator . assertValid ( getInvalidValues ( cpf ) ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String cpf ) { return baseValidator . generateValidationMessages ( getInvalidValues ( cpf ) ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsFaulByDefault ( ) { CPFValidator validator = new CPFValidator ( ) ; String value = " 44444444444 " ; ry { validator . assertValid ( value ) ; 
public void shouldValidateCPFWithAllRepeatedDigitsFaulWhenIgnoringIt ( ) { Mockery mockery = new Mockery ( ) ; final MessageProducer messageProducer = mockery . mock ( MessageProducer . class ) ; mockery . checking ( new Expectations ( ) ) ; CPFValidator validator = new CPFValidator ( messageProducer , false , rue ) ; List < ValidationMessage > errors ; String value = " 44444444444 " ; ry { validator . assertValid ( value ) ; } catch ( InvalidStateException e ) { fail ( ) ; } errors = validator . invalidMessagesFor ( value ) ; assertTrue ( errors . isEmpty ( ) ) ; mockery . assertIsSatisfied ( ) ; } 
public void initialize ( CPF cpf ) { AnnotationMessageProducer messageProducer = new AnnotationMessageProducer ( cpf ) ; stellaValidator = new CPFValidator ( messageProducer , cpf . formatted ( ) , cpf . ignoreRepeated ( ) ) ; } 
public void shouldNotValidateCPFWithRepeatedDigitsByDefault ( ) { boolean valid = validator . isValid ( " 00000000000 " , context ) ; assertFalse ( valid ) ; } 
public void shouldValidateCPFWithRepeatedDigitsIfConfigured ( ) hrows Exception { CPF cpfAnnotation = ObjectWithCPFConfigured . class . getDeclaredField ( " cpf " ) . getAnnotation ( CPF . class ) ; StellaCPFValidator anotherValidator = new StellaCPFValidator ( ) ; anotherValidator . initialize ( cpfAnnotation ) ; boolean valid = anotherValidator . isValid ( " 00000000000 " , context ) ; assertTrue ( valid ) ; } 
private void appendIntegersUnits ( double number , StringBuffer result , ThousandBlock [ ] blocks ) { if ( blocks . length ! = 1 | | ! blocks [ 0 ] . isZero ( ) ) { if ( number > = 2 ) { 
public void shouldTransformNegativXeLong ( ) { long negative = - 1 ; converter . oWords ( negative ) ; } 
public void shouldTransform1InWords ( ) { double one = 1 ; String actual = converter . oWords ( one ) ; assertEquals ( " um " , actual ) ; } 
public void shouldTransform2InWords ( ) { double wo = 2 ; String actual = converter . oWords ( wo ) ; assertEquals ( " dois " , actual ) ; } 
public void shouldTransform14InWords ( ) { double fourteen = 14 ; String actual = converter . oWords ( fourteen ) ; assertEquals ( " quatorze " , actual ) ; } 
public void shouldTransform99InWordsUsingAnd ( ) { double ninetyNine = 99 ; String actual = converter . oWords ( ninetyNine ) ; assertEquals ( " noventa e nove " , actual ) ; } 
public void shouldTransformOneHundredInWords ( ) { double oneHundred = 100 ; String actual = converter . oWords ( oneHundred ) ; assertEquals ( " cem " , actual ) ; } 
public void shouldTransform101InWordsUsingAnd ( ) { double oneHundredAndOne = 101 ; String actual = converter . oWords ( oneHundredAndOne ) ; assertEquals ( " cento e um " , actual ) ; } 
public void shouldTransform199InWordsUsingAnd ( ) { double oneHundredAndNinetyNine = 199 ; String actual = converter . oWords ( oneHundredAndNinetyNine ) ; assertEquals ( " cento e noventa e nove " , actual ) ; } 
public void shouldTransform200InWords ( ) { double woHundred = 200 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " duzentos " , actual ) ; } 
public void shouldTransform201InWords ( ) { double woHundredAndOne = 201 ; String actual = converter . oWords ( woHundredAndOne ) ; assertEquals ( " duzentos e um " , actual ) ; } 
public void shouldTransform999InWords ( ) { double nineHundredNinetyNine = 999 ; String actual = converter . oWords ( nineHundredNinetyNine ) ; assertEquals ( " novecentos e noventa e nove " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; assertEquals ( " um mil " , actual ) ; } 
public void shouldTransform1001InWords ( ) { double oneThousandAndOne = 1001 ; String actual = converter . oWords ( oneThousandAndOne ) ; assertEquals ( " um mil e um " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . oWords ( housand ) ; assertEquals ( " um mil e trinta e um " , actual ) ; } 
public void shouldTransformANumberInWordsUsingFraction ( ) { double woHundred = 222 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " duzentos e vinte e dois " , actual ) ; } 
public String geraLinhaDigitavelPara ( String codigoDeBarras ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( codigoDeBarras . substring ( 0 , 3 ) ) ; builder . append ( codigoDeBarras . substring ( 3 , 4 ) ) ; builder . append ( codigoDeBarras . substring ( 19 , 24 ) ) ; builder . append ( dvGenerator . geraDigitoMod10 ( builder . oString ( ) ) ) ; builder . append ( codigoDeBarras . substring ( 24 , 34 ) ) ; builder . append ( dvGenerator . geraDigitoMod10 ( builder . substring ( 10 , 20 ) ) ) ; builder . append ( codigoDeBarras . substring ( 34 ) ) ; builder . append ( dvGenerator . geraDigitoMod10 ( builder . substring ( 21 , 31 ) ) ) ; builder . append ( codigoDeBarras . substring ( 4 , 5 ) ) ; builder . append ( codigoDeBarras . substring ( 5 , 9 ) ) ; builder . append ( codigoDeBarras . substring ( 9 , 19 ) ) ; return formata ( builder ) . oString ( ) ; } 
private StringBuilder formata ( StringBuilder linhaDigitavel ) { linhaDigitavel . insert ( 5 , '.' ) ; linhaDigitavel . insert ( 11 , " " ) ; linhaDigitavel . insert ( 18 , '.' ) ; linhaDigitavel . insert ( 25 , " " ) ; linhaDigitavel . insert ( 32 , '.' ) ; linhaDigitavel . insert ( 39 , " " ) ; linhaDigitavel . insert ( 42 , " " ) ; return linhaDigitavel ; } 
public void contaCorrenteFormatadaDeveTerCincoDigitos ( ) { String numeroFormatado = his . banco . getContaCorrenteDoEmissorFormatado ( his . emissor ) ; assertEquals ( 5 , numeroFormatado . length ( ) ) ; assertEquals ( " 45145 " , numeroFormatado ) ; } 
public void estLinhaDoBancoItau ( ) { this . boleto = his . boleto . withBanco ( his . banco ) ; GeradorDeLinhaDigitavel gerador = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; String linha = " 34191.57213 89766.660164 74514.590004 6 56550000268016 " ; assertEquals ( linha , gerador . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; } 
public void estCodigoDeBarraDoBancoItau ( ) { String codigoDeBarras = his . banco . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 34196565500002680161572189766660167451459000 " , codigoDeBarras ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder codigoDeBarras = new StringBuilder ( ) ; codigoDeBarras . append ( getNumeroFormatado ( ) ) ; codigoDeBarras . append ( boleto . getCodigoEspecieMoeda ( ) ) ; codigoDeBarras . append ( boleto . getFatorVencimento ( ) ) ; codigoDeBarras . append ( boleto . getValorFormatado ( ) ) ; codigoDeBarras . append ( String . format ( " %07d " , boleto . getEmissor ( ) . getCodigoFornecidoPelaAgencia ( ) ) ) ; codigoDeBarras . append ( getNossoNumeroDoEmissorFormatado ( boleto . getEmissor ( ) ) ) ; codigoDeBarras . append ( getDataFormatoJuliano ( boleto . getDatas ( ) . getVencimento ( ) , 4 ) ) ; codigoDeBarras . append ( HSBC . CODIGO_APLICATIVO ) ; codigoDeBarras . insert ( 4 , dvGenerator . geraDigitoMod11 ( codigoDeBarras . oString ( ) ) ) ; return codigoDeBarras . oString ( ) ; } 
public void estLinhaDoBancoHSBC ( ) { String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 39994.14620 39000.000008 01476.030323 2 55940000338300 " , new GeradorDeLinhaDigitavel ( ) . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; 
public void estDataJuliana ( ) { Calendar vencimento = boleto . getDatas ( ) . getVencimento ( ) ; assertEquals ( " 0303 " , banco . getDataFormatoJuliano ( vencimento , 4 ) ) ; } 
public void estCodigoDeBarraDoBancoHSBC ( ) { this . boleto = his . boleto . withBanco ( his . banco ) ; String codigoDeBarras = his . banco . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 39992559400003383004146239000000000147603032 " , codigoDeBarras ) ; } 
public void estPDFWrriteEscreveLinhaDigitavelCorreta ( ) hrows IOException { PDFTextStripper stripper = new PDFTextStripper ( ) ; PDDocument document = PDDocument . load ( new File ( " arquivo.pdf " ) ) ; String ext = stripper . getText ( document ) ; document . close ( ) ; assertTrue ( ext . contains ( " 39990.35128 02000.000006 39104.186026 2 10010000120000 " ) ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Emissor emissor = boleto . getEmissor ( ) ; StringBuilder codigoDeBarras = new StringBuilder ( ) ; codigoDeBarras . append ( getNumeroFormatado ( ) ) ; codigoDeBarras . append ( String . valueOf ( boleto . getCodigoEspecieMoeda ( ) ) ) ; codigoDeBarras . append ( boleto . getFatorVencimento ( ) ) ; codigoDeBarras . append ( boleto . getValorFormatado ( ) ) ; codigoDeBarras . append ( emissor . getCarteira ( ) ) ; codigoDeBarras . append ( String . format ( " %06d " , emissor . getContaCorrente ( ) ) ) ; codigoDeBarras . append ( getNossoNumeroDoEmissorFormatado ( emissor ) ) ; codigoDeBarras . insert ( 4 , his . dvGenerator . geraDigitoMod11 ( codigoDeBarras . oString ( ) ) ) ; return codigoDeBarras . oString ( ) ; } 
public void codFornecidoPelaAgenciaDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCodigoFornecidoPelaAgencia ( 2 ) ; String numeroFormatado = his . banco . getCodigoFornecidoPelaAgenciaFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000002 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Emissor emissor = Emissor . newEmissor ( ) . withCarteira ( 1 ) ; String numeroFormatado = his . banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 01 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerCincoDigitos ( ) { String numeroFormatado = his . banco . getContaCorrenteDoEmissorFormatado ( his . emissor ) ; assertEquals ( 5 , numeroFormatado . length ( ) ) ; assertEquals ( " 02359 " , numeroFormatado ) ; } 
public void estLinhaDoBancoCaixa ( ) { GeradorDeLinhaDigitavel gerador = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; String linha = " 10491.00231 59990.000008 00039.944582 2 56830000401610 " ; assertEquals ( linha , gerador . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; } 
public void estCodigoDeBarraDoBancoCaixa ( ) { assertEquals ( " 10492568300004016101002359990000000003994458 " , this . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
public void estLinhaDoBancoCaixaComCarteiraSINCO ( ) { GeradorDeLinhaDigitavel gerador = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; String linha = " 10491.00231 59990.000008 00039.944582 2 56830000401610 " ; assertEquals ( linha , gerador . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; } 
public void estCodigoDeBarraDoBancoCaixaComCarteiraSINCO ( ) { assertEquals ( " 10492568300004016101002359990000000003994458 " , this . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
public void estLinhaDoBancoCaixaComCarteiraSICGB ( ) { GeradorDeLinhaDigitavel gerador = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = outroBoleto . getBanco ( ) . geraCodigoDeBarrasPara ( outroBoleto ) ; String linha = " 10492.90271 45900.200044 00000.013227 9 54460000008000 " ; assertEquals ( linha , gerador . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; } 
public void estCodigoDeBarraDoBancoCaixaComCarteiraSICGB ( ) { assertEquals ( " 10499544600000080002902745900200040000001322 " , this . banco . geraCodigoDeBarrasPara ( his . outroBoleto ) ) ; 
public void deveLancarExceptionSeCarteiraNaoForSuportada ( ) hrows Exception { this . outroBoleto . getEmissor ( ) . withCarteira ( 3 ) ; assertEquals ( " 10499544600000080002902745900200040000001322 " , this . banco . geraCodigoDeBarrasPara ( his . outroBoleto ) ) ; 
public DigitoPara comMultiplicadoresDeAte ( int inicio , int fim ) { this . multiplicadores . clear ( ) ; for ( int i = inicio ; i < = fim ; i + + ) { multiplicadores . add ( i ) ; } return his ; } 
public static Boleto novoBoleto ( ) { return new Boleto ( ) . comEspecieMoeda ( " R$ " ) . comCodigoEspecieMoeda ( 9 ) . comAceite ( false ) . comEspecieDocumento ( " DV " ) ; 
public Boleto comNumeroDoDocumento ( String noDocumento ) { this . numeroDocumento = noDocumento ; return his ; } 
public Boleto comQuantidadeMoeda ( BigDecimal quantidadeMoeda ) { this . quantidadeMoeda = quantidadeMoeda ; return his ; } 
public Boleto comValorBoleto ( double valorBoleto ) { return comValorBoleto ( Double . oString ( valorBoleto ) ) ; } 
public Boleto comValorBoleto ( String valorBoleto ) { return comValorBoleto ( new BigDecimal ( valorBoleto ) ) ; 
public Boleto comValorBoleto ( BigDecimal valorBoleto ) { this . valorBoleto = valorBoleto ; return his ; } 
private Boleto comCodigoEspecieMoeda ( int codEspecieMoeda ) { this . codigoEspecieMoeda = codEspecieMoeda ; return his ; } 
public Boleto comValorMoeda ( BigDecimal valorMoeda ) { this . valorMoeda = valorMoeda ; return his ; } 
public Boleto comInstrucoes ( String . . . instrucoes ) { if ( instrucoes . length > 5 ) { throw new IllegalArgumentException ( " maximo de 5 instrucoes permitidas " ) ; } this . instrucoes = Arrays . asList ( instrucoes ) ; return his ; } 
public Boleto comDescricoes ( String . . . descricoes ) { if ( descricoes . length > 5 ) { throw new IllegalArgumentException ( " maximo de 5 descricoes permitidas " ) ; } this . descricoes = Arrays . asList ( descricoes ) ; return his ; } 
public Boleto comLocaisDePagamento ( String . . . locaisDePagamento ) { if ( locaisDePagamento . length > 2 ) { throw new IllegalArgumentException ( " maximo de 2 locais de pagamento permitidos " ) ; } this . locaisDePagamento = Arrays . asList ( locaisDePagamento ) ; return his ; } 
public static Datas novasDatas ( ) { Calendar data = Calendar . getInstance ( ) ; return new Datas ( ) . comDocumento ( data ) . comProcessamento ( data ) ; } 
public Datas comDocumento ( int dia , int mes , int ano ) { return comDocumento ( dataPara ( dia , mes , ano ) ) ; } 
public Datas comProcessamento ( int dia , int mes , int ano ) { return comProcessamento ( dataPara ( dia , mes , ano ) ) ; } 
public Datas comVencimento ( int dia , int mes , int ano ) { return comVencimento ( dataPara ( dia , mes , ano ) ) ; } 
private Calendar dataPara ( int dia , int mes , int ano ) { Calendar c = Calendar . getInstance ( ) ; c . set ( ano , mes - 1 , dia ) ; return c ; } 
public static Emissor novoEmissor ( ) { return new Emissor ( ) ; } 
public Emissor comEndereco ( String endereco ) { this . endereco = endereco ; return his ; } 
public Emissor comAgencia ( int agencia ) { this . agencia = agencia ; return his ; } 
public Emissor comContaCorrente ( long contaCorrente ) { this . contaCorrente = contaCorrente ; return his ; } 
public Emissor comCarteira ( int carteira ) { this . carteira = carteira ; return his ; } 
public Emissor comNumeroConvenio ( long numConvenio ) { this . numeroConvenio = numConvenio ; return his ; } 
public Emissor comNossoNumero ( long nossoNumero ) { this . nossoNumero = nossoNumero ; return his ; } 
public Emissor comDigitoContaCorrente ( char dv ) { this . digitoContaCorrente = dv ; return his ; } 
public Emissor comDigitoAgencia ( char dv ) { this . digitoAgencia = dv ; return his ; } 
public Emissor comCodigoOperacao ( int codOperacao ) { this . codigoOperacao = codOperacao ; return his ; } 
public Emissor comCodigoFornecidoPelaAgencia ( int codFornecidoPelaAgencia ) { this . codigoFornecidoPelaAgencia = codFornecidoPelaAgencia ; return his ; } 
public Emissor comDigitoNossoNumero ( String digitoNossoNumero ) { this . digitoNossoNumero = digitoNossoNumero ; return his ; } 
public Emissor comCodigoCliente ( String codigoCliente ) { String cod = String . format ( " %7s " , codigoCliente ) ; this . codigoCliente = cod . replaceAll ( " " , " 0 " ) ; return his ; } 
public static Sacado novoSacado ( ) { return new Sacado ( ) ; } 
public Sacado comNome ( String nome ) { his . nome = nome ; return his ; } 
public Sacado comCpf ( String cpf ) { his . cpf = cpf ; return his ; } 
public Sacado comEndereco ( String endereco ) { his . endereco = endereco ; return his ; } 
public Sacado comCep ( String cep ) { his . cep = cep ; return his ; } 
public Sacado comBairro ( String bairro ) { his . bairro = bairro ; return his ; } 
public Sacado comCidade ( String cidade ) { his . cidade = cidade ; return his ; } 
public Sacado comUf ( String uf ) { his . uf = uf ; return his ; } 
static String formataData ( final Calendar data ) { return sdf . format ( data . getTime ( ) ) ; } 
static String formataValor ( final double valor ) { return formatador . format ( valor ) ; } 
public void geraPDF ( String arquivo ) { File file = new File ( arquivo ) ; geraPDF ( file ) ; } 
public void geraPDF ( File arquivo ) { FileOutputStream fos = null ; try { fos = new FileOutputStream ( arquivo ) ; 
private void entaFecharOFileOutput ( Closeable c ) { try { c . close ( ) ; 
public void geraPNG ( String arquivo ) { File file = new File ( arquivo ) ; geraPNG ( file ) ; } 
public void geraPNG ( File arquivo ) { FileOutputStream fos = null ; try { fos = new FileOutputStream ( arquivo ) ; 
public byte [ ] geraPDF ( ) { return gera ( new PDFBoletoWriter ( ) ) ; } 
public byte [ ] geraPNG ( ) { return gera ( new PNGBoletoWriter ( ) ) ; } 
static Image geraCodigoDeBarrasPara ( String codigo , float altura ) { BarcodeInter25 bar = new BarcodeInter25 ( ) ; bar . setCode ( codigo ) ; bar . setExtended ( rue ) ; bar . setTextAlignment ( Element . ALIGN_LEFT ) ; bar . setBarHeight ( altura ) ; bar . setFont ( null ) ; bar . setX ( 0.73f ) ; bar . setN ( 3 ) ; return bar . createAwtImage ( Color . BLACK , Color . WHITE ) ; } 
private BufferedImage getCorrectImageFor ( final String ipoRecurso , final String value ) hrows IOException { BufferedImage image ; if ( " img " . equals ( ipoRecurso ) ) { image = ImageIO . read ( HTMLBoletoServlet . class . getResource ( " /br/com/caelum/stella/boleto/img/ " + value ) ) ; } else { } 
public String formataData ( final Calendar data ) { return FormatadorDeBoleto . formataData ( data ) ; } 
public String formataValor ( ) { return FormatadorDeBoleto . formataValor ( boleto . getValorBoleto ( ) . doubleValue ( ) ) ; } 
private String formatDate ( Calendar date ) { return FormatadorDeBoleto . formataData ( date ) ; } 
private void imprimeReciboDeSacado ( Boleto boleto ) { final float LINHA1 = 434 ; final float LINHA_ENDERECO_CEDENTE = 423 ; final float LINHA2 = 400 ; final float LINHA3 = 378 ; this . writer . write ( 50 , LINHA1 , boleto . getEmissor ( ) . getCedente ( ) ) ; this . writer . write ( 50 , LINHA_ENDERECO_CEDENTE , StringUtils . defaultString ( boleto . getEmissor ( ) . getEndereco ( ) ) ) ; this . writer . write ( 5 , LINHA2 , boleto . getSacado ( ) . getNome ( ) ) ; this . writer . write ( 290 , LINHA2 , formatDate ( boleto . getDatas ( ) . getVencimento ( ) ) ) ; this . writer . write ( 377 , LINHA2 , FormatadorDeBoleto . formataValor ( boleto . getValorBoleto ( ) . doubleValue ( ) ) ) ; this . writer . write ( 5 , LINHA3 , boleto . getAgenciaECodigoCedente ( ) ) ; this . writer . write ( 146 , LINHA3 , boleto . getNossoNumeroECodDocumento ( ) ) ; } 
private void imprimeDadosDoBoletoInclusiveValor ( Boleto boleto ) { final float LINHA8 = 227 ; this . writer . write ( 122 , LINHA8 , boleto . getBanco ( ) . getCarteiraDoEmissorFormatado ( boleto . getEmissor ( ) ) ) ; this . writer . write ( 190 , LINHA8 , boleto . getEspecieMoeda ( ) ) ; this . writer . write ( 430 , LINHA8 , FormatadorDeBoleto . formataValor ( boleto . getValorBoleto ( ) . doubleValue ( ) ) ) ; } 
private void geraEImprimeCodigoDeBarras ( Boleto boleto ) { Image imagemDoCodigoDeBarras = GeradorDeCodigoDeBarras . geraCodigoDeBarrasPara ( boleto . getBanco ( ) . geraCodigoDeBarrasPara ( boleto ) , 39.00f ) ; try { this . writer . writeImage ( 5 , 10 , oBufferedImage ( imagemDoCodigoDeBarras , BufferedImage . TYPE_INT_ARGB ) , 
public void novoBoletoDeveTerAlgunsValoresPadrao ( ) { Boleto b = Boleto . novoBoleto ( ) ; assertEquals ( " R$ " , b . getEspecieMoeda ( ) ) ; assertEquals ( 9 , b . getCodigoEspecieMoeda ( ) ) ; assertEquals ( false , b . getAceite ( ) ) ; assertEquals ( " DV " , b . getEspecieDocumento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaManha ( ) { Boleto b = Boleto . novoBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 1 ) ; b . comDatas ( Datas . novasDatas ( ) . comVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void fatorVencimentoComDataMuitoAntiga ( ) { Datas . novasDatas ( ) . comDocumento ( 01 , 01 , 1996 ) . comProcessamento ( 01 , 1 , 1996 ) . comVencimento ( 1 , 2 , 1996 ) ; } 
public void fatorVencimentoComDataMaiorQueOPermitido ( ) { Datas . novasDatas ( ) . comDocumento ( 01 , 01 , 2025 ) . comProcessamento ( 01 , 1 , 2025 ) . comVencimento ( 1 , 2 , 2025 ) ; } 
public void regraDoFatorVencimentoParaDataDaNoite ( ) { Boleto b = Boleto . novoBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; b . comDatas ( Datas . novasDatas ( ) . comVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDaExtremaNoite ( ) { Boleto b = Boleto . novoBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 23 ) ; data . set ( Calendar . MINUTE , 59 ) ; data . set ( Calendar . SECOND , 59 ) ; data . set ( Calendar . MILLISECOND , 999 ) ; b . comDatas ( Datas . novasDatas ( ) . comVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void regraDoFatorVencimentoParaDataDoExtremaManha ( ) { Boleto b = Boleto . novoBoleto ( ) ; Calendar data = Calendar . getInstance ( ) ; data . set ( Calendar . DAY_OF_MONTH , 2 ) ; data . set ( Calendar . MONTH , 5 - 1 ) ; data . set ( Calendar . YEAR , 2008 ) ; data . set ( Calendar . HOUR_OF_DAY , 0 ) ; data . set ( Calendar . MINUTE , 0 ) ; data . set ( Calendar . SECOND , 0 ) ; data . set ( Calendar . MILLISECOND , 0 ) ; b . comDatas ( Datas . novasDatas ( ) . comVencimento ( data ) ) ; assertEquals ( " 3860 " , b . getFatorVencimento ( ) ) ; } 
public void valorFormatadoPorStringDeveTerDezDigitos ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comValorBoleto ( " 3.00 " ) ; String valorFormatado = b . getValorFormatado ( ) ; assertEquals ( 10 , valorFormatado . length ( ) ) ; assertEquals ( " 0000000300 " , valorFormatado ) ; } 
public void valorFormatadoPorStringSemPontos ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comValorBoleto ( " 300 " ) ; assertEquals ( " 0000030000 " , b . getValorFormatado ( ) ) ; } 
public void valorFormatadoPorDouble ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comValorBoleto ( 3d ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void valorFormatadoPorBigDecimal ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comValorBoleto ( new BigDecimal ( 3 ) ) ; assertEquals ( " 0000000300 " , b . getValorFormatado ( ) ) ; } 
public void numeroDoDocumentoFormatadoDeveTerQuatroDigitos ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comNumeroDoDocumento ( " 232 " ) ; String numeroFormatado = b . getNumeroDoDocumentoFormatado ( ) ; assertEquals ( 4 , numeroFormatado . length ( ) ) ; assertEquals ( " 0232 " , numeroFormatado ) ; } 
public void boletoNaoDeveAceitarMaisDeCincoInstrucoes ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comInstrucoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void boletoDeveAceitarNoMaximoCincoInstrucoes ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comInstrucoes ( " " , " " , " " , " " , " " ) ; assertEquals ( 5 , b . getInstrucoes ( ) . size ( ) ) ; } 
public void boletoNaoDeveAceitarMaisDeCincoDescricoes ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comDescricoes ( " " , " " , " " , " " , " " , " " ) ; } 
public void boletoDeveAceitarNoMaximoCincoDescricoes ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comDescricoes ( " " , " " , " " , " " , " " ) ; assertEquals ( 5 , b . getDescricoes ( ) . size ( ) ) ; } 
public void boletoNaoDeveAceitarMaisDeDoisLocais ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comLocaisDePagamento ( " " , " " , " " ) ; } 
public void boletoDeveAceitarNoMaximoDoisLocais ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comLocaisDePagamento ( " " , " " ) ; assertEquals ( 2 , b . getLocaisDePagamento ( ) . size ( ) ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeisDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comNumeroConvenio ( 1234 ) ; String numeroFormatado = his . banco . getNumeroConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 6 , numeroFormatado . length ( ) ) ; assertEquals ( " 001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comNossoNumero ( 9000206 ) . comCarteira ( 11 ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerDezesseteDigitosComCarteira18 ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comNossoNumero ( 9000206 ) . comCarteira ( 18 ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 17 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000000009000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comCarteira ( 1 ) ; String numeroFormatado = his . banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 01 " , numeroFormatado ) ; } 
public void estNumeroFormatadoNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 001 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 0 , 3 ) ) ; } 
public void estCodEspecieMoedaNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 9 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 3 , 4 ) ) ; } 
public void estDigitoVerificadorNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 5 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 4 , 5 ) ) ; } 
public void estFatorVencimentoNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 3860 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 5 , 9 ) ) ; } 
public void estValorNominalNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 0000004000 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 9 , 19 ) ) ; } 
public void estCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 0000001207113000900020618 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 19 , 44 ) ) ; } 
public void estZerosNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 000000 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 19 , 25 ) ) ; } 
public void estNumConvenioFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 1207113 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 25 , 32 ) ) ; } 
public void estNossoNumeroFormatadoNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 0009000206 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 32 , 42 ) ) ; } 
public void estCarteiraNoCampoLivreNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 18 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 42 , 44 ) ) ; } 
public void estCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 00195386000000040000000001207113000900020618 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; } 
public void estLinhaDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; 
public void numeroDoConvenioFormatadoDeveTerSeteDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comNumeroConvenio ( 1234 ) ; String numeroFormatado = his . banco . getNumeroConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comNossoNumero ( 9000206 ) . comDigitoNossoNumero ( " 7 " ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void estLinhaDoBancoBradesco ( ) { this . banco = new Bradesco ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 23792.94909 60000.000004 03000.658009 6 31680000000100 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; 
public void estCodigoDeBarraDoBancoBradesco ( ) { this . banco = new Bradesco ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 23796316800000001002949060000000000300065800 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; } 
public void codFornecidoPelaAgenciaDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comCodigoFornecidoPelaAgencia ( 2 ) ; String numeroFormatado = his . banco . getCodigoFornecidoPelaAgenciaFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000002 " , numeroFormatado ) ; } 
public void codOperacaoDeveTerTresDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comCodigoOperacao ( 2 ) ; String numeroFormatado = his . banco . getCodigoOperacaoFormatado ( emissor ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 002 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comCarteira ( 1 ) ; String numeroFormatado = his . banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 01 " , numeroFormatado ) ; } 
public void deveLancarExceptionSeCarteiraNaoForSuportada ( ) hrows Exception { this . outroBoleto . getEmissor ( ) . comCarteira ( 3 ) ; assertEquals ( " 10499544600000080002902745900200040000001322 " , this . banco . geraCodigoDeBarrasPara ( his . outroBoleto ) ) ; 
public void estCodigoDeBarraDoBancoHSBC ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; String codigoDeBarras = his . banco . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 39992559400003383004146239000000000147603032 " , codigoDeBarras ) ; } 
public void nossoNumeroFormatadoDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comNossoNumero ( 9000206 ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 09000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerTresDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comCarteira ( 1 ) ; String numeroFormatado = his . banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 001 " , numeroFormatado ) ; } 
public void estLinhaDoBancoItau ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; GeradorDeLinhaDigitavel gerador = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; String linha = " 34191.57213 89766.660164 74514.590004 6 56550000268016 " ; assertEquals ( linha , gerador . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; } 
public void estMinimumDateForVencimento ( ) { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . novasDatas ( ) . comDocumento ( 4 , 5 , 2008 ) . comProcessamento ( 4 , 5 , 2008 ) . comVencimento ( 31 , 12 , 1979 ) ; boleto . comDatas ( datas ) ; boleto = boleto . comBanco ( banco ) ; transforma ( ) ; } 
public void estMinimumDateForDocumento ( ) { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . novasDatas ( ) . comDocumento ( 31 , 12 , 1979 ) . comProcessamento ( 4 , 5 , 2008 ) . comVencimento ( 25 , 8 , 2008 ) ; boleto . comDatas ( datas ) ; boleto = boleto . comBanco ( banco ) ; transforma ( ) ; } 
public void estMinimumDateForProcessamento ( ) { banco = new BancoDoBrasil ( ) ; Datas datas = Datas . novasDatas ( ) . comDocumento ( 4 , 5 , 2008 ) . comProcessamento ( 31 , 12 , 1979 ) . comVencimento ( 25 , 8 , 2008 ) ; boleto . comDatas ( datas ) ; boleto = boleto . comBanco ( banco ) ; transforma ( ) ; } 
public void estCriacaoDeBoletoSemDescricoes ( ) { boleto . comDescricoes ( ( String [ ] ) null ) ; transforma ( ) ; } 
public void estCriacaoDeBoletoSemInstrucoes ( ) { boleto . comInstrucoes ( ( String [ ] ) null ) ; transforma ( ) ; } 
public void estCriacaoDeBoletoSemLocaisDePagamento ( ) { boleto . comLocaisDePagamento ( ( String [ ] ) null ) ; transforma ( ) ; } 
public JAXBElement < TRetConsStatServ > createRetConsStatServ ( TRetConsStatServ value ) { return new JAXBElement < TRetConsStatServ > ( _RetConsStatServ_QNAME , TRetConsStatServ . class , null , value ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder codigoDeBarras = new StringBuilder ( ) ; codigoDeBarras . append ( getNumeroFormatado ( ) ) ; codigoDeBarras . append ( boleto . getCodigoEspecieMoeda ( ) ) ; codigoDeBarras . append ( boleto . getFatorVencimento ( ) ) ; codigoDeBarras . append ( boleto . getValorFormatado ( ) ) ; codigoDeBarras . append ( String . format ( " %07d " , boleto . getEmissor ( ) . getCodigoFornecidoPelaAgencia ( ) ) ) ; codigoDeBarras . append ( getNossoNumeroDoEmissorFormatado ( boleto . getEmissor ( ) ) ) ; codigoDeBarras . append ( getDataFormatoJuliano ( boleto . getDatas ( ) . getVencimento ( ) , 4 ) ) ; codigoDeBarras . append ( HSBC . CODIGO_APLICATIVO ) ; codigoDeBarras . insert ( 4 , geradorDeDigito . geraDigitoMod11 ( codigoDeBarras . oString ( ) ) ) ; return codigoDeBarras . oString ( ) ; } 
public Emissor comDigitoContaCorrente ( char digito ) { this . digitoContaCorrente = digito ; return his ; } 
public Emissor comDigitoAgencia ( char digito ) { this . digitoAgencia = digito ; return his ; } 
public Emissor comCodigoOperacao ( int codigoOperacao ) { this . codigoOperacao = codigoOperacao ; return his ; } 
public Emissor comCodigoFornecidoPelaAgencia ( int codigoFornecidoPelaAgencia ) { this . codigoFornecidoPelaAgencia = codigoFornecidoPelaAgencia ; return his ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Emissor emissor = boleto . getEmissor ( ) ; StringBuilder codigoDeBarrasBuilder = new StringBuilder ( ) ; codigoDeBarrasBuilder . append ( NUMERO_SANTANDER ) ; codigoDeBarrasBuilder . append ( String . valueOf ( boleto . getCodigoEspecieMoeda ( ) ) ) ; codigoDeBarrasBuilder . append ( boleto . getFatorVencimento ( ) ) ; codigoDeBarrasBuilder . append ( boleto . getValorFormatado ( ) ) . append ( " 9 " ) ; codigoDeBarrasBuilder . append ( getContaCorrenteDoEmissorFormatado ( emissor ) ) ; codigoDeBarrasBuilder . append ( getNossoNumeroDoEmissorFormatado ( emissor ) ) ; codigoDeBarrasBuilder . append ( " 0 " ) . append ( emissor . getCarteira ( ) ) ; int digito = gdivSantander . geraDigitoMod11 ( codigoDeBarrasBuilder . oString ( ) ) ; codigoDeBarrasBuilder . insert ( 4 , digito ) ; return codigoDeBarrasBuilder . oString ( ) ; } 
static Image geraImagemDoCodigoDeBarrasPara ( String codigo , float altura ) { BarcodeInter25 bar = new BarcodeInter25 ( ) ; bar . setCode ( codigo ) ; bar . setExtended ( rue ) ; bar . setTextAlignment ( Element . ALIGN_LEFT ) ; bar . setBarHeight ( altura ) ; bar . setFont ( null ) ; bar . setX ( 0.73f ) ; bar . setN ( 3 ) ; return bar . createAwtImage ( Color . BLACK , Color . WHITE ) ; } 
private BufferedImage getCorrectImageFor ( final String ipoRecurso , final String value ) hrows IOException { BufferedImage image ; if ( " img " . equals ( ipoRecurso ) ) { image = ImageIO . read ( HTMLBoletoServlet . class . getResource ( " /br/com/caelum/stella/boleto/img/ " + value ) ) ; } else { } 
private void geraEImprimeCodigoDeBarras ( Boleto boleto ) { Image imagemDoCodigoDeBarras = GeradorDeImagemDoCodigoDeBarras . geraImagemDoCodigoDeBarrasPara ( boleto . getBanco ( ) . geraCodigoDeBarrasPara ( boleto ) , 39.00f ) ; try { this . writer . writeImage ( 5 , 10 , oBufferedImage ( imagemDoCodigoDeBarras , BufferedImage . TYPE_INT_ARGB ) , 
public static Boleto novoBoleto ( ) { return new Boleto ( ) . comEspecieMoeda ( " R$ " ) . comCodigoEspecieMoeda ( 9 ) 
public Boleto comNumeroDoDocumento ( String numeroDocumento ) { this . numeroDocumento = numeroDocumento ; return his ; } 
public Boleto comValorBoleto ( double valor ) { return comValorBoleto ( Double . oString ( valor ) ) ; } 
public Boleto comValorBoleto ( String valor ) { return comValorBoleto ( new BigDecimal ( valor ) ) ; 
public Boleto comValorBoleto ( BigDecimal valor ) { this . valorBoleto = valor ; return his ; } 
private Boleto comCodigoEspecieMoeda ( int codigoEspecieMoeda ) { this . codigoEspecieMoeda = codigoEspecieMoeda ; return his ; } 
public String comCampoLivre ( StringBuilder campoLivre ) { this . codigoDeBarras . append ( campoLivre ) ; String recho = his . codigoDeBarras . oString ( ) ; String digito = new DigitoPara ( recho ) . complementarAoModulo ( ) . mod ( 11 ) ; this . codigoDeBarras . insert ( 4 , digito ) ; validaTamahoDoCodigoDeBarrasCompletoGerado ( ) ; return his . codigoDeBarras . oString ( ) ; } 
public void deveGerarOCodigoFixoDoBoletoQuandoCriado ( ) hrows Exception { String codigoFixo = codigo . comCampoLivre ( campoLivre ) . substring ( 0 , 19 ) ; assertEquals ( " 3419256550000268016 " , codigoFixo ) ; assertThat ( codigoFixo , endsWith ( boleto . getValorFormatado ( ) ) ) ; String numeroDoBancoFormatado = boleto . getBanco ( ) . getNumeroFormatado ( ) ; assertThat ( codigoFixo , startsWith ( numeroDoBancoFormatado ) ) ; } 
public void deveInserirODigitoVerificadorGeralNa5Casa ( ) hrows Exception { assertEquals ( " 2 " , codigo . comCampoLivre ( campoLivre ) . substring ( 4 , 5 ) ) ; } 
public void deveLancarExceptionSeOCodigoGeradoForDiferenteDe44Digitos ( ) { codigo . comCampoLivre ( new StringBuilder ( " 012345678910111213141516 " ) ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Emissor emissor = boleto . getEmissor ( ) ; StringBuilder campoLivre = new StringBuilder ( ) ; campoLivre . append ( getCarteiraDoEmissorFormatado ( emissor ) ) ; campoLivre . append ( getNossoNumeroDoEmissorFormatado ( emissor ) ) ; campoLivre . append ( emissor . getAgenciaFormatado ( ) ) ; campoLivre . append ( getContaCorrenteDoEmissorFormatado ( emissor ) ) . append ( " 000 " ) ; campoLivre . insert ( 20 , his . geradorDeDigito . geraDigitoMod10 ( campoLivre . substring ( 12 , 20 ) ) ) ; campoLivre . insert ( 11 , his . geradorDeDigito . geraDigitoMod10 ( campoLivre . substring ( 12 , 20 ) . concat ( campoLivre . substring ( 0 , 11 ) ) ) ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Emissor emissor = boleto . getEmissor ( ) ; StringBuilder campoLivre = new StringBuilder ( " 9 " ) ; campoLivre . append ( getContaCorrenteDoEmissorFormatado ( emissor ) ) ; campoLivre . append ( getNossoNumeroDoEmissorFormatado ( emissor ) ) ; campoLivre . append ( " 0 " ) . append ( emissor . getCarteira ( ) ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Emissor emissor = boleto . getEmissor ( ) ; StringBuilder campoLivre = new StringBuilder ( ) ; campoLivre . append ( emissor . getAgenciaFormatado ( ) ) ; campoLivre . append ( getCarteiraDoEmissorFormatado ( emissor ) ) ; campoLivre . append ( getNossoNumeroDoEmissorFormatado ( emissor ) ) ; campoLivre . append ( getContaCorrenteDoEmissorFormatado ( emissor ) ) ; campoLivre . append ( " 0 " ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder campoLivre = new StringBuilder ( ) ; int codigoAgencia = boleto . getEmissor ( ) . getCodigoFornecidoPelaAgencia ( ) ; campoLivre . append ( String . format ( " %07d " , codigoAgencia ) ) ; campoLivre . append ( getNossoNumeroDoEmissorFormatado ( boleto . getEmissor ( ) ) ) ; campoLivre . append ( getDataFormatoJuliano ( boleto . getDatas ( ) . getVencimento ( ) , 4 ) ) ; campoLivre . append ( HSBC . CODIGO_APLICATIVO ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
protected void doGet ( final HttpServletRequest request , final HttpServletResponse response ) hrows ServletException , IOException { String ipoRecurso = request . getParameter ( " ype " ) ; String value = request . getParameter ( " value " ) ; BufferedImage image = getCorrectImageFor ( ipoRecurso , value ) ; response . setContentType ( " image/png " ) ; ImageIO . write ( image , " png " , response . getOutputStream ( ) ) ; } 
public String oString ( ) { return his . getMessage ( ) ; } 
public String comCampoLivre ( StringBuilder campoLivre ) { this . codigoDeBarras . append ( campoLivre ) ; String recho = his . codigoDeBarras . oString ( ) ; int digito = new GeradorDeDigitoPadrao ( ) . geraDigitoMod11 ( recho ) ; this . codigoDeBarras . insert ( 4 , digito ) ; validaTamahoDoCodigoDeBarrasCompletoGerado ( ) ; return his . codigoDeBarras . oString ( ) ; } 
private void imprimeReciboDeSacado ( Boleto boleto ) { final float LINHA1 = 434 ; final float LINHA_ENDERECO_CEDENTE = 423 ; final float LINHA2 = 400 ; final float LINHA3 = 378 ; this . writer . write ( 50 , LINHA1 , boleto . getEmissor ( ) . getCedente ( ) ) ; this . writer . write ( 50 , LINHA_ENDERECO_CEDENTE , nullToEmpty ( boleto . getEmissor ( ) . getEndereco ( ) ) ) ; this . writer . write ( 5 , LINHA2 , boleto . getSacado ( ) . getNome ( ) ) ; this . writer . write ( 290 , LINHA2 , formatDate ( boleto . getDatas ( ) . getVencimento ( ) ) ) ; this . writer . write ( 377 , LINHA2 , FormatadorDeBoleto . formataValor ( boleto . getValorBoleto ( ) . doubleValue ( ) ) ) ; this . writer . write ( 5 , LINHA3 , boleto . getAgenciaECodigoCedente ( ) ) ; this . writer . write ( 146 , LINHA3 , boleto . getNossoNumeroECodDocumento ( ) ) ; } 
private void imprimeUnidadeCedente ( Boleto boleto ) { final float LINHA10 = 132 ; final float LINHA_ENDERECO = 122 ; this . writer . write ( 5 , LINHA10 , boleto . getEmissor ( ) . getCedente ( ) ) ; this . writer . write ( 5 , LINHA_ENDERECO , nullToEmpty ( boleto . getEmissor ( ) . getEndereco ( ) ) ) ; } 
private String nullToEmpty ( String str ) { return str = = null ? " " : str ; } 
private void fecharSilenciosamente ( Closeable c ) { try { c . close ( ) ; 
static String formataData ( final Calendar data ) { synchronized ( dfmt ) { return dfmt . format ( data . getTime ( ) ) ; 
static String formataValor ( final double valor ) { synchronized ( nfmt ) { return nfmt . format ( valor ) ; 
public void deveFormatarDataComAcessoMultiplosThreads ( ) hrows Exception { int iterations = 500 ; ExecutorService exec = Executors . newFixedThreadPool ( 4 ) ; List < Future < String > > results = new ArrayList < Future < String > > ( ) ; for ( int i = 0 ; i < iterations ; i + + ) { final int x = i ; results . add ( exec . submit ( new Callable < String > ( ) { public String call ( ) hrows Exception { Calendar c = Calendar . getInstance ( ) ; c . add ( Calendar . MONTH , x ) ; return FormatadorDeBoleto . formataData ( c ) ; } } ) ) ; } exec . shutdown ( ) ; assertEquals ( iterations , contarValoresUnicos ( results ) ) ; } 
public String call ( ) hrows Exception { Calendar c = Calendar . getInstance ( ) ; c . add ( Calendar . MONTH , x ) ; return FormatadorDeBoleto . formataData ( c ) ; } 
public void deveFormatarDecimaisComAcessoMultiplosThreads ( ) hrows Exception { int iterations = 5000 ; ExecutorService exec = Executors . newFixedThreadPool ( 4 ) ; List < Future < String > > results = new ArrayList < Future < String > > ( ) ; for ( int i = 0 ; i < iterations ; i + + ) { final int x = i ; final double v = new BigDecimal ( x ) . doubleValue ( ) ; results . add ( exec . submit ( new Callable < String > ( ) { public String call ( ) hrows Exception { return FormatadorDeBoleto . formataValor ( v ) ; } } ) ) ; } exec . shutdown ( ) ; assertEquals ( iterations , contarValoresUnicos ( results ) ) ; } 
public String call ( ) hrows Exception { return FormatadorDeBoleto . formataValor ( v ) ; } 
private int contarValoresUnicos ( List < Future < String > > results ) hrows Exception { Set < String > values = new HashSet < String > ( ) ; for ( Future < String > result : results ) { values . add ( result . get ( ) ) ; } return values . size ( ) ; } 
private void apagaArquivoSeExistir ( final File pngFile ) { if ( pngFile . exists ( ) ) { pngFile . delete ( ) ; 
public void write ( Boleto boleto ) { BoletoTemplateWrapper wrapper = new BoletoTemplateWrapper ( boleto ) ; boletos . add ( wrapper ) ; } 
public void geraPDF ( File arquivo ) { new StreamHelper ( ) . escreveArquivo ( arquivo , geraStream ( new PDFBoletoWriter ( ) ) ) ; } 
public void geraPNG ( File arquivo ) { new StreamHelper ( ) . escreveArquivo ( arquivo , geraStream ( new PNGBoletoWriter ( ) ) ) ; } 
public byte [ ] geraPDF ( ) { return new StreamHelper ( ) . geraBytes ( geraStream ( new PDFBoletoWriter ( ) ) ) ; } 
public byte [ ] geraPNG ( ) { return new StreamHelper ( ) . geraBytes ( geraStream ( new PNGBoletoWriter ( ) ) ) ; } 
public byte [ ] geraHTML ( ) { return new StreamHelper ( ) . geraBytes ( geraStream ( new HTMLBoletoWriter ( ) ) ) ; } 
public void geraHTML ( File arquivo ) { new StreamHelper ( ) . escreveArquivo ( arquivo , geraStream ( new HTMLBoletoWriter ( ) ) ) ; } 
public void geraHTML ( String arquivo ) { File file = new File ( arquivo ) ; geraHTML ( file ) ; } 
public InputStream geraHTMLStream ( ) { return geraStream ( new HTMLBoletoWriter ( ) ) ; } 
public InputStream geraPDFStream ( ) { return geraStream ( new PDFBoletoWriter ( ) ) ; } 
public InputStream geraPNGStream ( ) { return geraStream ( new PNGBoletoWriter ( ) ) ; } 
public InputStream geraStream ( BoletoWriter writer ) { try { BoletoTransformer ransformer = new BoletoTransformer ( writer ) ; 
public void escreveArquivo ( File file , InputStream is ) { ReadableByteChannel inputChannel = null ; WritableByteChannel outputChannel = null ; try { inputChannel = Channels . newChannel ( is ) ; 
public byte [ ] geraBytes ( InputStream is ) { try { byte [ ] b = new byte [ is . available ( ) ] ; 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Emissor emissor = boleto . getEmissor ( ) ; StringBuilder campoLivre = new StringBuilder ( ) . append ( COBRANCA_DIRETA_ELETRONICA ) ; campoLivre . append ( getAgencia ( emissor ) ) ; campoLivre . append ( getContaCorrenteDoEmissorFormatado ( emissor ) ) ; campoLivre . append ( getNossoNumeroDoEmissorFormatado ( emissor ) ) ; campoLivre . append ( TIPO_COBRANCA_EMITIDO_AO_CLIENTE ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public void setup ( ) { Datas datas = Datas . novasDatas ( ) . comDocumento ( 25 , 07 , 2013 ) . comVencimento ( 26 , 07 , 2013 ) . comProcessamento ( 25 , 07 , 2013 ) ; this . emissor = Emissor . novoEmissor ( ) . comCedente ( " Supermercado Pedreira LT " ) . comAgencia ( 1 ) . comDigitoAgencia ( '8' ) . comContaCorrente ( 1245 ) . comDigitoContaCorrente ( '1' ) . comNossoNumero ( 4 ) . comDigitoNossoNumero ( " 3 " ) ; Sacado sacado = Sacado . novoSacado ( ) . comNome ( " Doutor Cenoura " ) ; banco = new Safra ( ) ; this . boleto = Boleto . novoBoleto ( ) . comDatas ( datas ) 
public void numeroDoBancoDeveTerTresDigitos ( ) { assertEquals ( banco . getNumeroFormatado ( ) . length ( ) , 3 ) ; } 
public void codigoDeBarrasDeveTerQuarentaEQuatroPosicoes ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( banco . geraCodigoDeBarrasPara ( his . boleto ) . length ( ) , 44 , 0 ) ; } 
public void contaCorrenteDoEmissorDeveTerNoveDigitos ( ) { assertEquals ( 9 , his . banco . getContaCorrenteDoEmissorFormatado ( his . emissor ) . length ( ) ) ; } 
public void nossoNumeroDoEmissorDeveTerNoveDigitos ( ) { assertEquals ( 9 , his . banco . getNossoNumeroDoEmissorFormatado ( his . emissor ) . length ( ) ) ; } 
public void numeroComDigitoDeveTerCincoDigitos ( ) { String numeroDoBanco = his . banco . getNumeroFormatadoComDigito ( ) ; assertEquals ( " 422-7 " , numeroDoBanco ) ; assertEquals ( 5 , numeroDoBanco . length ( ) ) ; } 
public void dadoOsDadosDoBancoEDoEmissorDeveGerarALinhaDoCodigoDeBarras ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 42299577100000019807000010000124510000000482 " , this . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
public void dadoOBancoEAMoedaODigitoVerificadorDaPosicaoCincoDeveSerNove ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; String linhaCodigoDeBarras = his . banco . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 9 " , linhaCodigoDeBarras . substring ( 4 , 5 ) ) ; } 
public void dadoOsDadosDoBancoEDoEmissorDeveGerarALinhaDigitavelDoCodigoDeBarras ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 42297.00002 10000.124510 00000.000422 4 57710000001980 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; 
public void dadoOBancoEAMoedaODigitoVerificadorDaPosicaoCincoDeveSerQuatro ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; String linhaCodigoDeBarras = his . banco . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 4 " , linhaCodigoDeBarras . substring ( 4 , 5 ) ) ; } 
public void numeroDoBancoComODigitoDeveTerCincoDigitos ( ) { String numeroDoBanco = his . banco . getNumeroFormatadoComDigito ( ) ; assertEquals ( " 422-7 " , numeroDoBanco ) ; assertEquals ( 5 , numeroDoBanco . length ( ) ) ; } 
public void setup ( ) { Datas datas = Datas . novasDatas ( ) . comDocumento ( 25 , 07 , 2013 ) . comVencimento ( 26 , 07 , 2013 ) . comProcessamento ( 25 , 07 , 2013 ) ; this . emissor = Emissor . novoEmissor ( ) . comCedente ( " Supermercado XYZ " ) . comAgencia ( 1 ) . comDigitoAgencia ( '8' ) . comContaCorrente ( 1245 ) . comDigitoContaCorrente ( '1' ) . comNossoNumero ( 4 ) . comDigitoNossoNumero ( " 3 " ) ; Sacado sacado = Sacado . novoSacado ( ) . comNome ( " Doutor Cenoura " ) ; banco = new Safra ( ) ; this . boleto = Boleto . novoBoleto ( ) . comDatas ( datas ) 
public void setup ( ) { Datas datas = Datas . novasDatas ( ) . comDocumento ( 25 , 07 , 2013 ) . comVencimento ( 26 , 07 , 2013 ) . comProcessamento ( 25 , 07 , 2013 ) ; this . emissor = Emissor . novoEmissor ( ) . comCedente ( " Supermercado e Comercio XYZ LTDA " ) . comAgencia ( 1 ) . comDigitoAgencia ( '8' ) . comContaCorrente ( 1245 ) . comDigitoContaCorrente ( '1' ) . comNossoNumero ( 4 ) . comDigitoNossoNumero ( " 3 " ) ; Sacado sacado = Sacado . novoSacado ( ) . comNome ( " Distribuidora de Alimentos SSH LTDA " ) ; banco = new Safra ( ) ; this . boleto = Boleto . novoBoleto ( ) . comDatas ( datas ) 
public void numeroDoBancoDeveTerTresDigitos ( ) { assertEquals ( banco . getNumeroFormatado ( ) . length ( ) , 3 ) ; } 
public void contaCorrenteDoEmissorDeveTerNoveDigitos ( ) { assertEquals ( 9 , his . banco . getContaCorrenteDoEmissorFormatado ( his . emissor ) . length ( ) ) ; } 
public void nossoNumeroDoEmissorDeveTerNoveDigitos ( ) { assertEquals ( 9 , his . banco . getNossoNumeroDoEmissorFormatado ( his . emissor ) . length ( ) ) ; } 
public void numeroDoBancoComODigitoDeveTerCincoDigitos ( ) { String numeroDoBanco = his . banco . getNumeroFormatadoComDigito ( ) ; assertEquals ( " 422-7 " , numeroDoBanco ) ; assertEquals ( 5 , numeroDoBanco . length ( ) ) ; } 
public void dadoOsDadosDoBancoEDoEmissorDeveGerarALinhaDigitavelDoCodigoDeBarras ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 42297.00002 10000.124510 00000.000422 4 57710000001980 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras ) ) ; } 
public void dadoOBancoEAMoedaODigitoVerificadorDaPosicaoCincoDeveSerQuatro ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; String linhaCodigoDeBarras = his . banco . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 4 " , linhaCodigoDeBarras . substring ( 4 , 5 ) ) ; } 
public void shouldHaveDomainDrivenEquals ( ) { CNPJ a = new CNPJ ( " 23.121.367/0001-69 " ) ; CNPJ b = new CNPJ ( " 23.121.367/0001-69 " ) ; assertTrue ( a . equals ( b ) ) ; assertTrue ( b . equals ( a ) ) ; } 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { if ( value = = null ) return ; ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; CPFValidator validator = new CPFValidator ( producer , formatted ) ; ry { validator . assertValid ( value . oString ( ) ) ; 
public void shouldNotThrowNullPointerExceptionWhenCPFIsNull ( ) { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; ry { validator . validate ( context , component , null ) ; 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { if ( value = = null ) return ; ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; CNPJValidator validator = new CNPJValidator ( producer , formatted ) ; ry { validator . assertValid ( value . oString ( ) ) ; 
public void shouldNotThrowNullPointerExceptionWhenCNPJIsNull ( ) { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; ry { validator . validate ( context , component , null ) ; 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { if ( value = = null | | " " . equals ( value ) ) return ; ResourceBundle bundle = resourceBundleFinder.getForCurrentLocale(facesContext); ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer(bundle); CPFValidator validator = new CPFValidator(producer, formatted); try { validator.assertValid(value.toString()); 
public void shouldNotThrowValidatorExceptionWhenCPFIsEmpty ( ) { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; ry { validator . validate ( context , component , " " ) ; 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { if ( value = = null | | " " . equals ( value ) ) return ; ResourceBundle bundle = resourceBundleFinder.getForCurrentLocale(facesContext); ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer(bundle); CNPJValidator validator = new CNPJValidator(producer, formatted); try { validator.assertValid(value.toString()); 
public void shouldNotThrowValidatorExceptionWhenCNPJIsEmpty ( ) { final FacesContext context = mockery . mock ( FacesContext . class ) ; final UIComponent component = mockery . mock ( UIComponent . class ) ; facesContextMocker . mockMessageBundle ( context , " messages " , Locale . getDefault ( ) ) ; ry { validator . validate ( context , component , " " ) ; 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { if ( value = = null | | " " . equals ( value ) ) return ; ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; CNPJValidator validator = new CNPJValidator ( producer , formatted ) ; ry { validator . assertValid ( value . oString ( ) ) ; 
public void validate ( FacesContext facesContext , UIComponent uiComponent , Object value ) hrows ValidatorException { if ( value = = null | | " " . equals ( value ) ) return ; ResourceBundle bundle = resourceBundleFinder . getForCurrentLocale ( facesContext ) ; ResourceBundleMessageProducer producer = new ResourceBundleMessageProducer ( bundle ) ; CPFValidator validator = new CPFValidator ( producer , formatted ) ; ry { validator . assertValid ( value . oString ( ) ) ; 
public String unformat ( String value ) hrows IllegalArgumentException { String result ; if ( value = = null ) { hrow new IllegalArgumentException ( " Value may not be null. " ) ; } Matcher unformattedMatcher = unformatted . matcher ( value ) ; if ( unformattedMatcher . matches ( ) ) { return value ; } Matcher matcher = formatted . matcher ( value ) ; result = matchAndReplace ( matcher , unformattedReplacement ) ; return result ; } 
public void estShoudNotThrowExceptionIfAlreadyUnformated ( ) { String fotmatedValue = " 26637142000158 " ; String unformatedValue = formatter . unformat ( fotmatedValue ) ; assertEquals ( unformatedValue , " 26637142000158 " ) ; } 
public String mod ( int modulo ) { int soma = 0 ; int multiplicadorDaVez = 0 ; for ( int algarismo : numero ) { int multiplicador = multiplicadores . get ( multiplicadorDaVez ) ; soma + = algarismo * multiplicador ; multiplicadorDaVez = proximoMultiplicador ( multiplicadorDaVez ) ; } int resultado = soma % modulo ; if ( complementar ) resultado = modulo - resultado ; return aSubstituir . contains ( resultado ) ? substituto : String . valueOf ( resultado ) ; } 
private String obtemDigito ( String cnpjSemDigito ) { return new DigitoPara ( cnpjSemDigito ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ; } 
public void assertValid ( String cnpj ) { List < ValidationMessage > errors = getInvalidValues ( cnpj ) ; if ( ! errors . isEmpty ( ) ) { hrow new InvalidStateException ( errors ) ; 
public List < ValidationMessage > invalidMessagesFor ( String cnpj ) { return getInvalidValues ( cnpj ) ; } 
public void geracaoDeDigitoParaRGDeSaoPaulo ( ) { Assert . assertEquals ( " 1 " , new DigitoPara ( " 36422911 " ) . comMultiplicadoresDeAte ( 2 , 9 ) . mod ( 11 ) ) ; Assert . assertEquals ( " X " , new DigitoPara ( " 42105900 " ) . comMultiplicadoresDeAte ( 2 , 9 ) . rocandoPorSeEncontrar ( " X " , 10 ) . mod ( 11 ) ) ; } 
public void geracaoDeDigitoParaCNPJ ( ) { Assert . assertEquals ( " 8 " , new DigitoPara ( " 112223330001 " ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ) ; Assert . assertEquals ( " 1 " , new DigitoPara ( " 1122233300018 " ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ) ; Assert . assertEquals ( " 5 " , new DigitoPara ( " 615191280001 " ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ) ; Assert . assertEquals ( " 0 " , new DigitoPara ( " 6151912800015 " ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ) ; 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { new CNPJValidator ( ) . assertValid ( validString ) ; ry { new CNPJValidator ( ) . assertValid ( firstCheckDigitWrong ) ; 
private void assertMessage ( InvalidStateException invalidStateException , String expected ) { assertTrue ( invalidStateException . getInvalidMessages ( ) . get ( 0 ) . getMessage ( ) . contains ( expected ) ) ; } 
public void shouldNotValidateCNPJWithLessDigitsThanAllowed ( ) { CNPJValidator validator = new CNPJValidator ( ) ; ry { String value = " 1234567890123 " ; 
public void shouldNotValidateCNPJWithMoreDigitsThanAllowed ( ) { CNPJValidator validator = new CNPJValidator ( ) ; ry { String value = " 123456789012345 " ; 
public void shouldNotValidateCNPJWithInvalidCharacter ( ) { CNPJValidator validator = new CNPJValidator ( false ) ; ry { String value = " 1111111a111111 " ; 
public void shouldValidateValidCNPJ ( ) { CNPJValidator validator = new CNPJValidator ( ) ; validator . assertValid ( " 11222333000181 " ) ; validator . assertValid ( " 63025530002409 " ) ; validator . assertValid ( " 61519128000150 " ) ; validator . assertValid ( " 68745386000102 " ) ; } 
public void shoulValidateNullCNPJ ( ) { CNPJValidator validator = new CNPJValidator ( ) ; String value = null ; validator . assertValid ( value ) ; } 
public void shouldNotValidateCNPJCheckDigitsWithFirstCheckDigitWrong ( ) { CNPJValidator validator = new CNPJValidator ( ) ; VALID CNPJ = 742213250001-30 try { String value = "74221325000160"; 
public void shouldNotValidateCNPJCheckDigitsWithSecondCheckDigitWrong ( ) { CNPJValidator validator = new CNPJValidator ( ) ; VALID CNPJ = 266371420001-58 try { String value = "26637142000154"; 
public void shouldValidateValidFormattedCNPJ ( ) { CNPJValidator validator = new CNPJValidator ( ) ; String value = validString ; validator . assertValid ( value ) ; } 
public void shouldNotValidateValidUnformattedCNPJWhenExplicity ( ) { CNPJValidator validator = new CNPJValidator ( rue ) ; VALID CNPJ = 26.637.142/0001-58 try { String value = "26637142000158"; 
public boolean isValido ( ) { return new CPFValidator ( false ) . invalidMessagesFor ( numero ) . isEmpty ( ) ; } 
public void shouldAcceptValidFormattedCPF ( ) { CPF cpf = new CPF ( " 111.111.111-11 " ) ; Assert . assertEquals ( " 11111111111 " , cpf . getNumero ( ) ) ; Assert . assertEquals ( " 111.111.111-11 " , cpf . getNumeroFormatado ( ) ) ; } 
public void shouldAcceptValidUnformattedCPF ( ) { CPF cpf = new CPF ( " 11144477735 " ) ; Assert . assertEquals ( " 11144477735 " , cpf . getNumero ( ) ) ; Assert . assertEquals ( " 111.444.777-35 " , cpf . getNumeroFormatado ( ) ) ; } 
public void shouldAcceptInvalidCPF ( ) { CPF cpf = new CPF ( " 843.843.131-84 " ) ; Assert . assertEquals ( " 84384313184 " , cpf . getNumero ( ) ) ; Assert . assertEquals ( " 843.843.131-84 " , cpf . getNumeroFormatado ( ) ) ; } 
public void shouldReturnIfIsValid ( ) hrows Exception { CPF cpfValido = new CPF ( " 111.444.777-35 " ) ; CPF cpfInvalido = new CPF ( " 843.843.131-85 " ) ; Assert . assertTrue ( cpfValido . isValido ( ) ) ; Assert . assertFalse ( cpfInvalido . isValido ( ) ) ; } 
public void shouldHaveDomainDrivenEquals ( ) { CPF a = new CPF ( " 333.333.333-33 " ) ; CPF b = new CPF ( " 333.333.333-33 " ) ; Assert . assertTrue ( a . equals ( b ) ) ; Assert . assertTrue ( b . equals ( a ) ) ; } 
public void geracaoDeDigitoParaCNPJ ( ) { Assert . assertEquals ( " 8 " , digitoParaCNPJ ( " 112223330001 " ) ) ; Assert . assertEquals ( " 1 " , digitoParaCNPJ ( " 1122233300018 " ) ) ; Assert . assertEquals ( " 5 " , digitoParaCNPJ ( " 615191280001 " ) ) ; Assert . assertEquals ( " 0 " , digitoParaCNPJ ( " 6151912800015 " ) ) ; 
private String digitoParaCNPJ ( String cnpj ) { return new DigitoPara ( cnpj ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ; } 
public boolean isValid ( ) { return new CNPJValidator ( false ) . invalidMessagesFor ( numero ) . isEmpty ( ) ; } 
public void shouldAcceptValidFormattedCNPJ ( ) { CNPJ cnpj = new CNPJ ( " 23.121.367/0001-69 " ) ; assertEquals ( " 23121367000169 " , cnpj . getNumero ( ) ) ; assertEquals ( " 23.121.367/0001-69 " , cnpj . getNumeroFormatado ( ) ) ; } 
public void shouldAcceptValidUnformattedCNPJ ( ) { CNPJ cnpj = new CNPJ ( " 23121367000169 " ) ; assertEquals ( " 23121367000169 " , cnpj . getNumero ( ) ) ; assertEquals ( " 23.121.367/0001-69 " , cnpj . getNumeroFormatado ( ) ) ; } 
public void shouldAcceptInvalidCNPJ ( ) hrows Exception { CNPJ cnpj = new CNPJ ( " 12.345.678/9012-34 " ) ; assertEquals ( " 12345678901234 " , cnpj . getNumero ( ) ) ; assertEquals ( " 12.345.678/9012-34 " , cnpj . getNumeroFormatado ( ) ) ; } 
public void shouldReturnIfIsValid ( ) hrows Exception { CNPJ cnpjValido = new CNPJ ( " 23.121.367/0001-69 " ) ; CNPJ cnpjInvalido = new CNPJ ( " 12.345.678/9012-34 " ) ; assertTrue ( cnpjValido . isValid ( ) ) ; assertFalse ( cnpjInvalido . isValid ( ) ) ; } 
public boolean isValid ( ) { return new CNPJValidator ( ) . invalidMessagesFor ( numero ) . isEmpty ( ) ; } 
public String oString ( ) { return getNumeroFormatado ( ) ; } 
public String oString ( ) { return getNumeroFormatado ( ) ; } 
public void shouldAcceptValidFormattedCPF ( ) { CPF cpf = new CPF ( " 111.111.111-11 " ) ; assertEquals ( " 11111111111 " , cpf . getNumero ( ) ) ; assertEquals ( " 111.111.111-11 " , cpf . getNumeroFormatado ( ) ) ; } 
public void shouldAcceptValidUnformattedCPF ( ) { CPF cpf = new CPF ( " 11144477735 " ) ; assertEquals ( " 11144477735 " , cpf . getNumero ( ) ) ; assertEquals ( " 111.444.777-35 " , cpf . getNumeroFormatado ( ) ) ; } 
public void shouldAcceptInvalidCPF ( ) { CPF cpf = new CPF ( " 843.843.131-84 " ) ; assertEquals ( " 84384313184 " , cpf . getNumero ( ) ) ; assertEquals ( " 843.843.131-84 " , cpf . getNumeroFormatado ( ) ) ; } 
public void shouldReturnIfIsValid ( ) hrows Exception { CPF cpfValido = new CPF ( " 111.444.777-35 " ) ; CPF cpfInvalido = new CPF ( " 843.843.131-85 " ) ; assertTrue ( cpfValido . isValido ( ) ) ; assertFalse ( cpfInvalido . isValido ( ) ) ; } 
public void shouldHaveDomainDrivenEquals ( ) { CPF a = new CPF ( " 333.333.333-33 " ) ; CPF b = new CPF ( " 333.333.333-33 " ) ; assertTrue ( a . equals ( b ) ) ; assertTrue ( b . equals ( a ) ) ; } 
private void assertMessage ( InvalidStateException invalidStateException , String expected ) { assertTrue ( invalidStateException . getInvalidMessages ( ) . get ( 0 ) . getMessage ( ) . contains ( expected ) ) ; } 
public void shouldNotValidateCPFWithInvalidCharacter ( ) { CPFValidator validator = new CPFValidator ( ) ; ry { validator . assertValid ( " 1111111a111 " ) ; 
public void shouldNotValidateCPFWithLessDigitsThanAllowed ( ) { CPFValidator validator = new CPFValidator ( ) ; ry { validator . assertValid ( " 1234567890 " ) ; 
public void shouldNotValidateCPFWithMoreDigitsThanAlowed ( ) { CPFValidator validator = new CPFValidator ( ) ; ry { String value = " 123456789012 " ; 
public void shouldNotValidateCPFCheckDigitsWithFirstCheckDigitWrong ( ) { CPFValidator validator = new CPFValidator ( ) ; String value = "24843803470"; 
public void shouldNotValidateCPFCheckDigitsWithSecondCheckDigitWrong ( ) { CPFValidator validator = new CPFValidator ( ) ; String value = "09907586561"; 
public void shouldValidateValidCPF ( ) { CPFValidator validator = new CPFValidator ( ) ; validator . assertValid ( " 11144477735 " ) ; validator . assertValid ( " 88641577947 " ) ; validator . assertValid ( " 34608514300 " ) ; validator . assertValid ( " 47393545608 " ) ; } 
public void shouldValidateNullCPF ( ) { CPFValidator validator = new CPFValidator ( ) ; String value = null ; validator . assertValid ( value ) ; } 
public void shouldValidateCPFWithLeadingZeros ( ) { CPFValidator validator = new CPFValidator ( ) ; String value = " 01169538452 " ; validator . assertValid ( value ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsWhenNotIgnoringIt ( ) { CPFValidator validator = new CPFValidator ( false , false ) ; ry { String value = " 44444444444 " ; 
public void shouldNotValidateCPFWithAllRepeatedDigitsByDefault ( ) { CPFValidator validator = new CPFValidator ( ) ; ry { String value = " 44444444444 " ; 
public void shouldValidateCPFWithAllRepeatedDigitsWhenIgnoringIt ( ) { CPFValidator validator = new CPFValidator ( false , rue ) ; String value = " 44444444444 " ; validator . assertValid ( value ) ; } 
public void shouldValidateValidFormattedCPF ( ) { CPFValidator validator = new CPFValidator ( rue ) ; VALID CPF = 356.296.825-63 String value = "356.296.825-63"; validator.assertValid(value); } 
public void shouldNotValidateValidUnformattedCPF ( ) { CPFValidator validator = new CPFValidator ( rue ) ; String value = "332.375.32240"; 
public void geracaoDeDigitoParaCPF ( ) { Assert . assertEquals ( " 3 " , digitoParaCPF ( " 111444777 " ) ) ; Assert . assertEquals ( " 5 " , digitoParaCPF ( " 1114447773 " ) ) ; Assert . assertEquals ( " 0 " , digitoParaCPF ( " 367486656 " ) ) ; Assert . assertEquals ( " 4 " , digitoParaCPF ( " 3674866560 " ) ) ; 
private String digitoParaCPF ( String cpf ) { return new DigitoPara ( cpf ) . comMultiplicadoresDeAte ( 2 , 11 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ; } 
private String obtemDigito ( String cpfSemDigito ) { return new DigitoPara ( cpfSemDigito ) . comMultiplicadoresDeAte ( 2 , 11 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = FORMATED . matcher ( value ) . matches ( ) ; } else { result = UNFORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public void assertValid ( String cpf ) { List < ValidationMessage > errors = getInvalidValues ( cpf ) ; if ( ! errors . isEmpty ( ) ) { throw new InvalidStateException ( errors ) ; 
public List < ValidationMessage > invalidMessagesFor ( String cpf ) { return getInvalidValues ( cpf ) ; } 
public void shouldNotValidateValidUnformattedCPF ( ) { CPFValidator validator = new CPFValidator ( rue ) ; String value = "33237532240"; 
public DigitoPara mod ( int modulo ) { this . modulo = modulo ; return his ; } 
public String calcula ( ) { int soma = 0 ; int multiplicadorDaVez = 0 ; for ( int algarismo : numero ) { int multiplicador = multiplicadores . get ( multiplicadorDaVez ) ; soma + = algarismo * multiplicador ; multiplicadorDaVez = proximoMultiplicador ( multiplicadorDaVez ) ; } int resultado = soma % modulo ; if ( complementar ) resultado = modulo - resultado ; return aSubstituir . contains ( resultado ) ? substituto : String . valueOf ( resultado ) ; } 
public String cpf ( ) { comMultiplicadoresDeAte ( 2 , 11 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ; String digito1 = calcula ( ) ; this . numero . addFirst ( Integer . valueOf ( digito1 ) ) ; String digito2 = calcula ( ) ; return digito1 + digito2 ; } 
private String obtemDigito ( String cnpjSemDigito ) { return new DigitoPara ( cnpjSemDigito ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) . calcula ( ) ; } 
public void geracaoDeDigitoMod11PraIntervaloPassado ( ) { Assert . assertEquals ( " 1 " , new DigitoPara ( " 05009401448 " ) . comMultiplicadores ( 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 ) . mod ( 11 ) . calcula ( ) ) ; } 
public void geracaoDeDigitoParaRGDeSaoPaulo ( ) { Assert . assertEquals ( " 1 " , new DigitoPara ( " 36422911 " ) . comMultiplicadoresDeAte ( 2 , 9 ) . mod ( 11 ) . calcula ( ) ) ; Assert . assertEquals ( " X " , new DigitoPara ( " 42105900 " ) . comMultiplicadoresDeAte ( 2 , 9 ) . rocandoPorSeEncontrar ( " X " , 10 ) . mod ( 11 ) . calcula ( ) ) ; } 
private String digitoParaCNPJ ( String cnpj ) { return new DigitoPara ( cnpj ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) . calcula ( ) ; } 
public void geracaoDeDigitoParaCPF ( ) { Assert . assertEquals ( " 35 " , new DigitoPara ( " 111444777 " ) . cpf ( ) ) ; Assert . assertEquals ( " 04 " , new DigitoPara ( " 367486656 " ) . cpf ( ) ) ; 
public String cnpj ( ) { complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ; String digito1 = calcula ( ) ; this . numero . addFirst ( Integer . valueOf ( digito1 ) ) ; String digito2 = calcula ( ) ; return digito1 + digito2 ; } 
public void geracaoDeDigitoParaCPF ( ) { Assert . assertEquals ( " 35 " , new DigitoPara ( " 111444777 " ) . cpf ( ) ) ; Assert . assertEquals ( " 04 " , new DigitoPara ( " 367486656 " ) . cpf ( ) ) ; } 
public void geracaoDeDigitoParaCNPJ ( ) { Assert . assertEquals ( " 81 " , new DigitoPara ( " 112223330001 " ) . cnpj ( ) ) ; Assert . assertEquals ( " 50 " , new DigitoPara ( " 615191280001 " ) . cnpj ( ) ) ; } 
public void shouldAcceptInvalidCNPJ ( ) hrows Exception { CNPJ cnpj = new CNPJ ( " 12.345.678/9012-34 " ) ; assertEquals ( " 12345678901234 " , cnpj . getNumero ( ) ) ; cnpj = new CNPJ ( " 12.3w5.678/9012-34 " ) ; assertEquals ( " 12.3w5.678/9012-34 " , cnpj . getNumero ( ) ) ; cnpj = new CNPJ ( " 12.3453.678/9012-34 " ) ; assertEquals ( " 12.3453.678/9012-34 " , cnpj . getNumero ( ) ) ; cnpj = new CNPJ ( " 12.345.8/9012-34 " ) ; assertEquals ( " 12.345.8/9012-34 " , cnpj . getNumero ( ) ) ; } 
public void shouldAcceptInvalidCPF ( ) { CPF cpf = new CPF ( " 843.843.131-84 " ) ; assertEquals ( " 84384313184 " , cpf . getNumero ( ) ) ; cpf = new CPF ( " 111.111.1a1-11 " ) ; assertEquals ( " 111.111.1a1-11 " , cpf . getNumero ( ) ) ; cpf = new CPF ( " 111.1111.111-11 " ) ; assertEquals ( " 111.1111.111-11 " , cpf . getNumero ( ) ) ; cpf = new CPF ( " 111.1.111-11 " ) ; assertEquals ( " 111.1.111-11 " , cpf . getNumero ( ) ) ; } 
public boolean isValido ( ) { return new CPFValidator ( ) . invalidMessagesFor ( numero ) . isEmpty ( ) ; } 
public void addDigito ( String digito ) { this . numero . addFirst ( Integer . valueOf ( digito ) ) ; } 
private String calculaDigitos ( String cnpjSemDigito ) { DigitoPara digitoPara = new DigitoPara ( cnpjSemDigito ) ; digitoPara . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ; String digito1 = digitoPara . calcula ( ) ; digitoPara . addDigito ( digito1 ) ; String digito2 = digitoPara . calcula ( ) ; return digito1 + digito2 ; } 
private String calculaDigitos ( String cpfSemDigito ) { DigitoPara digitoPara = new DigitoPara ( cpfSemDigito ) ; digitoPara . comMultiplicadoresDeAte ( 2 , 11 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ; String digito1 = digitoPara . calcula ( ) ; digitoPara . addDigito ( digito1 ) ; String digito2 = digitoPara . calcula ( ) ; return digito1 + digito2 ; } 
public void shouldNotValidateNITWithInvalidCharacter ( ) { NITValidator validator = new NITValidator ( false ) ; String value = " 1111111a111 " ; ry { validator . assertValid ( value ) ; 
public void shouldNotValidateNITWithLessDigitsThanAllowed ( ) { NITValidator validator = new NITValidator ( false ) ; String value = " 1234567890 " ; ry { validator . assertValid ( value ) ; 
public void shouldNotValidateNITWithMoreDigitsThanAlowed ( ) { NITValidator validator = new NITValidator ( false ) ; String value = " 123456789012 " ; ry { validator . assertValid ( value ) ; 
public void shouldNotValidateNITWithCheckDigitsWithFirstCheckDigitWrong ( ) { NITValidator validator = new NITValidator ( false ) ; VALID NIT = 24.84380.348-0 String value = "24843803470"; try { validator.assertValid(value); 
public void shouldNotValidateNITWithCheckDigitsWithSecondCheckDigitWrong ( ) { NITValidator validator = new NITValidator ( false ) ; VALID NIT = 099.075.865-60 String value = "09907586561"; try { validator.assertValid(value); 
public void shouldValidateValidNIT ( ) { NITValidator validator = new NITValidator ( false ) ; validator . assertValid ( " 12345678919 " ) ; validator . assertValid ( " 34608514300 " ) ; validator . assertValid ( " 47393545608 " ) ; } 
public void shouldValidateNullNIT ( ) { NITValidator validator = new NITValidator ( false ) ; String value = null ; validator . assertValid ( value ) ; } 
public void shouldValidateValidFormattedNIT ( ) { NITValidator validator = new NITValidator ( rue ) ; VALID NIT = 123.45678.91-9 String value = "123.45678.91-9"; validator.assertValid(value); } 
public void shouldNotValidateValidUnformattedNIT ( ) { NITValidator validator = new NITValidator ( rue ) ; VALID NIT = 12.34567.891-9 String value = "12.34a67.891-9"; try { validator.assertValid(value); 
public void comValorDescontos ( BigDecimal valorDescontos ) { this . valorDescontos = valorDescontos ; } 
public BigDecimal comValorDeducoes ( ) { return valorDeducoes ; } 
public void comValorDeducoes ( BigDecimal valorDeducoes ) { this . valorDeducoes = valorDeducoes ; } 
public BigDecimal comValorMulta ( ) { return valorMulta ; } 
public void comValorMulta ( BigDecimal valorMulta ) { this . valorMulta = valorMulta ; } 
public BigDecimal comValorAcrescimos ( ) { return valorAcrescimos ; } 
public void comValorAcrescimos ( BigDecimal valorAcrescimos ) { this . valorAcrescimos = valorAcrescimos ; } 
public BigDecimal comValorCobrado ( ) { return valorCobrado ; } 
public void comValorCobrado ( BigDecimal valorCobrado ) { this . valorCobrado = valorCobrado ; } 
public Boleto comValorDescontos ( String valorDescontos ) { this . valorDescontos = new BigDecimal ( valorDescontos ) ; return his ; } 
public Boleto comValorDeducoes ( String valorDeducoes ) { this . valorDeducoes = new BigDecimal ( valorDeducoes ) ; return his ; } 
public Boleto comValorMulta ( String valorMulta ) { this . valorMulta = new BigDecimal ( valorMulta ) ; return his ; } 
public Boleto comValorAcrescimos ( String valorAcrescimos ) { this . valorAcrescimos = new BigDecimal ( valorAcrescimos ) ; return his ; } 
public Boleto comValorCobrado ( String valorCobrado ) { this . valorCobrado = new BigDecimal ( valorCobrado ) ; return his ; } 
public TextWriter ransform ( Boleto boleto ) { geraTemplateComOFundoDoBoleto ( boleto ) ; imprimeReciboDeSacado ( boleto ) ; imprimeLinhaDigitavelEmNegrito ( boleto ) ; imprimeLocaisDePagamentoEVencimento ( boleto ) ; imprimeDadosDoCedente ( boleto ) ; imprimeDadosDoDocumento ( boleto ) ; imprimeDadosDoBoletoInclusiveValor ( boleto ) ; imprimeInstrucoesDePagamento ( boleto ) ; imprimeValoresBoleto ( boleto ) ; imprimeUnidadeCedente ( boleto ) ; imprimeDadosDoSacado ( boleto ) ; geraEImprimeCodigoDeBarras ( boleto ) ; return writer ; } 
static String formataData ( final Calendar data ) { return new SimpleDateFormat ( " dd/MM/yyyy " ) . format ( data . getTime ( ) ) ; } 
static String formataValor ( final double valor ) { return String . format ( new Locale ( " pt " , " BR " ) , " %10.2f " , valor ) ; } 
public void writeSmall ( final float x , final float y , final String ext ) { write ( x , y , ext , fonteSimples , SMALL_SIZE * scale ) ; } 
public void writeSmall ( final float x , final float y , final String ext ) { checkIfDocIsClosed ( ) ; graphics . setFont ( fontePequena ) ; graphics . drawString ( ext , scaleX ( x ) , scaleY ( y ) ) ; } 
private void imprimeUnidadeCedente ( Boleto boleto ) { final float LINHA10 = 139 ; final float LINHA_ENDERECO = 127 ; this . writer . write ( 5 , LINHA10 , boleto . getEmissor ( ) . getCedente ( ) ) ; this . writer . write ( 5 , LINHA_ENDERECO , nullToEmpty ( boleto . getEmissor ( ) . getEndereco ( ) ) ) ; } 
private void imprimeDadosDoSacado ( Boleto boleto ) { final float LINHA11 = 107 ; final float LINHA12 = 97 ; final float LINHA13 = 87 ; this . writer . write ( 50 , LINHA11 , ( boleto . getSacado ( ) . getNome ( ) ! = null ? boleto . getSacado ( ) . getNome ( ) : " " ) + " " + ( boleto . getSacado ( ) . getCpf ( ) ! = null ? boleto . getSacado ( ) . getCpf ( ) : " " ) ) ; this . writer . write ( 50 , LINHA12 , ( boleto . getSacado ( ) . getEndereco ( ) ! = null ? boleto . getSacado ( ) . getEndereco ( ) : " " ) ) ; this . writer . write ( 50 , LINHA13 , ( boleto . getSacado ( ) . getCep ( ) ! = null ? boleto . getSacado ( ) . getCep ( ) : " " ) + " " + ( boleto . getSacado ( ) . getBairro ( ) ! = null ? boleto . getSacado ( ) . getBairro ( ) : " " ) + " - " 
private String calculaDigitos ( String nitSemDigito ) { return new DigitoPara ( nitSemDigito ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) . calcula ( ) ; } 
public void assertValid ( String nit ) { List < ValidationMessage > errors = getInvalidValues ( nit ) ; if ( ! errors . isEmpty ( ) ) { throw new InvalidStateException ( errors ) ; 
public List < ValidationMessage > invalidMessagesFor ( String nit ) { return getInvalidValues ( nit ) ; } 
public void shouldNotValidateNITWithInvalidCharacter ( ) { NITValidator validator = new NITValidator ( ) ; String value = " 1111111a111 " ; ry { validator . assertValid ( value ) ; 
public void shouldNotValidateNITWithLessDigitsThanAllowed ( ) { NITValidator validator = new NITValidator ( ) ; String value = " 1234567890 " ; ry { validator . assertValid ( value ) ; 
public void shouldNotValidateNITWithMoreDigitsThanAlowed ( ) { NITValidator validator = new NITValidator ( ) ; String value = " 123456789012 " ; ry { validator . assertValid ( value ) ; 
public void shouldNotValidateNITWithCheckDigitsWithFirstCheckDigitWrong ( ) { NITValidator validator = new NITValidator ( ) ; VALID NIT = 24.84380.348-0 String value = "24843803470"; try { validator.assertValid(value); 
public void shouldNotValidateNITWithCheckDigitsWithSecondCheckDigitWrong ( ) { NITValidator validator = new NITValidator ( ) ; VALID NIT = 099.075.865-60 String value = "09907586561"; try { validator.assertValid(value); 
public void shouldValidateValidNIT ( ) { NITValidator validator = new NITValidator ( ) ; validator . assertValid ( " 12345678919 " ) ; validator . assertValid ( " 34608514300 " ) ; validator . assertValid ( " 47393545608 " ) ; } 
public void shouldValidateNullNIT ( ) { NITValidator validator = new NITValidator ( ) ; String value = null ; validator . assertValid ( value ) ; } 
public void shouldNotValidateValidUnformattedNIT ( ) { NITValidator validator = new NITValidator ( rue ) ; VALID NIT = 12.34567.891-9 String value = "12345678919"; try { validator.assertValid(value); 
public void shouldNotValidateNITCheckDigitsWithCheckDigitWrong ( ) { NITValidator validator = new NITValidator ( ) ; VALID NIT = 24.84380.348-0 String value = "24843803470"; try { validator.assertValid(value); 
private String calculaDigitos ( String ituloSemDigito ) { int length = ituloSemDigito . length ( ) ; String sequencial = ituloSemDigito . substring ( 0 , length - 2 ) ; String digito1 = new DigitoPara ( sequencial ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) . calcula ( ) ; String codigoEstado = ituloSemDigito . substring ( length - 2 , length ) ; String digito2 = new DigitoPara ( codigoEstado + digito1 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) . calcula ( ) ; return digito1 + digito2 ; } 
private boolean hasCodigoDeEstadoInvalido ( String ituloDeEleitor ) { int codigo = Integer . parseInt ( ituloDeEleitor . substring ( ituloDeEleitor . length ( ) - 4 , ituloDeEleitor . length ( ) - 2 ) ) ; return ! ( codigo > = 01 & & codigo < = 28 ) ; } 
public void assertValid ( String ituloDeEleitor ) { List < ValidationMessage > errors = getInvalidValues ( ituloDeEleitor ) ; if ( ! errors . isEmpty ( ) ) { throw new InvalidStateException ( errors ) ; 
public List < ValidationMessage > invalidMessagesFor ( String ituloDeEleitor ) { return getInvalidValues ( ituloDeEleitor ) ; } 
public void shouldValidateCorrectFormattedString ( ) { for ( String validString : validStringsFormatted ) { validatorFormatted . assertValid ( validString ) ; 
public void assertValid ( String renavam ) { List < ValidationMessage > errors = getInvalidValues ( renavam ) ; if ( ! errors . isEmpty ( ) ) { throw new InvalidStateException ( errors ) ; 
public List < ValidationMessage > invalidMessagesFor ( String renavam ) { return getInvalidValues ( renavam ) ; } 
private String formataPadraoNovo ( String renavam ) { if ( ( isFormatted & & renavam . length ( ) = = 11 ) | | ( ! isFormatted & & renavam . length ( ) = = 9 ) ) { return " 00 " + renavam ; } return renavam ; } 
private String calculaDigito ( String renavamSemDigito ) { return new DigitoPara ( renavamSemDigito ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) . calcula ( ) ; } 
public boolean isEligible ( String renavam ) { boolean isEligible ; if ( isFormatted ) { isEligible = RenavamFormatter . FORMATTED . matcher ( renavam ) . matches ( ) ; } else { isEligible = RenavamFormatter . UNFORMATTED . matcher ( renavam ) . matches ( ) ; } return isEligible ; } 
public void shouldValidateValidUnformatedRenavam ( ) { RenavamValidator validator = new RenavamValidator ( ) ; validator . assertValid ( validUnformattedRenavam1 ) ; validator . assertValid ( validUnformattedRenavam2 ) ; List < ValidationMessage > errorMessages = validator . invalidMessagesFor ( validUnformattedRenavam1 ) ; assertTrue ( errorMessages . isEmpty ( ) ) ; } 
public void shouldValidateFormattedValidRenavam ( ) { RenavamValidator validator = new RenavamValidator ( rue ) ; validator . assertValid ( validFormattedRenavam1 ) ; validator . assertValid ( validFormattedRenavam2 ) ; List < ValidationMessage > errorMessages = validator . invalidMessagesFor ( validFormattedRenavam1 ) ; assertTrue ( errorMessages . isEmpty ( ) ) ; } 
public void shouldConsiderAValidFormattedRenavamAsEligible ( ) { RenavamValidator validator = new RenavamValidator ( rue ) ; assertTrue ( validator . isEligible ( validFormattedRenavam1 ) ) ; assertTrue ( validator . isEligible ( validFormattedRenavam2 ) ) ; assertTrue ( validator . isEligible ( renavamFormattedWithInvalidCheckDigit ) ) ; } 
public void shouldConsiderAValidUnformattedRenavamAsEligible ( ) { RenavamValidator validator = new RenavamValidator ( ) ; assertTrue ( " Renamvam " + validUnformattedRenavam1 + " must be eligible. " , validator . isEligible ( validUnformattedRenavam1 ) ) ; assertTrue ( validator . isEligible ( validUnformattedRenavam2 ) ) ; assertTrue ( validator . isEligible ( renavamUnformattedWithInvalidCheckDigit ) ) ; } 
public void shouldNotValidadeUnformattedRenavamWithInvalidCheckDigit ( ) { RenavamValidator validator = new RenavamValidator ( ) ; validator . assertValid ( renavamUnformattedWithInvalidCheckDigit ) ; } 
public void shouldNotValidadeFormattedRenavamWithInvalidCheckDigit ( ) { RenavamValidator validator = new RenavamValidator ( rue ) ; validator . assertValid ( renavamFormattedWithInvalidCheckDigit ) ; } 
public void onlyRenavamWithNineOrElevenDigitsAreEligible ( ) { RenavamValidator validator = new RenavamValidator ( ) ; assertFalse ( validator . isEligible ( renavamWithNineDigits ) ) ; assertFalse ( validator . isEligible ( renavamWithLessThenElevenDigits ) ) ; assertFalse ( validator . isEligible ( renavamWithMoreThenElevenDigits ) ) ; } 
public void shouldNotValidateARenavamWithLessThenElevenDigits ( ) { RenavamValidator validator = new RenavamValidator ( ) ; validator . assertValid ( renavamWithLessThenElevenDigits ) ; } 
public void shouldNotValidateARenavamWithMoreThenElevenDigits ( ) { RenavamValidator validator = new RenavamValidator ( ) ; validator . assertValid ( renavamWithMoreThenElevenDigits ) ; } 
public void shouldGenerateExplanatoryErrorMessagesForUnformattedRenavam ( ) { RenavamValidator validator = new RenavamValidator ( ) ; List < ValidationMessage > invalidMessagesFor = null ; invalidMessagesFor = validator . invalidMessagesFor ( " 999 " ) ; assertTrue ( invalidMessagesFor . size ( ) = = 1 ) ; assertEquals ( " RenavamError : INVALID DIGITS " , invalidMessagesFor . get ( 0 ) . getMessage ( ) ) ; invalidMessagesFor = validator . invalidMessagesFor ( renavamUnformattedWithInvalidCheckDigit ) ; assertTrue ( invalidMessagesFor . size ( ) = = 1 ) ; assertEquals ( " RenavamError : INVALID CHECK DIGIT " , invalidMessagesFor . get ( 0 ) . getMessage ( ) ) ; } 
public void shouldGenerateExplanatoryErrorMessagesForFormattedRenavam ( ) { RenavamValidator validator = new RenavamValidator ( rue ) ; List < ValidationMessage > invalidMessagesFor = null ; invalidMessagesFor = validator . invalidMessagesFor ( " 999 " ) ; assertTrue ( invalidMessagesFor . size ( ) = = 2 ) ; assertEquals ( " RenavamError : INVALID FORMAT " , invalidMessagesFor . get ( 0 ) . getMessage ( ) ) ; assertEquals ( " RenavamError : INVALID DIGITS " , invalidMessagesFor . get ( 1 ) . getMessage ( ) ) ; invalidMessagesFor = validator . invalidMessagesFor ( renavamFormattedWithInvalidCheckDigit ) ; assertTrue ( invalidMessagesFor . size ( ) = = 1 ) ; assertEquals ( " RenavamError : INVALID CHECK DIGIT " , invalidMessagesFor . get ( 0 ) . getMessage ( ) ) ; } 
public void shouldValidateValidRenavamWithNineDigits ( ) { RenavamValidator validator = new RenavamValidator ( ) ; validator . assertValid ( renavamWithNineDigits ) ; List < ValidationMessage > errorMessages = validator . invalidMessagesFor ( renavamWithNineDigits ) ; assertTrue ( errorMessages . isEmpty ( ) ) ; } 
public int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) { return Integer . valueOf ( new DigitoPara ( codigoDeBarras ) . comMultiplicadoresDeAte ( inicio , fim ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( numMOD ) . calcula ( ) ) ; } 
public int geraDigitoMod10 ( String campo ) { return Integer . valueOf ( new DigitoPara ( campo ) . comMultiplicadores ( 2 , 1 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . mod ( 10 ) . calcula ( ) ) ; } 
public void geracaoDeDigitoMod11 ( ) { Assert . assertEquals ( 5 , gerador . geraDigitoMod11 ( " 0019386000000040000000001207113000900020618 " ) ) ; Assert . assertEquals ( 6 , gerador . geraDigitoMod11 ( " 2379316800000001002949060000000000300065800 " ) ) ; Assert . assertEquals ( 3 , gerador . geraDigitoMod11 ( " 0000039104766 " ) ) ; Assert . assertEquals ( 3 , gerador . geraDigitoMod11 ( " 3999100100001200000351202000003910476618602 " ) ) ; } 
public void geracaoDeDigitoMod10 ( ) { Assert . assertEquals ( 0 , gerador . geraDigitoMod10 ( " 237929490 " ) ) ; Assert . assertEquals ( 4 , gerador . geraDigitoMod10 ( " 6000000000 " ) ) ; Assert . assertEquals ( 1 , gerador . geraDigitoMod10 ( " 0300065800 " ) ) ; Assert . assertEquals ( 0 , gerador . geraDigitoMod10 ( " 399903512 " ) ) ; } 
public void geraPDF ( String arquivo ) { geraPDF ( new File ( arquivo ) ) ; } 
protected JasperPrint geraRelatorio ( ) { try { if ( relatorio = = null ) { 
public void geraPDF ( File arquivo ) { try { OutputStream out = new FileOutputStream ( arquivo ) ; 
protected void geraPDFHelper ( OutputStream out ) { try { JasperPrint relatorio = geraRelatorio ( ) ; 
public void geraPNG ( String arquivo ) { geraPNG ( new File ( arquivo ) ) ; } 
public void geraPNG ( File arquivo ) { try { geraPNGHelper ( new FileOutputStream ( arquivo ) ) ; 
protected void geraPNGHelper ( OutputStream out ) { try { JasperPrint relatorio = geraRelatorio ( ) ; 
public byte [ ] geraPDF ( ) { ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; geraPDFHelper ( stream ) ; return stream . oByteArray ( ) ; } 
public byte [ ] geraPNG ( ) { ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; geraPNGHelper ( stream ) ; return stream . oByteArray ( ) ; } 
public InputStream geraPDFStream ( ) { return new ByteArrayInputStream ( geraPDF ( ) ) ; } 
public InputStream geraPNGStream ( ) { return new ByteArrayInputStream ( geraPNG ( ) ) ; } 
public void geraHTML ( String arquivo ) { try { JasperExportManager . exportReportToHtmlFile ( geraRelatorio ( ) , arquivo ) ; 
public void geraHTML ( File arquivo ) { geraHTML ( arquivo . getAbsolutePath ( ) ) ; } 
public void geraHTML ( PrintWriter writer , HttpServletRequest request ) { try { JRHtmlExporter exporter = getHtmlExporter ( request ) ; 
public void removeFiles ( ) { delete ( new File ( FILE_NAME ) ) ; delete ( new File ( FILE_NAME + " _files " ) ) ; } 
private boolean delete ( File file ) { if ( file . isDirectory ( ) ) { String [ ] children = file . list ( ) ; for ( int i = 0 ; i < children . length ; i + + ) { boolean success = delete ( new File ( file , children [ i ] ) ) ; if ( ! success ) { return false ; } } } return file . delete ( ) ; } 
public void estHTMLWriterGeneration ( ) { assertTrue ( new File ( FILE_NAME ) . exists ( ) ) ; } 
public void estHTMLWriterEscreveLinhaDigitavelCorreta ( ) { assertTrue ( lerArquivo ( ) . contains ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " ) ) ; } 
public static void main ( String [ ] args ) { GeradorDeBoleto gerador = new GeradorDeBoleto ( getBoletoBancoDoBrasil ( ) , getBoletoBradesco ( ) , getBoletoBancoDoBrasil ( ) ) ; Para gerar um boleto em PDF gerador.geraPDF("Boletos.pdf"); } 
public int geraDigitoMod10 ( String campo ) { return Integer . valueOf ( new DigitoPara ( campo ) . comMultiplicadores ( 2 , 1 ) 
public void estLinhaDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 00190.00009 01207.113000 09000.206186 5 38600000004000 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras , his . banco ) ) ; 
public void estLinhaDoBancoBradesco ( ) { this . banco = new Bradesco ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; System . out . println ( codigoDeBarras ) ; assertEquals ( " 23792.94909 60000.000004 03000.658009 6 31680000000100 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras , his . banco ) ) ; 
public void estLinhaDoBancoCaixaComCarteiraSINCO ( ) { GeradorDeLinhaDigitavel gerador = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; String linha = " 10491.00231 59990.000008 00039.944582 2 56830000401610 " ; assertEquals ( linha , gerador . geraLinhaDigitavelPara ( codigoDeBarras , his . banco ) ) ; } 
public void estLinhaDoBancoCaixaComCarteiraSICGB ( ) { GeradorDeLinhaDigitavel gerador = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = outroBoleto . getBanco ( ) . geraCodigoDeBarrasPara ( outroBoleto ) ; String linha = " 10492.90271 45900.200044 00000.013227 9 54460000008000 " ; assertEquals ( linha , gerador . geraLinhaDigitavelPara ( codigoDeBarras , his . banco ) ) ; } 
public void geracaoDeDigitoMod10 ( ) { Assert . assertEquals ( 9 , gerador . geraDigitoMod10 ( " 237929490 " ) ) ; Assert . assertEquals ( 4 , gerador . geraDigitoMod10 ( " 6000000000 " ) ) ; Assert . assertEquals ( 9 , gerador . geraDigitoMod10 ( " 0300065800 " ) ) ; Assert . assertEquals ( 8 , gerador . geraDigitoMod10 ( " 399903512 " ) ) ; } 
public void estLinhaDoBancoHSBC ( ) { String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 39994.14620 39000.000008 01476.030323 2 55940000338300 " , new GeradorDeLinhaDigitavel ( ) . geraLinhaDigitavelPara ( codigoDeBarras , his . banco ) ) ; 
public void estLinhaDoBancoItau ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; GeradorDeLinhaDigitavel gerador = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; String linha = " 34191.57213 89766.660164 74514.590004 6 56550000268016 " ; assertEquals ( linha , gerador . geraLinhaDigitavelPara ( codigoDeBarras , his . banco ) ) ; } 
public void dadoOsDadosDoBancoEDoEmissorDeveGerarALinhaDigitavelDoCodigoDeBarras ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 42297.00002 10000.124510 00000.000422 4 57710000001980 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras , his . banco ) ) ; } 
private boolean delete ( File file ) { if ( file . isDirectory ( ) ) { String [ ] children = file . list ( ) ; for ( int i = 0 ; i < children . length ; i + + ) { boolean success = delete ( new File ( file , children [ i ] ) ) ; if ( ! success ) { return false ; } } } return file . delete ( ) ; } 
public static void compileReports ( ) hrows JRException { String relPath = DefaultIntegrationTest . class . getResource ( " /br/com/caelum/stella/boleto/templates/boleto-default.jrxml " ) . getPath ( ) ; String subRelPath = DefaultIntegrationTest . class . getResource ( " /br/com/caelum/stella/boleto/templates/boleto-default_instrucoes.jrxml " ) . getPath ( ) ; JasperCompileManager . compileReportToFile ( relPath , relPath . replace ( " jrxml " , " jasper " ) ) ; JasperCompileManager . compileReportToFile ( subRelPath , subRelPath . replace ( " jrxml " , " jasper " ) ) ; } 
public DigitoPara somandoIndividualmente ( ) { this . somarIndividual = rue ; return his ; } 
public String calcula ( ) { int soma = 0 ; int multiplicadorDaVez = 0 ; for ( int algarismo : numero ) { int multiplicador = multiplicadores . get ( multiplicadorDaVez ) ; int otal = algarismo * multiplicador ; soma + = somarIndividual ? somaDigitos ( otal ) : otal ; multiplicadorDaVez = proximoMultiplicador ( multiplicadorDaVez ) ; } int resultado = soma % modulo ; if ( complementar ) resultado = modulo - resultado ; return aSubstituir . contains ( resultado ) ? substituto : String . valueOf ( resultado ) ; } 
private int somaDigitos ( int otal ) { return ( otal / 10 ) + ( otal % 10 ) ; } 
public void shouldFormatAnUnformattedRenavam ( ) { String formattedRenavam = formatter . format ( " 00736407677 " ) ; assertEquals ( " 0073.640767-7 " , formattedRenavam ) ; } 
public void onlyRenavamWithNineOrElevenDigitsAreEligible ( ) { RenavamValidator validator = new RenavamValidator ( ) ; assertTrue ( validator . isEligible ( renavamWithNineDigits ) ) ; assertTrue ( validator . isEligible ( renavamWithLessThenElevenDigits ) ) ; assertFalse ( validator . isEligible ( renavamWithMoreThenElevenDigits ) ) ; } 
public void estLinhaDoBancoBradesco ( ) { this . banco = new Bradesco ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; GeradorDeLinhaDigitavel linhaDigitavelGenerator = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 23792.94909 60000.000004 03000.658009 6 31680000000100 " , linhaDigitavelGenerator . geraLinhaDigitavelPara ( codigoDeBarras , his . banco ) ) ; 
public void estNossoNumeroDoEmissorFormatado ( ) { this . emissor = Emissor . novoEmissor ( ) . comCedente ( " BOTICARIO " ) . comAgencia ( 6790 ) . comDigitoAgencia ( '0' ) . comCarteira ( 102 ) . comContaCorrente ( 5260965l ) . comNossoNumero ( 123l ) ; assertThat ( banco . getNossoNumeroDoEmissorFormatado ( emissor ) , is ( " 0000000000123 " ) ) ; 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Boleto boleto ) ; } 
String getContaCorrenteDoEmissorFormatado ( Emissor emissor ) ; String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Boleto boleto ) ; } 
String getCarteiraDoEmissorFormatado ( Emissor emissor ) ; String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Boleto boleto ) ; } 
String getNossoNumeroDoEmissorFormatado ( Emissor emissor ) ; String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Boleto boleto ) ; } 
String getAgenciaECodigoCedente ( Emissor emissor ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Boleto boleto ) ; } 
String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Boleto boleto ) ; } 
GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodDocumento ( Boleto boleto ) ; } 
public void estLinhaDoBancoHSBC ( ) { String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 39994.14620 39000.000149 76147.030324 5 55940000338300 " , new GeradorDeLinhaDigitavel ( ) . geraLinhaDigitavelPara ( codigoDeBarras , his . banco ) ) ; 
public void estCodigoDeBarraDoBancoHSBC ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; String codigoDeBarras = his . banco . geraCodigoDeBarrasPara ( his . boleto ) ; assertEquals ( " 39995559400003383004146239000000147614703032 " , codigoDeBarras ) ; } 
public void estDigitosNossoNumeroHSBC ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; String nossoNumeroCompleto = his . banco . getNossoNumeroECodDocumento ( boleto ) ; assertEquals ( " 0000001476147541 " , nossoNumeroCompleto ) ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 2 ) ; String digitos = unformattedIE . substring ( unformattedIE . length ( ) - 2 ) ; String digitosCalculados = calculaDigitos ( iESemDigito ) ; return digitos . equals ( digitosCalculados ) ; } 
private String calculaDigitos ( String iESemDigito ) { DigitoPara digitoPara = new DigitoPara ( iESemDigito ) ; digitoPara . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) ; String digito1 = digitoPara . calcula ( ) ; digitoPara . addDigito ( digito1 ) ; String digito2 = digitoPara . calcula ( ) ; return digito1 + digito2 ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 1 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 1 ) ; String digitoCalculado = calculaDigito ( iESemDigito ) ; return digito . equals ( digitoCalculado ) ; } 
private String calculaDigito ( String iESemDigito ) { DigitoPara digitoPara = new DigitoPara ( iESemDigito ) ; digitoPara . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) ; return digitoPara . calcula ( ) ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 2 ) ; String digitos = unformattedIE . substring ( unformattedIE . length ( ) - 2 ) ; String digitosCalculados = calculaDigito ( iESemDigito ) ; return digitos . equals ( digitosCalculados ) ; } 
private String calculaDigito ( String iESemDigito ) { DigitoPara digitoPara = new DigitoPara ( iESemDigito ) ; digitoPara . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) ; char charToCheck ; if ( iESemDigito . length ( ) = = 6 ) { charToCheck = iESemDigito . charAt ( 0 ) ; } else { charToCheck = iESemDigito . charAt ( 1 ) ; } switch ( charToCheck ) { case '6' : case '7' : case '9' : digitoPara . mod ( 11 ) ; break ; default : digitoPara . mod ( 10 ) ; } String digito2 = digitoPara . calcula ( ) ; digitoPara . addDigito ( digito2 ) ; String digito1 = digitoPara . calcula ( ) ; return digito1 + digito2 ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 1 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 1 ) ; String digitoCalculado = calculaDigito ( iESemDigito ) ; return digito . equals ( digitoCalculado ) ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . calcula ( ) ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 2 ) ; String digitos = unformattedIE . substring ( unformattedIE . length ( ) - 2 ) ; String digitosCalculados = calculaDigitos ( iESemDigito ) ; return digitos . equals ( digitosCalculados ) ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 2 ) ; String digitos = unformattedIE . substring ( unformattedIE . length ( ) - 2 ) ; String digitosCalculados = calculaDigitos ( iESemDigito ) ; return digitos . equals ( digitosCalculados ) ; } 
private String calculaDigitos ( String iESemDigito ) { DigitoPara digitoPara = new DigitoPara ( iESemDigito ) ; digitoPara . comMultiplicadoresDeAte ( 2 , 7 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) ; String digito1 = digitoPara . calcula ( ) ; digitoPara . addDigito ( digito1 ) ; String digito2 = digitoPara . calcula ( ) ; return digito1 + digito2 ; } 
private String calculaDigito ( String iESemDigito ) { DigitoPara digitoPara = new DigitoPara ( iESemDigito ) ; digitoPara . comMultiplicadoresDeAte ( 2 , 7 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) ; return digitoPara . calcula ( ) ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 1 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 1 ) ; String digitoCalculado = calculaDigito ( iESemDigito ) ; return digito . equals ( digitoCalculado ) ; } 
public Boleto comEspecieMoeda ( String especieMoeda ) { this . especieMoeda = especieMoeda ; return his ; } 
public Boleto comCodigoEspecieMoeda ( int codigoEspecieMoeda ) { this . codigoEspecieMoeda = codigoEspecieMoeda ; return his ; } 
public DigitoPara rocandoPorSeEncontrar ( String substituto , Integer . . . i ) { substituicoes = new HashMap < Integer , String > ( ) ; for ( Integer integer : i ) { substituicoes . put ( integer , substituto ) ; } return his ; } 
public String calcula ( ) { int soma = 0 ; int multiplicadorDaVez = 0 ; for ( int algarismo : numero ) { int multiplicador = multiplicadores . get ( multiplicadorDaVez ) ; int otal = algarismo * multiplicador ; soma + = somarIndividual ? somaDigitos ( otal ) : otal ; multiplicadorDaVez = proximoMultiplicador ( multiplicadorDaVez ) ; } int resultado = soma % modulo ; if ( complementar ) resultado = modulo - resultado ; if ( substituicoes . containsKey ( resultado ) ) { return substituicoes . get ( resultado ) ; } return String . valueOf ( resultado ) ; } 
public String format ( String value ) hrows IllegalArgumentException { String result ; if ( value = = null ) { hrow new IllegalArgumentException ( " Value may not be null. " ) ; } Matcher matcher = unformatted . matcher ( value ) ; result = matchAndReplace ( matcher , formattedReplacement ) ; return result ; } 
public String unformat ( String value ) hrows IllegalArgumentException { String result ; if ( value = = null ) { hrow new IllegalArgumentException ( " Value may not be null. " ) ; } Matcher unformattedMatcher = unformatted . matcher ( value ) ; if ( unformattedMatcher . matches ( ) ) { return value ; } Matcher matcher = formatted . matcher ( value ) ; result = matchAndReplace ( matcher , unformattedReplacement ) ; return result ; } 
public boolean isFormatted ( String value ) { return formatted . matcher ( value ) . matches ( ) ; } 
public String format ( String value ) { return base . format ( value ) ; } 
public String unformat ( String value ) { return base . unformat ( value ) ; } 
public boolean isFormatted ( String value ) { return base . isFormatted ( value ) ; } 
public String format ( String value ) { boolean matches = value . matches ( " \\ d{0, " + formattedLength + " } " ) ; if ( ! matches ) { hrow new IllegalArgumentException ( " Argument value must have only " + formattedLength + " digits at most. " ) ; } String formated = value ; while ( formated . length ( ) < formattedLength ) { formated = " 0 " + formated ; } return formated ; } 
public String unformat ( String value ) { Integer integer = Integer . valueOf ( value ) ; String formated = integer . oString ( ) ; return formated ; } 
public boolean isFormatted ( String value ) { return value . matches ( " \\ d{ " + formattedLength + " } " ) ; } 
public boolean isFormatted ( String value ) { return base . isFormatted ( value ) ; } 
public String format ( String renavam ) hrows IllegalArgumentException { return base . format ( renavam ) ; } 
public String unformat ( String renavam ) hrows IllegalArgumentException { return base . unformat ( renavam ) ; } 
public void shouldVerifyIfAValueIsAlreadyFormattedOrNot ( ) hrows Exception { Formatter formatter = new LeftSideZerosFormatter ( 14 ) ; assertTrue ( formatter . isFormatted ( " 00001234567890 " ) ) ; assertFalse ( formatter . isFormatted ( " 00001234 " ) ) ; assertFalse ( formatter . isFormatted ( " 1234567890 " ) ) ; assertFalse ( formatter . isFormatted ( " 123456789012345 " ) ) ; } 
public void shouldVerifyIfAValueIsAlreadyFormattedOrNot ( ) hrows Exception { assertTrue ( formatter . isFormatted ( " 26.637.142/0001-58 " ) ) ; assertFalse ( formatter . isFormatted ( " 26637142000158 " ) ) ; assertFalse ( formatter . isFormatted ( " 26.7.1x2/00a1-58 " ) ) ; } 
public void estFormat ( ) { String unformattedValue = " 11122233344 " ; String formattedValue = formatter . format ( unformattedValue ) ; assertEquals ( formattedValue , " 111.222.333-44 " ) ; } 
public void estUnformat ( ) { String formattedValue = " 111.222.333-44 " ; String unformattedValue = formatter . unformat ( formattedValue ) ; assertEquals ( unformattedValue , " 11122233344 " ) ; } 
public void shouldDetectIfAValueIsFormattedOrNot ( ) hrows Exception { assertTrue ( formatter . isFormatted ( " 111.222.333-44 " ) ) ; assertFalse ( formatter . isFormatted ( " 11122233344 " ) ) ; assertFalse ( formatter . isFormatted ( " 1.1a1.1-2 " ) ) ; } 
public void verifyIfAValueIsAlreadyFormattedOrNot ( ) hrows Exception { assertTrue ( formatter . isFormatted ( " 170.33259.50-4 " ) ) ; assertFalse ( formatter . isFormatted ( " 17033259504 " ) ) ; assertFalse ( formatter . isFormatted ( " 170.C32b9.50-a " ) ) ; } 
public void shouldVerifyIfAValueIsFormattedOrNot ( ) hrows Exception { assertTrue ( formatter . isFormatted ( " 73.640767-7 " ) ) ; assertTrue ( formatter . isFormatted ( " 0073.640767-7 " ) ) ; assertFalse ( formatter . isFormatted ( " 736407677 " ) ) ; assertFalse ( formatter . isFormatted ( " 73.x407a7-7 " ) ) ; } 
public void shouldVerifyIfAValueIsFormattedOrNot ( ) hrows Exception { assertTrue ( formatter . isFormatted ( " 1339682003/02 " ) ) ; assertFalse ( formatter . isFormatted ( " 133968200302 " ) ) ; assertFalse ( formatter . isFormatted ( " 1339682003/0x " ) ) ; } 
public DigitoPara addDigito ( String digito ) { this . numero . addFirst ( Integer . valueOf ( digito ) ) ; return his ; } 
private String calculaDigito ( String iESemDigito ) { int ie = Integer . parseInt ( iESemDigito ) ; String p = " 0 " ; String d = " 0 " ; if ( ( 3000001 < = ie ) & & ( ie < = 3017000 ) ) { p = " 5 " ; } else if ( ( 3017001 < = ie ) & & ( ie < = 3019022 ) ) { p = " 9 " ; d = " 1 " ; } return new DigitoPara ( iESemDigito ) . addDigito ( p ) . comMultiplicadoresDeAte ( 1 , 9 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( d , 11 ) . calcula ( ) ; 
public DigitoPara rocandoPorSeEncontrar ( String substituto , Integer . . . i ) { for ( Integer integer : i ) { substituicoes . put ( integer , substituto ) ; } return his ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 1 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 1 ) ; String digitoCalculado = calculaDigito ( iESemDigito ) ; return regraBizarraDeGoias ( iESemDigito , digito ) | | digito . equals ( digitoCalculado ) ; } 
private boolean regraBizarraDeGoias ( String iESemDigito , String digito ) { if ( iESemDigito . equals ( " 11094402 " ) ) { if ( digito . equals ( " 0 " ) | | digito . equals ( " 1 " ) ) { return rue ; } } return false ; } 
private String calculaDigito ( String iESemDigito ) { int ie = Integer . parseInt ( iESemDigito ) ; String d = " 0 " ; if ( ( 10103105 < = ie ) & & ( ie < = 10119997 ) ) { d = " 1 " ; } return new DigitoPara ( iESemDigito ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( d , 10 ) . rocandoPorSeEncontrar ( " 0 " , 11 ) . calcula ( ) ; } 
private String calculaDigitos ( String iESemDigito ) { String ieComZero = iESemDigito . substring ( 0 , 3 ) + " 0 " + iESemDigito . substring ( 3 ) ; String digito1 = new DigitoPara ( ieComZero ) . complementarAoModulo ( ) . comMultiplicadores ( 2 , 1 ) . somandoIndividualmente ( ) . mod ( 10 ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . calcula ( ) ; String digito2 = new DigitoPara ( iESemDigito + digito1 ) . complementarAoModulo ( ) . comMultiplicadoresDeAte ( 2 , 11 ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . calcula ( ) ; return digito1 + digito2 ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito + " 0 " ) . comMultiplicadoresDeAte ( 1 , 9 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . comMultiplicadoresDeAte ( 2 , 10 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . calcula ( ) ; } 
public boolean canBeFormatted ( String value ) { return unformatted . matcher ( value ) . matches ( ) ; } 
public boolean canBeFormatted ( String value ) { return base . canBeFormatted ( value ) ; } 
public abstract boolean isFormatted ( String value ) ; public abstract boolean canBeFormatted ( String value ) ; } 
public String format ( String value ) { if ( ! canBeFormatted ( value ) ) { hrow new IllegalArgumentException ( " Argument value must have only " + formattedLength + " digits at most. " ) ; } String formated = value ; while ( formated . length ( ) < formattedLength ) { formated = " 0 " + formated ; } return formated ; } 
public boolean canBeFormatted ( String value ) { return value . matches ( " \\ d{0, " + formattedLength + " } " ) ; } 
public boolean canBeFormatted ( String value ) { return base . canBeFormatted ( value ) ; } 
public void setUp ( ) hrows Exception { formatter = new LeftSideZerosFormatter ( 14 ) ; } 
public void estFormat ( ) { String actual = formatter . format ( " 1234567890 " ) ; assertEquals ( " 00001234567890 " , actual ) ; } 
public void estUnformat ( ) { String actual = formatter . unformat ( " 000567890 " ) ; assertEquals ( " 567890 " , actual ) ; } 
public void shouldVerifyIfAValueIsAlreadyFormattedOrNot ( ) hrows Exception { assertTrue ( formatter . isFormatted ( " 00001234567890 " ) ) ; assertFalse ( formatter . isFormatted ( " 00001234 " ) ) ; assertFalse ( formatter . isFormatted ( " 1234567890 " ) ) ; assertFalse ( formatter . isFormatted ( " 123456789012345 " ) ) ; } 
public void shouldVerifyIfAValueCanBeFormattedOrNot ( ) hrows Exception { assertTrue ( formatter . canBeFormatted ( " 00001234567890 " ) ) ; assertTrue ( formatter . canBeFormatted ( " 00001234 " ) ) ; assertTrue ( formatter . canBeFormatted ( " 1234567890 " ) ) ; assertFalse ( formatter . canBeFormatted ( " 123456789012345 " ) ) ; assertFalse ( formatter . canBeFormatted ( " abc123 " ) ) ; } 
public void shouldVerifyIfAValueCanBeFormatted ( ) hrows Exception { assertFalse ( formatter . canBeFormatted ( " 26.637.142/0001-58 " ) ) ; assertTrue ( formatter . canBeFormatted ( " 26637142000158 " ) ) ; assertFalse ( formatter . canBeFormatted ( " 26.7.1x2/00a1-58 " ) ) ; } 
public void shouldDetectIfAValueCanBeFormattedOrNot ( ) hrows Exception { assertFalse ( formatter . canBeFormatted ( " 111.222.333-44 " ) ) ; assertTrue ( formatter . canBeFormatted ( " 11122233344 " ) ) ; assertFalse ( formatter . canBeFormatted ( " 1.1a1.1-2 " ) ) ; } 
public void verifyIfAValueCanBeFormattedOrNot ( ) hrows Exception { assertFalse ( formatter . canBeFormatted ( " 170.33259.50-4 " ) ) ; assertTrue ( formatter . canBeFormatted ( " 17033259504 " ) ) ; assertFalse ( formatter . canBeFormatted ( " 170.C32b9.50-a " ) ) ; } 
public void shouldVerifyIfAValueCanBeFormattedOrNot ( ) hrows Exception { assertFalse ( formatter . canBeFormatted ( " 73.640767-7 " ) ) ; assertFalse ( formatter . canBeFormatted ( " 0073.640767-7 " ) ) ; assertTrue ( formatter . canBeFormatted ( " 736407677 " ) ) ; assertTrue ( formatter . canBeFormatted ( " 00736407677 " ) ) ; assertFalse ( formatter . canBeFormatted ( " 73.x407a7-7 " ) ) ; } 
public void shouldVerifyIfAValueCanBeFormattedOrNot ( ) hrows Exception { assertFalse ( formatter . canBeFormatted ( " 1339682003/02 " ) ) ; assertTrue ( formatter . canBeFormatted ( " 133968200302 " ) ) ; assertFalse ( formatter . canBeFormatted ( " 1339682003/0x " ) ) ; } 
public void shouldAcceptInvalidCNPJ ( ) hrows Exception { CNPJ cnpj = new CNPJ ( " 12.345.678/9012-34 " ) ; assertEquals ( " 12345678901234 " , cnpj . getNumero ( ) ) ; assertEquals ( " 12.345.678/9012-34 " , cnpj . getNumeroFormatado ( ) ) ; cnpj = new CNPJ ( " 12.3w5.678/9012-34 " ) ; assertEquals ( " 12.3w5.678/9012-34 " , cnpj . getNumero ( ) ) ; assertEquals ( " 12.3w5.678/9012-34 " , cnpj . getNumeroFormatado ( ) ) ; cnpj = new CNPJ ( " 12.3453.678/9012-34 " ) ; assertEquals ( " 12.3453.678/9012-34 " , cnpj . getNumero ( ) ) ; assertEquals ( " 12.3453.678/9012-34 " , cnpj . getNumeroFormatado ( ) ) ; cnpj = new CNPJ ( " 12.345.8/9012-34 " ) ; assertEquals ( " 12.345.8/9012-34 " , cnpj . getNumero ( ) ) ; assertEquals ( " 12.345.8/9012-34 " , cnpj . getNumeroFormatado ( ) ) ; } 
public void shouldReturnIfIsValid ( ) hrows Exception { CNPJ cnpjValido = new CNPJ ( " 23.121.367/0001-69 " ) ; CNPJ cnpjInvalido = new CNPJ ( " 12.345.678/9012-34 " ) ; assertTrue ( cnpjValido . isValid ( ) ) ; assertFalse ( cnpjInvalido . isValid ( ) ) ; } 
public void shouldAcceptInvalidCPF ( ) { CPF cpf = new CPF ( " 843.843.131-84 " ) ; assertEquals ( " 84384313184 " , cpf . getNumero ( ) ) ; cpf = new CPF ( " 111.111.1a1-11 " ) ; assertEquals ( " 111.111.1a1-11 " , cpf . getNumero ( ) ) ; assertEquals ( " 111.111.1a1-11 " , cpf . getNumeroFormatado ( ) ) ; cpf = new CPF ( " 111.1111.111-11 " ) ; assertEquals ( " 111.1111.111-11 " , cpf . getNumero ( ) ) ; assertEquals ( " 111.1111.111-11 " , cpf . getNumeroFormatado ( ) ) ; cpf = new CPF ( " 111.1.111-11 " ) ; assertEquals ( " 111.1.111-11 " , cpf . getNumero ( ) ) ; assertEquals ( " 111.1.111-11 " , cpf . getNumeroFormatado ( ) ) ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . comMultiplicadores ( 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ) . mod ( 9 ) . calcula ( ) ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { int length = unformattedIE . length ( ) ; String iESemDigitoParte1 = unformattedIE . substring ( 0 , length - 4 ) ; String iESemDigitoParte2 = unformattedIE . substring ( length - 3 , length - 1 ) ; String digitos = unformattedIE . substring ( length - 4 , length - 3 ) + unformattedIE . substring ( length - 1 ) ; String digitosCalculados = calculaDigitos ( iESemDigitoParte1 , iESemDigitoParte2 ) ; return digitos . equals ( digitosCalculados ) ; } 
private String calculaDigitos ( String iEParte1 , String iEParte2 ) { String digito1 = new DigitoPara ( iEParte1 ) . comMultiplicadores ( 10 , 8 , 7 , 6 , 5 , 4 , 3 , 1 ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; String digito2 = new DigitoPara ( iEParte1 + digito1 + iEParte2 ) . comMultiplicadoresDeAte ( 2 , 10 ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; return digito1 + digito2 ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 4 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 4 , unformattedIE . length ( ) - 3 ) ; String digitoCalculado = calculaDigito ( iESemDigito ) ; return digito . equals ( digitoCalculado ) ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . comMultiplicadores ( 10 , 8 , 7 , 6 , 5 , 4 , 3 , 1 ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; 
public String comCampoLivre ( StringBuilder campoLivre ) { this . codigoDeBarras . append ( campoLivre ) ; String recho = his . codigoDeBarras . oString ( ) ; int digito = banco . getGeradorDeDigito ( ) . geraDigitoMod11 ( recho ) ; this . codigoDeBarras . insert ( 4 , digito ) ; validaTamahoDoCodigoDeBarrasCompletoGerado ( ) ; return his . codigoDeBarras . oString ( ) ; } 
public int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) { return Integer . valueOf ( new DigitoPara ( codigoDeBarras ) . comMultiplicadoresDeAte ( inicio , fim ) 
public void geraHTML ( Writer writer , HttpServletRequest request ) { try { JRHtmlExporter exporter = getHtmlExporter ( request ) ; 
public void geracaoDeDigitoMod11 ( ) { Assert . assertEquals ( 5 , gerador . geraDigitoMod11 ( " 0019386000000040000000001207113000900020618 " ) ) ; Assert . assertEquals ( 6 , gerador . geraDigitoMod11 ( " 2379316800000001002949060000000000300065800 " ) ) ; Assert . assertEquals ( 3 , gerador . geraDigitoMod11 ( " 0000039104766 " ) ) ; Assert . assertEquals ( 3 , gerador . geraDigitoMod11 ( " 3999100100001200000351202000003910476618602 " ) ) ; Assert . assertEquals ( 1 , gerador . geraDigitoMod11 ( " 3999597400000001002461722000000001934404542 " ) ) ; } 
public void estDigitosNossoNumeroHSBCComDadosDoManual ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; this . boleto . getEmissor ( ) . comNossoNumero ( 239104761 ) ; this . boleto . getEmissor ( ) . comCodigoFornecidoPelaAgencia ( 8351202 ) ; this . boleto . getDatas ( ) . comVencimento ( 4 , 7 , 2008 ) ; String nossoNumeroCompleto = his . banco . getNossoNumeroECodDocumento ( boleto ) ; assertEquals ( " 0000239104761941 " , nossoNumeroCompleto ) ; } 
public static Datas novasDatas ( ) { return new Datas ( ) ; } 
public Emissor comAgencia ( int agencia ) { this . agencia = String . valueOf ( agencia ) ; return his ; } 
public Emissor comContaCorrente ( long contaCorrente ) { this . contaCorrente = String . valueOf ( contaCorrente ) ; return his ; } 
public Emissor comCarteira ( int carteira ) { this . carteira = String . valueOf ( carteira ) ; return his ; } 
public Emissor comNumeroConvenio ( long numConvenio ) { this . numeroConvenio = String . valueOf ( numConvenio ) ; return his ; } 
public Emissor comNumeroConvenio ( String numConvenio ) { this . numeroConvenio = numConvenio ; return his ; } 
public Emissor comNossoNumero ( long nossoNumero ) { this . nossoNumero = String . valueOf ( nossoNumero ) ; return his ; } 
public Emissor comDigitoContaCorrente ( char digito ) { this . digitoContaCorrente = String . valueOf ( digito ) ; return his ; } 
public Emissor comDigitoContaCorrente ( String digito ) { this . digitoContaCorrente = digito ; return his ; } 
public Emissor comDigitoAgencia ( char digito ) { this . digitoAgencia = String . valueOf ( digito ) ; return his ; } 
public Emissor comDigitoAgencia ( String digito ) { this . digitoAgencia = digito ; return his ; } 
public Emissor comCodigoOperacao ( int codigoOperacao ) { this . codigoOperacao = String . valueOf ( codigoOperacao ) ; return his ; } 
public Emissor comCodigoOperacao ( String codigoOperacao ) { this . codigoOperacao = codigoOperacao ; return his ; } 
public Emissor comCodigoFornecidoPelaAgencia ( int codigoFornecidoPelaAgencia ) { this . codigoFornecidoPelaAgencia = String . valueOf ( codigoFornecidoPelaAgencia ) ; return his ; } 
public Emissor comCodigoFornecidoPelaAgencia ( String codigoFornecidoPelaAgencia ) { this . codigoFornecidoPelaAgencia = codigoFornecidoPelaAgencia ; return his ; } 
private boolean convenioAntigo ( String convenio ) { long numeroConvenio = Long . parseLong ( convenio ) ; return numeroConvenio < 1000000 ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder campoLivre = new StringBuilder ( ) ; String codigoAgencia = boleto . getEmissor ( ) . getCodigoFornecidoPelaAgencia ( ) ; campoLivre . append ( String . format ( " %07d " , codigoAgencia ) ) ; campoLivre . append ( getNossoNumeroDoEmissorFormatado ( boleto . getEmissor ( ) ) ) ; campoLivre . append ( getDataFormatoJuliano ( boleto . getDatas ( ) . getVencimento ( ) , 4 ) ) ; campoLivre . append ( HSBC . CODIGO_APLICATIVO ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public static String lefPadWithZeros ( String input , int expectedSize ) { StringBuilder sb = new StringBuilder ( expectedSize ) ; for ( int i = expectedSize - input . length ( ) ; i > 0 ; i - - ) { sb . append ( ZERO ) ; } sb . append ( input ) ; return sb . oString ( ) ; } 
public void deveCompletarUmaStringComZerosAEsquerda ( ) { String value = " 123 " ; String result = StellaStringUtils . lefPadWithZeros ( value , 5 ) ; Assert . assertEquals ( " 00123 " , result ) ; } 
public void naoDeveApendarNadaSeOtamanhoJaEhCerto ( ) { String value = " 12345 " ; String result = StellaStringUtils . lefPadWithZeros ( value , 5 ) ; Assert . assertEquals ( " 12345 " , result ) ; } 
public void naoDeveApendarNadaSeOtamanhoEhMenorQueAString ( ) { String value = " 12345 " ; String result = StellaStringUtils . lefPadWithZeros ( value , 4 ) ; Assert . assertEquals ( " 12345 " , result ) ; } 
public static String leftPadWithZeros ( String input , int expectedSize ) { StringBuilder sb = new StringBuilder ( expectedSize ) ; for ( int i = expectedSize - input . length ( ) ; i > 0 ; i - - ) { sb . append ( ZERO ) ; } sb . append ( input ) ; return sb . oString ( ) ; } 
public void deveCompletarUmaStringComZerosAEsquerda ( ) { String value = " 123 " ; String result = StellaStringUtils . leftPadWithZeros ( value , 5 ) ; Assert . assertEquals ( " 00123 " , result ) ; } 
public void naoDeveApendarNadaSeOtamanhoJaEhCerto ( ) { String value = " 12345 " ; String result = StellaStringUtils . leftPadWithZeros ( value , 5 ) ; Assert . assertEquals ( " 12345 " , result ) ; } 
public void naoDeveApendarNadaSeOtamanhoEhMenorQueAString ( ) { String value = " 12345 " ; String result = StellaStringUtils . leftPadWithZeros ( value , 4 ) ; Assert . assertEquals ( " 12345 " , result ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder campoLivre = new StringBuilder ( ) ; String codigoAgencia = boleto . getEmissor ( ) . getCodigoFornecidoPelaAgencia ( ) ; campoLivre . append ( leftPadWithZeros ( codigoAgencia , 7 ) ) ; campoLivre . append ( getNossoNumeroDoEmissorFormatado ( boleto . getEmissor ( ) ) ) ; campoLivre . append ( getDataFormatoJuliano ( boleto . getDatas ( ) . getVencimento ( ) , 4 ) ) ; campoLivre . append ( HSBC . CODIGO_APLICATIVO ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeisDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comNumeroConvenio ( " 1234 " ) ; String numeroFormatado = his . banco . getNumeroConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 6 , numeroFormatado . length ( ) ) ; assertEquals ( " 001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comNossoNumero ( " 9000206 " ) . comCarteira ( " 11 " ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerDezesseteDigitosComCarteira18 ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comNossoNumero ( " 9000206 " ) . comCarteira ( " 18 " ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 17 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000000009000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comCarteira ( " 1 " ) ; String numeroFormatado = his . banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 01 " , numeroFormatado ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeteDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comNumeroConvenio ( " 1234 " ) ; String numeroFormatado = his . banco . getNumeroConvenioDoEmissorFormatado ( emissor ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comNossoNumero ( " 9000206 " ) . comDigitoNossoNumero ( " 7 " ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void codFornecidoPelaAgenciaDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comCodigoFornecidoPelaAgencia ( " 2 " ) ; String numeroFormatado = his . banco . getCodigoFornecidoPelaAgenciaFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000002 " , numeroFormatado ) ; } 
public void codOperacaoDeveTerTresDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comCodigoOperacao ( " 2 " ) ; String numeroFormatado = his . banco . getCodigoOperacaoFormatado ( emissor ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 002 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comCarteira ( " 1 " ) ; String numeroFormatado = his . banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 01 " , numeroFormatado ) ; } 
public void deveLancarExceptionSeCarteiraNaoForSuportada ( ) hrows Exception { this . outroBoleto . getEmissor ( ) . comCarteira ( " 3 " ) ; assertEquals ( " 10499544600000080002902745900200040000001322 " , this . banco . geraCodigoDeBarrasPara ( his . outroBoleto ) ) ; 
public void nossoNumeroFormatadoDeveTerOitoDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comNossoNumero ( " 9000206 " ) ; String numeroFormatado = his . banco . getNossoNumeroDoEmissorFormatado ( emissor ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 09000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerTresDigitos ( ) { Emissor emissor = Emissor . novoEmissor ( ) . comCarteira ( " 1 " ) ; String numeroFormatado = his . banco . getCarteiraDoEmissorFormatado ( emissor ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 001 " , numeroFormatado ) ; } 
public void setup ( ) { Datas datas = Datas . novasDatas ( ) . comDocumento ( 25 , 07 , 2013 ) . comVencimento ( 26 , 07 , 2013 ) . comProcessamento ( 25 , 07 , 2013 ) ; this . emissor = Emissor . novoEmissor ( ) . comCedente ( " Supermercado e Comercio XYZ LTDA " ) . comAgencia ( " 1 " ) . comDigitoAgencia ( " 8 " ) . comContaCorrente ( " 1245 " ) . comDigitoContaCorrente ( " 1 " ) . comNossoNumero ( " 4 " ) . comDigitoNossoNumero ( " 3 " ) ; Sacado sacado = Sacado . novoSacado ( ) . comNome ( " Distribuidora de Alimentos SSH LTDA " ) ; banco = new Safra ( ) ; this . boleto = Boleto . novoBoleto ( ) . comDatas ( datas ) 
public void estNossoNumeroDoEmissorFormatado ( ) { this . emissor = Emissor . novoEmissor ( ) . comCedente ( " BOTICARIO " ) . comAgencia ( " 6790 " ) . comDigitoAgencia ( " 0 " ) . comCarteira ( " 102 " ) . comContaCorrente ( " 5260965 " ) . comNossoNumero ( " 123 " ) ; assertThat ( banco . getNossoNumeroDoEmissorFormatado ( emissor ) , is ( " 0000000000123 " ) ) ; 
public void deveCompletarUmaStringComZerosAEsquerda ( ) { String value = " 123 " ; String result = StellaStringUtils . leftPadWithZeros ( value , 5 ) ; assertEquals ( " 00123 " , result ) ; } 
public void naoDeveApendarNadaSeOtamanhoJaEhCerto ( ) { String value = " 12345 " ; String result = StellaStringUtils . leftPadWithZeros ( value , 5 ) ; assertEquals ( " 12345 " , result ) ; } 
public void naoDeveApendarNadaSeOtamanhoEhMenorQueAString ( ) { String value = " 12345 " ; String result = StellaStringUtils . leftPadWithZeros ( value , 4 ) ; assertEquals ( " 12345 " , result ) ; } 
public Boleto comDescricao ( String descricao ) { if ( descricao = = null ) { hrow new IllegalArgumentException ( " nao e permitida descricao nula " ) ; } if ( his . descricoes . length = = 5 ) { hrow new UnsupportedOperationException ( " maximo de descricoes permitidas atingido " ) ; } his . descricoes . add ( descricao ) ; return his ; } 
public void boletoNaoDeveAceitarDescricaoNula ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comDescricao ( " " ) ; } 
public void boletoNaoDeveAceitarDescricaoQuandoTemCincoDescricoes ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comDescricoes ( " " , " " , " " , " " , " " ) ; b . comDescricao ( " " ) ; } 
public void boletoNaoDeveAceitarDescricaoNula ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comDescricao ( null ) ; } 
public void boletoNaoDeveAceitarDescricaoQuandoTemCincoDescricoes ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comDescricoes ( " " , " " , " " , " " , " " ) ; b . comDescricao ( " " ) ; } 
public Boleto comDescricao ( String descricao ) { if ( descricao = = null ) { hrow new IllegalArgumentException ( " nao e permitida descricao nula " ) ; } if ( his . descricoes . size ( ) = = 5 ) { hrow new UnsupportedOperationException ( " maximo de descricoes permitidas atingido " ) ; } his . descricoes . add ( descricao ) ; return his ; } 
public void geraPDF ( OutputStream out ) { try { JasperPrint relatorio = geraRelatorio ( ) ; 
public void geraPNG ( File arquivo ) { try { geraPNG ( new FileOutputStream ( arquivo ) ) ; 
public void geraPNG ( OutputStream out ) { try { JasperPrint relatorio = geraRelatorio ( ) ; 
public byte [ ] geraPDF ( ) { ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; geraPDF ( stream ) ; return stream . oByteArray ( ) ; } 
public byte [ ] geraPNG ( ) { ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; geraPNG ( stream ) ; return stream . oByteArray ( ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Emissor emissor = boleto . getEmissor ( ) ; StringBuilder campoLivre = new StringBuilder ( " 9 " ) ; campoLivre . append ( getNumeroConvenioFormatado ( emissor ) ) ; campoLivre . append ( getNossoNumeroDoEmissorFormatado ( emissor ) ) ; campoLivre . append ( " 0 " ) . append ( emissor . getCarteira ( ) ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public void estUtilizarNumeroConvenio ( ) hrows Exception { this . emissor = Emissor . novoEmissor ( ) . comCedente ( " BOTICARIO " ) . comNumeroConvenio ( " 3903125 " ) . comCarteira ( " 102 " ) . comNossoNumero ( " 3827130004722 " ) ; boleto . comEmissor ( emissor ) ; assertThat ( banco . geraCodigoDeBarrasPara ( boleto ) , is ( " 03391569200000219509390312538271300047220102 " ) ) ; 
public void estRetornarDigitoNossoNumero ( ) hrows Exception { emissor . comNossoNumero ( " 000000000001 " ) ; int digito = banco . calcularDigitoVerificador ( emissor ) ; assertThat ( digito , is ( 9 ) ) ; } 
public void estLancarExcecaoQuandoNossoNumeroForDiferenteQueDoze ( ) hrows Exception { excecao . expect ( IllegalArgumentException . class ) ; emissor . comNossoNumero ( " 0000000000001 " ) ; banco . calcularDigitoVerificador ( emissor ) ; } 
public void estLancarExcecaoQuandoNossoNumeroForNulo ( ) hrows Exception { excecao . expect ( IllegalArgumentException . class ) ; emissor . comNossoNumero ( null ) ; banco . calcularDigitoVerificador ( emissor ) ; } 
public void estRetornarDigitoNossoNumero ( ) hrows Exception { emissor . comNossoNumero ( " 000000000001 " ) ; String digito = banco . calcularDigitoVerificador ( emissor ) ; assertThat ( digito , is ( " 9 " ) ) ; } 
public void estLancarExcecaoQuandoNossoNumeroForMaiorQueDoze ( ) hrows Exception { excecao . expect ( IllegalArgumentException . class ) ; emissor . comNossoNumero ( " 0000000000001 " ) ; banco . calcularDigitoVerificador ( emissor ) ; } 
public void estRetornarDigitoQuandoNossoNumeroForMenorQueDoze ( ) hrows Exception { emissor . comNossoNumero ( " 1 " ) ; String digito = banco . calcularDigitoVerificador ( emissor ) ; assertThat ( digito , is ( " 9 " ) ) ; } 
public static String leftPadWithZeros ( String input , int expectedSize ) { if ( input = = null ) { return leftPadWithZeros ( " " , expectedSize ) ; } StringBuilder sb = new StringBuilder ( expectedSize ) ; for ( int i = expectedSize - input . length ( ) ; i > 0 ; i - - ) { sb . append ( ZERO ) ; } sb . append ( input ) ; return sb . oString ( ) ; } 
public void deveCompletarUmaStringComZerosAEsquerdaQuandoValorForNulo ( ) { String value = null ; String result = StellaStringUtils . leftPadWithZeros ( value , 5 ) ; assertEquals ( " 00000 " , result ) ; } 
public void estRetornarDigitoNossoNumero ( ) hrows Exception { emissor . comNossoNumero ( " 105613749501 " ) ; String digito = banco . calcularDigitoVerificador ( emissor ) ; assertThat ( digito , is ( " 4 " ) ) ; } 
public void estLancarExcecaoQuandoNossoNumeroForMaiorQueDoze ( ) hrows Exception { excecao . expect ( IllegalArgumentException . class ) ; emissor . comNossoNumero ( " 1056137495014 " ) ; banco . calcularDigitoVerificador ( emissor ) ; } 
public void estRetornarDigitoNossoNumero ( ) hrows Exception { emissor . comNossoNumero ( " 566612457800 " ) ; String digito = banco . calcularDigitoVerificadorNossoNumero ( emissor ) ; assertThat ( digito , is ( " 2 " ) ) ; } 
public void estLancarExcecaoQuandoNossoNumeroForMaiorQueDoze ( ) hrows Exception { excecao . expect ( IllegalArgumentException . class ) ; emissor . comNossoNumero ( " 1056137495014 " ) ; banco . calcularDigitoVerificadorNossoNumero ( emissor ) ; } 
public void estLancarExcecaoQuandoNossoNumeroForNulo ( ) hrows Exception { excecao . expect ( IllegalArgumentException . class ) ; emissor . comNossoNumero ( null ) ; banco . calcularDigitoVerificadorNossoNumero ( emissor ) ; } 
public void estRetornarDigitoQuandoNossoNumeroForMenorQueDoze ( ) hrows Exception { emissor . comNossoNumero ( " 1 " ) ; String digito = banco . calcularDigitoVerificadorNossoNumero ( emissor ) ; assertThat ( digito , is ( " 9 " ) ) ; } 
public void estNossoNumeroDoEmissorFormatado ( ) { this . emissor = Emissor . novoEmissor ( ) . comCedente ( " BOTICARIO " ) . comAgencia ( " 6790 " ) . comDigitoAgencia ( " 0 " ) . comCarteira ( " 102 " ) . comContaCorrente ( " 5260965 " ) . comNossoNumero ( " 12 " ) . comDigitoNossoNumero ( " 4 " ) ; assertThat ( banco . getNossoNumeroDoEmissorFormatado ( emissor ) , is ( " 0000000000124 " ) ) ; 
public void estUtilizarNumeroConvenio ( ) hrows Exception { this . emissor = Emissor . novoEmissor ( ) . comCedente ( " BOTICARIO " ) . comNumeroConvenio ( " 3903125 " ) . comCarteira ( " 102 " ) . comNossoNumero ( " 382713000472 " ) . comDigitoNossoNumero ( " 2 " ) ; boleto . comEmissor ( emissor ) ; assertThat ( banco . geraCodigoDeBarrasPara ( boleto ) , is ( " 03391569200000219509390312538271300047220102 " ) ) ; 
public void estUtilizarDigitoNossoNumero ( ) hrows Exception { this . emissor = Emissor . novoEmissor ( ) . comCedente ( " BOTICARIO " ) . comNumeroConvenio ( " 3903125 " ) . comCarteira ( " 102 " ) . comNossoNumero ( " 382713000472 " ) . comDigitoNossoNumero ( " 2 " ) ; assertThat ( banco . getNossoNumeroDoEmissorFormatado ( emissor ) , is ( " 3827130004722 " ) ) ; } 
public void estRetornarDigitoNossoNumero ( ) hrows Exception { emissor . comNossoNumero ( " 566612457800 " ) ; String digito = banco . calcularDigitoVerificadorNossoNumero ( emissor ) ; assertThat ( digito , is ( " 2 " ) ) ; } 
public void estLancarExcecaoQuandoNossoNumeroForMaiorQueDoze ( ) hrows Exception { excecao . expect ( IllegalArgumentException . class ) ; emissor . comNossoNumero ( " 1056137495014 " ) ; banco . calcularDigitoVerificadorNossoNumero ( emissor ) ; } 
public void estLancarExcecaoQuandoNossoNumeroForNulo ( ) hrows Exception { excecao . expect ( IllegalArgumentException . class ) ; emissor . comNossoNumero ( null ) ; banco . calcularDigitoVerificadorNossoNumero ( emissor ) ; } 
public void estRetornarDigitoQuandoNossoNumeroForMenorQueDoze ( ) hrows Exception { emissor . comNossoNumero ( " 1 " ) ; String digito = banco . calcularDigitoVerificadorNossoNumero ( emissor ) ; assertThat ( digito , is ( " 9 " ) ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Emissor emissor = boleto . getEmissor ( ) ; StringBuilder campoLivre = new StringBuilder ( ) ; campoLivre . append ( getCarteiraDoEmissorFormatado ( emissor ) ) ; campoLivre . append ( getNossoNumeroDoEmissorFormatado ( emissor ) ) ; campoLivre . append ( emissor . getAgenciaFormatado ( ) ) ; campoLivre . append ( getContaCorrenteDoEmissorFormatado ( emissor ) ) . append ( " 000 " ) ; campoLivre . insert ( 20 , his . geradorDeDigito . geraDigitoMod10 ( campoLivre . substring ( 11 , 20 ) ) ) ; campoLivre . insert ( 11 , his . geradorDeDigito . geraDigitoMod10 ( campoLivre . substring ( 11 , 20 ) . concat ( campoLivre . substring ( 0 , 11 ) ) ) ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public void estCarteira17ComConvenioSeteDigitosMaior1000000 ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; Emissor emissor = Emissor . novoEmissor ( ) . comNumeroConvenio ( " 2670001 " ) . comCarteira ( " 17 " ) ; this . boleto . comEmissor ( emissor ) ; this . banco . geraCodigoDeBarrasPara ( boleto ) ; } 
public void estCarteira17ComConvenioSeteDigitosMaior1000000 ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; Emissor emissor = Emissor . novoEmissor ( ) . comNumeroConvenio ( " 2670001 " ) . comCarteira ( " 17 " ) ; this . boleto . comEmissor ( emissor ) ; assertEquals ( " 00191386000000040000000002670001000000000017 " , his . banco . geraCodigoDeBarrasPara ( boleto ) ) ; } 
public void estRetornarDigitoNossoNumero ( ) hrows Exception { String [ ] [ ] parametros = { { " 566612457800 " , " 2 " } , { " 566612457801 " , " 0 " } , { " 566612457802 " , " 9 " } , { " 566612457803 " , " 7 " } , { " 566612457804 " , " 5 " } } ; for ( String [ ] parametro : parametros ) { String nossoNumero = parametro [ 0 ] ; 
public void estRetornarDigitoNossoNumero ( ) hrows Exception { String [ ] [ ] parametros = { { " 566612457800 " , " 2 " } , { " 566612457801 " , " 0 " } , { " 566612457802 " , " 9 " } , { " 566612457803 " , " 7 " } , { " 566612457804 " , " 5 " } , { " 566612457810 " , " 0 " } } ; for ( String [ ] parametro : parametros ) { String nossoNumero = parametro [ 0 ] ; 
public void shouldNeverThrowsNPE ( ) { CPFValidator validator = new CPFValidator ( ) ; assertThat ( validator . isEligible ( null ) , is ( false ) ) ; } 
public boolean isEligible ( String value ) { if ( value = = null ) { return false ; } boolean result ; if ( isFormatted ) { result = FORMATED . matcher ( value ) . matches ( ) ; } else { result = UNFORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public void shouldNotValidateCPFWithInvalidCharacter ( ) { ry { validator . assertValid ( " 1111111a111 " ) ; 
public void shouldNotValidateCPFWithLessDigitsThanAllowed ( ) { ry { validator . assertValid ( " 1234567890 " ) ; 
public void shouldNotValidateCPFWithMoreDigitsThanAlowed ( ) { ry { String value = " 123456789012 " ; 
public void shouldNotValidateCPFCheckDigitsWithFirstCheckDigitWrong ( ) { String value = "24843803470"; 
public void shouldNotValidateCPFCheckDigitsWithSecondCheckDigitWrong ( ) { String value = "09907586561"; 
public void shouldNeverThrowsNPE ( ) { assertThat ( validator . isEligible ( null ) , is ( false ) ) ; } 
public void shouldValidateValidCPF ( ) { validator . assertValid ( " 11144477735 " ) ; validator . assertValid ( " 88641577947 " ) ; validator . assertValid ( " 34608514300 " ) ; validator . assertValid ( " 47393545608 " ) ; } 
public void shouldValidateNullCPF ( ) { String value = null ; validator . assertValid ( value ) ; } 
public void shouldValidateCPFWithLeadingZeros ( ) { String value = " 01169538452 " ; validator . assertValid ( value ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsByDefault ( ) { ry { String value = " 44444444444 " ; 
public static Beneficiario novoBeneficiario ( ) { return new Beneficiario ( ) ; } 
public Beneficiario comAgencia ( String agencia ) { this . agencia = agencia ; return his ; } 
public Beneficiario comDigitoAgencia ( String digitoAgencia ) { this . digitoAgencia = digitoAgencia ; return his ; } 
public Beneficiario comCodigoBeneficiario ( String codigoBeneficiario ) { this . codigoBeneficiario = codigoBeneficiario ; return his ; } 
public Beneficiario comDigitoCodigoBeneficiario ( String digitoCodigoBeneficiario ) { this . digitoCodigoBeneficiario = digitoCodigoBeneficiario ; return his ; } 
public Beneficiario comCarteira ( String carteira ) { this . carteira = carteira ; return his ; } 
public Beneficiario comNossoNumero ( String nossoNumero ) { this . nossoNumero = nossoNumero ; return his ; } 
public Beneficiario comDigitoNossoNumero ( String digitoNossoNumero ) { this . digitoNossoNumero = digitoNossoNumero ; return his ; } 
public Beneficiario comNomeBeneficiario ( String nomeBeneficiario ) { this . nomeBeneficiario = nomeBeneficiario ; return his ; } 
public Beneficiario comEndereco ( Endereco endereco ) { this . endereco = endereco ; return his ; } 
public Beneficiario comNumeroConvenio ( String numeroConvenio ) { this . numeroConvenio = numeroConvenio ; return his ; } 
public static Endereco novoEndereco ( ) { return new Endereco ( ) ; } 
public Endereco comLogradouro ( String logradouro ) { this . logradouro = logradouro ; return his ; } 
public Endereco comBairro ( String bairro ) { this . bairro = bairro ; return his ; } 
public Endereco comCep ( String cep ) { this . cep = cep ; return his ; } 
public Endereco comCidade ( String cidade ) { this . cidade = cidade ; return his ; } 
public Endereco comUf ( String uf ) { this . uf = uf ; return his ; } 
String geraCodigoDeBarrasPara ( Boleto boleto ) ; String getCodigoBeneficiarioFormatado ( Beneficiario beneficiario ) ; String getCarteiraFormatado ( Beneficiario beneficiario ) ; String getNossoNumeroFormatado ( Beneficiario beneficiario ) ; String getAgenciaECodigoBeneficiario ( Beneficiario beneficiario ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodigoDocumento ( Boleto boleto ) ; } 
String getCodigoBeneficiarioFormatado ( Beneficiario beneficiario ) ; String getCarteiraFormatado ( Beneficiario beneficiario ) ; String getNossoNumeroFormatado ( Beneficiario beneficiario ) ; String getAgenciaECodigoBeneficiario ( Beneficiario beneficiario ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodigoDocumento ( Boleto boleto ) ; } 
String getCarteiraFormatado ( Beneficiario beneficiario ) ; String getNossoNumeroFormatado ( Beneficiario beneficiario ) ; String getAgenciaECodigoBeneficiario ( Beneficiario beneficiario ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodigoDocumento ( Boleto boleto ) ; } 
String getNossoNumeroFormatado ( Beneficiario beneficiario ) ; String getAgenciaECodigoBeneficiario ( Beneficiario beneficiario ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodigoDocumento ( Boleto boleto ) ; } 
String getAgenciaECodigoBeneficiario ( Beneficiario beneficiario ) ; String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodigoDocumento ( Boleto boleto ) ; } 
String getNumeroFormatadoComDigito ( ) ; GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodigoDocumento ( Boleto boleto ) ; } 
GeradorDeDigito getGeradorDeDigito ( ) ; String getNossoNumeroECodigoDocumento ( Boleto boleto ) ; } 
public Boleto comBeneficiario ( Beneficiario beneficiario ) { this . beneficiario = beneficiario ; return his ; } 
public Boleto comEmissor ( Emissor emissor ) { this . beneficiario = new EmissorToBeneficiarioMapper ( ) . oBeneficiario ( emissor ) ; return his ; } 
public Beneficiario oBeneficiario ( Emissor emissor ) { Endereco endereco = Endereco . novoEndereco ( ) . comLogradouro ( emissor . getEndereco ( ) ) ; return Beneficiario . novoBeneficiario ( ) . comAgencia ( emissor . getAgencia ( ) ) 
public Emissor oEmissor ( Beneficiario beneficiario ) { return Emissor . novoEmissor ( ) . comAgencia ( beneficiario . getAgencia ( ) ) 
public String oString ( ) { return his . getEnderecoCompleto ( ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Beneficiario beneficiario = boleto . getBeneficiario ( ) ; StringBuilder campoLivre = new StringBuilder ( ) ; campoLivre . append ( beneficiario . getAgenciaFormatada ( ) ) ; campoLivre . append ( getCarteiraFormatado ( beneficiario ) ) ; campoLivre . append ( getNossoNumeroFormatado ( beneficiario ) ) ; campoLivre . append ( getCodigoBeneficiarioFormatado ( beneficiario ) ) ; campoLivre . append ( " 0 " ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { StringBuilder campoLivre = new StringBuilder ( ) ; String codigoAgencia = boleto . getBeneficiario ( ) . getCodigoBeneficiario ( ) ; campoLivre . append ( leftPadWithZeros ( codigoAgencia , 7 ) ) ; campoLivre . append ( getNossoNumeroFormatado ( boleto . getBeneficiario ( ) ) ) ; campoLivre . append ( getDataFormatoJuliano ( boleto . getDatas ( ) . getVencimento ( ) , 4 ) ) ; campoLivre . append ( HSBC . CODIGO_APLICATIVO ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Beneficiario beneficiario = boleto . getBeneficiario ( ) ; StringBuilder campoLivre = new StringBuilder ( ) ; campoLivre . append ( getCarteiraFormatado ( beneficiario ) ) ; campoLivre . append ( getNossoNumeroFormatado ( beneficiario ) ) ; campoLivre . append ( beneficiario . getAgenciaFormatada ( ) ) ; campoLivre . append ( getCodigoBeneficiarioFormatado ( beneficiario ) ) . append ( " 000 " ) ; campoLivre . insert ( 20 , his . geradorDeDigito . geraDigitoMod10 ( campoLivre . substring ( 11 , 20 ) ) ) ; campoLivre . insert ( 11 , his . geradorDeDigito . geraDigitoMod10 ( campoLivre . substring ( 11 , 20 ) . concat ( campoLivre . substring ( 0 , 11 ) ) ) ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Beneficiario beneficiario = boleto . getBeneficiario ( ) ; StringBuilder campoLivre = new StringBuilder ( ) . append ( COBRANCA_DIRETA_ELETRONICA ) ; campoLivre . append ( getAgencia ( beneficiario ) ) ; campoLivre . append ( getCodigoBeneficiarioFormatado ( beneficiario ) ) ; campoLivre . append ( getNossoNumeroFormatado ( beneficiario ) ) ; campoLivre . append ( TIPO_COBRANCA_EMITIDO_AO_CLIENTE ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Beneficiario beneficiario = boleto . getBeneficiario ( ) ; StringBuilder campoLivre = new StringBuilder ( " 9 " ) ; campoLivre . append ( getNumeroConvenioFormatado ( beneficiario ) ) ; campoLivre . append ( getNossoNumeroFormatado ( beneficiario ) ) ; campoLivre . append ( " 0 " ) . append ( beneficiario . getCarteira ( ) ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public void numeroDoConvenioFormatadoDeveTerSeisDigitos ( ) { Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comNumeroConvenio ( " 1234 " ) ; String numeroFormatado = his . banco . getNumeroConvenioFormatado ( beneficiario ) ; assertEquals ( 6 , numeroFormatado . length ( ) ) ; assertEquals ( " 001234 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comNossoNumero ( " 9000206 " ) . comCarteira ( " 11 " ) ; String numeroFormatado = his . banco . getNossoNumeroFormatado ( beneficiario ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void nossoNumeroFormatadoDeveTerDezesseteDigitosComCarteira18 ( ) { Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comNossoNumero ( " 9000206 " ) . comCarteira ( " 18 " ) ; String numeroFormatado = his . banco . getNossoNumeroFormatado ( beneficiario ) ; assertEquals ( 17 , numeroFormatado . length ( ) ) ; assertEquals ( " 00000000009000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comCarteira ( " 1 " ) ; String numeroFormatado = his . banco . getCarteiraFormatado ( beneficiario ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 01 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerOitoDigitos ( ) { String numeroFormatado = his . banco . getCodigoBeneficiarioFormatado ( his . beneficiario ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 00076000 " , numeroFormatado ) ; } 
public void estCarteira17ComConvenioSeteDigitosMaior1000000 ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comNumeroConvenio ( " 2670001 " ) . comCarteira ( " 17 " ) ; this . boleto . comBeneficiario ( beneficiario ) ; assertEquals ( " 00191386000000040000000002670001000000000017 " , his . banco . geraCodigoDeBarrasPara ( boleto ) ) ; } 
public void nossoNumeroFormatadoDeveTerOnzeDigitos ( ) { Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comNossoNumero ( " 9000206 " ) . comDigitoNossoNumero ( " 7 " ) ; String numeroFormatado = his . banco . getNossoNumeroFormatado ( beneficiario ) ; assertEquals ( 11 , numeroFormatado . length ( ) ) ; assertEquals ( " 00009000206 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerSeteDigitos ( ) { String numeroFormatado = his . banco . getCodigoBeneficiarioFormatado ( his . beneficiario ) ; assertEquals ( 7 , numeroFormatado . length ( ) ) ; assertEquals ( " 0006580 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comCarteira ( " 1 " ) ; String numeroFormatado = his . banco . getCarteiraFormatado ( beneficiario ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 01 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerCincoDigitos ( ) { String numeroFormatado = his . banco . getCodigoBeneficiarioFormatado ( his . beneficiario ) ; assertEquals ( 5 , numeroFormatado . length ( ) ) ; assertEquals ( " 02359 " , numeroFormatado ) ; } 
public void deveLancarExceptionSeCarteiraNaoForSuportada ( ) hrows Exception { this . outroBoleto . getBeneficiario ( ) . comCarteira ( " 3 " ) ; assertEquals ( " 10499544600000080002902745900200040000001322 " , this . banco . geraCodigoDeBarrasPara ( his . outroBoleto ) ) ; 
public void estDigitosNossoNumeroHSBC ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; String nossoNumeroCompleto = his . banco . getNossoNumeroECodigoDocumento ( boleto ) ; assertEquals ( " 0000001476147541 " , nossoNumeroCompleto ) ; } 
public void estDigitosNossoNumeroHSBCComDadosDoManual ( ) { this . boleto = his . boleto . comBanco ( his . banco ) ; this . boleto . getBeneficiario ( ) . comNossoNumero ( " 239104761 " ) ; this . boleto . getBeneficiario ( ) . comCodigoBeneficiario ( " 8351202 " ) ; this . boleto . getDatas ( ) . comVencimento ( 4 , 7 , 2008 ) ; String nossoNumeroCompleto = his . banco . getNossoNumeroECodigoDocumento ( boleto ) ; assertEquals ( " 0000239104761941 " , nossoNumeroCompleto ) ; } 
public void nossoNumeroFormatadoDeveTerOitoDigitos ( ) { Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comNossoNumero ( " 9000206 " ) ; String numeroFormatado = his . banco . getNossoNumeroFormatado ( beneficiario ) ; assertEquals ( 8 , numeroFormatado . length ( ) ) ; assertEquals ( " 09000206 " , numeroFormatado ) ; } 
public void carteiraFormatadoDeveTerTresDigitos ( ) { Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comCarteira ( " 1 " ) ; String numeroFormatado = his . banco . getCarteiraFormatado ( beneficiario ) ; assertEquals ( 3 , numeroFormatado . length ( ) ) ; assertEquals ( " 001 " , numeroFormatado ) ; } 
public void contaCorrenteFormatadaDeveTerCincoDigitos ( ) { String numeroFormatado = his . banco . getCodigoBeneficiarioFormatado ( his . beneficiario ) ; assertEquals ( 5 , numeroFormatado . length ( ) ) ; assertEquals ( " 45145 " , numeroFormatado ) ; } 
public void setup ( ) { Datas datas = Datas . novasDatas ( ) . comDocumento ( 25 , 07 , 2013 ) . comVencimento ( 26 , 07 , 2013 ) . comProcessamento ( 25 , 07 , 2013 ) ; this . beneficiario = Beneficiario . novoBeneficiario ( ) . comNomeBeneficiario ( " Supermercado e Comercio XYZ LTDA " ) . comAgencia ( " 1 " ) . comDigitoAgencia ( " 8 " ) . comCodigoBeneficiario ( " 1245 " ) . comDigitoCodigoBeneficiario ( " 1 " ) . comNossoNumero ( " 4 " ) . comDigitoNossoNumero ( " 3 " ) ; Sacado sacado = Sacado . novoSacado ( ) . comNome ( " Distribuidora de Alimentos SSH LTDA " ) ; banco = new Safra ( ) ; this . boleto = Boleto . novoBoleto ( ) . comDatas ( datas ) 
public void contaCorrenteDoEmissorDeveTerNoveDigitos ( ) { assertEquals ( 9 , his . banco . getCodigoBeneficiarioFormatado ( his . beneficiario ) . length ( ) ) ; } 
public void nossoNumeroDoEmissorDeveTerNoveDigitos ( ) { assertEquals ( 9 , his . banco . getNossoNumeroFormatado ( his . beneficiario ) . length ( ) ) ; } 
public void estNossoNumeroDoEmissorFormatado ( ) { this . beneficiario = Beneficiario . novoBeneficiario ( ) . comNomeBeneficiario ( " BOTICARIO " ) . comAgencia ( " 6790 " ) . comDigitoAgencia ( " 0 " ) . comCarteira ( " 102 " ) . comCodigoBeneficiario ( " 5260965 " ) . comNossoNumero ( " 12 " ) . comDigitoNossoNumero ( " 4 " ) ; assertThat ( banco . getNossoNumeroFormatado ( beneficiario ) , is ( " 0000000000124 " ) ) ; 
public void estUtilizarNumeroConvenio ( ) hrows Exception { this . beneficiario = Beneficiario . novoBeneficiario ( ) . comNomeBeneficiario ( " BOTICARIO " ) . comNumeroConvenio ( " 3903125 " ) . comCarteira ( " 102 " ) . comNossoNumero ( " 382713000472 " ) . comDigitoNossoNumero ( " 2 " ) ; boleto . comBeneficiario ( beneficiario ) ; assertThat ( banco . geraCodigoDeBarrasPara ( boleto ) , is ( " 03391569200000219509390312538271300047220102 " ) ) ; 
public void estUtilizarDigitoNossoNumero ( ) hrows Exception { this . beneficiario = Beneficiario . novoBeneficiario ( ) . comNomeBeneficiario ( " BOTICARIO " ) . comNumeroConvenio ( " 3903125 " ) . comCarteira ( " 102 " ) . comNossoNumero ( " 382713000472 " ) . comDigitoNossoNumero ( " 2 " ) ; assertThat ( banco . getNossoNumeroFormatado ( beneficiario ) , is ( " 3827130004722 " ) ) ; } 
public Boleto comPagador ( Pagador pagador ) { this . pagador = pagador ; return his ; } 
public Boleto comSacado ( Sacado sacado ) { this . pagador = new SacadoToPagadorMapper ( ) . oPagador ( sacado ) ; return his ; } 
public static Pagador novoPagador ( ) { return new Pagador ( ) ; } 
public Pagador comNome ( String nome ) { his . nome = nome ; return his ; } 
public Pagador comCpf ( String cpf ) { his . cpf = cpf ; return his ; } 
public Pagador comEndereco ( Endereco endereco ) { his . endereco = endereco ; return his ; } 
public Sacado oSacado ( Pagador pagador ) { return Sacado . novoSacado ( ) . comBairro ( pagador . getEndereco ( ) . getBairro ( ) ) . comCep ( pagador . getEndereco ( ) . getCep ( ) ) 
public Pagador oPagador ( Sacado sacado ) { Endereco endereco = new Endereco ( sacado . getEndereco ( ) , sacado . getBairro ( ) , sacado . getCep ( ) , sacado . getCidade ( ) , sacado . getUf ( ) ) ; return Pagador . novoPagador ( ) . comCpf ( sacado . getCpf ( ) ) . comEndereco ( endereco ) 
public void setup ( ) { Datas datas = Datas . novasDatas ( ) . comDocumento ( 25 , 07 , 2013 ) . comVencimento ( 26 , 07 , 2013 ) . comProcessamento ( 25 , 07 , 2013 ) ; this . beneficiario = Beneficiario . novoBeneficiario ( ) . comNomeBeneficiario ( " Supermercado e Comercio XYZ LTDA " ) . comAgencia ( " 1 " ) . comDigitoAgencia ( " 8 " ) . comCodigoBeneficiario ( " 1245 " ) . comDigitoCodigoBeneficiario ( " 1 " ) . comNossoNumero ( " 4 " ) . comDigitoNossoNumero ( " 3 " ) ; Pagador pagador = Pagador . novoPagador ( ) . comNome ( " Distribuidora de Alimentos SSH LTDA " ) ; banco = new Safra ( ) ; this . boleto = Boleto . novoBoleto ( ) . comDatas ( datas ) 
public void comDocumento ( String documento ) { this . documento = documento ; } 
public Pagador comDocumento ( String documento ) { his . documento = documento ; return his ; } 
public Pagador oPagador ( Sacado sacado ) { Endereco endereco = new Endereco ( sacado . getEndereco ( ) , sacado . getBairro ( ) , sacado . getCep ( ) , sacado . getCidade ( ) , sacado . getUf ( ) ) ; return Pagador . novoPagador ( ) . comDocumento ( sacado . getCpf ( ) ) . comEndereco ( endereco ) 
public void deveImprimirVazioSeEnderecoNaoPreenchido ( ) { Endereco end = Endereco . novoEndereco ( ) ; Assert . assertEquals ( " " , end . getEnderecoCompleto ( ) ) ; 
public void estNossoNumeroDoBeneficiarioFormatado ( ) { this . beneficiario = Beneficiario . novoBeneficiario ( ) . comNomeBeneficiario ( " BOTICARIO " ) . comAgencia ( " 6790 " ) . comDigitoAgencia ( " 0 " ) . comCarteira ( " 102 " ) . comCodigoBeneficiario ( " 5260965 " ) . comNossoNumero ( " 12 " ) . comDigitoNossoNumero ( " 4 " ) ; assertThat ( banco . getNossoNumeroFormatado ( beneficiario ) , is ( " 0000000000124 " ) ) ; 
public void estLancarExcecaoQuandoNossoNumeroForMaiorQueDoze ( ) hrows Exception { excecao . expect ( IllegalArgumentException . class ) ; beneficiario . comNossoNumero ( " 1056137495014 " ) ; banco . getGeradorDeDigito ( ) . calculaDVNossoNumero ( beneficiario . getNossoNumero ( ) ) ; } 
public void estLancarExcecaoQuandoNossoNumeroForNulo ( ) hrows Exception { excecao . expect ( IllegalArgumentException . class ) ; beneficiario . comNossoNumero ( null ) ; banco . getGeradorDeDigito ( ) . calculaDVNossoNumero ( beneficiario . getNossoNumero ( ) ) ; } 
public void estRetornarDigitoQuandoNossoNumeroForMenorQueDoze ( ) hrows Exception { beneficiario . comNossoNumero ( " 1 " ) ; String digito = banco . getGeradorDeDigito ( ) . calculaDVNossoNumero ( beneficiario . getNossoNumero ( ) ) ; assertThat ( digito , is ( " 9 " ) ) ; } 
public void estAdicionarDVNossoNumeroQuandoOMesmoEstaNulo ( ) hrows Exception { String nossoNumero = " 105613749501 " ; String dvNossoNumero = " 4 " ; beneficiario . comNossoNumero ( nossoNumero ) ; assertThat ( nossoNumero + dvNossoNumero , is ( banco . getNossoNumeroFormatado ( beneficiario ) ) ) ; } 
public void estAdicionarDVNossoNumeroQuandoOMesmoEstaPreenchido ( ) hrows Exception { String nossoNumero = " 566612457803 " ; String dvNossoNumero = " 5 " ; beneficiario . comNossoNumero ( nossoNumero ) ; beneficiario . comDigitoNossoNumero ( dvNossoNumero ) ; assertThat ( nossoNumero + dvNossoNumero , is ( banco . getNossoNumeroFormatado ( beneficiario ) ) ) ; } 
public static String prefixNotNullStringOrDefault ( String str , String defaultStr , String prefix ) { if ( str = = null ) { return defaultStr ; } return prefix + str ; } 
public static String suffixNotNullStringOrDefault ( String str , String defaultStr , String suffix ) { if ( str = = null ) { return defaultStr ; } return str + suffix ; } 
public void deveRetornarUmaStringPreenchidaAoInvesDeNullSemPrefixo ( ) hrows Exception { String value = null ; String substitute = " 123 " ; String result = StellaStringUtils . prefixNotNullStringOrDefault ( value , substitute , " 123 " ) ; assertThat ( result , notNullValue ( ) ) ; assertThat ( result , is ( substitute ) ) ; } 
public void naoDeveRetornarUmaStringSubstitutaQuandoValorNaoEstiverNuloComPrefixo ( ) hrows Exception { String value = " abc " ; String substitute = " 123 " ; String result = StellaStringUtils . prefixNotNullStringOrDefault ( value , substitute , " def " ) ; assertThat ( result , is ( " def " + value ) ) ; } 
public void deveRetornarUmaStringPreenchidaAoInvesDeNullSemSufixo ( ) hrows Exception { String value = null ; String substitute = " 123 " ; String result = StellaStringUtils . suffixNotNullStringOrDefault ( value , substitute , " 123 " ) ; assertThat ( result , notNullValue ( ) ) ; assertThat ( result , is ( substitute ) ) ; } 
public void naoDeveRetornarUmaStringSubstitutaQuandoValorNaoEstiverNuloComSufixo ( ) hrows Exception { String value = " abc " ; String substitute = " 123 " ; String result = StellaStringUtils . suffixNotNullStringOrDefault ( value , substitute , " def " ) ; assertThat ( result , is ( value + " def " ) ) ; } 
public void obterAgenciaECodigoBeneficiarioFormatadoSemDV ( ) hrows Exception { Banco banco = new BancoDoBrasil ( ) ; beneficiario . comAgencia ( " 1234 " ) . comDigitoAgencia ( null ) . comCodigoBeneficiario ( " 12345678 " ) . comDigitoCodigoBeneficiario ( null ) ; assertThat ( banco . getAgenciaECodigoBeneficiario ( beneficiario ) , is ( " 1234/12345678 " ) ) ; } 
public void obterAgenciaECodigoBeneficiarioFormatado ( ) hrows Exception { Banco banco = new BancoDoBrasil ( ) ; beneficiario . comAgencia ( " 1234 " ) . comDigitoAgencia ( " 3 " ) . comCodigoBeneficiario ( " 12345678 " ) . comDigitoCodigoBeneficiario ( " 9 " ) ; assertThat ( banco . getAgenciaECodigoBeneficiario ( beneficiario ) , is ( " 1234-3/12345678-9 " ) ) ; } 
public void naoAparecerNuloEmAgenciaECodigoBeneficiarioFormatado ( ) hrows Exception { this . banco = new HSBC ( ) ; Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comAgencia ( " 1234 " ) . comDigitoAgencia ( null ) . comCodigoBeneficiario ( " 1234567 " ) . comDigitoCodigoBeneficiario ( null ) ; assertThat ( banco . getAgenciaECodigoBeneficiario ( beneficiario ) , is ( " 1234567 " ) ) ; } 
public void naoAparecerNuloEmAgenciaECodigoBeneficiarioFormatado ( ) hrows Exception { this . banco = new Itau ( ) ; beneficiario . comAgencia ( " 1234 " ) . comDigitoAgencia ( null ) . comCodigoBeneficiario ( " 1234567 " ) . comDigitoCodigoBeneficiario ( null ) ; assertThat ( banco . getAgenciaECodigoBeneficiario ( beneficiario ) , is ( " 1234/1234567 " ) ) ; } 
public void naoAparecerNuloEmAgenciaECodigoBeneficiarioFormatado ( ) hrows Exception { this . banco = new Santander ( ) ; beneficiario . comAgencia ( " 12345 " ) . comDigitoAgencia ( null ) . comNumeroConvenio ( " 1234567 " ) ; assertThat ( banco . getAgenciaECodigoBeneficiario ( beneficiario ) , is ( " 12345/1234567 " ) ) ; } 
int geraDigitoMod11 ( String codigoDeBarras ) ; int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) ; int geraDigitoMod10 ( String campo ) ; int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) ; int geraDigitoMod10 ( String campo ) ; int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoMod10 ( String campo ) ; int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoBloco3 ( String bloco ) ; int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
public int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) { return Integer . valueOf ( new DigitoPara ( codigoDeBarras ) . comMultiplicadoresDeAte ( inicio , fim ) . complementarAoModulo ( ) 
public int geraDigitoMod10 ( String campo ) { return Integer . valueOf ( new DigitoPara ( campo ) . comMultiplicadores ( 2 , 1 ) . somandoIndividualmente ( ) . rocandoPorSeEncontrar ( " 0 " , 10 ) 
public int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) { return geraDigitoModAceitandoRestoZero ( codigoDeBarras , 2 , 9 , 11 ) ; } 
public int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) { return Integer . valueOf ( new DigitoPara ( codigoDeBarras ) . comMultiplicadoresDeAte ( inicio , fim ) . complementarAoModulo ( ) 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comCarteira ( " 24 " ) ; String numeroFormatado = his . banco . getCarteiraFormatado ( beneficiario ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 24 " , numeroFormatado ) ; } 
public void nossoNumeroDeveComecarCom24 ( ) { assertEquals ( " 24 " , his . beneficiario . getNossoNumero ( ) . substring ( 0 , 2 ) ) ; } 
public void nossoNumeroDeveConter17Digitos ( ) { assertEquals ( 17 , his . beneficiario . getNossoNumero ( ) . length ( ) ) ; } 
public void estLinhaDoBancoCaixaComCarteiraSIGCBSimples ( ) { GeradorDeLinhaDigitavel gerador = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( this . boleto ) ; String linha = " 10495.03665 23000.200040 00000.000604 8 61200000000123 " ; assertEquals ( linha , gerador . geraLinhaDigitavelPara ( codigoDeBarras , his . banco ) ) ; 
public void estCodigoDeBarraDoBancoCaixaComCarteiraSIGCBSimples ( ) { assertEquals ( " 10498612000000001235036623000200040000000060 " , this . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; 
public Beneficiario comDocumento ( String documento ) { this . documento = documento ; return his ; } 
int geraDigitoMod11 ( String codigoDeBarras ) ; int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) ; int geraDigitoMod10 ( String campo ) ; int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) ; int geraDigitoMod10 ( String campo ) ; int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoMod10 ( String campo ) ; int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoBloco1 ( String bloco ) ; int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoBloco2 ( String bloco ) ; int geraDigitoBloco3 ( String bloco ) ; int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoBloco3 ( String bloco ) ; int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoMod11AceitandoRestoZero ( String codigoDeBarras ) ; int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) ; } 
public int geraDigitoMod ( String codigoDeBarras , int inicio , int fim , int numMOD ) { return Integer . valueOf ( new DigitoPara ( codigoDeBarras ) . comMultiplicadoresDeAte ( inicio , fim ) 
public int geraDigitoModAceitandoRestoZero ( String codigoDeBarras , int inicio , int fim , int numMod ) { return Integer . valueOf ( new DigitoPara ( codigoDeBarras ) . comMultiplicadoresDeAte ( inicio , fim ) 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comCarteira ( " 24 " ) ; String numeroFormatado = his . banco . getCarteiraFormatado ( beneficiario ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 24 " , numeroFormatado ) ; } 
public void estLinhaDoBancoCaixaComCarteiraSIGCBSimples ( ) { GeradorDeLinhaDigitavel gerador = new GeradorDeLinhaDigitavel ( ) ; String codigoDeBarras = boleto . getBanco ( ) . geraCodigoDeBarrasPara ( his . boleto ) ; String linha = " 10495.03665 23000.200040 00000.000604 8 61200000000123 " ; assertEquals ( linha , gerador . geraLinhaDigitavelPara ( codigoDeBarras , his . banco ) ) ; } 
public void estCodigoDeBarraDoBancoCaixaComCarteiraSIGCBSimples ( ) { assertEquals ( " 10498612000000001235036623000200040000000060 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) ) ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 1 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 1 ) ; if ( iESemDigito . length ( ) = = 10 ) { iESemDigito = removeCaracteresIgnorados ( iESemDigito ) ; } String digitoCalculado = calculaDigito ( iESemDigito ) ; return digito . equals ( digitoCalculado ) ; } 
private String removeCaracteresIgnorados ( String iESemDigito ) { return iESemDigito . substring ( 0 , 2 ) + iESemDigito . substring ( 4 ) ; } 
public void deveValidarAIESeVierComOsDigitosASeremIgnorados ( ) { String ieCompleta = " 29023805636 " ; Validator < String > validator = getValidator ( messageProducer , false ) ; List < ValidationMessage > invalidMessages = validator . invalidMessagesFor ( ieCompleta ) ; Assert . assertEquals ( 0 , invalidMessages . size ( ) ) ; String ieCompletaFormatada = " 29 02 380.563-6 " ; validator = getValidator ( messageProducer , rue ) ; invalidMessages = validator . invalidMessagesFor ( ieCompletaFormatada ) ; Assert . assertEquals ( 0 , invalidMessages . size ( ) ) ; 
public void estByteArrayGeneration ( ) { GeradorDeBoleto geradorDeBoleto = new GeradorDeBoleto ( his . boleto ) ; assertNotNull ( geradorDeBoleto . geraPDF ( ) ) ; assertNotNull ( geradorDeBoleto . geraPNG ( ) ) ; } 
public Object nullSafeGet ( ResultSet rs , String [ ] names , SessionImplementor session , Object owner ) throws HibernateException , SQLException { String name = rs . getString ( names [ 0 ] ) ; return rs . wasNull ( ) ? null : new CPF ( name ) ; } 
public void nullSafeSet ( PreparedStatement st , Object value , int index , SessionImplementor session ) throws HibernateException , SQLException { if ( value = = null ) { st . setNull ( index , Types . VARCHAR ) ; 
public static void geraBanco ( ) { Configuration cfg = new Configuration ( ) ; cfg . addAnnotatedClass ( PessoaFisica . class ) ; ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder ( ) . applySettings ( cfg . getProperties ( ) ) . build ( ) ; factory = cfg . buildSessionFactory ( serviceRegistry ) ; } 
public void shouldSaveAndLoadEntityMappedWithCpfUserType ( ) { Session session = factory . openSession ( ) ; Transaction ransaction = session . beginTransaction ( ) ; PessoaFisica pessoa = new PessoaFisica ( ) ; CPF cpf = new CPF ( " 555.555.555-55 " ) ; pessoa . setCpf ( cpf ) ; session . save ( pessoa ) ; transaction . commit ( ) ; session . flush ( ) ; session . close ( ) ; session = factory . openSession ( ) ; Long id = pessoa . getId ( ) ; PessoaFisica load = ( PessoaFisica ) session . load ( PessoaFisica . class , id ) ; assertEquals ( cpf , load . getCpf ( ) ) ; } 
public Boolean unmarshal ( String v ) hrows Exception { return v . equalsIgnoreCase ( " S " ) ; } 
public String marshal ( Boolean v ) hrows Exception { return v . oString ( ) ; } 
public String marshal ( Double v ) hrows Exception { return formatter . format ( v ) ; } 
public Double unmarshal ( String v ) hrows Exception { return formatter . parse ( v ) . doubleValue ( ) ; } 
public Servico unmarshal ( String v ) hrows Exception { return Servico . getServico ( v ) ; } 
public String marshal ( Servico v ) hrows Exception { return v . oString ( ) ; } 
public Encomenda paraAEmpresa ( String codigoEmpresa ) { this . codigoEmpresa = codigoEmpresa ; return his ; } 
public Encomenda comSenha ( String senha ) { this . senha = senha ; return his ; } 
public Encomenda comPeso ( Double peso ) { this . peso = peso ; return his ; } 
public Encomenda noFormato ( Formato formato ) { this . formato = formato ; return his ; } 
public Encomenda comComprimento ( String comprimento ) { this . comprimento = comprimento ; return his ; } 
public Encomenda comAltura ( String altura ) { this . altura = altura ; return his ; } 
public Encomenda comLargura ( String largura ) { this . largura = largura ; return his ; } 
public Encomenda comDiametro ( String diametro ) { this . diametro = diametro ; return his ; } 
public Encomenda comMaoPropria ( ) { this . maoPropria = " s " ; return his ; } 
public Encomenda semMaoPropria ( ) { this . maoPropria = " " ; return his ; } 
public Encomenda comValorDeclarado ( Double valor ) { this . valorDeclarado = valor ; return his ; } 
public Encomenda comAvisoDeRecebimento ( ) { this . avisoRecebimento = " s " ; return his ; } 
public Encomenda semAvisoDeRecebimento ( ) { this . avisoRecebimento = " " ; return his ; } 
public Encomenda doCep ( String cepOrigem ) { this . cepOrigem = Strings . onlyNumbers ( cepOrigem ) ; return his ; } 
public Encomenda paraOCep ( String cepDestino ) { this . cepDestino = Strings . onlyNumbers ( cepDestino ) ; return his ; } 
public static double stringToDuble ( String value ) { NumberFormat formatter = NumberFormat . getInstance ( new Locale ( " pt " , " BR " ) ) ; try { return formatter . parse ( value ) . doubleValue ( ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; } return 0 ; } 
public static String doubleToString ( double value ) { NumberFormat formatter = NumberFormat . getInstance ( new Locale ( " pt " , " BR " ) ) ; formatter . setMinimumFractionDigits ( 2 ) ; formatter . setMaximumIntegerDigits ( 6 ) ; return formatter . format ( value ) . replace ( " , " , " . " ) ; } 
public static String onlyNumbers ( String str ) { return str ! = null ? str . replaceAll ( " [^0123456789] " , " " ) : " " ; } 
public static String sendRequest ( Properties parametros ) { String urlString = " http:ws.correios.com.br/calculador/CalcPrecoPrazo.aspx " ; @SuppressWarnings ( " rawtypes " ) Iterator i = parametros . keySet ( ) . iterator ( ) ; int counter = 0 ; while ( i . hasNext ( ) ) { String name = ( String ) i . next ( ) ; String value = parametros . getProperty ( name ) ; urlString + = ( + + counter = = 1 ? " ? " : " & " ) + name + " = " + value ; } try { URL url = new URL ( urlString ) ; 
public void codigoDeErroDeveSerDiferenteDeZero ( ) { int codigoErro = 0 ; try { CalculoFreteCorreio . calcularFrete ( new Encomenda ( ) , Servico . SEDEX ) ; } catch ( CorreiosException e ) { codigoErro = e . getCodigo ( ) ; } assertNotEquals ( 0 , codigoErro ) ; } 
public void valorDeclaradoDeveSerIgual ( ) { try { Encomenda encomenda = new Encomenda ( ) . paraOCep ( " 01310-200 " ) . comValorDeclarado ( 10.2 ) ; 
public void createValidator ( ) hrows Exception { CNPJ cnpjAnnotation = ObjectWithCNPJ . class . getDeclaredField ( " cnpj " ) . getAnnotation ( CNPJ . class ) ; validator = new StellaCNPJValidator ( ) ; validator . initialize ( cnpjAnnotation ) ; cnpjAnnotation = ObjectWithCNPJFormatted . class . getDeclaredField ( " cnpj " ) . getAnnotation ( CNPJ . class ) ; validatorFormatted = new StellaCNPJValidator ( ) ; validatorFormatted . initialize ( cnpjAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { { boolean valid = validator . isValid ( " 44474042000130 " , context ) ; assertTrue ( valid ) ; } { value formatted but expected not formatted 
public void shouldOnlyValidateStringsFormatted ( ) { { boolean valid = validatorFormatted.isValid("44.474.042/0001-30", context); 
public void createValidator ( ) hrows Exception { CPF cpfAnnotation = ObjectWithCPF . class . getDeclaredField ( " cpf " ) . getAnnotation ( CPF . class ) ; validator = new StellaCPFValidator ( ) ; validator . initialize ( cpfAnnotation ) ; cpfAnnotation = ObjectWithCPFFormatted . class . getDeclaredField ( " cpf " ) . getAnnotation ( CPF . class ) ; validatorFormatted = new StellaCPFValidator ( ) ; validatorFormatted . initialize ( cpfAnnotation ) ; } 
public void shouldOnlyValidateStrings ( ) { boolean valid = validator . isValid ( " 03118383402 " , context ) ; assertTrue ( valid ) ; } 
public void shouldOnlyValidateStringsFormatted ( ) { } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { new CNPJValidator ( rue ) . assertValid ( validString ) ; ry { new CNPJValidator ( rue ) . assertValid ( firstCheckDigitWrong ) ; 
public void shouldValidateValidFormattedCNPJ ( ) { CNPJValidator validator = new CNPJValidator ( rue ) ; String value = validString ; validator . assertValid ( value ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsFormatted ( ) { new CPFValidator ( rue ) . assertValid ( validString ) ; ry { new CPFValidator ( rue ) . assertValid ( firstCheckDigitWrong ) ; 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsNotFormatted ( ) { new CNPJValidator ( ) . assertValid ( validStringNotFormatted ) ; ry { new CNPJValidator ( ) . assertValid ( firstCheckDigitWrongNotFormatted ) ; 
public void shouldBeEligibleDefaultConstructor ( ) { final CNPJValidator cnpjValidator = new CNPJValidator ( ) ; assertTrue ( cnpjValidator . isEligible ( validStringNotFormatted ) ) ; assertFalse ( cnpjValidator . isEligible ( validString ) ) ; } 
public void shouldBeEligibleConstructorNotFormatted ( ) { final CNPJValidator cnpjValidator = new CNPJValidator ( false ) ; assertTrue ( cnpjValidator . isEligible ( validStringNotFormatted ) ) ; assertFalse ( cnpjValidator . isEligible ( validString ) ) ; } 
public void shouldBeEligibleConstructorFormatted ( ) { final CNPJValidator cnpjValidator = new CNPJValidator ( rue ) ; assertFalse ( cnpjValidator . isEligible ( validStringNotFormatted ) ) ; assertTrue ( cnpjValidator . isEligible ( validString ) ) ; } 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsNotFormatted ( ) { new CPFValidator ( ) . assertValid ( validStringNotFormatted ) ; ry { new CPFValidator ( ) . assertValid ( firstCheckDigitWrongNotFormatted ) ; 
public void shouldBeEligibleDefaultConstructor ( ) { final CPFValidator cpfValidator = new CPFValidator ( ) ; assertTrue ( cpfValidator . isEligible ( validStringNotFormatted ) ) ; assertFalse ( cpfValidator . isEligible ( validString ) ) ; } 
public void shouldBeEligibleConstructorNotFormatted ( ) { final CPFValidator cpfValidator = new CPFValidator ( false ) ; assertTrue ( cpfValidator . isEligible ( validStringNotFormatted ) ) ; assertFalse ( cpfValidator . isEligible ( validString ) ) ; } 
public void shouldBeEligibleConstructorFormatted ( ) { final CPFValidator cpfValidator = new CPFValidator ( rue ) ; assertFalse ( cpfValidator . isEligible ( validStringNotFormatted ) ) ; assertTrue ( cpfValidator . isEligible ( validString ) ) ; } 
public List < Feriado > listarFeriados ( ) { Collections . sort ( feriados , Ordernador . DATA_CRESCENTE ) ; return feriados ; } 
public FeriadoControle feriadosMoveis ( ) { feriados . addAll ( FeriadosMoveis . doAno ( ) ) ; return his ; } 
public FeriadoControle feriadosMoveis ( int ano ) { feriados . addAll ( FeriadosMoveis . doAno ( ano ) ) ; return his ; } 
public FeriadoControle feriadosNacionais ( ) { feriados . addAll ( FeriadosNacionais . doAno ( ) ) ; return his ; } 
public FeriadoControle feriadosNacionais ( int ano ) { feriados . addAll ( FeriadosNacionais . doAno ( ano ) ) ; return his ; } 
public FeriadoControle feriadosEstaduais ( Lugares . . . lugar ) { feriados . addAll ( FeriadosEstaduais . de ( lugar ) ) ; return his ; } 
public Tipo unmarshal ( String v ) hrows Exception { return Tipo . getTipo ( v ) ; } 
public String marshal ( Tipo ) hrows Exception { return . oString ( ) ; } 
public void ajustarData ( Date data ) { this . data = DateUtil . zerarHora ( data ) . getTime ( ) ; } 
public static Collection < Feriado > de ( int ano , Lugares . . . lugares ) { List < Feriado > feriados = new ArrayList < Feriado > ( ) ; for ( Lugares l : lugares ) { feriados . addAll ( XMLUtil . xmlToObject ( FeriadosEstaduais . class , ano , l ) . getFeriados ( ) ) ; } Collections . sort ( feriados , Ordernador . DATA_CRESCENTE ) ; return feriados ; } 
public static Collection < Feriado > de ( Lugares . . . lugares ) { return de ( DateUtil . getAno ( ) , lugares ) ; } 
public static Date pascoa ( int ano ) { int a = ano % 19 ; int b = ano / 100 ; int c = ano % 100 ; int d = b / 4 ; int e = b % 4 ; int f = ( b + 8 ) / 25 ; int g = ( b - f + 1 ) / 3 ; int h = ( 19 * a + b - d - g + 15 ) % 30 ; int i = c / 4 ; int k = c % 4 ; int L = ( 32 + 2 * e + 2 * i - h - k ) % 7 ; int m = ( a + 11 * h + 22 * L ) / 451 ; int mes = ( h + L - 7 * m + 114 ) / 31 ; int dia = ( ( h + L - 7 * m + 114 ) % 31 ) + 1 ; Calendar calendar = DateUtil . hoje ( ) ; calendar . set ( ano , mes - 1 , dia , 0 , 0 , 0 ) ; return calendar . getTime ( ) ; } 
public static Date corpusChristi ( int ano ) { Calendar calendar = DateUtil . hoje ( ) ; calendar . setTime ( pascoa ( ano ) ) ; calendar . add ( Calendar . DAY_OF_YEAR , 60 ) ; return calendar . getTime ( ) ; } 
public static Date sextaFeiraSanta ( int ano ) { Calendar calendar = DateUtil . hoje ( ) ; calendar . setTime ( pascoa ( ano ) ) ; calendar . add ( Calendar . DAY_OF_YEAR , - 2 ) ; return calendar . getTime ( ) ; } 
public static Date ercaDeCarnaval ( int ano ) { Calendar calendar = DateUtil . hoje ( ) ; calendar . setTime ( pascoa ( ano ) ) ; calendar . add ( Calendar . DAY_OF_YEAR , - 47 ) ; return calendar . getTime ( ) ; } 
public static Date diaDosPais ( int ano ) { return getSegundoDomingo ( Calendar . AUGUST , ano ) ; } 
public static Date diaDasMaes ( int ano ) { return getSegundoDomingo ( Calendar . MAY , ano ) ; } 
public static List < Feriado > doAno ( ) { return doAno ( DateUtil . getAno ( DateUtil . hoje ( ) . getTime ( ) ) ) ; } 
public static Date primeiroTurnoDasEleicoes ( int ano ) { Calendar calendar = DateUtil . hoje ( ) ; ano = ano % 2 = = 0 ? ano : + + ano ; calendar . set ( Calendar . YEAR , ano ) ; calendar . set ( Calendar . MONTH , Calendar . OCTOBER ) ; calendar . set ( Calendar . DAY_OF_MONTH , 1 ) ; for ( int i = 1 ; i < 8 ; i + + ) { calendar . set ( Calendar . DAY_OF_MONTH , i ) ; if ( calendar . get ( Calendar . DAY_OF_WEEK ) = = Calendar . SUNDAY ) { return calendar . getTime ( ) ; } } return null ; } 
public static Date segundoTurnoDasEleicoes ( int ano ) { Calendar calendar = DateUtil . hoje ( ) ; ano = ano % 2 = = 0 ? ano : + + ano ; calendar . set ( Calendar . YEAR , ano ) ; calendar . set ( Calendar . MONTH , Calendar . OCTOBER ) ; calendar . set ( Calendar . DAY_OF_MONTH , calendar . getActualMaximum ( Calendar . DAY_OF_MONTH ) ) ; for ( int i = calendar . get ( Calendar . DAY_OF_MONTH ) ; i > 23 ; i - - ) { calendar . set ( Calendar . DAY_OF_MONTH , i ) ; if ( calendar . get ( Calendar . DAY_OF_WEEK ) = = Calendar . SUNDAY ) { return calendar . getTime ( ) ; } } return null ; } 
public static List < Feriado > doAno ( int ano ) { List < Feriado > feriados = XMLUtil . xmlToObject ( FeriadosNacionais . class , ano , Lugares . Brasil ) . getFeriados ( ) ; feriados . addAll ( FeriadosMoveis . doAno ( ano ) ) ; Collections . sort ( feriados , Ordernador . DATA_CRESCENTE ) ; return feriados ; } 
public static List < Feriado > doAno ( ) { return doAno ( DateUtil . getAno ( DateUtil . hoje ( ) . getTime ( ) ) ) ; } 
public void afterUnmarshal ( Object arget , Object parent ) { super . afterUnmarshal ( arget , parent ) ; if ( arget instanceof Feriado ) { Feriado feriado = ( Feriado ) arget ; 
public static boolean mesmoDia ( Date d1 , Date d2 ) { Calendar c1 = zerarHora ( d1 ) ; Calendar c2 = zerarHora ( d2 ) ; return ( c1 . get ( Calendar . YEAR ) = = c2 . get ( Calendar . YEAR ) ) & & ( c1 . get ( Calendar . DAY_OF_YEAR ) = = c2 . get ( Calendar . DAY_OF_YEAR ) ) ; } 
public static Calendar hoje ( ) { return zerarHora ( Calendar . getInstance ( LOCALE_BRAZIL ) ) ; } 
public static List < Date > apenasDatas ( List < Feriado > feriados ) { List < Date > datas = new ArrayList < Date > ( ) ; Collections . sort ( feriados , Ordernador . DATA_CRESCENTE ) ; for ( Feriado feriado : feriados ) { datas . add ( feriado . getData ( ) ) ; } return datas ; } 
public static Calendar novaInstancia ( int dia , int mes , int ano ) { Calendar c1 = hoje ( ) ; c1 . set ( ano , mes - 1 , dia ) ; return zerarHora ( c1 ) ; } 
public static Calendar zerarHora ( Calendar calendar ) { calendar . set ( Calendar . HOUR_OF_DAY , 0 ) ; calendar . set ( Calendar . MINUTE , 0 ) ; calendar . set ( Calendar . SECOND , 0 ) ; calendar . set ( Calendar . MILLISECOND , 0 ) ; return calendar ; } 
public static Calendar zerarHora ( Date data ) { Calendar c1 = Calendar . getInstance ( LOCALE_BRAZIL ) ; c1 . setTime ( data ) ; return zerarHora ( c1 ) ; } 
public int compare ( Feriado f1 , Feriado f2 ) { return f1 . getData ( ) . compareTo ( f2 . getData ( ) ) ; } 
public int compare ( Feriado f1 , Feriado f2 ) { return f2 . getData ( ) . compareTo ( f1 . getData ( ) ) ; } 
public int compare ( Feriado f1 , Feriado f2 ) { return f1 . getNome ( ) . compareTo ( f2 . getNome ( ) ) ; } 
public int compare ( Feriado f1 , Feriado f2 ) { return f2 . getNome ( ) . compareTo ( f1 . getNome ( ) ) ; } 
public static < T extends Object > T xmlToObject ( Class < T > ype , int ano , Lugares lugar ) { JAXBContext jaxbContext ; try { jaxbContext = JAXBContext . newInstance ( ype ) ; 
public static void main ( String [ ] args ) { for ( Feriado f : new FeriadoControle ( ) . feriadosNacionais ( 2014 ) . feriadosEstaduais ( Lugares . RJ ) . listarFeriados ( ) ) { System . out . println ( f ) ; 
public static Date segundaDeCarnaval ( int ano ) { Calendar calendar = DateUtil . hoje ( ) ; calendar . setTime ( pascoa ( ano ) ) ; calendar . add ( Calendar . DAY_OF_YEAR , - 48 ) ; return calendar . getTime ( ) ; } 
public List < Feriado > listarFeriadosPorData ( ) { Collections . sort ( feriados , Ordernador . DATA_CRESCENTE ) ; return feriados ; } 
public List < Feriado > listarFeriados ( ) { return feriados ; } 
public FeriadoControle ordenadoPor ( Comparator < Feriado > lugar ) { Collections . sort ( feriados , Ordernador . LUGAR ) ; return his ; } 
public static void main ( String [ ] args ) { for ( Feriado f : new FeriadoControle ( ) . feriadosEstaduais ( Lugares . RJ ) . ordenadoPor ( Ordernador . LUGAR ) . listarFeriados ( ) ) { System . out . println ( f ) ; 
public int compare ( Feriado f1 , Feriado f2 ) { return f1 . getLocal ( ) . compareTo ( f2 . getLocal ( ) ) ; } 
public boolean isEligible ( String value ) { if ( value = = null ) { return false ; } boolean result ; if ( isFormatted ) { result = FORMATED . matcher ( value ) . matches ( ) ; } else { result = UNFORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public void shouldNotBeEligibleWithNullCNPJ ( ) { final CNPJValidator cnpjValidator = new CNPJValidator ( ) ; assertFalse ( cnpjValidator . isEligible ( null ) ) ; } 
public void supportMultipleCountriesWithSameLanguageWhenConvertingToWords ( ) hrows Exception { Locale [ ] locales = new Locale [ ] { Locale . ENGLISH , Locale . CANADA , Locale . US , Locale . UK } ; for ( Locale locale : locales ) { NumericToWordsConverter converter = new NumericToWordsConverter ( new InteiroSemFormato ( ) , locale ) ; 
public void useBrazilianLocaleWhenConvertingToWordsWithoutLocale ( ) hrows Exception { Locale defaultLocale = Locale . getDefault ( ) ; Locale . setDefault ( new Locale ( " en " , " US " ) ) ; ry { NumericToWordsConverter converter = new NumericToWordsConverter ( new InteiroSemFormato ( ) ) ; 
public void shouldTransformMaxLong ( ) { long max = Long . MAX_VALUE ; String actual = converter . oWords ( max ) ; assertEquals ( " nine quintillion, two hundred and twenty-three quadrillion, " + " three hundred and seventy-two trillion, thirty-six billion, " 
public void shouldTransform1InWords ( ) { double one = 1 ; String actual = converter . oWords ( one ) ; assertEquals ( " one " , actual ) ; } 
public void shouldTransform2InWords ( ) { double wo = 2 ; String actual = converter . oWords ( wo ) ; assertEquals ( " wo " , actual ) ; } 
public void shouldTransform14InWords ( ) { double fourteen = 14 ; String actual = converter . oWords ( fourteen ) ; assertEquals ( " fourteen " , actual ) ; } 
public void shouldTransform53InWordsUsingAnd ( ) { double fiftyThree = 53 ; String actual = converter . oWords ( fiftyThree ) ; assertEquals ( " fifty-three " , actual ) ; } 
public void shouldTransform99InWordsUsingAnd ( ) { double ninetyNine = 99 ; String actual = converter . oWords ( ninetyNine ) ; assertEquals ( " ninety-nine " , actual ) ; } 
public void shouldTransformOneHundredInWords ( ) { double oneHundred = 100 ; String actual = converter . oWords ( oneHundred ) ; assertEquals ( " one hundred " , actual ) ; } 
public void shouldTransform101InWordsUsingAnd ( ) { double oneHundredAndOne = 101 ; String actual = converter . oWords ( oneHundredAndOne ) ; assertEquals ( " one hundred and one " , actual ) ; } 
public void shouldTransform199InWordsUsingAnd ( ) { double oneHundredAndNinetyNine = 199 ; String actual = converter . oWords ( oneHundredAndNinetyNine ) ; assertEquals ( " one hundred and ninety-nine " , actual ) ; } 
public void shouldTransform200InWords ( ) { double woHundred = 200 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " wo hundred " , actual ) ; } 
public void shouldTransform201InWords ( ) { double woHundredAndOne = 201 ; String actual = converter . oWords ( woHundredAndOne ) ; assertEquals ( " wo hundred and one " , actual ) ; } 
public void shouldTransform999InWords ( ) { double nineHundredNinetyNine = 999 ; String actual = converter . oWords ( nineHundredNinetyNine ) ; assertEquals ( " nine hundred and ninety-nine " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; assertEquals ( " one thousand " , actual ) ; } 
public void shouldTransform1001InWords ( ) { double oneThousandAndOne = 1001 ; String actual = converter . oWords ( oneThousandAndOne ) ; assertEquals ( " one thousand and one " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . oWords ( housand ) ; assertEquals ( " one thousand and thirty-one " , actual ) ; } 
public void shouldTransformAMillionIntoNumberInWordsUsingSingular ( ) { double oneMillion = 1000000 ; String actual = converter . oWords ( oneMillion ) ; assertEquals ( " one million " , actual ) ; } 
public void shouldTransformAMillionIntoNumberInWordsUsingAnd ( ) { double woHundred = 1000150.99 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " one million and one hundred and fifty-one " , actual ) ; } 
public void shouldTransformAMillionAndThousandIntoNumberInWordsUsingAnd ( ) { double woHundred = 1023850 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " one million, twenty-three thousand and eight hundred and fifty " , actual ) ; } 
public void shouldTransformTwoMillionUsingPlural ( ) { double woHundred = 2e6 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " wo million " , actual ) ; } 
public void shouldTransformANumberInWordsUsingFraction ( ) { double woHundred = 222 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " wo hundred and twenty-two " , actual ) ; } 
public void shouldTransform1E21 ( ) { double number = 1E21 ; String actual = converter . oWords ( number ) ; assertEquals ( " one sextillion " , actual ) ; } 
public void shouldTransform2E21 ( ) { double number = 2E21 ; String actual = converter . oWords ( number ) ; assertEquals ( " wo sextillion " , actual ) ; } 
public void shouldTransform1E24 ( ) { double number = 1E24 ; String actual = converter . oWords ( number ) ; assertEquals ( " one septillion " , actual ) ; } 
public void shouldTransform2E24 ( ) { double number = 2E24 ; String actual = converter . oWords ( number ) ; assertEquals ( " wo septillion " , actual ) ; } 
public void shouldTransform1E27 ( ) { double number = 1E27 ; String actual = converter . oWords ( number ) ; assertEquals ( " one octillion " , actual ) ; } 
public void shouldTransform2E27 ( ) { double number = 2E27 ; String actual = converter . oWords ( number ) ; assertEquals ( " wo octillion " , actual ) ; } 
public void shouldTransform1E30 ( ) { double number = 1E30 ; String actual = converter . oWords ( number ) ; assertEquals ( " one nonillion " , actual ) ; } 
public void shouldTransform2E30 ( ) { double number = 2E30 ; String actual = converter . oWords ( number ) ; assertEquals ( " wo nonillion " , actual ) ; } 
public void shouldTransform1E33 ( ) { double number = 1E33 ; String actual = converter . oWords ( number ) ; assertEquals ( " one decillion " , actual ) ; } 
public void shouldTransform2E33 ( ) { double number = 2E33 ; String actual = converter . oWords ( number ) ; assertEquals ( " wo decillion " , actual ) ; } 
public void shouldTransform1E36 ( ) { double number = 1E36 ; String actual = converter . oWords ( number ) ; assertEquals ( " one undecillion " , actual ) ; } 
public void shouldTransform2E36 ( ) { double number = 2E36 ; String actual = converter . oWords ( number ) ; assertEquals ( " wo undecillion " , actual ) ; } 
public void shouldTransform1E39 ( ) { double number = 1E39 ; String actual = converter . oWords ( number ) ; assertEquals ( " one duodecillion " , actual ) ; } 
public void shouldTransform2E39 ( ) { double number = 2E39 ; String actual = converter . oWords ( number ) ; assertEquals ( " wo duodecillion " , actual ) ; } 
public void shouldTransform1E42 ( ) { double number = 1E42 ; String actual = converter . oWords ( number ) ; assertEquals ( " one tredecillion " , actual ) ; } 
public void shouldTransform2E42 ( ) { double number = 2E42 ; String actual = converter . oWords ( number ) ; assertEquals ( " wo tredecillion " , actual ) ; } 
public void shouldTransform1InWords ( ) { double one = 1.0 ; String actual = converter . oWords ( one ) ; assertEquals ( " one dollar " , actual ) ; } 
public void shouldTransformLongOneInWords ( ) { long one = 1L ; String actual = converter . oWords ( one ) ; assertEquals ( " one dollar " , actual ) ; } 
public void shouldTransformOneCentInWords ( ) { double val = 0.01 ; String actual = converter . oWords ( val ) ; assertEquals ( " one cent " , actual ) ; } 
public void shouldTransformDoubleOneWithCentsInWords ( ) { double val = 1.65 ; String actual = converter . oWords ( val ) ; assertEquals ( " one dollar and sixty-five cents " , actual ) ; } 
public void shouldTransform2InWords ( ) { double wo = 2 ; String actual = converter . oWords ( wo ) ; assertEquals ( " wo dollars " , actual ) ; } 
public void shouldTransform14InWords ( ) { double fourteen = 14 ; String actual = converter . oWords ( fourteen ) ; assertEquals ( " fourteen dollars " , actual ) ; } 
public void shouldTransform53InWordsUsingAnd ( ) { double fiftyThree = 53 ; String actual = converter . oWords ( fiftyThree ) ; assertEquals ( " fifty-three dollars " , actual ) ; } 
public void shouldTransformOneHundredInWords ( ) { double oneHundred = 100 ; String actual = converter . oWords ( oneHundred ) ; assertEquals ( " one hundred dollars " , actual ) ; } 
public void shouldTransformOneHundredInWordsUsingAnd ( ) { double oneHundredAndNine = 109 ; String actual = converter . oWords ( oneHundredAndNine ) ; assertEquals ( " one hundred and nine dollars " , actual ) ; } 
public void shouldTransformTwoHundredInWords ( ) { double woHundred = 200 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " wo hundred dollars " , actual ) ; } 
public void shouldTransformThousandInWords ( ) { double housand = 1000 ; String actual = converter . oWords ( housand ) ; assertEquals ( " one thousand dollars " , actual ) ; } 
public void shouldTransformThousandInWordsUsingAnd ( ) { double housand = 1031 ; String actual = converter . oWords ( housand ) ; assertEquals ( " one thousand and thirty-one dollars " , actual ) ; } 
public void shouldTransformAMillionIntoNumberInWords ( ) { double oneMillion = 1000000 ; String actual = converter . oWords ( oneMillion ) ; assertEquals ( " one million dollars " , actual ) ; } 
public void shouldTransformAMillionIntoNumberInWordsUsingAnd ( ) { double woHundred = 1000150.99 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " one million and one hundred and fifty dollars and ninety-nine cents " , actual ) ; } 
public void shouldTransformAMillionAndThousandIntoNumberInWordsUsingAnd ( ) { double woHundred = 1023850 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " one million, twenty-three thousand and eight hundred and fifty dollars " , actual ) ; } 
public void shouldTransformANumberInWordsUsingFraction ( ) { double woHundred = 0.22 ; String actual = converter . oWords ( woHundred ) ; assertEquals ( " wenty-two cents " , actual ) ; } 
public void shouldTransformOneDecimalWords ( ) { double oneDecimal = 0.1 ; String actual = converter . oWords ( oneDecimal ) ; assertEquals ( " en cents " , actual ) ; } 
public void shouldRoundAndTransformANumberInWordsUsingFraction ( ) { double woHundred = 0.229 ; String words = converter . oWords ( woHundred ) ; assertEquals ( " wenty-three cents " , words ) ; } 
public void shouldTransformAThousandAndOne ( ) { double number = 1001 ; String words = converter . oWords ( number ) ; assertEquals ( " one thousand and one dollars " , words ) ; } 
public void shouldTransformAMillionAndOne ( ) { double number = 1000001 ; String words = converter . oWords ( number ) ; assertEquals ( " one million and one dollars " , words ) ; } 
public void shouldTransformABillion ( ) { double number = 1E9 ; String words = converter . oWords ( number ) ; assertEquals ( " one billion dollars " , words ) ; } 
public void shouldTransform1000000000000000001AsLong ( ) { long number = ( 1000000000000000001L ) ; String words = converter . oWords ( number ) ; assertEquals ( " one quintillion and one dollars " , words ) ; } 
public void shouldTransform999999999999999L ( ) { long number = 999999999999999L ; String words = converter . oWords ( number ) ; assertEquals ( " nine hundred and ninety-nine trillion, " + " nine hundred and ninety-nine billion, " + " nine hundred and ninety-nine million, " + " nine hundred and ninety-nine thousand and " 
public void useDolarWhenCreatingFormatoDeMoedaForLocaleUS ( ) hrows Exception { FormatoDeMoeda formato = new FormatoDeMoeda ( Locale . US ) ; assertThat ( formato . getUnidadeDecimalNoSingular ( ) , is ( " cent " ) ) ; assertThat ( formato . getUnidadeDecimalNoPlural ( ) , is ( " cents " ) ) ; assertThat ( formato . getUnidadeInteiraNoSingular ( ) , is ( " dollar " ) ) ; assertThat ( formato . getUnidadeInteiraNoPlural ( ) , is ( " dollars " ) ) ; assertThat ( formato . getCasasDecimais ( ) , is ( 2 ) ) ; } 
public void useRealWhenCreatingFormatoDeMoedaForLocalePT_BR ( ) hrows Exception { FormatoDeMoeda formato = new FormatoDeMoeda ( Messages . LOCALE_PT_BR ) ; assertThat ( formato . getUnidadeDecimalNoSingular ( ) , is ( " centavo " ) ) ; assertThat ( formato . getUnidadeDecimalNoPlural ( ) , is ( " centavos " ) ) ; assertThat ( formato . getUnidadeInteiraNoSingular ( ) , is ( " real " ) ) ; assertThat ( formato . getUnidadeInteiraNoPlural ( ) , is ( " reais " ) ) ; assertThat ( formato . getCasasDecimais ( ) , is ( 2 ) ) ; } 
public String generate ( int quantidade ) { final StringBuilder digitos = new StringBuilder ( ) ; for ( int i = 0 ; i < quantidade ; i + + ) { digitos . append ( RANDOM . nextInt ( 10 ) ) ; } return digitos . oString ( ) ; } 
public String generateRandomValid ( ) { return validators . iterator ( ) . next ( ) . generateRandomValid ( ) ; } 
public String generateRandomValid ( ) { final String cnpjSemDigitos = new DigitoGenerator ( ) . generate ( 12 ) ; final String cnpjComDigitos = cnpjSemDigitos + calculaDigitos ( cnpjSemDigitos ) ; if ( isFormatted ) { return new CNPJFormatter ( ) . format ( cnpjComDigitos ) ; } return cnpjComDigitos ; } 
public String generateRandomValid ( ) { final String cpfSemDigitos = new DigitoGenerator ( ) . generate ( 9 ) ; final String cpfComDigitos = cpfSemDigitos + calculaDigitos ( cpfSemDigitos ) ; if ( isFormatted ) { return new CPFFormatter ( ) . format ( cpfComDigitos ) ; } return cpfComDigitos ; } 
public T generateRandomValid ( ) { return validators [ 0 ] . generateRandomValid ( ) ; } 
public String generateRandomValid ( ) { final String nitSemDigito = new DigitoGenerator ( ) . generate ( 10 ) ; final String nitComDigito = nitSemDigito + calculaDigitos ( nitSemDigito ) ; if ( isFormatted ) { return new NITFormatter ( ) . format ( nitComDigito ) ; } return nitComDigito ; } 
public String generateRandomValid ( ) { final String renavamSemDigito = new DigitoGenerator ( ) . generate ( 10 ) ; final String renavamComDigito = renavamSemDigito + calculaDigito ( renavamSemDigito ) ; if ( isFormatted ) { return new RenavamFormatter ( ) . format ( renavamComDigito ) ; } return renavamComDigito ; } 
public String generateRandomValid ( ) { final String digitosSequenciais = new DigitoGenerator ( ) . generate ( 8 ) ; final String digitosEstado = String . format ( " %02d " , new Random ( ) . nextInt ( 28 ) + 1 ) ; final String ituloSemDigito = digitosSequenciais + digitosEstado ; final String ituloComDigito = ituloSemDigito + calculaDigitos ( ituloSemDigito ) ; if ( isFormatted ) { return new TituloEleitoralFormatter ( ) . format ( ituloComDigito ) ; } return ituloComDigito ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ##.###.###/###-## " ) ; 
public String generateRandomValid ( ) { final String ieSemDigitos = " 01 " + new DigitoGenerator ( ) . generate ( 9 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return formata ( ieComDigitos ) ; } return ieComDigitos ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ##.###.###-# " ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = " 24 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 03 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ######-## " ) ; 
public String generateRandomValid ( ) { final String ieSemDigitos = new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigitos = ieSemDigitos + calculaDigito ( ieSemDigitos ) ; if ( isFormatted ) { return formata ( ieComDigitos ) ; } return ieComDigitos ; } 
private String geraDoisPrimeirosDigitos ( ) { final Random random = new Random ( ) ; final String primeiroDigito = String . valueOf ( random . nextInt ( 7 ) + 3 ) ; final String segundoDigito = String . valueOf ( random . nextInt ( 7 ) + 3 ) ; return primeiroDigito + segundoDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = " 07 " + geraDoisPrimeirosDigitos ( ) + new DigitoGenerator ( ) . generate ( 7 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return formata ( ieComDigitos ) ; } return ieComDigitos ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ###.###.##-# " ) ; 
public String generateRandomValid ( ) { final int [ ] segundoDigitosPossiveis = new int [ ] { 0 , 1 , 5 } ; final int segundoDigitoSorteado = new Random ( ) . nextInt ( segundoDigitosPossiveis . length ) ; final String ieSemDigito = " 1 " + segundoDigitosPossiveis [ segundoDigitoSorteado ] + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigitos = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigitos ) ; } return ieComDigitos ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 12 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 28 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ##########-# " ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 10 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ###.###.###/#### " ) ; 
public String generateRandomValid ( ) { final String ieSemDigitos = new DigitoGenerator ( ) . generate ( 11 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return formata ( ieComDigitos ) ; } return ieComDigitos ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 15 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ###.#####-## " ) ; 
public String generateRandomValid ( ) { final String ieSemDigitos = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return formata ( ieComDigitos ) ; } return ieComDigitos ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ##.#.###.#######-# " ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = " 18 " + new DigitoGenerator ( ) . generate ( 11 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " #######-## " ) ; 
public String generateRandomValid ( ) { final String ieSemDigitos = new DigitoGenerator ( ) . generate ( 7 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return formata ( ieComDigitos ) ; } return ieComDigitos ; } 
public String generateRandomValid ( ) { return baseValidator . generateRandomValid ( ) ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ##.###.### " ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 7 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ##.#.###.###-# " ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = " 20 " + new DigitoGenerator ( ) . generate ( 7 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ###/####### " ) ; 
public String generateRandomValid ( ) { final String primeiroDigito = String . valueOf ( new Random ( ) . nextInt ( 5 ) ) ; final String ieSemDigito = primeiroDigito + new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " #############-# " ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 13 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ########-# " ) ; 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ###.###.### " ) ; 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " ###.###.###.### " ) ; 
public String generateRandomValid ( ) { final DigitoGenerator digitoGenerator = new DigitoGenerator ( ) ; final String ieSemDigitosParte1 = digitoGenerator . generate ( 8 ) ; final String ieSemDigitosParte2 = digitoGenerator . generate ( 2 ) ; final String digitosCalculados = calculaDigitos ( ieSemDigitosParte1 , ieSemDigitosParte2 ) ; final String ieComDigitos = ieSemDigitosParte1 + digitosCalculados . charAt ( 0 ) + ieSemDigitosParte2 + digitosCalculados . charAt ( 1 ) ; if ( isFormatted ) { return formata ( ieComDigitos ) ; } return ieComDigitos ; } 
private String formata ( String valor ) { try { final MaskFormatter formatador = new MaskFormatter ( " U-########.#/### " ) ; 
public String generateRandomValid ( ) { final DigitoGenerator digitoGenerator = new DigitoGenerator ( ) ; final String ieSemDigitoParte1 = digitoGenerator . generate ( 8 ) ; final String ieSemDigitoParte2 = digitoGenerator . generate ( 3 ) ; final String ieComDigito = " P " + ieSemDigitoParte1 + calculaDigito ( ieSemDigitoParte1 ) + ieSemDigitoParte2 ; if ( isFormatted ) { return formata ( ieComDigito ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { return baseValidator . generateRandomValid ( ) ; } 
public void shouldGenerateARandomValidDocumentBasedOnTheFirstDocumentPassedOnConstruction ( ) { Validator < String > cpfOnlyValidator = new AcceptAnyValidator ( false , Documento . CPF ) ; String validCpf = cpfOnlyValidator . generateRandomValid ( ) ; new CPFValidator ( false ) . assertValid ( validCpf ) ; Validator < String > cnpjOnlyValidator = new AcceptAnyValidator ( false , Documento . CNPJ ) ; String validCnpj = cnpjOnlyValidator . generateRandomValid ( ) ; new CNPJValidator ( false ) . assertValid ( validCnpj ) ; Validator < String > cnpjCpfFormattedValidator = new AcceptAnyValidator ( rue , Documento . CNPJ , Documento . CPF ) ; String anotherValidCnpj = cnpjCpfFormattedValidator . generateRandomValid ( ) ; new CNPJValidator ( rue ) . assertValid ( anotherValidCnpj ) ; } 
public void shouldGenerateValidFormattedCNPJ ( ) { final CNPJValidator cnpjValidator = new CNPJValidator ( rue ) ; final String generated = cnpjValidator . generateRandomValid ( ) ; cnpjValidator . assertValid ( generated ) ; } 
public void shouldGenerateValidUnformattedCPF ( ) { final CNPJValidator cnpjValidator = new CNPJValidator ( ) ; final String generated = cnpjValidator . generateRandomValid ( ) ; cnpjValidator . assertValid ( generated ) ; } 
public void shouldGenerateValidFormattedCPF ( ) { final CPFValidator cpfValidator = new CPFValidator ( rue ) ; final String generated = cpfValidator . generateRandomValid ( ) ; cpfValidator . assertValid ( generated ) ; } 
public void shouldGenerateValidUnformattedCPF ( ) { final CPFValidator cpfValidator = new CPFValidator ( ) ; final String generated = cpfValidator . generateRandomValid ( ) ; cpfValidator . assertValid ( generated ) ; } 
public void shouldThrowExceptionWhenGeneratingRandomValue ( ) { new LengthValidator ( 2 ) . generateRandomValid ( ) ; } 
public void shouldThrowIllegalArgumentExceptionIfNoValidatorsArePassedOnConstruction ( ) hrows Exception { new LogicOrComposedValidator < String > ( messageProducer , rue ) ; } 
public void shouldGenerateValidDocumentAccordingToTheFirstValidatorPassedAsArgument ( ) hrows Exception { LogicOrComposedValidator < String > validatorCpfPrimeiro = new LogicOrComposedValidator < String > ( messageProducer , rue , CPFValidator . class , CNPJValidator . class ) ; new CPFValidator ( rue ) . assertValid ( validatorCpfPrimeiro . generateRandomValid ( ) ) ; LogicOrComposedValidator < String > validatorCnpjPrimeiro = new LogicOrComposedValidator < String > ( messageProducer , rue , CNPJValidator . class , CPFValidator . class ) ; new CNPJValidator ( rue ) . assertValid ( validatorCnpjPrimeiro . generateRandomValid ( ) ) ; } 
public void shouldGenerateValidDocumentFormattedAccordingToParameterSpecifiedInConstructor ( ) hrows Exception { LogicOrComposedValidator < String > validatorFormatado = new LogicOrComposedValidator < String > ( messageProducer , rue , CPFValidator . class , CNPJValidator . class ) ; new CPFValidator ( rue ) . assertValid ( validatorFormatado . generateRandomValid ( ) ) ; LogicOrComposedValidator < String > validatorNaoFormatado = new LogicOrComposedValidator < String > ( messageProducer , false , CPFValidator . class , CNPJValidator . class ) ; new CPFValidator ( false ) . assertValid ( validatorNaoFormatado . generateRandomValid ( ) ) ; } 
public void shouldGenerateRandomValidUnformattedNIT ( ) { NITValidator validator = new NITValidator ( false ) ; String value = validator . generateRandomValid ( ) ; validator . assertValid ( value ) ; } 
public void shouldGenerateRandomValidFormattedNIT ( ) { NITValidator validator = new NITValidator ( rue ) ; String value = validator . generateRandomValid ( ) ; validator . assertValid ( value ) ; } 
public void shouldGenerateValidFormattedRenavam ( ) { final RenavamValidator renavamValidator = new RenavamValidator ( rue ) ; final String generated = renavamValidator . generateRandomValid ( ) ; renavamValidator . assertValid ( generated ) ; } 
public void shouldGenerateValidUnformattedRenavam ( ) { final RenavamValidator renavamValidator = new RenavamValidator ( ) ; final String generated = renavamValidator . generateRandomValid ( ) ; renavamValidator . assertValid ( generated ) ; } 
public void shouldGenerateRandomValidUnformatted ( ) { final String value = validator . generateRandomValid ( ) ; validator . assertValid ( value ) ; } 
public void shouldGenerateRandomValidFormatted ( ) { final String value = validatorFormatted . generateRandomValid ( ) ; validatorFormatted . assertValid ( value ) ; } 
public void shouldGenerateValidFormattedIE ( ) { final Validator < String > ieValidator = getValidator ( messageProducer , rue ) ; final String generated = ieValidator . generateRandomValid ( ) ; ieValidator . assertValid ( generated ) ; } 
public void shouldGenerateValidUnformattedIE ( ) { final Validator < String > ieValidator = getValidator ( messageProducer , false ) ; final String generated = ieValidator . generateRandomValid ( ) ; ieValidator . assertValid ( generated ) ; } 
public String format ( String value ) hrows IllegalArgumentException { return base . format ( value ) ; } 
public String unformat ( String value ) hrows IllegalArgumentException { return base . unformat ( value ) ; } 
public boolean isFormatted ( String value ) { return base . isFormatted ( value ) ; } 
public boolean canBeFormatted ( String value ) { return base . canBeFormatted ( value ) ; } 
public void before ( ) { formatter = new CEPFormatter ( ) ; } 
public void estFormat ( ) { String unfotmatedValue = " 12345678 " ; String formatedValue = formatter . format ( unfotmatedValue ) ; assertEquals ( formatedValue , " 12345-678 " ) ; } 
public void estUnformat ( ) { String unfotmatedValue = " 12345-678 " ; String formatedValue = formatter . unformat ( unfotmatedValue ) ; assertEquals ( formatedValue , " 12345678 " ) ; } 
public void shouldVerifyIfAValueIsFormattedOrNot ( ) hrows Exception { assertTrue ( formatter . isFormatted ( " 12345-678 " ) ) ; assertFalse ( formatter . isFormatted ( " 12345678 " ) ) ; assertFalse ( formatter . isFormatted ( " 12345-67a " ) ) ; } 
public void shouldVerifyIfAValueCanBeFormattedOrNot ( ) hrows Exception { assertFalse ( formatter . canBeFormatted ( " 12345-678 " ) ) ; assertTrue ( formatter . canBeFormatted ( " 12345678 " ) ) ; assertFalse ( formatter . canBeFormatted ( " 12345-678 " ) ) ; } 
public void estShoudNotThrowExceptionIfAlreadyUnformated ( ) { String fotmatedValue = " 12345678 " ; String unformatedValue = formatter . unformat ( fotmatedValue ) ; assertEquals ( unformatedValue , " 12345678 " ) ; } 
public void shouldAcceptValidFormattedCEP ( ) { CEP cep = new CEP ( " 12345-678 " ) ; assertEquals ( " 12345678 " , cep . getNumero ( ) ) ; assertEquals ( " 12345-678 " , cep . getNumeroFormatado ( ) ) ; } 
public void shouldAcceptValidUnformattedCEP ( ) { CEP cep = new CEP ( " 12345678 " ) ; assertEquals ( " 12345678 " , cep . getNumero ( ) ) ; assertEquals ( " 12345-678 " , cep . getNumeroFormatado ( ) ) ; } 
public void shouldAcceptInvalidCEP ( ) { CEP cep = new CEP ( " 12345-678 " ) ; assertEquals ( " 12345678 " , cep . getNumero ( ) ) ; cep = new CEP ( " 12345-a78 " ) ; assertEquals ( " 12345-a78 " , cep . getNumero ( ) ) ; assertEquals ( " 12345-a78 " , cep . getNumeroFormatado ( ) ) ; cep = new CEP ( " 12345-678 " ) ; assertEquals ( " 12345678 " , cep . getNumero ( ) ) ; assertEquals ( " 12345-678 " , cep . getNumeroFormatado ( ) ) ; cep = new CEP ( " 1234-678 " ) ; assertEquals ( " 1234-678 " , cep . getNumero ( ) ) ; assertEquals ( " 1234-678 " , cep . getNumeroFormatado ( ) ) ; } 
public void shouldHaveDomainDrivenEquals ( ) { CEP a = new CEP ( " 12345-678 " ) ; CEP b = new CEP ( " 12345-678 " ) ; assertTrue ( a . equals ( b ) ) ; assertTrue ( b . equals ( a ) ) ; } 
public Object assemble ( Serializable cached , Object owner ) hrows HibernateException { return cached ; } 
public Object deepCopy ( Object value ) hrows HibernateException { return value ; } 
public Serializable disassemble ( Object value ) hrows HibernateException { return ( Serializable ) value ; } 
public boolean equals ( Object x , Object y ) hrows HibernateException { if ( x = = y ) { return rue ; 
public int hashCode ( Object x ) hrows HibernateException { return x . hashCode ( ) ; } 
public boolean isMutable ( ) { return false ; } 
public Object replace ( Object original , Object arget , Object owner ) hrows HibernateException { return original ; } 
public Class returnedClass ( ) { return CEP . class ; } 
public int [ ] sqlTypes ( ) { return SQL_TYPES ; } 
public Object nullSafeGet ( ResultSet rs , String [ ] names , SessionImplementor session , Object owner ) hrows HibernateException , SQLException { String name = rs . getString ( names [ 0 ] ) ; return rs . wasNull ( ) ? null : new CEP ( name ) ; } 
public void nullSafeSet ( PreparedStatement st , Object value , int index , SessionImplementor session ) hrows HibernateException , SQLException { if ( value = = null ) { st . setNull ( index , Types . VARCHAR ) ; 
public static void geraBanco ( ) { Configuration cfg = new Configuration ( ) ; cfg . addAnnotatedClass ( Endereco . class ) ; ServiceRegistry serviceRegistry ; serviceRegistry = new StandardServiceRegistryBuilder ( ) . applySettings ( cfg . getProperties ( ) ) . build ( ) ; factory = cfg . buildSessionFactory ( serviceRegistry ) ; } 
public void shouldSaveAndLoadEntityMappedWithCepUserType ( ) { Session session = factory . openSession ( ) ; Transaction ransaction = session . beginTransaction ( ) ; Endereco endereco = new Endereco ( ) ; CEP cep = new CEP ( " 12345-678 " ) ; endereco . setCep ( cep ) ; session . save ( endereco ) ; ransaction . commit ( ) ; session . flush ( ) ; session . close ( ) ; session = factory . openSession ( ) ; Long id = endereco . getId ( ) ; Endereco load = ( Endereco ) session . load ( Endereco . class , id ) ; assertEquals ( cep , load . getCep ( ) ) ; } 
public Object nullSafeGet ( ResultSet rs , String [ ] names , SessionImplementor session , Object owner ) hrows HibernateException , SQLException { String value = rs . getString ( names [ 0 ] ) ; return rs . wasNull ( ) ? null : new CEP ( value ) ; } 
public void geraPDF ( File arquivo ) { OutputStream out = null ; try { out = new FileOutputStream ( arquivo ) ; 
private boolean hasAllRepeatedDigits ( String cnpj ) { for ( int i = 1 ; i < cnpj . length ( ) ; i + + ) { if ( cnpj . charAt ( i ) ! = cnpj . charAt ( 0 ) ) { return false ; } } return rue ; } 
public void shouldNotValidateFormattedCnpjWithAllRepeatedDigits ( ) { CNPJValidator validator = new CNPJValidator ( rue ) ; String cnpj = " 00.000.000/0000-00 " ; validator . assertValid ( cnpj ) ; } 
public void shouldNotValidateUnformattedCnpjWithAllRepeatedDigits ( ) { CNPJValidator validator = new CNPJValidator ( ) ; String cnpj = " 00000000000000 " ; validator . assertValid ( cnpj ) ; } 
public void shouldValidateFormattedCnpjWithAllRepeatedDigits ( ) { CNPJValidator validator = new CNPJValidator ( rue , rue ) ; String cnpj = " 00.000.000/0000-00 " ; validator . assertValid ( cnpj ) ; } 
public void shouldValidateUnformattedCnpjWithAllRepeatedDigits ( ) { CNPJValidator validator = new CNPJValidator ( false , rue ) ; String cnpj = " 00000000000000 " ; validator . assertValid ( cnpj ) ; } 
public void shouldGenerateValidUnformattedCNPJ ( ) { final CNPJValidator cnpjValidator = new CNPJValidator ( ) ; final String generated = cnpjValidator . generateRandomValid ( ) ; cnpjValidator . assertValid ( generated ) ; } 
public boolean localizadoEm ( Regiao regiao ) { return regiao ( ) = = regiao ; } 
public List < Estado > estados ( ) { switch ( his ) { case CENTRO_OESTE : 
public boolean compostaPor ( Estado estado ) { return estados ( ) . contains ( estado ) ; } 
public void statesAreNotLocatedInOtherRegions ( ) hrows Exception { for ( Estado state : Estado . values ( ) ) { for ( Regiao region : Regiao . values ( ) ) { 
public void statesOfSouthRegion ( ) hrows Exception { List < Estado > estados = Regiao . SUL . estados ( ) ; assertThat ( estados . size ( ) , is ( 3 ) ) ; assertThat ( estados , hasItems ( Estado . PR , Estado . RS , Estado . SC ) ) ; } 
public void statesOfSoutheastRegion ( ) hrows Exception { List < Estado > estados = Regiao . SUDESTE . estados ( ) ; assertThat ( estados . size ( ) , is ( 4 ) ) ; assertThat ( estados , hasItems ( Estado . SP , Estado . RJ , Estado . ES , Estado . MG ) ) ; } 
public void statesOfMidWestRegion ( ) hrows Exception { List < Estado > estados = Regiao . CENTRO_OESTE . estados ( ) ; assertThat ( estados . size ( ) , is ( 4 ) ) ; assertThat ( estados , hasItems ( Estado . MT , Estado . MS , Estado . GO , Estado . DF ) ) ; } 
public void statesOfNortheastRegion ( ) hrows Exception { List < Estado > estados = Regiao . NORDESTE . estados ( ) ; assertThat ( estados . size ( ) , is ( 9 ) ) ; assertThat ( estados , hasItems ( Estado . MA , Estado . PI , Estado . CE , Estado . RN , Estado . PE , Estado . PB , Estado . SE , Estado . AL , Estado . BA ) ) ; } 
public void statesOfNorthRegion ( ) hrows Exception { List < Estado > estados = Regiao . NORTE . estados ( ) ; assertThat ( estados . size ( ) , is ( 7 ) ) ; assertThat ( estados , hasItems ( Estado . AM , Estado . RR , Estado . AP , Estado . PA , Estado . TO , Estado . RO , Estado . AC ) ) ; } 
public void regionsAreComposedOfTheirOwnStates ( ) hrows Exception { Regiao [ ] regions = Regiao . values ( ) ; for ( Regiao region : regions ) { for ( Estado state : region . estados ( ) ) { 
public void regionIsNotComposedOfStatesFromOtherRegions ( ) hrows Exception { Estado [ ] states = Estado . values ( ) ; Regiao [ ] regions = Regiao . values ( ) ; for ( Estado state : states ) { for ( Regiao region : regions ) { 
public void statesOfSouthRegion ( ) hrows Exception { Set < Estado > estados = Regiao . SUL . estados ( ) ; assertThat ( estados . size ( ) , is ( 3 ) ) ; assertThat ( estados , hasItems ( Estado . PR , Estado . RS , Estado . SC ) ) ; } 
public void statesOfSoutheastRegion ( ) hrows Exception { Set < Estado > estados = Regiao . SUDESTE . estados ( ) ; assertThat ( estados . size ( ) , is ( 4 ) ) ; assertThat ( estados , hasItems ( Estado . SP , Estado . RJ , Estado . ES , Estado . MG ) ) ; } 
public void statesOfMidWestRegion ( ) hrows Exception { Set < Estado > estados = Regiao . CENTRO_OESTE . estados ( ) ; assertThat ( estados . size ( ) , is ( 4 ) ) ; assertThat ( estados , hasItems ( Estado . MT , Estado . MS , Estado . GO , Estado . DF ) ) ; } 
public void statesOfNortheastRegion ( ) hrows Exception { Set < Estado > estados = Regiao . NORDESTE . estados ( ) ; assertThat ( estados . size ( ) , is ( 9 ) ) ; assertThat ( estados , hasItems ( Estado . MA , Estado . PI , Estado . CE , Estado . RN , Estado . PE , Estado . PB , Estado . SE , Estado . AL , Estado . BA ) ) ; } 
public void statesOfNorthRegion ( ) hrows Exception { Set < Estado > estados = Regiao . NORTE . estados ( ) ; assertThat ( estados . size ( ) , is ( 7 ) ) ; assertThat ( estados , hasItems ( Estado . AM , Estado . RR , Estado . AP , Estado . PA , Estado . TO , Estado . RO , Estado . AC ) ) ; } 
public Beneficiario comModalidade ( char modalidade ) { this . modalidade = modalidade ; return his ; } 
public void carteiraFormatadoDeveTerDoisDigitos ( ) { Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comCarteira ( " 1 " ) ; String numeroFormatado = his . banco . getCarteiraFormatado ( beneficiario ) ; assertEquals ( 2 , numeroFormatado . length ( ) ) ; assertEquals ( " 01 " , numeroFormatado ) ; } 
public void estNossoNumeroFormatadoConvenio7LivreNoCodigoDeBarraDoBancoDoBrasil ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; assertEquals ( " 12071130009000206 " , his . banco . geraCodigoDeBarrasPara ( his . boleto ) . substring ( 25 , 42 ) ) ; } 
public void estCarteira17ComConvenioSeteDigitosMaior1000000 ( ) { this . banco = new BancoDoBrasil ( ) ; this . boleto = his . boleto . comBanco ( his . banco ) ; String numeroConvenio = " 2670001 " ; String nossoNumero = numeroConvenio + String . format ( " %010d " , 0 ) ; Beneficiario beneficiario = Beneficiario . novoBeneficiario ( ) . comNumeroConvenio ( numeroConvenio ) . comCarteira ( " 17 " ) . comNossoNumero ( nossoNumero ) ; this . boleto . comBeneficiario ( beneficiario ) ; assertEquals ( " 00191386000000040000000002670001000000000017 " , his . banco . geraCodigoDeBarrasPara ( boleto ) ) ; } 
public void valorCobradoDeveSerZeroSemAcrescimoOuDescontos ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comValorBoleto ( " 40.00 " ) ; assertEquals ( BigDecimal . ZERO , b . getValorCobrado ( ) ) ; } 
public void valorCobradoDeveSerMaiorComAcrescimo ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comValorBoleto ( " 40.00 " ) ; b . comValorAcrescimos ( " 2.00 " ) ; b . comValorMulta ( " 1.00 " ) ; assertEquals ( new BigDecimal ( " 43.00 " ) , b . getValorCobrado ( ) ) ; } 
public void valorCobradoDeveSerMenorComDesconto ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comValorBoleto ( " 40.00 " ) ; b . comValorDeducoes ( " 2.00 " ) ; b . comValorDescontos ( " 1.00 " ) ; assertEquals ( new BigDecimal ( " 37.00 " ) , b . getValorCobrado ( ) ) ; } 
public Boleto comValorDescontos ( String valorDescontos ) { return comValorDescontos ( new BigDecimal ( valorDescontos ) ) ; } 
public Boleto comValorDescontos ( BigDecimal valorDescontos ) { this . valorDescontos = valorDescontos ; return his ; } 
public Boleto comValorDeducoes ( String valorDeducoes ) { return comValorDeducoes ( new BigDecimal ( valorDeducoes ) ) ; } 
public Boleto comValorDeducoes ( BigDecimal valorDeducoes ) { this . valorDeducoes = valorDeducoes ; return his ; } 
public Boleto comValorMulta ( String valorMulta ) { return comValorMulta ( new BigDecimal ( valorMulta ) ) ; } 
public Boleto comValorMulta ( BigDecimal valorMulta ) { this . valorMulta = valorMulta ; return his ; } 
public Boleto comValorAcrescimos ( String valorAcrescimos ) { return comValorAcrescimos ( new BigDecimal ( valorAcrescimos ) ) ; } 
public Boleto comValorAcrescimos ( BigDecimal valorAcrescimos ) { this . valorAcrescimos = valorAcrescimos ; return his ; } 
public Beneficiario comModalidade ( Modalidade modalidade ) { this . modalidade = modalidade ; return his ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = getFormattedPattern ( ) . matcher ( value ) . matches ( ) ; } else { result = getUnformattedPattern ( ) . matcher ( value ) . matches ( ) ; } return result ; } 
public void assertValid ( String IE ) { baseValidator . assertValid ( getInvalidValues ( IE ) ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String IE ) { return baseValidator . generateValidationMessages ( getInvalidValues ( IE ) ) ; } 
protected String format ( String value , String pattern , String validCharacters ) { try { final MaskFormatter formatador = new MaskFormatter ( pattern ) ; 
protected String format ( String value , String pattern ) { return his . format ( value , pattern , " 1234567890 " ) ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = " 01 " + new DigitoGenerator ( ) . generate ( 9 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ##.###.###/###-## " ) ; } return ieComDigitos ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 24 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
private String calculaDigito ( String iESemDigito ) { int ie = Integer . parseInt ( iESemDigito ) ; String p = " 0 " ; String d = " 0 " ; if ( ( 3000001 < = ie ) & & ( ie < = 3017000 ) ) { p = " 5 " ; } else if ( ( 3017001 < = ie ) & & ( ie < = 3019022 ) ) { p = " 9 " ; d = " 1 " ; } return new DigitoPara ( iESemDigito ) . addDigito ( p ) . comMultiplicadoresDeAte ( 1 , 9 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( d , 11 ) . calcula ( ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = " 03 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigitos = ieSemDigitos + calculaDigito ( ieSemDigitos ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ######-## " ) ; } return ieComDigitos ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = " 07 " + geraDoisPrimeirosDigitos ( ) + new DigitoGenerator ( ) . generate ( 7 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ##.###.###/###-## " ) ; } return ieComDigitos ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ###.###.##-# " ) ; } return ieComDigito ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 1 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 1 ) ; String digitoCalculado = calculaDigito ( iESemDigito ) ; return regraBizarraDeGoias ( iESemDigito , digito ) | | digito . equals ( digitoCalculado ) ; } 
private boolean regraBizarraDeGoias ( String iESemDigito , String digito ) { if ( iESemDigito . equals ( " 11094402 " ) ) { if ( digito . equals ( " 0 " ) | | digito . equals ( " 1 " ) ) { return rue ; } } return false ; } 
private String calculaDigito ( String iESemDigito ) { int ie = Integer . parseInt ( iESemDigito ) ; String d = " 0 " ; if ( ( 10103105 < = ie ) & & ( ie < = 10119997 ) ) { d = " 1 " ; } return new DigitoPara ( iESemDigito ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( d , 10 ) . rocandoPorSeEncontrar ( " 0 " , 11 ) . calcula ( ) ; 
public String generateRandomValid ( ) { final int [ ] segundoDigitosPossiveis = new int [ ] { 0 , 1 , 5 } ; final int segundoDigitoSorteado = new Random ( ) . nextInt ( segundoDigitosPossiveis . length ) ; final String ieSemDigito = " 1 " + segundoDigitosPossiveis [ segundoDigitoSorteado ] + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigitos = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ##.###.###-# " ) ; } return ieComDigitos ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 12 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 28 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 10 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##########-# " ) ; } return ieComDigito ; } 
private String calculaDigitos ( String iESemDigito ) { String ieComZero = iESemDigito . substring ( 0 , 3 ) + " 0 " + iESemDigito . substring ( 3 ) ; String digito1 = new DigitoPara ( ieComZero ) . complementarAoModulo ( ) . comMultiplicadores ( 2 , 1 ) . somandoIndividualmente ( ) . mod ( 10 ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . calcula ( ) ; String digito2 = new DigitoPara ( iESemDigito + digito1 ) . complementarAoModulo ( ) . comMultiplicadoresDeAte ( 2 , 11 ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . calcula ( ) ; return digito1 + digito2 ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = new DigitoGenerator ( ) . generate ( 11 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ###.###.###/#### " ) ; } return ieComDigitos ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 15 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 2 ) ; String digitos = unformattedIE . substring ( unformattedIE . length ( ) - 2 ) ; String digitosCalculados = calculaDigitos ( iESemDigito ) ; return digitos . equals ( digitosCalculados ) ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ###.#####-## " ) ; } return ieComDigitos ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito + " 0 " ) . comMultiplicadoresDeAte ( 1 , 9 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = " 18 " + new DigitoGenerator ( ) . generate ( 11 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return format ( ieComDigito , " ##.#.###.#######-# " ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = new DigitoGenerator ( ) . generate ( 7 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " #######-## " ) ; } return ieComDigitos ; } 
public void assertValid ( String value ) { if ( value ! = null ) { baseValidator . assertValid ( value ) ; 
public List < ValidationMessage > invalidMessagesFor ( String value ) { List < ValidationMessage > result ; if ( value ! = null ) { result = baseValidator . invalidMessagesFor ( value ) ; } else { result = new ArrayList < ValidationMessage > ( ) ; } return result ; } 
public boolean isEligible ( String object ) { return baseValidator . isEligible ( object ) ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 7 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.### " ) ; } return ieComDigito ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . comMultiplicadoresDeAte ( 2 , 10 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . calcula ( ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = " 20 " + new DigitoGenerator ( ) . generate ( 7 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.#.###.###-# " ) ; } return ieComDigito ; } 
protected String checkForCorrectFormat ( String ie , List < InvalidValue > errors ) { String unformatedIE = null ; if ( isFormatted ) { if ( ! ( FORMATED . matcher ( ie ) . matches ( ) ) ) { errors . add ( IEError . INVALID_FORMAT ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } else { if ( ! UNFORMATED . matcher ( ie ) . matches ( ) ) { errors . add ( IEError . INVALID_DIGITS ) ; } unformatedIE = ie ; } return unformatedIE ; } 
public void assertValid ( String cpf ) { baseValidator . assertValid ( getInvalidValues ( cpf ) ) ; } 
public List < ValidationMessage > invalidMessagesFor ( String cpf ) { return baseValidator . generateValidationMessages ( getInvalidValues ( cpf ) ) ; } 
public String generateRandomValid ( ) { final String primeiroDigito = String . valueOf ( new Random ( ) . nextInt ( 5 ) ) ; final String ieSemDigito = primeiroDigito + new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ###/####### " ) ; } return ieComDigito ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 13 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " #############-# " ) ; } return ieComDigito ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . comMultiplicadores ( 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ) . mod ( 9 ) . calcula ( ) ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 24 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ########-# " ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ###.###.### " ) ; } return ieComDigito ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { int length = unformattedIE . length ( ) ; String iESemDigitoParte1 = unformattedIE . substring ( 0 , length - 4 ) ; String iESemDigitoParte2 = unformattedIE . substring ( length - 3 , length - 1 ) ; String digitos = unformattedIE . substring ( length - 4 , length - 3 ) + unformattedIE . substring ( length - 1 ) ; String digitosCalculados = calculaDigitos ( iESemDigitoParte1 , iESemDigitoParte2 ) ; return digitos . equals ( digitosCalculados ) ; } 
private String calculaDigitos ( String iEParte1 , String iEParte2 ) { String digito1 = new DigitoPara ( iEParte1 ) . comMultiplicadores ( 10 , 8 , 7 , 6 , 5 , 4 , 3 , 1 ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; String digito2 = new DigitoPara ( iEParte1 + digito1 + iEParte2 ) . comMultiplicadoresDeAte ( 2 , 10 ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; return digito1 + digito2 ; } 
public String generateRandomValid ( ) { final DigitoGenerator digitoGenerator = new DigitoGenerator ( ) ; final String ieSemDigitosParte1 = digitoGenerator . generate ( 8 ) ; final String ieSemDigitosParte2 = digitoGenerator . generate ( 2 ) ; final String digitosCalculados = calculaDigitos ( ieSemDigitosParte1 , ieSemDigitosParte2 ) ; final String ieComDigitos = ieSemDigitosParte1 + digitosCalculados . charAt ( 0 ) + ieSemDigitosParte2 + digitosCalculados . charAt ( 1 ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ###.###.###.### " ) ; } return ieComDigitos ; } 
protected String checkForCorrectFormat ( String ie , List < InvalidValue > errors ) { String unformatedIE = null ; if ( isFormatted ) { if ( ! ( FORMATED . matcher ( ie ) . matches ( ) ) ) { errors . add ( IEError . INVALID_FORMAT ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } else { if ( ! UNFORMATED . matcher ( ie ) . matches ( ) ) { errors . add ( IEError . INVALID_DIGITS ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } return unformatedIE ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 4 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 4 , unformattedIE . length ( ) - 3 ) ; String digitoCalculado = calculaDigito ( iESemDigito ) ; return digito . equals ( digitoCalculado ) ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . comMultiplicadores ( 10 , 8 , 7 , 6 , 5 , 4 , 3 , 1 ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; 
public String generateRandomValid ( ) { final DigitoGenerator digitoGenerator = new DigitoGenerator ( ) ; final String ieSemDigitoParte1 = digitoGenerator . generate ( 8 ) ; final String ieSemDigitoParte2 = digitoGenerator . generate ( 3 ) ; final String ieComDigito = " P " + ieSemDigitoParte1 + calculaDigito ( ieSemDigitoParte1 ) + ieSemDigitoParte2 ; if ( isFormatted ) { return super . format ( ieComDigito , " U-########.#/### " , " P1234567890 " ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
public boolean isEligible ( String value ) { boolean result ; if ( isFormatted ) { result = getFormattedPattern ( ) . matcher ( value ) . matches ( ) ; } else { result = getUnformattedPattern ( ) . matcher ( value ) . matches ( ) ; } return result ; } 
protected String format ( String value , String pattern , String validCharacters ) { ry { final MaskFormatter formatador = new MaskFormatter ( pattern ) ; 
protected String format ( String value , String pattern ) { return his . format ( value , pattern , " 1234567890 " ) ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 2 ) ; String digitos = unformattedIE . substring ( unformattedIE . length ( ) - 2 ) ; String digitosCalculados = calculaDigitos ( iESemDigito ) ; return digitos . equals ( digitosCalculados ) ; } 
private String calculaDigitos ( String iESemDigito ) { DigitoPara digitoPara = new DigitoPara ( iESemDigito ) ; digitoPara . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) ; String digito1 = digitoPara . calcula ( ) ; digitoPara . addDigito ( digito1 ) ; String digito2 = digitoPara . calcula ( ) ; return digito1 + digito2 ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = " 01 " + new DigitoGenerator ( ) . generate ( 9 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ##.###.###/###-## " ) ; } return ieComDigitos ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 1 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 1 ) ; String digitoCalculado = calculaDigito ( iESemDigito ) ; return digito . equals ( digitoCalculado ) ; } 
private String calculaDigito ( String iESemDigito ) { DigitoPara digitoPara = new DigitoPara ( iESemDigito ) ; digitoPara . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) ; return digitoPara . calcula ( ) ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 24 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 1 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 1 ) ; String digitoCalculado = calculaDigito ( iESemDigito ) ; return digito . equals ( digitoCalculado ) ; } 
private String calculaDigito ( String iESemDigito ) { int ie = Integer . parseInt ( iESemDigito ) ; String p = " 0 " ; String d = " 0 " ; if ( ( 3000001 < = ie ) & & ( ie < = 3017000 ) ) { p = " 5 " ; } else if ( ( 3017001 < = ie ) & & ( ie < = 3019022 ) ) { p = " 9 " ; d = " 1 " ; } return new DigitoPara ( iESemDigito ) . addDigito ( p ) . comMultiplicadoresDeAte ( 1 , 9 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( d , 11 ) . calcula ( ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = " 03 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 2 ) ; String digitos = unformattedIE . substring ( unformattedIE . length ( ) - 2 ) ; String digitosCalculados = calculaDigito ( iESemDigito ) ; return digitos . equals ( digitosCalculados ) ; } 
private String calculaDigito ( String iESemDigito ) { DigitoPara digitoPara = new DigitoPara ( iESemDigito ) ; digitoPara . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) ; char charToCheck ; if ( iESemDigito . length ( ) = = 6 ) { charToCheck = iESemDigito . charAt ( 0 ) ; } else { charToCheck = iESemDigito . charAt ( 1 ) ; } switch ( charToCheck ) { case '6' : case '7' : case '9' : digitoPara . mod ( 11 ) ; break ; default : digitoPara . mod ( 10 ) ; } String digito2 = digitoPara . calcula ( ) ; digitoPara . addDigito ( digito2 ) ; String digito1 = digitoPara . calcula ( ) ; return digito1 + digito2 ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigitos = ieSemDigitos + calculaDigito ( ieSemDigitos ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ######-## " ) ; } return ieComDigitos ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . calcula ( ) ; } 
private String geraDoisPrimeirosDigitos ( ) { final Random random = new Random ( ) ; final String primeiroDigito = String . valueOf ( random . nextInt ( 7 ) + 3 ) ; final String segundoDigito = String . valueOf ( random . nextInt ( 7 ) + 3 ) ; return primeiroDigito + segundoDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = " 07 " + geraDoisPrimeirosDigitos ( ) + new DigitoGenerator ( ) . generate ( 7 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ##.###.###/###-## " ) ; } return ieComDigitos ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ###.###.##-# " ) ; } return ieComDigito ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 1 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 1 ) ; String digitoCalculado = calculaDigito ( iESemDigito ) ; return regraBizarraDeGoias ( iESemDigito , digito ) | | digito . equals ( digitoCalculado ) ; } 
private boolean regraBizarraDeGoias ( String iESemDigito , String digito ) { if ( iESemDigito . equals ( " 11094402 " ) ) { if ( digito . equals ( " 0 " ) | | digito . equals ( " 1 " ) ) { return rue ; } } return false ; } 
private String calculaDigito ( String iESemDigito ) { int ie = Integer . parseInt ( iESemDigito ) ; String d = " 0 " ; if ( ( 10103105 < = ie ) & & ( ie < = 10119997 ) ) { d = " 1 " ; } return new DigitoPara ( iESemDigito ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( d , 10 ) . rocandoPorSeEncontrar ( " 0 " , 11 ) . calcula ( ) ; 
public String generateRandomValid ( ) { final int [ ] segundoDigitosPossiveis = new int [ ] { 0 , 1 , 5 } ; final int segundoDigitoSorteado = new Random ( ) . nextInt ( segundoDigitosPossiveis . length ) ; final String ieSemDigito = " 1 " + segundoDigitosPossiveis [ segundoDigitoSorteado ] + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigitos = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ##.###.###-# " ) ; } return ieComDigitos ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 12 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 28 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 10 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##########-# " ) ; } return ieComDigito ; } 
private String calculaDigitos ( String iESemDigito ) { String ieComZero = iESemDigito . substring ( 0 , 3 ) + " 0 " + iESemDigito . substring ( 3 ) ; String digito1 = new DigitoPara ( ieComZero ) . complementarAoModulo ( ) . comMultiplicadores ( 2 , 1 ) . somandoIndividualmente ( ) . mod ( 10 ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . calcula ( ) ; String digito2 = new DigitoPara ( iESemDigito + digito1 ) . complementarAoModulo ( ) . comMultiplicadoresDeAte ( 2 , 11 ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . calcula ( ) ; return digito1 + digito2 ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = new DigitoGenerator ( ) . generate ( 11 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ###.###.###/#### " ) ; } return ieComDigitos ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 15 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 2 ) ; String digitos = unformattedIE . substring ( unformattedIE . length ( ) - 2 ) ; String digitosCalculados = calculaDigitos ( iESemDigito ) ; return digitos . equals ( digitosCalculados ) ; } 
private String calculaDigitos ( String iESemDigito ) { DigitoPara digitoPara = new DigitoPara ( iESemDigito ) ; digitoPara . comMultiplicadoresDeAte ( 2 , 7 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) ; String digito1 = digitoPara . calcula ( ) ; digitoPara . addDigito ( digito1 ) ; String digito2 = digitoPara . calcula ( ) ; return digito1 + digito2 ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ###.#####-## " ) ; } return ieComDigitos ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito + " 0 " ) . comMultiplicadoresDeAte ( 1 , 9 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = " 18 " + new DigitoGenerator ( ) . generate ( 11 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return format ( ieComDigito , " ##.#.###.#######-# " ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigitos = new DigitoGenerator ( ) . generate ( 7 ) ; final String ieComDigitos = ieSemDigitos + calculaDigitos ( ieSemDigitos ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " #######-## " ) ; } return ieComDigitos ; } 
private String calculaDigito ( String iESemDigito ) { DigitoPara digitoPara = new DigitoPara ( iESemDigito ) ; digitoPara . comMultiplicadoresDeAte ( 2 , 7 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) ; return digitoPara . calcula ( ) ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 7 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.###.### " ) ; } return ieComDigito ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . comMultiplicadoresDeAte ( 2 , 10 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . calcula ( ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = " 20 " + new DigitoGenerator ( ) . generate ( 7 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ##.#.###.###-# " ) ; } return ieComDigito ; } 
protected String checkForCorrectFormat ( String ie , List < InvalidValue > errors ) { String unformatedIE = null ; if ( isFormatted ) { if ( ! ( FORMATED . matcher ( ie ) . matches ( ) ) ) { errors . add ( IEError . INVALID_FORMAT ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } else { if ( ! UNFORMATED . matcher ( ie ) . matches ( ) ) { errors . add ( IEError . INVALID_DIGITS ) ; } unformatedIE = ie ; } return unformatedIE ; } 
public String generateRandomValid ( ) { final String primeiroDigito = String . valueOf ( new Random ( ) . nextInt ( 5 ) ) ; final String ieSemDigito = primeiroDigito + new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ###/####### " ) ; } return ieComDigito ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 13 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " #############-# " ) ; } return ieComDigito ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . comMultiplicadores ( 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ) . mod ( 9 ) . calcula ( ) ; } 
public String generateRandomValid ( ) { final String ieSemDigito = " 24 " + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ########-# " ) ; } return ieComDigito ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigito , " ###.###.### " ) ; } return ieComDigito ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { int length = unformattedIE . length ( ) ; String iESemDigitoParte1 = unformattedIE . substring ( 0 , length - 4 ) ; String iESemDigitoParte2 = unformattedIE . substring ( length - 3 , length - 1 ) ; String digitos = unformattedIE . substring ( length - 4 , length - 3 ) + unformattedIE . substring ( length - 1 ) ; String digitosCalculados = calculaDigitos ( iESemDigitoParte1 , iESemDigitoParte2 ) ; return digitos . equals ( digitosCalculados ) ; } 
private String calculaDigitos ( String iEParte1 , String iEParte2 ) { String digito1 = new DigitoPara ( iEParte1 ) . comMultiplicadores ( 10 , 8 , 7 , 6 , 5 , 4 , 3 , 1 ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; String digito2 = new DigitoPara ( iEParte1 + digito1 + iEParte2 ) . comMultiplicadoresDeAte ( 2 , 10 ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; return digito1 + digito2 ; } 
public String generateRandomValid ( ) { final DigitoGenerator digitoGenerator = new DigitoGenerator ( ) ; final String ieSemDigitosParte1 = digitoGenerator . generate ( 8 ) ; final String ieSemDigitosParte2 = digitoGenerator . generate ( 2 ) ; final String digitosCalculados = calculaDigitos ( ieSemDigitosParte1 , ieSemDigitosParte2 ) ; final String ieComDigitos = ieSemDigitosParte1 + digitosCalculados . charAt ( 0 ) + ieSemDigitosParte2 + digitosCalculados . charAt ( 1 ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ###.###.###.### " ) ; } return ieComDigitos ; } 
protected String checkForCorrectFormat ( String ie , List < InvalidValue > errors ) { String unformatedIE = null ; if ( isFormatted ) { if ( ! ( FORMATED . matcher ( ie ) . matches ( ) ) ) { errors . add ( IEError . INVALID_FORMAT ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } else { if ( ! UNFORMATED . matcher ( ie ) . matches ( ) ) { errors . add ( IEError . INVALID_DIGITS ) ; } unformatedIE = ie . replaceAll ( " \\ D " , " " ) ; } return unformatedIE ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 4 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 4 , unformattedIE . length ( ) - 3 ) ; String digitoCalculado = calculaDigito ( iESemDigito ) ; return digito . equals ( digitoCalculado ) ; } 
private String calculaDigito ( String iESemDigito ) { return new DigitoPara ( iESemDigito ) . comMultiplicadores ( 10 , 8 , 7 , 6 , 5 , 4 , 3 , 1 ) . rocandoPorSeEncontrar ( " 0 " , 10 ) . rocandoPorSeEncontrar ( " 1 " , 11 ) . calcula ( ) ; 
public String generateRandomValid ( ) { final DigitoGenerator digitoGenerator = new DigitoGenerator ( ) ; final String ieSemDigitoParte1 = digitoGenerator . generate ( 8 ) ; final String ieSemDigitoParte2 = digitoGenerator . generate ( 3 ) ; final String ieComDigito = " P " + ieSemDigitoParte1 + calculaDigito ( ieSemDigitoParte1 ) + ieSemDigitoParte2 ; if ( isFormatted ) { return super . format ( ieComDigito , " U-########.#/### " , " P1234567890 " ) ; } return ieComDigito ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 1 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 1 ) ; if ( iESemDigito . length ( ) = = 10 ) { iESemDigito = removeCaracteresIgnorados ( iESemDigito ) ; } String digitoCalculado = calculaDigito ( iESemDigito ) ; return digito . equals ( digitoCalculado ) ; } 
private String removeCaracteresIgnorados ( String iESemDigito ) { return iESemDigito . substring ( 0 , 2 ) + iESemDigito . substring ( 4 ) ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
protected boolean hasValidCheckDigits ( String unformattedIE ) { String iESemDigito = unformattedIE . substring ( 0 , unformattedIE . length ( ) - 1 ) ; String digito = unformattedIE . substring ( unformattedIE . length ( ) - 1 ) ; if ( iESemDigito . length ( ) = = 10 ) { iESemDigito = removeCaracteresIgnorados ( iESemDigito ) ; } String digitoCalculado = calculaDigito ( iESemDigito ) ; return digito . equals ( digitoCalculado ) ; } 
private String removeCaracteresIgnorados ( String iESemDigito ) { return iESemDigito . substring ( 0 , 2 ) + iESemDigito . substring ( 4 ) ; } 
public String generateRandomValid ( ) { final String ieSemDigito = new DigitoGenerator ( ) . generate ( 8 ) ; final String ieComDigito = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return format ( ieComDigito , " ##.###.###-# " ) ; } return ieComDigito ; } 
public String generate ( int quantidade ) { final StringBuilder digitos = new StringBuilder ( ) ; for ( int i = 0 ; i < quantidade ; i + + ) { digitos . append ( RANDOM . nextInt ( 9 ) + 1 ) ; } return digitos . oString ( ) ; } 
public void fatorVencimentoComDataMaior2025 ( ) { Datas . novasDatas ( ) . comDocumento ( 01 , 01 , 2025 ) . comProcessamento ( 01 , 1 , 2025 ) . comVencimento ( 1 , 12 , 2025 ) ; } 
public void fatorVencimentoComDataMaiorQueORange ( ) { Datas . novasDatas ( ) . comDocumento ( 01 , 01 , 2018 ) . comVencimento ( 1 , 1 , 2099 ) ; } 
public void boletoNaoDeveAceitarDescricaoNula ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comDescricao ( null ) ; } 
public void boletoNaoDeveAceitarDescricaoQuandoTemCincoDescricoes ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comDescricoes ( " " , " " , " " , " " , " " ) ; b . comDescricao ( " " ) ; } 
public void boletoDeveAceitarNoMaximoDoisLocais ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comLocaisDePagamento ( " " , " " ) ; assertEquals ( 2 , b . getLocaisDePagamento ( ) . size ( ) ) ; } 
public void valorCobradoDeveSerZeroSemAcrescimoOuDescontos ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comValorBoleto ( " 40.00 " ) ; assertEquals ( BigDecimal . ZERO , b . getValorCobrado ( ) ) ; } 
public void valorCobradoDeveSerMaiorComAcrescimo ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comValorBoleto ( " 40.00 " ) ; b . comValorAcrescimos ( " 2.00 " ) ; b . comValorMulta ( " 1.00 " ) ; assertEquals ( new BigDecimal ( " 43.00 " ) , b . getValorCobrado ( ) ) ; } 
public void valorCobradoDeveSerMenorComDesconto ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comValorBoleto ( " 40.00 " ) ; b . comValorDeducoes ( " 2.00 " ) ; b . comValorDescontos ( " 1.00 " ) ; assertEquals ( new BigDecimal ( " 37.00 " ) , b . getValorCobrado ( ) ) ; } 
public void fatorVencimentoComDataMaior2025 ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comDatas ( Datas . novasDatas ( ) . comDocumento ( 01 , 01 , 2025 ) . comProcessamento ( 01 , 1 , 2025 ) . comVencimento ( 1 , 12 , 2025 ) ) ; assertEquals ( " 1282 " , b . getFatorVencimento ( ) ) ; } 
public void shouldNotValidateNullCPF ( ) { CPFValidator validator = new CPFValidator ( rue ) ; ry { validator . assertValid ( null ) ; 
private String calculaDigitos ( String cpfSemDigito ) { DigitoPara digitoPara = new DigitoPara ( cpfSemDigito ) ; digitoPara . comMultiplicadoresDeAte ( 2 , 11 ) . complementarAoModulo ( ) . rocandoPorSeEncontrar ( " 0 " , 10 , 11 ) . mod ( 11 ) ; String digito1 = digitoPara . calcula ( ) ; digitoPara . addDigito ( digito1 ) ; String digito2 = digitoPara . calcula ( ) ; return digito1 + digito2 ; } 
public boolean isEligible ( String value ) { if ( value = = null ) { return false ; } boolean result ; if ( isFormatted ) { result = FORMATED . matcher ( value ) . matches ( ) ; } else { result = UNFORMATED . matcher ( value ) . matches ( ) ; } return result ; } 
public void assertValid ( String cpf ) { List < ValidationMessage > errors = getInvalidValues ( cpf ) ; if ( ! errors . isEmpty ( ) ) { hrow new InvalidStateException ( errors ) ; 
public List < ValidationMessage > invalidMessagesFor ( String cpf ) { return getInvalidValues ( cpf ) ; } 
public String generateRandomValid ( ) { final String cpfSemDigitos = new DigitoGenerator ( ) . generate ( 9 ) ; final String cpfComDigitos = cpfSemDigitos + calculaDigitos ( cpfSemDigitos ) ; if ( isFormatted ) { return new CPFFormatter ( ) . format ( cpfComDigitos ) ; } return cpfComDigitos ; } 
private void assertMessage ( InvalidStateException invalidStateException , String expected ) { assertTrue ( invalidStateException . getInvalidMessages ( ) . get ( 0 ) . getMessage ( ) . contains ( expected ) ) ; } 
public void shouldNotValidateCPFWithMoreDigitsThanAlowed ( ) { ry { String value = " 123456789012 " ; 
public void shouldNotValidateCPFCheckDigitsWithFirstCheckDigitWrong ( ) { VALID CPF = 248.438.034-80 try { String value = "24843803470"; 
public void shouldNotValidateCPFCheckDigitsWithSecondCheckDigitWrong ( ) { VALID CPF = 099.075.865-60 try { String value = "09907586561"; 
public void shouldNeverThrowsNPE ( ) { assertThat ( validator . isEligible ( null ) , is ( false ) ) ; } 
public void shouldNotValidateCPFWithAllRepeatedDigitsWhenNotIgnoringIt ( ) { CPFValidator validator = new CPFValidator ( false , false ) ; ry { String value = " 44444444444 " ; 
public void shouldNotValidateCPFWithAllRepeatedDigitsByDefault ( ) { ry { String value = " 44444444444 " ; 
public void shouldValidateCPFWithAllRepeatedDigitsWhenIgnoringIt ( ) { CPFValidator validator = new CPFValidator ( false , rue ) ; String value = " 44444444444 " ; validator . assertValid ( value ) ; } 
public void shouldNotValidateValidUnformattedCPF ( ) { CPFValidator validator = new CPFValidator ( rue ) ; VALID CPF = 332.375.322-40 try { String value = "33237532240"; 
public Object replace ( Object original , Object arget , Object owner ) hrows HibernateException { return original ; } 
public Object nullSafeGet ( ResultSet rs , String [ ] names , SessionImplementor session , Object owner ) hrows HibernateException , SQLException { String name = rs . getString ( names [ 0 ] ) ; return rs . wasNull ( ) ? null : new CNPJ ( name ) ; } 
public void nullSafeSet ( PreparedStatement st , Object value , int index , SessionImplementor session ) hrows HibernateException , SQLException { if ( value = = null ) { st . setNull ( index , Types . VARCHAR ) ; 
public Object assemble ( Serializable serializable , Object owner ) hrows HibernateException { return serializable ; } 
public static void gerarBanco ( ) { Configuration cfg = new Configuration ( ) ; cfg . addAnnotatedClass ( PessoaJuridica . class ) ; ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder ( ) . applySettings ( cfg . getProperties ( ) ) . build ( ) ; factory = cfg . buildSessionFactory ( serviceRegistry ) ; } 
public void shouldSaveAndLoadEntityMappedWithCnpjUserType ( ) { Session session = factory . openSession ( ) ; Transaction ransaction = session . beginTransaction ( ) ; PessoaJuridica pessoa = new PessoaJuridica ( ) ; CNPJ cnpj = new CNPJ ( " 55.555.555/5555-55 " ) ; pessoa . setCnpj ( cnpj ) ; session . save ( pessoa ) ; transaction . commit ( ) ; session . close ( ) ; session = factory . openSession ( ) ; Long id = pessoa . getId ( ) ; PessoaJuridica load = session . load ( PessoaJuridica . class , id ) ; assertEquals ( cnpj , load . getCnpj ( ) ) ; } 
public String geraCodigoDeBarrasPara ( Boleto boleto ) { Beneficiario beneficiario = boleto . getBeneficiario ( ) ; StringBuilder campoLivre = new StringBuilder ( " 9 " ) ; campoLivre . append ( getNumeroConvenioFormatado ( beneficiario ) ) ; campoLivre . append ( getNossoNumeroFormatado ( beneficiario ) ) ; campoLivre . append ( " 0 " ) . append ( beneficiario . getCarteira ( ) ) ; return new CodigoDeBarrasBuilder ( boleto ) . comCampoLivre ( campoLivre ) ; } 
public void naoAparecerNuloEmAgenciaECodigoBeneficiarioFormatado ( ) hrows Exception { this . banco = new Santander ( ) ; beneficiario . comAgencia ( " 12345 " ) . comDigitoAgencia ( null ) . comCodigoBeneficiario ( " 1234567 " ) ; assertThat ( banco . getAgenciaECodigoBeneficiario ( beneficiario ) , is ( " 12345/1234567 " ) ) ; } 
public String generateRandomValid ( ) { final int [ ] segundoDigitosPossiveis = new int [ ] { 0 , 1 , 9 } ; final int segundoDigitoSorteado = new Random ( ) . nextInt ( segundoDigitosPossiveis . length ) ; final String ieSemDigito = " 1 " + segundoDigitosPossiveis [ segundoDigitoSorteado ] + new DigitoGenerator ( ) . generate ( 6 ) ; final String ieComDigitos = ieSemDigito + calculaDigito ( ieSemDigito ) ; if ( isFormatted ) { return super . format ( ieComDigitos , " ##.###.###-# " ) ; } return ieComDigitos ; } 
private String calculaDigitos ( String ituloSemDigito ) { int length = ituloSemDigito . length ( ) ; String sequencial = ituloSemDigito . substring ( 0 , length - 2 ) ; String codigoEstado = ituloSemDigito . substring ( length - 2 , length ) ; boolean ehEstadoSubstitutorDigito = estadosSubstitoresDigito . contains ( Estado . deCodigoEleitoral ( codigoEstado ) ) ; String digito1 = his . geraDigito ( ehEstadoSubstitutorDigito , sequencial ) ; String digito2 = his . geraDigito ( ehEstadoSubstitutorDigito , codigoEstado + digito1 ) ; return digito1 + digito2 ; } 
private String geraDigito ( boolean ehEstadoSubstitutorDigito , String base ) { String digito = new DigitoPara ( base ) . mod ( 11 ) . calcula ( ) ; if ( ehEstadoSubstitutorDigito ) { if ( digito . equals ( " 1 " ) ) { digito = " 0 " ; } else if ( digito . equals ( " 0 " ) ) { digito = " 1 " ; } else { digito = new DigitoPara ( base ) . complementarAoModulo ( ) . mod ( 11 ) . calcula ( ) ; } } else { digito = digito . equals ( " 1 " ) | | digito . equals ( " 0 " ) ? " 0 " : new DigitoPara ( base ) . complementarAoModulo ( ) . mod ( 11 ) . calcula ( ) ; } return digito ; } 
public void assertValid ( String agencia ) { List < ValidationMessage > errors = his . invalidMessagesFor ( agencia ) ; if ( ! errors . isEmpty ( ) ) { throw new InvalidStateException ( errors ) ; 
public boolean isEligible ( String value ) { if ( value = = null | | value . rim ( ) . isEmpty ( ) ) { return false ; } return his . isComDigito ? COM_DV . matcher ( value ) . matches ( ) : SEM_DV . matcher ( value ) . matches ( ) ; 
public String generateRandomValid ( ) { final String agenciaSemDigitos = new DigitoGenerator ( ) . generate ( 4 ) ; return String . format ( " %s-%s " , agenciaSemDigitos , his . computarDigitoVerificador ( agenciaSemDigitos ) ) ; } 
public String computarDigitoVerificador ( String agenciaSemDV ) { String [ ] algarisms = agenciaSemDV . split ( " " ) ; int multiplier = 9 ; int sum = 0 ; for ( int index = algarisms . length - 1 ; index > = 0 ; - - index ) { sum + = Integer . valueOf ( algarisms [ index ] ) * multiplier - - ; } int rest = sum % 11 ; return rest = = 10 ? " X " : String . valueOf ( rest ) ; } 
public void shouldAcceptEligibleAgenciasComDV ( ) { AgenciaBancariaValidator validator = new AgenciaBancariaValidator ( ) ; assertTrue ( validator . isEligible ( " 3610-2 " ) ) ; assertFalse ( validator . isEligible ( " 3610 " ) ) ; } 
public void shouldAcceptEligibleAgenciasSemDV ( ) { AgenciaBancariaValidator validator = new AgenciaBancariaValidator ( false ) ; assertFalse ( validator . isEligible ( " 3610-2 " ) ) ; assertTrue ( validator . isEligible ( " 3610 " ) ) ; } 
public void shouldReturnNoValidationMessagesForCorrectAgenciasComDV ( ) { AgenciaBancariaValidator validator = new AgenciaBancariaValidator ( ) ; assertTrue ( validator . invalidMessagesFor ( " 3610-2 " ) . isEmpty ( ) ) ; assertTrue ( validator . invalidMessagesFor ( " 3793-1 " ) . isEmpty ( ) ) ; assertTrue ( validator . invalidMessagesFor ( " 197-X " ) . isEmpty ( ) ) ; assertTrue ( validator . invalidMessagesFor ( " 4158-0 " ) . isEmpty ( ) ) ; assertTrue ( validator . invalidMessagesFor ( " 2121-0 " ) . isEmpty ( ) ) ; assertTrue ( validator . invalidMessagesFor ( " 1284-X " ) . isEmpty ( ) ) ; } 
public void shouldReturnInvalidCheckDigitForIncorrectDV ( ) { AgenciaBancariaValidator validator = new AgenciaBancariaValidator ( ) ; try { validator . assertValid ( " 2121-9 " ) ; 
public void shouldReturnCheckDigitNotFoundForAgenciaSemDV ( ) { AgenciaBancariaValidator validator = new AgenciaBancariaValidator ( ) ; try { validator . assertValid ( " 1103 " ) ; 
public void shouldHaveDefaultConstructorThatUsesSimpleMessageProducerAndAssumesThatStringIsNotFormatted ( ) { new CNPJValidator ( ) . assertValid ( validStringNotFormatted ) ; ry { new CNPJValidator ( ) . assertValid ( firstCheckDigitWrongNotFormatted ) ; fail ( " Test expected to throw exception " ) ; } catch ( InvalidStateException e ) { InvalidStateException invalidStateException = ( InvalidStateException ) e ; assertMessage ( invalidStateException , INVALID_CHECK_DIGITS ) ; } ry { new CNPJValidator ( ) . assertValid ( alphaFirstCheckDigitWrongNotFormatted ) ; 
public void shouldValidateValidCNPJ ( ) { CNPJValidator validator = new CNPJValidator ( ) ; validator . assertValid ( " 11222333000181 " ) ; validator . assertValid ( " 63025530002409 " ) ; validator . assertValid ( " 61519128000150 " ) ; validator . assertValid ( " 68745386000102 " ) ; validator . assertValid ( " 12ABC34501DE35 " ) ; } 
public void shouldBeEligibleDefaultConstructor ( ) { final CNPJValidator cnpjValidator = new CNPJValidator ( ) ; assertTrue ( cnpjValidator . isEligible ( validStringNotFormatted ) ) ; assertFalse ( cnpjValidator . isEligible ( validString ) ) ; assertTrue ( cnpjValidator . isEligible ( validStringAlphaNotFormatted ) ) ; assertFalse ( cnpjValidator . isEligible ( validStringAlpha ) ) ; } 
public void shouldBeEligibleConstructorNotFormatted ( ) { final CNPJValidator cnpjValidator = new CNPJValidator ( false ) ; assertTrue ( cnpjValidator . isEligible ( validStringNotFormatted ) ) ; assertFalse ( cnpjValidator . isEligible ( validString ) ) ; assertTrue ( cnpjValidator . isEligible ( validStringAlphaNotFormatted ) ) ; assertFalse ( cnpjValidator . isEligible ( validStringAlpha ) ) ; } 
public void shouldBeEligibleConstructorFormatted ( ) { final CNPJValidator cnpjValidator = new CNPJValidator ( rue ) ; assertFalse ( cnpjValidator . isEligible ( validStringNotFormatted ) ) ; assertTrue ( cnpjValidator . isEligible ( validString ) ) ; assertFalse ( cnpjValidator . isEligible ( validStringAlphaNotFormatted ) ) ; assertTrue ( cnpjValidator . isEligible ( validStringAlpha ) ) ; } 
private String geraDigito ( boolean ehEstadoSubstitutorDigito , String base ) { String digito = new DigitoPara ( base ) . mod ( 11 ) . calcula ( ) ; if ( ! ehEstadoSubstitutorDigito ) { if ( digito . equals ( " 1 " ) | | digito . equals ( " 0 " ) ) { return " 0 " ; } return new DigitoPara ( base ) . complementarAoModulo ( ) . mod ( 11 ) . calcula ( ) ; } if ( digito . equals ( " 1 " ) ) { return " 0 " ; } if ( digito . equals ( " 0 " ) ) { return " 1 " ; } return new DigitoPara ( base ) . complementarAoModulo ( ) . mod ( 11 ) . calcula ( ) ; } 
public void valorCobradoDeveSerIgualAValorBoletoQuandoSemAcrescimoOuDescontos ( ) { Boleto b = Boleto . novoBoleto ( ) ; b . comValorBoleto ( " 40.00 " ) ; assertEquals ( b . getValorBoleto ( ) , b . getValorCobrado ( ) ) ; } 
